
TimeSyncMbed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000fc0c  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000c4  200000b0  0000fc0c  000180b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00004658  20000174  0000fcd0  00018174  2**2
                  ALLOC
  3 .heap         00001834  200047cc  00014328  00018174  2**0
                  ALLOC
  4 .stack        00002000  20006000  00015b5c  00018174  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00018174  2**0
                  CONTENTS, READONLY
  6 .comment      000000cb  00000000  00000000  0001819c  2**0
                  CONTENTS, READONLY
  7 .debug_info   0004275c  00000000  00000000  00018267  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00006bf2  00000000  00000000  0005a9c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00008a24  00000000  00000000  000615b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000ac0  00000000  00000000  00069fd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000a20  00000000  00000000  0006aa99  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000103e3  00000000  00000000  0006b4b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001df7f  00000000  00000000  0007b89c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00089c9b  00000000  00000000  0009981b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000033d8  00000000  00000000  001234b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .stabstr      00000076  00000000  00000000  00126890  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20008000 	.word	0x20008000
       4:	00003ebd 	.word	0x00003ebd
       8:	00003eb9 	.word	0x00003eb9
       c:	00003eb9 	.word	0x00003eb9
	...
      2c:	000010bd 	.word	0x000010bd
	...
      38:	00001129 	.word	0x00001129
      3c:	0000116d 	.word	0x0000116d
      40:	00003eb9 	.word	0x00003eb9
      44:	00003eb9 	.word	0x00003eb9
      48:	00003eb9 	.word	0x00003eb9
      4c:	0000182d 	.word	0x0000182d
      50:	00003f7d 	.word	0x00003f7d
      54:	00003eb9 	.word	0x00003eb9
      58:	00003eb9 	.word	0x00003eb9
      5c:	00000000 	.word	0x00000000
      60:	00003eb9 	.word	0x00003eb9
      64:	00003eb9 	.word	0x00003eb9
      68:	00003eb9 	.word	0x00003eb9
      6c:	00003eb9 	.word	0x00003eb9
      70:	00003eb9 	.word	0x00003eb9
	...
      7c:	00003eb9 	.word	0x00003eb9
      80:	00003eb9 	.word	0x00003eb9
      84:	00003eb9 	.word	0x00003eb9
      88:	0000614d 	.word	0x0000614d
      8c:	00006159 	.word	0x00006159
      90:	00006165 	.word	0x00006165
	...
      ac:	00003eb9 	.word	0x00003eb9
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000174 	.word	0x20000174
      d4:	00000000 	.word	0x00000000
      d8:	0000fc0c 	.word	0x0000fc0c

000000dc <frame_dummy>:
      dc:	b508      	push	{r3, lr}
      de:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4807      	ldr	r0, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4908      	ldr	r1, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd08      	pop	{r3, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	0000fc0c 	.word	0x0000fc0c
     108:	20000178 	.word	0x20000178
     10c:	0000fc0c 	.word	0x0000fc0c
     110:	00000000 	.word	0x00000000

00000114 <CLP_GenerateEscape>:
  pos += 3;
  memcpy(data.relay_hardware, buffer + pos, 3);
  pos += 3;
  memcpy(data.lcd_map, buffer + pos, 20);
  pos += 20;
  memcpy(data.output_state, buffer + pos, 16);
     114:	b5f0      	push	{r4, r5, r6, r7, lr}
     116:	b0cd      	sub	sp, #308	; 0x134
  pos += 16;
}
     118:	2800      	cmp	r0, #0
     11a:	d004      	beq.n	126 <CLP_GenerateEscape+0x12>
     11c:	2300      	movs	r3, #0
     11e:	2200      	movs	r2, #0
     120:	2900      	cmp	r1, #0
     122:	d105      	bne.n	130 <CLP_GenerateEscape+0x1c>
     124:	e01b      	b.n	15e <CLP_GenerateEscape+0x4a>
     126:	2201      	movs	r2, #1

size_t CLP_GenerateEscape(uint8_t* buffer, size_t length)
{
  if(!buffer)
  {
    CLP_G_ERROR_VAL = CLP_LIB_ERROR_BUFFER_NOT_GIVEN;
     128:	4b11      	ldr	r3, [pc, #68]	; (170 <CLP_GenerateEscape+0x5c>)
     12a:	601a      	str	r2, [r3, #0]
    return 0;
     12c:	2400      	movs	r4, #0
     12e:	e01b      	b.n	168 <CLP_GenerateEscape+0x54>
//  uint8_t* temp = new uint8_t[length + count];
//  count = 0;

  for(size_t i = 0; i < length; ++i)
  {
    switch(buffer[i])
     130:	4e10      	ldr	r6, [pc, #64]	; (174 <CLP_GenerateEscape+0x60>)
      case CLP_ESCAPE_ETX:
      case CLP_ESCAPE_XON:
      case CLP_ESCAPE_XOFF:
      case CLP_ESCAPE_DLE:
      {
        temp[i + count] = CLP_ESCAPE_DLE;
     132:	2710      	movs	r7, #16
//  uint8_t* temp = new uint8_t[length + count];
//  count = 0;

  for(size_t i = 0; i < length; ++i)
  {
    switch(buffer[i])
     134:	5cc4      	ldrb	r4, [r0, r3]
     136:	2c13      	cmp	r4, #19
     138:	d80b      	bhi.n	152 <CLP_GenerateEscape+0x3e>
     13a:	00a5      	lsls	r5, r4, #2
     13c:	5975      	ldr	r5, [r6, r5]
     13e:	46af      	mov	pc, r5
      case CLP_ESCAPE_ETX:
      case CLP_ESCAPE_XON:
      case CLP_ESCAPE_XOFF:
      case CLP_ESCAPE_DLE:
      {
        temp[i + count] = CLP_ESCAPE_DLE;
     140:	ad01      	add	r5, sp, #4
     142:	18ad      	adds	r5, r5, r2
     144:	54ef      	strb	r7, [r5, r3]
        ++count;
     146:	3201      	adds	r2, #1
        temp[i + count] = buffer[i] + 0x40;
     148:	ad01      	add	r5, sp, #4
     14a:	18ad      	adds	r5, r5, r2
     14c:	3440      	adds	r4, #64	; 0x40
     14e:	54ec      	strb	r4, [r5, r3]
      }
      break;
     150:	e002      	b.n	158 <CLP_GenerateEscape+0x44>
      default: temp[i + count] = buffer[i];
     152:	ad01      	add	r5, sp, #4
     154:	18ad      	adds	r5, r5, r2
     156:	54ec      	strb	r4, [r5, r3]

  uint8_t temp[CLP_UTILITY_MAX_PACKET_SIZE];
//  uint8_t* temp = new uint8_t[length + count];
//  count = 0;

  for(size_t i = 0; i < length; ++i)
     158:	3301      	adds	r3, #1
     15a:	428b      	cmp	r3, r1
     15c:	d1ea      	bne.n	134 <CLP_GenerateEscape+0x20>
      break;
      default: temp[i + count] = buffer[i];
    }
  }

  memcpy(buffer, temp, length + count);
     15e:	1854      	adds	r4, r2, r1
     160:	a901      	add	r1, sp, #4
     162:	1c22      	adds	r2, r4, #0
     164:	4b04      	ldr	r3, [pc, #16]	; (178 <CLP_GenerateEscape+0x64>)
     166:	4798      	blx	r3
//  delete[] temp;

  return length + count;
}
     168:	1c20      	adds	r0, r4, #0
     16a:	b04d      	add	sp, #308	; 0x134
     16c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     16e:	46c0      	nop			; (mov r8, r8)
     170:	20000190 	.word	0x20000190
     174:	0000e930 	.word	0x0000e930
     178:	00009d57 	.word	0x00009d57

0000017c <CLP_GeneratePacket>:

  return length + count;
}

size_t CLP_GeneratePacket(uint8_t* buffer, const uint8_t* data, size_t datalength)
{
     17c:	b570      	push	{r4, r5, r6, lr}
     17e:	1c04      	adds	r4, r0, #0
     180:	1c15      	adds	r5, r2, #0
  if(!buffer)
     182:	2800      	cmp	r0, #0
     184:	d104      	bne.n	190 <CLP_GeneratePacket+0x14>
  {
    CLP_G_ERROR_VAL = CLP_LIB_ERROR_BUFFER_NOT_GIVEN;
     186:	2201      	movs	r2, #1
     188:	4b12      	ldr	r3, [pc, #72]	; (1d4 <CLP_GeneratePacket+0x58>)
     18a:	601a      	str	r2, [r3, #0]
    return 0;
     18c:	2000      	movs	r0, #0
     18e:	e020      	b.n	1d2 <CLP_GeneratePacket+0x56>
  }

  if(!data)
     190:	2900      	cmp	r1, #0
     192:	d118      	bne.n	1c6 <CLP_GeneratePacket+0x4a>
  {
    CLP_G_ERROR_VAL = CLP_LIB_ERROR_PARAM_NOT_GIVEN;
     194:	2203      	movs	r2, #3
     196:	4b0f      	ldr	r3, [pc, #60]	; (1d4 <CLP_GeneratePacket+0x58>)
     198:	601a      	str	r2, [r3, #0]
    datalength = 0;
  }

  buffer[0] = CLP_ESCAPE_STX;
     19a:	2302      	movs	r3, #2
     19c:	7003      	strb	r3, [r0, #0]
  }

  if(!data)
  {
    CLP_G_ERROR_VAL = CLP_LIB_ERROR_PARAM_NOT_GIVEN;
    datalength = 0;
     19e:	2500      	movs	r5, #0
  size_t length = 1;
  if(data)
  {
    memcpy(buffer + length, data, datalength);
  }
  length += datalength;
     1a0:	1c6e      	adds	r6, r5, #1
  uint16_t crc = CalculateBufferCRC16(buffer, length, 0x0000);
     1a2:	1c20      	adds	r0, r4, #0
     1a4:	1c31      	adds	r1, r6, #0
     1a6:	2200      	movs	r2, #0
     1a8:	4b0b      	ldr	r3, [pc, #44]	; (1d8 <CLP_GeneratePacket+0x5c>)
     1aa:	4798      	blx	r3
     1ac:	1c05      	adds	r5, r0, #0
  length = CLP_GenerateEscape(buffer + 1, length);
     1ae:	1c60      	adds	r0, r4, #1
     1b0:	1c31      	adds	r1, r6, #0
     1b2:	4b0a      	ldr	r3, [pc, #40]	; (1dc <CLP_GeneratePacket+0x60>)
     1b4:	4798      	blx	r3

  buffer[length + 2] = CLP_ESCAPE_ETX;
     1b6:	1823      	adds	r3, r4, r0
     1b8:	2203      	movs	r2, #3
     1ba:	709a      	strb	r2, [r3, #2]
  buffer[length] = crc & 255;
     1bc:	5425      	strb	r5, [r4, r0]
  buffer[length+1] = (crc >> 8) & 255;
     1be:	0a2d      	lsrs	r5, r5, #8
     1c0:	705d      	strb	r5, [r3, #1]
 //(*(uint16_t*)&buffer[length]) = _byteswap_ushort(crc);
  length += 3;
     1c2:	3003      	adds	r0, #3

  return length;
     1c4:	e005      	b.n	1d2 <CLP_GeneratePacket+0x56>
  {
    CLP_G_ERROR_VAL = CLP_LIB_ERROR_PARAM_NOT_GIVEN;
    datalength = 0;
  }

  buffer[0] = CLP_ESCAPE_STX;
     1c6:	2302      	movs	r3, #2
     1c8:	7003      	strb	r3, [r0, #0]
  size_t length = 1;
  if(data)
  {
    memcpy(buffer + length, data, datalength);
     1ca:	3001      	adds	r0, #1
     1cc:	4b04      	ldr	r3, [pc, #16]	; (1e0 <CLP_GeneratePacket+0x64>)
     1ce:	4798      	blx	r3
     1d0:	e7e6      	b.n	1a0 <CLP_GeneratePacket+0x24>
  buffer[length+1] = (crc >> 8) & 255;
 //(*(uint16_t*)&buffer[length]) = _byteswap_ushort(crc);
  length += 3;

  return length;
}
     1d2:	bd70      	pop	{r4, r5, r6, pc}
     1d4:	20000190 	.word	0x20000190
     1d8:	00000231 	.word	0x00000231
     1dc:	00000115 	.word	0x00000115
     1e0:	00009d57 	.word	0x00009d57

000001e4 <_Z9gencrc_16t>:
// Purpose: Functions to generate CRC16-CCITT parity values.

#include "crc.h"

uint16_t gencrc_16(uint16_t i)
{
     1e4:	b510      	push	{r4, lr}
  uint16_t j;
  uint16_t k;
  uint16_t crc;

  k = i<<8;
     1e6:	0200      	lsls	r0, r0, #8
     1e8:	b283      	uxth	r3, r0
     1ea:	2208      	movs	r2, #8
  crc = 0;
     1ec:	2000      	movs	r0, #0

  for(j = 0; j < 8; j++)
  {
    if((crc ^ k)&0x8000)
    {
      crc = (crc<<1)^0x1021;
     1ee:	4c09      	ldr	r4, [pc, #36]	; (214 <_Z9gencrc_16t+0x30>)
  k = i<<8;
  crc = 0;

  for(j = 0; j < 8; j++)
  {
    if((crc ^ k)&0x8000)
     1f0:	1c01      	adds	r1, r0, #0
     1f2:	4059      	eors	r1, r3
     1f4:	b209      	sxth	r1, r1
     1f6:	2900      	cmp	r1, #0
     1f8:	da03      	bge.n	202 <_Z9gencrc_16t+0x1e>
    {
      crc = (crc<<1)^0x1021;
     1fa:	0040      	lsls	r0, r0, #1
     1fc:	4060      	eors	r0, r4
     1fe:	b280      	uxth	r0, r0
     200:	e001      	b.n	206 <_Z9gencrc_16t+0x22>
    }
    else
    {
      crc <<= 1;
     202:	0040      	lsls	r0, r0, #1
     204:	b280      	uxth	r0, r0
    }
    k <<= 1;
     206:	005b      	lsls	r3, r3, #1
     208:	b29b      	uxth	r3, r3
     20a:	3a01      	subs	r2, #1
     20c:	b292      	uxth	r2, r2
  uint16_t crc;

  k = i<<8;
  crc = 0;

  for(j = 0; j < 8; j++)
     20e:	2a00      	cmp	r2, #0
     210:	d1ee      	bne.n	1f0 <_Z9gencrc_16t+0xc>
    }
    k <<= 1;
  }

  return(crc);
}
     212:	bd10      	pop	{r4, pc}
     214:	00001021 	.word	0x00001021

00000218 <_Z23CalculateCharacterCRC16th>:

uint16_t CalculateCharacterCRC16(uint16_t crc, uint8_t c)
{
     218:	b510      	push	{r4, lr}
     21a:	1c04      	adds	r4, r0, #0
  return ((crc<<8)^gencrc_16((crc>>8)^c));
     21c:	1200      	asrs	r0, r0, #8
     21e:	4048      	eors	r0, r1
     220:	4b02      	ldr	r3, [pc, #8]	; (22c <_Z23CalculateCharacterCRC16th+0x14>)
     222:	4798      	blx	r3
     224:	0224      	lsls	r4, r4, #8
     226:	4060      	eors	r0, r4
     228:	b280      	uxth	r0, r0
}
     22a:	bd10      	pop	{r4, pc}
     22c:	000001e5 	.word	0x000001e5

00000230 <_Z20CalculateBufferCRC16PKhjt>:

uint16_t CalculateBufferCRC16(const uint8_t* buffer, size_t length, uint16_t start = 0x1D0F)
{
     230:	b570      	push	{r4, r5, r6, lr}
     232:	1c05      	adds	r5, r0, #0
     234:	1c10      	adds	r0, r2, #0
  uint16_t crc = start;
//  uint16_t crc = 0xFFFF;

  for(size_t i = 0; i < length; ++i)
     236:	2900      	cmp	r1, #0
     238:	d007      	beq.n	24a <_Z20CalculateBufferCRC16PKhjt+0x1a>
     23a:	1c2c      	adds	r4, r5, #0
     23c:	186d      	adds	r5, r5, r1
  {
    crc = CalculateCharacterCRC16(crc, buffer[i]);
     23e:	4e03      	ldr	r6, [pc, #12]	; (24c <_Z20CalculateBufferCRC16PKhjt+0x1c>)
     240:	7821      	ldrb	r1, [r4, #0]
     242:	47b0      	blx	r6
     244:	3401      	adds	r4, #1
uint16_t CalculateBufferCRC16(const uint8_t* buffer, size_t length, uint16_t start = 0x1D0F)
{
  uint16_t crc = start;
//  uint16_t crc = 0xFFFF;

  for(size_t i = 0; i < length; ++i)
     246:	42ac      	cmp	r4, r5
     248:	d1fa      	bne.n	240 <_Z20CalculateBufferCRC16PKhjt+0x10>
  {
    crc = CalculateCharacterCRC16(crc, buffer[i]);
  }
  return crc;
}
     24a:	bd70      	pop	{r4, r5, r6, pc}
     24c:	00000219 	.word	0x00000219

00000250 <vApplicationIdleHook>:
#include <conf_timeProtocol.h>



portTickType saveTimeRCrash=0;
void vApplicationIdleHook( void ){
     250:	b508      	push	{r3, lr}
	
		if(xTaskGetTickCount()-saveTimeRCrash>(TIME_CRASH_RX/portTICK_RATE_MS)){
     252:	4b0f      	ldr	r3, [pc, #60]	; (290 <vApplicationIdleHook+0x40>)
     254:	4798      	blx	r3
     256:	4b0f      	ldr	r3, [pc, #60]	; (294 <vApplicationIdleHook+0x44>)
     258:	681b      	ldr	r3, [r3, #0]
     25a:	1ac0      	subs	r0, r0, r3
     25c:	4b0e      	ldr	r3, [pc, #56]	; (298 <vApplicationIdleHook+0x48>)
     25e:	4298      	cmp	r0, r3
     260:	d913      	bls.n	28a <vApplicationIdleHook+0x3a>
			saveTimeRCrash=xTaskGetTickCount();
     262:	4b0b      	ldr	r3, [pc, #44]	; (290 <vApplicationIdleHook+0x40>)
     264:	4798      	blx	r3
     266:	4b0b      	ldr	r3, [pc, #44]	; (294 <vApplicationIdleHook+0x44>)
     268:	6018      	str	r0, [r3, #0]
			if(clearRCrash==true){
     26a:	4b0c      	ldr	r3, [pc, #48]	; (29c <vApplicationIdleHook+0x4c>)
     26c:	781b      	ldrb	r3, [r3, #0]
     26e:	2b01      	cmp	r3, #1
     270:	d108      	bne.n	284 <vApplicationIdleHook+0x34>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     272:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
     276:	4a0a      	ldr	r2, [pc, #40]	; (2a0 <vApplicationIdleHook+0x50>)
     278:	4b0a      	ldr	r3, [pc, #40]	; (2a4 <vApplicationIdleHook+0x54>)
     27a:	60da      	str	r2, [r3, #12]
     27c:	f3bf 8f4f 	dsb	sy

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
     280:	46c0      	nop			; (mov r8, r8)
     282:	e7fd      	b.n	280 <vApplicationIdleHook+0x30>
				NVIC_SystemReset();
			}
			else{
				clearRCrash=true;
     284:	2201      	movs	r2, #1
     286:	4b05      	ldr	r3, [pc, #20]	; (29c <vApplicationIdleHook+0x4c>)
     288:	701a      	strb	r2, [r3, #0]
			}
		}
		
			wdt_clear();
     28a:	4b07      	ldr	r3, [pc, #28]	; (2a8 <vApplicationIdleHook+0x58>)
     28c:	4798      	blx	r3
     28e:	bd08      	pop	{r3, pc}
     290:	00000b2d 	.word	0x00000b2d
     294:	20000194 	.word	0x20000194
     298:	0000c350 	.word	0x0000c350
     29c:	20000198 	.word	0x20000198
     2a0:	05fa0004 	.word	0x05fa0004
     2a4:	e000ed00 	.word	0xe000ed00
     2a8:	000002c9 	.word	0x000002c9

000002ac <wdt_reset_count>:
void wdt_reset_count(void)
{
	Wdt *const WDT_module = WDT;

	/* Disable the Watchdog module */
	WDT_module->CLEAR.reg = WDT_CLEAR_CLEAR_KEY;
     2ac:	22a5      	movs	r2, #165	; 0xa5
     2ae:	4b04      	ldr	r3, [pc, #16]	; (2c0 <wdt_reset_count+0x14>)
     2b0:	721a      	strb	r2, [r3, #8]
	Wdt *const WDT_module = WDT;

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	if (WDT_module->SYNCBUSY.reg) {
#else
	if (WDT_module->STATUS.reg & WDT_STATUS_SYNCBUSY) {
     2b2:	1c1a      	adds	r2, r3, #0
     2b4:	79d3      	ldrb	r3, [r2, #7]

	while (wdt_is_syncing()) {
     2b6:	b25b      	sxtb	r3, r3
     2b8:	2b00      	cmp	r3, #0
     2ba:	dbfb      	blt.n	2b4 <wdt_reset_count+0x8>
		/* Wait for all hardware modules to complete synchronization */
	}
}
     2bc:	4770      	bx	lr
     2be:	46c0      	nop			; (mov r8, r8)
     2c0:	40001000 	.word	0x40001000

000002c4 <_Z10wdt_configv>:
	//! [setup_4]	
	//hmi.printf("config wdt\r\n");
	
	
	
}
     2c4:	4770      	bx	lr
     2c6:	46c0      	nop			; (mov r8, r8)

000002c8 <wdt_clear>:
void wdt_clear(void){
     2c8:	b508      	push	{r3, lr}
	wdt_reset_count();
     2ca:	4b01      	ldr	r3, [pc, #4]	; (2d0 <wdt_clear+0x8>)
     2cc:	4798      	blx	r3
	
     2ce:	bd08      	pop	{r3, pc}
     2d0:	000002ad 	.word	0x000002ad

000002d4 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
     2d4:	b510      	push	{r4, lr}
     2d6:	1c04      	adds	r4, r0, #0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
     2d8:	6c03      	ldr	r3, [r0, #64]	; 0x40
     2da:	2b00      	cmp	r3, #0
     2dc:	d108      	bne.n	2f0 <prvCopyDataToQueue+0x1c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     2de:	6803      	ldr	r3, [r0, #0]
     2e0:	2b00      	cmp	r3, #0
     2e2:	d126      	bne.n	332 <prvCopyDataToQueue+0x5e>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
     2e4:	6840      	ldr	r0, [r0, #4]
     2e6:	4b15      	ldr	r3, [pc, #84]	; (33c <prvCopyDataToQueue+0x68>)
     2e8:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
     2ea:	2300      	movs	r3, #0
     2ec:	6063      	str	r3, [r4, #4]
     2ee:	e020      	b.n	332 <prvCopyDataToQueue+0x5e>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
     2f0:	2a00      	cmp	r2, #0
     2f2:	d10e      	bne.n	312 <prvCopyDataToQueue+0x3e>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
     2f4:	6880      	ldr	r0, [r0, #8]
     2f6:	1c1a      	adds	r2, r3, #0
     2f8:	4b11      	ldr	r3, [pc, #68]	; (340 <prvCopyDataToQueue+0x6c>)
     2fa:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
     2fc:	68a3      	ldr	r3, [r4, #8]
     2fe:	6c22      	ldr	r2, [r4, #64]	; 0x40
     300:	4694      	mov	ip, r2
     302:	4463      	add	r3, ip
     304:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
     306:	6862      	ldr	r2, [r4, #4]
     308:	4293      	cmp	r3, r2
     30a:	d312      	bcc.n	332 <prvCopyDataToQueue+0x5e>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
     30c:	6823      	ldr	r3, [r4, #0]
     30e:	60a3      	str	r3, [r4, #8]
     310:	e00f      	b.n	332 <prvCopyDataToQueue+0x5e>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
     312:	68c0      	ldr	r0, [r0, #12]
     314:	1c1a      	adds	r2, r3, #0
     316:	4b0a      	ldr	r3, [pc, #40]	; (340 <prvCopyDataToQueue+0x6c>)
     318:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
     31a:	6c23      	ldr	r3, [r4, #64]	; 0x40
     31c:	425b      	negs	r3, r3
     31e:	68e2      	ldr	r2, [r4, #12]
     320:	18d2      	adds	r2, r2, r3
     322:	60e2      	str	r2, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
     324:	6821      	ldr	r1, [r4, #0]
     326:	428a      	cmp	r2, r1
     328:	d203      	bcs.n	332 <prvCopyDataToQueue+0x5e>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
     32a:	6862      	ldr	r2, [r4, #4]
     32c:	4694      	mov	ip, r2
     32e:	4463      	add	r3, ip
     330:	60e3      	str	r3, [r4, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
     332:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     334:	3301      	adds	r3, #1
     336:	63a3      	str	r3, [r4, #56]	; 0x38
}
     338:	bd10      	pop	{r4, pc}
     33a:	46c0      	nop			; (mov r8, r8)
     33c:	00001035 	.word	0x00001035
     340:	00009d57 	.word	0x00009d57

00000344 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
     344:	b538      	push	{r3, r4, r5, lr}
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
     346:	6804      	ldr	r4, [r0, #0]
     348:	2c00      	cmp	r4, #0
     34a:	d00c      	beq.n	366 <prvCopyDataFromQueue+0x22>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
     34c:	6c02      	ldr	r2, [r0, #64]	; 0x40
     34e:	68c3      	ldr	r3, [r0, #12]
     350:	189b      	adds	r3, r3, r2
     352:	60c3      	str	r3, [r0, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
     354:	6845      	ldr	r5, [r0, #4]
     356:	42ab      	cmp	r3, r5
     358:	d300      	bcc.n	35c <prvCopyDataFromQueue+0x18>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
     35a:	60c4      	str	r4, [r0, #12]
     35c:	1c0b      	adds	r3, r1, #0
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( size_t ) pxQueue->uxItemSize );
     35e:	68c1      	ldr	r1, [r0, #12]
     360:	1c18      	adds	r0, r3, #0
     362:	4b01      	ldr	r3, [pc, #4]	; (368 <prvCopyDataFromQueue+0x24>)
     364:	4798      	blx	r3
	}
}
     366:	bd38      	pop	{r3, r4, r5, pc}
     368:	00009d57 	.word	0x00009d57

0000036c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQUEUE *pxQueue )
{
     36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     36e:	1c04      	adds	r4, r0, #0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
     370:	4b21      	ldr	r3, [pc, #132]	; (3f8 <prvUnlockQueue+0x8c>)
     372:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
     374:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     376:	2b00      	cmp	r3, #0
     378:	dd16      	ble.n	3a8 <prvUnlockQueue+0x3c>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     37a:	6a63      	ldr	r3, [r4, #36]	; 0x24
     37c:	2b00      	cmp	r3, #0
     37e:	d104      	bne.n	38a <prvUnlockQueue+0x1e>
     380:	e012      	b.n	3a8 <prvUnlockQueue+0x3c>
     382:	6a63      	ldr	r3, [r4, #36]	; 0x24
     384:	2b00      	cmp	r3, #0
     386:	d104      	bne.n	392 <prvUnlockQueue+0x26>
     388:	e00e      	b.n	3a8 <prvUnlockQueue+0x3c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     38a:	1c25      	adds	r5, r4, #0
     38c:	3524      	adds	r5, #36	; 0x24
     38e:	4f1b      	ldr	r7, [pc, #108]	; (3fc <prvUnlockQueue+0x90>)
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
     390:	4e1b      	ldr	r6, [pc, #108]	; (400 <prvUnlockQueue+0x94>)
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     392:	1c28      	adds	r0, r5, #0
     394:	47b8      	blx	r7
     396:	2800      	cmp	r0, #0
     398:	d000      	beq.n	39c <prvUnlockQueue+0x30>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
     39a:	47b0      	blx	r6
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
     39c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     39e:	3b01      	subs	r3, #1
     3a0:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
     3a2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     3a4:	2b00      	cmp	r3, #0
     3a6:	dcec      	bgt.n	382 <prvUnlockQueue+0x16>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
     3a8:	2301      	movs	r3, #1
     3aa:	425b      	negs	r3, r3
     3ac:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
     3ae:	4b15      	ldr	r3, [pc, #84]	; (404 <prvUnlockQueue+0x98>)
     3b0:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
     3b2:	4b11      	ldr	r3, [pc, #68]	; (3f8 <prvUnlockQueue+0x8c>)
     3b4:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
     3b6:	6c63      	ldr	r3, [r4, #68]	; 0x44
     3b8:	2b00      	cmp	r3, #0
     3ba:	dd16      	ble.n	3ea <prvUnlockQueue+0x7e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     3bc:	6923      	ldr	r3, [r4, #16]
     3be:	2b00      	cmp	r3, #0
     3c0:	d104      	bne.n	3cc <prvUnlockQueue+0x60>
     3c2:	e012      	b.n	3ea <prvUnlockQueue+0x7e>
     3c4:	6923      	ldr	r3, [r4, #16]
     3c6:	2b00      	cmp	r3, #0
     3c8:	d104      	bne.n	3d4 <prvUnlockQueue+0x68>
     3ca:	e00e      	b.n	3ea <prvUnlockQueue+0x7e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     3cc:	1c25      	adds	r5, r4, #0
     3ce:	3510      	adds	r5, #16
     3d0:	4f0a      	ldr	r7, [pc, #40]	; (3fc <prvUnlockQueue+0x90>)
				{
					vTaskMissedYield();
     3d2:	4e0b      	ldr	r6, [pc, #44]	; (400 <prvUnlockQueue+0x94>)
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     3d4:	1c28      	adds	r0, r5, #0
     3d6:	47b8      	blx	r7
     3d8:	2800      	cmp	r0, #0
     3da:	d000      	beq.n	3de <prvUnlockQueue+0x72>
				{
					vTaskMissedYield();
     3dc:	47b0      	blx	r6
				}

				--( pxQueue->xRxLock );
     3de:	6c63      	ldr	r3, [r4, #68]	; 0x44
     3e0:	3b01      	subs	r3, #1
     3e2:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
     3e4:	6c63      	ldr	r3, [r4, #68]	; 0x44
     3e6:	2b00      	cmp	r3, #0
     3e8:	dcec      	bgt.n	3c4 <prvUnlockQueue+0x58>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
     3ea:	2301      	movs	r3, #1
     3ec:	425b      	negs	r3, r3
     3ee:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
     3f0:	4b04      	ldr	r3, [pc, #16]	; (404 <prvUnlockQueue+0x98>)
     3f2:	4798      	blx	r3
}
     3f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     3f6:	46c0      	nop			; (mov r8, r8)
     3f8:	000010fd 	.word	0x000010fd
     3fc:	00000e95 	.word	0x00000e95
     400:	00000fa1 	.word	0x00000fa1
     404:	00001115 	.word	0x00001115

00000408 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle xQueue, portBASE_TYPE xNewQueue )
{
     408:	b538      	push	{r3, r4, r5, lr}
xQUEUE *pxQueue;

	pxQueue = ( xQUEUE * ) xQueue;
	configASSERT( pxQueue );
     40a:	2800      	cmp	r0, #0
     40c:	d101      	bne.n	412 <xQueueGenericReset+0xa>
     40e:	b672      	cpsid	i
     410:	e7fe      	b.n	410 <xQueueGenericReset+0x8>
     412:	1c0d      	adds	r5, r1, #0
     414:	1c04      	adds	r4, r0, #0

	taskENTER_CRITICAL();
     416:	4b15      	ldr	r3, [pc, #84]	; (46c <xQueueGenericReset+0x64>)
     418:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
     41a:	6822      	ldr	r2, [r4, #0]
     41c:	6c21      	ldr	r1, [r4, #64]	; 0x40
     41e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     420:	434b      	muls	r3, r1
     422:	18d0      	adds	r0, r2, r3
     424:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
     426:	2000      	movs	r0, #0
     428:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
     42a:	60a2      	str	r2, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
     42c:	1a5b      	subs	r3, r3, r1
     42e:	18d3      	adds	r3, r2, r3
     430:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
     432:	2301      	movs	r3, #1
     434:	425b      	negs	r3, r3
     436:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
     438:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
     43a:	2d00      	cmp	r5, #0
     43c:	d10b      	bne.n	456 <xQueueGenericReset+0x4e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     43e:	6923      	ldr	r3, [r4, #16]
     440:	2b00      	cmp	r3, #0
     442:	d00f      	beq.n	464 <xQueueGenericReset+0x5c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
     444:	1c20      	adds	r0, r4, #0
     446:	3010      	adds	r0, #16
     448:	4b09      	ldr	r3, [pc, #36]	; (470 <xQueueGenericReset+0x68>)
     44a:	4798      	blx	r3
     44c:	2801      	cmp	r0, #1
     44e:	d109      	bne.n	464 <xQueueGenericReset+0x5c>
				{
					portYIELD_WITHIN_API();
     450:	4b08      	ldr	r3, [pc, #32]	; (474 <xQueueGenericReset+0x6c>)
     452:	4798      	blx	r3
     454:	e006      	b.n	464 <xQueueGenericReset+0x5c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
     456:	1c20      	adds	r0, r4, #0
     458:	3010      	adds	r0, #16
     45a:	4d07      	ldr	r5, [pc, #28]	; (478 <xQueueGenericReset+0x70>)
     45c:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
     45e:	1c20      	adds	r0, r4, #0
     460:	3024      	adds	r0, #36	; 0x24
     462:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
     464:	4b05      	ldr	r3, [pc, #20]	; (47c <xQueueGenericReset+0x74>)
     466:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
     468:	2001      	movs	r0, #1
     46a:	bd38      	pop	{r3, r4, r5, pc}
     46c:	000010fd 	.word	0x000010fd
     470:	00000e95 	.word	0x00000e95
     474:	000010e5 	.word	0x000010e5
     478:	000007d1 	.word	0x000007d1
     47c:	00001115 	.word	0x00001115

00000480 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
     480:	b570      	push	{r4, r5, r6, lr}
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
     482:	2800      	cmp	r0, #0
     484:	d013      	beq.n	4ae <xQueueGenericCreate+0x2e>
     486:	1c0e      	adds	r6, r1, #0
     488:	1c05      	adds	r5, r0, #0
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
     48a:	204c      	movs	r0, #76	; 0x4c
     48c:	4b0d      	ldr	r3, [pc, #52]	; (4c4 <xQueueGenericCreate+0x44>)
     48e:	4798      	blx	r3
     490:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
     492:	d00c      	beq.n	4ae <xQueueGenericCreate+0x2e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
     494:	1c30      	adds	r0, r6, #0
     496:	4368      	muls	r0, r5
     498:	3001      	adds	r0, #1

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
     49a:	4b0a      	ldr	r3, [pc, #40]	; (4c4 <xQueueGenericCreate+0x44>)
     49c:	4798      	blx	r3
     49e:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
     4a0:	2800      	cmp	r0, #0
     4a2:	d106      	bne.n	4b2 <xQueueGenericCreate+0x32>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
     4a4:	1c20      	adds	r0, r4, #0
     4a6:	4b08      	ldr	r3, [pc, #32]	; (4c8 <xQueueGenericCreate+0x48>)
     4a8:	4798      	blx	r3
     4aa:	e000      	b.n	4ae <xQueueGenericCreate+0x2e>
			}
		}
	}

	configASSERT( xReturn );
     4ac:	e7fe      	b.n	4ac <xQueueGenericCreate+0x2c>
     4ae:	b672      	cpsid	i
     4b0:	e7fc      	b.n	4ac <xQueueGenericCreate+0x2c>
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
     4b2:	63e5      	str	r5, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
     4b4:	6426      	str	r6, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
     4b6:	1c20      	adds	r0, r4, #0
     4b8:	2101      	movs	r1, #1
     4ba:	4b04      	ldr	r3, [pc, #16]	; (4cc <xQueueGenericCreate+0x4c>)
     4bc:	4798      	blx	r3
	}

	configASSERT( xReturn );

	return xReturn;
}
     4be:	1c20      	adds	r0, r4, #0
     4c0:	bd70      	pop	{r4, r5, r6, pc}
     4c2:	46c0      	nop			; (mov r8, r8)
     4c4:	000011f1 	.word	0x000011f1
     4c8:	00001259 	.word	0x00001259
     4cc:	00000409 	.word	0x00000409

000004d0 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle xQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
     4d0:	b5f0      	push	{r4, r5, r6, r7, lr}
     4d2:	4657      	mov	r7, sl
     4d4:	b480      	push	{r7}
     4d6:	b086      	sub	sp, #24
     4d8:	9203      	str	r2, [sp, #12]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
xQUEUE *pxQueue;

	pxQueue = ( xQUEUE * ) xQueue;
	configASSERT( pxQueue );
     4da:	2800      	cmp	r0, #0
     4dc:	d101      	bne.n	4e2 <xQueueGenericSend+0x12>
     4de:	b672      	cpsid	i
     4e0:	e7fe      	b.n	4e0 <xQueueGenericSend+0x10>
     4e2:	2700      	movs	r7, #0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
     4e4:	2900      	cmp	r1, #0
     4e6:	d105      	bne.n	4f4 <xQueueGenericSend+0x24>
     4e8:	6c02      	ldr	r2, [r0, #64]	; 0x40
     4ea:	2a00      	cmp	r2, #0
     4ec:	d001      	beq.n	4f2 <xQueueGenericSend+0x22>
     4ee:	b672      	cpsid	i
     4f0:	e7fe      	b.n	4f0 <xQueueGenericSend+0x20>
     4f2:	2700      	movs	r7, #0
     4f4:	9302      	str	r3, [sp, #8]
     4f6:	9101      	str	r1, [sp, #4]
     4f8:	1c04      	adds	r4, r0, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
     4fa:	4d33      	ldr	r5, [pc, #204]	; (5c8 <xQueueGenericSend+0xf8>)
     4fc:	47a8      	blx	r5
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
     4fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     500:	6be2      	ldr	r2, [r4, #60]	; 0x3c
     502:	4293      	cmp	r3, r2
     504:	d213      	bcs.n	52e <xQueueGenericSend+0x5e>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
     506:	1c20      	adds	r0, r4, #0
     508:	9901      	ldr	r1, [sp, #4]
     50a:	9a02      	ldr	r2, [sp, #8]
     50c:	4b2f      	ldr	r3, [pc, #188]	; (5cc <xQueueGenericSend+0xfc>)
     50e:	4798      	blx	r3
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     510:	6a63      	ldr	r3, [r4, #36]	; 0x24
     512:	2b00      	cmp	r3, #0
     514:	d007      	beq.n	526 <xQueueGenericSend+0x56>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
     516:	1c20      	adds	r0, r4, #0
     518:	3024      	adds	r0, #36	; 0x24
     51a:	4b2d      	ldr	r3, [pc, #180]	; (5d0 <xQueueGenericSend+0x100>)
     51c:	4798      	blx	r3
     51e:	2801      	cmp	r0, #1
     520:	d101      	bne.n	526 <xQueueGenericSend+0x56>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							portYIELD_WITHIN_API();
     522:	4b2c      	ldr	r3, [pc, #176]	; (5d4 <xQueueGenericSend+0x104>)
     524:	4798      	blx	r3
						}
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
     526:	4b2c      	ldr	r3, [pc, #176]	; (5d8 <xQueueGenericSend+0x108>)
     528:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
     52a:	2001      	movs	r0, #1
     52c:	e048      	b.n	5c0 <xQueueGenericSend+0xf0>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
     52e:	9b03      	ldr	r3, [sp, #12]
     530:	2b00      	cmp	r3, #0
     532:	d103      	bne.n	53c <xQueueGenericSend+0x6c>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
     534:	4b28      	ldr	r3, [pc, #160]	; (5d8 <xQueueGenericSend+0x108>)
     536:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
     538:	2000      	movs	r0, #0
     53a:	e041      	b.n	5c0 <xQueueGenericSend+0xf0>
				}
				else if( xEntryTimeSet == pdFALSE )
     53c:	2f00      	cmp	r7, #0
     53e:	d103      	bne.n	548 <xQueueGenericSend+0x78>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
     540:	a804      	add	r0, sp, #16
     542:	4b26      	ldr	r3, [pc, #152]	; (5dc <xQueueGenericSend+0x10c>)
     544:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
     546:	3701      	adds	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
     548:	4b23      	ldr	r3, [pc, #140]	; (5d8 <xQueueGenericSend+0x108>)
     54a:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
     54c:	4b24      	ldr	r3, [pc, #144]	; (5e0 <xQueueGenericSend+0x110>)
     54e:	4798      	blx	r3
		prvLockQueue( pxQueue );
     550:	4b1d      	ldr	r3, [pc, #116]	; (5c8 <xQueueGenericSend+0xf8>)
     552:	4798      	blx	r3
     554:	6c63      	ldr	r3, [r4, #68]	; 0x44
     556:	3301      	adds	r3, #1
     558:	d101      	bne.n	55e <xQueueGenericSend+0x8e>
     55a:	2300      	movs	r3, #0
     55c:	6463      	str	r3, [r4, #68]	; 0x44
     55e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     560:	3301      	adds	r3, #1
     562:	d101      	bne.n	568 <xQueueGenericSend+0x98>
     564:	2300      	movs	r3, #0
     566:	64a3      	str	r3, [r4, #72]	; 0x48
     568:	4b1b      	ldr	r3, [pc, #108]	; (5d8 <xQueueGenericSend+0x108>)
     56a:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     56c:	a804      	add	r0, sp, #16
     56e:	a903      	add	r1, sp, #12
     570:	4b1c      	ldr	r3, [pc, #112]	; (5e4 <xQueueGenericSend+0x114>)
     572:	4798      	blx	r3
     574:	2800      	cmp	r0, #0
     576:	d11d      	bne.n	5b4 <xQueueGenericSend+0xe4>

static signed portBASE_TYPE prvIsQueueFull( const xQUEUE *pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
     578:	4b13      	ldr	r3, [pc, #76]	; (5c8 <xQueueGenericSend+0xf8>)
     57a:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
     57c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     57e:	469a      	mov	sl, r3
     580:	6be6      	ldr	r6, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
     582:	4b15      	ldr	r3, [pc, #84]	; (5d8 <xQueueGenericSend+0x108>)
     584:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
     586:	45b2      	cmp	sl, r6
     588:	d10e      	bne.n	5a8 <xQueueGenericSend+0xd8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
     58a:	1c20      	adds	r0, r4, #0
     58c:	3010      	adds	r0, #16
     58e:	9903      	ldr	r1, [sp, #12]
     590:	4b15      	ldr	r3, [pc, #84]	; (5e8 <xQueueGenericSend+0x118>)
     592:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
     594:	1c20      	adds	r0, r4, #0
     596:	4b15      	ldr	r3, [pc, #84]	; (5ec <xQueueGenericSend+0x11c>)
     598:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
     59a:	4b15      	ldr	r3, [pc, #84]	; (5f0 <xQueueGenericSend+0x120>)
     59c:	4798      	blx	r3
     59e:	2800      	cmp	r0, #0
     5a0:	d1ac      	bne.n	4fc <xQueueGenericSend+0x2c>
				{
					portYIELD_WITHIN_API();
     5a2:	4b0c      	ldr	r3, [pc, #48]	; (5d4 <xQueueGenericSend+0x104>)
     5a4:	4798      	blx	r3
     5a6:	e7a9      	b.n	4fc <xQueueGenericSend+0x2c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
     5a8:	1c20      	adds	r0, r4, #0
     5aa:	4b10      	ldr	r3, [pc, #64]	; (5ec <xQueueGenericSend+0x11c>)
     5ac:	4798      	blx	r3
				( void ) xTaskResumeAll();
     5ae:	4b10      	ldr	r3, [pc, #64]	; (5f0 <xQueueGenericSend+0x120>)
     5b0:	4798      	blx	r3
     5b2:	e7a3      	b.n	4fc <xQueueGenericSend+0x2c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
     5b4:	1c20      	adds	r0, r4, #0
     5b6:	4b0d      	ldr	r3, [pc, #52]	; (5ec <xQueueGenericSend+0x11c>)
     5b8:	4798      	blx	r3
			( void ) xTaskResumeAll();
     5ba:	4b0d      	ldr	r3, [pc, #52]	; (5f0 <xQueueGenericSend+0x120>)
     5bc:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
     5be:	2000      	movs	r0, #0
		}
	}
}
     5c0:	b006      	add	sp, #24
     5c2:	bc04      	pop	{r2}
     5c4:	4692      	mov	sl, r2
     5c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5c8:	000010fd 	.word	0x000010fd
     5cc:	000002d5 	.word	0x000002d5
     5d0:	00000e95 	.word	0x00000e95
     5d4:	000010e5 	.word	0x000010e5
     5d8:	00001115 	.word	0x00001115
     5dc:	00000f11 	.word	0x00000f11
     5e0:	00000b1d 	.word	0x00000b1d
     5e4:	00000f31 	.word	0x00000f31
     5e8:	00000e55 	.word	0x00000e55
     5ec:	0000036d 	.word	0x0000036d
     5f0:	00000c69 	.word	0x00000c69

000005f4 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle xQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
     5f4:	b570      	push	{r4, r5, r6, lr}
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;
xQUEUE *pxQueue;

	pxQueue = ( xQUEUE * ) xQueue;
	configASSERT( pxQueue );
     5f6:	2800      	cmp	r0, #0
     5f8:	d101      	bne.n	5fe <xQueueGenericSendFromISR+0xa>
     5fa:	b672      	cpsid	i
     5fc:	e7fe      	b.n	5fc <xQueueGenericSendFromISR+0x8>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
     5fe:	2900      	cmp	r1, #0
     600:	d104      	bne.n	60c <xQueueGenericSendFromISR+0x18>
     602:	6c04      	ldr	r4, [r0, #64]	; 0x40
     604:	2c00      	cmp	r4, #0
     606:	d001      	beq.n	60c <xQueueGenericSendFromISR+0x18>
     608:	b672      	cpsid	i
     60a:	e7fe      	b.n	60a <xQueueGenericSendFromISR+0x16>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
     60c:	b672      	cpsid	i
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
     60e:	6b84      	ldr	r4, [r0, #56]	; 0x38
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
     610:	2500      	movs	r5, #0
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
     612:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
     614:	42b4      	cmp	r4, r6
     616:	d21c      	bcs.n	652 <xQueueGenericSendFromISR+0x5e>
     618:	1c16      	adds	r6, r2, #0
     61a:	1c04      	adds	r4, r0, #0
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
     61c:	1c1a      	adds	r2, r3, #0
     61e:	4b0e      	ldr	r3, [pc, #56]	; (658 <xQueueGenericSendFromISR+0x64>)
     620:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
     622:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     624:	3301      	adds	r3, #1
     626:	d10e      	bne.n	646 <xQueueGenericSendFromISR+0x52>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     628:	6a63      	ldr	r3, [r4, #36]	; 0x24
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
     62a:	3501      	adds	r5, #1
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     62c:	2b00      	cmp	r3, #0
     62e:	d010      	beq.n	652 <xQueueGenericSendFromISR+0x5e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     630:	1c20      	adds	r0, r4, #0
     632:	3024      	adds	r0, #36	; 0x24
     634:	4b09      	ldr	r3, [pc, #36]	; (65c <xQueueGenericSendFromISR+0x68>)
     636:	4798      	blx	r3
     638:	2800      	cmp	r0, #0
     63a:	d00a      	beq.n	652 <xQueueGenericSendFromISR+0x5e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
     63c:	2e00      	cmp	r6, #0
     63e:	d007      	beq.n	650 <xQueueGenericSendFromISR+0x5c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
     640:	2301      	movs	r3, #1
     642:	6033      	str	r3, [r6, #0]
     644:	e005      	b.n	652 <xQueueGenericSendFromISR+0x5e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
     646:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     648:	3301      	adds	r3, #1
     64a:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
     64c:	2501      	movs	r5, #1
     64e:	e000      	b.n	652 <xQueueGenericSendFromISR+0x5e>
     650:	2501      	movs	r5, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
     652:	b662      	cpsie	i

	return xReturn;
}
     654:	1c28      	adds	r0, r5, #0
     656:	bd70      	pop	{r4, r5, r6, pc}
     658:	000002d5 	.word	0x000002d5
     65c:	00000e95 	.word	0x00000e95

00000660 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle xQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
     660:	b5f0      	push	{r4, r5, r6, r7, lr}
     662:	464f      	mov	r7, r9
     664:	b480      	push	{r7}
     666:	b084      	sub	sp, #16
     668:	9201      	str	r2, [sp, #4]
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;
xQUEUE *pxQueue;

	pxQueue = ( xQUEUE * ) xQueue;
	configASSERT( pxQueue );
     66a:	2800      	cmp	r0, #0
     66c:	d101      	bne.n	672 <xQueueGenericReceive+0x12>
     66e:	b672      	cpsid	i
     670:	e7fe      	b.n	670 <xQueueGenericReceive+0x10>
     672:	2700      	movs	r7, #0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
     674:	2900      	cmp	r1, #0
     676:	d105      	bne.n	684 <xQueueGenericReceive+0x24>
     678:	6c02      	ldr	r2, [r0, #64]	; 0x40
     67a:	2a00      	cmp	r2, #0
     67c:	d001      	beq.n	682 <xQueueGenericReceive+0x22>
     67e:	b672      	cpsid	i
     680:	e7fe      	b.n	680 <xQueueGenericReceive+0x20>
     682:	2700      	movs	r7, #0
     684:	1c1d      	adds	r5, r3, #0
     686:	9100      	str	r1, [sp, #0]
     688:	1c04      	adds	r4, r0, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
     68a:	4e44      	ldr	r6, [pc, #272]	; (79c <xQueueGenericReceive+0x13c>)
     68c:	47b0      	blx	r6
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
     68e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     690:	2b00      	cmp	r3, #0
     692:	d02b      	beq.n	6ec <xQueueGenericReceive+0x8c>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
     694:	68e7      	ldr	r7, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
     696:	1c20      	adds	r0, r4, #0
     698:	9900      	ldr	r1, [sp, #0]
     69a:	4b41      	ldr	r3, [pc, #260]	; (7a0 <xQueueGenericReceive+0x140>)
     69c:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
     69e:	2d00      	cmp	r5, #0
     6a0:	d114      	bne.n	6cc <xQueueGenericReceive+0x6c>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
     6a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     6a4:	3b01      	subs	r3, #1
     6a6:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     6a8:	6823      	ldr	r3, [r4, #0]
     6aa:	2b00      	cmp	r3, #0
     6ac:	d102      	bne.n	6b4 <xQueueGenericReceive+0x54>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
     6ae:	4b3d      	ldr	r3, [pc, #244]	; (7a4 <xQueueGenericReceive+0x144>)
     6b0:	4798      	blx	r3
     6b2:	6060      	str	r0, [r4, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     6b4:	6923      	ldr	r3, [r4, #16]
     6b6:	2b00      	cmp	r3, #0
     6b8:	d014      	beq.n	6e4 <xQueueGenericReceive+0x84>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
     6ba:	1c20      	adds	r0, r4, #0
     6bc:	3010      	adds	r0, #16
     6be:	4b3a      	ldr	r3, [pc, #232]	; (7a8 <xQueueGenericReceive+0x148>)
     6c0:	4798      	blx	r3
     6c2:	2801      	cmp	r0, #1
     6c4:	d10e      	bne.n	6e4 <xQueueGenericReceive+0x84>
						{
							portYIELD_WITHIN_API();
     6c6:	4b39      	ldr	r3, [pc, #228]	; (7ac <xQueueGenericReceive+0x14c>)
     6c8:	4798      	blx	r3
     6ca:	e00b      	b.n	6e4 <xQueueGenericReceive+0x84>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
     6cc:	60e7      	str	r7, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     6ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
     6d0:	2b00      	cmp	r3, #0
     6d2:	d007      	beq.n	6e4 <xQueueGenericReceive+0x84>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     6d4:	1c20      	adds	r0, r4, #0
     6d6:	3024      	adds	r0, #36	; 0x24
     6d8:	4b33      	ldr	r3, [pc, #204]	; (7a8 <xQueueGenericReceive+0x148>)
     6da:	4798      	blx	r3
     6dc:	2800      	cmp	r0, #0
     6de:	d001      	beq.n	6e4 <xQueueGenericReceive+0x84>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
     6e0:	4b32      	ldr	r3, [pc, #200]	; (7ac <xQueueGenericReceive+0x14c>)
     6e2:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
     6e4:	4b32      	ldr	r3, [pc, #200]	; (7b0 <xQueueGenericReceive+0x150>)
     6e6:	4798      	blx	r3
				return pdPASS;
     6e8:	2001      	movs	r0, #1
     6ea:	e052      	b.n	792 <xQueueGenericReceive+0x132>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
     6ec:	9b01      	ldr	r3, [sp, #4]
     6ee:	2b00      	cmp	r3, #0
     6f0:	d103      	bne.n	6fa <xQueueGenericReceive+0x9a>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
     6f2:	4b2f      	ldr	r3, [pc, #188]	; (7b0 <xQueueGenericReceive+0x150>)
     6f4:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
     6f6:	2000      	movs	r0, #0
     6f8:	e04b      	b.n	792 <xQueueGenericReceive+0x132>
				}
				else if( xEntryTimeSet == pdFALSE )
     6fa:	2f00      	cmp	r7, #0
     6fc:	d103      	bne.n	706 <xQueueGenericReceive+0xa6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
     6fe:	a802      	add	r0, sp, #8
     700:	4b2c      	ldr	r3, [pc, #176]	; (7b4 <xQueueGenericReceive+0x154>)
     702:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
     704:	3701      	adds	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
     706:	4b2a      	ldr	r3, [pc, #168]	; (7b0 <xQueueGenericReceive+0x150>)
     708:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
     70a:	4b2b      	ldr	r3, [pc, #172]	; (7b8 <xQueueGenericReceive+0x158>)
     70c:	4798      	blx	r3
		prvLockQueue( pxQueue );
     70e:	4b23      	ldr	r3, [pc, #140]	; (79c <xQueueGenericReceive+0x13c>)
     710:	4798      	blx	r3
     712:	6c63      	ldr	r3, [r4, #68]	; 0x44
     714:	3301      	adds	r3, #1
     716:	d101      	bne.n	71c <xQueueGenericReceive+0xbc>
     718:	2300      	movs	r3, #0
     71a:	6463      	str	r3, [r4, #68]	; 0x44
     71c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     71e:	3301      	adds	r3, #1
     720:	d101      	bne.n	726 <xQueueGenericReceive+0xc6>
     722:	2300      	movs	r3, #0
     724:	64a3      	str	r3, [r4, #72]	; 0x48
     726:	4b22      	ldr	r3, [pc, #136]	; (7b0 <xQueueGenericReceive+0x150>)
     728:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     72a:	a802      	add	r0, sp, #8
     72c:	a901      	add	r1, sp, #4
     72e:	4b23      	ldr	r3, [pc, #140]	; (7bc <xQueueGenericReceive+0x15c>)
     730:	4798      	blx	r3
     732:	2800      	cmp	r0, #0
     734:	d127      	bne.n	786 <xQueueGenericReceive+0x126>

static signed portBASE_TYPE prvIsQueueEmpty( const xQUEUE *pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
     736:	4b19      	ldr	r3, [pc, #100]	; (79c <xQueueGenericReceive+0x13c>)
     738:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == 0 )
     73a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     73c:	4699      	mov	r9, r3
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
     73e:	4b1c      	ldr	r3, [pc, #112]	; (7b0 <xQueueGenericReceive+0x150>)
     740:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     742:	464b      	mov	r3, r9
     744:	2b00      	cmp	r3, #0
     746:	d118      	bne.n	77a <xQueueGenericReceive+0x11a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     748:	6823      	ldr	r3, [r4, #0]
     74a:	2b00      	cmp	r3, #0
     74c:	d106      	bne.n	75c <xQueueGenericReceive+0xfc>
					{
						portENTER_CRITICAL();
     74e:	4b13      	ldr	r3, [pc, #76]	; (79c <xQueueGenericReceive+0x13c>)
     750:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
     752:	6860      	ldr	r0, [r4, #4]
     754:	4b1a      	ldr	r3, [pc, #104]	; (7c0 <xQueueGenericReceive+0x160>)
     756:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
     758:	4b15      	ldr	r3, [pc, #84]	; (7b0 <xQueueGenericReceive+0x150>)
     75a:	4798      	blx	r3
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
     75c:	1c20      	adds	r0, r4, #0
     75e:	3024      	adds	r0, #36	; 0x24
     760:	9901      	ldr	r1, [sp, #4]
     762:	4b18      	ldr	r3, [pc, #96]	; (7c4 <xQueueGenericReceive+0x164>)
     764:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
     766:	1c20      	adds	r0, r4, #0
     768:	4b17      	ldr	r3, [pc, #92]	; (7c8 <xQueueGenericReceive+0x168>)
     76a:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
     76c:	4b17      	ldr	r3, [pc, #92]	; (7cc <xQueueGenericReceive+0x16c>)
     76e:	4798      	blx	r3
     770:	2800      	cmp	r0, #0
     772:	d18b      	bne.n	68c <xQueueGenericReceive+0x2c>
				{
					portYIELD_WITHIN_API();
     774:	4b0d      	ldr	r3, [pc, #52]	; (7ac <xQueueGenericReceive+0x14c>)
     776:	4798      	blx	r3
     778:	e788      	b.n	68c <xQueueGenericReceive+0x2c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
     77a:	1c20      	adds	r0, r4, #0
     77c:	4b12      	ldr	r3, [pc, #72]	; (7c8 <xQueueGenericReceive+0x168>)
     77e:	4798      	blx	r3
				( void ) xTaskResumeAll();
     780:	4b12      	ldr	r3, [pc, #72]	; (7cc <xQueueGenericReceive+0x16c>)
     782:	4798      	blx	r3
     784:	e782      	b.n	68c <xQueueGenericReceive+0x2c>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
     786:	1c20      	adds	r0, r4, #0
     788:	4b0f      	ldr	r3, [pc, #60]	; (7c8 <xQueueGenericReceive+0x168>)
     78a:	4798      	blx	r3
			( void ) xTaskResumeAll();
     78c:	4b0f      	ldr	r3, [pc, #60]	; (7cc <xQueueGenericReceive+0x16c>)
     78e:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
     790:	2000      	movs	r0, #0
		}
	}
}
     792:	b004      	add	sp, #16
     794:	bc04      	pop	{r2}
     796:	4691      	mov	r9, r2
     798:	bdf0      	pop	{r4, r5, r6, r7, pc}
     79a:	46c0      	nop			; (mov r8, r8)
     79c:	000010fd 	.word	0x000010fd
     7a0:	00000345 	.word	0x00000345
     7a4:	00000fad 	.word	0x00000fad
     7a8:	00000e95 	.word	0x00000e95
     7ac:	000010e5 	.word	0x000010e5
     7b0:	00001115 	.word	0x00001115
     7b4:	00000f11 	.word	0x00000f11
     7b8:	00000b1d 	.word	0x00000b1d
     7bc:	00000f31 	.word	0x00000f31
     7c0:	00000fb9 	.word	0x00000fb9
     7c4:	00000e55 	.word	0x00000e55
     7c8:	0000036d 	.word	0x0000036d
     7cc:	00000c69 	.word	0x00000c69

000007d0 <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
     7d0:	1c03      	adds	r3, r0, #0
     7d2:	3308      	adds	r3, #8
     7d4:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     7d6:	2201      	movs	r2, #1
     7d8:	4252      	negs	r2, r2
     7da:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
     7dc:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
     7de:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
     7e0:	2300      	movs	r3, #0
     7e2:	6003      	str	r3, [r0, #0]
}
     7e4:	4770      	bx	lr
     7e6:	46c0      	nop			; (mov r8, r8)

000007e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     7e8:	2300      	movs	r3, #0
     7ea:	6103      	str	r3, [r0, #16]
}
     7ec:	4770      	bx	lr
     7ee:	46c0      	nop			; (mov r8, r8)

000007f0 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
     7f0:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
     7f2:	685a      	ldr	r2, [r3, #4]
     7f4:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
     7f6:	6842      	ldr	r2, [r0, #4]
     7f8:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     7fa:	685a      	ldr	r2, [r3, #4]
     7fc:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
     7fe:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
     800:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     802:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
     804:	6803      	ldr	r3, [r0, #0]
     806:	3301      	adds	r3, #1
     808:	6003      	str	r3, [r0, #0]
}
     80a:	4770      	bx	lr

0000080c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
     80c:	b510      	push	{r4, lr}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
     80e:	680c      	ldr	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     810:	1c63      	adds	r3, r4, #1
     812:	d101      	bne.n	818 <vListInsert+0xc>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     814:	6903      	ldr	r3, [r0, #16]
     816:	e00a      	b.n	82e <vListInsert+0x22>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
     818:	1c03      	adds	r3, r0, #0
     81a:	3308      	adds	r3, #8
     81c:	68c2      	ldr	r2, [r0, #12]
     81e:	6812      	ldr	r2, [r2, #0]
     820:	4294      	cmp	r4, r2
     822:	d304      	bcc.n	82e <vListInsert+0x22>
     824:	685b      	ldr	r3, [r3, #4]
     826:	685a      	ldr	r2, [r3, #4]
     828:	6812      	ldr	r2, [r2, #0]
     82a:	4294      	cmp	r4, r2
     82c:	d2fa      	bcs.n	824 <vListInsert+0x18>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     82e:	685a      	ldr	r2, [r3, #4]
     830:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     832:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
     834:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
     836:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     838:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
     83a:	6803      	ldr	r3, [r0, #0]
     83c:	3301      	adds	r3, #1
     83e:	6003      	str	r3, [r0, #0]
}
     840:	bd10      	pop	{r4, pc}
     842:	46c0      	nop			; (mov r8, r8)

00000844 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     844:	6843      	ldr	r3, [r0, #4]
     846:	6882      	ldr	r2, [r0, #8]
     848:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     84a:	6883      	ldr	r3, [r0, #8]
     84c:	6842      	ldr	r2, [r0, #4]
     84e:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
     850:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     852:	685a      	ldr	r2, [r3, #4]
     854:	4282      	cmp	r2, r0
     856:	d101      	bne.n	85c <uxListRemove+0x18>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     858:	6882      	ldr	r2, [r0, #8]
     85a:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
     85c:	2200      	movs	r2, #0
     85e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
     860:	681a      	ldr	r2, [r3, #0]
     862:	3a01      	subs	r2, #1
     864:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
     866:	6818      	ldr	r0, [r3, #0]
}
     868:	4770      	bx	lr
     86a:	46c0      	nop			; (mov r8, r8)

0000086c <prvAddCurrentTaskToDelayedList>:
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
     86c:	b510      	push	{r4, lr}
     86e:	1e04      	subs	r4, r0, #0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
     870:	4b0e      	ldr	r3, [pc, #56]	; (8ac <prvAddCurrentTaskToDelayedList+0x40>)
     872:	681b      	ldr	r3, [r3, #0]
     874:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
     876:	4b0e      	ldr	r3, [pc, #56]	; (8b0 <prvAddCurrentTaskToDelayedList+0x44>)
     878:	681b      	ldr	r3, [r3, #0]
     87a:	429c      	cmp	r4, r3
     87c:	d207      	bcs.n	88e <prvAddCurrentTaskToDelayedList+0x22>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
     87e:	4b0d      	ldr	r3, [pc, #52]	; (8b4 <prvAddCurrentTaskToDelayedList+0x48>)
     880:	6818      	ldr	r0, [r3, #0]
     882:	4b0a      	ldr	r3, [pc, #40]	; (8ac <prvAddCurrentTaskToDelayedList+0x40>)
     884:	6819      	ldr	r1, [r3, #0]
     886:	3104      	adds	r1, #4
     888:	4b0b      	ldr	r3, [pc, #44]	; (8b8 <prvAddCurrentTaskToDelayedList+0x4c>)
     88a:	4798      	blx	r3
     88c:	e00c      	b.n	8a8 <prvAddCurrentTaskToDelayedList+0x3c>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
     88e:	4b0b      	ldr	r3, [pc, #44]	; (8bc <prvAddCurrentTaskToDelayedList+0x50>)
     890:	6818      	ldr	r0, [r3, #0]
     892:	4b06      	ldr	r3, [pc, #24]	; (8ac <prvAddCurrentTaskToDelayedList+0x40>)
     894:	6819      	ldr	r1, [r3, #0]
     896:	3104      	adds	r1, #4
     898:	4b07      	ldr	r3, [pc, #28]	; (8b8 <prvAddCurrentTaskToDelayedList+0x4c>)
     89a:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
     89c:	4b08      	ldr	r3, [pc, #32]	; (8c0 <prvAddCurrentTaskToDelayedList+0x54>)
     89e:	681b      	ldr	r3, [r3, #0]
     8a0:	429c      	cmp	r4, r3
     8a2:	d201      	bcs.n	8a8 <prvAddCurrentTaskToDelayedList+0x3c>
		{
			xNextTaskUnblockTime = xTimeToWake;
     8a4:	4b06      	ldr	r3, [pc, #24]	; (8c0 <prvAddCurrentTaskToDelayedList+0x54>)
     8a6:	601c      	str	r4, [r3, #0]
		}
	}
}
     8a8:	bd10      	pop	{r4, pc}
     8aa:	46c0      	nop			; (mov r8, r8)
     8ac:	2000023c 	.word	0x2000023c
     8b0:	20000254 	.word	0x20000254
     8b4:	20000258 	.word	0x20000258
     8b8:	0000080d 	.word	0x0000080d
     8bc:	200001a0 	.word	0x200001a0
     8c0:	200000b4 	.word	0x200000b4

000008c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
     8c4:	b538      	push	{r3, r4, r5, lr}
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
     8c6:	4d02      	ldr	r5, [pc, #8]	; (8d0 <prvIdleTask+0xc>)
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
     8c8:	4c02      	ldr	r4, [pc, #8]	; (8d4 <prvIdleTask+0x10>)
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
     8ca:	47a8      	blx	r5
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
     8cc:	47a0      	blx	r4
				}
				xTaskResumeAll();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
     8ce:	e7fc      	b.n	8ca <prvIdleTask+0x6>
     8d0:	000010e5 	.word	0x000010e5
     8d4:	00000251 	.word	0x00000251

000008d8 <xTaskGenericCreate>:
#endif

/*lint +e956 */

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
     8d8:	b5f0      	push	{r4, r5, r6, r7, lr}
     8da:	464f      	mov	r7, r9
     8dc:	4646      	mov	r6, r8
     8de:	b4c0      	push	{r6, r7}
     8e0:	b085      	sub	sp, #20
     8e2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
     8e4:	2800      	cmp	r0, #0
     8e6:	d101      	bne.n	8ec <xTaskGenericCreate+0x14>
     8e8:	b672      	cpsid	i
     8ea:	e7fe      	b.n	8ea <xTaskGenericCreate+0x12>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
     8ec:	2c05      	cmp	r4, #5
     8ee:	d901      	bls.n	8f4 <xTaskGenericCreate+0x1c>
     8f0:	b672      	cpsid	i
     8f2:	e7fe      	b.n	8f2 <xTaskGenericCreate+0x1a>
     8f4:	9303      	str	r3, [sp, #12]
     8f6:	1c16      	adds	r6, r2, #0
     8f8:	1c0f      	adds	r7, r1, #0
     8fa:	9002      	str	r0, [sp, #8]
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
     8fc:	2040      	movs	r0, #64	; 0x40
     8fe:	4b59      	ldr	r3, [pc, #356]	; (a64 <xTaskGenericCreate+0x18c>)
     900:	4798      	blx	r3
     902:	1e05      	subs	r5, r0, #0

	if( pxNewTCB != NULL )
     904:	d100      	bne.n	908 <xTaskGenericCreate+0x30>
     906:	e0a5      	b.n	a54 <xTaskGenericCreate+0x17c>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
     908:	9b0e      	ldr	r3, [sp, #56]	; 0x38
     90a:	2b00      	cmp	r3, #0
     90c:	d000      	beq.n	910 <xTaskGenericCreate+0x38>
     90e:	e09d      	b.n	a4c <xTaskGenericCreate+0x174>
     910:	00b0      	lsls	r0, r6, #2
     912:	4b54      	ldr	r3, [pc, #336]	; (a64 <xTaskGenericCreate+0x18c>)
     914:	4798      	blx	r3
     916:	6328      	str	r0, [r5, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
     918:	2800      	cmp	r0, #0
     91a:	d103      	bne.n	924 <xTaskGenericCreate+0x4c>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
     91c:	1c28      	adds	r0, r5, #0
     91e:	4b52      	ldr	r3, [pc, #328]	; (a68 <xTaskGenericCreate+0x190>)
     920:	4798      	blx	r3
     922:	e097      	b.n	a54 <xTaskGenericCreate+0x17c>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
     924:	00b2      	lsls	r2, r6, #2
     926:	21a5      	movs	r1, #165	; 0xa5
     928:	4b50      	ldr	r3, [pc, #320]	; (a6c <xTaskGenericCreate+0x194>)
     92a:	4798      	blx	r3
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
     92c:	4b50      	ldr	r3, [pc, #320]	; (a70 <xTaskGenericCreate+0x198>)
     92e:	18f3      	adds	r3, r6, r3
     930:	009b      	lsls	r3, r3, #2
     932:	6b2a      	ldr	r2, [r5, #48]	; 0x30
     934:	4694      	mov	ip, r2
     936:	4463      	add	r3, ip
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
     938:	2207      	movs	r2, #7
     93a:	4393      	bics	r3, r2
     93c:	4698      	mov	r8, r3
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
     93e:	1c28      	adds	r0, r5, #0
     940:	3034      	adds	r0, #52	; 0x34
     942:	1c39      	adds	r1, r7, #0
     944:	3201      	adds	r2, #1
     946:	4b4b      	ldr	r3, [pc, #300]	; (a74 <xTaskGenericCreate+0x19c>)
     948:	4798      	blx	r3
	}
	#endif /* configMAX_TASK_NAME_LEN */
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
     94a:	2200      	movs	r2, #0
     94c:	233b      	movs	r3, #59	; 0x3b
     94e:	54ea      	strb	r2, [r5, r3]
     950:	1e27      	subs	r7, r4, #0
     952:	2f05      	cmp	r7, #5
     954:	d900      	bls.n	958 <xTaskGenericCreate+0x80>
     956:	2705      	movs	r7, #5
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
     958:	62ef      	str	r7, [r5, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
     95a:	63ef      	str	r7, [r5, #60]	; 0x3c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
     95c:	1d2b      	adds	r3, r5, #4
     95e:	9301      	str	r3, [sp, #4]
     960:	1c18      	adds	r0, r3, #0
     962:	4e45      	ldr	r6, [pc, #276]	; (a78 <xTaskGenericCreate+0x1a0>)
     964:	47b0      	blx	r6
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
     966:	1c28      	adds	r0, r5, #0
     968:	3018      	adds	r0, #24
     96a:	47b0      	blx	r6

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
     96c:	612d      	str	r5, [r5, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
     96e:	2306      	movs	r3, #6
     970:	1bdb      	subs	r3, r3, r7
     972:	61ab      	str	r3, [r5, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
     974:	626d      	str	r5, [r5, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
     976:	4640      	mov	r0, r8
     978:	9902      	ldr	r1, [sp, #8]
     97a:	9a03      	ldr	r2, [sp, #12]
     97c:	4b3f      	ldr	r3, [pc, #252]	; (a7c <xTaskGenericCreate+0x1a4>)
     97e:	4798      	blx	r3
     980:	6028      	str	r0, [r5, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
     982:	0743      	lsls	r3, r0, #29
     984:	d001      	beq.n	98a <xTaskGenericCreate+0xb2>
     986:	b672      	cpsid	i
     988:	e7fe      	b.n	988 <xTaskGenericCreate+0xb0>

		if( ( void * ) pxCreatedTask != NULL )
     98a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
     98c:	2b00      	cmp	r3, #0
     98e:	d000      	beq.n	992 <xTaskGenericCreate+0xba>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
     990:	601d      	str	r5, [r3, #0]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
     992:	4b3b      	ldr	r3, [pc, #236]	; (a80 <xTaskGenericCreate+0x1a8>)
     994:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
     996:	4a3b      	ldr	r2, [pc, #236]	; (a84 <xTaskGenericCreate+0x1ac>)
     998:	6813      	ldr	r3, [r2, #0]
     99a:	3301      	adds	r3, #1
     99c:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
     99e:	4b3a      	ldr	r3, [pc, #232]	; (a88 <xTaskGenericCreate+0x1b0>)
     9a0:	681b      	ldr	r3, [r3, #0]
     9a2:	2b00      	cmp	r3, #0
     9a4:	d11e      	bne.n	9e4 <xTaskGenericCreate+0x10c>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
     9a6:	4b38      	ldr	r3, [pc, #224]	; (a88 <xTaskGenericCreate+0x1b0>)
     9a8:	601d      	str	r5, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
     9aa:	6813      	ldr	r3, [r2, #0]
     9ac:	2b01      	cmp	r3, #1
     9ae:	d124      	bne.n	9fa <xTaskGenericCreate+0x122>
     9b0:	4e36      	ldr	r6, [pc, #216]	; (a8c <xTaskGenericCreate+0x1b4>)
     9b2:	3377      	adds	r3, #119	; 0x77
     9b4:	4699      	mov	r9, r3
     9b6:	44b1      	add	r9, r6
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
     9b8:	4f35      	ldr	r7, [pc, #212]	; (a90 <xTaskGenericCreate+0x1b8>)
     9ba:	1c30      	adds	r0, r6, #0
     9bc:	47b8      	blx	r7
     9be:	3614      	adds	r6, #20

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
     9c0:	454e      	cmp	r6, r9
     9c2:	d1fa      	bne.n	9ba <xTaskGenericCreate+0xe2>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
     9c4:	4b33      	ldr	r3, [pc, #204]	; (a94 <xTaskGenericCreate+0x1bc>)
     9c6:	4699      	mov	r9, r3
     9c8:	1c18      	adds	r0, r3, #0
     9ca:	4e31      	ldr	r6, [pc, #196]	; (a90 <xTaskGenericCreate+0x1b8>)
     9cc:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
     9ce:	4f32      	ldr	r7, [pc, #200]	; (a98 <xTaskGenericCreate+0x1c0>)
     9d0:	1c38      	adds	r0, r7, #0
     9d2:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xPendingReadyList );
     9d4:	4831      	ldr	r0, [pc, #196]	; (a9c <xTaskGenericCreate+0x1c4>)
     9d6:	47b0      	blx	r6
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
     9d8:	4b31      	ldr	r3, [pc, #196]	; (aa0 <xTaskGenericCreate+0x1c8>)
     9da:	464a      	mov	r2, r9
     9dc:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
     9de:	4b31      	ldr	r3, [pc, #196]	; (aa4 <xTaskGenericCreate+0x1cc>)
     9e0:	601f      	str	r7, [r3, #0]
     9e2:	e00a      	b.n	9fa <xTaskGenericCreate+0x122>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
     9e4:	4b30      	ldr	r3, [pc, #192]	; (aa8 <xTaskGenericCreate+0x1d0>)
     9e6:	681b      	ldr	r3, [r3, #0]
     9e8:	2b00      	cmp	r3, #0
     9ea:	d106      	bne.n	9fa <xTaskGenericCreate+0x122>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
     9ec:	4b26      	ldr	r3, [pc, #152]	; (a88 <xTaskGenericCreate+0x1b0>)
     9ee:	681b      	ldr	r3, [r3, #0]
     9f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     9f2:	429c      	cmp	r4, r3
     9f4:	d301      	bcc.n	9fa <xTaskGenericCreate+0x122>
					{
						pxCurrentTCB = pxNewTCB;
     9f6:	4b24      	ldr	r3, [pc, #144]	; (a88 <xTaskGenericCreate+0x1b0>)
     9f8:	601d      	str	r5, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
     9fa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
     9fc:	4a2b      	ldr	r2, [pc, #172]	; (aac <xTaskGenericCreate+0x1d4>)
     9fe:	6812      	ldr	r2, [r2, #0]
     a00:	4293      	cmp	r3, r2
     a02:	d901      	bls.n	a08 <xTaskGenericCreate+0x130>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
     a04:	4a29      	ldr	r2, [pc, #164]	; (aac <xTaskGenericCreate+0x1d4>)
     a06:	6013      	str	r3, [r2, #0]
			}

			uxTaskNumber++;
     a08:	4929      	ldr	r1, [pc, #164]	; (ab0 <xTaskGenericCreate+0x1d8>)
     a0a:	680a      	ldr	r2, [r1, #0]
     a0c:	3201      	adds	r2, #1
     a0e:	600a      	str	r2, [r1, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyQueue( pxNewTCB );
     a10:	4a28      	ldr	r2, [pc, #160]	; (ab4 <xTaskGenericCreate+0x1dc>)
     a12:	6812      	ldr	r2, [r2, #0]
     a14:	4293      	cmp	r3, r2
     a16:	d901      	bls.n	a1c <xTaskGenericCreate+0x144>
     a18:	4a26      	ldr	r2, [pc, #152]	; (ab4 <xTaskGenericCreate+0x1dc>)
     a1a:	6013      	str	r3, [r2, #0]
     a1c:	0098      	lsls	r0, r3, #2
     a1e:	18c3      	adds	r3, r0, r3
     a20:	009b      	lsls	r3, r3, #2
     a22:	481a      	ldr	r0, [pc, #104]	; (a8c <xTaskGenericCreate+0x1b4>)
     a24:	18c0      	adds	r0, r0, r3
     a26:	9901      	ldr	r1, [sp, #4]
     a28:	4b23      	ldr	r3, [pc, #140]	; (ab8 <xTaskGenericCreate+0x1e0>)
     a2a:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
     a2c:	4b23      	ldr	r3, [pc, #140]	; (abc <xTaskGenericCreate+0x1e4>)
     a2e:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
     a30:	4b1d      	ldr	r3, [pc, #116]	; (aa8 <xTaskGenericCreate+0x1d0>)
     a32:	681b      	ldr	r3, [r3, #0]
     a34:	2001      	movs	r0, #1
     a36:	2b00      	cmp	r3, #0
     a38:	d00e      	beq.n	a58 <xTaskGenericCreate+0x180>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
     a3a:	4b13      	ldr	r3, [pc, #76]	; (a88 <xTaskGenericCreate+0x1b0>)
     a3c:	681b      	ldr	r3, [r3, #0]
     a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     a40:	429c      	cmp	r4, r3
     a42:	d909      	bls.n	a58 <xTaskGenericCreate+0x180>
			{
				portYIELD_WITHIN_API();
     a44:	4b1e      	ldr	r3, [pc, #120]	; (ac0 <xTaskGenericCreate+0x1e8>)
     a46:	4798      	blx	r3
     a48:	2001      	movs	r0, #1
     a4a:	e005      	b.n	a58 <xTaskGenericCreate+0x180>
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
     a4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
     a4e:	6303      	str	r3, [r0, #48]	; 0x30
     a50:	1c18      	adds	r0, r3, #0
     a52:	e767      	b.n	924 <xTaskGenericCreate+0x4c>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
     a54:	2001      	movs	r0, #1
     a56:	4240      	negs	r0, r0
			}
		}
	}

	return xReturn;
}
     a58:	b005      	add	sp, #20
     a5a:	bc0c      	pop	{r2, r3}
     a5c:	4690      	mov	r8, r2
     a5e:	4699      	mov	r9, r3
     a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a62:	46c0      	nop			; (mov r8, r8)
     a64:	000011f1 	.word	0x000011f1
     a68:	00001259 	.word	0x00001259
     a6c:	00009d69 	.word	0x00009d69
     a70:	3fffffff 	.word	0x3fffffff
     a74:	0000b493 	.word	0x0000b493
     a78:	000007e9 	.word	0x000007e9
     a7c:	000010a5 	.word	0x000010a5
     a80:	000010fd 	.word	0x000010fd
     a84:	2000027c 	.word	0x2000027c
     a88:	2000023c 	.word	0x2000023c
     a8c:	200001c0 	.word	0x200001c0
     a90:	000007d1 	.word	0x000007d1
     a94:	20000264 	.word	0x20000264
     a98:	200001ac 	.word	0x200001ac
     a9c:	20000240 	.word	0x20000240
     aa0:	200001a0 	.word	0x200001a0
     aa4:	20000258 	.word	0x20000258
     aa8:	200001a4 	.word	0x200001a4
     aac:	20000280 	.word	0x20000280
     ab0:	20000260 	.word	0x20000260
     ab4:	2000025c 	.word	0x2000025c
     ab8:	000007f1 	.word	0x000007f1
     abc:	00001115 	.word	0x00001115
     ac0:	000010e5 	.word	0x000010e5

00000ac4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
     ac4:	b510      	push	{r4, lr}
     ac6:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
     ac8:	2300      	movs	r3, #0
     aca:	9300      	str	r3, [sp, #0]
     acc:	9301      	str	r3, [sp, #4]
     ace:	9302      	str	r3, [sp, #8]
     ad0:	9303      	str	r3, [sp, #12]
     ad2:	480c      	ldr	r0, [pc, #48]	; (b04 <vTaskStartScheduler+0x40>)
     ad4:	490c      	ldr	r1, [pc, #48]	; (b08 <vTaskStartScheduler+0x44>)
     ad6:	2296      	movs	r2, #150	; 0x96
     ad8:	0052      	lsls	r2, r2, #1
     ada:	4c0c      	ldr	r4, [pc, #48]	; (b0c <vTaskStartScheduler+0x48>)
     adc:	47a0      	blx	r4
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
     ade:	2801      	cmp	r0, #1
     ae0:	d109      	bne.n	af6 <vTaskStartScheduler+0x32>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
     ae2:	b672      	cpsid	i

		xSchedulerRunning = pdTRUE;
     ae4:	2201      	movs	r2, #1
     ae6:	4b0a      	ldr	r3, [pc, #40]	; (b10 <vTaskStartScheduler+0x4c>)
     ae8:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
     aea:	2200      	movs	r2, #0
     aec:	4b09      	ldr	r3, [pc, #36]	; (b14 <vTaskStartScheduler+0x50>)
     aee:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
     af0:	4b09      	ldr	r3, [pc, #36]	; (b18 <vTaskStartScheduler+0x54>)
     af2:	4798      	blx	r3
     af4:	e003      	b.n	afe <vTaskStartScheduler+0x3a>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
     af6:	2800      	cmp	r0, #0
     af8:	d101      	bne.n	afe <vTaskStartScheduler+0x3a>
     afa:	b672      	cpsid	i
     afc:	e7fe      	b.n	afc <vTaskStartScheduler+0x38>
	}
}
     afe:	b004      	add	sp, #16
     b00:	bd10      	pop	{r4, pc}
     b02:	46c0      	nop			; (mov r8, r8)
     b04:	000008c5 	.word	0x000008c5
     b08:	0000e980 	.word	0x0000e980
     b0c:	000008d9 	.word	0x000008d9
     b10:	200001a4 	.word	0x200001a4
     b14:	20000254 	.word	0x20000254
     b18:	000011b5 	.word	0x000011b5

00000b1c <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
     b1c:	4a02      	ldr	r2, [pc, #8]	; (b28 <vTaskSuspendAll+0xc>)
     b1e:	6813      	ldr	r3, [r2, #0]
     b20:	3301      	adds	r3, #1
     b22:	6013      	str	r3, [r2, #0]
}
     b24:	4770      	bx	lr
     b26:	46c0      	nop			; (mov r8, r8)
     b28:	20000238 	.word	0x20000238

00000b2c <xTaskGetTickCount>:
	return xAlreadyYielded;
}
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCount( void )
{
     b2c:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
     b2e:	4b04      	ldr	r3, [pc, #16]	; (b40 <xTaskGetTickCount+0x14>)
     b30:	4798      	blx	r3
	{
		xTicks = xTickCount;
     b32:	4b04      	ldr	r3, [pc, #16]	; (b44 <xTaskGetTickCount+0x18>)
     b34:	681c      	ldr	r4, [r3, #0]
	}
	taskEXIT_CRITICAL();
     b36:	4b04      	ldr	r3, [pc, #16]	; (b48 <xTaskGetTickCount+0x1c>)
     b38:	4798      	blx	r3

	return xTicks;
}
     b3a:	1c20      	adds	r0, r4, #0
     b3c:	bd10      	pop	{r4, pc}
     b3e:	46c0      	nop			; (mov r8, r8)
     b40:	000010fd 	.word	0x000010fd
     b44:	20000254 	.word	0x20000254
     b48:	00001115 	.word	0x00001115

00000b4c <vTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
     b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
     b4e:	4b3b      	ldr	r3, [pc, #236]	; (c3c <vTaskIncrementTick+0xf0>)
     b50:	681b      	ldr	r3, [r3, #0]
     b52:	2b00      	cmp	r3, #0
     b54:	d16d      	bne.n	c32 <vTaskIncrementTick+0xe6>
	{
		++xTickCount;
     b56:	4b3a      	ldr	r3, [pc, #232]	; (c40 <vTaskIncrementTick+0xf4>)
     b58:	681a      	ldr	r2, [r3, #0]
     b5a:	3201      	adds	r2, #1
     b5c:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
     b5e:	681b      	ldr	r3, [r3, #0]
     b60:	2b00      	cmp	r3, #0
     b62:	d120      	bne.n	ba6 <vTaskIncrementTick+0x5a>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
     b64:	4b37      	ldr	r3, [pc, #220]	; (c44 <vTaskIncrementTick+0xf8>)
     b66:	681b      	ldr	r3, [r3, #0]
     b68:	681b      	ldr	r3, [r3, #0]
     b6a:	2b00      	cmp	r3, #0
     b6c:	d001      	beq.n	b72 <vTaskIncrementTick+0x26>
     b6e:	b672      	cpsid	i
     b70:	e7fe      	b.n	b70 <vTaskIncrementTick+0x24>

			pxTemp = pxDelayedTaskList;
     b72:	4b34      	ldr	r3, [pc, #208]	; (c44 <vTaskIncrementTick+0xf8>)
     b74:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
     b76:	4a34      	ldr	r2, [pc, #208]	; (c48 <vTaskIncrementTick+0xfc>)
     b78:	6810      	ldr	r0, [r2, #0]
     b7a:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
     b7c:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
     b7e:	4933      	ldr	r1, [pc, #204]	; (c4c <vTaskIncrementTick+0x100>)
     b80:	680a      	ldr	r2, [r1, #0]
     b82:	3201      	adds	r2, #1
     b84:	600a      	str	r2, [r1, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
     b86:	681b      	ldr	r3, [r3, #0]
     b88:	681b      	ldr	r3, [r3, #0]
     b8a:	2b00      	cmp	r3, #0
     b8c:	d104      	bne.n	b98 <vTaskIncrementTick+0x4c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
     b8e:	2201      	movs	r2, #1
     b90:	4252      	negs	r2, r2
     b92:	4b2f      	ldr	r3, [pc, #188]	; (c50 <vTaskIncrementTick+0x104>)
     b94:	601a      	str	r2, [r3, #0]
     b96:	e006      	b.n	ba6 <vTaskIncrementTick+0x5a>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
     b98:	4b2a      	ldr	r3, [pc, #168]	; (c44 <vTaskIncrementTick+0xf8>)
     b9a:	681b      	ldr	r3, [r3, #0]
     b9c:	68db      	ldr	r3, [r3, #12]
     b9e:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
     ba0:	685a      	ldr	r2, [r3, #4]
     ba2:	4b2b      	ldr	r3, [pc, #172]	; (c50 <vTaskIncrementTick+0x104>)
     ba4:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
     ba6:	4b26      	ldr	r3, [pc, #152]	; (c40 <vTaskIncrementTick+0xf4>)
     ba8:	681a      	ldr	r2, [r3, #0]
     baa:	4b29      	ldr	r3, [pc, #164]	; (c50 <vTaskIncrementTick+0x104>)
     bac:	681b      	ldr	r3, [r3, #0]
     bae:	429a      	cmp	r2, r3
     bb0:	d343      	bcc.n	c3a <vTaskIncrementTick+0xee>
     bb2:	4b24      	ldr	r3, [pc, #144]	; (c44 <vTaskIncrementTick+0xf8>)
     bb4:	681b      	ldr	r3, [r3, #0]
     bb6:	681b      	ldr	r3, [r3, #0]
     bb8:	2b00      	cmp	r3, #0
     bba:	d00b      	beq.n	bd4 <vTaskIncrementTick+0x88>
     bbc:	4b21      	ldr	r3, [pc, #132]	; (c44 <vTaskIncrementTick+0xf8>)
     bbe:	681b      	ldr	r3, [r3, #0]
     bc0:	68db      	ldr	r3, [r3, #12]
     bc2:	68dd      	ldr	r5, [r3, #12]
     bc4:	686b      	ldr	r3, [r5, #4]
     bc6:	4a1e      	ldr	r2, [pc, #120]	; (c40 <vTaskIncrementTick+0xf4>)
     bc8:	6812      	ldr	r2, [r2, #0]
     bca:	4293      	cmp	r3, r2
     bcc:	d810      	bhi.n	bf0 <vTaskIncrementTick+0xa4>
     bce:	4f21      	ldr	r7, [pc, #132]	; (c54 <vTaskIncrementTick+0x108>)
     bd0:	4e21      	ldr	r6, [pc, #132]	; (c58 <vTaskIncrementTick+0x10c>)
     bd2:	e010      	b.n	bf6 <vTaskIncrementTick+0xaa>
     bd4:	2201      	movs	r2, #1
     bd6:	4252      	negs	r2, r2
     bd8:	4b1d      	ldr	r3, [pc, #116]	; (c50 <vTaskIncrementTick+0x104>)
     bda:	601a      	str	r2, [r3, #0]
     bdc:	e02d      	b.n	c3a <vTaskIncrementTick+0xee>
     bde:	4b19      	ldr	r3, [pc, #100]	; (c44 <vTaskIncrementTick+0xf8>)
     be0:	681b      	ldr	r3, [r3, #0]
     be2:	68db      	ldr	r3, [r3, #12]
     be4:	68dd      	ldr	r5, [r3, #12]
     be6:	686b      	ldr	r3, [r5, #4]
     be8:	4a15      	ldr	r2, [pc, #84]	; (c40 <vTaskIncrementTick+0xf4>)
     bea:	6812      	ldr	r2, [r2, #0]
     bec:	4293      	cmp	r3, r2
     bee:	d902      	bls.n	bf6 <vTaskIncrementTick+0xaa>
     bf0:	4a17      	ldr	r2, [pc, #92]	; (c50 <vTaskIncrementTick+0x104>)
     bf2:	6013      	str	r3, [r2, #0]
     bf4:	e021      	b.n	c3a <vTaskIncrementTick+0xee>
     bf6:	1d2c      	adds	r4, r5, #4
     bf8:	1c20      	adds	r0, r4, #0
     bfa:	47b8      	blx	r7
     bfc:	6aab      	ldr	r3, [r5, #40]	; 0x28
     bfe:	2b00      	cmp	r3, #0
     c00:	d003      	beq.n	c0a <vTaskIncrementTick+0xbe>
     c02:	1c28      	adds	r0, r5, #0
     c04:	3018      	adds	r0, #24
     c06:	4b13      	ldr	r3, [pc, #76]	; (c54 <vTaskIncrementTick+0x108>)
     c08:	4798      	blx	r3
     c0a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
     c0c:	6832      	ldr	r2, [r6, #0]
     c0e:	4293      	cmp	r3, r2
     c10:	d901      	bls.n	c16 <vTaskIncrementTick+0xca>
     c12:	4a11      	ldr	r2, [pc, #68]	; (c58 <vTaskIncrementTick+0x10c>)
     c14:	6013      	str	r3, [r2, #0]
     c16:	0098      	lsls	r0, r3, #2
     c18:	18c3      	adds	r3, r0, r3
     c1a:	009b      	lsls	r3, r3, #2
     c1c:	480f      	ldr	r0, [pc, #60]	; (c5c <vTaskIncrementTick+0x110>)
     c1e:	18c0      	adds	r0, r0, r3
     c20:	1c21      	adds	r1, r4, #0
     c22:	4b0f      	ldr	r3, [pc, #60]	; (c60 <vTaskIncrementTick+0x114>)
     c24:	4798      	blx	r3
     c26:	4b07      	ldr	r3, [pc, #28]	; (c44 <vTaskIncrementTick+0xf8>)
     c28:	681b      	ldr	r3, [r3, #0]
     c2a:	681b      	ldr	r3, [r3, #0]
     c2c:	2b00      	cmp	r3, #0
     c2e:	d1d6      	bne.n	bde <vTaskIncrementTick+0x92>
     c30:	e7d0      	b.n	bd4 <vTaskIncrementTick+0x88>
	}
	else
	{
		++uxMissedTicks;
     c32:	4a0c      	ldr	r2, [pc, #48]	; (c64 <vTaskIncrementTick+0x118>)
     c34:	6813      	ldr	r3, [r2, #0]
     c36:	3301      	adds	r3, #1
     c38:	6013      	str	r3, [r2, #0]
		{
			vApplicationTickHook();
		}
	}
	#endif /* configUSE_TICK_HOOK */
}
     c3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c3c:	20000238 	.word	0x20000238
     c40:	20000254 	.word	0x20000254
     c44:	200001a0 	.word	0x200001a0
     c48:	20000258 	.word	0x20000258
     c4c:	200001a8 	.word	0x200001a8
     c50:	200000b4 	.word	0x200000b4
     c54:	00000845 	.word	0x00000845
     c58:	2000025c 	.word	0x2000025c
     c5c:	200001c0 	.word	0x200001c0
     c60:	000007f1 	.word	0x000007f1
     c64:	2000019c 	.word	0x2000019c

00000c68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
     c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
     c6a:	4b2f      	ldr	r3, [pc, #188]	; (d28 <xTaskResumeAll+0xc0>)
     c6c:	681b      	ldr	r3, [r3, #0]
     c6e:	2b00      	cmp	r3, #0
     c70:	d101      	bne.n	c76 <xTaskResumeAll+0xe>
     c72:	b672      	cpsid	i
     c74:	e7fe      	b.n	c74 <xTaskResumeAll+0xc>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
     c76:	4b2d      	ldr	r3, [pc, #180]	; (d2c <xTaskResumeAll+0xc4>)
     c78:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
     c7a:	4b2b      	ldr	r3, [pc, #172]	; (d28 <xTaskResumeAll+0xc0>)
     c7c:	681a      	ldr	r2, [r3, #0]
     c7e:	3a01      	subs	r2, #1
     c80:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
     c82:	681b      	ldr	r3, [r3, #0]
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
     c84:	2400      	movs	r4, #0
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
     c86:	2b00      	cmp	r3, #0
     c88:	d149      	bne.n	d1e <xTaskResumeAll+0xb6>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
     c8a:	4b29      	ldr	r3, [pc, #164]	; (d30 <xTaskResumeAll+0xc8>)
     c8c:	681b      	ldr	r3, [r3, #0]
     c8e:	2600      	movs	r6, #0
     c90:	2b00      	cmp	r3, #0
     c92:	d122      	bne.n	cda <xTaskResumeAll+0x72>
     c94:	e043      	b.n	d1e <xTaskResumeAll+0xb6>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
     c96:	4b27      	ldr	r3, [pc, #156]	; (d34 <xTaskResumeAll+0xcc>)
     c98:	68db      	ldr	r3, [r3, #12]
     c9a:	68df      	ldr	r7, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
     c9c:	1c38      	adds	r0, r7, #0
     c9e:	3018      	adds	r0, #24
     ca0:	4b25      	ldr	r3, [pc, #148]	; (d38 <xTaskResumeAll+0xd0>)
     ca2:	4798      	blx	r3
					uxListRemove( &( pxTCB->xGenericListItem ) );
     ca4:	1d3d      	adds	r5, r7, #4
     ca6:	1c28      	adds	r0, r5, #0
     ca8:	4b23      	ldr	r3, [pc, #140]	; (d38 <xTaskResumeAll+0xd0>)
     caa:	4798      	blx	r3
					prvAddTaskToReadyQueue( pxTCB );
     cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     cae:	4a23      	ldr	r2, [pc, #140]	; (d3c <xTaskResumeAll+0xd4>)
     cb0:	6812      	ldr	r2, [r2, #0]
     cb2:	4293      	cmp	r3, r2
     cb4:	d901      	bls.n	cba <xTaskResumeAll+0x52>
     cb6:	4a21      	ldr	r2, [pc, #132]	; (d3c <xTaskResumeAll+0xd4>)
     cb8:	6013      	str	r3, [r2, #0]
     cba:	0098      	lsls	r0, r3, #2
     cbc:	18c3      	adds	r3, r0, r3
     cbe:	009b      	lsls	r3, r3, #2
     cc0:	481f      	ldr	r0, [pc, #124]	; (d40 <xTaskResumeAll+0xd8>)
     cc2:	18c0      	adds	r0, r0, r3
     cc4:	1c29      	adds	r1, r5, #0
     cc6:	4b1f      	ldr	r3, [pc, #124]	; (d44 <xTaskResumeAll+0xdc>)
     cc8:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
     cca:	4b1f      	ldr	r3, [pc, #124]	; (d48 <xTaskResumeAll+0xe0>)
     ccc:	681b      	ldr	r3, [r3, #0]
     cce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     cd2:	429a      	cmp	r2, r3
     cd4:	d302      	bcc.n	cdc <xTaskResumeAll+0x74>
					{
						xYieldRequired = pdTRUE;
     cd6:	2601      	movs	r6, #1
     cd8:	e000      	b.n	cdc <xTaskResumeAll+0x74>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
     cda:	4c16      	ldr	r4, [pc, #88]	; (d34 <xTaskResumeAll+0xcc>)
     cdc:	6823      	ldr	r3, [r4, #0]
     cde:	2b00      	cmp	r3, #0
     ce0:	d1d9      	bne.n	c96 <xTaskResumeAll+0x2e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
     ce2:	4b1a      	ldr	r3, [pc, #104]	; (d4c <xTaskResumeAll+0xe4>)
     ce4:	681b      	ldr	r3, [r3, #0]
     ce6:	2b00      	cmp	r3, #0
     ce8:	d00c      	beq.n	d04 <xTaskResumeAll+0x9c>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
     cea:	4b18      	ldr	r3, [pc, #96]	; (d4c <xTaskResumeAll+0xe4>)
     cec:	681b      	ldr	r3, [r3, #0]
     cee:	2b00      	cmp	r3, #0
     cf0:	d008      	beq.n	d04 <xTaskResumeAll+0x9c>
					{
						vTaskIncrementTick();
     cf2:	4d17      	ldr	r5, [pc, #92]	; (d50 <xTaskResumeAll+0xe8>)
						--uxMissedTicks;
     cf4:	4c15      	ldr	r4, [pc, #84]	; (d4c <xTaskResumeAll+0xe4>)
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
     cf6:	47a8      	blx	r5
						--uxMissedTicks;
     cf8:	6823      	ldr	r3, [r4, #0]
     cfa:	3b01      	subs	r3, #1
     cfc:	6023      	str	r3, [r4, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
     cfe:	6823      	ldr	r3, [r4, #0]
     d00:	2b00      	cmp	r3, #0
     d02:	d1f8      	bne.n	cf6 <xTaskResumeAll+0x8e>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
     d04:	2e01      	cmp	r6, #1
     d06:	d004      	beq.n	d12 <xTaskResumeAll+0xaa>
     d08:	4b12      	ldr	r3, [pc, #72]	; (d54 <xTaskResumeAll+0xec>)
     d0a:	681b      	ldr	r3, [r3, #0]
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
     d0c:	2400      	movs	r4, #0
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
     d0e:	2b01      	cmp	r3, #1
     d10:	d105      	bne.n	d1e <xTaskResumeAll+0xb6>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
     d12:	2200      	movs	r2, #0
     d14:	4b0f      	ldr	r3, [pc, #60]	; (d54 <xTaskResumeAll+0xec>)
     d16:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
     d18:	4b0f      	ldr	r3, [pc, #60]	; (d58 <xTaskResumeAll+0xf0>)
     d1a:	4798      	blx	r3
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
     d1c:	2401      	movs	r4, #1
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
     d1e:	4b0f      	ldr	r3, [pc, #60]	; (d5c <xTaskResumeAll+0xf4>)
     d20:	4798      	blx	r3

	return xAlreadyYielded;
}
     d22:	1c20      	adds	r0, r4, #0
     d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d26:	46c0      	nop			; (mov r8, r8)
     d28:	20000238 	.word	0x20000238
     d2c:	000010fd 	.word	0x000010fd
     d30:	2000027c 	.word	0x2000027c
     d34:	20000240 	.word	0x20000240
     d38:	00000845 	.word	0x00000845
     d3c:	2000025c 	.word	0x2000025c
     d40:	200001c0 	.word	0x200001c0
     d44:	000007f1 	.word	0x000007f1
     d48:	2000023c 	.word	0x2000023c
     d4c:	2000019c 	.word	0x2000019c
     d50:	00000b4d 	.word	0x00000b4d
     d54:	20000278 	.word	0x20000278
     d58:	000010e5 	.word	0x000010e5
     d5c:	00001115 	.word	0x00001115

00000d60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
     d60:	b510      	push	{r4, lr}
     d62:	1e04      	subs	r4, r0, #0
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
     d64:	d010      	beq.n	d88 <vTaskDelay+0x28>
		{
			vTaskSuspendAll();
     d66:	4b0a      	ldr	r3, [pc, #40]	; (d90 <vTaskDelay+0x30>)
     d68:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
     d6a:	4b0a      	ldr	r3, [pc, #40]	; (d94 <vTaskDelay+0x34>)
     d6c:	681b      	ldr	r3, [r3, #0]
     d6e:	18e4      	adds	r4, r4, r3

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
     d70:	4b09      	ldr	r3, [pc, #36]	; (d98 <vTaskDelay+0x38>)
     d72:	6818      	ldr	r0, [r3, #0]
     d74:	3004      	adds	r0, #4
     d76:	4b09      	ldr	r3, [pc, #36]	; (d9c <vTaskDelay+0x3c>)
     d78:	4798      	blx	r3
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
     d7a:	1c20      	adds	r0, r4, #0
     d7c:	4b08      	ldr	r3, [pc, #32]	; (da0 <vTaskDelay+0x40>)
     d7e:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
     d80:	4b08      	ldr	r3, [pc, #32]	; (da4 <vTaskDelay+0x44>)
     d82:	4798      	blx	r3
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
     d84:	2800      	cmp	r0, #0
     d86:	d101      	bne.n	d8c <vTaskDelay+0x2c>
		{
			portYIELD_WITHIN_API();
     d88:	4b07      	ldr	r3, [pc, #28]	; (da8 <vTaskDelay+0x48>)
     d8a:	4798      	blx	r3
		}
	}
     d8c:	bd10      	pop	{r4, pc}
     d8e:	46c0      	nop			; (mov r8, r8)
     d90:	00000b1d 	.word	0x00000b1d
     d94:	20000254 	.word	0x20000254
     d98:	2000023c 	.word	0x2000023c
     d9c:	00000845 	.word	0x00000845
     da0:	0000086d 	.word	0x0000086d
     da4:	00000c69 	.word	0x00000c69
     da8:	000010e5 	.word	0x000010e5

00000dac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
     dac:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
     dae:	4b24      	ldr	r3, [pc, #144]	; (e40 <vTaskSwitchContext+0x94>)
     db0:	681b      	ldr	r3, [r3, #0]
     db2:	2b00      	cmp	r3, #0
     db4:	d110      	bne.n	dd8 <vTaskSwitchContext+0x2c>
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
     db6:	4b23      	ldr	r3, [pc, #140]	; (e44 <vTaskSwitchContext+0x98>)
     db8:	681b      	ldr	r3, [r3, #0]
     dba:	009a      	lsls	r2, r3, #2
     dbc:	18d3      	adds	r3, r2, r3
     dbe:	009b      	lsls	r3, r3, #2
     dc0:	4a21      	ldr	r2, [pc, #132]	; (e48 <vTaskSwitchContext+0x9c>)
     dc2:	589b      	ldr	r3, [r3, r2]
     dc4:	2b00      	cmp	r3, #0
     dc6:	d11a      	bne.n	dfe <vTaskSwitchContext+0x52>
     dc8:	4b1e      	ldr	r3, [pc, #120]	; (e44 <vTaskSwitchContext+0x98>)
     dca:	681b      	ldr	r3, [r3, #0]
     dcc:	2b00      	cmp	r3, #0
     dce:	d00a      	beq.n	de6 <vTaskSwitchContext+0x3a>
     dd0:	4a1c      	ldr	r2, [pc, #112]	; (e44 <vTaskSwitchContext+0x98>)
     dd2:	4c1d      	ldr	r4, [pc, #116]	; (e48 <vTaskSwitchContext+0x9c>)
     dd4:	1c10      	adds	r0, r2, #0
     dd6:	e008      	b.n	dea <vTaskSwitchContext+0x3e>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
     dd8:	2201      	movs	r2, #1
     dda:	4b1c      	ldr	r3, [pc, #112]	; (e4c <vTaskSwitchContext+0xa0>)
     ddc:	601a      	str	r2, [r3, #0]
     dde:	e02d      	b.n	e3c <vTaskSwitchContext+0x90>
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
     de0:	6803      	ldr	r3, [r0, #0]
     de2:	2b00      	cmp	r3, #0
     de4:	d101      	bne.n	dea <vTaskSwitchContext+0x3e>
     de6:	b672      	cpsid	i
     de8:	e7fe      	b.n	de8 <vTaskSwitchContext+0x3c>
     dea:	6813      	ldr	r3, [r2, #0]
     dec:	3b01      	subs	r3, #1
     dee:	6013      	str	r3, [r2, #0]
     df0:	6813      	ldr	r3, [r2, #0]
     df2:	0099      	lsls	r1, r3, #2
     df4:	18cb      	adds	r3, r1, r3
     df6:	009b      	lsls	r3, r3, #2
     df8:	591b      	ldr	r3, [r3, r4]
     dfa:	2b00      	cmp	r3, #0
     dfc:	d0f0      	beq.n	de0 <vTaskSwitchContext+0x34>
     dfe:	4b11      	ldr	r3, [pc, #68]	; (e44 <vTaskSwitchContext+0x98>)
     e00:	681b      	ldr	r3, [r3, #0]
     e02:	4c11      	ldr	r4, [pc, #68]	; (e48 <vTaskSwitchContext+0x9c>)
     e04:	009a      	lsls	r2, r3, #2
     e06:	18d1      	adds	r1, r2, r3
     e08:	0089      	lsls	r1, r1, #2
     e0a:	1861      	adds	r1, r4, r1
     e0c:	6848      	ldr	r0, [r1, #4]
     e0e:	6840      	ldr	r0, [r0, #4]
     e10:	6048      	str	r0, [r1, #4]
     e12:	18d2      	adds	r2, r2, r3
     e14:	0092      	lsls	r2, r2, #2
     e16:	3208      	adds	r2, #8
     e18:	18a2      	adds	r2, r4, r2
     e1a:	4290      	cmp	r0, r2
     e1c:	d105      	bne.n	e2a <vTaskSwitchContext+0x7e>
     e1e:	6841      	ldr	r1, [r0, #4]
     e20:	009a      	lsls	r2, r3, #2
     e22:	18d2      	adds	r2, r2, r3
     e24:	0092      	lsls	r2, r2, #2
     e26:	18a2      	adds	r2, r4, r2
     e28:	6051      	str	r1, [r2, #4]
     e2a:	009a      	lsls	r2, r3, #2
     e2c:	18d3      	adds	r3, r2, r3
     e2e:	009b      	lsls	r3, r3, #2
     e30:	4a05      	ldr	r2, [pc, #20]	; (e48 <vTaskSwitchContext+0x9c>)
     e32:	18d3      	adds	r3, r2, r3
     e34:	685b      	ldr	r3, [r3, #4]
     e36:	68da      	ldr	r2, [r3, #12]
     e38:	4b05      	ldr	r3, [pc, #20]	; (e50 <vTaskSwitchContext+0xa4>)
     e3a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();
	}
}
     e3c:	bd10      	pop	{r4, pc}
     e3e:	46c0      	nop			; (mov r8, r8)
     e40:	20000238 	.word	0x20000238
     e44:	2000025c 	.word	0x2000025c
     e48:	200001c0 	.word	0x200001c0
     e4c:	20000278 	.word	0x20000278
     e50:	2000023c 	.word	0x2000023c

00000e54 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
     e54:	b538      	push	{r3, r4, r5, lr}
portTickType xTimeToWake;

	configASSERT( pxEventList );
     e56:	2800      	cmp	r0, #0
     e58:	d101      	bne.n	e5e <vTaskPlaceOnEventList+0xa>
     e5a:	b672      	cpsid	i
     e5c:	e7fe      	b.n	e5c <vTaskPlaceOnEventList+0x8>
     e5e:	1c0c      	adds	r4, r1, #0
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
     e60:	4d07      	ldr	r5, [pc, #28]	; (e80 <vTaskPlaceOnEventList+0x2c>)
     e62:	6829      	ldr	r1, [r5, #0]
     e64:	3118      	adds	r1, #24
     e66:	4b07      	ldr	r3, [pc, #28]	; (e84 <vTaskPlaceOnEventList+0x30>)
     e68:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
     e6a:	6828      	ldr	r0, [r5, #0]
     e6c:	3004      	adds	r0, #4
     e6e:	4b06      	ldr	r3, [pc, #24]	; (e88 <vTaskPlaceOnEventList+0x34>)
     e70:	4798      	blx	r3
	}
	#else /* INCLUDE_vTaskSuspend */
	{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
     e72:	4b06      	ldr	r3, [pc, #24]	; (e8c <vTaskPlaceOnEventList+0x38>)
     e74:	6818      	ldr	r0, [r3, #0]
     e76:	1820      	adds	r0, r4, r0
			prvAddCurrentTaskToDelayedList( xTimeToWake );
     e78:	4b05      	ldr	r3, [pc, #20]	; (e90 <vTaskPlaceOnEventList+0x3c>)
     e7a:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */
}
     e7c:	bd38      	pop	{r3, r4, r5, pc}
     e7e:	46c0      	nop			; (mov r8, r8)
     e80:	2000023c 	.word	0x2000023c
     e84:	0000080d 	.word	0x0000080d
     e88:	00000845 	.word	0x00000845
     e8c:	20000254 	.word	0x20000254
     e90:	0000086d 	.word	0x0000086d

00000e94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
     e94:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
     e96:	68c3      	ldr	r3, [r0, #12]
     e98:	68dd      	ldr	r5, [r3, #12]
	configASSERT( pxUnblockedTCB );
     e9a:	2d00      	cmp	r5, #0
     e9c:	d101      	bne.n	ea2 <xTaskRemoveFromEventList+0xe>
     e9e:	b672      	cpsid	i
     ea0:	e7fe      	b.n	ea0 <xTaskRemoveFromEventList+0xc>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
     ea2:	1c2c      	adds	r4, r5, #0
     ea4:	3418      	adds	r4, #24
     ea6:	1c20      	adds	r0, r4, #0
     ea8:	4b12      	ldr	r3, [pc, #72]	; (ef4 <xTaskRemoveFromEventList+0x60>)
     eaa:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
     eac:	4b12      	ldr	r3, [pc, #72]	; (ef8 <xTaskRemoveFromEventList+0x64>)
     eae:	681b      	ldr	r3, [r3, #0]
     eb0:	2b00      	cmp	r3, #0
     eb2:	d113      	bne.n	edc <xTaskRemoveFromEventList+0x48>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
     eb4:	1d2c      	adds	r4, r5, #4
     eb6:	1c20      	adds	r0, r4, #0
     eb8:	4b0e      	ldr	r3, [pc, #56]	; (ef4 <xTaskRemoveFromEventList+0x60>)
     eba:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
     ebc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
     ebe:	4a0f      	ldr	r2, [pc, #60]	; (efc <xTaskRemoveFromEventList+0x68>)
     ec0:	6812      	ldr	r2, [r2, #0]
     ec2:	4293      	cmp	r3, r2
     ec4:	d901      	bls.n	eca <xTaskRemoveFromEventList+0x36>
     ec6:	4a0d      	ldr	r2, [pc, #52]	; (efc <xTaskRemoveFromEventList+0x68>)
     ec8:	6013      	str	r3, [r2, #0]
     eca:	0098      	lsls	r0, r3, #2
     ecc:	18c3      	adds	r3, r0, r3
     ece:	009b      	lsls	r3, r3, #2
     ed0:	480b      	ldr	r0, [pc, #44]	; (f00 <xTaskRemoveFromEventList+0x6c>)
     ed2:	18c0      	adds	r0, r0, r3
     ed4:	1c21      	adds	r1, r4, #0
     ed6:	4b0b      	ldr	r3, [pc, #44]	; (f04 <xTaskRemoveFromEventList+0x70>)
     ed8:	4798      	blx	r3
     eda:	e003      	b.n	ee4 <xTaskRemoveFromEventList+0x50>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
     edc:	480a      	ldr	r0, [pc, #40]	; (f08 <xTaskRemoveFromEventList+0x74>)
     ede:	1c21      	adds	r1, r4, #0
     ee0:	4b08      	ldr	r3, [pc, #32]	; (f04 <xTaskRemoveFromEventList+0x70>)
     ee2:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
     ee4:	4b09      	ldr	r3, [pc, #36]	; (f0c <xTaskRemoveFromEventList+0x78>)
     ee6:	681b      	ldr	r3, [r3, #0]
     ee8:	6aea      	ldr	r2, [r5, #44]	; 0x2c
     eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     eec:	2000      	movs	r0, #0
     eee:	429a      	cmp	r2, r3
     ef0:	4140      	adcs	r0, r0
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
     ef2:	bd38      	pop	{r3, r4, r5, pc}
     ef4:	00000845 	.word	0x00000845
     ef8:	20000238 	.word	0x20000238
     efc:	2000025c 	.word	0x2000025c
     f00:	200001c0 	.word	0x200001c0
     f04:	000007f1 	.word	0x000007f1
     f08:	20000240 	.word	0x20000240
     f0c:	2000023c 	.word	0x2000023c

00000f10 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
	configASSERT( pxTimeOut );
     f10:	2800      	cmp	r0, #0
     f12:	d101      	bne.n	f18 <vTaskSetTimeOutState+0x8>
     f14:	b672      	cpsid	i
     f16:	e7fe      	b.n	f16 <vTaskSetTimeOutState+0x6>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
     f18:	4b03      	ldr	r3, [pc, #12]	; (f28 <vTaskSetTimeOutState+0x18>)
     f1a:	681b      	ldr	r3, [r3, #0]
     f1c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
     f1e:	4b03      	ldr	r3, [pc, #12]	; (f2c <vTaskSetTimeOutState+0x1c>)
     f20:	681b      	ldr	r3, [r3, #0]
     f22:	6043      	str	r3, [r0, #4]
}
     f24:	4770      	bx	lr
     f26:	46c0      	nop			; (mov r8, r8)
     f28:	200001a8 	.word	0x200001a8
     f2c:	20000254 	.word	0x20000254

00000f30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
     f30:	b570      	push	{r4, r5, r6, lr}
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
     f32:	2800      	cmp	r0, #0
     f34:	d101      	bne.n	f3a <xTaskCheckForTimeOut+0xa>
     f36:	b672      	cpsid	i
     f38:	e7fe      	b.n	f38 <xTaskCheckForTimeOut+0x8>
	configASSERT( pxTicksToWait );
     f3a:	2900      	cmp	r1, #0
     f3c:	d101      	bne.n	f42 <xTaskCheckForTimeOut+0x12>
     f3e:	b672      	cpsid	i
     f40:	e7fe      	b.n	f40 <xTaskCheckForTimeOut+0x10>
     f42:	1c0d      	adds	r5, r1, #0
     f44:	1c04      	adds	r4, r0, #0

	taskENTER_CRITICAL();
     f46:	4b11      	ldr	r3, [pc, #68]	; (f8c <xTaskCheckForTimeOut+0x5c>)
     f48:	4798      	blx	r3
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
     f4a:	4b11      	ldr	r3, [pc, #68]	; (f90 <xTaskCheckForTimeOut+0x60>)
     f4c:	681b      	ldr	r3, [r3, #0]
     f4e:	6822      	ldr	r2, [r4, #0]
     f50:	429a      	cmp	r2, r3
     f52:	d005      	beq.n	f60 <xTaskCheckForTimeOut+0x30>
     f54:	4b0f      	ldr	r3, [pc, #60]	; (f94 <xTaskCheckForTimeOut+0x64>)
     f56:	681b      	ldr	r3, [r3, #0]
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
     f58:	2601      	movs	r6, #1
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
     f5a:	6862      	ldr	r2, [r4, #4]
     f5c:	429a      	cmp	r2, r3
     f5e:	d910      	bls.n	f82 <xTaskCheckForTimeOut+0x52>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
     f60:	4b0c      	ldr	r3, [pc, #48]	; (f94 <xTaskCheckForTimeOut+0x64>)
     f62:	6819      	ldr	r1, [r3, #0]
     f64:	6860      	ldr	r0, [r4, #4]
     f66:	682b      	ldr	r3, [r5, #0]
     f68:	1a09      	subs	r1, r1, r0
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
     f6a:	2601      	movs	r6, #1
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
     f6c:	4299      	cmp	r1, r3
     f6e:	d208      	bcs.n	f82 <xTaskCheckForTimeOut+0x52>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
     f70:	4a08      	ldr	r2, [pc, #32]	; (f94 <xTaskCheckForTimeOut+0x64>)
     f72:	6812      	ldr	r2, [r2, #0]
     f74:	1a12      	subs	r2, r2, r0
     f76:	1a9b      	subs	r3, r3, r2
     f78:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
     f7a:	1c20      	adds	r0, r4, #0
     f7c:	4b06      	ldr	r3, [pc, #24]	; (f98 <xTaskCheckForTimeOut+0x68>)
     f7e:	4798      	blx	r3
			xReturn = pdFALSE;
     f80:	2600      	movs	r6, #0
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
     f82:	4b06      	ldr	r3, [pc, #24]	; (f9c <xTaskCheckForTimeOut+0x6c>)
     f84:	4798      	blx	r3

	return xReturn;
}
     f86:	1c30      	adds	r0, r6, #0
     f88:	bd70      	pop	{r4, r5, r6, pc}
     f8a:	46c0      	nop			; (mov r8, r8)
     f8c:	000010fd 	.word	0x000010fd
     f90:	200001a8 	.word	0x200001a8
     f94:	20000254 	.word	0x20000254
     f98:	00000f11 	.word	0x00000f11
     f9c:	00001115 	.word	0x00001115

00000fa0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
     fa0:	2201      	movs	r2, #1
     fa2:	4b01      	ldr	r3, [pc, #4]	; (fa8 <vTaskMissedYield+0x8>)
     fa4:	601a      	str	r2, [r3, #0]
}
     fa6:	4770      	bx	lr
     fa8:	20000278 	.word	0x20000278

00000fac <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
     fac:	4b01      	ldr	r3, [pc, #4]	; (fb4 <xTaskGetCurrentTaskHandle+0x8>)
     fae:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
     fb0:	4770      	bx	lr
     fb2:	46c0      	nop			; (mov r8, r8)
     fb4:	2000023c 	.word	0x2000023c

00000fb8 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
     fb8:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
     fba:	2800      	cmp	r0, #0
     fbc:	d02f      	beq.n	101e <vTaskPriorityInherit+0x66>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
     fbe:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
     fc0:	4a17      	ldr	r2, [pc, #92]	; (1020 <vTaskPriorityInherit+0x68>)
     fc2:	6812      	ldr	r2, [r2, #0]
     fc4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     fc6:	4293      	cmp	r3, r2
     fc8:	d229      	bcs.n	101e <vTaskPriorityInherit+0x66>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
     fca:	4a15      	ldr	r2, [pc, #84]	; (1020 <vTaskPriorityInherit+0x68>)
     fcc:	6812      	ldr	r2, [r2, #0]
     fce:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
     fd0:	2206      	movs	r2, #6
     fd2:	1a52      	subs	r2, r2, r1
     fd4:	6182      	str	r2, [r0, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
     fd6:	009a      	lsls	r2, r3, #2
     fd8:	18d3      	adds	r3, r2, r3
     fda:	009b      	lsls	r3, r3, #2
     fdc:	4a11      	ldr	r2, [pc, #68]	; (1024 <vTaskPriorityInherit+0x6c>)
     fde:	18d3      	adds	r3, r2, r3
     fe0:	6942      	ldr	r2, [r0, #20]
     fe2:	429a      	cmp	r2, r3
     fe4:	d117      	bne.n	1016 <vTaskPriorityInherit+0x5e>
     fe6:	1c05      	adds	r5, r0, #0
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
     fe8:	1d04      	adds	r4, r0, #4
     fea:	1c20      	adds	r0, r4, #0
     fec:	4b0e      	ldr	r3, [pc, #56]	; (1028 <vTaskPriorityInherit+0x70>)
     fee:	4798      	blx	r3
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
     ff0:	4b0b      	ldr	r3, [pc, #44]	; (1020 <vTaskPriorityInherit+0x68>)
     ff2:	681b      	ldr	r3, [r3, #0]
     ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     ff6:	62eb      	str	r3, [r5, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
     ff8:	4a0c      	ldr	r2, [pc, #48]	; (102c <vTaskPriorityInherit+0x74>)
     ffa:	6812      	ldr	r2, [r2, #0]
     ffc:	4293      	cmp	r3, r2
     ffe:	d901      	bls.n	1004 <vTaskPriorityInherit+0x4c>
    1000:	4a0a      	ldr	r2, [pc, #40]	; (102c <vTaskPriorityInherit+0x74>)
    1002:	6013      	str	r3, [r2, #0]
    1004:	0098      	lsls	r0, r3, #2
    1006:	18c0      	adds	r0, r0, r3
    1008:	0083      	lsls	r3, r0, #2
    100a:	4806      	ldr	r0, [pc, #24]	; (1024 <vTaskPriorityInherit+0x6c>)
    100c:	18c0      	adds	r0, r0, r3
    100e:	1c21      	adds	r1, r4, #0
    1010:	4b07      	ldr	r3, [pc, #28]	; (1030 <vTaskPriorityInherit+0x78>)
    1012:	4798      	blx	r3
    1014:	e003      	b.n	101e <vTaskPriorityInherit+0x66>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    1016:	4b02      	ldr	r3, [pc, #8]	; (1020 <vTaskPriorityInherit+0x68>)
    1018:	681b      	ldr	r3, [r3, #0]
    101a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    101c:	62c3      	str	r3, [r0, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
			}
		}
	}
    101e:	bd38      	pop	{r3, r4, r5, pc}
    1020:	2000023c 	.word	0x2000023c
    1024:	200001c0 	.word	0x200001c0
    1028:	00000845 	.word	0x00000845
    102c:	2000025c 	.word	0x2000025c
    1030:	000007f1 	.word	0x000007f1

00001034 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    1034:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
    1036:	2800      	cmp	r0, #0
    1038:	d01b      	beq.n	1072 <vTaskPriorityDisinherit+0x3e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    103a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    103c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    103e:	4293      	cmp	r3, r2
    1040:	d017      	beq.n	1072 <vTaskPriorityDisinherit+0x3e>
    1042:	1c04      	adds	r4, r0, #0
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
    1044:	1d05      	adds	r5, r0, #4
    1046:	1c28      	adds	r0, r5, #0
    1048:	4b0a      	ldr	r3, [pc, #40]	; (1074 <vTaskPriorityDisinherit+0x40>)
    104a:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    104c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    104e:	62e3      	str	r3, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    1050:	2206      	movs	r2, #6
    1052:	1ad2      	subs	r2, r2, r3
    1054:	61a2      	str	r2, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
    1056:	4a08      	ldr	r2, [pc, #32]	; (1078 <vTaskPriorityDisinherit+0x44>)
    1058:	6812      	ldr	r2, [r2, #0]
    105a:	4293      	cmp	r3, r2
    105c:	d901      	bls.n	1062 <vTaskPriorityDisinherit+0x2e>
    105e:	4a06      	ldr	r2, [pc, #24]	; (1078 <vTaskPriorityDisinherit+0x44>)
    1060:	6013      	str	r3, [r2, #0]
    1062:	0098      	lsls	r0, r3, #2
    1064:	18c0      	adds	r0, r0, r3
    1066:	0083      	lsls	r3, r0, #2
    1068:	4804      	ldr	r0, [pc, #16]	; (107c <vTaskPriorityDisinherit+0x48>)
    106a:	18c0      	adds	r0, r0, r3
    106c:	1c29      	adds	r1, r5, #0
    106e:	4b04      	ldr	r3, [pc, #16]	; (1080 <vTaskPriorityDisinherit+0x4c>)
    1070:	4798      	blx	r3
			}
		}
	}
    1072:	bd38      	pop	{r3, r4, r5, pc}
    1074:	00000845 	.word	0x00000845
    1078:	2000025c 	.word	0x2000025c
    107c:	200001c0 	.word	0x200001c0
    1080:	000007f1 	.word	0x000007f1

00001084 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
    1084:	4a06      	ldr	r2, [pc, #24]	; (10a0 <pxCurrentTCBConst3>)
    1086:	6813      	ldr	r3, [r2, #0]
    1088:	6818      	ldr	r0, [r3, #0]
    108a:	3020      	adds	r0, #32
    108c:	f380 8809 	msr	PSP, r0
    1090:	2002      	movs	r0, #2
    1092:	f380 8814 	msr	CONTROL, r0
    1096:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    1098:	46ae      	mov	lr, r5
    109a:	b662      	cpsie	i
    109c:	bd00      	pop	{pc}
    109e:	46c0      	nop			; (mov r8, r8)

000010a0 <pxCurrentTCBConst3>:
    10a0:	2000023c 	.word	0x2000023c

000010a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    10a4:	b510      	push	{r4, lr}
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    10a6:	1f03      	subs	r3, r0, #4
    10a8:	2480      	movs	r4, #128	; 0x80
    10aa:	0464      	lsls	r4, r4, #17
    10ac:	601c      	str	r4, [r3, #0]
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
    10ae:	3b04      	subs	r3, #4
    10b0:	6019      	str	r1, [r3, #0]
	pxTopOfStack -= 6;	/* LR, R12, R3..R1 */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
    10b2:	3b18      	subs	r3, #24
    10b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
    10b6:	3840      	subs	r0, #64	; 0x40

	return pxTopOfStack;
}
    10b8:	bd10      	pop	{r4, pc}
    10ba:	46c0      	nop			; (mov r8, r8)

000010bc <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    10bc:	4b08      	ldr	r3, [pc, #32]	; (10e0 <pxCurrentTCBConst2>)
    10be:	6819      	ldr	r1, [r3, #0]
    10c0:	6808      	ldr	r0, [r1, #0]
    10c2:	3010      	adds	r0, #16
    10c4:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    10c6:	46a0      	mov	r8, r4
    10c8:	46a9      	mov	r9, r5
    10ca:	46b2      	mov	sl, r6
    10cc:	46bb      	mov	fp, r7
    10ce:	f380 8809 	msr	PSP, r0
    10d2:	3820      	subs	r0, #32
    10d4:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    10d6:	4671      	mov	r1, lr
    10d8:	200d      	movs	r0, #13
    10da:	4301      	orrs	r1, r0
    10dc:	4708      	bx	r1
    10de:	46c0      	nop			; (mov r8, r8)

000010e0 <pxCurrentTCBConst2>:
    10e0:	2000023c 	.word	0x2000023c

000010e4 <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void )
{
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
    10e4:	2280      	movs	r2, #128	; 0x80
    10e6:	0552      	lsls	r2, r2, #21
    10e8:	4b03      	ldr	r3, [pc, #12]	; (10f8 <vPortYield+0x14>)
    10ea:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
    10ec:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    10f0:	f3bf 8f6f 	isb	sy
}
    10f4:	4770      	bx	lr
    10f6:	46c0      	nop			; (mov r8, r8)
    10f8:	e000ed04 	.word	0xe000ed04

000010fc <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    portDISABLE_INTERRUPTS();
    10fc:	b672      	cpsid	i
    uxCriticalNesting++;
    10fe:	4a04      	ldr	r2, [pc, #16]	; (1110 <vPortEnterCritical+0x14>)
    1100:	6813      	ldr	r3, [r2, #0]
    1102:	3301      	adds	r3, #1
    1104:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
    1106:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    110a:	f3bf 8f6f 	isb	sy
}
    110e:	4770      	bx	lr
    1110:	200000b8 	.word	0x200000b8

00001114 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    uxCriticalNesting--;
    1114:	4a03      	ldr	r2, [pc, #12]	; (1124 <vPortExitCritical+0x10>)
    1116:	6813      	ldr	r3, [r2, #0]
    1118:	3b01      	subs	r3, #1
    111a:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
    111c:	2b00      	cmp	r3, #0
    111e:	d100      	bne.n	1122 <vPortExitCritical+0xe>
    {
        portENABLE_INTERRUPTS();
    1120:	b662      	cpsie	i
    }
}
    1122:	4770      	bx	lr
    1124:	200000b8 	.word	0x200000b8

00001128 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    1128:	f3ef 8009 	mrs	r0, PSP
    112c:	4b0e      	ldr	r3, [pc, #56]	; (1168 <pxCurrentTCBConst>)
    112e:	681a      	ldr	r2, [r3, #0]
    1130:	3820      	subs	r0, #32
    1132:	6010      	str	r0, [r2, #0]
    1134:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    1136:	4644      	mov	r4, r8
    1138:	464d      	mov	r5, r9
    113a:	4656      	mov	r6, sl
    113c:	465f      	mov	r7, fp
    113e:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    1140:	b508      	push	{r3, lr}
    1142:	b672      	cpsid	i
    1144:	f7ff fe32 	bl	dac <vTaskSwitchContext>
    1148:	b662      	cpsie	i
    114a:	bc0c      	pop	{r2, r3}
    114c:	6811      	ldr	r1, [r2, #0]
    114e:	6808      	ldr	r0, [r1, #0]
    1150:	3010      	adds	r0, #16
    1152:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    1154:	46a0      	mov	r8, r4
    1156:	46a9      	mov	r9, r5
    1158:	46b2      	mov	sl, r6
    115a:	46bb      	mov	fp, r7
    115c:	f380 8809 	msr	PSP, r0
    1160:	3820      	subs	r0, #32
    1162:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    1164:	4718      	bx	r3
    1166:	46c0      	nop			; (mov r8, r8)

00001168 <pxCurrentTCBConst>:
    1168:	2000023c 	.word	0x2000023c

0000116c <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    116c:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
    116e:	b672      	cpsid	i
	{
		vTaskIncrementTick();
    1170:	4b01      	ldr	r3, [pc, #4]	; (1178 <SysTick_Handler+0xc>)
    1172:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
    1174:	b662      	cpsie	i
}
    1176:	bd08      	pop	{r3, pc}
    1178:	00000b4d 	.word	0x00000b4d

0000117c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
    117c:	b508      	push	{r3, lr}
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_VAL)  = 0; /* Load the SysTick Counter Value */
    117e:	2200      	movs	r2, #0
    1180:	4b07      	ldr	r3, [pc, #28]	; (11a0 <vPortSetupTimerInterrupt+0x24>)
    1182:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    1184:	2000      	movs	r0, #0
    1186:	4b07      	ldr	r3, [pc, #28]	; (11a4 <vPortSetupTimerInterrupt+0x28>)
    1188:	4798      	blx	r3
    118a:	21fa      	movs	r1, #250	; 0xfa
    118c:	0089      	lsls	r1, r1, #2
    118e:	4b06      	ldr	r3, [pc, #24]	; (11a8 <vPortSetupTimerInterrupt+0x2c>)
    1190:	4798      	blx	r3
    1192:	3801      	subs	r0, #1
    1194:	4b05      	ldr	r3, [pc, #20]	; (11ac <vPortSetupTimerInterrupt+0x30>)
    1196:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    1198:	2207      	movs	r2, #7
    119a:	4b05      	ldr	r3, [pc, #20]	; (11b0 <vPortSetupTimerInterrupt+0x34>)
    119c:	601a      	str	r2, [r3, #0]
}
    119e:	bd08      	pop	{r3, pc}
    11a0:	e000e018 	.word	0xe000e018
    11a4:	0000428d 	.word	0x0000428d
    11a8:	00006535 	.word	0x00006535
    11ac:	e000e014 	.word	0xe000e014
    11b0:	e000e010 	.word	0xe000e010

000011b4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
    11b4:	b508      	push	{r3, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    11b6:	4b0a      	ldr	r3, [pc, #40]	; (11e0 <xPortStartScheduler+0x2c>)
    11b8:	681a      	ldr	r2, [r3, #0]
    11ba:	21ff      	movs	r1, #255	; 0xff
    11bc:	0409      	lsls	r1, r1, #16
    11be:	430a      	orrs	r2, r1
    11c0:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    11c2:	681a      	ldr	r2, [r3, #0]
    11c4:	21ff      	movs	r1, #255	; 0xff
    11c6:	0609      	lsls	r1, r1, #24
    11c8:	430a      	orrs	r2, r1
    11ca:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
    11cc:	4b05      	ldr	r3, [pc, #20]	; (11e4 <xPortStartScheduler+0x30>)
    11ce:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    11d0:	2200      	movs	r2, #0
    11d2:	4b05      	ldr	r3, [pc, #20]	; (11e8 <xPortStartScheduler+0x34>)
    11d4:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
    11d6:	4b05      	ldr	r3, [pc, #20]	; (11ec <xPortStartScheduler+0x38>)
    11d8:	4798      	blx	r3

	/* Should not get here! */
	return 0;
}
    11da:	2000      	movs	r0, #0
    11dc:	bd08      	pop	{r3, pc}
    11de:	46c0      	nop			; (mov r8, r8)
    11e0:	e000ed20 	.word	0xe000ed20
    11e4:	0000117d 	.word	0x0000117d
    11e8:	200000b8 	.word	0x200000b8
    11ec:	00001085 	.word	0x00001085

000011f0 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    11f0:	b538      	push	{r3, r4, r5, lr}
    11f2:	1c04      	adds	r4, r0, #0
void *pvReturn = NULL;
static unsigned char *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    11f4:	0743      	lsls	r3, r0, #29
    11f6:	d002      	beq.n	11fe <pvPortMalloc+0xe>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    11f8:	2307      	movs	r3, #7
    11fa:	439c      	bics	r4, r3
    11fc:	3408      	adds	r4, #8
		}
	#endif

	vTaskSuspendAll();
    11fe:	4b10      	ldr	r3, [pc, #64]	; (1240 <pvPortMalloc+0x50>)
    1200:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
    1202:	4b10      	ldr	r3, [pc, #64]	; (1244 <pvPortMalloc+0x54>)
    1204:	681b      	ldr	r3, [r3, #0]
    1206:	2b00      	cmp	r3, #0
    1208:	d105      	bne.n	1216 <pvPortMalloc+0x26>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( unsigned char * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
    120a:	2207      	movs	r2, #7
    120c:	4b0e      	ldr	r3, [pc, #56]	; (1248 <pvPortMalloc+0x58>)
    120e:	3308      	adds	r3, #8
    1210:	4393      	bics	r3, r2
    1212:	4a0c      	ldr	r2, [pc, #48]	; (1244 <pvPortMalloc+0x54>)
    1214:	6013      	str	r3, [r2, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    1216:	4b0d      	ldr	r3, [pc, #52]	; (124c <pvPortMalloc+0x5c>)
    1218:	681b      	ldr	r3, [r3, #0]
    121a:	18e4      	adds	r4, r4, r3
    121c:	4a0c      	ldr	r2, [pc, #48]	; (1250 <pvPortMalloc+0x60>)
    121e:	4294      	cmp	r4, r2
    1220:	d807      	bhi.n	1232 <pvPortMalloc+0x42>
    1222:	42a3      	cmp	r3, r4
    1224:	d207      	bcs.n	1236 <pvPortMalloc+0x46>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    1226:	4a07      	ldr	r2, [pc, #28]	; (1244 <pvPortMalloc+0x54>)
    1228:	6815      	ldr	r5, [r2, #0]
    122a:	18ed      	adds	r5, r5, r3
			xNextFreeByte += xWantedSize;
    122c:	4b07      	ldr	r3, [pc, #28]	; (124c <pvPortMalloc+0x5c>)
    122e:	601c      	str	r4, [r3, #0]
    1230:	e002      	b.n	1238 <pvPortMalloc+0x48>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
    1232:	2500      	movs	r5, #0
    1234:	e000      	b.n	1238 <pvPortMalloc+0x48>
    1236:	2500      	movs	r5, #0
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
			xNextFreeByte += xWantedSize;
		}
	}
	xTaskResumeAll();
    1238:	4b06      	ldr	r3, [pc, #24]	; (1254 <pvPortMalloc+0x64>)
    123a:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
    123c:	1c28      	adds	r0, r5, #0
    123e:	bd38      	pop	{r3, r4, r5, pc}
    1240:	00000b1d 	.word	0x00000b1d
    1244:	20003d20 	.word	0x20003d20
    1248:	20000288 	.word	0x20000288
    124c:	20000284 	.word	0x20000284
    1250:	00003a8f 	.word	0x00003a8f
    1254:	00000c69 	.word	0x00000c69

00001258 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
    1258:	2800      	cmp	r0, #0
    125a:	d001      	beq.n	1260 <vPortFree+0x8>
    125c:	b672      	cpsid	i
    125e:	e7fe      	b.n	125e <vPortFree+0x6>
}
    1260:	4770      	bx	lr
    1262:	46c0      	nop			; (mov r8, r8)

00001264 <_Z3sup11structClockS_>:



Clock timeManage={0,0,true};

bool sup(Clock clock1,Clock clock2){
    1264:	b082      	sub	sp, #8
    1266:	b084      	sub	sp, #16
    1268:	9001      	str	r0, [sp, #4]
    126a:	9102      	str	r1, [sp, #8]
    126c:	9203      	str	r2, [sp, #12]
    126e:	9305      	str	r3, [sp, #20]
		if(clock1.second>clock2.second){//clock1>clock2
    1270:	9a01      	ldr	r2, [sp, #4]
    1272:	9b05      	ldr	r3, [sp, #20]
			return true;
    1274:	2001      	movs	r0, #1


Clock timeManage={0,0,true};

bool sup(Clock clock1,Clock clock2){
		if(clock1.second>clock2.second){//clock1>clock2
    1276:	429a      	cmp	r2, r3
    1278:	d809      	bhi.n	128e <_Z3sup11structClockS_+0x2a>
			return true;
		}
		else{
			if(clock1.second<clock2.second){
    127a:	9a01      	ldr	r2, [sp, #4]
    127c:	9b05      	ldr	r3, [sp, #20]
				return false;
    127e:	2000      	movs	r0, #0
bool sup(Clock clock1,Clock clock2){
		if(clock1.second>clock2.second){//clock1>clock2
			return true;
		}
		else{
			if(clock1.second<clock2.second){
    1280:	429a      	cmp	r2, r3
    1282:	d304      	bcc.n	128e <_Z3sup11structClockS_+0x2a>
				return false;
			}
			else{//egual
				if(clock1.halfmillis>clock2.halfmillis){
    1284:	9802      	ldr	r0, [sp, #8]
    1286:	9b06      	ldr	r3, [sp, #24]
    1288:	4283      	cmp	r3, r0
    128a:	4180      	sbcs	r0, r0
    128c:	4240      	negs	r0, r0
					return false;
				}
			}
		}

}
    128e:	b004      	add	sp, #16
    1290:	b002      	add	sp, #8
    1292:	4770      	bx	lr

00001294 <_Z11subClockPos11structClockS_>:
	}

	
	return ret;
}
Clock subClockPos(Clock clock1,Clock clock2 ){
    1294:	b084      	sub	sp, #16
    1296:	9101      	str	r1, [sp, #4]
    1298:	9202      	str	r2, [sp, #8]
    129a:	9303      	str	r3, [sp, #12]
	Clock ret={0,0,true};
    129c:	2300      	movs	r3, #0
    129e:	6003      	str	r3, [r0, #0]
    12a0:	6043      	str	r3, [r0, #4]
    12a2:	3301      	adds	r3, #1
    12a4:	7203      	strb	r3, [r0, #8]
	//clock1.second+=clock1.halfmillis/RTC_FREQ;
	//clock1.halfmillis=clock1.halfmillis%RTC_FREQ;	
		
	//clock2.second+=clock2.halfmillis/RTC_FREQ;
	//clock2.halfmillis=clock2.halfmillis%RTC_FREQ;
	long int halfmillis=clock2.halfmillis;
    12a6:	9905      	ldr	r1, [sp, #20]
	ret.second=clock1.second-clock2.second;
    12a8:	9a01      	ldr	r2, [sp, #4]
    12aa:	9b04      	ldr	r3, [sp, #16]
    12ac:	1ad2      	subs	r2, r2, r3
    12ae:	6002      	str	r2, [r0, #0]
	halfmillis=(long int)clock1.halfmillis-halfmillis;
    12b0:	9b02      	ldr	r3, [sp, #8]
    12b2:	1a5b      	subs	r3, r3, r1
	
	
	
	if(halfmillis<0){
    12b4:	d50b      	bpl.n	12ce <_Z11subClockPos11structClockS_+0x3a>
		
		if(ret.second!=0){
    12b6:	6802      	ldr	r2, [r0, #0]
    12b8:	2a00      	cmp	r2, #0
    12ba:	d009      	beq.n	12d0 <_Z11subClockPos11structClockS_+0x3c>
				pc.printf("c1:%ld,%ld",clock1.second,clock1.halfmillis);
				pc.printf("c2:%ld,%ld",clock2.second,clock2.halfmillis);*/
				//sendHMI("error clock");
			}
			
			ret.second--;
    12bc:	6802      	ldr	r2, [r0, #0]
    12be:	3a01      	subs	r2, #1
    12c0:	6002      	str	r2, [r0, #0]
			ret.halfmillis=(unsigned int)(halfmillis+RTC_FREQ);
    12c2:	22fa      	movs	r2, #250	; 0xfa
    12c4:	01d2      	lsls	r2, r2, #7
    12c6:	4694      	mov	ip, r2
    12c8:	4463      	add	r3, ip
    12ca:	6043      	str	r3, [r0, #4]
    12cc:	e000      	b.n	12d0 <_Z11subClockPos11structClockS_+0x3c>
		}
	}
	else{
		ret.halfmillis=halfmillis;
    12ce:	6043      	str	r3, [r0, #4]
	}
			
	return ret;
    12d0:	b004      	add	sp, #16
    12d2:	4770      	bx	lr

000012d4 <_Z8subClock11structClockS_>:
	if(clk.sign==false){
		clk.sign=true;
	}
	return clk;
}
Clock subClock(Clock clock1,Clock clock2 ){
    12d4:	b570      	push	{r4, r5, r6, lr}
    12d6:	b08e      	sub	sp, #56	; 0x38
    12d8:	1c04      	adds	r4, r0, #0
    12da:	a805      	add	r0, sp, #20
    12dc:	9105      	str	r1, [sp, #20]
    12de:	9206      	str	r2, [sp, #24]
    12e0:	9307      	str	r3, [sp, #28]
	Clock ret={0,0,true};
    12e2:	2300      	movs	r3, #0
    12e4:	6023      	str	r3, [r4, #0]
    12e6:	6063      	str	r3, [r4, #4]
    12e8:	3301      	adds	r3, #1
    12ea:	7223      	strb	r3, [r4, #8]
	if(clock1.sign!=clock2.sign){
    12ec:	7a03      	ldrb	r3, [r0, #8]
    12ee:	aa12      	add	r2, sp, #72	; 0x48
    12f0:	7a12      	ldrb	r2, [r2, #8]
    12f2:	b2db      	uxtb	r3, r3
    12f4:	4293      	cmp	r3, r2
    12f6:	d020      	beq.n	133a <_Z8subClock11structClockS_+0x66>
		if(clock1.sign==true){// + - -
    12f8:	7a03      	ldrb	r3, [r0, #8]
    12fa:	2b00      	cmp	r3, #0
    12fc:	d00d      	beq.n	131a <_Z8subClock11structClockS_+0x46>
			clock2.sign=true;
    12fe:	2201      	movs	r2, #1
    1300:	ab12      	add	r3, sp, #72	; 0x48
    1302:	721a      	strb	r2, [r3, #8]
			ret=sumClock(clock1,clock2);
    1304:	466b      	mov	r3, sp
    1306:	aa12      	add	r2, sp, #72	; 0x48
    1308:	ca23      	ldmia	r2!, {r0, r1, r5}
    130a:	c323      	stmia	r3!, {r0, r1, r5}
    130c:	1c20      	adds	r0, r4, #0
    130e:	9905      	ldr	r1, [sp, #20]
    1310:	9a06      	ldr	r2, [sp, #24]
    1312:	9b07      	ldr	r3, [sp, #28]
    1314:	4d2e      	ldr	r5, [pc, #184]	; (13d0 <_Z8subClock11structClockS_+0xfc>)
    1316:	47a8      	blx	r5
    1318:	e056      	b.n	13c8 <_Z8subClock11structClockS_+0xf4>
		}
		else{// - - +
			clock1.sign=true;
    131a:	ab05      	add	r3, sp, #20
    131c:	2201      	movs	r2, #1
    131e:	721a      	strb	r2, [r3, #8]
			ret=sumClock(clock1,clock2);
    1320:	466a      	mov	r2, sp
    1322:	a912      	add	r1, sp, #72	; 0x48
    1324:	c961      	ldmia	r1!, {r0, r5, r6}
    1326:	c261      	stmia	r2!, {r0, r5, r6}
    1328:	1c20      	adds	r0, r4, #0
    132a:	9905      	ldr	r1, [sp, #20]
    132c:	9a06      	ldr	r2, [sp, #24]
    132e:	9b07      	ldr	r3, [sp, #28]
    1330:	4d27      	ldr	r5, [pc, #156]	; (13d0 <_Z8subClock11structClockS_+0xfc>)
    1332:	47a8      	blx	r5
			ret.sign=false;
    1334:	2300      	movs	r3, #0
    1336:	7223      	strb	r3, [r4, #8]
    1338:	e046      	b.n	13c8 <_Z8subClock11structClockS_+0xf4>
		}
	}
	else{
		if(clock1.sign==true){ //+ - +
    133a:	ab05      	add	r3, sp, #20
    133c:	7a1b      	ldrb	r3, [r3, #8]
    133e:	2b00      	cmp	r3, #0
    1340:	d02b      	beq.n	139a <_Z8subClock11structClockS_+0xc6>
    1342:	aa08      	add	r2, sp, #32
    1344:	ab05      	add	r3, sp, #20
    1346:	cb23      	ldmia	r3!, {r0, r1, r5}
    1348:	c223      	stmia	r2!, {r0, r1, r5}
    134a:	ab0b      	add	r3, sp, #44	; 0x2c
    134c:	aa12      	add	r2, sp, #72	; 0x48
    134e:	ca23      	ldmia	r2!, {r0, r1, r5}
    1350:	c323      	stmia	r3!, {r0, r1, r5}


Clock timeManage={0,0,true};

bool sup(Clock clock1,Clock clock2){
		if(clock1.second>clock2.second){//clock1>clock2
    1352:	9a08      	ldr	r2, [sp, #32]
    1354:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1356:	429a      	cmp	r2, r3
    1358:	d807      	bhi.n	136a <_Z8subClock11structClockS_+0x96>
			return true;
		}
		else{
			if(clock1.second<clock2.second){
    135a:	9a08      	ldr	r2, [sp, #32]
    135c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    135e:	429a      	cmp	r2, r3
    1360:	d30e      	bcc.n	1380 <_Z8subClock11structClockS_+0xac>
				return false;
			}
			else{//egual
				if(clock1.halfmillis>clock2.halfmillis){
    1362:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1364:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			ret.sign=false;
		}
	}
	else{
		if(clock1.sign==true){ //+ - +
			if(sup(clock1,clock2)){//clock1>Clock2
    1366:	429a      	cmp	r2, r3
    1368:	d90a      	bls.n	1380 <_Z8subClock11structClockS_+0xac>
				
				ret=subClockPos(clock1,clock2);
    136a:	466b      	mov	r3, sp
    136c:	aa12      	add	r2, sp, #72	; 0x48
    136e:	ca23      	ldmia	r2!, {r0, r1, r5}
    1370:	c323      	stmia	r3!, {r0, r1, r5}
    1372:	1c20      	adds	r0, r4, #0
    1374:	9905      	ldr	r1, [sp, #20]
    1376:	9a06      	ldr	r2, [sp, #24]
    1378:	9b07      	ldr	r3, [sp, #28]
    137a:	4d16      	ldr	r5, [pc, #88]	; (13d4 <_Z8subClock11structClockS_+0x100>)
    137c:	47a8      	blx	r5
    137e:	e023      	b.n	13c8 <_Z8subClock11structClockS_+0xf4>
			}
			else{
				ret=subClockPos(clock2,clock1);
    1380:	ab05      	add	r3, sp, #20
    1382:	466a      	mov	r2, sp
    1384:	cb23      	ldmia	r3!, {r0, r1, r5}
    1386:	c223      	stmia	r2!, {r0, r1, r5}
    1388:	1c20      	adds	r0, r4, #0
    138a:	9912      	ldr	r1, [sp, #72]	; 0x48
    138c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    138e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    1390:	4d10      	ldr	r5, [pc, #64]	; (13d4 <_Z8subClock11structClockS_+0x100>)
    1392:	47a8      	blx	r5
				ret.sign=false;
    1394:	2300      	movs	r3, #0
    1396:	7223      	strb	r3, [r4, #8]
    1398:	e016      	b.n	13c8 <_Z8subClock11structClockS_+0xf4>
			}
		}
		else{// - - - 
			clock2.sign=true;
    139a:	2201      	movs	r2, #1
    139c:	ab12      	add	r3, sp, #72	; 0x48
    139e:	721a      	strb	r2, [r3, #8]
			clock1.sign=true;	
    13a0:	ab05      	add	r3, sp, #20
    13a2:	721a      	strb	r2, [r3, #8]
			ret=subClock(clock1,clock2);
    13a4:	466a      	mov	r2, sp
    13a6:	a912      	add	r1, sp, #72	; 0x48
    13a8:	c961      	ldmia	r1!, {r0, r5, r6}
    13aa:	c261      	stmia	r2!, {r0, r5, r6}
    13ac:	1c20      	adds	r0, r4, #0
    13ae:	9905      	ldr	r1, [sp, #20]
    13b0:	9a06      	ldr	r2, [sp, #24]
    13b2:	9b07      	ldr	r3, [sp, #28]
    13b4:	f7ff ff8e 	bl	12d4 <_Z8subClock11structClockS_>
			if(ret.sign==true){
    13b8:	7a23      	ldrb	r3, [r4, #8]
    13ba:	2b00      	cmp	r3, #0
    13bc:	d002      	beq.n	13c4 <_Z8subClock11structClockS_+0xf0>
				ret.sign=false;
    13be:	2300      	movs	r3, #0
    13c0:	7223      	strb	r3, [r4, #8]
    13c2:	e001      	b.n	13c8 <_Z8subClock11structClockS_+0xf4>
			}
			else{
				ret.sign=true;
    13c4:	2301      	movs	r3, #1
    13c6:	7223      	strb	r3, [r4, #8]
		}
	}

	
	return ret;
}
    13c8:	1c20      	adds	r0, r4, #0
    13ca:	b00e      	add	sp, #56	; 0x38
    13cc:	bd70      	pop	{r4, r5, r6, pc}
    13ce:	46c0      	nop			; (mov r8, r8)
    13d0:	000013d9 	.word	0x000013d9
    13d4:	00001295 	.word	0x00001295

000013d8 <_Z8sumClock11structClockS_>:
	ret.second=ret.second+(halfmillis/RTC_FREQ);
	ret.halfmillis=halfmillis%RTC_FREQ;
	return ret;
	
}
Clock sumClock(Clock clock1,Clock clock2 ){
    13d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    13da:	4647      	mov	r7, r8
    13dc:	b480      	push	{r7}
    13de:	b09a      	sub	sp, #104	; 0x68
    13e0:	1c04      	adds	r4, r0, #0
    13e2:	a805      	add	r0, sp, #20
    13e4:	9105      	str	r1, [sp, #20]
    13e6:	9206      	str	r2, [sp, #24]
    13e8:	9307      	str	r3, [sp, #28]
	Clock ret={0,0,true};
    13ea:	2300      	movs	r3, #0
    13ec:	6023      	str	r3, [r4, #0]
    13ee:	6063      	str	r3, [r4, #4]
    13f0:	3301      	adds	r3, #1
    13f2:	7223      	strb	r3, [r4, #8]
		
	if((clock1.sign==true)&&(clock2.sign==true)){// + + +
    13f4:	7a03      	ldrb	r3, [r0, #8]
    13f6:	2b00      	cmp	r3, #0
    13f8:	d013      	beq.n	1422 <_Z8sumClock11structClockS_+0x4a>
    13fa:	ab20      	add	r3, sp, #128	; 0x80
    13fc:	7a1b      	ldrb	r3, [r3, #8]
    13fe:	2b00      	cmp	r3, #0
    1400:	d114      	bne.n	142c <_Z8sumClock11structClockS_+0x54>
    1402:	e00e      	b.n	1422 <_Z8sumClock11structClockS_+0x4a>
		ret=sumClockPos(clock1,clock2);
	}
	else{
		if((clock1.sign==true)&&(clock2.sign==false)){ // + + -
    1404:	ab20      	add	r3, sp, #128	; 0x80
    1406:	7a1b      	ldrb	r3, [r3, #8]
    1408:	2b00      	cmp	r3, #0
    140a:	d146      	bne.n	149a <_Z8sumClock11structClockS_+0xc2>
    140c:	e037      	b.n	147e <_Z8sumClock11structClockS_+0xa6>
			clock2.sign=true;
			ret=subClock(clock1,clock2);
		}
		else{
					if((clock1.sign==false)&&(clock2.sign==true)){ // - + + 
    140e:	ab20      	add	r3, sp, #128	; 0x80
    1410:	7a1b      	ldrb	r3, [r3, #8]
    1412:	2b00      	cmp	r3, #0
    1414:	d146      	bne.n	14a4 <_Z8sumClock11structClockS_+0xcc>
    1416:	e052      	b.n	14be <_Z8sumClock11structClockS_+0xe6>
						clock1.sign=true;
						ret=subClock(clock2,clock1);
					}
					else{
						if((clock1.sign==false)&&(clock2.sign==false)){ // - + -
    1418:	ab20      	add	r3, sp, #128	; 0x80
    141a:	7a1b      	ldrb	r3, [r3, #8]
    141c:	2b00      	cmp	r3, #0
    141e:	d053      	beq.n	14c8 <_Z8sumClock11structClockS_+0xf0>
    1420:	e081      	b.n	1526 <_Z8sumClock11structClockS_+0x14e>
		
	if((clock1.sign==true)&&(clock2.sign==true)){// + + +
		ret=sumClockPos(clock1,clock2);
	}
	else{
		if((clock1.sign==true)&&(clock2.sign==false)){ // + + -
    1422:	ab05      	add	r3, sp, #20
    1424:	7a1b      	ldrb	r3, [r3, #8]
    1426:	2b00      	cmp	r3, #0
    1428:	d1ec      	bne.n	1404 <_Z8sumClock11structClockS_+0x2c>
    142a:	e036      	b.n	149a <_Z8sumClock11structClockS_+0xc2>
    142c:	aa08      	add	r2, sp, #32
    142e:	ab05      	add	r3, sp, #20
    1430:	1c11      	adds	r1, r2, #0
    1432:	cb61      	ldmia	r3!, {r0, r5, r6}
    1434:	c161      	stmia	r1!, {r0, r5, r6}
    1436:	ab0b      	add	r3, sp, #44	; 0x2c
    1438:	1c19      	adds	r1, r3, #0
    143a:	a820      	add	r0, sp, #128	; 0x80
    143c:	c8e0      	ldmia	r0!, {r5, r6, r7}
    143e:	c1e0      	stmia	r1!, {r5, r6, r7}
			}
		}

}
Clock sumClockPos(Clock clock1,Clock clock2 ){
	Clock ret={0,0,true};
    1440:	ad14      	add	r5, sp, #80	; 0x50
    1442:	2100      	movs	r1, #0
    1444:	9114      	str	r1, [sp, #80]	; 0x50
    1446:	9115      	str	r1, [sp, #84]	; 0x54
    1448:	3101      	adds	r1, #1
    144a:	7229      	strb	r1, [r5, #8]
	unsigned long int halfmillis=clock1.halfmillis;
    144c:	9909      	ldr	r1, [sp, #36]	; 0x24
	ret.second=clock1.second+clock2.second;
    144e:	9a08      	ldr	r2, [sp, #32]
    1450:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1452:	1882      	adds	r2, r0, r2
    1454:	9214      	str	r2, [sp, #80]	; 0x50
	halfmillis=halfmillis+clock2.halfmillis;
    1456:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    1458:	1876      	adds	r6, r6, r1
	ret.second=ret.second+(halfmillis/RTC_FREQ);
    145a:	9f14      	ldr	r7, [sp, #80]	; 0x50
    145c:	1c30      	adds	r0, r6, #0
    145e:	21fa      	movs	r1, #250	; 0xfa
    1460:	01c9      	lsls	r1, r1, #7
    1462:	4b3a      	ldr	r3, [pc, #232]	; (154c <_Z8sumClock11structClockS_+0x174>)
    1464:	4798      	blx	r3
    1466:	19c7      	adds	r7, r0, r7
    1468:	9714      	str	r7, [sp, #80]	; 0x50
	ret.halfmillis=halfmillis%RTC_FREQ;
    146a:	1c30      	adds	r0, r6, #0
    146c:	21fa      	movs	r1, #250	; 0xfa
    146e:	01c9      	lsls	r1, r1, #7
    1470:	4b37      	ldr	r3, [pc, #220]	; (1550 <_Z8sumClock11structClockS_+0x178>)
    1472:	4798      	blx	r3
    1474:	6069      	str	r1, [r5, #4]
}
Clock sumClock(Clock clock1,Clock clock2 ){
	Clock ret={0,0,true};
		
	if((clock1.sign==true)&&(clock2.sign==true)){// + + +
		ret=sumClockPos(clock1,clock2);
    1476:	1c23      	adds	r3, r4, #0
    1478:	cd07      	ldmia	r5!, {r0, r1, r2}
    147a:	c307      	stmia	r3!, {r0, r1, r2}
    147c:	e053      	b.n	1526 <_Z8sumClock11structClockS_+0x14e>
	}
	else{
		if((clock1.sign==true)&&(clock2.sign==false)){ // + + -
			clock2.sign=true;
    147e:	2201      	movs	r2, #1
    1480:	ab20      	add	r3, sp, #128	; 0x80
    1482:	721a      	strb	r2, [r3, #8]
			ret=subClock(clock1,clock2);
    1484:	466b      	mov	r3, sp
    1486:	aa20      	add	r2, sp, #128	; 0x80
    1488:	ca23      	ldmia	r2!, {r0, r1, r5}
    148a:	c323      	stmia	r3!, {r0, r1, r5}
    148c:	1c20      	adds	r0, r4, #0
    148e:	9905      	ldr	r1, [sp, #20]
    1490:	9a06      	ldr	r2, [sp, #24]
    1492:	9b07      	ldr	r3, [sp, #28]
    1494:	4d2f      	ldr	r5, [pc, #188]	; (1554 <_Z8sumClock11structClockS_+0x17c>)
    1496:	47a8      	blx	r5
    1498:	e045      	b.n	1526 <_Z8sumClock11structClockS_+0x14e>
		}
		else{
					if((clock1.sign==false)&&(clock2.sign==true)){ // - + + 
    149a:	ab05      	add	r3, sp, #20
    149c:	7a1b      	ldrb	r3, [r3, #8]
    149e:	2b00      	cmp	r3, #0
    14a0:	d10d      	bne.n	14be <_Z8sumClock11structClockS_+0xe6>
    14a2:	e7b4      	b.n	140e <_Z8sumClock11structClockS_+0x36>
						clock1.sign=true;
    14a4:	ab05      	add	r3, sp, #20
    14a6:	2201      	movs	r2, #1
    14a8:	721a      	strb	r2, [r3, #8]
						ret=subClock(clock2,clock1);
    14aa:	466a      	mov	r2, sp
    14ac:	cb23      	ldmia	r3!, {r0, r1, r5}
    14ae:	c223      	stmia	r2!, {r0, r1, r5}
    14b0:	1c20      	adds	r0, r4, #0
    14b2:	9920      	ldr	r1, [sp, #128]	; 0x80
    14b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
    14b6:	9b22      	ldr	r3, [sp, #136]	; 0x88
    14b8:	4d26      	ldr	r5, [pc, #152]	; (1554 <_Z8sumClock11structClockS_+0x17c>)
    14ba:	47a8      	blx	r5
    14bc:	e033      	b.n	1526 <_Z8sumClock11structClockS_+0x14e>
					}
					else{
						if((clock1.sign==false)&&(clock2.sign==false)){ // - + -
    14be:	ab05      	add	r3, sp, #20
    14c0:	7a1b      	ldrb	r3, [r3, #8]
    14c2:	2b00      	cmp	r3, #0
    14c4:	d12f      	bne.n	1526 <_Z8sumClock11structClockS_+0x14e>
    14c6:	e7a7      	b.n	1418 <_Z8sumClock11structClockS_+0x40>
							clock1.sign=true;
    14c8:	ab05      	add	r3, sp, #20
    14ca:	2101      	movs	r1, #1
    14cc:	7219      	strb	r1, [r3, #8]
							clock2.sign=true;
    14ce:	aa20      	add	r2, sp, #128	; 0x80
    14d0:	7211      	strb	r1, [r2, #8]
    14d2:	aa0e      	add	r2, sp, #56	; 0x38
    14d4:	1c10      	adds	r0, r2, #0
    14d6:	cbe0      	ldmia	r3!, {r5, r6, r7}
    14d8:	c0e0      	stmia	r0!, {r5, r6, r7}
    14da:	ab11      	add	r3, sp, #68	; 0x44
    14dc:	469c      	mov	ip, r3
    14de:	1c18      	adds	r0, r3, #0
    14e0:	ad20      	add	r5, sp, #128	; 0x80
    14e2:	cdc8      	ldmia	r5!, {r3, r6, r7}
    14e4:	c0c8      	stmia	r0!, {r3, r6, r7}
			}
		}

}
Clock sumClockPos(Clock clock1,Clock clock2 ){
	Clock ret={0,0,true};
    14e6:	ad17      	add	r5, sp, #92	; 0x5c
    14e8:	2700      	movs	r7, #0
    14ea:	9717      	str	r7, [sp, #92]	; 0x5c
    14ec:	9718      	str	r7, [sp, #96]	; 0x60
    14ee:	7229      	strb	r1, [r5, #8]
	unsigned long int halfmillis=clock1.halfmillis;
    14f0:	990f      	ldr	r1, [sp, #60]	; 0x3c
	ret.second=clock1.second+clock2.second;
    14f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    14f4:	9811      	ldr	r0, [sp, #68]	; 0x44
    14f6:	1882      	adds	r2, r0, r2
    14f8:	9217      	str	r2, [sp, #92]	; 0x5c
	halfmillis=halfmillis+clock2.halfmillis;
    14fa:	4663      	mov	r3, ip
    14fc:	685e      	ldr	r6, [r3, #4]
    14fe:	1876      	adds	r6, r6, r1
	ret.second=ret.second+(halfmillis/RTC_FREQ);
    1500:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    1502:	4698      	mov	r8, r3
    1504:	1c30      	adds	r0, r6, #0
    1506:	21fa      	movs	r1, #250	; 0xfa
    1508:	01c9      	lsls	r1, r1, #7
    150a:	4b10      	ldr	r3, [pc, #64]	; (154c <_Z8sumClock11structClockS_+0x174>)
    150c:	4798      	blx	r3
    150e:	4440      	add	r0, r8
    1510:	9017      	str	r0, [sp, #92]	; 0x5c
	ret.halfmillis=halfmillis%RTC_FREQ;
    1512:	1c30      	adds	r0, r6, #0
    1514:	21fa      	movs	r1, #250	; 0xfa
    1516:	01c9      	lsls	r1, r1, #7
    1518:	4b0d      	ldr	r3, [pc, #52]	; (1550 <_Z8sumClock11structClockS_+0x178>)
    151a:	4798      	blx	r3
    151c:	6069      	str	r1, [r5, #4]
					}
					else{
						if((clock1.sign==false)&&(clock2.sign==false)){ // - + -
							clock1.sign=true;
							clock2.sign=true;
							ret=sumClockPos(clock1,clock2);
    151e:	1c23      	adds	r3, r4, #0
    1520:	cd07      	ldmia	r5!, {r0, r1, r2}
    1522:	c307      	stmia	r3!, {r0, r1, r2}
							ret.sign=false;
    1524:	7227      	strb	r7, [r4, #8]
						}
					}
		}
		
	}
	ret.second+=ret.halfmillis/RTC_FREQ;
    1526:	6860      	ldr	r0, [r4, #4]
    1528:	6825      	ldr	r5, [r4, #0]
    152a:	21fa      	movs	r1, #250	; 0xfa
    152c:	01c9      	lsls	r1, r1, #7
    152e:	4b07      	ldr	r3, [pc, #28]	; (154c <_Z8sumClock11structClockS_+0x174>)
    1530:	4798      	blx	r3
    1532:	1945      	adds	r5, r0, r5
    1534:	6025      	str	r5, [r4, #0]
	ret.halfmillis=ret.halfmillis%RTC_FREQ;
    1536:	6860      	ldr	r0, [r4, #4]
    1538:	21fa      	movs	r1, #250	; 0xfa
    153a:	01c9      	lsls	r1, r1, #7
    153c:	4b04      	ldr	r3, [pc, #16]	; (1550 <_Z8sumClock11structClockS_+0x178>)
    153e:	4798      	blx	r3
    1540:	6061      	str	r1, [r4, #4]
	return ret;
}
    1542:	1c20      	adds	r0, r4, #0
    1544:	b01a      	add	sp, #104	; 0x68
    1546:	bc04      	pop	{r2}
    1548:	4690      	mov	r8, r2
    154a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    154c:	00006535 	.word	0x00006535
    1550:	00006641 	.word	0x00006641
    1554:	000012d5 	.word	0x000012d5

00001558 <_Z9readClockP11structClock>:
volatile int timeCorr;
volatile bool stateLed=false;
DigitalOut led(LED1);
struct rtc_module rtc_instance;

uint32_t  readClock(Clock* timeClock){
    1558:	b5f0      	push	{r4, r5, r6, r7, lr}
    155a:	4647      	mov	r7, r8
    155c:	b480      	push	{r7}
    155e:	1c04      	adds	r4, r0, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1560:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1562:	f3bf 8f5f 	dmb	sy
	//rtc_count_disable(&rtc_instance);
	Disable_global_interrupt();
    1566:	2200      	movs	r2, #0
    1568:	4b19      	ldr	r3, [pc, #100]	; (15d0 <_Z9readClockP11structClock+0x78>)
    156a:	701a      	strb	r2, [r3, #0]
	uint32_t timeCounter=0;
	RTC->MODE0.CTRL.reg &=  0b1111111111111101;//disable timer
    156c:	4a19      	ldr	r2, [pc, #100]	; (15d4 <_Z9readClockP11structClock+0x7c>)
    156e:	8813      	ldrh	r3, [r2, #0]
    1570:	2102      	movs	r1, #2
    1572:	438b      	bics	r3, r1
    1574:	8013      	strh	r3, [r2, #0]
	while(RTC->MODE0.STATUS.bit.SYNCBUSY==1);//wait timer disable
    1576:	7a93      	ldrb	r3, [r2, #10]
    1578:	09db      	lsrs	r3, r3, #7
    157a:	d1fc      	bne.n	1576 <_Z9readClockP11structClock+0x1e>
	
	timeCounter=RTC->MODE0.COUNT.reg; 
    157c:	4d15      	ldr	r5, [pc, #84]	; (15d4 <_Z9readClockP11structClock+0x7c>)
    157e:	692f      	ldr	r7, [r5, #16]
	timeClock->second=timeManage.second;	
    1580:	4b15      	ldr	r3, [pc, #84]	; (15d8 <_Z9readClockP11structClock+0x80>)
    1582:	681a      	ldr	r2, [r3, #0]
    1584:	6022      	str	r2, [r4, #0]
	timeClock->halfmillis=timeManage.halfmillis;	
    1586:	685b      	ldr	r3, [r3, #4]
    1588:	6063      	str	r3, [r4, #4]
	//timeCounter=0;
	

	//Enable_global_interrupt();
	timeClock->sign=true;	
    158a:	2301      	movs	r3, #1
    158c:	4698      	mov	r8, r3
    158e:	7223      	strb	r3, [r4, #8]

	timeClock->halfmillis+=timeCounter;
    1590:	6863      	ldr	r3, [r4, #4]
    1592:	19db      	adds	r3, r3, r7
    1594:	6063      	str	r3, [r4, #4]
	timeClock->second+=timeClock->halfmillis/RTC_FREQ;
    1596:	6860      	ldr	r0, [r4, #4]
    1598:	6826      	ldr	r6, [r4, #0]
    159a:	21fa      	movs	r1, #250	; 0xfa
    159c:	01c9      	lsls	r1, r1, #7
    159e:	4b0f      	ldr	r3, [pc, #60]	; (15dc <_Z9readClockP11structClock+0x84>)
    15a0:	4798      	blx	r3
    15a2:	1986      	adds	r6, r0, r6
    15a4:	6026      	str	r6, [r4, #0]
	timeClock->halfmillis=timeClock->halfmillis%RTC_FREQ;
    15a6:	6860      	ldr	r0, [r4, #4]
    15a8:	21fa      	movs	r1, #250	; 0xfa
    15aa:	01c9      	lsls	r1, r1, #7
    15ac:	4b0c      	ldr	r3, [pc, #48]	; (15e0 <_Z9readClockP11structClock+0x88>)
    15ae:	4798      	blx	r3
    15b0:	6061      	str	r1, [r4, #4]
	RTC->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE; //enable timer
    15b2:	882a      	ldrh	r2, [r5, #0]
    15b4:	2302      	movs	r3, #2
    15b6:	4313      	orrs	r3, r2
    15b8:	802b      	strh	r3, [r5, #0]
	Enable_global_interrupt();
    15ba:	4b05      	ldr	r3, [pc, #20]	; (15d0 <_Z9readClockP11structClock+0x78>)
    15bc:	4642      	mov	r2, r8
    15be:	701a      	strb	r2, [r3, #0]
    15c0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    15c4:	b662      	cpsie	i
	return timeCounter;
}
    15c6:	1c38      	adds	r0, r7, #0
    15c8:	bc04      	pop	{r2}
    15ca:	4690      	mov	r8, r2
    15cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    15ce:	46c0      	nop			; (mov r8, r8)
    15d0:	200000d0 	.word	0x200000d0
    15d4:	40001400 	.word	0x40001400
    15d8:	200000bc 	.word	0x200000bc
    15dc:	00006535 	.word	0x00006535
    15e0:	00006641 	.word	0x00006641

000015e4 <_Z10writeClock11structClock>:
void writeClock(Clock clk){
    15e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    15e6:	4647      	mov	r7, r8
    15e8:	b480      	push	{r7}
    15ea:	b084      	sub	sp, #16
    15ec:	9001      	str	r0, [sp, #4]
    15ee:	9102      	str	r1, [sp, #8]
    15f0:	9203      	str	r2, [sp, #12]
	//rtc_count_disable(&rtc_instance);
	//Disable_global_interrupt();

	RTC->MODE0.CTRL.reg &=  0b1111111111111101;//stop timer
    15f2:	4a16      	ldr	r2, [pc, #88]	; (164c <_Z10writeClock11structClock+0x68>)
    15f4:	8813      	ldrh	r3, [r2, #0]
    15f6:	2102      	movs	r1, #2
    15f8:	438b      	bics	r3, r1
    15fa:	8013      	strh	r3, [r2, #0]
	
	while(RTC->MODE0.STATUS.bit.SYNCBUSY==1);
    15fc:	7a93      	ldrb	r3, [r2, #10]
    15fe:	09db      	lsrs	r3, r3, #7
    1600:	d1fc      	bne.n	15fc <_Z10writeClock11structClock+0x18>
	RTC->MODE0.COUNT.reg=clk.halfmillis%VALUE_TIMER;
    1602:	9802      	ldr	r0, [sp, #8]
    1604:	4f12      	ldr	r7, [pc, #72]	; (1650 <_Z10writeClock11structClock+0x6c>)
    1606:	4913      	ldr	r1, [pc, #76]	; (1654 <_Z10writeClock11structClock+0x70>)
    1608:	47b8      	blx	r7
    160a:	4d10      	ldr	r5, [pc, #64]	; (164c <_Z10writeClock11structClock+0x68>)
    160c:	6129      	str	r1, [r5, #16]
	timeManage.second=clk.second;
    160e:	9b01      	ldr	r3, [sp, #4]
    1610:	4c11      	ldr	r4, [pc, #68]	; (1658 <_Z10writeClock11structClock+0x74>)
    1612:	6023      	str	r3, [r4, #0]
	timeManage.halfmillis=(int)(clk.halfmillis/VALUE_TIMER)*VALUE_TIMER;
    1614:	9802      	ldr	r0, [sp, #8]
    1616:	4b11      	ldr	r3, [pc, #68]	; (165c <_Z10writeClock11structClock+0x78>)
    1618:	4698      	mov	r8, r3
    161a:	490e      	ldr	r1, [pc, #56]	; (1654 <_Z10writeClock11structClock+0x70>)
    161c:	4798      	blx	r3
    161e:	4b0d      	ldr	r3, [pc, #52]	; (1654 <_Z10writeClock11structClock+0x70>)
    1620:	4358      	muls	r0, r3
    1622:	6060      	str	r0, [r4, #4]
	timeManage.second+=timeManage.halfmillis/RTC_FREQ;
    1624:	6860      	ldr	r0, [r4, #4]
    1626:	6826      	ldr	r6, [r4, #0]
    1628:	21fa      	movs	r1, #250	; 0xfa
    162a:	01c9      	lsls	r1, r1, #7
    162c:	47c0      	blx	r8
    162e:	1986      	adds	r6, r0, r6
    1630:	6026      	str	r6, [r4, #0]
	timeManage.halfmillis=timeManage.halfmillis%RTC_FREQ;
    1632:	6860      	ldr	r0, [r4, #4]
    1634:	21fa      	movs	r1, #250	; 0xfa
    1636:	01c9      	lsls	r1, r1, #7
    1638:	47b8      	blx	r7
    163a:	6061      	str	r1, [r4, #4]
	RTC->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE; //enable timer
    163c:	882a      	ldrh	r2, [r5, #0]
    163e:	2302      	movs	r3, #2
    1640:	4313      	orrs	r3, r2
    1642:	802b      	strh	r3, [r5, #0]

	

	
	
}
    1644:	b004      	add	sp, #16
    1646:	bc04      	pop	{r2}
    1648:	4690      	mov	r8, r2
    164a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    164c:	40001400 	.word	0x40001400
    1650:	00006641 	.word	0x00006641
    1654:	00002710 	.word	0x00002710
    1658:	200000bc 	.word	0x200000bc
    165c:	00006535 	.word	0x00006535

00001660 <_Z15isrInternalClokv>:
void isrInternalClok(void){
    1660:	b5f0      	push	{r4, r5, r6, r7, lr}
    1662:	b08d      	sub	sp, #52	; 0x34
		RTC->MODE0.CTRL.reg &=  0b1111111111111101;//stop timer
    1664:	4a5f      	ldr	r2, [pc, #380]	; (17e4 <_Z15isrInternalClokv+0x184>)
    1666:	8813      	ldrh	r3, [r2, #0]
    1668:	2102      	movs	r1, #2
    166a:	438b      	bics	r3, r1
    166c:	8013      	strh	r3, [r2, #0]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    166e:	b672      	cpsid	i
    1670:	f3bf 8f5f 	dmb	sy
			Disable_global_interrupt();
    1674:	2200      	movs	r2, #0
    1676:	4b5c      	ldr	r3, [pc, #368]	; (17e8 <_Z15isrInternalClokv+0x188>)
    1678:	701a      	strb	r2, [r3, #0]
			//printf("+");
			static bool state;
			state=stateLed;
    167a:	4b5c      	ldr	r3, [pc, #368]	; (17ec <_Z15isrInternalClokv+0x18c>)
    167c:	781a      	ldrb	r2, [r3, #0]
    167e:	4b5c      	ldr	r3, [pc, #368]	; (17f0 <_Z15isrInternalClokv+0x190>)
    1680:	701a      	strb	r2, [r3, #0]
			

			timeManage.halfmillis+=VALUE_TIMER;
    1682:	4b5c      	ldr	r3, [pc, #368]	; (17f4 <_Z15isrInternalClokv+0x194>)
    1684:	685a      	ldr	r2, [r3, #4]
    1686:	495c      	ldr	r1, [pc, #368]	; (17f8 <_Z15isrInternalClokv+0x198>)
    1688:	468c      	mov	ip, r1
    168a:	4462      	add	r2, ip
    168c:	605a      	str	r2, [r3, #4]

		
			if(timeManage.halfmillis<(RTC_FREQ/2)){//all 500ms
    168e:	685a      	ldr	r2, [r3, #4]
    1690:	4b5a      	ldr	r3, [pc, #360]	; (17fc <_Z15isrInternalClokv+0x19c>)
    1692:	429a      	cmp	r2, r3
    1694:	d803      	bhi.n	169e <_Z15isrInternalClokv+0x3e>
				stateLed=LOW;
    1696:	2200      	movs	r2, #0
    1698:	4b54      	ldr	r3, [pc, #336]	; (17ec <_Z15isrInternalClokv+0x18c>)
    169a:	701a      	strb	r2, [r3, #0]
    169c:	e002      	b.n	16a4 <_Z15isrInternalClokv+0x44>
			}
			else{
				stateLed=HIGH;
    169e:	2201      	movs	r2, #1
    16a0:	4b52      	ldr	r3, [pc, #328]	; (17ec <_Z15isrInternalClokv+0x18c>)
    16a2:	701a      	strb	r2, [r3, #0]
			}
			if(state!=stateLed){
    16a4:	4b51      	ldr	r3, [pc, #324]	; (17ec <_Z15isrInternalClokv+0x18c>)
    16a6:	781b      	ldrb	r3, [r3, #0]
    16a8:	b2db      	uxtb	r3, r3
    16aa:	4a51      	ldr	r2, [pc, #324]	; (17f0 <_Z15isrInternalClokv+0x190>)
    16ac:	7812      	ldrb	r2, [r2, #0]
    16ae:	429a      	cmp	r2, r3
    16b0:	d017      	beq.n	16e2 <_Z15isrInternalClokv+0x82>
				led = stateLed;
    16b2:	4b4e      	ldr	r3, [pc, #312]	; (17ec <_Z15isrInternalClokv+0x18c>)
    16b4:	781c      	ldrb	r4, [r3, #0]
    16b6:	b2e4      	uxtb	r4, r4
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    16b8:	4b51      	ldr	r3, [pc, #324]	; (1800 <_Z15isrInternalClokv+0x1a0>)
    16ba:	781b      	ldrb	r3, [r3, #0]
    16bc:	b25b      	sxtb	r3, r3
    16be:	3301      	adds	r3, #1
    16c0:	d104      	bne.n	16cc <_Z15isrInternalClokv+0x6c>
    16c2:	4850      	ldr	r0, [pc, #320]	; (1804 <_Z15isrInternalClokv+0x1a4>)
    16c4:	4950      	ldr	r1, [pc, #320]	; (1808 <_Z15isrInternalClokv+0x1a8>)
    16c6:	2228      	movs	r2, #40	; 0x28
    16c8:	4b50      	ldr	r3, [pc, #320]	; (180c <_Z15isrInternalClokv+0x1ac>)
    16ca:	4798      	blx	r3
    if (value)
    16cc:	2c00      	cmp	r4, #0
    16ce:	d004      	beq.n	16da <_Z15isrInternalClokv+0x7a>
        *obj->OUTSET = obj->mask;
    16d0:	4b4b      	ldr	r3, [pc, #300]	; (1800 <_Z15isrInternalClokv+0x1a0>)
    16d2:	691a      	ldr	r2, [r3, #16]
    16d4:	685b      	ldr	r3, [r3, #4]
    16d6:	6013      	str	r3, [r2, #0]
    16d8:	e003      	b.n	16e2 <_Z15isrInternalClokv+0x82>
    else
        *obj->OUTCLR = obj->mask;
    16da:	4b49      	ldr	r3, [pc, #292]	; (1800 <_Z15isrInternalClokv+0x1a0>)
    16dc:	68da      	ldr	r2, [r3, #12]
    16de:	685b      	ldr	r3, [r3, #4]
    16e0:	6013      	str	r3, [r2, #0]
				//		xSemaphoreGiveFromISR( synchroLed,NULL);
				//	}
			}

			
			timeManage.second+=timeManage.halfmillis/RTC_FREQ;
    16e2:	4c44      	ldr	r4, [pc, #272]	; (17f4 <_Z15isrInternalClokv+0x194>)
    16e4:	6860      	ldr	r0, [r4, #4]
    16e6:	6825      	ldr	r5, [r4, #0]
    16e8:	21fa      	movs	r1, #250	; 0xfa
    16ea:	01c9      	lsls	r1, r1, #7
    16ec:	4b48      	ldr	r3, [pc, #288]	; (1810 <_Z15isrInternalClokv+0x1b0>)
    16ee:	4798      	blx	r3
    16f0:	1945      	adds	r5, r0, r5
    16f2:	6025      	str	r5, [r4, #0]
			timeManage.halfmillis=timeManage.halfmillis%RTC_FREQ;
    16f4:	6860      	ldr	r0, [r4, #4]
    16f6:	21fa      	movs	r1, #250	; 0xfa
    16f8:	01c9      	lsls	r1, r1, #7
    16fa:	4b46      	ldr	r3, [pc, #280]	; (1814 <_Z15isrInternalClokv+0x1b4>)
    16fc:	4798      	blx	r3
    16fe:	6061      	str	r1, [r4, #4]
			if((valueCor!=0)){
    1700:	4b45      	ldr	r3, [pc, #276]	; (1818 <_Z15isrInternalClokv+0x1b8>)
    1702:	681b      	ldr	r3, [r3, #0]
    1704:	2b00      	cmp	r3, #0
    1706:	d060      	beq.n	17ca <_Z15isrInternalClokv+0x16a>
				if (timeCorr==0){
    1708:	4b44      	ldr	r3, [pc, #272]	; (181c <_Z15isrInternalClokv+0x1bc>)
    170a:	681b      	ldr	r3, [r3, #0]
    170c:	2b00      	cmp	r3, #0
    170e:	d13c      	bne.n	178a <_Z15isrInternalClokv+0x12a>
					timeCorr=timeCorrection;
    1710:	4b43      	ldr	r3, [pc, #268]	; (1820 <_Z15isrInternalClokv+0x1c0>)
    1712:	681a      	ldr	r2, [r3, #0]
    1714:	4b41      	ldr	r3, [pc, #260]	; (181c <_Z15isrInternalClokv+0x1bc>)
    1716:	601a      	str	r2, [r3, #0]
					Clock off;
					off.second=(unsigned int )abs(valueCor)/RTC_FREQ;
    1718:	4c3f      	ldr	r4, [pc, #252]	; (1818 <_Z15isrInternalClokv+0x1b8>)
    171a:	6820      	ldr	r0, [r4, #0]
    171c:	17c3      	asrs	r3, r0, #31
    171e:	18c0      	adds	r0, r0, r3
    1720:	4058      	eors	r0, r3
    1722:	21fa      	movs	r1, #250	; 0xfa
    1724:	01c9      	lsls	r1, r1, #7
    1726:	4b3a      	ldr	r3, [pc, #232]	; (1810 <_Z15isrInternalClokv+0x1b0>)
    1728:	4798      	blx	r3
    172a:	9009      	str	r0, [sp, #36]	; 0x24
					off.halfmillis=(unsigned int)abs(valueCor)%RTC_FREQ;
    172c:	6820      	ldr	r0, [r4, #0]
    172e:	17c3      	asrs	r3, r0, #31
    1730:	18c0      	adds	r0, r0, r3
    1732:	4058      	eors	r0, r3
    1734:	21fa      	movs	r1, #250	; 0xfa
    1736:	01c9      	lsls	r1, r1, #7
    1738:	4b36      	ldr	r3, [pc, #216]	; (1814 <_Z15isrInternalClokv+0x1b4>)
    173a:	4798      	blx	r3
    173c:	910a      	str	r1, [sp, #40]	; 0x28
					if(valueCor<0){
    173e:	6823      	ldr	r3, [r4, #0]
    1740:	2b00      	cmp	r3, #0
    1742:	da03      	bge.n	174c <_Z15isrInternalClokv+0xec>
						off.sign=false;
    1744:	2200      	movs	r2, #0
    1746:	ab09      	add	r3, sp, #36	; 0x24
    1748:	721a      	strb	r2, [r3, #8]
    174a:	e002      	b.n	1752 <_Z15isrInternalClokv+0xf2>
					}
					else{
						off.sign=true;
    174c:	2201      	movs	r2, #1
    174e:	ab09      	add	r3, sp, #36	; 0x24
    1750:	721a      	strb	r2, [r3, #8]
					}
					//change the time
					timeManage=sumClock(timeManage,off);
    1752:	4e28      	ldr	r6, [pc, #160]	; (17f4 <_Z15isrInternalClokv+0x194>)
    1754:	ac04      	add	r4, sp, #16
    1756:	ad09      	add	r5, sp, #36	; 0x24
    1758:	466b      	mov	r3, sp
    175a:	1c2a      	adds	r2, r5, #0
    175c:	ca83      	ldmia	r2!, {r0, r1, r7}
    175e:	c383      	stmia	r3!, {r0, r1, r7}
    1760:	1c20      	adds	r0, r4, #0
    1762:	6831      	ldr	r1, [r6, #0]
    1764:	6872      	ldr	r2, [r6, #4]
    1766:	68b3      	ldr	r3, [r6, #8]
    1768:	4f2e      	ldr	r7, [pc, #184]	; (1824 <_Z15isrInternalClokv+0x1c4>)
    176a:	47b8      	blx	r7
    176c:	1c23      	adds	r3, r4, #0
    176e:	cb07      	ldmia	r3!, {r0, r1, r2}
    1770:	c607      	stmia	r6!, {r0, r1, r2}
					//change the correction offset
					sumOffset=sumClock(sumOffset,off);//ok
    1772:	4e2d      	ldr	r6, [pc, #180]	; (1828 <_Z15isrInternalClokv+0x1c8>)
    1774:	466b      	mov	r3, sp
    1776:	cd07      	ldmia	r5!, {r0, r1, r2}
    1778:	c307      	stmia	r3!, {r0, r1, r2}
    177a:	1c20      	adds	r0, r4, #0
    177c:	6831      	ldr	r1, [r6, #0]
    177e:	6872      	ldr	r2, [r6, #4]
    1780:	68b3      	ldr	r3, [r6, #8]
    1782:	47b8      	blx	r7
    1784:	cc0e      	ldmia	r4!, {r1, r2, r3}
    1786:	c60e      	stmia	r6!, {r1, r2, r3}
    1788:	e003      	b.n	1792 <_Z15isrInternalClokv+0x132>
				}
				else{
					timeCorr--;
    178a:	4a24      	ldr	r2, [pc, #144]	; (181c <_Z15isrInternalClokv+0x1bc>)
    178c:	6813      	ldr	r3, [r2, #0]
    178e:	3b01      	subs	r3, #1
    1790:	6013      	str	r3, [r2, #0]
				}	
				sumOffset.second+=sumOffset.halfmillis/RTC_FREQ;
    1792:	4c25      	ldr	r4, [pc, #148]	; (1828 <_Z15isrInternalClokv+0x1c8>)
    1794:	6860      	ldr	r0, [r4, #4]
    1796:	6825      	ldr	r5, [r4, #0]
    1798:	4f1d      	ldr	r7, [pc, #116]	; (1810 <_Z15isrInternalClokv+0x1b0>)
    179a:	21fa      	movs	r1, #250	; 0xfa
    179c:	01c9      	lsls	r1, r1, #7
    179e:	47b8      	blx	r7
    17a0:	1945      	adds	r5, r0, r5
    17a2:	6025      	str	r5, [r4, #0]
				sumOffset.halfmillis=sumOffset.halfmillis%RTC_FREQ;
    17a4:	6860      	ldr	r0, [r4, #4]
    17a6:	4e1b      	ldr	r6, [pc, #108]	; (1814 <_Z15isrInternalClokv+0x1b4>)
    17a8:	21fa      	movs	r1, #250	; 0xfa
    17aa:	01c9      	lsls	r1, r1, #7
    17ac:	47b0      	blx	r6
    17ae:	6061      	str	r1, [r4, #4]
				timeManage.second+=timeManage.halfmillis/RTC_FREQ;
    17b0:	4c10      	ldr	r4, [pc, #64]	; (17f4 <_Z15isrInternalClokv+0x194>)
    17b2:	6860      	ldr	r0, [r4, #4]
    17b4:	6825      	ldr	r5, [r4, #0]
    17b6:	21fa      	movs	r1, #250	; 0xfa
    17b8:	01c9      	lsls	r1, r1, #7
    17ba:	47b8      	blx	r7
    17bc:	1945      	adds	r5, r0, r5
    17be:	6025      	str	r5, [r4, #0]
				timeManage.halfmillis=timeManage.halfmillis%RTC_FREQ;
    17c0:	6860      	ldr	r0, [r4, #4]
    17c2:	21fa      	movs	r1, #250	; 0xfa
    17c4:	01c9      	lsls	r1, r1, #7
    17c6:	47b0      	blx	r6
    17c8:	6061      	str	r1, [r4, #4]
			
			}
			

			
	Enable_global_interrupt();
    17ca:	2201      	movs	r2, #1
    17cc:	4b06      	ldr	r3, [pc, #24]	; (17e8 <_Z15isrInternalClokv+0x188>)
    17ce:	701a      	strb	r2, [r3, #0]
    17d0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    17d4:	b662      	cpsie	i
	RTC->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE; //enable timer
    17d6:	4a03      	ldr	r2, [pc, #12]	; (17e4 <_Z15isrInternalClokv+0x184>)
    17d8:	8811      	ldrh	r1, [r2, #0]
    17da:	2302      	movs	r3, #2
    17dc:	430b      	orrs	r3, r1
    17de:	8013      	strh	r3, [r2, #0]
}
    17e0:	b00d      	add	sp, #52	; 0x34
    17e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    17e4:	40001400 	.word	0x40001400
    17e8:	200000d0 	.word	0x200000d0
    17ec:	20003d2c 	.word	0x20003d2c
    17f0:	20003d24 	.word	0x20003d24
    17f4:	200000bc 	.word	0x200000bc
    17f8:	00002710 	.word	0x00002710
    17fc:	00003e7f 	.word	0x00003e7f
    1800:	20003d34 	.word	0x20003d34
    1804:	0000e988 	.word	0x0000e988
    1808:	0000e9a0 	.word	0x0000e9a0
    180c:	00004e39 	.word	0x00004e39
    1810:	00006535 	.word	0x00006535
    1814:	00006641 	.word	0x00006641
    1818:	20003d50 	.word	0x20003d50
    181c:	20003d30 	.word	0x20003d30
    1820:	20003d28 	.word	0x20003d28
    1824:	000013d9 	.word	0x000013d9
    1828:	200041f8 	.word	0x200041f8

0000182c <RTC_Handler>:
void RTC_Handler( void ){
    182c:	b508      	push	{r3, lr}
	//pc.printf("ISR");
	RTC->MODE0.INTFLAG.bit.CMP0=1;		//disable the flag COMPARE
    182e:	4b06      	ldr	r3, [pc, #24]	; (1848 <RTC_Handler+0x1c>)
    1830:	7a19      	ldrb	r1, [r3, #8]
    1832:	2201      	movs	r2, #1
    1834:	430a      	orrs	r2, r1
    1836:	721a      	strb	r2, [r3, #8]
	RTC->MODE0.INTFLAG.bit.OVF=1;		//disable the flag COMPARE
    1838:	7a1a      	ldrb	r2, [r3, #8]
    183a:	2180      	movs	r1, #128	; 0x80
    183c:	4249      	negs	r1, r1
    183e:	430a      	orrs	r2, r1
    1840:	721a      	strb	r2, [r3, #8]
	isrInternalClok();
    1842:	4b02      	ldr	r3, [pc, #8]	; (184c <RTC_Handler+0x20>)
    1844:	4798      	blx	r3
}
    1846:	bd08      	pop	{r3, pc}
    1848:	40001400 	.word	0x40001400
    184c:	00001661 	.word	0x00001661

00001850 <_Z22configureInternalClockv>:

void configureInternalClock(void){
    1850:	b508      	push	{r3, lr}
	hmi.printf("internal clock config\r\n");
    1852:	4821      	ldr	r0, [pc, #132]	; (18d8 <_Z22configureInternalClockv+0x88>)
    1854:	4921      	ldr	r1, [pc, #132]	; (18dc <_Z22configureInternalClockv+0x8c>)
    1856:	4b22      	ldr	r3, [pc, #136]	; (18e0 <_Z22configureInternalClockv+0x90>)
    1858:	4798      	blx	r3
	//gENERIC CLOCK GENRERATOR
	GCLK->GENCTRL.reg=0x00010402;
    185a:	4b22      	ldr	r3, [pc, #136]	; (18e4 <_Z22configureInternalClockv+0x94>)
    185c:	4a22      	ldr	r2, [pc, #136]	; (18e8 <_Z22configureInternalClockv+0x98>)
    185e:	605a      	str	r2, [r3, #4]
	//Generic Clock Generator Division
	GCLK->GENDIV.reg=0x00000102;
    1860:	2281      	movs	r2, #129	; 0x81
    1862:	0052      	lsls	r2, r2, #1
    1864:	609a      	str	r2, [r3, #8]
	//Generic Clock Control
	GCLK->CLKCTRL.reg=0x4204;
    1866:	4a21      	ldr	r2, [pc, #132]	; (18ec <_Z22configureInternalClockv+0x9c>)
    1868:	805a      	strh	r2, [r3, #2]
	//peripheral RTC configuration
	
	RTC->MODE0.CTRL.bit.PRESCALER=0x0;	//prescaller at 0
    186a:	4b21      	ldr	r3, [pc, #132]	; (18f0 <_Z22configureInternalClockv+0xa0>)
    186c:	8819      	ldrh	r1, [r3, #0]
    186e:	4a21      	ldr	r2, [pc, #132]	; (18f4 <_Z22configureInternalClockv+0xa4>)
    1870:	400a      	ands	r2, r1
    1872:	801a      	strh	r2, [r3, #0]
	RTC->MODE0.CTRL.bit.MODE=0x0;			//mode 0 : 32 bit counter
    1874:	881a      	ldrh	r2, [r3, #0]
    1876:	210c      	movs	r1, #12
    1878:	438a      	bics	r2, r1
    187a:	801a      	strh	r2, [r3, #0]
	RTC->MODE0.CTRL.bit.SWRST=0;			//no software reset
    187c:	881a      	ldrh	r2, [r3, #0]
    187e:	390b      	subs	r1, #11
    1880:	438a      	bics	r2, r1
    1882:	801a      	strh	r2, [r3, #0]
	RTC->MODE0.CTRL.bit.MATCHCLR=1;			//automatic reset counter
    1884:	8819      	ldrh	r1, [r3, #0]
    1886:	2280      	movs	r2, #128	; 0x80
    1888:	430a      	orrs	r2, r1
    188a:	801a      	strh	r2, [r3, #0]
	
	//event configuration
	RTC->MODE0.INTENSET.bit.OVF=1;		//enable the event overflow
    188c:	79d9      	ldrb	r1, [r3, #7]
    188e:	2080      	movs	r0, #128	; 0x80
    1890:	4240      	negs	r0, r0
    1892:	4301      	orrs	r1, r0
    1894:	71d9      	strb	r1, [r3, #7]
	RTC->MODE0.INTENSET.bit.CMP0=1;		//enable the event compare
    1896:	79d9      	ldrb	r1, [r3, #7]
    1898:	2201      	movs	r2, #1
    189a:	4311      	orrs	r1, r2
    189c:	71d9      	strb	r1, [r3, #7]
	RTC->MODE0.INTFLAG.bit.CMP0=1;		//disable the flag COMPARE
    189e:	7a19      	ldrb	r1, [r3, #8]
    18a0:	430a      	orrs	r2, r1
    18a2:	721a      	strb	r2, [r3, #8]
	RTC->MODE0.INTFLAG.bit.OVF=1;		//disable the flag COMPARE
    18a4:	7a1a      	ldrb	r2, [r3, #8]
    18a6:	4302      	orrs	r2, r0
    18a8:	721a      	strb	r2, [r3, #8]
	RTC->MODE0.COUNT.bit.COUNT=0;		//set the RTC value
    18aa:	2200      	movs	r2, #0
    18ac:	611a      	str	r2, [r3, #16]
	RTC->MODE0.COMP[0].reg = count_set_period;//set the value of the period
    18ae:	4a12      	ldr	r2, [pc, #72]	; (18f8 <_Z22configureInternalClockv+0xa8>)
    18b0:	6812      	ldr	r2, [r2, #0]
    18b2:	619a      	str	r2, [r3, #24]

	RTC->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;//enable the timer
    18b4:	8819      	ldrh	r1, [r3, #0]
    18b6:	2202      	movs	r2, #2
    18b8:	430a      	orrs	r2, r1
    18ba:	801a      	strh	r2, [r3, #0]
  if((int32_t)(IRQn) < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    18bc:	4a0f      	ldr	r2, [pc, #60]	; (18fc <_Z22configureInternalClockv+0xac>)
    18be:	21c0      	movs	r1, #192	; 0xc0
    18c0:	0089      	lsls	r1, r1, #2
    18c2:	5853      	ldr	r3, [r2, r1]
    18c4:	021b      	lsls	r3, r3, #8
    18c6:	0a1b      	lsrs	r3, r3, #8
    18c8:	20c0      	movs	r0, #192	; 0xc0
    18ca:	0600      	lsls	r0, r0, #24
    18cc:	4303      	orrs	r3, r0
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    18ce:	5053      	str	r3, [r2, r1]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    18d0:	2308      	movs	r3, #8
    18d2:	6013      	str	r3, [r2, #0]

	NVIC_SetPriority (RTC_IRQn, (1<<__NVIC_PRIO_BITS) - 1);//configure interrupt
	NVIC_EnableIRQ(RTC_IRQn);//enable interrrupt
	
    18d4:	bd08      	pop	{r3, pc}
    18d6:	46c0      	nop			; (mov r8, r8)
    18d8:	20004594 	.word	0x20004594
    18dc:	0000e9ec 	.word	0x0000e9ec
    18e0:	00004e11 	.word	0x00004e11
    18e4:	40000c00 	.word	0x40000c00
    18e8:	00010402 	.word	0x00010402
    18ec:	00004204 	.word	0x00004204
    18f0:	40001400 	.word	0x40001400
    18f4:	fffff0ff 	.word	0xfffff0ff
    18f8:	200000c8 	.word	0x200000c8
    18fc:	e000e100 	.word	0xe000e100

00001900 <_GLOBAL__sub_I_count_set_period>:
    1900:	b508      	push	{r3, lr}
public:
    /** Create a DigitalOut connected to the specified pin
     *
     *  @param pin DigitalOut pin to connect to
     */
    DigitalOut(PinName pin) : gpio() {
    1902:	4807      	ldr	r0, [pc, #28]	; (1920 <_GLOBAL__sub_I_count_set_period+0x20>)
    1904:	2300      	movs	r3, #0
    1906:	7003      	strb	r3, [r0, #0]
    1908:	6043      	str	r3, [r0, #4]
    190a:	7203      	strb	r3, [r0, #8]
    190c:	7243      	strb	r3, [r0, #9]
    190e:	7283      	strb	r3, [r0, #10]
    1910:	60c3      	str	r3, [r0, #12]
    1912:	6103      	str	r3, [r0, #16]
    1914:	6143      	str	r3, [r0, #20]
    1916:	6183      	str	r3, [r0, #24]
        gpio_init_out(&gpio, pin);
    1918:	2113      	movs	r1, #19
    191a:	4b02      	ldr	r3, [pc, #8]	; (1924 <_GLOBAL__sub_I_count_set_period+0x24>)
    191c:	4798      	blx	r3
    191e:	bd08      	pop	{r3, pc}
    1920:	20003d34 	.word	0x20003d34
    1924:	00004e5d 	.word	0x00004e5d

00001928 <_Z19ISRNetworkReceptionh>:
volatile circularBuffer buffer;
extern portTickType saveTimeRCrash;
/************************************************************************/
/* GLOBAL FUNCTION                                                      */
/************************************************************************/
void ISRNetworkReception(uint8_t e){
    1928:	b5f0      	push	{r4, r5, r6, r7, lr}
    192a:	464f      	mov	r7, r9
    192c:	4646      	mov	r6, r8
    192e:	b4c0      	push	{r6, r7}
    1930:	b085      	sub	sp, #20
    1932:	1c04      	adds	r4, r0, #0
	 uint16_t rx;
	saveTimeRCrash=xTaskGetTickCount();
    1934:	4b35      	ldr	r3, [pc, #212]	; (1a0c <_Z19ISRNetworkReceptionh+0xe4>)
    1936:	4798      	blx	r3
    1938:	4b35      	ldr	r3, [pc, #212]	; (1a10 <_Z19ISRNetworkReceptionh+0xe8>)
    193a:	6018      	str	r0, [r3, #0]
	if(((e & TRX_IRQ_TRX_END) == TRX_IRQ_TRX_END)||((e & TRX_IRQ_RX_START) == TRX_IRQ_RX_START))
    193c:	230c      	movs	r3, #12
    193e:	4223      	tst	r3, r4
    1940:	d05f      	beq.n	1a02 <_Z19ISRNetworkReceptionh+0xda>
	{
		
		#ifdef RADIO
		uint8_t available=radio.available();
    1942:	4834      	ldr	r0, [pc, #208]	; (1a14 <_Z19ISRNetworkReceptionh+0xec>)
    1944:	4b34      	ldr	r3, [pc, #208]	; (1a18 <_Z19ISRNetworkReceptionh+0xf0>)
    1946:	4798      	blx	r3
    1948:	b2c3      	uxtb	r3, r0
    194a:	4698      	mov	r8, r3
		 for(uint8_t i=0;i<available;i++){
    194c:	2b00      	cmp	r3, #0
    194e:	d055      	beq.n	19fc <_Z19ISRNetworkReceptionh+0xd4>
    1950:	2400      	movs	r4, #0

			//Disable_global_interrupt();
			//pc.printf("mimi\r\n");
			//synchro semaphore with a task

			rx=radio.read();
    1952:	4b32      	ldr	r3, [pc, #200]	; (1a1c <_Z19ISRNetworkReceptionh+0xf4>)
    1954:	4699      	mov	r9, r3
			buffer.buffer[buffer.indice++]=rx;
    1956:	4e32      	ldr	r6, [pc, #200]	; (1a20 <_Z19ISRNetworkReceptionh+0xf8>)

			//Disable_global_interrupt();
			//pc.printf("mimi\r\n");
			//synchro semaphore with a task

			rx=radio.read();
    1958:	482e      	ldr	r0, [pc, #184]	; (1a14 <_Z19ISRNetworkReceptionh+0xec>)
    195a:	47c8      	blx	r9
    195c:	b281      	uxth	r1, r0
			buffer.buffer[buffer.indice++]=rx;
    195e:	2232      	movs	r2, #50	; 0x32
    1960:	5cb3      	ldrb	r3, [r6, r2]
    1962:	b2db      	uxtb	r3, r3
    1964:	1c5f      	adds	r7, r3, #1
    1966:	b2ff      	uxtb	r7, r7
    1968:	54b7      	strb	r7, [r6, r2]
    196a:	b2c0      	uxtb	r0, r0
    196c:	54f0      	strb	r0, [r6, r3]
			//pc.printf("rx:%d\r\n",rx);
			if(buffer.indice>=CIRCULAR_BUFFER_LENGTH){
    196e:	5cb3      	ldrb	r3, [r6, r2]
    1970:	b2db      	uxtb	r3, r3
    1972:	2b31      	cmp	r3, #49	; 0x31
    1974:	d903      	bls.n	197e <_Z19ISRNetworkReceptionh+0x56>
				buffer.indice=0;
    1976:	2000      	movs	r0, #0
    1978:	2332      	movs	r3, #50	; 0x32
    197a:	4a29      	ldr	r2, [pc, #164]	; (1a20 <_Z19ISRNetworkReceptionh+0xf8>)
    197c:	54d0      	strb	r0, [r2, r3]
			}

			if(rx==HEADER){
    197e:	2955      	cmp	r1, #85	; 0x55
    1980:	d120      	bne.n	19c4 <_Z19ISRNetworkReceptionh+0x9c>
				if(timeProt.synchroTime!=NULL){
    1982:	2394      	movs	r3, #148	; 0x94
    1984:	4a27      	ldr	r2, [pc, #156]	; (1a24 <_Z19ISRNetworkReceptionh+0xfc>)
    1986:	58d0      	ldr	r0, [r2, r3]
    1988:	2800      	cmp	r0, #0
    198a:	d004      	beq.n	1996 <_Z19ISRNetworkReceptionh+0x6e>
					xSemaphoreGiveFromISR(timeProt.synchroTime,NULL);
    198c:	2100      	movs	r1, #0
    198e:	2200      	movs	r2, #0
    1990:	2300      	movs	r3, #0
    1992:	4f25      	ldr	r7, [pc, #148]	; (1a28 <_Z19ISRNetworkReceptionh+0x100>)
    1994:	47b8      	blx	r7
				}
				timeProt.waitIdentifier=true;
    1996:	4d23      	ldr	r5, [pc, #140]	; (1a24 <_Z19ISRNetworkReceptionh+0xfc>)
    1998:	2201      	movs	r2, #1
    199a:	2384      	movs	r3, #132	; 0x84
    199c:	54ea      	strb	r2, [r5, r3]

				#ifdef MASTERMODE
					Clock save;
					save.second=timeProt.saveTime[0].second;
    199e:	682b      	ldr	r3, [r5, #0]
    19a0:	af01      	add	r7, sp, #4
    19a2:	9301      	str	r3, [sp, #4]
					save.halfmillis=timeProt.saveTime[0].halfmillis;
    19a4:	686b      	ldr	r3, [r5, #4]
    19a6:	9302      	str	r3, [sp, #8]
					save.sign=timeProt.saveTime[0].sign;
    19a8:	7a2b      	ldrb	r3, [r5, #8]
    19aa:	b2db      	uxtb	r3, r3
    19ac:	723b      	strb	r3, [r7, #8]
					readClock(&save);
    19ae:	1c38      	adds	r0, r7, #0
    19b0:	4b1e      	ldr	r3, [pc, #120]	; (1a2c <_Z19ISRNetworkReceptionh+0x104>)
    19b2:	4798      	blx	r3
					timeProt.saveTime[0].second=save.second;
    19b4:	9b01      	ldr	r3, [sp, #4]
    19b6:	602b      	str	r3, [r5, #0]
					timeProt.saveTime[0].halfmillis=save.halfmillis;
    19b8:	687b      	ldr	r3, [r7, #4]
    19ba:	606b      	str	r3, [r5, #4]
					timeProt.saveTime[0].sign=save.sign;
    19bc:	7a3b      	ldrb	r3, [r7, #8]
    19be:	b2db      	uxtb	r3, r3
    19c0:	722b      	strb	r3, [r5, #8]
    19c2:	e017      	b.n	19f4 <_Z19ISRNetworkReceptionh+0xcc>
				continue;
				//return;
			}
			
			#ifdef MASTERMODE
			if(timeProt.waitIdentifier==true){
    19c4:	2384      	movs	r3, #132	; 0x84
    19c6:	4a17      	ldr	r2, [pc, #92]	; (1a24 <_Z19ISRNetworkReceptionh+0xfc>)
    19c8:	5cd3      	ldrb	r3, [r2, r3]
    19ca:	2b00      	cmp	r3, #0
    19cc:	d012      	beq.n	19f4 <_Z19ISRNetworkReceptionh+0xcc>
				timeProt.waitIdentifier=false;
    19ce:	1c13      	adds	r3, r2, #0
    19d0:	2000      	movs	r0, #0
    19d2:	2284      	movs	r2, #132	; 0x84
    19d4:	5498      	strb	r0, [r3, r2]
				timeProt.waitType=true;
    19d6:	3001      	adds	r0, #1
    19d8:	3201      	adds	r2, #1
    19da:	5498      	strb	r0, [r3, r2]
				if(rx<MAX_SLAVE_CLOCK){
    19dc:	2909      	cmp	r1, #9
    19de:	d809      	bhi.n	19f4 <_Z19ISRNetworkReceptionh+0xcc>
					timeProt.saveTime[rx].second=timeProt.saveTime[0].second;
    19e0:	681f      	ldr	r7, [r3, #0]
    19e2:	0048      	lsls	r0, r1, #1
    19e4:	1842      	adds	r2, r0, r1
    19e6:	0092      	lsls	r2, r2, #2
    19e8:	50d7      	str	r7, [r2, r3]
					timeProt.saveTime[rx].halfmillis=timeProt.saveTime[0].halfmillis;
    19ea:	685a      	ldr	r2, [r3, #4]
    19ec:	1841      	adds	r1, r0, r1
    19ee:	0089      	lsls	r1, r1, #2
    19f0:	1859      	adds	r1, r3, r1
    19f2:	604a      	str	r2, [r1, #4]
	if(((e & TRX_IRQ_TRX_END) == TRX_IRQ_TRX_END)||((e & TRX_IRQ_RX_START) == TRX_IRQ_RX_START))
	{
		
		#ifdef RADIO
		uint8_t available=radio.available();
		 for(uint8_t i=0;i<available;i++){
    19f4:	3401      	adds	r4, #1
    19f6:	b2e4      	uxtb	r4, r4
    19f8:	45a0      	cmp	r8, r4
    19fa:	d1ad      	bne.n	1958 <_Z19ISRNetworkReceptionh+0x30>
		
			//Enable_global_interrupt();
		 }
		
		 #endif
		  radio.flush();
    19fc:	4805      	ldr	r0, [pc, #20]	; (1a14 <_Z19ISRNetworkReceptionh+0xec>)
    19fe:	4b0c      	ldr	r3, [pc, #48]	; (1a30 <_Z19ISRNetworkReceptionh+0x108>)
    1a00:	4798      	blx	r3
	 }
	 
	 
}
    1a02:	b005      	add	sp, #20
    1a04:	bc0c      	pop	{r2, r3}
    1a06:	4690      	mov	r8, r2
    1a08:	4699      	mov	r9, r3
    1a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a0c:	00000b2d 	.word	0x00000b2d
    1a10:	20000194 	.word	0x20000194
    1a14:	20003d88 	.word	0x20003d88
    1a18:	00001f75 	.word	0x00001f75
    1a1c:	00001f41 	.word	0x00001f41
    1a20:	20003d54 	.word	0x20003d54
    1a24:	200042cc 	.word	0x200042cc
    1a28:	000005f5 	.word	0x000005f5
    1a2c:	00001559 	.word	0x00001559
    1a30:	00001f31 	.word	0x00001f31

00001a34 <_Z16networkAvailablev>:
}

bool networkAvailable(void){


	if(buffer.currentIndice!=buffer.indice){
    1a34:	4a04      	ldr	r2, [pc, #16]	; (1a48 <_Z16networkAvailablev+0x14>)
    1a36:	2333      	movs	r3, #51	; 0x33
    1a38:	5cd3      	ldrb	r3, [r2, r3]
    1a3a:	2132      	movs	r1, #50	; 0x32
    1a3c:	5c50      	ldrb	r0, [r2, r1]
    1a3e:	1a18      	subs	r0, r3, r0
    1a40:	1e43      	subs	r3, r0, #1
    1a42:	4198      	sbcs	r0, r3
    1a44:	b2c0      	uxtb	r0, r0
	else{
			
		return false;
	}

}
    1a46:	4770      	bx	lr
    1a48:	20003d54 	.word	0x20003d54

00001a4c <_Z12networkFlushv>:
void networkFlush(void){
	//usart_disable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);//momo
	buffer.currentIndice=buffer.indice;
    1a4c:	4a03      	ldr	r2, [pc, #12]	; (1a5c <_Z12networkFlushv+0x10>)
    1a4e:	2332      	movs	r3, #50	; 0x32
    1a50:	5cd3      	ldrb	r3, [r2, r3]
    1a52:	b2db      	uxtb	r3, r3
    1a54:	2133      	movs	r1, #51	; 0x33
    1a56:	5453      	strb	r3, [r2, r1]
	//usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED); //momo
}
    1a58:	4770      	bx	lr
    1a5a:	46c0      	nop			; (mov r8, r8)
    1a5c:	20003d54 	.word	0x20003d54

00001a60 <_Z9networkTxPKhh>:
void networkTx(const uint8_t send[],const uint8_t length){
    1a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1a62:	1c07      	adds	r7, r0, #0
    1a64:	1c0e      	adds	r6, r1, #0
	#ifdef RADIO
		uint8_t i;
		radio.beginTransmission();
    1a66:	480b      	ldr	r0, [pc, #44]	; (1a94 <_Z9networkTxPKhh+0x34>)
    1a68:	4b0b      	ldr	r3, [pc, #44]	; (1a98 <_Z9networkTxPKhh+0x38>)
    1a6a:	4798      	blx	r3
		for(i=0;i<length;i++){
    1a6c:	2e00      	cmp	r6, #0
    1a6e:	d00c      	beq.n	1a8a <_Z9networkTxPKhh+0x2a>
    1a70:	1c3c      	adds	r4, r7, #0
    1a72:	1e75      	subs	r5, r6, #1
    1a74:	b2ed      	uxtb	r5, r5
    1a76:	3501      	adds	r5, #1
    1a78:	197d      	adds	r5, r7, r5
			
			radio.write(send[i]);
    1a7a:	4e06      	ldr	r6, [pc, #24]	; (1a94 <_Z9networkTxPKhh+0x34>)
    1a7c:	4f07      	ldr	r7, [pc, #28]	; (1a9c <_Z9networkTxPKhh+0x3c>)
    1a7e:	7821      	ldrb	r1, [r4, #0]
    1a80:	1c30      	adds	r0, r6, #0
    1a82:	47b8      	blx	r7
    1a84:	3401      	adds	r4, #1
}
void networkTx(const uint8_t send[],const uint8_t length){
	#ifdef RADIO
		uint8_t i;
		radio.beginTransmission();
		for(i=0;i<length;i++){
    1a86:	42ac      	cmp	r4, r5
    1a88:	d1f9      	bne.n	1a7e <_Z9networkTxPKhh+0x1e>
			
			radio.write(send[i]);
			
		}
		radio.endTransmission();
    1a8a:	4802      	ldr	r0, [pc, #8]	; (1a94 <_Z9networkTxPKhh+0x34>)
    1a8c:	4b04      	ldr	r3, [pc, #16]	; (1aa0 <_Z9networkTxPKhh+0x40>)
    1a8e:	4798      	blx	r3
	#endif
}
    1a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1a92:	46c0      	nop			; (mov r8, r8)
    1a94:	20003d88 	.word	0x20003d88
    1a98:	00001f95 	.word	0x00001f95
    1a9c:	000020b9 	.word	0x000020b9
    1aa0:	00001fed 	.word	0x00001fed

00001aa4 <_Z11networkReadv>:
uint8_t networkRead(void){
    1aa4:	b510      	push	{r4, lr}
	uint8_t i =networkAvailable();
    1aa6:	4c0e      	ldr	r4, [pc, #56]	; (1ae0 <_Z11networkReadv+0x3c>)
    1aa8:	47a0      	blx	r4
	if(networkAvailable()){
    1aaa:	47a0      	blx	r4
			buffer.currentIndice=0;
		}
		return recu; 
	}
	else{
		return 0;
    1aac:	2300      	movs	r3, #0
		radio.endTransmission();
	#endif
}
uint8_t networkRead(void){
	uint8_t i =networkAvailable();
	if(networkAvailable()){
    1aae:	2800      	cmp	r0, #0
    1ab0:	d013      	beq.n	1ada <_Z11networkReadv+0x36>
		uint8_t recu;
		recu=buffer.buffer[buffer.currentIndice];
    1ab2:	4b0c      	ldr	r3, [pc, #48]	; (1ae4 <_Z11networkReadv+0x40>)
    1ab4:	2133      	movs	r1, #51	; 0x33
    1ab6:	5c5a      	ldrb	r2, [r3, r1]
    1ab8:	b2d2      	uxtb	r2, r2
    1aba:	5c98      	ldrb	r0, [r3, r2]
    1abc:	b2c0      	uxtb	r0, r0
		buffer.currentIndice++;
    1abe:	5c5a      	ldrb	r2, [r3, r1]
    1ac0:	3201      	adds	r2, #1
    1ac2:	b2d2      	uxtb	r2, r2
    1ac4:	545a      	strb	r2, [r3, r1]
		if(buffer.currentIndice>=CIRCULAR_BUFFER_LENGTH){
    1ac6:	5c5a      	ldrb	r2, [r3, r1]
    1ac8:	b2d2      	uxtb	r2, r2
			buffer.currentIndice=0;
		}
		return recu; 
    1aca:	1c03      	adds	r3, r0, #0
	uint8_t i =networkAvailable();
	if(networkAvailable()){
		uint8_t recu;
		recu=buffer.buffer[buffer.currentIndice];
		buffer.currentIndice++;
		if(buffer.currentIndice>=CIRCULAR_BUFFER_LENGTH){
    1acc:	2a31      	cmp	r2, #49	; 0x31
    1ace:	d904      	bls.n	1ada <_Z11networkReadv+0x36>
			buffer.currentIndice=0;
    1ad0:	2100      	movs	r1, #0
    1ad2:	2333      	movs	r3, #51	; 0x33
    1ad4:	4a03      	ldr	r2, [pc, #12]	; (1ae4 <_Z11networkReadv+0x40>)
    1ad6:	54d1      	strb	r1, [r2, r3]
		}
		return recu; 
    1ad8:	1c03      	adds	r3, r0, #0
	else{
		return 0;
	}

	
}
    1ada:	1c18      	adds	r0, r3, #0
    1adc:	bd10      	pop	{r4, pc}
    1ade:	46c0      	nop			; (mov r8, r8)
    1ae0:	00001a35 	.word	0x00001a35
    1ae4:	20003d54 	.word	0x20003d54

00001ae8 <_Z20configurationNetworkv>:

void configurationNetwork(){
    1ae8:	b510      	push	{r4, lr}
	hmi.printf("network config\r\n");
    1aea:	480a      	ldr	r0, [pc, #40]	; (1b14 <_Z20configurationNetworkv+0x2c>)
    1aec:	490a      	ldr	r1, [pc, #40]	; (1b18 <_Z20configurationNetworkv+0x30>)
    1aee:	4b0b      	ldr	r3, [pc, #44]	; (1b1c <_Z20configurationNetworkv+0x34>)
    1af0:	4798      	blx	r3
	buffer.currentIndice=0;
    1af2:	4b0b      	ldr	r3, [pc, #44]	; (1b20 <_Z20configurationNetworkv+0x38>)
    1af4:	2200      	movs	r2, #0
    1af6:	2133      	movs	r1, #51	; 0x33
    1af8:	545a      	strb	r2, [r3, r1]
	buffer.indice=0;
    1afa:	3901      	subs	r1, #1
    1afc:	545a      	strb	r2, [r3, r1]
	#ifdef RADIO
	radio.attachIrq(ISRNetworkReception);
    1afe:	4c09      	ldr	r4, [pc, #36]	; (1b24 <_Z20configurationNetworkv+0x3c>)
    1b00:	1c20      	adds	r0, r4, #0
    1b02:	4909      	ldr	r1, [pc, #36]	; (1b28 <_Z20configurationNetworkv+0x40>)
    1b04:	4b09      	ldr	r3, [pc, #36]	; (1b2c <_Z20configurationNetworkv+0x44>)
    1b06:	4798      	blx	r3
    radio.begin(RADIO_CHANNEL);
    1b08:	1c20      	adds	r0, r4, #0
    1b0a:	210c      	movs	r1, #12
    1b0c:	4b08      	ldr	r3, [pc, #32]	; (1b30 <_Z20configurationNetworkv+0x48>)
    1b0e:	4798      	blx	r3
	#endif
	

}
    1b10:	bd10      	pop	{r4, pc}
    1b12:	46c0      	nop			; (mov r8, r8)
    1b14:	20004594 	.word	0x20004594
    1b18:	0000ea04 	.word	0x0000ea04
    1b1c:	00004e11 	.word	0x00004e11
    1b20:	20003d54 	.word	0x20003d54
    1b24:	20003d88 	.word	0x20003d88
    1b28:	00001929 	.word	0x00001929
    1b2c:	00001f29 	.word	0x00001f29
    1b30:	00001f19 	.word	0x00001f19

00001b34 <_GLOBAL__sub_I_radio>:
    1b34:	b530      	push	{r4, r5, lr}
    1b36:	b085      	sub	sp, #20
#include "network.h"
/************************************************************************/
/* GLOBAL                                                               */
/************************************************************************/
#ifdef RADIO
cMxRadio radio(PB30,PC19,PC18,PB31,PB15,PA20,PB00);
    1b38:	4c0a      	ldr	r4, [pc, #40]	; (1b64 <_GLOBAL__sub_I_radio+0x30>)
    1b3a:	233f      	movs	r3, #63	; 0x3f
    1b3c:	9300      	str	r3, [sp, #0]
    1b3e:	3b10      	subs	r3, #16
    1b40:	9301      	str	r3, [sp, #4]
    1b42:	3b1b      	subs	r3, #27
    1b44:	9302      	str	r3, [sp, #8]
    1b46:	330c      	adds	r3, #12
    1b48:	9303      	str	r3, [sp, #12]
    1b4a:	1c20      	adds	r0, r4, #0
    1b4c:	213e      	movs	r1, #62	; 0x3e
    1b4e:	2253      	movs	r2, #83	; 0x53
    1b50:	3332      	adds	r3, #50	; 0x32
    1b52:	4d05      	ldr	r5, [pc, #20]	; (1b68 <_GLOBAL__sub_I_radio+0x34>)
    1b54:	47a8      	blx	r5
    1b56:	1c20      	adds	r0, r4, #0
    1b58:	4904      	ldr	r1, [pc, #16]	; (1b6c <_GLOBAL__sub_I_radio+0x38>)
    1b5a:	4a05      	ldr	r2, [pc, #20]	; (1b70 <_GLOBAL__sub_I_radio+0x3c>)
    1b5c:	4b05      	ldr	r3, [pc, #20]	; (1b74 <_GLOBAL__sub_I_radio+0x40>)
    1b5e:	4798      	blx	r3
	radio.attachIrq(ISRNetworkReception);
    radio.begin(RADIO_CHANNEL);
	#endif
	

}
    1b60:	b005      	add	sp, #20
    1b62:	bd30      	pop	{r4, r5, pc}
    1b64:	20003d88 	.word	0x20003d88
    1b68:	00001d55 	.word	0x00001d55
    1b6c:	00001d51 	.word	0x00001d51
    1b70:	200000b0 	.word	0x200000b0
    1b74:	0000651d 	.word	0x0000651d

00001b78 <main>:
#include <internalClock.h>
#include <ppsGPS.h>
#include <network.h>
#include <wdt_config.h>

int main (void ){
    1b78:	b570      	push	{r4, r5, r6, lr}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1b7a:	b672      	cpsid	i
    1b7c:	f3bf 8f5f 	dmb	sy
 * Disabled global interrupts in the device, preventing any enabled interrupt
 * handlers from executing.
 */
static inline void system_interrupt_disable_global(void)
{
    cpu_irq_disable();
    1b80:	4c17      	ldr	r4, [pc, #92]	; (1be0 <main+0x68>)
    1b82:	2300      	movs	r3, #0
    1b84:	7023      	strb	r3, [r4, #0]
	 system_interrupt_disable_global();
    //configure HMI
    configureHMI();
    1b86:	4b17      	ldr	r3, [pc, #92]	; (1be4 <main+0x6c>)
    1b88:	4798      	blx	r3
    //RTC configure
   configureInternalClock();
    1b8a:	4b17      	ldr	r3, [pc, #92]	; (1be8 <main+0x70>)
    1b8c:	4798      	blx	r3
    //configure external intrerrupt for pps
    configurationPPS();
    1b8e:	4b17      	ldr	r3, [pc, #92]	; (1bec <main+0x74>)
    1b90:	4798      	blx	r3
    //configure the network of the time SYNCHRONISATION
	
    configurationNetwork();
    1b92:	4b17      	ldr	r3, [pc, #92]	; (1bf0 <main+0x78>)
    1b94:	4798      	blx	r3
	wdt_config();
    1b96:	4b17      	ldr	r3, [pc, #92]	; (1bf4 <main+0x7c>)
    1b98:	4798      	blx	r3
    // Initialize the demo..
    kernelConfig();
    1b9a:	4b17      	ldr	r3, [pc, #92]	; (1bf8 <main+0x80>)
    1b9c:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
    cpu_irq_enable();
    1b9e:	2301      	movs	r3, #1
    1ba0:	7023      	strb	r3, [r4, #0]
    1ba2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    1ba6:	b662      	cpsie	i
    //demask global interrupt
    system_interrupt_enable_global();
    hmi.printf("\r\n\r\n**********************************************************************\r\n");
    1ba8:	4d14      	ldr	r5, [pc, #80]	; (1bfc <main+0x84>)
    1baa:	1c28      	adds	r0, r5, #0
    1bac:	4914      	ldr	r1, [pc, #80]	; (1c00 <main+0x88>)
    1bae:	4c15      	ldr	r4, [pc, #84]	; (1c04 <main+0x8c>)
    1bb0:	47a0      	blx	r4
    hmi.printf("tick time: %lu ms\r\n",portTICK_RATE_MS);   
    1bb2:	1c28      	adds	r0, r5, #0
    1bb4:	4914      	ldr	r1, [pc, #80]	; (1c08 <main+0x90>)
    1bb6:	2201      	movs	r2, #1
    1bb8:	47a0      	blx	r4
    #ifdef MASTERMODE
        hmi.printf("Master clock\r\n");
    1bba:	1c28      	adds	r0, r5, #0
    1bbc:	4913      	ldr	r1, [pc, #76]	; (1c0c <main+0x94>)
    1bbe:	47a0      	blx	r4
    #else
        hmi.printf("Slave Clock \r\n");
    #endif
    hmi.printf("end config application begin\r\n");
    1bc0:	1c28      	adds	r0, r5, #0
    1bc2:	4913      	ldr	r1, [pc, #76]	; (1c10 <main+0x98>)
    1bc4:	47a0      	blx	r4
    hmi.printf("\r\n**********************************************************************\r\n\r\n");
    1bc6:	1c28      	adds	r0, r5, #0
    1bc8:	4912      	ldr	r1, [pc, #72]	; (1c14 <main+0x9c>)
    1bca:	47a0      	blx	r4
    //start the scheduler
    vTaskStartScheduler();
    1bcc:	4b12      	ldr	r3, [pc, #72]	; (1c18 <main+0xa0>)
    1bce:	4798      	blx	r3
    while(1){//trap
		hmi.printf("trap!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n");
    1bd0:	4e0a      	ldr	r6, [pc, #40]	; (1bfc <main+0x84>)
    1bd2:	4d12      	ldr	r5, [pc, #72]	; (1c1c <main+0xa4>)
    1bd4:	4c0b      	ldr	r4, [pc, #44]	; (1c04 <main+0x8c>)
    1bd6:	1c30      	adds	r0, r6, #0
    1bd8:	1c29      	adds	r1, r5, #0
    1bda:	47a0      	blx	r4
#include <internalClock.h>
#include <ppsGPS.h>
#include <network.h>
#include <wdt_config.h>

int main (void ){
    1bdc:	e7fb      	b.n	1bd6 <main+0x5e>
    1bde:	46c0      	nop			; (mov r8, r8)
    1be0:	200000d0 	.word	0x200000d0
    1be4:	00003a69 	.word	0x00003a69
    1be8:	00001851 	.word	0x00001851
    1bec:	00002c29 	.word	0x00002c29
    1bf0:	00001ae9 	.word	0x00001ae9
    1bf4:	000002c5 	.word	0x000002c5
    1bf8:	00002b35 	.word	0x00002b35
    1bfc:	20004594 	.word	0x20004594
    1c00:	0000ea18 	.word	0x0000ea18
    1c04:	00004e11 	.word	0x00004e11
    1c08:	0000ea68 	.word	0x0000ea68
    1c0c:	0000ea7c 	.word	0x0000ea7c
    1c10:	0000ea8c 	.word	0x0000ea8c
    1c14:	0000eaac 	.word	0x0000eaac
    1c18:	00000ac5 	.word	0x00000ac5
    1c1c:	0000eafc 	.word	0x0000eafc

00001c20 <_ZN8cMxRadio14onReceiveFrameEhPhhah>:
 * @param frm array containing frame data
 * @param lqi link quality indicator
 * @param crc_fail boolean indicating whether the received frame failed FCS verification, not used
 */
uint8_t* cMxRadio::onReceiveFrame(uint8_t len, uint8_t* frm, uint8_t lqi, int8_t ed,uint8_t crc_fail)
{
    1c20:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c22:	4657      	mov	r7, sl
    1c24:	464e      	mov	r6, r9
    1c26:	4645      	mov	r5, r8
    1c28:	b4e0      	push	{r5, r6, r7}
    1c2a:	b082      	sub	sp, #8
    1c2c:	ac0a      	add	r4, sp, #40	; 0x28
    1c2e:	2500      	movs	r5, #0
    1c30:	5765      	ldrsb	r5, [r4, r5]
    1c32:	ac0b      	add	r4, sp, #44	; 0x2c
    1c34:	7824      	ldrb	r4, [r4, #0]
	if (crc_fail)
    1c36:	2c00      	cmp	r4, #0
    1c38:	d002      	beq.n	1c40 <_ZN8cMxRadio14onReceiveFrameEhPhhah+0x20>
		return rxRingBuffer;
    1c3a:	307c      	adds	r0, #124	; 0x7c
    1c3c:	30ff      	adds	r0, #255	; 0xff
    1c3e:	e06b      	b.n	1d18 <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xf8>
	lastLqi = lqi;
    1c40:	4c38      	ldr	r4, [pc, #224]	; (1d24 <_ZN8cMxRadio14onReceiveFrameEhPhhah+0x104>)
    1c42:	5503      	strb	r3, [r0, r4]
	//lastRssi=ed;
	if (hasAttachedRxEvent == 0)
    1c44:	4c38      	ldr	r4, [pc, #224]	; (1d28 <_ZN8cMxRadio14onReceiveFrameEhPhhah+0x108>)
    1c46:	5d04      	ldrb	r4, [r0, r4]
    1c48:	2c00      	cmp	r4, #0
    1c4a:	d15b      	bne.n	1d04 <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xe4>
	{
		// no event handler, so write it into the FIFO

		if (len >= HeadSize-1)
    1c4c:	2907      	cmp	r1, #7
    1c4e:	d817      	bhi.n	1c80 <_ZN8cMxRadio14onReceiveFrameEhPhhah+0x60>
		else
		{
			// frame header does not exist
			// copy everything

			for (uint8_t i = 0; i < len; i++)
    1c50:	2900      	cmp	r1, #0
    1c52:	d054      	beq.n	1cfe <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xde>
			{
				uint16_t j = ((uint16_t)((uint16_t)rxRingBufferHead + 1)) % ZR_FIFO_SIZE;
    1c54:	23fc      	movs	r3, #252	; 0xfc
    1c56:	33ff      	adds	r3, #255	; 0xff
    1c58:	5cc3      	ldrb	r3, [r0, r3]
    1c5a:	1c5c      	adds	r4, r3, #1
    1c5c:	257f      	movs	r5, #127	; 0x7f
    1c5e:	402c      	ands	r4, r5
				if (j != rxRingBufferTail)
    1c60:	357e      	adds	r5, #126	; 0x7e
    1c62:	35ff      	adds	r5, #255	; 0xff
    1c64:	5d45      	ldrb	r5, [r0, r5]
    1c66:	42a5      	cmp	r5, r4
    1c68:	d049      	beq.n	1cfe <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xde>
    1c6a:	1c17      	adds	r7, r2, #0
    1c6c:	3901      	subs	r1, #1
    1c6e:	b2c9      	uxtb	r1, r1
    1c70:	1852      	adds	r2, r2, r1
				{
					// push into FIFO
					rxRingBuffer[rxRingBufferHead] = frm[i];
					rxRingBufferHead = j;
    1c72:	21fc      	movs	r1, #252	; 0xfc
    1c74:	31ff      	adds	r1, #255	; 0xff
			// frame header does not exist
			// copy everything

			for (uint8_t i = 0; i < len; i++)
			{
				uint16_t j = ((uint16_t)((uint16_t)rxRingBufferHead + 1)) % ZR_FIFO_SIZE;
    1c76:	257f      	movs	r5, #127	; 0x7f
    1c78:	46ac      	mov	ip, r5
				if (j != rxRingBufferTail)
    1c7a:	26fe      	movs	r6, #254	; 0xfe
    1c7c:	0076      	lsls	r6, r6, #1
    1c7e:	e035      	b.n	1cec <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xcc>
		if (len >= HeadSize-1)
		{
			// frame header exists
			// copy only payload

			for (uint8_t i = HeadSize; i < len - 2; i++)
    1c80:	1e8e      	subs	r6, r1, #2
    1c82:	2e09      	cmp	r6, #9
    1c84:	dd3b      	ble.n	1cfe <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xde>
			{
				uint16_t j = ((uint16_t)((uint16_t)rxRingBufferHead + 1)) % ZR_FIFO_SIZE;
    1c86:	23fc      	movs	r3, #252	; 0xfc
    1c88:	33ff      	adds	r3, #255	; 0xff
    1c8a:	5cc4      	ldrb	r4, [r0, r3]
    1c8c:	1c63      	adds	r3, r4, #1
    1c8e:	217f      	movs	r1, #127	; 0x7f
    1c90:	400b      	ands	r3, r1
				if (j != rxRingBufferTail)
    1c92:	317e      	adds	r1, #126	; 0x7e
    1c94:	31ff      	adds	r1, #255	; 0xff
    1c96:	5c41      	ldrb	r1, [r0, r1]
    1c98:	2509      	movs	r5, #9
    1c9a:	4299      	cmp	r1, r3
    1c9c:	d10a      	bne.n	1cb4 <_ZN8cMxRadio14onReceiveFrameEhPhhah+0x94>
    1c9e:	e02e      	b.n	1cfe <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xde>
			// frame header exists
			// copy only payload

			for (uint8_t i = HeadSize; i < len - 2; i++)
			{
				uint16_t j = ((uint16_t)((uint16_t)rxRingBufferHead + 1)) % ZR_FIFO_SIZE;
    1ca0:	4647      	mov	r7, r8
    1ca2:	403b      	ands	r3, r7
    1ca4:	3301      	adds	r3, #1
    1ca6:	4667      	mov	r7, ip
    1ca8:	403b      	ands	r3, r7
				if (j != rxRingBufferTail)
    1caa:	4657      	mov	r7, sl
    1cac:	5dc7      	ldrb	r7, [r0, r7]
    1cae:	429f      	cmp	r7, r3
    1cb0:	d109      	bne.n	1cc6 <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xa6>
    1cb2:	e024      	b.n	1cfe <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xde>
				{
					// push into FIFO
					rxRingBuffer[rxRingBufferHead] = frm[i];
					rxRingBufferHead = j;
    1cb4:	21fc      	movs	r1, #252	; 0xfc
    1cb6:	31ff      	adds	r1, #255	; 0xff
			// frame header exists
			// copy only payload

			for (uint8_t i = HeadSize; i < len - 2; i++)
			{
				uint16_t j = ((uint16_t)((uint16_t)rxRingBufferHead + 1)) % ZR_FIFO_SIZE;
    1cb8:	27ff      	movs	r7, #255	; 0xff
    1cba:	46b8      	mov	r8, r7
    1cbc:	3f80      	subs	r7, #128	; 0x80
    1cbe:	46bc      	mov	ip, r7
				if (j != rxRingBufferTail)
    1cc0:	377e      	adds	r7, #126	; 0x7e
    1cc2:	37ff      	adds	r7, #255	; 0xff
    1cc4:	46ba      	mov	sl, r7
				{
					// push into FIFO
					rxRingBuffer[rxRingBufferHead] = frm[i];
    1cc6:	5d57      	ldrb	r7, [r2, r5]
    1cc8:	1904      	adds	r4, r0, r4
    1cca:	3479      	adds	r4, #121	; 0x79
    1ccc:	34ff      	adds	r4, #255	; 0xff
    1cce:	70e7      	strb	r7, [r4, #3]
					rxRingBufferHead = j;
    1cd0:	b2dc      	uxtb	r4, r3
    1cd2:	5444      	strb	r4, [r0, r1]
		if (len >= HeadSize-1)
		{
			// frame header exists
			// copy only payload

			for (uint8_t i = HeadSize; i < len - 2; i++)
    1cd4:	3501      	adds	r5, #1
    1cd6:	b2ed      	uxtb	r5, r5
    1cd8:	42b5      	cmp	r5, r6
    1cda:	dbe1      	blt.n	1ca0 <_ZN8cMxRadio14onReceiveFrameEhPhhah+0x80>
    1cdc:	e00f      	b.n	1cfe <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xde>
			// frame header does not exist
			// copy everything

			for (uint8_t i = 0; i < len; i++)
			{
				uint16_t j = ((uint16_t)((uint16_t)rxRingBufferHead + 1)) % ZR_FIFO_SIZE;
    1cde:	3401      	adds	r4, #1
    1ce0:	4665      	mov	r5, ip
    1ce2:	402c      	ands	r4, r5
    1ce4:	3701      	adds	r7, #1
				if (j != rxRingBufferTail)
    1ce6:	5d85      	ldrb	r5, [r0, r6]
    1ce8:	42a5      	cmp	r5, r4
    1cea:	d008      	beq.n	1cfe <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xde>
				{
					// push into FIFO
					rxRingBuffer[rxRingBufferHead] = frm[i];
    1cec:	783d      	ldrb	r5, [r7, #0]
    1cee:	18c3      	adds	r3, r0, r3
    1cf0:	3379      	adds	r3, #121	; 0x79
    1cf2:	33ff      	adds	r3, #255	; 0xff
    1cf4:	70dd      	strb	r5, [r3, #3]
					rxRingBufferHead = j;
    1cf6:	b2e3      	uxtb	r3, r4
    1cf8:	5443      	strb	r3, [r0, r1]
		else
		{
			// frame header does not exist
			// copy everything

			for (uint8_t i = 0; i < len; i++)
    1cfa:	4297      	cmp	r7, r2
    1cfc:	d1ef      	bne.n	1cde <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xbe>
					break;
				}
			}
		}

		return rxRingBuffer;
    1cfe:	307c      	adds	r0, #124	; 0x7c
    1d00:	30ff      	adds	r0, #255	; 0xff
    1d02:	e009      	b.n	1d18 <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xf8>
	}
	else
	{
		// user event is attached so call it
		return zrEventReceiveFrame(len, frm, lqi, ed,crc_fail);
    1d04:	2400      	movs	r4, #0
    1d06:	9400      	str	r4, [sp, #0]
    1d08:	24a1      	movs	r4, #161	; 0xa1
    1d0a:	00a4      	lsls	r4, r4, #2
    1d0c:	5904      	ldr	r4, [r0, r4]
    1d0e:	1c08      	adds	r0, r1, #0
    1d10:	1c11      	adds	r1, r2, #0
    1d12:	1c1a      	adds	r2, r3, #0
    1d14:	1c2b      	adds	r3, r5, #0
    1d16:	47a0      	blx	r4
	}
}
    1d18:	b002      	add	sp, #8
    1d1a:	bc1c      	pop	{r2, r3, r4}
    1d1c:	4690      	mov	r8, r2
    1d1e:	4699      	mov	r9, r3
    1d20:	46a2      	mov	sl, r4
    1d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d24:	0000027d 	.word	0x0000027d
    1d28:	0000027f 	.word	0x0000027f

00001d2c <_ZN8cMxRadio8onTxDoneE15radio_tx_done_t>:
 * this should not be called by the user
 *
 * @param x one of the radio_tx_done_t enumerations indicating transmission success
 */
void cMxRadio::onTxDone(radio_tx_done_t x)
{
    1d2c:	b510      	push	{r4, lr}
    1d2e:	1c04      	adds	r4, r0, #0
	if (hasAttachedTxEvent)
    1d30:	23a0      	movs	r3, #160	; 0xa0
    1d32:	009b      	lsls	r3, r3, #2
    1d34:	5cc3      	ldrb	r3, [r0, r3]
    1d36:	2b00      	cmp	r3, #0
    1d38:	d004      	beq.n	1d44 <_ZN8cMxRadio8onTxDoneE15radio_tx_done_t+0x18>
	{
		zrEventTxDone(x);
    1d3a:	23a2      	movs	r3, #162	; 0xa2
    1d3c:	009b      	lsls	r3, r3, #2
    1d3e:	58c3      	ldr	r3, [r0, r3]
    1d40:	1c08      	adds	r0, r1, #0
    1d42:	4798      	blx	r3
	}

	txIsBusy = 0;
    1d44:	2200      	movs	r2, #0
    1d46:	4b01      	ldr	r3, [pc, #4]	; (1d4c <_ZN8cMxRadio8onTxDoneE15radio_tx_done_t+0x20>)
    1d48:	54e2      	strb	r2, [r4, r3]
}
    1d4a:	bd10      	pop	{r4, pc}
    1d4c:	00000282 	.word	0x00000282

00001d50 <_ZN8cMxRadioD1Ev>:
volatile uint8_t txIsBusy = 0;


cMxRadio::~cMxRadio()
{
}
    1d50:	4770      	bx	lr
    1d52:	46c0      	nop			; (mov r8, r8)

00001d54 <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_>:
// empty constructor, should not be called by user
cMxRadio::cMxRadio(PinName mosi, PinName miso, PinName sclk, PinName cs, PinName rst, PinName slp, PinName irq)
    1d54:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d56:	4647      	mov	r7, r8
    1d58:	b480      	push	{r7}
    1d5a:	b086      	sub	sp, #24
    1d5c:	1c05      	adds	r5, r0, #0
    1d5e:	a80c      	add	r0, sp, #48	; 0x30
    1d60:	2600      	movs	r6, #0
    1d62:	5786      	ldrsb	r6, [r0, r6]
    1d64:	a80d      	add	r0, sp, #52	; 0x34
    1d66:	2700      	movs	r7, #0
    1d68:	57c7      	ldrsb	r7, [r0, r7]
    1d6a:	a80e      	add	r0, sp, #56	; 0x38
    1d6c:	7800      	ldrb	r0, [r0, #0]
    1d6e:	b240      	sxtb	r0, r0
    1d70:	4680      	mov	r8, r0
:m_spi(mosi, miso, sclk), m_cs(cs), reset_pin(rst), sleep_pin(slp)//,irq_pin(irq)
    1d72:	1c28      	adds	r0, r5, #0
    1d74:	3014      	adds	r0, #20
    1d76:	2401      	movs	r4, #1
    1d78:	4264      	negs	r4, r4
    1d7a:	9400      	str	r4, [sp, #0]
    1d7c:	4c2c      	ldr	r4, [pc, #176]	; (1e30 <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_+0xdc>)
    1d7e:	47a0      	blx	r4
public:
    /** Create a DigitalOut connected to the specified pin
     *
     *  @param pin DigitalOut pin to connect to
     */
    DigitalOut(PinName pin) : gpio() {
    1d80:	2400      	movs	r4, #0
    1d82:	23a8      	movs	r3, #168	; 0xa8
    1d84:	54ec      	strb	r4, [r5, r3]
    1d86:	1c28      	adds	r0, r5, #0
    1d88:	30a8      	adds	r0, #168	; 0xa8
    1d8a:	6044      	str	r4, [r0, #4]
    1d8c:	7204      	strb	r4, [r0, #8]
    1d8e:	7244      	strb	r4, [r0, #9]
    1d90:	7284      	strb	r4, [r0, #10]
    1d92:	60c4      	str	r4, [r0, #12]
    1d94:	6104      	str	r4, [r0, #16]
    1d96:	6144      	str	r4, [r0, #20]
    1d98:	6184      	str	r4, [r0, #24]
        gpio_init_out(&gpio, pin);
    1d9a:	1c31      	adds	r1, r6, #0
    1d9c:	4e25      	ldr	r6, [pc, #148]	; (1e34 <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_+0xe0>)
    1d9e:	47b0      	blx	r6
public:
    /** Create a DigitalOut connected to the specified pin
     *
     *  @param pin DigitalOut pin to connect to
     */
    DigitalOut(PinName pin) : gpio() {
    1da0:	23c4      	movs	r3, #196	; 0xc4
    1da2:	54ec      	strb	r4, [r5, r3]
    1da4:	1c28      	adds	r0, r5, #0
    1da6:	30c4      	adds	r0, #196	; 0xc4
    1da8:	6044      	str	r4, [r0, #4]
    1daa:	7204      	strb	r4, [r0, #8]
    1dac:	7244      	strb	r4, [r0, #9]
    1dae:	7284      	strb	r4, [r0, #10]
    1db0:	60c4      	str	r4, [r0, #12]
    1db2:	6104      	str	r4, [r0, #16]
    1db4:	6144      	str	r4, [r0, #20]
    1db6:	6184      	str	r4, [r0, #24]
        gpio_init_out(&gpio, pin);
    1db8:	1c39      	adds	r1, r7, #0
    1dba:	47b0      	blx	r6
public:
    /** Create a DigitalOut connected to the specified pin
     *
     *  @param pin DigitalOut pin to connect to
     */
    DigitalOut(PinName pin) : gpio() {
    1dbc:	23e0      	movs	r3, #224	; 0xe0
    1dbe:	54ec      	strb	r4, [r5, r3]
    1dc0:	1c28      	adds	r0, r5, #0
    1dc2:	30e0      	adds	r0, #224	; 0xe0
    1dc4:	6044      	str	r4, [r0, #4]
    1dc6:	7204      	strb	r4, [r0, #8]
    1dc8:	7244      	strb	r4, [r0, #9]
    1dca:	7284      	strb	r4, [r0, #10]
    1dcc:	60c4      	str	r4, [r0, #12]
    1dce:	6104      	str	r4, [r0, #16]
    1dd0:	6144      	str	r4, [r0, #20]
    1dd2:	6184      	str	r4, [r0, #24]
        gpio_init_out(&gpio, pin);
    1dd4:	4641      	mov	r1, r8
    1dd6:	47b0      	blx	r6
{
	// default event handlers
	
	zrEventTxDone=0;
    1dd8:	23a2      	movs	r3, #162	; 0xa2
    1dda:	009b      	lsls	r3, r3, #2
    1ddc:	50ec      	str	r4, [r5, r3]
	zrEventReceiveFrame=0;
    1dde:	3b04      	subs	r3, #4
    1de0:	50ec      	str	r4, [r5, r3]
	temprssi=0;
    1de2:	702c      	strb	r4, [r5, #0]
	setautotx=false;
    1de4:	3308      	adds	r3, #8
    1de6:	54ec      	strb	r4, [r5, r3]
	setautorx=false;
    1de8:	4b13      	ldr	r3, [pc, #76]	; (1e38 <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_+0xe4>)
    1dea:	54ec      	strb	r4, [r5, r3]
	needack=false;
    1dec:	4b13      	ldr	r3, [pc, #76]	; (1e3c <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_+0xe8>)
    1dee:	54ec      	strb	r4, [r5, r3]
	usedBeginTransmission = 0;
    1df0:	4b13      	ldr	r3, [pc, #76]	; (1e40 <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_+0xec>)
    1df2:	54ec      	strb	r4, [r5, r3]
	hasAttachedTxEvent = 0;
    1df4:	3b01      	subs	r3, #1
    1df6:	54ec      	strb	r4, [r5, r3]
	hasAttachedRxEvent = 0;
    1df8:	4b12      	ldr	r3, [pc, #72]	; (1e44 <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_+0xf0>)
    1dfa:	54ec      	strb	r4, [r5, r3]
	lastLqi = 0;
    1dfc:	4b12      	ldr	r3, [pc, #72]	; (1e48 <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_+0xf4>)
    1dfe:	54ec      	strb	r4, [r5, r3]
	lastRssi = 0;
    1e00:	4b12      	ldr	r3, [pc, #72]	; (1e4c <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_+0xf8>)
    1e02:	54ec      	strb	r4, [r5, r3]
	txTmpBufferLength = 0;
    1e04:	3b02      	subs	r3, #2
    1e06:	54ec      	strb	r4, [r5, r3]
	rxRingBufferHead = 0;
    1e08:	23fc      	movs	r3, #252	; 0xfc
    1e0a:	33ff      	adds	r3, #255	; 0xff
    1e0c:	54ec      	strb	r4, [r5, r3]
	rxRingBufferTail = 0;
    1e0e:	3301      	adds	r3, #1
    1e10:	54ec      	strb	r4, [r5, r3]
	user_radio_tx_done=0;
	user_radio_receive_frame=0;
	user_radio_irq=0;
	user_radio_error=0;
	*/
	zr_attach_receive_frame(&cMxRadio::onReceiveFrame);
    1e12:	1c28      	adds	r0, r5, #0
    1e14:	490e      	ldr	r1, [pc, #56]	; (1e50 <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_+0xfc>)
    1e16:	2200      	movs	r2, #0
    1e18:	4b0e      	ldr	r3, [pc, #56]	; (1e54 <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_+0x100>)
    1e1a:	4798      	blx	r3
	zr_attach_tx_done(&cMxRadio::onTxDone);
    1e1c:	1c28      	adds	r0, r5, #0
    1e1e:	490e      	ldr	r1, [pc, #56]	; (1e58 <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_+0x104>)
    1e20:	2200      	movs	r2, #0
    1e22:	4b0e      	ldr	r3, [pc, #56]	; (1e5c <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_+0x108>)
    1e24:	4798      	blx	r3

}
    1e26:	1c28      	adds	r0, r5, #0
    1e28:	b006      	add	sp, #24
    1e2a:	bc04      	pop	{r2}
    1e2c:	4690      	mov	r8, r2
    1e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e30:	00004a51 	.word	0x00004a51
    1e34:	00004e5d 	.word	0x00004e5d
    1e38:	0000028d 	.word	0x0000028d
    1e3c:	0000028e 	.word	0x0000028e
    1e40:	00000281 	.word	0x00000281
    1e44:	0000027f 	.word	0x0000027f
    1e48:	0000027d 	.word	0x0000027d
    1e4c:	0000027e 	.word	0x0000027e
    1e50:	00001c21 	.word	0x00001c21
    1e54:	000021a5 	.word	0x000021a5
    1e58:	00001d2d 	.word	0x00001d2d
    1e5c:	000021bd 	.word	0x000021bd

00001e60 <_ZN8cMxRadio5beginEaPh>:
 *
 * @param chan channel number for the radio to use, 11 to 26
 * @param frameHeader HeadSize byte custom frame header
 */
void cMxRadio::begin(channel_t chan, uint8_t* frameHeader)
{
    1e60:	b570      	push	{r4, r5, r6, lr}
    1e62:	1c06      	adds	r6, r0, #0
    1e64:	1c0d      	adds	r5, r1, #0
    1e66:	1c14      	adds	r4, r2, #0
	radio_init(rxFrameBuffer, MAX_FRAME_SIZE);
    1e68:	1c01      	adds	r1, r0, #0
    1e6a:	31fc      	adds	r1, #252	; 0xfc
    1e6c:	227f      	movs	r2, #127	; 0x7f
    1e6e:	4b20      	ldr	r3, [pc, #128]	; (1ef0 <_ZN8cMxRadio5beginEaPh+0x90>)
    1e70:	4798      	blx	r3

	if (frameHeader)
    1e72:	2c00      	cmp	r4, #0
    1e74:	d00c      	beq.n	1e90 <_ZN8cMxRadio5beginEaPh+0x30>
    1e76:	1c22      	adds	r2, r4, #0
    1e78:	1c33      	adds	r3, r6, #0
    1e7a:	33fe      	adds	r3, #254	; 0xfe
    1e7c:	33ff      	adds	r3, #255	; 0xff
    1e7e:	491d      	ldr	r1, [pc, #116]	; (1ef4 <_ZN8cMxRadio5beginEaPh+0x94>)
    1e80:	1870      	adds	r0, r6, r1
	{
		// copy custom frame header
		int i;
		for (i = 0; i < HeadSize; i++)
			txTmpBuffer[i] = frameHeader[i];
    1e82:	7811      	ldrb	r1, [r2, #0]
    1e84:	7019      	strb	r1, [r3, #0]
    1e86:	3201      	adds	r2, #1
    1e88:	3301      	adds	r3, #1

	if (frameHeader)
	{
		// copy custom frame header
		int i;
		for (i = 0; i < HeadSize; i++)
    1e8a:	4283      	cmp	r3, r0
    1e8c:	d1f9      	bne.n	1e82 <_ZN8cMxRadio5beginEaPh+0x22>
    1e8e:	e01b      	b.n	1ec8 <_ZN8cMxRadio5beginEaPh+0x68>
			txTmpBuffer[i] = frameHeader[i];
	}
	else
	{
		txTmpBuffer[0] = 0x41;
    1e90:	2241      	movs	r2, #65	; 0x41
    1e92:	23fe      	movs	r3, #254	; 0xfe
    1e94:	33ff      	adds	r3, #255	; 0xff
    1e96:	54f2      	strb	r2, [r6, r3]
		txTmpBuffer[1] = 0x88;
    1e98:	3247      	adds	r2, #71	; 0x47
    1e9a:	3301      	adds	r3, #1
    1e9c:	54f2      	strb	r2, [r6, r3]
		txTmpBuffer[2] =  0;
    1e9e:	2300      	movs	r3, #0
    1ea0:	4a15      	ldr	r2, [pc, #84]	; (1ef8 <_ZN8cMxRadio5beginEaPh+0x98>)
    1ea2:	54b3      	strb	r3, [r6, r2]
		txTmpBuffer[3]=0xCD;
    1ea4:	21cd      	movs	r1, #205	; 0xcd
    1ea6:	3201      	adds	r2, #1
    1ea8:	54b1      	strb	r1, [r6, r2]
		txTmpBuffer[4]=0xAB;
    1eaa:	3922      	subs	r1, #34	; 0x22
    1eac:	4a13      	ldr	r2, [pc, #76]	; (1efc <_ZN8cMxRadio5beginEaPh+0x9c>)
    1eae:	54b1      	strb	r1, [r6, r2]
		txTmpBuffer[5] = 0xFF; //dest address low byte
    1eb0:	3a03      	subs	r2, #3
    1eb2:	3aff      	subs	r2, #255	; 0xff
    1eb4:	4912      	ldr	r1, [pc, #72]	; (1f00 <_ZN8cMxRadio5beginEaPh+0xa0>)
    1eb6:	5472      	strb	r2, [r6, r1]
		txTmpBuffer[6] = 0xFF; //dest address hight byte
    1eb8:	4912      	ldr	r1, [pc, #72]	; (1f04 <_ZN8cMxRadio5beginEaPh+0xa4>)
    1eba:	5472      	strb	r2, [r6, r1]
		txTmpBuffer[7] = 0x01;;
    1ebc:	2101      	movs	r1, #1
    1ebe:	3206      	adds	r2, #6
    1ec0:	32ff      	adds	r2, #255	; 0xff
    1ec2:	54b1      	strb	r1, [r6, r2]
		txTmpBuffer[8] = 0x00;;
    1ec4:	4a10      	ldr	r2, [pc, #64]	; (1f08 <_ZN8cMxRadio5beginEaPh+0xa8>)
    1ec6:	54b3      	strb	r3, [r6, r2]
 */
typedef union radio_param_t
{
#if defined __cplusplus
public:
    radio_param_t(int8_t c) { channel = c; } /* also used for txpwr_t */
    1ec8:	b2ea      	uxtb	r2, r5
	}

	// set the channel
	radio_set_param(RP_CHANNEL(chan));
    1eca:	1c30      	adds	r0, r6, #0
    1ecc:	2100      	movs	r1, #0
    1ece:	4b0f      	ldr	r3, [pc, #60]	; (1f0c <_ZN8cMxRadio5beginEaPh+0xac>)
    1ed0:	4798      	blx	r3

	// default to receiver
	if (setautorx)
    1ed2:	4b0f      	ldr	r3, [pc, #60]	; (1f10 <_ZN8cMxRadio5beginEaPh+0xb0>)
    1ed4:	5cf3      	ldrb	r3, [r6, r3]
    1ed6:	2b00      	cmp	r3, #0
    1ed8:	d004      	beq.n	1ee4 <_ZN8cMxRadio5beginEaPh+0x84>
		radio_set_state(STATE_RXAUTO);
    1eda:	1c30      	adds	r0, r6, #0
    1edc:	2104      	movs	r1, #4
    1ede:	4b0d      	ldr	r3, [pc, #52]	; (1f14 <_ZN8cMxRadio5beginEaPh+0xb4>)
    1ee0:	4798      	blx	r3
    1ee2:	e003      	b.n	1eec <_ZN8cMxRadio5beginEaPh+0x8c>
	else
		radio_set_state(STATE_RX);
    1ee4:	1c30      	adds	r0, r6, #0
    1ee6:	2102      	movs	r1, #2
    1ee8:	4b0a      	ldr	r3, [pc, #40]	; (1f14 <_ZN8cMxRadio5beginEaPh+0xb4>)
    1eea:	4798      	blx	r3

#ifdef ENABLE_DIG3_DIG4
	trx_bit_write(SR_PA_EXT_EN, 1);
#endif

}
    1eec:	bd70      	pop	{r4, r5, r6, pc}
    1eee:	46c0      	nop			; (mov r8, r8)
    1ef0:	000022d9 	.word	0x000022d9
    1ef4:	00000206 	.word	0x00000206
    1ef8:	000001ff 	.word	0x000001ff
    1efc:	00000201 	.word	0x00000201
    1f00:	00000202 	.word	0x00000202
    1f04:	00000203 	.word	0x00000203
    1f08:	00000205 	.word	0x00000205
    1f0c:	00002619 	.word	0x00002619
    1f10:	0000028d 	.word	0x0000028d
    1f14:	000023c9 	.word	0x000023c9

00001f18 <_ZN8cMxRadio5beginEa>:
 * Then it sets the channel number and defaults to RX state.
 *
 * @param chan the channel number for the radio to use, 11 to 26
 */
void cMxRadio::begin(channel_t chan)
{
    1f18:	b508      	push	{r3, lr}
	begin(chan, 0);
    1f1a:	2200      	movs	r2, #0
    1f1c:	4b01      	ldr	r3, [pc, #4]	; (1f24 <_ZN8cMxRadio5beginEa+0xc>)
    1f1e:	4798      	blx	r3
}
    1f20:	bd08      	pop	{r3, pc}
    1f22:	46c0      	nop			; (mov r8, r8)
    1f24:	00001e61 	.word	0x00001e61

00001f28 <_ZN8cMxRadio9attachIrqEPFvhE>:
 *
 * @param funct the function pointer to the event handler
 */
void cMxRadio::attachIrq(void (*funct)(uint8_t))
{
	user_radio_irq = funct;
    1f28:	23a5      	movs	r3, #165	; 0xa5
    1f2a:	009b      	lsls	r3, r3, #2
    1f2c:	50c1      	str	r1, [r0, r3]
}
    1f2e:	4770      	bx	lr

00001f30 <_ZN8cMxRadio5flushEv>:
 *
 * Flush the RX FIFO ring buffer
 */
void cMxRadio::flush()
{
	rxRingBufferHead = rxRingBufferTail;
    1f30:	23fe      	movs	r3, #254	; 0xfe
    1f32:	005b      	lsls	r3, r3, #1
    1f34:	5cc2      	ldrb	r2, [r0, r3]
    1f36:	23fc      	movs	r3, #252	; 0xfc
    1f38:	33ff      	adds	r3, #255	; 0xff
    1f3a:	54c2      	strb	r2, [r0, r3]
}
    1f3c:	4770      	bx	lr
    1f3e:	46c0      	nop			; (mov r8, r8)

00001f40 <_ZN8cMxRadio4readEv>:
 * @return the next byte, or -1 if buffer is empty
 */
int16_t cMxRadio::read()
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (rxRingBufferHead == rxRingBufferTail)
    1f40:	23fe      	movs	r3, #254	; 0xfe
    1f42:	005b      	lsls	r3, r3, #1
    1f44:	5cc3      	ldrb	r3, [r0, r3]
    1f46:	22fc      	movs	r2, #252	; 0xfc
    1f48:	32ff      	adds	r2, #255	; 0xff
    1f4a:	5c82      	ldrb	r2, [r0, r2]
    1f4c:	429a      	cmp	r2, r3
    1f4e:	d00b      	beq.n	1f68 <_ZN8cMxRadio4readEv+0x28>
	{
		return -1;
	}
	else
	{
		uint8_t c = rxRingBuffer[rxRingBufferTail];
    1f50:	18c2      	adds	r2, r0, r3
    1f52:	3279      	adds	r2, #121	; 0x79
    1f54:	32ff      	adds	r2, #255	; 0xff
    1f56:	78d2      	ldrb	r2, [r2, #3]
		rxRingBufferTail = (rxRingBufferTail + 1) % ZR_FIFO_SIZE; // pop
    1f58:	3301      	adds	r3, #1
    1f5a:	217f      	movs	r1, #127	; 0x7f
    1f5c:	400b      	ands	r3, r1
    1f5e:	317e      	adds	r1, #126	; 0x7e
    1f60:	31ff      	adds	r1, #255	; 0xff
    1f62:	5443      	strb	r3, [r0, r1]
		return c;
    1f64:	b290      	uxth	r0, r2
    1f66:	e000      	b.n	1f6a <_ZN8cMxRadio4readEv+0x2a>
int16_t cMxRadio::read()
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (rxRingBufferHead == rxRingBufferTail)
	{
		return -1;
    1f68:	4801      	ldr	r0, [pc, #4]	; (1f70 <_ZN8cMxRadio4readEv+0x30>)
    1f6a:	b200      	sxth	r0, r0
	{
		uint8_t c = rxRingBuffer[rxRingBufferTail];
		rxRingBufferTail = (rxRingBufferTail + 1) % ZR_FIFO_SIZE; // pop
		return c;
	}
}
    1f6c:	4770      	bx	lr
    1f6e:	46c0      	nop			; (mov r8, r8)
    1f70:	0000ffff 	.word	0x0000ffff

00001f74 <_ZN8cMxRadio9availableEv>:
 *
 * @return how many bytes are in the RX FIFO ring buffer
 */
int8_t cMxRadio::available()
{
	return ((int16_t)((int16_t)ZR_FIFO_SIZE + (int16_t)rxRingBufferHead - (int16_t)rxRingBufferTail)) % ZR_FIFO_SIZE;
    1f74:	23fc      	movs	r3, #252	; 0xfc
    1f76:	33ff      	adds	r3, #255	; 0xff
    1f78:	5cc3      	ldrb	r3, [r0, r3]
    1f7a:	3380      	adds	r3, #128	; 0x80
    1f7c:	22fe      	movs	r2, #254	; 0xfe
    1f7e:	0052      	lsls	r2, r2, #1
    1f80:	5c80      	ldrb	r0, [r0, r2]
    1f82:	1a1b      	subs	r3, r3, r0
    1f84:	17d8      	asrs	r0, r3, #31
    1f86:	0e42      	lsrs	r2, r0, #25
    1f88:	189b      	adds	r3, r3, r2
    1f8a:	207f      	movs	r0, #127	; 0x7f
    1f8c:	4003      	ands	r3, r0
    1f8e:	1a98      	subs	r0, r3, r2
    1f90:	b240      	sxtb	r0, r0
}
    1f92:	4770      	bx	lr

00001f94 <_ZN8cMxRadio17beginTransmissionEv>:
 * Non-immediate mode sends multiple bytes per frame
 *
 */
void cMxRadio::beginTransmission()
{
	usedBeginTransmission = 1;
    1f94:	2201      	movs	r2, #1
    1f96:	4b07      	ldr	r3, [pc, #28]	; (1fb4 <_ZN8cMxRadio17beginTransmissionEv+0x20>)
    1f98:	54c2      	strb	r2, [r0, r3]
	txTmpBuffer[5]= 0xFF;
    1f9a:	3b83      	subs	r3, #131	; 0x83
    1f9c:	3bff      	subs	r3, #255	; 0xff
    1f9e:	4a06      	ldr	r2, [pc, #24]	; (1fb8 <_ZN8cMxRadio17beginTransmissionEv+0x24>)
    1fa0:	5483      	strb	r3, [r0, r2]
	txTmpBuffer[6]= 0XFF;
    1fa2:	4a06      	ldr	r2, [pc, #24]	; (1fbc <_ZN8cMxRadio17beginTransmissionEv+0x28>)
    1fa4:	5483      	strb	r3, [r0, r2]
	// add frame header
	txTmpBufferLength = HeadSize;
    1fa6:	3afb      	subs	r2, #251	; 0xfb
    1fa8:	3aff      	subs	r2, #255	; 0xff
    1faa:	337e      	adds	r3, #126	; 0x7e
    1fac:	33ff      	adds	r3, #255	; 0xff
    1fae:	54c2      	strb	r2, [r0, r3]
}
    1fb0:	4770      	bx	lr
    1fb2:	46c0      	nop			; (mov r8, r8)
    1fb4:	00000281 	.word	0x00000281
    1fb8:	00000202 	.word	0x00000202
    1fbc:	00000203 	.word	0x00000203

00001fc0 <_ZN8cMxRadio10waitTxDoneEt>:
 * waits until the last transmission is complete, or timed out
 *
 * @param timeout iterations to countdown before timeout
 */
void cMxRadio::waitTxDone(uint16_t timeout)
{
    1fc0:	b510      	push	{r4, lr}
    1fc2:	b082      	sub	sp, #8
	volatile uint16_t cnt = timeout;
    1fc4:	466b      	mov	r3, sp
    1fc6:	80d9      	strh	r1, [r3, #6]
	while (txIsBusy && cnt--);
    1fc8:	4c07      	ldr	r4, [pc, #28]	; (1fe8 <_ZN8cMxRadio10waitTxDoneEt+0x28>)
    1fca:	466b      	mov	r3, sp
    1fcc:	1d99      	adds	r1, r3, #6
    1fce:	5d03      	ldrb	r3, [r0, r4]
    1fd0:	2b00      	cmp	r3, #0
    1fd2:	d006      	beq.n	1fe2 <_ZN8cMxRadio10waitTxDoneEt+0x22>
    1fd4:	880b      	ldrh	r3, [r1, #0]
    1fd6:	b29b      	uxth	r3, r3
    1fd8:	1e5a      	subs	r2, r3, #1
    1fda:	b292      	uxth	r2, r2
    1fdc:	800a      	strh	r2, [r1, #0]
    1fde:	2b00      	cmp	r3, #0
    1fe0:	d1f5      	bne.n	1fce <_ZN8cMxRadio10waitTxDoneEt+0xe>
}
    1fe2:	b002      	add	sp, #8
    1fe4:	bd10      	pop	{r4, pc}
    1fe6:	46c0      	nop			; (mov r8, r8)
    1fe8:	00000282 	.word	0x00000282

00001fec <_ZN8cMxRadio15endTransmissionEv>:
 *
 * Finalize the payload and transmits it when ready
 *
 */
void cMxRadio::endTransmission()
{
    1fec:	b538      	push	{r3, r4, r5, lr}
    1fee:	1c04      	adds	r4, r0, #0
	usedBeginTransmission = 0;
    1ff0:	2200      	movs	r2, #0
    1ff2:	4b28      	ldr	r3, [pc, #160]	; (2094 <STACK_SIZE+0x94>)
    1ff4:	54c2      	strb	r2, [r0, r3]

	// empty FCS field
	txTmpBufferLength += 2;
    1ff6:	229f      	movs	r2, #159	; 0x9f
    1ff8:	0092      	lsls	r2, r2, #2
    1ffa:	5c83      	ldrb	r3, [r0, r2]
    1ffc:	3302      	adds	r3, #2
    1ffe:	5483      	strb	r3, [r0, r2]

#ifdef ZR_TXWAIT_BEFORE
	waitTxDone(0xFFFF);
    2000:	4925      	ldr	r1, [pc, #148]	; (2098 <STACK_SIZE+0x98>)
    2002:	4b26      	ldr	r3, [pc, #152]	; (209c <STACK_SIZE+0x9c>)
    2004:	4798      	blx	r3
#endif
	txIsBusy = 1;
    2006:	2201      	movs	r2, #1
    2008:	4b25      	ldr	r3, [pc, #148]	; (20a0 <STACK_SIZE+0xa0>)
    200a:	54e2      	strb	r2, [r4, r3]
	if (setautotx)
    200c:	330a      	adds	r3, #10
    200e:	5ce3      	ldrb	r3, [r4, r3]
    2010:	2b00      	cmp	r3, #0
    2012:	d004      	beq.n	201e <STACK_SIZE+0x1e>
		radio_set_state(STATE_TXAUTO);
    2014:	1c20      	adds	r0, r4, #0
    2016:	2103      	movs	r1, #3
    2018:	4b22      	ldr	r3, [pc, #136]	; (20a4 <STACK_SIZE+0xa4>)
    201a:	4798      	blx	r3
    201c:	e003      	b.n	2026 <STACK_SIZE+0x26>
	else
		radio_set_state(STATE_TX);
    201e:	1c20      	adds	r0, r4, #0
    2020:	2101      	movs	r1, #1
    2022:	4b20      	ldr	r3, [pc, #128]	; (20a4 <STACK_SIZE+0xa4>)
    2024:	4798      	blx	r3
	ZR_RFTX_LED_ON();
	//if broadcase ,cant need ack
	if(txTmpBuffer[5]==0xff && txTmpBuffer[5]==0xff)
    2026:	4b20      	ldr	r3, [pc, #128]	; (20a8 <STACK_SIZE+0xa8>)
    2028:	5ce3      	ldrb	r3, [r4, r3]
    202a:	2bff      	cmp	r3, #255	; 0xff
    202c:	d106      	bne.n	203c <STACK_SIZE+0x3c>
		txTmpBuffer[0]=txTmpBuffer[0]&0xdf;
    202e:	22fe      	movs	r2, #254	; 0xfe
    2030:	32ff      	adds	r2, #255	; 0xff
    2032:	5ca3      	ldrb	r3, [r4, r2]
    2034:	2120      	movs	r1, #32
    2036:	438b      	bics	r3, r1
    2038:	54a3      	strb	r3, [r4, r2]
    203a:	e00c      	b.n	2056 <STACK_SIZE+0x56>
	else
	{
		if(!needack)
    203c:	4b1b      	ldr	r3, [pc, #108]	; (20ac <STACK_SIZE+0xac>)
    203e:	5ce3      	ldrb	r3, [r4, r3]
    2040:	2b00      	cmp	r3, #0
    2042:	d104      	bne.n	204e <STACK_SIZE+0x4e>
			txTmpBuffer[0] = 0x41;
    2044:	2241      	movs	r2, #65	; 0x41
    2046:	23fe      	movs	r3, #254	; 0xfe
    2048:	33ff      	adds	r3, #255	; 0xff
    204a:	54e2      	strb	r2, [r4, r3]
    204c:	e003      	b.n	2056 <STACK_SIZE+0x56>
		else
			txTmpBuffer[0] = 0x61; //ack required
    204e:	2261      	movs	r2, #97	; 0x61
    2050:	23fe      	movs	r3, #254	; 0xfe
    2052:	33ff      	adds	r3, #255	; 0xff
    2054:	54e2      	strb	r2, [r4, r3]
	}
	radio_send_frame(txTmpBufferLength, txTmpBuffer, 0);
    2056:	239f      	movs	r3, #159	; 0x9f
    2058:	009b      	lsls	r3, r3, #2
    205a:	5ce1      	ldrb	r1, [r4, r3]
    205c:	1c20      	adds	r0, r4, #0
    205e:	1c22      	adds	r2, r4, #0
    2060:	32fe      	adds	r2, #254	; 0xfe
    2062:	32ff      	adds	r2, #255	; 0xff
    2064:	2300      	movs	r3, #0
    2066:	4d12      	ldr	r5, [pc, #72]	; (20b0 <STACK_SIZE+0xb0>)
    2068:	47a8      	blx	r5
#ifdef ZR_TXWAIT_AFTER
	waitTxDone(0xFFFF);
    206a:	1c20      	adds	r0, r4, #0
    206c:	490a      	ldr	r1, [pc, #40]	; (2098 <STACK_SIZE+0x98>)
    206e:	4b0b      	ldr	r3, [pc, #44]	; (209c <STACK_SIZE+0x9c>)
    2070:	4798      	blx	r3
	if (setautorx)
    2072:	4b10      	ldr	r3, [pc, #64]	; (20b4 <STACK_SIZE+0xb4>)
    2074:	5ce3      	ldrb	r3, [r4, r3]
    2076:	2b00      	cmp	r3, #0
    2078:	d004      	beq.n	2084 <STACK_SIZE+0x84>
		radio_set_state(STATE_RXAUTO);
    207a:	1c20      	adds	r0, r4, #0
    207c:	2104      	movs	r1, #4
    207e:	4b09      	ldr	r3, [pc, #36]	; (20a4 <STACK_SIZE+0xa4>)
    2080:	4798      	blx	r3
    2082:	e003      	b.n	208c <STACK_SIZE+0x8c>
	else
		radio_set_state(STATE_RX);
    2084:	1c20      	adds	r0, r4, #0
    2086:	2102      	movs	r1, #2
    2088:	4b06      	ldr	r3, [pc, #24]	; (20a4 <STACK_SIZE+0xa4>)
    208a:	4798      	blx	r3
	txIsBusy = 0;
    208c:	2200      	movs	r2, #0
    208e:	4b04      	ldr	r3, [pc, #16]	; (20a0 <STACK_SIZE+0xa0>)
    2090:	54e2      	strb	r2, [r4, r3]
#endif
}
    2092:	bd38      	pop	{r3, r4, r5, pc}
    2094:	00000281 	.word	0x00000281
    2098:	0000ffff 	.word	0x0000ffff
    209c:	00001fc1 	.word	0x00001fc1
    20a0:	00000282 	.word	0x00000282
    20a4:	000023c9 	.word	0x000023c9
    20a8:	00000202 	.word	0x00000202
    20ac:	0000028e 	.word	0x0000028e
    20b0:	0000271d 	.word	0x0000271d
    20b4:	0000028d 	.word	0x0000028d

000020b8 <_ZN8cMxRadio5writeEh>:
 * If "beginTrasmission" was not used, then it transmits the single byte immediately (slower for multiple bytes)
 *
 * @param c character to be sent
 */
void cMxRadio::write(uint8_t c)
{
    20b8:	b538      	push	{r3, r4, r5, lr}
    20ba:	1c04      	adds	r4, r0, #0
	if (usedBeginTransmission)
    20bc:	4b2d      	ldr	r3, [pc, #180]	; (2174 <_ZN8cMxRadio5writeEh+0xbc>)
    20be:	5cc3      	ldrb	r3, [r0, r3]
    20c0:	2b00      	cmp	r3, #0
    20c2:	d020      	beq.n	2106 <_ZN8cMxRadio5writeEh+0x4e>
	{
		if (txTmpBufferLength < ZR_TXTMPBUFF_SIZE - 2)
    20c4:	239f      	movs	r3, #159	; 0x9f
    20c6:	009b      	lsls	r3, r3, #2
    20c8:	5cc3      	ldrb	r3, [r0, r3]
    20ca:	2b7c      	cmp	r3, #124	; 0x7c
    20cc:	d851      	bhi.n	2172 <_ZN8cMxRadio5writeEh+0xba>
		{
			txTmpBuffer[txTmpBufferLength] = c;
    20ce:	18c2      	adds	r2, r0, r3
    20d0:	32f9      	adds	r2, #249	; 0xf9
    20d2:	32ff      	adds	r2, #255	; 0xff
    20d4:	7151      	strb	r1, [r2, #5]
			txTmpBufferLength++;
    20d6:	3301      	adds	r3, #1
    20d8:	b2db      	uxtb	r3, r3
    20da:	229f      	movs	r2, #159	; 0x9f
    20dc:	0092      	lsls	r2, r2, #2
    20de:	5483      	strb	r3, [r0, r2]

			if (txTmpBufferLength >= ZR_TXTMPBUFF_SIZE - 2)
    20e0:	2b7c      	cmp	r3, #124	; 0x7c
    20e2:	d946      	bls.n	2172 <_ZN8cMxRadio5writeEh+0xba>
			{
				// buffer is now full
				// just send it all out so we have more room
				endTransmission();
    20e4:	4b24      	ldr	r3, [pc, #144]	; (2178 <_ZN8cMxRadio5writeEh+0xc0>)
    20e6:	4798      	blx	r3
 * Non-immediate mode sends multiple bytes per frame
 *
 */
void cMxRadio::beginTransmission()
{
	usedBeginTransmission = 1;
    20e8:	2201      	movs	r2, #1
    20ea:	4b22      	ldr	r3, [pc, #136]	; (2174 <_ZN8cMxRadio5writeEh+0xbc>)
    20ec:	54e2      	strb	r2, [r4, r3]
	txTmpBuffer[5]= 0xFF;
    20ee:	3b83      	subs	r3, #131	; 0x83
    20f0:	3bff      	subs	r3, #255	; 0xff
    20f2:	4a22      	ldr	r2, [pc, #136]	; (217c <_ZN8cMxRadio5writeEh+0xc4>)
    20f4:	54a3      	strb	r3, [r4, r2]
	txTmpBuffer[6]= 0XFF;
    20f6:	4a22      	ldr	r2, [pc, #136]	; (2180 <_ZN8cMxRadio5writeEh+0xc8>)
    20f8:	54a3      	strb	r3, [r4, r2]
	// add frame header
	txTmpBufferLength = HeadSize;
    20fa:	3afb      	subs	r2, #251	; 0xfb
    20fc:	3aff      	subs	r2, #255	; 0xff
    20fe:	337e      	adds	r3, #126	; 0x7e
    2100:	33ff      	adds	r3, #255	; 0xff
    2102:	54e2      	strb	r2, [r4, r3]
    2104:	e035      	b.n	2172 <_ZN8cMxRadio5writeEh+0xba>
			}
		}
	}
	else
	{
		txTmpBuffer[HeadSize] = c; // set payload
    2106:	4b1f      	ldr	r3, [pc, #124]	; (2184 <_ZN8cMxRadio5writeEh+0xcc>)
    2108:	54c1      	strb	r1, [r0, r3]
		txTmpBuffer[HeadSize+1] = 0; // empty FCS
    210a:	2300      	movs	r3, #0
    210c:	4a1e      	ldr	r2, [pc, #120]	; (2188 <_ZN8cMxRadio5writeEh+0xd0>)
    210e:	5483      	strb	r3, [r0, r2]
		txTmpBuffer[HeadSize+2] = 0; // empty FCS
    2110:	3201      	adds	r2, #1
    2112:	5483      	strb	r3, [r0, r2]

#ifdef ZR_TXWAIT_BEFORE
		waitTxDone(0xFFFF);
    2114:	491d      	ldr	r1, [pc, #116]	; (218c <_ZN8cMxRadio5writeEh+0xd4>)
    2116:	4b1e      	ldr	r3, [pc, #120]	; (2190 <_ZN8cMxRadio5writeEh+0xd8>)
    2118:	4798      	blx	r3
#endif
		txIsBusy = 1;
    211a:	2201      	movs	r2, #1
    211c:	4b1d      	ldr	r3, [pc, #116]	; (2194 <_ZN8cMxRadio5writeEh+0xdc>)
    211e:	54e2      	strb	r2, [r4, r3]
		if (setautotx)
    2120:	330a      	adds	r3, #10
    2122:	5ce3      	ldrb	r3, [r4, r3]
    2124:	2b00      	cmp	r3, #0
    2126:	d004      	beq.n	2132 <_ZN8cMxRadio5writeEh+0x7a>
			radio_set_state(STATE_TXAUTO);
    2128:	1c20      	adds	r0, r4, #0
    212a:	2103      	movs	r1, #3
    212c:	4b1a      	ldr	r3, [pc, #104]	; (2198 <_ZN8cMxRadio5writeEh+0xe0>)
    212e:	4798      	blx	r3
    2130:	e003      	b.n	213a <_ZN8cMxRadio5writeEh+0x82>
		else
			radio_set_state(STATE_TX);
    2132:	1c20      	adds	r0, r4, #0
    2134:	2101      	movs	r1, #1
    2136:	4b18      	ldr	r3, [pc, #96]	; (2198 <_ZN8cMxRadio5writeEh+0xe0>)
    2138:	4798      	blx	r3
		ZR_RFTX_LED_ON();
		radio_send_frame(10, txTmpBuffer, 0);
    213a:	1c20      	adds	r0, r4, #0
    213c:	210a      	movs	r1, #10
    213e:	1c22      	adds	r2, r4, #0
    2140:	32fe      	adds	r2, #254	; 0xfe
    2142:	32ff      	adds	r2, #255	; 0xff
    2144:	2300      	movs	r3, #0
    2146:	4d15      	ldr	r5, [pc, #84]	; (219c <_ZN8cMxRadio5writeEh+0xe4>)
    2148:	47a8      	blx	r5
#ifdef ZR_TXWAIT_AFTER
		waitTxDone(0xFFFF);
    214a:	1c20      	adds	r0, r4, #0
    214c:	490f      	ldr	r1, [pc, #60]	; (218c <_ZN8cMxRadio5writeEh+0xd4>)
    214e:	4b10      	ldr	r3, [pc, #64]	; (2190 <_ZN8cMxRadio5writeEh+0xd8>)
    2150:	4798      	blx	r3
		if (setautorx)
    2152:	4b13      	ldr	r3, [pc, #76]	; (21a0 <_ZN8cMxRadio5writeEh+0xe8>)
    2154:	5ce3      	ldrb	r3, [r4, r3]
    2156:	2b00      	cmp	r3, #0
    2158:	d004      	beq.n	2164 <_ZN8cMxRadio5writeEh+0xac>
			radio_set_state(STATE_RXAUTO);
    215a:	1c20      	adds	r0, r4, #0
    215c:	2104      	movs	r1, #4
    215e:	4b0e      	ldr	r3, [pc, #56]	; (2198 <_ZN8cMxRadio5writeEh+0xe0>)
    2160:	4798      	blx	r3
    2162:	e003      	b.n	216c <_ZN8cMxRadio5writeEh+0xb4>
		else
			radio_set_state(STATE_RX);
    2164:	1c20      	adds	r0, r4, #0
    2166:	2102      	movs	r1, #2
    2168:	4b0b      	ldr	r3, [pc, #44]	; (2198 <_ZN8cMxRadio5writeEh+0xe0>)
    216a:	4798      	blx	r3
		txIsBusy = 0;
    216c:	2200      	movs	r2, #0
    216e:	4b09      	ldr	r3, [pc, #36]	; (2194 <_ZN8cMxRadio5writeEh+0xdc>)
    2170:	54e2      	strb	r2, [r4, r3]
#endif
	}
}
    2172:	bd38      	pop	{r3, r4, r5, pc}
    2174:	00000281 	.word	0x00000281
    2178:	00001fed 	.word	0x00001fed
    217c:	00000202 	.word	0x00000202
    2180:	00000203 	.word	0x00000203
    2184:	00000206 	.word	0x00000206
    2188:	00000207 	.word	0x00000207
    218c:	0000ffff 	.word	0x0000ffff
    2190:	00001fc1 	.word	0x00001fc1
    2194:	00000282 	.word	0x00000282
    2198:	000023c9 	.word	0x000023c9
    219c:	0000271d 	.word	0x0000271d
    21a0:	0000028d 	.word	0x0000028d

000021a4 <_ZN8cMxRadio23zr_attach_receive_frameEMS_FPhhS0_hahE>:
{
	user_radio_irq = funct;
}

void cMxRadio::zr_attach_receive_frame(uint8_t* (cMxRadio::*funct)(uint8_t, uint8_t*, uint8_t, int8_t, uint8_t))
{
    21a4:	b082      	sub	sp, #8
    21a6:	466b      	mov	r3, sp
    21a8:	9100      	str	r1, [sp, #0]
    21aa:	9201      	str	r2, [sp, #4]
	user_radio_receive_frame = funct;
    21ac:	22a6      	movs	r2, #166	; 0xa6
    21ae:	0092      	lsls	r2, r2, #2
    21b0:	4694      	mov	ip, r2
    21b2:	4460      	add	r0, ip
    21b4:	cb06      	ldmia	r3!, {r1, r2}
    21b6:	c006      	stmia	r0!, {r1, r2}
}
    21b8:	b002      	add	sp, #8
    21ba:	4770      	bx	lr

000021bc <_ZN8cMxRadio17zr_attach_tx_doneEMS_Fv15radio_tx_done_tE>:

void cMxRadio::zr_attach_tx_done(void (cMxRadio::*funct)(radio_tx_done_t))
{
    21bc:	b082      	sub	sp, #8
    21be:	466b      	mov	r3, sp
    21c0:	9100      	str	r1, [sp, #0]
    21c2:	9201      	str	r2, [sp, #4]
	user_radio_tx_done = funct;
    21c4:	22a8      	movs	r2, #168	; 0xa8
    21c6:	0092      	lsls	r2, r2, #2
    21c8:	4694      	mov	ip, r2
    21ca:	4460      	add	r0, ip
    21cc:	cb06      	ldmia	r3!, {r1, r2}
    21ce:	c006      	stmia	r0!, {r1, r2}
}
    21d0:	b002      	add	sp, #8
    21d2:	4770      	bx	lr

000021d4 <_ZN8cMxRadio15usr_radio_errorE13radio_error_t>:
void cMxRadio::usr_radio_error(radio_error_t err)
{
    21d4:	b508      	push	{r3, lr}
	if (user_radio_error) user_radio_error(err);
    21d6:	23a4      	movs	r3, #164	; 0xa4
    21d8:	009b      	lsls	r3, r3, #2
    21da:	58c3      	ldr	r3, [r0, r3]
    21dc:	2b00      	cmp	r3, #0
    21de:	d001      	beq.n	21e4 <_ZN8cMxRadio15usr_radio_errorE13radio_error_t+0x10>
    21e0:	1c08      	adds	r0, r1, #0
    21e2:	4798      	blx	r3
}
    21e4:	bd08      	pop	{r3, pc}
    21e6:	46c0      	nop			; (mov r8, r8)

000021e8 <_ZN8cMxRadio13usr_radio_irqEh>:

void cMxRadio::usr_radio_irq(uint8_t cause)
{
    21e8:	b508      	push	{r3, lr}
	if (user_radio_irq) user_radio_irq(cause);
    21ea:	23a5      	movs	r3, #165	; 0xa5
    21ec:	009b      	lsls	r3, r3, #2
    21ee:	58c3      	ldr	r3, [r0, r3]
    21f0:	2b00      	cmp	r3, #0
    21f2:	d001      	beq.n	21f8 <_ZN8cMxRadio13usr_radio_irqEh+0x10>
    21f4:	1c08      	adds	r0, r1, #0
    21f6:	4798      	blx	r3
}
    21f8:	bd08      	pop	{r3, pc}
    21fa:	46c0      	nop			; (mov r8, r8)

000021fc <_ZN8cMxRadio23usr_radio_receive_frameEhPhhah>:

uint8_t* cMxRadio::usr_radio_receive_frame(uint8_t len, uint8_t *frm, uint8_t lqi, int8_t ed,uint8_t crc_fail)
{
    21fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    21fe:	b085      	sub	sp, #20
    2200:	9303      	str	r3, [sp, #12]
    2202:	ac0a      	add	r4, sp, #40	; 0x28
    2204:	2700      	movs	r7, #0
    2206:	57e7      	ldrsb	r7, [r4, r7]
    2208:	ac0b      	add	r4, sp, #44	; 0x2c
    220a:	7826      	ldrb	r6, [r4, #0]
	if (user_radio_receive_frame)
    220c:	24a6      	movs	r4, #166	; 0xa6
    220e:	00a4      	lsls	r4, r4, #2
    2210:	5905      	ldr	r5, [r0, r4]
    2212:	2d00      	cmp	r5, #0
    2214:	d105      	bne.n	2222 <_ZN8cMxRadio23usr_radio_receive_frameEhPhhah+0x26>
    2216:	3404      	adds	r4, #4
    2218:	5904      	ldr	r4, [r0, r4]
    221a:	07e3      	lsls	r3, r4, #31
    221c:	d406      	bmi.n	222c <_ZN8cMxRadio23usr_radio_receive_frameEhPhhah+0x30>
		return (this->*user_radio_receive_frame)(len, frm, lqi,ed, crc_fail);
	else return frm;
    221e:	1c10      	adds	r0, r2, #0
    2220:	e00d      	b.n	223e <_ZN8cMxRadio23usr_radio_receive_frameEhPhhah+0x42>
}

uint8_t* cMxRadio::usr_radio_receive_frame(uint8_t len, uint8_t *frm, uint8_t lqi, int8_t ed,uint8_t crc_fail)
{
	if (user_radio_receive_frame)
		return (this->*user_radio_receive_frame)(len, frm, lqi,ed, crc_fail);
    2222:	24a7      	movs	r4, #167	; 0xa7
    2224:	00a4      	lsls	r4, r4, #2
    2226:	5904      	ldr	r4, [r0, r4]
    2228:	07e3      	lsls	r3, r4, #31
    222a:	d502      	bpl.n	2232 <_ZN8cMxRadio23usr_radio_receive_frameEhPhhah+0x36>
    222c:	1063      	asrs	r3, r4, #1
    222e:	58c3      	ldr	r3, [r0, r3]
    2230:	595d      	ldr	r5, [r3, r5]
    2232:	9b03      	ldr	r3, [sp, #12]
    2234:	1064      	asrs	r4, r4, #1
    2236:	1900      	adds	r0, r0, r4
    2238:	9700      	str	r7, [sp, #0]
    223a:	9601      	str	r6, [sp, #4]
    223c:	47a8      	blx	r5
	else return frm;
}
    223e:	b005      	add	sp, #20
    2240:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2242:	46c0      	nop			; (mov r8, r8)

00002244 <_ZN8cMxRadio17usr_radio_tx_doneE15radio_tx_done_t>:

void cMxRadio::usr_radio_tx_done(radio_tx_done_t status)
{
    2244:	b510      	push	{r4, lr}
	if (user_radio_tx_done) (this->*user_radio_tx_done)(status);
    2246:	23a8      	movs	r3, #168	; 0xa8
    2248:	009b      	lsls	r3, r3, #2
    224a:	58c2      	ldr	r2, [r0, r3]
    224c:	2a00      	cmp	r2, #0
    224e:	d104      	bne.n	225a <_ZN8cMxRadio17usr_radio_tx_doneE15radio_tx_done_t+0x16>
    2250:	3304      	adds	r3, #4
    2252:	58c3      	ldr	r3, [r0, r3]
    2254:	07dc      	lsls	r4, r3, #31
    2256:	d405      	bmi.n	2264 <_ZN8cMxRadio17usr_radio_tx_doneE15radio_tx_done_t+0x20>
    2258:	e00a      	b.n	2270 <_ZN8cMxRadio17usr_radio_tx_doneE15radio_tx_done_t+0x2c>
    225a:	23a9      	movs	r3, #169	; 0xa9
    225c:	009b      	lsls	r3, r3, #2
    225e:	58c3      	ldr	r3, [r0, r3]
    2260:	07dc      	lsls	r4, r3, #31
    2262:	d502      	bpl.n	226a <_ZN8cMxRadio17usr_radio_tx_doneE15radio_tx_done_t+0x26>
    2264:	105c      	asrs	r4, r3, #1
    2266:	5904      	ldr	r4, [r0, r4]
    2268:	58a2      	ldr	r2, [r4, r2]
    226a:	105b      	asrs	r3, r3, #1
    226c:	18c0      	adds	r0, r0, r3
    226e:	4790      	blx	r2
}
    2270:	bd10      	pop	{r4, pc}
    2272:	46c0      	nop			; (mov r8, r8)

00002274 <_ZN8cMxRadio19radio_receive_frameEv>:
/**
 * @brief Frame reception
 *
 */
void cMxRadio::radio_receive_frame(void)
{
    2274:	b5f0      	push	{r4, r5, r6, r7, lr}
    2276:	b087      	sub	sp, #28
    2278:	1c04      	adds	r4, r0, #0

	uint8_t len, lqi, crc_fail;
	int8_t ed;

	/* @todo add RSSI_BASE_VALUE to get a dBm value */
	ed = (int8_t)trx_reg_read(RG_PHY_ED_LEVEL);
    227a:	2107      	movs	r1, #7
    227c:	4b12      	ldr	r3, [pc, #72]	; (22c8 <_ZN8cMxRadio19radio_receive_frameEv+0x54>)
    227e:	4798      	blx	r3
    2280:	9003      	str	r0, [sp, #12]
	len = trx_frame_read(radiostatus.rxframe, radiostatus.rxframesz, &lqi);
    2282:	7c22      	ldrb	r2, [r4, #16]
    2284:	270f      	movs	r7, #15
    2286:	ab02      	add	r3, sp, #8
    2288:	469c      	mov	ip, r3
    228a:	4467      	add	r7, ip
    228c:	1c20      	adds	r0, r4, #0
    228e:	68e1      	ldr	r1, [r4, #12]
    2290:	1c3b      	adds	r3, r7, #0
    2292:	4d0e      	ldr	r5, [pc, #56]	; (22cc <_ZN8cMxRadio19radio_receive_frameEv+0x58>)
    2294:	47a8      	blx	r5
    2296:	1c05      	adds	r5, r0, #0
	len &= ~0x80;

#if defined(SR_RX_CRC_VALID)
	crc_fail = trx_bit_read(SR_RX_CRC_VALID) ? 0 : 1;
    2298:	1c20      	adds	r0, r4, #0
    229a:	2106      	movs	r1, #6
    229c:	2280      	movs	r2, #128	; 0x80
    229e:	2307      	movs	r3, #7
    22a0:	4e0b      	ldr	r6, [pc, #44]	; (22d0 <_ZN8cMxRadio19radio_receive_frameEv+0x5c>)
    22a2:	47b0      	blx	r6
		crc = CRC_CCITT_UPDATE(crc, *frm++);
	}
	crc_fail = (crc == 0)? 0: 1;
#endif
radiostatus.rxframe = usr_radio_receive_frame(len, radiostatus.rxframe,
		lqi, ed, crc_fail);
    22a4:	217f      	movs	r1, #127	; 0x7f
    22a6:	4029      	ands	r1, r5
    22a8:	783b      	ldrb	r3, [r7, #0]
    22aa:	466a      	mov	r2, sp
    22ac:	260c      	movs	r6, #12
    22ae:	5796      	ldrsb	r6, [r2, r6]
    22b0:	9600      	str	r6, [sp, #0]
	ed = (int8_t)trx_reg_read(RG_PHY_ED_LEVEL);
	len = trx_frame_read(radiostatus.rxframe, radiostatus.rxframesz, &lqi);
	len &= ~0x80;

#if defined(SR_RX_CRC_VALID)
	crc_fail = trx_bit_read(SR_RX_CRC_VALID) ? 0 : 1;
    22b2:	4242      	negs	r2, r0
    22b4:	4142      	adcs	r2, r0
		crc = CRC_CCITT_UPDATE(crc, *frm++);
	}
	crc_fail = (crc == 0)? 0: 1;
#endif
radiostatus.rxframe = usr_radio_receive_frame(len, radiostatus.rxframe,
		lqi, ed, crc_fail);
    22b6:	9201      	str	r2, [sp, #4]
    22b8:	1c20      	adds	r0, r4, #0
    22ba:	68e2      	ldr	r2, [r4, #12]
    22bc:	4d05      	ldr	r5, [pc, #20]	; (22d4 <_ZN8cMxRadio19radio_receive_frameEv+0x60>)
    22be:	47a8      	blx	r5
    22c0:	60e0      	str	r0, [r4, #12]
}
    22c2:	b007      	add	sp, #28
    22c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    22c6:	46c0      	nop			; (mov r8, r8)
    22c8:	000028f9 	.word	0x000028f9
    22cc:	00002a39 	.word	0x00002a39
    22d0:	00002965 	.word	0x00002965
    22d4:	000021fd 	.word	0x000021fd

000022d8 <_ZN8cMxRadio10radio_initEPhh>:


/* === external functions ====================================================*/

void cMxRadio::radio_init(uint8_t * rxbuf, uint8_t rxbufsz)
{
    22d8:	b530      	push	{r4, r5, lr}
    22da:	b083      	sub	sp, #12
    22dc:	1c04      	adds	r4, r0, #0
	trx_regval_t status;
	/* init cpu peripherals and global IRQ enable */
	radiostatus.rxframe = rxbuf;
    22de:	60c1      	str	r1, [r0, #12]
	radiostatus.rxframesz = rxbufsz;
    22e0:	7402      	strb	r2, [r0, #16]
	trx_io_init(1000000);
    22e2:	492f      	ldr	r1, [pc, #188]	; (23a0 <_ZN8cMxRadio10radio_initEPhh+0xc8>)
    22e4:	4b2f      	ldr	r3, [pc, #188]	; (23a4 <_ZN8cMxRadio10radio_initEPhh+0xcc>)
    22e6:	4798      	blx	r3
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    22e8:	23c4      	movs	r3, #196	; 0xc4
    22ea:	56e3      	ldrsb	r3, [r4, r3]
    22ec:	3301      	adds	r3, #1
    22ee:	d104      	bne.n	22fa <_ZN8cMxRadio10radio_initEPhh+0x22>
    22f0:	482d      	ldr	r0, [pc, #180]	; (23a8 <_ZN8cMxRadio10radio_initEPhh+0xd0>)
    22f2:	492e      	ldr	r1, [pc, #184]	; (23ac <_ZN8cMxRadio10radio_initEPhh+0xd4>)
    22f4:	2228      	movs	r2, #40	; 0x28
    22f6:	4b2e      	ldr	r3, [pc, #184]	; (23b0 <_ZN8cMxRadio10radio_initEPhh+0xd8>)
    22f8:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    else
        *obj->OUTCLR = obj->mask;
    22fa:	1c23      	adds	r3, r4, #0
    22fc:	33c4      	adds	r3, #196	; 0xc4
    22fe:	68da      	ldr	r2, [r3, #12]
    2300:	685b      	ldr	r3, [r3, #4]
    2302:	6013      	str	r3, [r2, #0]
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    2304:	23e0      	movs	r3, #224	; 0xe0
    2306:	56e3      	ldrsb	r3, [r4, r3]
    2308:	3301      	adds	r3, #1
    230a:	d104      	bne.n	2316 <_ZN8cMxRadio10radio_initEPhh+0x3e>
    230c:	4826      	ldr	r0, [pc, #152]	; (23a8 <_ZN8cMxRadio10radio_initEPhh+0xd0>)
    230e:	4927      	ldr	r1, [pc, #156]	; (23ac <_ZN8cMxRadio10radio_initEPhh+0xd4>)
    2310:	2228      	movs	r2, #40	; 0x28
    2312:	4b27      	ldr	r3, [pc, #156]	; (23b0 <_ZN8cMxRadio10radio_initEPhh+0xd8>)
    2314:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    else
        *obj->OUTCLR = obj->mask;
    2316:	1c23      	adds	r3, r4, #0
    2318:	33e0      	adds	r3, #224	; 0xe0
    231a:	68da      	ldr	r2, [r3, #12]
    231c:	685b      	ldr	r3, [r3, #4]
    231e:	6013      	str	r3, [r2, #0]
	/* transceiver initialization */

	reset_pin=0;//TRX_RESET_LOW();
	sleep_pin=0;//TRX_SLPTR_LOW();
	DELAY_US(TRX_RESET_TIME_US);
    2320:	2006      	movs	r0, #6
    2322:	4b24      	ldr	r3, [pc, #144]	; (23b4 <_ZN8cMxRadio10radio_initEPhh+0xdc>)
    2324:	4798      	blx	r3
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    2326:	23c4      	movs	r3, #196	; 0xc4
    2328:	56e3      	ldrsb	r3, [r4, r3]
    232a:	3301      	adds	r3, #1
    232c:	d104      	bne.n	2338 <_ZN8cMxRadio10radio_initEPhh+0x60>
    232e:	481e      	ldr	r0, [pc, #120]	; (23a8 <_ZN8cMxRadio10radio_initEPhh+0xd0>)
    2330:	491e      	ldr	r1, [pc, #120]	; (23ac <_ZN8cMxRadio10radio_initEPhh+0xd4>)
    2332:	2228      	movs	r2, #40	; 0x28
    2334:	4b1e      	ldr	r3, [pc, #120]	; (23b0 <_ZN8cMxRadio10radio_initEPhh+0xd8>)
    2336:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    2338:	1c23      	adds	r3, r4, #0
    233a:	33c4      	adds	r3, #196	; 0xc4
    233c:	691a      	ldr	r2, [r3, #16]
    233e:	685b      	ldr	r3, [r3, #4]
    2340:	6013      	str	r3, [r2, #0]


//	if (trx_reg_read(RG_MAN_ID_0)==31) //atmel
//		m_myled=0;
	/* disable IRQ and clear any pending IRQs */
	trx_reg_write(RG_IRQ_MASK, 0);
    2342:	1c20      	adds	r0, r4, #0
    2344:	210e      	movs	r1, #14
    2346:	2200      	movs	r2, #0
    2348:	4b1b      	ldr	r3, [pc, #108]	; (23b8 <_ZN8cMxRadio10radio_initEPhh+0xe0>)
    234a:	4798      	blx	r3

	trx_reg_read(RG_IRQ_STATUS);
    234c:	1c20      	adds	r0, r4, #0
    234e:	210f      	movs	r1, #15
    2350:	4b1a      	ldr	r3, [pc, #104]	; (23bc <_ZN8cMxRadio10radio_initEPhh+0xe4>)
    2352:	4798      	blx	r3
	DELAY_US(510);
#endif
	trx_reg_write(RG_TRX_STATE, CMD_FORCE_TRX_OFF);
	DELAY_US(510);
#else
	trx_bit_write(SR_TRX_CMD, CMD_TRX_OFF);
    2354:	2308      	movs	r3, #8
    2356:	9300      	str	r3, [sp, #0]
    2358:	1c20      	adds	r0, r4, #0
    235a:	2102      	movs	r1, #2
    235c:	221f      	movs	r2, #31
    235e:	2300      	movs	r3, #0
    2360:	4d17      	ldr	r5, [pc, #92]	; (23c0 <_ZN8cMxRadio10radio_initEPhh+0xe8>)
    2362:	47a8      	blx	r5
	DELAY_US(510);
    2364:	20ff      	movs	r0, #255	; 0xff
    2366:	0040      	lsls	r0, r0, #1
    2368:	4b12      	ldr	r3, [pc, #72]	; (23b4 <_ZN8cMxRadio10radio_initEPhh+0xdc>)
    236a:	4798      	blx	r3
#endif

	do
	{
		status = trx_bit_read(SR_TRX_STATUS);
    236c:	4d15      	ldr	r5, [pc, #84]	; (23c4 <_ZN8cMxRadio10radio_initEPhh+0xec>)
    236e:	1c20      	adds	r0, r4, #0
    2370:	2101      	movs	r1, #1
    2372:	221f      	movs	r2, #31
    2374:	2300      	movs	r3, #0
    2376:	47a8      	blx	r5
#else
	trx_bit_write(SR_TRX_CMD, CMD_TRX_OFF);
	DELAY_US(510);
#endif

	do
    2378:	2808      	cmp	r0, #8
    237a:	d1f8      	bne.n	236e <_ZN8cMxRadio10radio_initEPhh+0x96>
	{
		status = trx_bit_read(SR_TRX_STATUS);
	}
	while (status != TRX_OFF);
	trx_bit_write(SR_TX_AUTO_CRC_ON, 1);
    237c:	2301      	movs	r3, #1
    237e:	9300      	str	r3, [sp, #0]
    2380:	1c20      	adds	r0, r4, #0
    2382:	2104      	movs	r1, #4
    2384:	2220      	movs	r2, #32
    2386:	3304      	adds	r3, #4
    2388:	4d0d      	ldr	r5, [pc, #52]	; (23c0 <_ZN8cMxRadio10radio_initEPhh+0xe8>)
    238a:	47a8      	blx	r5
	trx_reg_write(RG_IRQ_MASK, TRX_IRQ_RX_START | TRX_IRQ_TRX_END);
    238c:	1c20      	adds	r0, r4, #0
    238e:	210e      	movs	r1, #14
    2390:	220c      	movs	r2, #12
    2392:	4b09      	ldr	r3, [pc, #36]	; (23b8 <_ZN8cMxRadio10radio_initEPhh+0xe0>)
    2394:	4798      	blx	r3

	radiostatus.state = STATE_OFF;
    2396:	2300      	movs	r3, #0
    2398:	71e3      	strb	r3, [r4, #7]
	radiostatus.idle_state = STATE_OFF;
    239a:	7223      	strb	r3, [r4, #8]
}
    239c:	b003      	add	sp, #12
    239e:	bd30      	pop	{r4, r5, pc}
    23a0:	000f4240 	.word	0x000f4240
    23a4:	000027f1 	.word	0x000027f1
    23a8:	0000e988 	.word	0x0000e988
    23ac:	0000e9a0 	.word	0x0000e9a0
    23b0:	00004e39 	.word	0x00004e39
    23b4:	00004f19 	.word	0x00004f19
    23b8:	00002891 	.word	0x00002891
    23bc:	000028f9 	.word	0x000028f9
    23c0:	0000297d 	.word	0x0000297d
    23c4:	00002965 	.word	0x00002965

000023c8 <_ZN8cMxRadio15radio_set_stateEh>:
	trx_bit_write(SR_TRX_CMD, CMD_FORCE_TRX_OFF);
	radio_set_state(state);
}

void cMxRadio::radio_set_state(volatile radio_state_t state)
{
    23c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    23ca:	464f      	mov	r7, r9
    23cc:	b480      	push	{r7}
    23ce:	b086      	sub	sp, #24
    23d0:	9002      	str	r0, [sp, #8]
    23d2:	230f      	movs	r3, #15
    23d4:	446b      	add	r3, sp
    23d6:	7019      	strb	r1, [r3, #0]
	volatile trx_regval_t cmd, expstatus, currstatus;
	uint8_t retries;
	bool do_sleep = false;

	switch(state)
    23d8:	781b      	ldrb	r3, [r3, #0]
    23da:	b2db      	uxtb	r3, r3
    23dc:	2b05      	cmp	r3, #5
    23de:	d83b      	bhi.n	2458 <_ZN8cMxRadio15radio_set_stateEh+0x90>
    23e0:	009b      	lsls	r3, r3, #2
    23e2:	4a65      	ldr	r2, [pc, #404]	; (2578 <_ZN8cMxRadio15radio_set_stateEh+0x1b0>)
    23e4:	58d3      	ldr	r3, [r2, r3]
    23e6:	469f      	mov	pc, r3
		TRX_TX_PA_DI();
#endif
#ifdef TRX_RX_LNA_EI
		TRX_RX_LNA_DI();
#endif
		expstatus = TRX_OFF;
    23e8:	2308      	movs	r3, #8
    23ea:	2216      	movs	r2, #22
    23ec:	446a      	add	r2, sp
    23ee:	7013      	strb	r3, [r2, #0]
		cmd = CMD_TRX_OFF;
    23f0:	2215      	movs	r2, #21
    23f2:	446a      	add	r2, sp
    23f4:	7013      	strb	r3, [r2, #0]
		break;
    23f6:	e0b4      	b.n	2562 <_ZN8cMxRadio15radio_set_stateEh+0x19a>
		if (radiostatus.rx_lna)
		{
			TRX_RX_LNA_EI();
		}
#endif
expstatus = RX_ON;
    23f8:	2306      	movs	r3, #6
    23fa:	2216      	movs	r2, #22
    23fc:	446a      	add	r2, sp
    23fe:	7013      	strb	r3, [r2, #0]
cmd = CMD_RX_ON;
    2400:	2215      	movs	r2, #21
    2402:	446a      	add	r2, sp
    2404:	7013      	strb	r3, [r2, #0]
break;
    2406:	e0ac      	b.n	2562 <_ZN8cMxRadio15radio_set_stateEh+0x19a>

	case STATE_TX:
		expstatus = PLL_ON;
    2408:	2309      	movs	r3, #9
    240a:	2216      	movs	r2, #22
    240c:	446a      	add	r2, sp
    240e:	7013      	strb	r3, [r2, #0]
		cmd = CMD_PLL_ON;
    2410:	2215      	movs	r2, #21
    2412:	446a      	add	r2, sp
    2414:	7013      	strb	r3, [r2, #0]
		break;
    2416:	e0a4      	b.n	2562 <_ZN8cMxRadio15radio_set_stateEh+0x19a>
if (radiostatus.rx_lna)
{
	TRX_RX_LNA_EI();
}
#endif
expstatus = RX_AACK_ON;
    2418:	2316      	movs	r3, #22
    241a:	2216      	movs	r2, #22
    241c:	446a      	add	r2, sp
    241e:	7013      	strb	r3, [r2, #0]
cmd = CMD_RX_AACK_ON;
    2420:	2215      	movs	r2, #21
    2422:	446a      	add	r2, sp
    2424:	7013      	strb	r3, [r2, #0]
break;
    2426:	e09c      	b.n	2562 <_ZN8cMxRadio15radio_set_stateEh+0x19a>

	case STATE_TXAUTO:
		expstatus = TX_ARET_ON;
    2428:	2319      	movs	r3, #25
    242a:	2216      	movs	r2, #22
    242c:	446a      	add	r2, sp
    242e:	7013      	strb	r3, [r2, #0]
		cmd = CMD_TX_ARET_ON;
    2430:	2215      	movs	r2, #21
    2432:	446a      	add	r2, sp
    2434:	7013      	strb	r3, [r2, #0]
		break;
    2436:	e094      	b.n	2562 <_ZN8cMxRadio15radio_set_stateEh+0x19a>
		TRX_TX_PA_DI();
#endif
#ifdef TRX_RX_LNA_EI
		TRX_RX_LNA_DI();
#endif
		expstatus = TRX_OFF;
    2438:	2208      	movs	r2, #8
    243a:	2316      	movs	r3, #22
    243c:	446b      	add	r3, sp
    243e:	701a      	strb	r2, [r3, #0]
		cmd = CMD_FORCE_TRX_OFF;
    2440:	3a05      	subs	r2, #5
    2442:	2315      	movs	r3, #21
    2444:	446b      	add	r3, sp
    2446:	701a      	strb	r2, [r3, #0]
		cmd = CMD_TRX_OFF;
		break;

	}

	if (STATE_SLEEP == radiostatus.state)
    2448:	9b02      	ldr	r3, [sp, #8]
    244a:	79db      	ldrb	r3, [r3, #7]
    244c:	2b05      	cmp	r3, #5
    244e:	d100      	bne.n	2452 <_ZN8cMxRadio15radio_set_stateEh+0x8a>
    2450:	e08e      	b.n	2570 <_ZN8cMxRadio15radio_set_stateEh+0x1a8>
#ifdef TRX_RX_LNA_EI
		TRX_RX_LNA_DI();
#endif
		expstatus = TRX_OFF;
		cmd = CMD_FORCE_TRX_OFF;
		do_sleep = true;
    2452:	2301      	movs	r3, #1
    2454:	4699      	mov	r9, r3
    2456:	e03d      	b.n	24d4 <_ZN8cMxRadio15radio_set_stateEh+0x10c>
 * @ingroup grpRadio
 */

void cMxRadio::radio_error(radio_error_t err)
{
	usr_radio_error(err);
    2458:	9802      	ldr	r0, [sp, #8]
    245a:	2104      	movs	r1, #4
    245c:	4b47      	ldr	r3, [pc, #284]	; (257c <_ZN8cMxRadio15radio_set_stateEh+0x1b4>)
    245e:	4798      	blx	r3
		do_sleep = true;
		break;

	default:
		radio_error(GENERAL_ERROR);
		expstatus = TRX_OFF;
    2460:	2308      	movs	r3, #8
    2462:	2216      	movs	r2, #22
    2464:	446a      	add	r2, sp
    2466:	7013      	strb	r3, [r2, #0]
		cmd = CMD_TRX_OFF;
    2468:	2215      	movs	r2, #21
    246a:	446a      	add	r2, sp
    246c:	7013      	strb	r3, [r2, #0]
		break;
    246e:	e078      	b.n	2562 <_ZN8cMxRadio15radio_set_stateEh+0x19a>
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    2470:	23e0      	movs	r3, #224	; 0xe0
    2472:	9a02      	ldr	r2, [sp, #8]
    2474:	56d3      	ldrsb	r3, [r2, r3]
    2476:	3301      	adds	r3, #1
    2478:	d104      	bne.n	2484 <_ZN8cMxRadio15radio_set_stateEh+0xbc>
    247a:	4841      	ldr	r0, [pc, #260]	; (2580 <_ZN8cMxRadio15radio_set_stateEh+0x1b8>)
    247c:	4941      	ldr	r1, [pc, #260]	; (2584 <_ZN8cMxRadio15radio_set_stateEh+0x1bc>)
    247e:	2228      	movs	r2, #40	; 0x28
    2480:	4b41      	ldr	r3, [pc, #260]	; (2588 <_ZN8cMxRadio15radio_set_stateEh+0x1c0>)
    2482:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    else
        *obj->OUTCLR = obj->mask;
    2484:	9b02      	ldr	r3, [sp, #8]
    2486:	33e0      	adds	r3, #224	; 0xe0
    2488:	68da      	ldr	r2, [r3, #12]
    248a:	685b      	ldr	r3, [r3, #4]
    248c:	6013      	str	r3, [r2, #0]
		 * be polled.  The state reads as 0b0011111 ("state transition
		 * in progress") while the transceiver is still in its startup
		 * phase, which does not match any of the "expstatus" values,
		 * so polling just continues.
		 */
		DELAY_US(500);
    248e:	20fa      	movs	r0, #250	; 0xfa
    2490:	0040      	lsls	r0, r0, #1
    2492:	4b3e      	ldr	r3, [pc, #248]	; (258c <_ZN8cMxRadio15radio_set_stateEh+0x1c4>)
    2494:	4798      	blx	r3
    2496:	2464      	movs	r4, #100	; 0x64
		 * to be enough under all circumstances.
		 */
		retries = 100;
		do
		{
			currstatus = trx_bit_read(SR_TRX_STATUS);
    2498:	4f3d      	ldr	r7, [pc, #244]	; (2590 <_ZN8cMxRadio15radio_set_stateEh+0x1c8>)
    249a:	2517      	movs	r5, #23
    249c:	446d      	add	r5, sp
			 */
			if (TRX_OFF == currstatus)
			{
				break;
			}
			DELAY_US(50);
    249e:	4e3b      	ldr	r6, [pc, #236]	; (258c <_ZN8cMxRadio15radio_set_stateEh+0x1c4>)
		 * to be enough under all circumstances.
		 */
		retries = 100;
		do
		{
			currstatus = trx_bit_read(SR_TRX_STATUS);
    24a0:	9802      	ldr	r0, [sp, #8]
    24a2:	2101      	movs	r1, #1
    24a4:	221f      	movs	r2, #31
    24a6:	2300      	movs	r3, #0
    24a8:	47b8      	blx	r7
    24aa:	7028      	strb	r0, [r5, #0]
			/*
			 * Sleep could only be entered from TRX_OFF, so that's
			 * what is expected again.
			 */
			if (TRX_OFF == currstatus)
    24ac:	782b      	ldrb	r3, [r5, #0]
    24ae:	2b08      	cmp	r3, #8
    24b0:	d005      	beq.n	24be <_ZN8cMxRadio15radio_set_stateEh+0xf6>
			{
				break;
			}
			DELAY_US(50);
    24b2:	2032      	movs	r0, #50	; 0x32
    24b4:	47b0      	blx	r6
    24b6:	3c01      	subs	r4, #1
    24b8:	b2e4      	uxtb	r4, r4
		 * to be charged by the voltage regulator.  Give the crystal
		 * oscillator some time to start up.  5 ms (100 * 50 us) ought
		 * to be enough under all circumstances.
		 */
		retries = 100;
		do
    24ba:	2c00      	cmp	r4, #0
    24bc:	d1f0      	bne.n	24a0 <_ZN8cMxRadio15radio_set_stateEh+0xd8>
			}
			DELAY_US(50);
		}
		while (--retries);

		if (currstatus != TRX_OFF)
    24be:	2317      	movs	r3, #23
    24c0:	446b      	add	r3, sp
    24c2:	781b      	ldrb	r3, [r3, #0]
    24c4:	2200      	movs	r2, #0
    24c6:	4691      	mov	r9, r2
    24c8:	2b08      	cmp	r3, #8
    24ca:	d003      	beq.n	24d4 <_ZN8cMxRadio15radio_set_stateEh+0x10c>
 * @ingroup grpRadio
 */

void cMxRadio::radio_error(radio_error_t err)
{
	usr_radio_error(err);
    24cc:	9802      	ldr	r0, [sp, #8]
    24ce:	2101      	movs	r1, #1
    24d0:	4b2a      	ldr	r3, [pc, #168]	; (257c <_ZN8cMxRadio15radio_set_stateEh+0x1b4>)
    24d2:	4798      	blx	r3
		{
			/* radio didn't wake up */
			radio_error(STATE_SET_FAILED);
		}
	}
	trx_bit_write(SR_TRX_CMD, cmd);
    24d4:	2315      	movs	r3, #21
    24d6:	446b      	add	r3, sp
    24d8:	781b      	ldrb	r3, [r3, #0]
    24da:	9300      	str	r3, [sp, #0]
    24dc:	9802      	ldr	r0, [sp, #8]
    24de:	2102      	movs	r1, #2
    24e0:	221f      	movs	r2, #31
    24e2:	2300      	movs	r3, #0
    24e4:	4c2b      	ldr	r4, [pc, #172]	; (2594 <_ZN8cMxRadio15radio_set_stateEh+0x1cc>)
    24e6:	47a0      	blx	r4
    24e8:	248c      	movs	r4, #140	; 0x8c

	retries = 140;              /* enough to await an ongoing frame
	 * reception */
	do
	{
		currstatus = trx_bit_read(SR_TRX_STATUS);
    24ea:	4f29      	ldr	r7, [pc, #164]	; (2590 <_ZN8cMxRadio15radio_set_stateEh+0x1c8>)
    24ec:	2517      	movs	r5, #23
    24ee:	446d      	add	r5, sp
		if (expstatus == currstatus)
		{
			break;
		}
		/** @todo must wait longer for 790/868/900 MHz radios */
		DELAY_US(32);
    24f0:	4e26      	ldr	r6, [pc, #152]	; (258c <_ZN8cMxRadio15radio_set_stateEh+0x1c4>)

	retries = 140;              /* enough to await an ongoing frame
	 * reception */
	do
	{
		currstatus = trx_bit_read(SR_TRX_STATUS);
    24f2:	9802      	ldr	r0, [sp, #8]
    24f4:	2101      	movs	r1, #1
    24f6:	221f      	movs	r2, #31
    24f8:	2300      	movs	r3, #0
    24fa:	47b8      	blx	r7
    24fc:	7028      	strb	r0, [r5, #0]
		if (expstatus == currstatus)
    24fe:	2316      	movs	r3, #22
    2500:	446b      	add	r3, sp
    2502:	781b      	ldrb	r3, [r3, #0]
    2504:	782a      	ldrb	r2, [r5, #0]
    2506:	b2db      	uxtb	r3, r3
    2508:	4293      	cmp	r3, r2
    250a:	d005      	beq.n	2518 <_ZN8cMxRadio15radio_set_stateEh+0x150>
		{
			break;
		}
		/** @todo must wait longer for 790/868/900 MHz radios */
		DELAY_US(32);
    250c:	2020      	movs	r0, #32
    250e:	47b0      	blx	r6
    2510:	3c01      	subs	r4, #1
    2512:	b2e4      	uxtb	r4, r4
	}
	trx_bit_write(SR_TRX_CMD, cmd);

	retries = 140;              /* enough to await an ongoing frame
	 * reception */
	do
    2514:	2c00      	cmp	r4, #0
    2516:	d1ec      	bne.n	24f2 <_ZN8cMxRadio15radio_set_stateEh+0x12a>
		/** @todo must wait longer for 790/868/900 MHz radios */
		DELAY_US(32);
	}
	while (--retries);

	if (expstatus != currstatus)
    2518:	2316      	movs	r3, #22
    251a:	446b      	add	r3, sp
    251c:	781b      	ldrb	r3, [r3, #0]
    251e:	2217      	movs	r2, #23
    2520:	446a      	add	r2, sp
    2522:	7812      	ldrb	r2, [r2, #0]
    2524:	b2db      	uxtb	r3, r3
    2526:	4293      	cmp	r3, r2
    2528:	d003      	beq.n	2532 <_ZN8cMxRadio15radio_set_stateEh+0x16a>
 * @ingroup grpRadio
 */

void cMxRadio::radio_error(radio_error_t err)
{
	usr_radio_error(err);
    252a:	9802      	ldr	r0, [sp, #8]
    252c:	2101      	movs	r1, #1
    252e:	4b13      	ldr	r3, [pc, #76]	; (257c <_ZN8cMxRadio15radio_set_stateEh+0x1b4>)
    2530:	4798      	blx	r3
	if (expstatus != currstatus)
	{
		radio_error(STATE_SET_FAILED);
	}

	if (do_sleep)
    2532:	464b      	mov	r3, r9
    2534:	2b00      	cmp	r3, #0
    2536:	d00e      	beq.n	2556 <_ZN8cMxRadio15radio_set_stateEh+0x18e>
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    2538:	23e0      	movs	r3, #224	; 0xe0
    253a:	9a02      	ldr	r2, [sp, #8]
    253c:	56d3      	ldrsb	r3, [r2, r3]
    253e:	3301      	adds	r3, #1
    2540:	d104      	bne.n	254c <_ZN8cMxRadio15radio_set_stateEh+0x184>
    2542:	480f      	ldr	r0, [pc, #60]	; (2580 <_ZN8cMxRadio15radio_set_stateEh+0x1b8>)
    2544:	490f      	ldr	r1, [pc, #60]	; (2584 <_ZN8cMxRadio15radio_set_stateEh+0x1bc>)
    2546:	2228      	movs	r2, #40	; 0x28
    2548:	4b0f      	ldr	r3, [pc, #60]	; (2588 <_ZN8cMxRadio15radio_set_stateEh+0x1c0>)
    254a:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    254c:	9b02      	ldr	r3, [sp, #8]
    254e:	33e0      	adds	r3, #224	; 0xe0
    2550:	691a      	ldr	r2, [r3, #16]
    2552:	685b      	ldr	r3, [r3, #4]
    2554:	6013      	str	r3, [r2, #0]
	{
		sleep_pin=1;//TRX_SLPTR_HIGH();
	}

	radiostatus.state = state;
    2556:	230f      	movs	r3, #15
    2558:	446b      	add	r3, sp
    255a:	781b      	ldrb	r3, [r3, #0]
    255c:	9a02      	ldr	r2, [sp, #8]
    255e:	71d3      	strb	r3, [r2, #7]
    2560:	e006      	b.n	2570 <_ZN8cMxRadio15radio_set_stateEh+0x1a8>
		cmd = CMD_TRX_OFF;
		break;

	}

	if (STATE_SLEEP == radiostatus.state)
    2562:	9b02      	ldr	r3, [sp, #8]
    2564:	79db      	ldrb	r3, [r3, #7]
    2566:	2b05      	cmp	r3, #5
    2568:	d082      	beq.n	2470 <_ZN8cMxRadio15radio_set_stateEh+0xa8>
    256a:	2300      	movs	r3, #0
    256c:	4699      	mov	r9, r3
    256e:	e7b1      	b.n	24d4 <_ZN8cMxRadio15radio_set_stateEh+0x10c>
	{
		sleep_pin=1;//TRX_SLPTR_HIGH();
	}

	radiostatus.state = state;
}
    2570:	b006      	add	sp, #24
    2572:	bc04      	pop	{r2}
    2574:	4691      	mov	r9, r2
    2576:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2578:	0000eb30 	.word	0x0000eb30
    257c:	000021d5 	.word	0x000021d5
    2580:	0000e988 	.word	0x0000e988
    2584:	0000e9a0 	.word	0x0000e9a0
    2588:	00004e39 	.word	0x00004e39
    258c:	00004f19 	.word	0x00004f19
    2590:	00002965 	.word	0x00002965
    2594:	0000297d 	.word	0x0000297d

00002598 <_ZN8cMxRadio17radio_irq_handlerEh>:
 *
 * @parm cause  value of the interrupt status register
 *
 */
void cMxRadio::radio_irq_handler(uint8_t cause)
{
    2598:	b570      	push	{r4, r5, r6, lr}
    259a:	1c04      	adds	r4, r0, #0
    259c:	1c0d      	adds	r5, r1, #0
	if (cause & TRX_IRQ_TRX_END)
    259e:	070b      	lsls	r3, r1, #28
    25a0:	d52b      	bpl.n	25fa <_ZN8cMxRadio17radio_irq_handlerEh+0x62>
	{
		if (STATE_RX == radiostatus.state ||
    25a2:	79c3      	ldrb	r3, [r0, #7]
    25a4:	1e99      	subs	r1, r3, #2
    25a6:	22fd      	movs	r2, #253	; 0xfd
    25a8:	4211      	tst	r1, r2
    25aa:	d102      	bne.n	25b2 <_ZN8cMxRadio17radio_irq_handlerEh+0x1a>
				STATE_RXAUTO == radiostatus.state)
		{
			radio_receive_frame();
    25ac:	4b15      	ldr	r3, [pc, #84]	; (2604 <_ZN8cMxRadio17radio_irq_handlerEh+0x6c>)
    25ae:	4798      	blx	r3
    25b0:	e023      	b.n	25fa <_ZN8cMxRadio17radio_irq_handlerEh+0x62>
		}
		else if (STATE_TX == radiostatus.state)
    25b2:	2b01      	cmp	r3, #1
    25b4:	d107      	bne.n	25c6 <_ZN8cMxRadio17radio_irq_handlerEh+0x2e>
		{
#ifdef TRX_TX_PA_EI
TRX_TX_PA_DI();
#endif
usr_radio_tx_done(TX_OK);
    25b6:	2100      	movs	r1, #0
    25b8:	4b13      	ldr	r3, [pc, #76]	; (2608 <_ZN8cMxRadio17radio_irq_handlerEh+0x70>)
    25ba:	4798      	blx	r3
radio_set_state(radiostatus.idle_state);
    25bc:	7a21      	ldrb	r1, [r4, #8]
    25be:	1c20      	adds	r0, r4, #0
    25c0:	4b12      	ldr	r3, [pc, #72]	; (260c <_ZN8cMxRadio17radio_irq_handlerEh+0x74>)
    25c2:	4798      	blx	r3
    25c4:	e019      	b.n	25fa <_ZN8cMxRadio17radio_irq_handlerEh+0x62>
		}
		else if (STATE_TXAUTO == radiostatus.state)
    25c6:	2b03      	cmp	r3, #3
    25c8:	d117      	bne.n	25fa <_ZN8cMxRadio17radio_irq_handlerEh+0x62>
		{
#ifdef TRX_TX_PA_EI
			TRX_TX_PA_DI();
#endif
			uint8_t trac_status = trx_bit_read(SR_TRAC_STATUS);
    25ca:	2102      	movs	r1, #2
    25cc:	22e0      	movs	r2, #224	; 0xe0
    25ce:	3302      	adds	r3, #2
    25d0:	4e0f      	ldr	r6, [pc, #60]	; (2610 <_ZN8cMxRadio17radio_irq_handlerEh+0x78>)
    25d2:	47b0      	blx	r6
			radio_tx_done_t result;
			switch (trac_status)
    25d4:	2803      	cmp	r0, #3
    25d6:	d006      	beq.n	25e6 <_ZN8cMxRadio17radio_irq_handlerEh+0x4e>
    25d8:	d307      	bcc.n	25ea <_ZN8cMxRadio17radio_irq_handlerEh+0x52>
			case TRAC_NO_ACK:
				result = TX_NO_ACK;
				break;

			default:
				result = TX_FAIL;
    25da:	3805      	subs	r0, #5
    25dc:	4243      	negs	r3, r0
    25de:	4143      	adcs	r3, r0
    25e0:	2103      	movs	r1, #3
    25e2:	1ac9      	subs	r1, r1, r3
    25e4:	e002      	b.n	25ec <_ZN8cMxRadio17radio_irq_handlerEh+0x54>
#endif
				result = TX_OK;
				break;

			case TRAC_CHANNEL_ACCESS_FAILURE:
				result = TX_CCA_FAIL;
    25e6:	2101      	movs	r1, #1
    25e8:	e000      	b.n	25ec <_ZN8cMxRadio17radio_irq_handlerEh+0x54>
			case TRAC_SUCCESS_DATA_PENDING:
#endif
#if defined TRAC_SUCCESS_WAIT_FOR_ACK
			case TRAC_SUCCESS_WAIT_FOR_ACK:
#endif
				result = TX_OK;
    25ea:	2100      	movs	r1, #0
				break;

			default:
				result = TX_FAIL;
			}
			usr_radio_tx_done(result);
    25ec:	1c20      	adds	r0, r4, #0
    25ee:	4b06      	ldr	r3, [pc, #24]	; (2608 <_ZN8cMxRadio17radio_irq_handlerEh+0x70>)
    25f0:	4798      	blx	r3
			radio_set_state(radiostatus.idle_state);
    25f2:	7a21      	ldrb	r1, [r4, #8]
    25f4:	1c20      	adds	r0, r4, #0
    25f6:	4b05      	ldr	r3, [pc, #20]	; (260c <_ZN8cMxRadio17radio_irq_handlerEh+0x74>)
    25f8:	4798      	blx	r3
		}
	}
	usr_radio_irq(cause);
    25fa:	1c20      	adds	r0, r4, #0
    25fc:	1c29      	adds	r1, r5, #0
    25fe:	4b05      	ldr	r3, [pc, #20]	; (2614 <_ZN8cMxRadio17radio_irq_handlerEh+0x7c>)
    2600:	4798      	blx	r3
}
    2602:	bd70      	pop	{r4, r5, r6, pc}
    2604:	00002275 	.word	0x00002275
    2608:	00002245 	.word	0x00002245
    260c:	000023c9 	.word	0x000023c9
    2610:	00002965 	.word	0x00002965
    2614:	000021e9 	.word	0x000021e9

00002618 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t>:

	radiostatus.state = state;
}

void cMxRadio::radio_set_param(radio_attribute_t attr, radio_param_t parm)
{
    2618:	b5f0      	push	{r4, r5, r6, r7, lr}
    261a:	4647      	mov	r7, r8
    261c:	b480      	push	{r7}
    261e:	b082      	sub	sp, #8
    2620:	1c05      	adds	r5, r0, #0
	switch (attr)
    2622:	2908      	cmp	r1, #8
    2624:	d864      	bhi.n	26f0 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xd8>
    2626:	0089      	lsls	r1, r1, #2
    2628:	4b35      	ldr	r3, [pc, #212]	; (2700 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xe8>)
    262a:	585b      	ldr	r3, [r3, r1]
    262c:	469f      	mov	pc, r3
	{
	case phyCurrentChannel:
		if (((int)parm.channel >= TRX_MIN_CHANNEL) &&
    262e:	b2d4      	uxtb	r4, r2
    2630:	1c23      	adds	r3, r4, #0
    2632:	3b0b      	subs	r3, #11
    2634:	2b0f      	cmp	r3, #15
    2636:	d807      	bhi.n	2648 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0x30>
		{
#ifdef CHINABAND
			trx_reg_write(RG_CC_CTRL_1, CCBAND);
			trx_reg_write(RG_CC_CTRL_0, parm.channel*2+CCNUMBER);
#else
			trx_bit_write(SR_CHANNEL, parm.channel);
    2638:	9400      	str	r4, [sp, #0]
    263a:	2108      	movs	r1, #8
    263c:	221f      	movs	r2, #31
    263e:	2300      	movs	r3, #0
    2640:	4e30      	ldr	r6, [pc, #192]	; (2704 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xec>)
    2642:	47b0      	blx	r6
#endif
			radiostatus.channel = parm.channel;
    2644:	712c      	strb	r4, [r5, #4]
    2646:	e056      	b.n	26f6 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xde>
 * @ingroup grpRadio
 */

void cMxRadio::radio_error(radio_error_t err)
{
	usr_radio_error(err);
    2648:	2102      	movs	r1, #2
    264a:	4b2f      	ldr	r3, [pc, #188]	; (2708 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xf0>)
    264c:	4798      	blx	r3
    264e:	e052      	b.n	26f6 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xde>
		{
			radio_error(SET_PARM_FAILED);
		}
#endif//chinaband
#else
		if (parm.tx_pwr >= -17 && parm.tx_pwr <= 3)
    2650:	b2d2      	uxtb	r2, r2
    2652:	1c13      	adds	r3, r2, #0
    2654:	3311      	adds	r3, #17
    2656:	b2db      	uxtb	r3, r3
    2658:	2b14      	cmp	r3, #20
    265a:	d809      	bhi.n	2670 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0x58>
					0x06,                         /* 0 dBm */
					0x04,                         /* 1 dBm */
					0x02,                         /* 2 dBm */
					0x00                          /* 3 dBm */
			};
			radiostatus.tx_pwr = parm.tx_pwr;
    265c:	7142      	strb	r2, [r0, #5]
			uint8_t idx = parm.tx_pwr + 17;
			uint8_t pwrval = pwrtable[idx];
    265e:	4a2b      	ldr	r2, [pc, #172]	; (270c <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xf4>)
			trx_bit_write(SR_TX_PWR, pwrval);
    2660:	5cd3      	ldrb	r3, [r2, r3]
    2662:	9300      	str	r3, [sp, #0]
    2664:	2105      	movs	r1, #5
    2666:	220f      	movs	r2, #15
    2668:	2300      	movs	r3, #0
    266a:	4c26      	ldr	r4, [pc, #152]	; (2704 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xec>)
    266c:	47a0      	blx	r4
    266e:	e042      	b.n	26f6 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xde>
 * @ingroup grpRadio
 */

void cMxRadio::radio_error(radio_error_t err)
{
	usr_radio_error(err);
    2670:	2102      	movs	r1, #2
    2672:	4b25      	ldr	r3, [pc, #148]	; (2708 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xf0>)
    2674:	4798      	blx	r3
    2676:	e03e      	b.n	26f6 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xde>
		}

#endif//rf212
		break;
	case phyCCAMode:
		if (parm.cca_mode <= 3)
    2678:	b2d2      	uxtb	r2, r2
    267a:	2a03      	cmp	r2, #3
    267c:	d807      	bhi.n	268e <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0x76>
		{
			radiostatus.cca_mode = parm.cca_mode;
    267e:	7182      	strb	r2, [r0, #6]
			trx_bit_write(SR_CCA_MODE, radiostatus.cca_mode);
    2680:	9200      	str	r2, [sp, #0]
    2682:	2108      	movs	r1, #8
    2684:	2260      	movs	r2, #96	; 0x60
    2686:	2305      	movs	r3, #5
    2688:	4c1e      	ldr	r4, [pc, #120]	; (2704 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xec>)
    268a:	47a0      	blx	r4
    268c:	e033      	b.n	26f6 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xde>
 * @ingroup grpRadio
 */

void cMxRadio::radio_error(radio_error_t err)
{
	usr_radio_error(err);
    268e:	2102      	movs	r1, #2
    2690:	4b1d      	ldr	r3, [pc, #116]	; (2708 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xf0>)
    2692:	4798      	blx	r3
    2694:	e02f      	b.n	26f6 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xde>
			radio_error(SET_PARM_FAILED);
		}
		break;

	case phyIdleState:
		radiostatus.idle_state = parm.idle_state;
    2696:	b2d1      	uxtb	r1, r2
    2698:	7201      	strb	r1, [r0, #8]
		radio_set_state(parm.idle_state);
    269a:	4b1d      	ldr	r3, [pc, #116]	; (2710 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xf8>)
    269c:	4798      	blx	r3
		break;
    269e:	e02a      	b.n	26f6 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xde>

	case phyChannelsSupported:
		break;

	case phyPanId:
		trx_set_panid(parm.pan_id);
    26a0:	b294      	uxth	r4, r2
	/**
	 * @brief Write the PANID to the address filter registers
	 */
	 inline void trx_set_panid(uint16_t panid)
	{
	    trx_reg_write(RG_PAN_ID_0,(panid&0xff));
    26a2:	b2e2      	uxtb	r2, r4
    26a4:	2122      	movs	r1, #34	; 0x22
    26a6:	4e1b      	ldr	r6, [pc, #108]	; (2714 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xfc>)
    26a8:	47b0      	blx	r6
	    trx_reg_write(RG_PAN_ID_1,(panid>>8));
    26aa:	0a22      	lsrs	r2, r4, #8
    26ac:	1c28      	adds	r0, r5, #0
    26ae:	2123      	movs	r1, #35	; 0x23
    26b0:	47b0      	blx	r6
    26b2:	e020      	b.n	26f6 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xde>
		break;

	case phyShortAddr:
		trx_set_shortaddr(parm.short_addr);
    26b4:	b294      	uxth	r4, r2
	 * @brief Write the 16 bit short address to the
	 * address filter registers
	 */
	 inline void trx_set_shortaddr(uint16_t shortaddr)
	{
	    trx_reg_write(RG_SHORT_ADDR_0,(shortaddr&0xff));
    26b6:	b2e2      	uxtb	r2, r4
    26b8:	2120      	movs	r1, #32
    26ba:	4e16      	ldr	r6, [pc, #88]	; (2714 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xfc>)
    26bc:	47b0      	blx	r6
	    trx_reg_write(RG_SHORT_ADDR_1,(shortaddr>>8));
    26be:	0a22      	lsrs	r2, r4, #8
    26c0:	1c28      	adds	r0, r5, #0
    26c2:	2121      	movs	r1, #33	; 0x21
    26c4:	47b0      	blx	r6
    26c6:	e016      	b.n	26f6 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xde>
		break;

	case phyLongAddr:
	{
		uint8_t regno, *ap;
		for (regno = RG_IEEE_ADDR_0, ap = (uint8_t *)parm.long_addr;
    26c8:	1c17      	adds	r7, r2, #0
    26ca:	3208      	adds	r2, #8
    26cc:	1c14      	adds	r4, r2, #0
    26ce:	2624      	movs	r6, #36	; 0x24
				regno <= RG_IEEE_ADDR_7;
				regno++, ap++)
			trx_reg_write(regno, *ap);
    26d0:	4b10      	ldr	r3, [pc, #64]	; (2714 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xfc>)
    26d2:	4698      	mov	r8, r3
    26d4:	783a      	ldrb	r2, [r7, #0]
    26d6:	1c28      	adds	r0, r5, #0
    26d8:	1c31      	adds	r1, r6, #0
    26da:	47c0      	blx	r8
		break;

	case phyLongAddr:
	{
		uint8_t regno, *ap;
		for (regno = RG_IEEE_ADDR_0, ap = (uint8_t *)parm.long_addr;
    26dc:	3601      	adds	r6, #1
    26de:	b2f6      	uxtb	r6, r6
    26e0:	3701      	adds	r7, #1
    26e2:	42a7      	cmp	r7, r4
    26e4:	d1f6      	bne.n	26d4 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xbc>
    26e6:	e006      	b.n	26f6 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xde>
			trx_reg_write(regno, *ap);
		break;
	}

	case phyDataRate:
		trx_set_datarate(parm.data_rate);
    26e8:	b2d1      	uxtb	r1, r2
    26ea:	4b0b      	ldr	r3, [pc, #44]	; (2718 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0x100>)
    26ec:	4798      	blx	r3
		break;
    26ee:	e002      	b.n	26f6 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xde>
 * @ingroup grpRadio
 */

void cMxRadio::radio_error(radio_error_t err)
{
	usr_radio_error(err);
    26f0:	2102      	movs	r1, #2
    26f2:	4b05      	ldr	r3, [pc, #20]	; (2708 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xf0>)
    26f4:	4798      	blx	r3

	default:
		radio_error(SET_PARM_FAILED);
		break;
	}
}
    26f6:	b002      	add	sp, #8
    26f8:	bc04      	pop	{r2}
    26fa:	4690      	mov	r8, r2
    26fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    26fe:	46c0      	nop			; (mov r8, r8)
    2700:	0000eb48 	.word	0x0000eb48
    2704:	0000297d 	.word	0x0000297d
    2708:	000021d5 	.word	0x000021d5
    270c:	0000eb6c 	.word	0x0000eb6c
    2710:	000023c9 	.word	0x000023c9
    2714:	00002891 	.word	0x00002891
    2718:	00002781 	.word	0x00002781

0000271c <_ZN8cMxRadio16radio_send_frameEhPhh>:


void cMxRadio::radio_send_frame(uint8_t len, uint8_t *frm, uint8_t compcrc)
{
    271c:	b570      	push	{r4, r5, r6, lr}
    271e:	1c04      	adds	r4, r0, #0
    2720:	1c0e      	adds	r6, r1, #0
    2722:	1c15      	adds	r5, r2, #0
	{
		TRX_TX_PA_EI();
	}
#endif
/* this block should be made atomic */
	frm[2]++;
    2724:	7893      	ldrb	r3, [r2, #2]
    2726:	3301      	adds	r3, #1
    2728:	7093      	strb	r3, [r2, #2]
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    272a:	23e0      	movs	r3, #224	; 0xe0
    272c:	56c3      	ldrsb	r3, [r0, r3]
    272e:	3301      	adds	r3, #1
    2730:	d104      	bne.n	273c <_ZN8cMxRadio16radio_send_frameEhPhh+0x20>
    2732:	480f      	ldr	r0, [pc, #60]	; (2770 <_ZN8cMxRadio16radio_send_frameEhPhh+0x54>)
    2734:	490f      	ldr	r1, [pc, #60]	; (2774 <_ZN8cMxRadio16radio_send_frameEhPhh+0x58>)
    2736:	2228      	movs	r2, #40	; 0x28
    2738:	4b0f      	ldr	r3, [pc, #60]	; (2778 <_ZN8cMxRadio16radio_send_frameEhPhh+0x5c>)
    273a:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    273c:	1c23      	adds	r3, r4, #0
    273e:	33e0      	adds	r3, #224	; 0xe0
    2740:	691a      	ldr	r2, [r3, #16]
    2742:	685b      	ldr	r3, [r3, #4]
    2744:	6013      	str	r3, [r2, #0]
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    2746:	23e0      	movs	r3, #224	; 0xe0
    2748:	56e3      	ldrsb	r3, [r4, r3]
    274a:	3301      	adds	r3, #1
    274c:	d104      	bne.n	2758 <_ZN8cMxRadio16radio_send_frameEhPhh+0x3c>
    274e:	4808      	ldr	r0, [pc, #32]	; (2770 <_ZN8cMxRadio16radio_send_frameEhPhh+0x54>)
    2750:	4908      	ldr	r1, [pc, #32]	; (2774 <_ZN8cMxRadio16radio_send_frameEhPhh+0x58>)
    2752:	2228      	movs	r2, #40	; 0x28
    2754:	4b08      	ldr	r3, [pc, #32]	; (2778 <_ZN8cMxRadio16radio_send_frameEhPhh+0x5c>)
    2756:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    else
        *obj->OUTCLR = obj->mask;
    2758:	1c23      	adds	r3, r4, #0
    275a:	33e0      	adds	r3, #224	; 0xe0
    275c:	68da      	ldr	r2, [r3, #12]
    275e:	685b      	ldr	r3, [r3, #4]
    2760:	6013      	str	r3, [r2, #0]
	sleep_pin=1;//TRX_SLPTR_HIGH();
	sleep_pin=0;//TRX_SLPTR_LOW();
	trx_frame_write(len, frm);
    2762:	1c20      	adds	r0, r4, #0
    2764:	1c31      	adds	r1, r6, #0
    2766:	1c2a      	adds	r2, r5, #0
    2768:	4b04      	ldr	r3, [pc, #16]	; (277c <_ZN8cMxRadio16radio_send_frameEhPhh+0x60>)
    276a:	4798      	blx	r3
	/***********************************/
}
    276c:	bd70      	pop	{r4, r5, r6, pc}
    276e:	46c0      	nop			; (mov r8, r8)
    2770:	0000e988 	.word	0x0000e988
    2774:	0000e9a0 	.word	0x0000e9a0
    2778:	00004e39 	.word	0x00004e39
    277c:	000029b1 	.word	0x000029b1

00002780 <_ZN8cMxRadio16trx_set_datarateEh>:
}

#elif RADIO_TYPE == RADIO_AT86RF231

uint8_t cMxRadio::trx_set_datarate(uint8_t rate_type)
{
    2780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2782:	1c06      	adds	r6, r0, #0
    2784:	1e0c      	subs	r4, r1, #0
trx_regval_t regval = TRX_NONE;

    switch(rate_type)
    2786:	2c34      	cmp	r4, #52	; 0x34
    2788:	d00f      	beq.n	27aa <_ZN8cMxRadio16trx_set_datarateEh+0x2a>
    278a:	2934      	cmp	r1, #52	; 0x34
    278c:	d803      	bhi.n	2796 <_ZN8cMxRadio16trx_set_datarateEh+0x16>
    {
        case OQPSK250: regval = TRX_OQPSK250; break;
    278e:	2500      	movs	r5, #0

uint8_t cMxRadio::trx_set_datarate(uint8_t rate_type)
{
trx_regval_t regval = TRX_NONE;

    switch(rate_type)
    2790:	2933      	cmp	r1, #51	; 0x33
    2792:	d00b      	beq.n	27ac <_ZN8cMxRadio16trx_set_datarateEh+0x2c>
    2794:	e007      	b.n	27a6 <_ZN8cMxRadio16trx_set_datarateEh+0x26>
    2796:	2954      	cmp	r1, #84	; 0x54
    2798:	d003      	beq.n	27a2 <_ZN8cMxRadio16trx_set_datarateEh+0x22>
    {
        case OQPSK250: regval = TRX_OQPSK250; break;
        case OQPSK500: regval = TRX_OQPSK500; break;
    279a:	2501      	movs	r5, #1

uint8_t cMxRadio::trx_set_datarate(uint8_t rate_type)
{
trx_regval_t regval = TRX_NONE;

    switch(rate_type)
    279c:	2994      	cmp	r1, #148	; 0x94
    279e:	d005      	beq.n	27ac <_ZN8cMxRadio16trx_set_datarateEh+0x2c>
    27a0:	e001      	b.n	27a6 <_ZN8cMxRadio16trx_set_datarateEh+0x26>
    {
        case OQPSK250: regval = TRX_OQPSK250; break;
        case OQPSK500: regval = TRX_OQPSK500; break;
        case OQPSK1000: regval = TRX_OQPSK1000; break;
        case OQPSK2000: regval = TRX_OQPSK2000; break;
    27a2:	2503      	movs	r5, #3
    27a4:	e002      	b.n	27ac <_ZN8cMxRadio16trx_set_datarateEh+0x2c>
        regval |=  trx_reg_read(RG_TRX_CTRL_2) & 0xfc ;
        trx_reg_write(RG_TRX_CTRL_2, regval);
    }
    else
    {
        rate_type = TRX_NONE;
    27a6:	24ff      	movs	r4, #255	; 0xff
    27a8:	e011      	b.n	27ce <_ZN8cMxRadio16trx_set_datarateEh+0x4e>

    switch(rate_type)
    {
        case OQPSK250: regval = TRX_OQPSK250; break;
        case OQPSK500: regval = TRX_OQPSK500; break;
        case OQPSK1000: regval = TRX_OQPSK1000; break;
    27aa:	2502      	movs	r5, #2
        case OQPSK2000: regval = TRX_OQPSK2000; break;
        default: break;
    }
    if (regval != TRX_NONE)
    {
        trx_reg_write(RG_TRX_STATE, CMD_FORCE_TRX_OFF);
    27ac:	1c30      	adds	r0, r6, #0
    27ae:	2102      	movs	r1, #2
    27b0:	2203      	movs	r2, #3
    27b2:	4f08      	ldr	r7, [pc, #32]	; (27d4 <_ZN8cMxRadio16trx_set_datarateEh+0x54>)
    27b4:	47b8      	blx	r7
        regval |=  trx_reg_read(RG_TRX_CTRL_2) & 0xfc ;
    27b6:	1c30      	adds	r0, r6, #0
    27b8:	210c      	movs	r1, #12
    27ba:	4b07      	ldr	r3, [pc, #28]	; (27d8 <_ZN8cMxRadio16trx_set_datarateEh+0x58>)
    27bc:	4798      	blx	r3
    27be:	2303      	movs	r3, #3
    27c0:	1c02      	adds	r2, r0, #0
    27c2:	439a      	bics	r2, r3
    27c4:	4315      	orrs	r5, r2
        trx_reg_write(RG_TRX_CTRL_2, regval);
    27c6:	b2ea      	uxtb	r2, r5
    27c8:	1c30      	adds	r0, r6, #0
    27ca:	210c      	movs	r1, #12
    27cc:	47b8      	blx	r7
    else
    {
        rate_type = TRX_NONE;
    }
    return rate_type;
}
    27ce:	1c20      	adds	r0, r4, #0
    27d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    27d2:	46c0      	nop			; (mov r8, r8)
    27d4:	00002891 	.word	0x00002891
    27d8:	000028f9 	.word	0x000028f9

000027dc <_Z8IRQradiov>:
/* === Includes ============================================================ */
#include <MxRadio.h>

cMxRadio* gRadio = NULL;

void IRQradio(void){
    27dc:	b508      	push	{r3, lr}
	gRadio->rf_irq_callback();
    27de:	4b02      	ldr	r3, [pc, #8]	; (27e8 <_Z8IRQradiov+0xc>)
    27e0:	6818      	ldr	r0, [r3, #0]
    27e2:	4b02      	ldr	r3, [pc, #8]	; (27ec <_Z8IRQradiov+0x10>)
    27e4:	4798      	blx	r3
}
    27e6:	bd08      	pop	{r3, pc}
    27e8:	20004030 	.word	0x20004030
    27ec:	00002af5 	.word	0x00002af5

000027f0 <_ZN8cMxRadio11trx_io_initEi>:
/* === external functions =================================================== */
void cMxRadio::trx_io_init (int spirate)
{
    27f0:	b570      	push	{r4, r5, r6, lr}
    27f2:	b084      	sub	sp, #16
    27f4:	1c05      	adds	r5, r0, #0
    27f6:	1c0e      	adds	r6, r1, #0
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    27f8:	23a8      	movs	r3, #168	; 0xa8
    27fa:	56c3      	ldrsb	r3, [r0, r3]
    27fc:	3301      	adds	r3, #1
    27fe:	d104      	bne.n	280a <_ZN8cMxRadio11trx_io_initEi+0x1a>
    2800:	4818      	ldr	r0, [pc, #96]	; (2864 <_ZN8cMxRadio11trx_io_initEi+0x74>)
    2802:	4919      	ldr	r1, [pc, #100]	; (2868 <_ZN8cMxRadio11trx_io_initEi+0x78>)
    2804:	2228      	movs	r2, #40	; 0x28
    2806:	4b19      	ldr	r3, [pc, #100]	; (286c <_ZN8cMxRadio11trx_io_initEi+0x7c>)
    2808:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    280a:	1c2b      	adds	r3, r5, #0
    280c:	33a8      	adds	r3, #168	; 0xa8
    280e:	691a      	ldr	r2, [r3, #16]
    2810:	685b      	ldr	r3, [r3, #4]
    2812:	6013      	str	r3, [r2, #0]

	m_cs = 1;
	m_spi.format(8, 0);
    2814:	1c2c      	adds	r4, r5, #0
    2816:	3414      	adds	r4, #20
    2818:	1c20      	adds	r0, r4, #0
    281a:	2108      	movs	r1, #8
    281c:	2200      	movs	r2, #0
    281e:	4b14      	ldr	r3, [pc, #80]	; (2870 <_ZN8cMxRadio11trx_io_initEi+0x80>)
    2820:	4798      	blx	r3
	m_spi.frequency(spirate);
    2822:	1c20      	adds	r0, r4, #0
    2824:	1c31      	adds	r1, r6, #0
    2826:	4b13      	ldr	r3, [pc, #76]	; (2874 <_ZN8cMxRadio11trx_io_initEi+0x84>)
    2828:	4798      	blx	r3
	/////////////////////////////////////////////////////////////////////
	/////modification BM irq_pin.rise(this,&cMxRadio::rf_irq_callback);
	//////////////////////////////////////////////////////////////////////
	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    282a:	ac01      	add	r4, sp, #4
    282c:	1c20      	adds	r0, r4, #0
    282e:	4b12      	ldr	r3, [pc, #72]	; (2878 <_ZN8cMxRadio11trx_io_initEi+0x88>)
    2830:	4798      	blx	r3
	// put the button as EXTINT
	eint_chan_conf.gpio_pin           = PIN_PB00A_EIC_EXTINT0;
    2832:	2320      	movs	r3, #32
    2834:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_mux       = MUX_PB00A_EIC_EXTINT0 ;
    2836:	2300      	movs	r3, #0
    2838:	6063      	str	r3, [r4, #4]
	eint_chan_conf.detection_criteria = EXTINT_DETECT_RISING;
    283a:	2201      	movs	r2, #1
    283c:	72e2      	strb	r2, [r4, #11]
	eint_chan_conf.filter_input_signal = false;
    283e:	72a3      	strb	r3, [r4, #10]
		
	extint_chan_set_config(0, &eint_chan_conf);
    2840:	2000      	movs	r0, #0
    2842:	1c21      	adds	r1, r4, #0
    2844:	4b0d      	ldr	r3, [pc, #52]	; (287c <_ZN8cMxRadio11trx_io_initEi+0x8c>)
    2846:	4798      	blx	r3
	//configuration callback
	gRadio = this;
    2848:	4b0d      	ldr	r3, [pc, #52]	; (2880 <_ZN8cMxRadio11trx_io_initEi+0x90>)
    284a:	601d      	str	r5, [r3, #0]
	extint_register_callback(&IRQradio,0,EXTINT_CALLBACK_TYPE_DETECT);
    284c:	480d      	ldr	r0, [pc, #52]	; (2884 <_ZN8cMxRadio11trx_io_initEi+0x94>)
    284e:	2100      	movs	r1, #0
    2850:	2200      	movs	r2, #0
    2852:	4b0d      	ldr	r3, [pc, #52]	; (2888 <_ZN8cMxRadio11trx_io_initEi+0x98>)
    2854:	4798      	blx	r3
	//InterruptManager::get()->add_handler(ppsISR, EIC_IRQn);
	//ppsIsrr.attach(&ppsISR);
	//activation callback
		extint_chan_enable_callback(0,EXTINT_CALLBACK_TYPE_DETECT);		
    2856:	2000      	movs	r0, #0
    2858:	2100      	movs	r1, #0
    285a:	4b0c      	ldr	r3, [pc, #48]	; (288c <_ZN8cMxRadio11trx_io_initEi+0x9c>)
    285c:	4798      	blx	r3
	TRX_SLPTR_INIT();
	SPI_INIT(spirate);
	TRX_IRQ_INIT();
	EI_TRX_IRQ();
	*/
}
    285e:	b004      	add	sp, #16
    2860:	bd70      	pop	{r4, r5, r6, pc}
    2862:	46c0      	nop			; (mov r8, r8)
    2864:	0000e988 	.word	0x0000e988
    2868:	0000e9a0 	.word	0x0000e9a0
    286c:	00004e39 	.word	0x00004e39
    2870:	00004b51 	.word	0x00004b51
    2874:	00004b6d 	.word	0x00004b6d
    2878:	00004035 	.word	0x00004035
    287c:	00004049 	.word	0x00004049
    2880:	20004030 	.word	0x20004030
    2884:	000027dd 	.word	0x000027dd
    2888:	00003f35 	.word	0x00003f35
    288c:	00003f5d 	.word	0x00003f5d

00002890 <_ZN8cMxRadio13trx_reg_writeEhh>:

void cMxRadio::trx_reg_write(uint8_t addr, trx_regval_t val)
{
    2890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2892:	1c04      	adds	r4, r0, #0
    2894:	1c17      	adds	r7, r2, #0

	addr = TRX_CMD_RW | (TRX_CMD_RADDR_MASK & addr);
    2896:	23c0      	movs	r3, #192	; 0xc0
    2898:	4319      	orrs	r1, r3
    289a:	1c0d      	adds	r5, r1, #0
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    289c:	3b18      	subs	r3, #24
    289e:	56c3      	ldrsb	r3, [r0, r3]
    28a0:	3301      	adds	r3, #1
    28a2:	d104      	bne.n	28ae <_ZN8cMxRadio13trx_reg_writeEhh+0x1e>
    28a4:	4810      	ldr	r0, [pc, #64]	; (28e8 <_ZN8cMxRadio13trx_reg_writeEhh+0x58>)
    28a6:	4911      	ldr	r1, [pc, #68]	; (28ec <_ZN8cMxRadio13trx_reg_writeEhh+0x5c>)
    28a8:	2228      	movs	r2, #40	; 0x28
    28aa:	4b11      	ldr	r3, [pc, #68]	; (28f0 <_ZN8cMxRadio13trx_reg_writeEhh+0x60>)
    28ac:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    else
        *obj->OUTCLR = obj->mask;
    28ae:	1c23      	adds	r3, r4, #0
    28b0:	33a8      	adds	r3, #168	; 0xa8
    28b2:	68da      	ldr	r2, [r3, #12]
    28b4:	685b      	ldr	r3, [r3, #4]
    28b6:	6013      	str	r3, [r2, #0]

	m_cs = 0;//SPI_SELN_LOW();
	m_spi.write(addr);//SPI_DATA_REG = addr;
    28b8:	1c26      	adds	r6, r4, #0
    28ba:	3614      	adds	r6, #20
    28bc:	1c30      	adds	r0, r6, #0
    28be:	1c29      	adds	r1, r5, #0
    28c0:	4d0c      	ldr	r5, [pc, #48]	; (28f4 <_ZN8cMxRadio13trx_reg_writeEhh+0x64>)
    28c2:	47a8      	blx	r5
	//SPI_WAITFOR();
	m_spi.write(val);//SPI_DATA_REG = val;
    28c4:	1c30      	adds	r0, r6, #0
    28c6:	1c39      	adds	r1, r7, #0
    28c8:	47a8      	blx	r5
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    28ca:	23a8      	movs	r3, #168	; 0xa8
    28cc:	56e3      	ldrsb	r3, [r4, r3]
    28ce:	3301      	adds	r3, #1
    28d0:	d104      	bne.n	28dc <_ZN8cMxRadio13trx_reg_writeEhh+0x4c>
    28d2:	4805      	ldr	r0, [pc, #20]	; (28e8 <_ZN8cMxRadio13trx_reg_writeEhh+0x58>)
    28d4:	4905      	ldr	r1, [pc, #20]	; (28ec <_ZN8cMxRadio13trx_reg_writeEhh+0x5c>)
    28d6:	2228      	movs	r2, #40	; 0x28
    28d8:	4b05      	ldr	r3, [pc, #20]	; (28f0 <_ZN8cMxRadio13trx_reg_writeEhh+0x60>)
    28da:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    28dc:	34a8      	adds	r4, #168	; 0xa8
    28de:	6923      	ldr	r3, [r4, #16]
    28e0:	6862      	ldr	r2, [r4, #4]
    28e2:	601a      	str	r2, [r3, #0]
	//SPI_WAITFOR();
	m_cs = 1;//SPI_SELN_HIGH();
}
    28e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    28e6:	46c0      	nop			; (mov r8, r8)
    28e8:	0000e988 	.word	0x0000e988
    28ec:	0000e9a0 	.word	0x0000e9a0
    28f0:	00004e39 	.word	0x00004e39
    28f4:	00004b85 	.word	0x00004b85

000028f8 <_ZN8cMxRadio12trx_reg_readEh>:

trx_regval_t cMxRadio::trx_reg_read(uint8_t addr)
{
    28f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    28fa:	1c04      	adds	r4, r0, #0

	uint8_t val;

	addr=TRX_CMD_RR | (TRX_CMD_RADDR_MASK & addr);
    28fc:	253f      	movs	r5, #63	; 0x3f
    28fe:	4029      	ands	r1, r5
    2900:	3541      	adds	r5, #65	; 0x41
    2902:	430d      	orrs	r5, r1
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    2904:	23a8      	movs	r3, #168	; 0xa8
    2906:	56c3      	ldrsb	r3, [r0, r3]
    2908:	3301      	adds	r3, #1
    290a:	d104      	bne.n	2916 <_ZN8cMxRadio12trx_reg_readEh+0x1e>
    290c:	4811      	ldr	r0, [pc, #68]	; (2954 <_ZN8cMxRadio12trx_reg_readEh+0x5c>)
    290e:	4912      	ldr	r1, [pc, #72]	; (2958 <_ZN8cMxRadio12trx_reg_readEh+0x60>)
    2910:	2228      	movs	r2, #40	; 0x28
    2912:	4b12      	ldr	r3, [pc, #72]	; (295c <_ZN8cMxRadio12trx_reg_readEh+0x64>)
    2914:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    else
        *obj->OUTCLR = obj->mask;
    2916:	1c23      	adds	r3, r4, #0
    2918:	33a8      	adds	r3, #168	; 0xa8
    291a:	68da      	ldr	r2, [r3, #12]
    291c:	685b      	ldr	r3, [r3, #4]
    291e:	6013      	str	r3, [r2, #0]

	// Select transceiver
	m_cs = 0;//SPI_SELN_LOW();

	m_spi.write(addr);//SPI_DATA_REG = addr;
    2920:	1c27      	adds	r7, r4, #0
    2922:	3714      	adds	r7, #20
    2924:	1c38      	adds	r0, r7, #0
    2926:	1c29      	adds	r1, r5, #0
    2928:	4e0d      	ldr	r6, [pc, #52]	; (2960 <_ZN8cMxRadio12trx_reg_readEh+0x68>)
    292a:	47b0      	blx	r6
	//SPI_WAITFOR();
	val=m_spi.write(addr);//SPI_DATA_REG = addr;        /* dummy out */
    292c:	1c38      	adds	r0, r7, #0
    292e:	1c29      	adds	r1, r5, #0
    2930:	47b0      	blx	r6
    2932:	b2c5      	uxtb	r5, r0
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    2934:	23a8      	movs	r3, #168	; 0xa8
    2936:	56e3      	ldrsb	r3, [r4, r3]
    2938:	3301      	adds	r3, #1
    293a:	d104      	bne.n	2946 <_ZN8cMxRadio12trx_reg_readEh+0x4e>
    293c:	4805      	ldr	r0, [pc, #20]	; (2954 <_ZN8cMxRadio12trx_reg_readEh+0x5c>)
    293e:	4906      	ldr	r1, [pc, #24]	; (2958 <_ZN8cMxRadio12trx_reg_readEh+0x60>)
    2940:	2228      	movs	r2, #40	; 0x28
    2942:	4b06      	ldr	r3, [pc, #24]	; (295c <_ZN8cMxRadio12trx_reg_readEh+0x64>)
    2944:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    2946:	34a8      	adds	r4, #168	; 0xa8
    2948:	6923      	ldr	r3, [r4, #16]
    294a:	6862      	ldr	r2, [r4, #4]
    294c:	601a      	str	r2, [r3, #0]
	//val = SPI_DATA_REG;

	m_cs=1;//SPI_SELN_HIGH();

	return (trx_regval_t)val;
}
    294e:	1c28      	adds	r0, r5, #0
    2950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2952:	46c0      	nop			; (mov r8, r8)
    2954:	0000e988 	.word	0x0000e988
    2958:	0000e9a0 	.word	0x0000e9a0
    295c:	00004e39 	.word	0x00004e39
    2960:	00004b85 	.word	0x00004b85

00002964 <_ZN8cMxRadio12trx_bit_readEhhh>:
#include <MxRadio.h>


/* === functions ========================================= */
trx_regval_t cMxRadio::trx_bit_read(uint8_t addr, trx_regval_t mask, uint8_t pos)
{
    2964:	b538      	push	{r3, r4, r5, lr}
    2966:	1c15      	adds	r5, r2, #0
    2968:	1c1c      	adds	r4, r3, #0
trx_regval_t data;
    data = trx_reg_read(addr);
    296a:	4b03      	ldr	r3, [pc, #12]	; (2978 <_ZN8cMxRadio12trx_bit_readEhhh+0x14>)
    296c:	4798      	blx	r3
    data &= mask;
    data >>= pos;
    296e:	4028      	ands	r0, r5
    2970:	4120      	asrs	r0, r4
    return data;
    2972:	b2c0      	uxtb	r0, r0
}
    2974:	bd38      	pop	{r3, r4, r5, pc}
    2976:	46c0      	nop			; (mov r8, r8)
    2978:	000028f9 	.word	0x000028f9

0000297c <_ZN8cMxRadio13trx_bit_writeEhhhh>:

#include <MxRadio.h>

/* === functions ========================================= */
void cMxRadio::trx_bit_write(uint8_t addr, trx_regval_t mask, uint8_t pos, trx_regval_t value)
{
    297c:	b5f0      	push	{r4, r5, r6, r7, lr}
    297e:	b083      	sub	sp, #12
    2980:	1c05      	adds	r5, r0, #0
    2982:	1c16      	adds	r6, r2, #0
    2984:	1c1c      	adds	r4, r3, #0
    2986:	ab08      	add	r3, sp, #32
    2988:	781f      	ldrb	r7, [r3, #0]

trx_regval_t tmp;
    tmp = trx_reg_read(addr);
    298a:	9101      	str	r1, [sp, #4]
    298c:	4b06      	ldr	r3, [pc, #24]	; (29a8 <_ZN8cMxRadio13trx_bit_writeEhhhh+0x2c>)
    298e:	4798      	blx	r3
    tmp &= ~mask;
    2990:	43b0      	bics	r0, r6
    2992:	b2c0      	uxtb	r0, r0
    value <<= pos;
    2994:	1c3a      	adds	r2, r7, #0
    2996:	40a2      	lsls	r2, r4
    value &=mask;
    2998:	4032      	ands	r2, r6
    value |= tmp;
    trx_reg_write(addr, value);
    299a:	4302      	orrs	r2, r0
    299c:	1c28      	adds	r0, r5, #0
    299e:	9901      	ldr	r1, [sp, #4]
    29a0:	4b02      	ldr	r3, [pc, #8]	; (29ac <_ZN8cMxRadio13trx_bit_writeEhhhh+0x30>)
    29a2:	4798      	blx	r3
    return;
}
    29a4:	b003      	add	sp, #12
    29a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    29a8:	000028f9 	.word	0x000028f9
    29ac:	00002891 	.word	0x00002891

000029b0 <_ZN8cMxRadio15trx_frame_writeEhPh>:
#include <MxRadio.h>

/* === functions ========================================= */

void cMxRadio::trx_frame_write(uint8_t length, uint8_t *data)
{
    29b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    29b2:	b083      	sub	sp, #12
    29b4:	1c06      	adds	r6, r0, #0
    29b6:	1c0f      	adds	r7, r1, #0
    29b8:	1c15      	adds	r5, r2, #0
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    29ba:	23a8      	movs	r3, #168	; 0xa8
    29bc:	56c3      	ldrsb	r3, [r0, r3]
    29be:	3301      	adds	r3, #1
    29c0:	d104      	bne.n	29cc <_ZN8cMxRadio15trx_frame_writeEhPh+0x1c>
    29c2:	4819      	ldr	r0, [pc, #100]	; (2a28 <_ZN8cMxRadio15trx_frame_writeEhPh+0x78>)
    29c4:	4919      	ldr	r1, [pc, #100]	; (2a2c <_ZN8cMxRadio15trx_frame_writeEhPh+0x7c>)
    29c6:	2228      	movs	r2, #40	; 0x28
    29c8:	4b19      	ldr	r3, [pc, #100]	; (2a30 <_ZN8cMxRadio15trx_frame_writeEhPh+0x80>)
    29ca:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    else
        *obj->OUTCLR = obj->mask;
    29cc:	1c33      	adds	r3, r6, #0
    29ce:	33a8      	adds	r3, #168	; 0xa8
    29d0:	68da      	ldr	r2, [r3, #12]
    29d2:	685b      	ldr	r3, [r3, #4]
    29d4:	6013      	str	r3, [r2, #0]

    // Select transceiver
    m_cs=0;//SPI_SELN_LOW();

    m_spi.write(TRX_CMD_FW);//SPI_DATA_REG = TRX_CMD_FW;
    29d6:	2314      	movs	r3, #20
    29d8:	469c      	mov	ip, r3
    29da:	44b4      	add	ip, r6
    29dc:	4663      	mov	r3, ip
    29de:	9301      	str	r3, [sp, #4]
    29e0:	4660      	mov	r0, ip
    29e2:	2160      	movs	r1, #96	; 0x60
    29e4:	4c13      	ldr	r4, [pc, #76]	; (2a34 <_ZN8cMxRadio15trx_frame_writeEhPh+0x84>)
    29e6:	47a0      	blx	r4
    //SPI_WAITFOR();
    m_spi.write(length);//SPI_DATA_REG = length;
    29e8:	9801      	ldr	r0, [sp, #4]
    29ea:	1c39      	adds	r1, r7, #0
    29ec:	47a0      	blx	r4
    29ee:	1c2c      	adds	r4, r5, #0
    29f0:	3f01      	subs	r7, #1
    29f2:	b2ff      	uxtb	r7, r7
    29f4:	3701      	adds	r7, #1
    29f6:	19ed      	adds	r5, r5, r7

    do
    {
        //SPI_WAITFOR();
    	m_spi.write(*data++);//SPI_DATA_REG = *data++;
    29f8:	4f0e      	ldr	r7, [pc, #56]	; (2a34 <_ZN8cMxRadio15trx_frame_writeEhPh+0x84>)
    29fa:	7821      	ldrb	r1, [r4, #0]
    29fc:	9801      	ldr	r0, [sp, #4]
    29fe:	47b8      	blx	r7
    2a00:	3401      	adds	r4, #1

    m_spi.write(TRX_CMD_FW);//SPI_DATA_REG = TRX_CMD_FW;
    //SPI_WAITFOR();
    m_spi.write(length);//SPI_DATA_REG = length;

    do
    2a02:	42ac      	cmp	r4, r5
    2a04:	d1f9      	bne.n	29fa <_ZN8cMxRadio15trx_frame_writeEhPh+0x4a>
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    2a06:	23a8      	movs	r3, #168	; 0xa8
    2a08:	56f3      	ldrsb	r3, [r6, r3]
    2a0a:	3301      	adds	r3, #1
    2a0c:	d104      	bne.n	2a18 <_ZN8cMxRadio15trx_frame_writeEhPh+0x68>
    2a0e:	4806      	ldr	r0, [pc, #24]	; (2a28 <_ZN8cMxRadio15trx_frame_writeEhPh+0x78>)
    2a10:	4906      	ldr	r1, [pc, #24]	; (2a2c <_ZN8cMxRadio15trx_frame_writeEhPh+0x7c>)
    2a12:	2228      	movs	r2, #40	; 0x28
    2a14:	4b06      	ldr	r3, [pc, #24]	; (2a30 <_ZN8cMxRadio15trx_frame_writeEhPh+0x80>)
    2a16:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    2a18:	1c33      	adds	r3, r6, #0
    2a1a:	33a8      	adds	r3, #168	; 0xa8
    2a1c:	691a      	ldr	r2, [r3, #16]
    2a1e:	685b      	ldr	r3, [r3, #4]
    2a20:	6013      	str	r3, [r2, #0]

    //SPI_WAITFOR(); /* wait here until last byte is out otherwise underrun irq */

    // Deselect Slave
    m_cs=1;//SPI_SELN_HIGH();
}
    2a22:	b003      	add	sp, #12
    2a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a26:	46c0      	nop			; (mov r8, r8)
    2a28:	0000e988 	.word	0x0000e988
    2a2c:	0000e9a0 	.word	0x0000e9a0
    2a30:	00004e39 	.word	0x00004e39
    2a34:	00004b85 	.word	0x00004b85

00002a38 <_ZN8cMxRadio14trx_frame_readEPhhS0_>:

uint8_t cMxRadio::trx_frame_read(uint8_t *data, uint8_t datasz, uint8_t *lqi)
{
    2a38:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a3a:	4657      	mov	r7, sl
    2a3c:	464e      	mov	r6, r9
    2a3e:	b4c0      	push	{r6, r7}
    2a40:	b083      	sub	sp, #12
    2a42:	1c07      	adds	r7, r0, #0
    2a44:	9101      	str	r1, [sp, #4]
    2a46:	1c15      	adds	r5, r2, #0
    2a48:	4699      	mov	r9, r3
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    2a4a:	23a8      	movs	r3, #168	; 0xa8
    2a4c:	56c3      	ldrsb	r3, [r0, r3]
    2a4e:	3301      	adds	r3, #1
    2a50:	d104      	bne.n	2a5c <_ZN8cMxRadio14trx_frame_readEPhhS0_+0x24>
    2a52:	4824      	ldr	r0, [pc, #144]	; (2ae4 <_ZN8cMxRadio14trx_frame_readEPhhS0_+0xac>)
    2a54:	4924      	ldr	r1, [pc, #144]	; (2ae8 <_ZN8cMxRadio14trx_frame_readEPhhS0_+0xb0>)
    2a56:	2228      	movs	r2, #40	; 0x28
    2a58:	4b24      	ldr	r3, [pc, #144]	; (2aec <_ZN8cMxRadio14trx_frame_readEPhhS0_+0xb4>)
    2a5a:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    else
        *obj->OUTCLR = obj->mask;
    2a5c:	1c3b      	adds	r3, r7, #0
    2a5e:	33a8      	adds	r3, #168	; 0xa8
    2a60:	68da      	ldr	r2, [r3, #12]
    2a62:	685b      	ldr	r3, [r3, #4]
    2a64:	6013      	str	r3, [r2, #0]

    /* Select transceiver */
    m_cs=0;//SPI_SELN_LOW();

    /* start frame read */
    m_spi.write(TRX_CMD_FR);//SPI_DATA_REG = TRX_CMD_FR;
    2a66:	2314      	movs	r3, #20
    2a68:	469c      	mov	ip, r3
    2a6a:	44bc      	add	ip, r7
    2a6c:	4663      	mov	r3, ip
    2a6e:	4666      	mov	r6, ip
    2a70:	9300      	str	r3, [sp, #0]
    2a72:	1c18      	adds	r0, r3, #0
    2a74:	2120      	movs	r1, #32
    2a76:	4c1e      	ldr	r4, [pc, #120]	; (2af0 <_ZN8cMxRadio14trx_frame_readEPhhS0_+0xb8>)
    2a78:	47a0      	blx	r4
    //SPI_WAITFOR();

    /* read length */
    length= m_spi.write(0);//SPI_DATA_REG = 0;
    2a7a:	1c30      	adds	r0, r6, #0
    2a7c:	2100      	movs	r1, #0
    2a7e:	47a0      	blx	r4
    2a80:	b2c6      	uxtb	r6, r0
    //SPI_WAITFOR();
    //length = SPI_DATA_REG;

    if (length <= datasz)
    2a82:	42ae      	cmp	r6, r5
    2a84:	d818      	bhi.n	2ab8 <_ZN8cMxRadio14trx_frame_readEPhhS0_+0x80>
    2a86:	9a01      	ldr	r2, [sp, #4]
    2a88:	1c14      	adds	r4, r2, #0
    2a8a:	1e73      	subs	r3, r6, #1
    2a8c:	b2db      	uxtb	r3, r3
    2a8e:	3301      	adds	r3, #1
    2a90:	18d5      	adds	r5, r2, r3
        i = length;
        do
        {
            //SPI_DATA_REG = 0;   /* dummy out */
            //SPI_WAITFOR();
            *data++ = m_spi.write(0);//SPI_DATA_REG;
    2a92:	4b17      	ldr	r3, [pc, #92]	; (2af0 <_ZN8cMxRadio14trx_frame_readEPhhS0_+0xb8>)
    2a94:	469a      	mov	sl, r3
    2a96:	9800      	ldr	r0, [sp, #0]
    2a98:	2100      	movs	r1, #0
    2a9a:	47d0      	blx	sl
    2a9c:	7020      	strb	r0, [r4, #0]
    2a9e:	3401      	adds	r4, #1
    //length = SPI_DATA_REG;

    if (length <= datasz)
    {
        i = length;
        do
    2aa0:	42ac      	cmp	r4, r5
    2aa2:	d1f8      	bne.n	2a96 <_ZN8cMxRadio14trx_frame_readEPhhS0_+0x5e>
            //SPI_WAITFOR();
            *data++ = m_spi.write(0);//SPI_DATA_REG;
        }
        while(--i);

        if (lqi!= NULL)
    2aa4:	464b      	mov	r3, r9
    2aa6:	2b00      	cmp	r3, #0
    2aa8:	d008      	beq.n	2abc <_ZN8cMxRadio14trx_frame_readEPhhS0_+0x84>
        {
            //SPI_DATA_REG = 0;   /* dummy out */
            //SPI_WAITFOR();
            *lqi = m_spi.write(0);//SPI_DATA_REG;
    2aaa:	9800      	ldr	r0, [sp, #0]
    2aac:	2100      	movs	r1, #0
    2aae:	4b10      	ldr	r3, [pc, #64]	; (2af0 <_ZN8cMxRadio14trx_frame_readEPhhS0_+0xb8>)
    2ab0:	4798      	blx	r3
    2ab2:	464b      	mov	r3, r9
    2ab4:	7018      	strb	r0, [r3, #0]
    2ab6:	e001      	b.n	2abc <_ZN8cMxRadio14trx_frame_readEPhhS0_+0x84>
        }
    }
    else
    {
        /* we drop the frame */
        length = 0x80 | length;
    2ab8:	2380      	movs	r3, #128	; 0x80
    2aba:	431e      	orrs	r6, r3
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    2abc:	23a8      	movs	r3, #168	; 0xa8
    2abe:	56fb      	ldrsb	r3, [r7, r3]
    2ac0:	3301      	adds	r3, #1
    2ac2:	d104      	bne.n	2ace <_ZN8cMxRadio14trx_frame_readEPhhS0_+0x96>
    2ac4:	4807      	ldr	r0, [pc, #28]	; (2ae4 <_ZN8cMxRadio14trx_frame_readEPhhS0_+0xac>)
    2ac6:	4908      	ldr	r1, [pc, #32]	; (2ae8 <_ZN8cMxRadio14trx_frame_readEPhhS0_+0xb0>)
    2ac8:	2228      	movs	r2, #40	; 0x28
    2aca:	4b08      	ldr	r3, [pc, #32]	; (2aec <_ZN8cMxRadio14trx_frame_readEPhhS0_+0xb4>)
    2acc:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    2ace:	37a8      	adds	r7, #168	; 0xa8
    2ad0:	693b      	ldr	r3, [r7, #16]
    2ad2:	687a      	ldr	r2, [r7, #4]
    2ad4:	601a      	str	r2, [r3, #0]
    }
    m_cs=1;//SPI_SELN_HIGH();
    return length;
}
    2ad6:	1c30      	adds	r0, r6, #0
    2ad8:	b003      	add	sp, #12
    2ada:	bc0c      	pop	{r2, r3}
    2adc:	4691      	mov	r9, r2
    2ade:	469a      	mov	sl, r3
    2ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ae2:	46c0      	nop			; (mov r8, r8)
    2ae4:	0000e988 	.word	0x0000e988
    2ae8:	0000e9a0 	.word	0x0000e9a0
    2aec:	00004e39 	.word	0x00004e39
    2af0:	00004b85 	.word	0x00004b85

00002af4 <_ZN8cMxRadio15rf_irq_callbackEv>:


/* === globals ============================================================= */

void cMxRadio::rf_irq_callback()
{
    2af4:	b538      	push	{r3, r4, r5, lr}
    2af6:	1c04      	adds	r4, r0, #0

uint8_t cause;
    //DI_TRX_IRQ();
    //sei();
    cause = trx_reg_read(RG_IRQ_STATUS);
    2af8:	210f      	movs	r1, #15
    2afa:	4b0c      	ldr	r3, [pc, #48]	; (2b2c <_ZN8cMxRadio15rf_irq_callbackEv+0x38>)
    2afc:	4798      	blx	r3
    2afe:	1c05      	adds	r5, r0, #0

    if (cause & TRX_IRQ_RX_START)
    2b00:	0743      	lsls	r3, r0, #29
    2b02:	d504      	bpl.n	2b0e <_ZN8cMxRadio15rf_irq_callbackEv+0x1a>
    {
    	temprssi = trx_reg_read(RG_PHY_RSSI);
    2b04:	1c20      	adds	r0, r4, #0
    2b06:	2106      	movs	r1, #6
    2b08:	4b08      	ldr	r3, [pc, #32]	; (2b2c <_ZN8cMxRadio15rf_irq_callbackEv+0x38>)
    2b0a:	4798      	blx	r3
    2b0c:	7020      	strb	r0, [r4, #0]
    	//temped = trx_reg_read(RG_PHY_ED_LEVEL);
    }

    if (cause & TRX_IRQ_TRX_END)
    2b0e:	072b      	lsls	r3, r5, #28
    2b10:	d507      	bpl.n	2b22 <_ZN8cMxRadio15rf_irq_callbackEv+0x2e>
    {
    	if (temprssi==0)
    2b12:	7823      	ldrb	r3, [r4, #0]
    2b14:	2b00      	cmp	r3, #0
    2b16:	d104      	bne.n	2b22 <_ZN8cMxRadio15rf_irq_callbackEv+0x2e>
    		temprssi = trx_reg_read(RG_PHY_RSSI);
    2b18:	1c20      	adds	r0, r4, #0
    2b1a:	2106      	movs	r1, #6
    2b1c:	4b03      	ldr	r3, [pc, #12]	; (2b2c <_ZN8cMxRadio15rf_irq_callbackEv+0x38>)
    2b1e:	4798      	blx	r3
    2b20:	7020      	strb	r0, [r4, #0]
    	//temped = trx_reg_read(RG_PHY_ED_LEVEL);
    }
    radio_irq_handler(cause);
    2b22:	1c20      	adds	r0, r4, #0
    2b24:	1c29      	adds	r1, r5, #0
    2b26:	4b02      	ldr	r3, [pc, #8]	; (2b30 <_ZN8cMxRadio15rf_irq_callbackEv+0x3c>)
    2b28:	4798      	blx	r3
    //cli();
    //EI_TRX_IRQ();
}
    2b2a:	bd38      	pop	{r3, r4, r5, pc}
    2b2c:	000028f9 	.word	0x000028f9
    2b30:	00002599 	.word	0x00002599

00002b34 <_Z12kernelConfigv>:
 * Created: 13/05/2016 16:34:52
 *  Author: MORAND Baptiste
 */ 
#include "utask.h"

void kernelConfig(void){
    2b34:	b530      	push	{r4, r5, lr}
    2b36:	b085      	sub	sp, #20

	hmi.printf("kernel config\r\n");
    2b38:	480e      	ldr	r0, [pc, #56]	; (2b74 <_Z12kernelConfigv+0x40>)
    2b3a:	490f      	ldr	r1, [pc, #60]	; (2b78 <_Z12kernelConfigv+0x44>)
    2b3c:	4b0f      	ldr	r3, [pc, #60]	; (2b7c <_Z12kernelConfigv+0x48>)
    2b3e:	4798      	blx	r3
	// tasks creations
	xTaskCreate((pdTASK_CODE)HMITask,(const signed char*)"HMI",configMINIMAL_STACK_SIZE,NULL, tskIDLE_PRIORITY +1, NULL);
    2b40:	2301      	movs	r3, #1
    2b42:	9300      	str	r3, [sp, #0]
    2b44:	2400      	movs	r4, #0
    2b46:	9401      	str	r4, [sp, #4]
    2b48:	9402      	str	r4, [sp, #8]
    2b4a:	9403      	str	r4, [sp, #12]
    2b4c:	480c      	ldr	r0, [pc, #48]	; (2b80 <_Z12kernelConfigv+0x4c>)
    2b4e:	490d      	ldr	r1, [pc, #52]	; (2b84 <_Z12kernelConfigv+0x50>)
    2b50:	2296      	movs	r2, #150	; 0x96
    2b52:	0052      	lsls	r2, r2, #1
    2b54:	2300      	movs	r3, #0
    2b56:	4d0c      	ldr	r5, [pc, #48]	; (2b88 <_Z12kernelConfigv+0x54>)
    2b58:	47a8      	blx	r5
	xTaskCreate((pdTASK_CODE)timeProtocolTask,(const signed char*)"time",configMINIMAL_STACK_SIZE+600,NULL, tskIDLE_PRIORITY +3, NULL);
    2b5a:	2303      	movs	r3, #3
    2b5c:	9300      	str	r3, [sp, #0]
    2b5e:	9401      	str	r4, [sp, #4]
    2b60:	9402      	str	r4, [sp, #8]
    2b62:	9403      	str	r4, [sp, #12]
    2b64:	4809      	ldr	r0, [pc, #36]	; (2b8c <_Z12kernelConfigv+0x58>)
    2b66:	490a      	ldr	r1, [pc, #40]	; (2b90 <_Z12kernelConfigv+0x5c>)
    2b68:	22e1      	movs	r2, #225	; 0xe1
    2b6a:	0092      	lsls	r2, r2, #2
    2b6c:	2300      	movs	r3, #0
    2b6e:	47a8      	blx	r5
	//xTaskCreate((pdTASK_CODE)ledBlinkTask,(const signed char*)"led",configMINIMAL_STACK_SIZE,NULL, tskIDLE_PRIORITY +4, NULL);
	//xTaskCreate((pdTASK_CODE)gpsUartTask,(const signed char*)"gps",configMINIMAL_STACK_SIZE,NULL, tskIDLE_PRIORITY +2, NULL);
}
    2b70:	b005      	add	sp, #20
    2b72:	bd30      	pop	{r4, r5, pc}
    2b74:	20004594 	.word	0x20004594
    2b78:	0000eb84 	.word	0x0000eb84
    2b7c:	00004e11 	.word	0x00004e11
    2b80:	00003a85 	.word	0x00003a85
    2b84:	0000eb94 	.word	0x0000eb94
    2b88:	000008d9 	.word	0x000008d9
    2b8c:	000038f1 	.word	0x000038f1
    2b90:	0000eb98 	.word	0x0000eb98

00002b94 <_Z6ppsISRv>:
char messageHMIError[100];
/** Callback function for the EXTINT driver, called when an external interrupt
 *  detection occurs.
 */
void ppsISR(void)
{	
    2b94:	b530      	push	{r4, r5, lr}
    2b96:	b08f      	sub	sp, #60	; 0x3c
	wdt_clear();
    2b98:	4b1c      	ldr	r3, [pc, #112]	; (2c0c <_Z6ppsISRv+0x78>)
    2b9a:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    2b9c:	b672      	cpsid	i
    2b9e:	f3bf 8f5f 	dmb	sy
	Disable_global_interrupt();
    2ba2:	2300      	movs	r3, #0
    2ba4:	4a1a      	ldr	r2, [pc, #104]	; (2c10 <_Z6ppsISRv+0x7c>)
    2ba6:	7013      	strb	r3, [r2, #0]
	Clock timeCopy={0,0,true};
    2ba8:	ad08      	add	r5, sp, #32
    2baa:	9308      	str	r3, [sp, #32]
    2bac:	9309      	str	r3, [sp, #36]	; 0x24
    2bae:	2201      	movs	r2, #1
    2bb0:	722a      	strb	r2, [r5, #8]
	//Disable_global_interrupt();
	Clock timeMaster={0,0,true};
    2bb2:	ac0b      	add	r4, sp, #44	; 0x2c
    2bb4:	930b      	str	r3, [sp, #44]	; 0x2c
    2bb6:	930c      	str	r3, [sp, #48]	; 0x30
    2bb8:	7222      	strb	r2, [r4, #8]
	readClock(&timeCopy);
    2bba:	1c28      	adds	r0, r5, #0
    2bbc:	4b15      	ldr	r3, [pc, #84]	; (2c14 <_Z6ppsISRv+0x80>)
    2bbe:	4798      	blx	r3
	
	//Enable_global_interrupt();
	timeMaster.second=timeCopy.second;
    2bc0:	9b08      	ldr	r3, [sp, #32]
    2bc2:	930b      	str	r3, [sp, #44]	; 0x2c
	timeMaster.halfmillis=timeCopy.halfmillis;
    2bc4:	686b      	ldr	r3, [r5, #4]
    2bc6:	6063      	str	r3, [r4, #4]
	if(timeMaster.halfmillis>=RTC_FREQ/2){//for the accurate 500ms
    2bc8:	6862      	ldr	r2, [r4, #4]
    2bca:	4b13      	ldr	r3, [pc, #76]	; (2c18 <_Z6ppsISRv+0x84>)
    2bcc:	429a      	cmp	r2, r3
    2bce:	d902      	bls.n	2bd6 <_Z6ppsISRv+0x42>
		timeMaster.second++;
    2bd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2bd2:	3301      	adds	r3, #1
    2bd4:	930b      	str	r3, [sp, #44]	; 0x2c
	}
	timeMaster.halfmillis=0;
    2bd6:	2300      	movs	r3, #0
    2bd8:	930c      	str	r3, [sp, #48]	; 0x30
	
	timeProt.offset=subClock(timeMaster,timeCopy);
    2bda:	ac04      	add	r4, sp, #16
    2bdc:	ab08      	add	r3, sp, #32
    2bde:	466a      	mov	r2, sp
    2be0:	cb23      	ldmia	r3!, {r0, r1, r5}
    2be2:	c223      	stmia	r2!, {r0, r1, r5}
    2be4:	1c20      	adds	r0, r4, #0
    2be6:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2be8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    2bea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2bec:	4d0b      	ldr	r5, [pc, #44]	; (2c1c <_Z6ppsISRv+0x88>)
    2bee:	47a8      	blx	r5
    2bf0:	4b0b      	ldr	r3, [pc, #44]	; (2c20 <_Z6ppsISRv+0x8c>)
    2bf2:	3398      	adds	r3, #152	; 0x98
    2bf4:	cc07      	ldmia	r4!, {r0, r1, r2}
    2bf6:	c307      	stmia	r3!, {r0, r1, r2}
	//timeProt.offset.second=0;
	//report(timeProt.offset,1);
	#ifdef MASTERMODE
		updateClock();
    2bf8:	4b0a      	ldr	r3, [pc, #40]	; (2c24 <_Z6ppsISRv+0x90>)
    2bfa:	4798      	blx	r3
		else{
			sprintf(messageHMIError,"		-%lu",offset);
		}
		sendHMI(messageHMIError);
	#endif
		Enable_global_interrupt();
    2bfc:	2201      	movs	r2, #1
    2bfe:	4b04      	ldr	r3, [pc, #16]	; (2c10 <_Z6ppsISRv+0x7c>)
    2c00:	701a      	strb	r2, [r3, #0]
    2c02:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    2c06:	b662      	cpsie	i
		

}
    2c08:	b00f      	add	sp, #60	; 0x3c
    2c0a:	bd30      	pop	{r4, r5, pc}
    2c0c:	000002c9 	.word	0x000002c9
    2c10:	200000d0 	.word	0x200000d0
    2c14:	00001559 	.word	0x00001559
    2c18:	00003e7f 	.word	0x00003e7f
    2c1c:	000012d5 	.word	0x000012d5
    2c20:	200042cc 	.word	0x200042cc
    2c24:	0000340d 	.word	0x0000340d

00002c28 <_Z16configurationPPSv>:

void configurationPPS(void){
    2c28:	b510      	push	{r4, lr}
    2c2a:	b084      	sub	sp, #16
		hmi.printf("confif pps\r\n");
    2c2c:	480e      	ldr	r0, [pc, #56]	; (2c68 <_Z16configurationPPSv+0x40>)
    2c2e:	490f      	ldr	r1, [pc, #60]	; (2c6c <_Z16configurationPPSv+0x44>)
    2c30:	4b0f      	ldr	r3, [pc, #60]	; (2c70 <_Z16configurationPPSv+0x48>)
    2c32:	4798      	blx	r3
	//	pps.rise(ppsISR);
		struct extint_chan_conf eint_chan_conf;
		extint_chan_get_config_defaults(&eint_chan_conf);
    2c34:	ac01      	add	r4, sp, #4
    2c36:	1c20      	adds	r0, r4, #0
    2c38:	4b0e      	ldr	r3, [pc, #56]	; (2c74 <_Z16configurationPPSv+0x4c>)
    2c3a:	4798      	blx	r3
		// put the button as EXTINT
		eint_chan_conf.gpio_pin           = PIN_PA28A_EIC_EXTINT8;
    2c3c:	231c      	movs	r3, #28
    2c3e:	9301      	str	r3, [sp, #4]
		eint_chan_conf.gpio_pin_mux       = MUX_PA28A_EIC_EXTINT8;
    2c40:	2300      	movs	r3, #0
    2c42:	6063      	str	r3, [r4, #4]
		eint_chan_conf.detection_criteria = EXTINT_DETECT_RISING;
    2c44:	2201      	movs	r2, #1
    2c46:	72e2      	strb	r2, [r4, #11]
		eint_chan_conf.filter_input_signal = false;
    2c48:	72a3      	strb	r3, [r4, #10]
		
		extint_chan_set_config(8, &eint_chan_conf);
    2c4a:	2008      	movs	r0, #8
    2c4c:	1c21      	adds	r1, r4, #0
    2c4e:	4b0a      	ldr	r3, [pc, #40]	; (2c78 <_Z16configurationPPSv+0x50>)
    2c50:	4798      	blx	r3
		//configuration callback
		extint_register_callback(&ppsISR,8,EXTINT_CALLBACK_TYPE_DETECT);
    2c52:	480a      	ldr	r0, [pc, #40]	; (2c7c <_Z16configurationPPSv+0x54>)
    2c54:	2108      	movs	r1, #8
    2c56:	2200      	movs	r2, #0
    2c58:	4b09      	ldr	r3, [pc, #36]	; (2c80 <_Z16configurationPPSv+0x58>)
    2c5a:	4798      	blx	r3
		//activation callback
		extint_chan_enable_callback(8,EXTINT_CALLBACK_TYPE_DETECT);		
    2c5c:	2008      	movs	r0, #8
    2c5e:	2100      	movs	r1, #0
    2c60:	4b08      	ldr	r3, [pc, #32]	; (2c84 <_Z16configurationPPSv+0x5c>)
    2c62:	4798      	blx	r3
		
		
    2c64:	b004      	add	sp, #16
    2c66:	bd10      	pop	{r4, pc}
    2c68:	20004594 	.word	0x20004594
    2c6c:	0000eba0 	.word	0x0000eba0
    2c70:	00004e11 	.word	0x00004e11
    2c74:	00004035 	.word	0x00004035
    2c78:	00004049 	.word	0x00004049
    2c7c:	00002b95 	.word	0x00002b95
    2c80:	00003f35 	.word	0x00003f35
    2c84:	00003f5d 	.word	0x00003f5d

00002c88 <_ZN4mbed10SerialBaseD1Ev>:
#endif

protected:
    SerialBase(PinName tx, PinName rx);
    virtual ~SerialBase() {
    }
    2c88:	4770      	bx	lr
    2c8a:	46c0      	nop			; (mov r8, r8)

00002c8c <_ZN4mbed6SerialD1Ev>:
 * int main() {
 *     pc.printf("Hello World\n");
 * }
 * @endcode
 */
class Serial : public SerialBase, public Stream {
    2c8c:	b510      	push	{r4, lr}
    2c8e:	1c04      	adds	r4, r0, #0
    2c90:	4b06      	ldr	r3, [pc, #24]	; (2cac <_ZN4mbed6SerialD1Ev+0x20>)
    2c92:	6003      	str	r3, [r0, #0]
    2c94:	1c19      	adds	r1, r3, #0
    2c96:	3118      	adds	r1, #24
    2c98:	22dc      	movs	r2, #220	; 0xdc
    2c9a:	5081      	str	r1, [r0, r2]
    2c9c:	334c      	adds	r3, #76	; 0x4c
    2c9e:	3204      	adds	r2, #4
    2ca0:	5083      	str	r3, [r0, r2]
    2ca2:	30dc      	adds	r0, #220	; 0xdc
    2ca4:	4b02      	ldr	r3, [pc, #8]	; (2cb0 <_ZN4mbed6SerialD1Ev+0x24>)
    2ca6:	4798      	blx	r3
    2ca8:	1c20      	adds	r0, r4, #0
    2caa:	bd10      	pop	{r4, pc}
    2cac:	0000f0a0 	.word	0x0000f0a0
    2cb0:	00004dd5 	.word	0x00004dd5

00002cb4 <_ZThn220_N4mbed6SerialD1Ev>:
    2cb4:	b408      	push	{r3}
    2cb6:	4b02      	ldr	r3, [pc, #8]	; (2cc0 <_ZThn220_N4mbed6SerialD1Ev+0xc>)
    2cb8:	469c      	mov	ip, r3
    2cba:	38dc      	subs	r0, #220	; 0xdc
    2cbc:	bc08      	pop	{r3}
    2cbe:	4760      	bx	ip
    2cc0:	00002c8d 	.word	0x00002c8d

00002cc4 <_ZThn224_N4mbed6SerialD1Ev>:
    2cc4:	b408      	push	{r3}
    2cc6:	4b02      	ldr	r3, [pc, #8]	; (2cd0 <_ZThn224_N4mbed6SerialD1Ev+0xc>)
    2cc8:	469c      	mov	ip, r3
    2cca:	38e0      	subs	r0, #224	; 0xe0
    2ccc:	bc08      	pop	{r3}
    2cce:	4760      	bx	ip
    2cd0:	00002c8d 	.word	0x00002c8d

00002cd4 <_ZN4mbed10SerialBaseD0Ev>:
    void interrupt_handler_asynch(void);
#endif

protected:
    SerialBase(PinName tx, PinName rx);
    virtual ~SerialBase() {
    2cd4:	b510      	push	{r4, lr}
    2cd6:	1c04      	adds	r4, r0, #0
    }
    2cd8:	4b01      	ldr	r3, [pc, #4]	; (2ce0 <_ZN4mbed10SerialBaseD0Ev+0xc>)
    2cda:	4798      	blx	r3
    2cdc:	1c20      	adds	r0, r4, #0
    2cde:	bd10      	pop	{r4, pc}
    2ce0:	0000652b 	.word	0x0000652b

00002ce4 <_Z6report11structClocki>:
#endif
/************************************************************************/
/* FUNCTION                                                             */
/************************************************************************/

void report(Clock offset,int type){//type=1 for master type=2 for slave
    2ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ce6:	b0e9      	sub	sp, #420	; 0x1a4
    2ce8:	ac01      	add	r4, sp, #4
    2cea:	9001      	str	r0, [sp, #4]
    2cec:	9102      	str	r1, [sp, #8]
    2cee:	9203      	str	r2, [sp, #12]
	#ifdef MASTERMODE
		uint8_t i;
	
		uint8_t buffer[100];
		uint8_t send[CLP_UTILITY_MAX_PACKET_SIZE];
		buffer[0] = 'V';
    2cf0:	aa04      	add	r2, sp, #16
    2cf2:	2156      	movs	r1, #86	; 0x56
    2cf4:	7011      	strb	r1, [r2, #0]
	
		buffer[1] = type;
    2cf6:	7053      	strb	r3, [r2, #1]


		//data
		long int time= offset.second*32000+offset.halfmillis;
    2cf8:	9901      	ldr	r1, [sp, #4]
    2cfa:	9a02      	ldr	r2, [sp, #8]
    2cfc:	23fa      	movs	r3, #250	; 0xfa
    2cfe:	01db      	lsls	r3, r3, #7
    2d00:	434b      	muls	r3, r1
    2d02:	189b      	adds	r3, r3, r2
		if(offset.sign==false){
    2d04:	7a22      	ldrb	r2, [r4, #8]
    2d06:	2a00      	cmp	r2, #0
    2d08:	d100      	bne.n	2d0c <_Z6report11structClocki+0x28>
			time=-time;	
    2d0a:	425b      	negs	r3, r3
		}
		buffer[2]=(uint8_t)(time&0x00FF);
    2d0c:	aa04      	add	r2, sp, #16
    2d0e:	7093      	strb	r3, [r2, #2]
		buffer[3]=(uint8_t)((time>>8)&0x00FF);
    2d10:	1219      	asrs	r1, r3, #8
    2d12:	70d1      	strb	r1, [r2, #3]
		buffer[4]=(uint8_t)((time>>16)&0x00FF);
    2d14:	1419      	asrs	r1, r3, #16
    2d16:	7111      	strb	r1, [r2, #4]
		buffer[5]=(uint8_t)((time>>24)&0x00FF);
    2d18:	0e1b      	lsrs	r3, r3, #24
    2d1a:	7153      	strb	r3, [r2, #5]
	
		size_t length = CLP_GeneratePacket(send, buffer, 6);
    2d1c:	a81d      	add	r0, sp, #116	; 0x74
    2d1e:	1c11      	adds	r1, r2, #0
    2d20:	2206      	movs	r2, #6
    2d22:	4b09      	ldr	r3, [pc, #36]	; (2d48 <_Z6report11structClocki+0x64>)
    2d24:	4798      	blx	r3
    2d26:	1e06      	subs	r6, r0, #0

		for(i=0;i<length;i++){
    2d28:	d00b      	beq.n	2d42 <_Z6report11structClocki+0x5e>
    2d2a:	2400      	movs	r4, #0
			pc.putc(send[i]);
    2d2c:	4d07      	ldr	r5, [pc, #28]	; (2d4c <_Z6report11structClocki+0x68>)
    2d2e:	35dc      	adds	r5, #220	; 0xdc
    2d30:	4f07      	ldr	r7, [pc, #28]	; (2d50 <_Z6report11structClocki+0x6c>)
    2d32:	ab1d      	add	r3, sp, #116	; 0x74
    2d34:	5d19      	ldrb	r1, [r3, r4]
    2d36:	1c28      	adds	r0, r5, #0
    2d38:	47b8      	blx	r7
		buffer[4]=(uint8_t)((time>>16)&0x00FF);
		buffer[5]=(uint8_t)((time>>24)&0x00FF);
	
		size_t length = CLP_GeneratePacket(send, buffer, 6);

		for(i=0;i<length;i++){
    2d3a:	3401      	adds	r4, #1
    2d3c:	b2e4      	uxtb	r4, r4
    2d3e:	42a6      	cmp	r6, r4
    2d40:	d8f7      	bhi.n	2d32 <_Z6report11structClocki+0x4e>
	#endif
	
	
	
	
}
    2d42:	b069      	add	sp, #420	; 0x1a4
    2d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d46:	46c0      	nop			; (mov r8, r8)
    2d48:	0000017d 	.word	0x0000017d
    2d4c:	20004104 	.word	0x20004104
    2d50:	00004df9 	.word	0x00004df9

00002d54 <_Z4pgcdii>:
	}
	
}


int pgcd( int a ,int b){
    2d54:	b510      	push	{r4, lr}
	int i=0;
	while ((!(a*b == 0))&&(i<1000)) {
    2d56:	1c0b      	adds	r3, r1, #0
    2d58:	4343      	muls	r3, r0
    2d5a:	2b00      	cmp	r3, #0
    2d5c:	d013      	beq.n	2d86 <_Z4pgcdii+0x32>
    2d5e:	2300      	movs	r3, #0
    2d60:	24fa      	movs	r4, #250	; 0xfa
    2d62:	00a4      	lsls	r4, r4, #2
		if (a>b) {
    2d64:	4288      	cmp	r0, r1
    2d66:	dd01      	ble.n	2d6c <_Z4pgcdii+0x18>
			a = a - b ;
    2d68:	1a40      	subs	r0, r0, r1
    2d6a:	e000      	b.n	2d6e <_Z4pgcdii+0x1a>
		}
		else{
			b = b - a ;
    2d6c:	1a09      	subs	r1, r1, r0
		}
		i++;
    2d6e:	3301      	adds	r3, #1
}


int pgcd( int a ,int b){
	int i=0;
	while ((!(a*b == 0))&&(i<1000)) {
    2d70:	1c0a      	adds	r2, r1, #0
    2d72:	4342      	muls	r2, r0
    2d74:	2a00      	cmp	r2, #0
    2d76:	d003      	beq.n	2d80 <_Z4pgcdii+0x2c>
    2d78:	42a3      	cmp	r3, r4
    2d7a:	d1f3      	bne.n	2d64 <_Z4pgcdii+0x10>
			b = b - a ;
		}
		i++;
	}
	if(i>=1000){
		return 1;
    2d7c:	2101      	movs	r1, #1
    2d7e:	e007      	b.n	2d90 <_Z4pgcdii+0x3c>
		else{
			b = b - a ;
		}
		i++;
	}
	if(i>=1000){
    2d80:	4a04      	ldr	r2, [pc, #16]	; (2d94 <_Z4pgcdii+0x40>)
    2d82:	4293      	cmp	r3, r2
    2d84:	dc03      	bgt.n	2d8e <_Z4pgcdii+0x3a>
		return 1;
	}
	if(a==0){
    2d86:	2800      	cmp	r0, #0
    2d88:	d002      	beq.n	2d90 <_Z4pgcdii+0x3c>
    2d8a:	1c01      	adds	r1, r0, #0
    2d8c:	e000      	b.n	2d90 <_Z4pgcdii+0x3c>
			b = b - a ;
		}
		i++;
	}
	if(i>=1000){
		return 1;
    2d8e:	2101      	movs	r1, #1
	}
	else{
		return a;
	}
	return a;
}
    2d90:	1c08      	adds	r0, r1, #0
    2d92:	bd10      	pop	{r4, pc}
    2d94:	000003e7 	.word	0x000003e7

00002d98 <_Z24resetSofftwareCorrectionv>:

void resetSofftwareCorrection(void){

		sumOffset.second=0;
    2d98:	4a06      	ldr	r2, [pc, #24]	; (2db4 <_Z24resetSofftwareCorrectionv+0x1c>)
    2d9a:	2300      	movs	r3, #0
    2d9c:	6013      	str	r3, [r2, #0]
		sumOffset.halfmillis=0;
    2d9e:	6053      	str	r3, [r2, #4]
		timeProt.correction.nbCorrection=0;
    2da0:	4a05      	ldr	r2, [pc, #20]	; (2db8 <_Z24resetSofftwareCorrectionv+0x20>)
    2da2:	21a4      	movs	r1, #164	; 0xa4
    2da4:	5053      	str	r3, [r2, r1]
		timeProt.correction.sumTime.second=0;
    2da6:	3120      	adds	r1, #32
    2da8:	5053      	str	r3, [r2, r1]
		timeProt.correction.sumTime.halfmillis=0;
    2daa:	3104      	adds	r1, #4
    2dac:	5053      	str	r3, [r2, r1]
		timeProt.correction.currentTimeOffsetSync.second=0;// to not take the first value
    2dae:	3910      	subs	r1, #16
    2db0:	5053      	str	r3, [r2, r1]
}
    2db2:	4770      	bx	lr
    2db4:	200041f8 	.word	0x200041f8
    2db8:	200042cc 	.word	0x200042cc

00002dbc <_Z17sofwareCorrectionv>:
			}
	}
	
}

void sofwareCorrection(){
    2dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2dbe:	465f      	mov	r7, fp
    2dc0:	4656      	mov	r6, sl
    2dc2:	464d      	mov	r5, r9
    2dc4:	4644      	mov	r4, r8
    2dc6:	b4f0      	push	{r4, r5, r6, r7}
    2dc8:	b091      	sub	sp, #68	; 0x44
	if(timeProt.correction.nbCorrection!=0){
    2dca:	23a4      	movs	r3, #164	; 0xa4
    2dcc:	4ac2      	ldr	r2, [pc, #776]	; (30d8 <_Z17sofwareCorrectionv+0x31c>)
    2dce:	58d3      	ldr	r3, [r2, r3]
    2dd0:	2b00      	cmp	r3, #0
    2dd2:	d100      	bne.n	2dd6 <_Z17sofwareCorrectionv+0x1a>
    2dd4:	e178      	b.n	30c8 <_Z17sofwareCorrectionv+0x30c>
	//	printf("nb corr : %d",timeProt.correction.nbCorrection);
		sendHMI("	Software Correction ");
    2dd6:	48c1      	ldr	r0, [pc, #772]	; (30dc <_Z17sofwareCorrectionv+0x320>)
    2dd8:	4bc1      	ldr	r3, [pc, #772]	; (30e0 <_Z17sofwareCorrectionv+0x324>)
    2dda:	4798      	blx	r3
		//interval of time
		Clock averageTime;
		Clock averageOffset;
		Clock sumOffsetl;
		float fcorr=0;
		int indice=timeProt.correction.indiceFull;
    2ddc:	49be      	ldr	r1, [pc, #760]	; (30d8 <_Z17sofwareCorrectionv+0x31c>)
    2dde:	2322      	movs	r3, #34	; 0x22
    2de0:	33ff      	adds	r3, #255	; 0xff
    2de2:	5cc8      	ldrb	r0, [r1, r3]
			

		sumOffsetl=sumOffset;
    2de4:	ab0d      	add	r3, sp, #52	; 0x34
    2de6:	4abf      	ldr	r2, [pc, #764]	; (30e4 <_Z17sofwareCorrectionv+0x328>)
    2de8:	1c1c      	adds	r4, r3, #0
    2dea:	cae0      	ldmia	r2!, {r5, r6, r7}
    2dec:	c4e0      	stmia	r4!, {r5, r6, r7}

		
		//sign change
		if(timeProt.correction.valueCor!=sumOffsetl.sign){//if the sum of the offset change of sign error ze reset the software corection 
    2dee:	22a8      	movs	r2, #168	; 0xa8
    2df0:	5c8a      	ldrb	r2, [r1, r2]
    2df2:	7a19      	ldrb	r1, [r3, #8]
    2df4:	b2d3      	uxtb	r3, r2
		//interval of time
		Clock averageTime;
		Clock averageOffset;
		Clock sumOffsetl;
		float fcorr=0;
		int indice=timeProt.correction.indiceFull;
    2df6:	4680      	mov	r8, r0

		sumOffsetl=sumOffset;

		
		//sign change
		if(timeProt.correction.valueCor!=sumOffsetl.sign){//if the sum of the offset change of sign error ze reset the software corection 
    2df8:	428b      	cmp	r3, r1
    2dfa:	d006      	beq.n	2e0a <_Z17sofwareCorrectionv+0x4e>
			indice=0;
			timeProt.correction.indiceMoySoftCor=0;
    2dfc:	2100      	movs	r1, #0
    2dfe:	2390      	movs	r3, #144	; 0x90
    2e00:	005b      	lsls	r3, r3, #1
    2e02:	4ab5      	ldr	r2, [pc, #724]	; (30d8 <_Z17sofwareCorrectionv+0x31c>)
    2e04:	54d1      	strb	r1, [r2, r3]
		sumOffsetl=sumOffset;

		
		//sign change
		if(timeProt.correction.valueCor!=sumOffsetl.sign){//if the sum of the offset change of sign error ze reset the software corection 
			indice=0;
    2e06:	2300      	movs	r3, #0
    2e08:	4698      	mov	r8, r3
			timeProt.correction.indiceMoySoftCor=0;
		
		}
		
		float second=(float)timeProt.correction.sumTime.second/timeProt.correction.nbCorrection;
    2e0a:	4fb3      	ldr	r7, [pc, #716]	; (30d8 <_Z17sofwareCorrectionv+0x31c>)
    2e0c:	23c4      	movs	r3, #196	; 0xc4
    2e0e:	58f8      	ldr	r0, [r7, r3]
    2e10:	3b20      	subs	r3, #32
    2e12:	58fc      	ldr	r4, [r7, r3]
    2e14:	4eb4      	ldr	r6, [pc, #720]	; (30e8 <_Z17sofwareCorrectionv+0x32c>)
    2e16:	47b0      	blx	r6
    2e18:	1c05      	adds	r5, r0, #0
    2e1a:	1c20      	adds	r0, r4, #0
    2e1c:	47b0      	blx	r6
    2e1e:	1c01      	adds	r1, r0, #0
    2e20:	1c28      	adds	r0, r5, #0
    2e22:	4bb2      	ldr	r3, [pc, #712]	; (30ec <_Z17sofwareCorrectionv+0x330>)
    2e24:	4798      	blx	r3
    2e26:	1c05      	adds	r5, r0, #0
		int secondi=(int)second;
    2e28:	4bb1      	ldr	r3, [pc, #708]	; (30f0 <_Z17sofwareCorrectionv+0x334>)
    2e2a:	4798      	blx	r3
    2e2c:	1c06      	adds	r6, r0, #0
				//calcul average time
				//printf("second : %d,%d",secondi,(int)((second-secondi)*1000.0));
				
		averageTime.second=secondi;
    2e2e:	9007      	str	r0, [sp, #28]
		averageTime.halfmillis=(timeProt.correction.sumTime.halfmillis/timeProt.correction.nbCorrection)+RTC_FREQ*1.0*((float)(second-secondi));
    2e30:	23c8      	movs	r3, #200	; 0xc8
    2e32:	58f8      	ldr	r0, [r7, r3]
    2e34:	4faf      	ldr	r7, [pc, #700]	; (30f4 <_Z17sofwareCorrectionv+0x338>)
    2e36:	1c21      	adds	r1, r4, #0
    2e38:	47b8      	blx	r7
    2e3a:	4baf      	ldr	r3, [pc, #700]	; (30f8 <_Z17sofwareCorrectionv+0x33c>)
    2e3c:	4798      	blx	r3
    2e3e:	9002      	str	r0, [sp, #8]
    2e40:	9103      	str	r1, [sp, #12]
    2e42:	1c30      	adds	r0, r6, #0
    2e44:	4bad      	ldr	r3, [pc, #692]	; (30fc <_Z17sofwareCorrectionv+0x340>)
    2e46:	4798      	blx	r3
    2e48:	1c01      	adds	r1, r0, #0
    2e4a:	1c28      	adds	r0, r5, #0
    2e4c:	4bac      	ldr	r3, [pc, #688]	; (3100 <_Z17sofwareCorrectionv+0x344>)
    2e4e:	4798      	blx	r3
    2e50:	4bac      	ldr	r3, [pc, #688]	; (3104 <_Z17sofwareCorrectionv+0x348>)
    2e52:	4798      	blx	r3
    2e54:	2200      	movs	r2, #0
    2e56:	4bac      	ldr	r3, [pc, #688]	; (3108 <_Z17sofwareCorrectionv+0x34c>)
    2e58:	4dac      	ldr	r5, [pc, #688]	; (310c <_Z17sofwareCorrectionv+0x350>)
    2e5a:	47a8      	blx	r5
    2e5c:	1c02      	adds	r2, r0, #0
    2e5e:	1c0b      	adds	r3, r1, #0
    2e60:	9802      	ldr	r0, [sp, #8]
    2e62:	9903      	ldr	r1, [sp, #12]
    2e64:	4daa      	ldr	r5, [pc, #680]	; (3110 <_Z17sofwareCorrectionv+0x354>)
    2e66:	47a8      	blx	r5
    2e68:	4baa      	ldr	r3, [pc, #680]	; (3114 <_Z17sofwareCorrectionv+0x358>)
    2e6a:	4798      	blx	r3
    2e6c:	9008      	str	r0, [sp, #32]
		//unsigned long int averageTimeli=(averageTime.second*2000)+(averageTime.halfmillis);
		//calcul average offset
		averageOffset.second=sumOffset.second/timeProt.correction.nbCorrection;
    2e6e:	4e9d      	ldr	r6, [pc, #628]	; (30e4 <_Z17sofwareCorrectionv+0x328>)
    2e70:	6830      	ldr	r0, [r6, #0]
    2e72:	1c21      	adds	r1, r4, #0
    2e74:	47b8      	blx	r7
    2e76:	ad0a      	add	r5, sp, #40	; 0x28
    2e78:	900a      	str	r0, [sp, #40]	; 0x28
		averageOffset.halfmillis=sumOffset.halfmillis/timeProt.correction.nbCorrection;
    2e7a:	6870      	ldr	r0, [r6, #4]
    2e7c:	1c21      	adds	r1, r4, #0
    2e7e:	47b8      	blx	r7
    2e80:	6068      	str	r0, [r5, #4]
		averageOffset.sign=sumOffset.sign;
    2e82:	7a33      	ldrb	r3, [r6, #8]
    2e84:	b2db      	uxtb	r3, r3
    2e86:	722b      	strb	r3, [r5, #8]
		printfClock(averageTime);
		printf("averageOffseet: ");
		printfClock(averageOffset);*/
		
		//calcul of average time in hms
		unsigned long int diffhms=averageTime.second*RTC_FREQ+averageTime.halfmillis;
    2e88:	9807      	ldr	r0, [sp, #28]
    2e8a:	9a08      	ldr	r2, [sp, #32]
		//offset in hms
		long int offset=averageOffset.second*RTC_FREQ+averageOffset.halfmillis;
    2e8c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    2e8e:	6869      	ldr	r1, [r5, #4]
    2e90:	23fa      	movs	r3, #250	; 0xfa
    2e92:	01db      	lsls	r3, r3, #7
    2e94:	4363      	muls	r3, r4
    2e96:	185f      	adds	r7, r3, r1
		if (averageOffset.sign==false)
    2e98:	7a2b      	ldrb	r3, [r5, #8]
    2e9a:	2b00      	cmp	r3, #0
    2e9c:	d100      	bne.n	2ea0 <_Z17sofwareCorrectionv+0xe4>
		{
			offset=-offset;
    2e9e:	427f      	negs	r7, r7
		float correctionTime=0.0;
		int corr;
		int corrTime;
		int nbwait;
		
		corr=valueCor;
    2ea0:	4b9d      	ldr	r3, [pc, #628]	; (3118 <_Z17sofwareCorrectionv+0x35c>)
    2ea2:	681b      	ldr	r3, [r3, #0]
		nbwait=timeCorrection;
    2ea4:	4b9d      	ldr	r3, [pc, #628]	; (311c <_Z17sofwareCorrectionv+0x360>)
    2ea6:	681c      	ldr	r4, [r3, #0]
		corrTime=nbwait;		

		if(offset!=0){
    2ea8:	2f00      	cmp	r7, #0
    2eaa:	d100      	bne.n	2eae <_Z17sofwareCorrectionv+0xf2>
    2eac:	e0f8      	b.n	30a0 <_Z17sofwareCorrectionv+0x2e4>
					//printf("correction need %d(%d)\r\n",(int)fcorr,nbwait);	
					if(fcorr<0){
						fcorr=-fcorr;
					}
					
					while((nbwait<1000)&&(fcorr<0.5)){
    2eae:	4b9c      	ldr	r3, [pc, #624]	; (3120 <_Z17sofwareCorrectionv+0x364>)
    2eb0:	429c      	cmp	r4, r3
    2eb2:	dc27      	bgt.n	2f04 <_Z17sofwareCorrectionv+0x148>
		printfClock(averageTime);
		printf("averageOffseet: ");
		printfClock(averageOffset);*/
		
		//calcul of average time in hms
		unsigned long int diffhms=averageTime.second*RTC_FREQ+averageTime.halfmillis;
    2eb4:	23fa      	movs	r3, #250	; 0xfa
    2eb6:	01db      	lsls	r3, r3, #7
    2eb8:	4358      	muls	r0, r3
    2eba:	1880      	adds	r0, r0, r2
					if(fcorr<0){
						fcorr=-fcorr;
					}
					
					while((nbwait<1000)&&(fcorr<0.5)){
						fcorr=(float)((float)VALUE_TIMER*nbwait*offset*1.0)/(diffhms);
    2ebc:	4b8a      	ldr	r3, [pc, #552]	; (30e8 <_Z17sofwareCorrectionv+0x32c>)
    2ebe:	4798      	blx	r3
    2ec0:	9002      	str	r0, [sp, #8]
    2ec2:	4e8e      	ldr	r6, [pc, #568]	; (30fc <_Z17sofwareCorrectionv+0x340>)
    2ec4:	4d97      	ldr	r5, [pc, #604]	; (3124 <_Z17sofwareCorrectionv+0x368>)
    2ec6:	4b89      	ldr	r3, [pc, #548]	; (30ec <_Z17sofwareCorrectionv+0x330>)
    2ec8:	469a      	mov	sl, r3
					//printf("correction need %d(%d)\r\n",(int)fcorr,nbwait);	
					if(fcorr<0){
						fcorr=-fcorr;
					}
					
					while((nbwait<1000)&&(fcorr<0.5)){
    2eca:	23fa      	movs	r3, #250	; 0xfa
    2ecc:	009b      	lsls	r3, r3, #2
    2ece:	4699      	mov	r9, r3
    2ed0:	4b95      	ldr	r3, [pc, #596]	; (3128 <_Z17sofwareCorrectionv+0x36c>)
    2ed2:	469b      	mov	fp, r3
    2ed4:	9704      	str	r7, [sp, #16]
						fcorr=(float)((float)VALUE_TIMER*nbwait*offset*1.0)/(diffhms);
    2ed6:	1c20      	adds	r0, r4, #0
    2ed8:	47b0      	blx	r6
    2eda:	4994      	ldr	r1, [pc, #592]	; (312c <_Z17sofwareCorrectionv+0x370>)
    2edc:	47a8      	blx	r5
    2ede:	1c07      	adds	r7, r0, #0
    2ee0:	9804      	ldr	r0, [sp, #16]
    2ee2:	47b0      	blx	r6
    2ee4:	1c01      	adds	r1, r0, #0
    2ee6:	1c38      	adds	r0, r7, #0
    2ee8:	47a8      	blx	r5
    2eea:	9902      	ldr	r1, [sp, #8]
    2eec:	47d0      	blx	sl
    2eee:	1c07      	adds	r7, r0, #0
						nbwait++;
    2ef0:	3401      	adds	r4, #1
					//printf("correction need %d(%d)\r\n",(int)fcorr,nbwait);	
					if(fcorr<0){
						fcorr=-fcorr;
					}
					
					while((nbwait<1000)&&(fcorr<0.5)){
    2ef2:	454c      	cmp	r4, r9
    2ef4:	d009      	beq.n	2f0a <_Z17sofwareCorrectionv+0x14e>
    2ef6:	21fc      	movs	r1, #252	; 0xfc
    2ef8:	0589      	lsls	r1, r1, #22
    2efa:	47d8      	blx	fp
    2efc:	2800      	cmp	r0, #0
    2efe:	d1ea      	bne.n	2ed6 <_Z17sofwareCorrectionv+0x11a>
    2f00:	1c3a      	adds	r2, r7, #0
    2f02:	e003      	b.n	2f0c <_Z17sofwareCorrectionv+0x150>
    2f04:	2300      	movs	r3, #0
    2f06:	1c1a      	adds	r2, r3, #0
    2f08:	e000      	b.n	2f0c <_Z17sofwareCorrectionv+0x150>
    2f0a:	1c02      	adds	r2, r0, #0
					//fcorr=fcorr*RTC_FREQ;	
					

				//	printf("correction need %d/10(%d)\r\n",(int)fcorr*10,nbwait);			
					int i;
					timeProt.correction.moySoftCor[timeProt.correction.indiceMoySoftCor][0]=fcorr;
    2f0c:	4e72      	ldr	r6, [pc, #456]	; (30d8 <_Z17sofwareCorrectionv+0x31c>)
    2f0e:	2390      	movs	r3, #144	; 0x90
    2f10:	005b      	lsls	r3, r3, #1
    2f12:	5cf5      	ldrb	r5, [r6, r3]
    2f14:	1c2b      	adds	r3, r5, #0
    2f16:	3319      	adds	r3, #25
    2f18:	00db      	lsls	r3, r3, #3
    2f1a:	18f3      	adds	r3, r6, r3
    2f1c:	609a      	str	r2, [r3, #8]
					timeProt.correction.moySoftCor[timeProt.correction.indiceMoySoftCor][1]=nbwait;
    2f1e:	00eb      	lsls	r3, r5, #3
    2f20:	18f6      	adds	r6, r6, r3
    2f22:	36cc      	adds	r6, #204	; 0xcc
    2f24:	1c20      	adds	r0, r4, #0
    2f26:	4b75      	ldr	r3, [pc, #468]	; (30fc <_Z17sofwareCorrectionv+0x340>)
    2f28:	4798      	blx	r3
    2f2a:	60b0      	str	r0, [r6, #8]
					timeProt.correction.indiceMoySoftCor++;
    2f2c:	3501      	adds	r5, #1
    2f2e:	b2ed      	uxtb	r5, r5
					if(indice<MOYCORLENGTH){//if ze have enougth space to sqve the value
						indice++;
    2f30:	2209      	movs	r2, #9
    2f32:	4643      	mov	r3, r8
    2f34:	0fd9      	lsrs	r1, r3, #31
    2f36:	17d3      	asrs	r3, r2, #31
    2f38:	4640      	mov	r0, r8
    2f3a:	4282      	cmp	r2, r0
    2f3c:	414b      	adcs	r3, r1
    2f3e:	4498      	add	r8, r3
					}
					if(timeProt.correction.indiceMoySoftCor>indice){
    2f40:	45a8      	cmp	r8, r5
    2f42:	db04      	blt.n	2f4e <_Z17sofwareCorrectionv+0x192>

				//	printf("correction need %d/10(%d)\r\n",(int)fcorr*10,nbwait);			
					int i;
					timeProt.correction.moySoftCor[timeProt.correction.indiceMoySoftCor][0]=fcorr;
					timeProt.correction.moySoftCor[timeProt.correction.indiceMoySoftCor][1]=nbwait;
					timeProt.correction.indiceMoySoftCor++;
    2f44:	2390      	movs	r3, #144	; 0x90
    2f46:	005b      	lsls	r3, r3, #1
    2f48:	4a63      	ldr	r2, [pc, #396]	; (30d8 <_Z17sofwareCorrectionv+0x31c>)
    2f4a:	54d5      	strb	r5, [r2, r3]
    2f4c:	e004      	b.n	2f58 <_Z17sofwareCorrectionv+0x19c>
					if(indice<MOYCORLENGTH){//if ze have enougth space to sqve the value
						indice++;
					}
					if(timeProt.correction.indiceMoySoftCor>indice){
						timeProt.correction.indiceMoySoftCor=0;
    2f4e:	2100      	movs	r1, #0
    2f50:	2390      	movs	r3, #144	; 0x90
    2f52:	005b      	lsls	r3, r3, #1
    2f54:	4a60      	ldr	r2, [pc, #384]	; (30d8 <_Z17sofwareCorrectionv+0x31c>)
    2f56:	54d1      	strb	r1, [r2, r3]
					}
					
					
					for(i=0;i<indice;i++){//go to the maximum value save
    2f58:	4643      	mov	r3, r8
    2f5a:	2b00      	cmp	r3, #0
    2f5c:	dd18      	ble.n	2f90 <_Z17sofwareCorrectionv+0x1d4>
    2f5e:	4a5e      	ldr	r2, [pc, #376]	; (30d8 <_Z17sofwareCorrectionv+0x31c>)
    2f60:	1c16      	adds	r6, r2, #0
    2f62:	36d0      	adds	r6, #208	; 0xd0
    2f64:	331a      	adds	r3, #26
    2f66:	00db      	lsls	r3, r3, #3
    2f68:	18d5      	adds	r5, r2, r3
    2f6a:	2400      	movs	r4, #0
    2f6c:	9402      	str	r4, [sp, #8]
						//	printf("i : %d, value : %d\r\n",i,(int)timeProt.correction.moySoftCor[i]);
							correctionSoft+=timeProt.correction.moySoftCor[i][0];
    2f6e:	4f70      	ldr	r7, [pc, #448]	; (3130 <_Z17sofwareCorrectionv+0x374>)
    2f70:	1c2b      	adds	r3, r5, #0
    2f72:	1c25      	adds	r5, r4, #0
    2f74:	1c1c      	adds	r4, r3, #0
    2f76:	9802      	ldr	r0, [sp, #8]
    2f78:	6831      	ldr	r1, [r6, #0]
    2f7a:	47b8      	blx	r7
    2f7c:	9002      	str	r0, [sp, #8]
							correctionTime+=timeProt.correction.moySoftCor[i][1];
    2f7e:	1c28      	adds	r0, r5, #0
    2f80:	6871      	ldr	r1, [r6, #4]
    2f82:	47b8      	blx	r7
    2f84:	1c05      	adds	r5, r0, #0
    2f86:	3608      	adds	r6, #8
					if(timeProt.correction.indiceMoySoftCor>indice){
						timeProt.correction.indiceMoySoftCor=0;
					}
					
					
					for(i=0;i<indice;i++){//go to the maximum value save
    2f88:	42a6      	cmp	r6, r4
    2f8a:	d1f4      	bne.n	2f76 <_Z17sofwareCorrectionv+0x1ba>
    2f8c:	1c04      	adds	r4, r0, #0
    2f8e:	e001      	b.n	2f94 <_Z17sofwareCorrectionv+0x1d8>
			offset=-offset;
		}
		//printf("offset : %lu\r\n",offset);
		//printf("diffhms : %lu\r\n",diffhms);
		float correctionSoft=0.0;
		float correctionTime=0.0;
    2f90:	2400      	movs	r4, #0
		{
			offset=-offset;
		}
		//printf("offset : %lu\r\n",offset);
		//printf("diffhms : %lu\r\n",diffhms);
		float correctionSoft=0.0;
    2f92:	9402      	str	r4, [sp, #8]
							correctionSoft+=timeProt.correction.moySoftCor[i][0];
							correctionTime+=timeProt.correction.moySoftCor[i][1];
					}
				//	printf("sumCorr : %d",(int)correctionSoft);
					
					correctionSoft=(float)(1.0*correctionSoft)/(indice*1.0);//calcul the average value of the software correction 
    2f94:	4640      	mov	r0, r8
    2f96:	4b67      	ldr	r3, [pc, #412]	; (3134 <_Z17sofwareCorrectionv+0x378>)
    2f98:	4798      	blx	r3
    2f9a:	9004      	str	r0, [sp, #16]
    2f9c:	9105      	str	r1, [sp, #20]
    2f9e:	4f59      	ldr	r7, [pc, #356]	; (3104 <_Z17sofwareCorrectionv+0x348>)
    2fa0:	9802      	ldr	r0, [sp, #8]
    2fa2:	47b8      	blx	r7
    2fa4:	4e64      	ldr	r6, [pc, #400]	; (3138 <_Z17sofwareCorrectionv+0x37c>)
    2fa6:	9a04      	ldr	r2, [sp, #16]
    2fa8:	9b05      	ldr	r3, [sp, #20]
    2faa:	47b0      	blx	r6
    2fac:	4d63      	ldr	r5, [pc, #396]	; (313c <_Z17sofwareCorrectionv+0x380>)
    2fae:	47a8      	blx	r5
    2fb0:	9002      	str	r0, [sp, #8]
					correctionTime=(float)(1.0*correctionTime)/(indice*1.0);//calcul the average value of the software correction 
    2fb2:	1c20      	adds	r0, r4, #0
    2fb4:	47b8      	blx	r7
    2fb6:	9a04      	ldr	r2, [sp, #16]
    2fb8:	9b05      	ldr	r3, [sp, #20]
    2fba:	47b0      	blx	r6
    2fbc:	47a8      	blx	r5
    2fbe:	9004      	str	r0, [sp, #16]
					corr=(int)correctionSoft;//cast to int
					corrTime=(int)correctionTime;//cast to int
    2fc0:	4a4b      	ldr	r2, [pc, #300]	; (30f0 <_Z17sofwareCorrectionv+0x334>)
    2fc2:	4693      	mov	fp, r2
    2fc4:	4790      	blx	r2
    2fc6:	1c04      	adds	r4, r0, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    2fc8:	b672      	cpsid	i
    2fca:	f3bf 8f5f 	dmb	sy
					Disable_global_interrupt();
    2fce:	4d5c      	ldr	r5, [pc, #368]	; (3140 <_Z17sofwareCorrectionv+0x384>)
    2fd0:	2300      	movs	r3, #0
    2fd2:	702b      	strb	r3, [r5, #0]
					corr=valueCor+Coef_Software_Correction*(corr-valueCor);
    2fd4:	4f50      	ldr	r7, [pc, #320]	; (3118 <_Z17sofwareCorrectionv+0x35c>)
    2fd6:	683e      	ldr	r6, [r7, #0]
					}
				//	printf("sumCorr : %d",(int)correctionSoft);
					
					correctionSoft=(float)(1.0*correctionSoft)/(indice*1.0);//calcul the average value of the software correction 
					correctionTime=(float)(1.0*correctionTime)/(indice*1.0);//calcul the average value of the software correction 
					corr=(int)correctionSoft;//cast to int
    2fd8:	9802      	ldr	r0, [sp, #8]
    2fda:	47d8      	blx	fp
					corrTime=(int)correctionTime;//cast to int
					Disable_global_interrupt();
					corr=valueCor+Coef_Software_Correction*(corr-valueCor);
    2fdc:	1b80      	subs	r0, r0, r6
    2fde:	683f      	ldr	r7, [r7, #0]
    2fe0:	19c7      	adds	r7, r0, r7
					Enable_global_interrupt();
    2fe2:	2301      	movs	r3, #1
    2fe4:	702b      	strb	r3, [r5, #0]
    2fe6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    2fea:	b662      	cpsie	i
					if(corr<0){
    2fec:	2f00      	cmp	r7, #0
    2fee:	da0e      	bge.n	300e <_Z17sofwareCorrectionv+0x252>
							if(correctionSoft-corr<-0.5){//calculate int the most close to the real value
    2ff0:	1c38      	adds	r0, r7, #0
    2ff2:	4b42      	ldr	r3, [pc, #264]	; (30fc <_Z17sofwareCorrectionv+0x340>)
    2ff4:	4798      	blx	r3
    2ff6:	1c01      	adds	r1, r0, #0
    2ff8:	9802      	ldr	r0, [sp, #8]
    2ffa:	4b41      	ldr	r3, [pc, #260]	; (3100 <_Z17sofwareCorrectionv+0x344>)
    2ffc:	4798      	blx	r3
    2ffe:	21bf      	movs	r1, #191	; 0xbf
    3000:	0609      	lsls	r1, r1, #24
    3002:	4b49      	ldr	r3, [pc, #292]	; (3128 <_Z17sofwareCorrectionv+0x36c>)
    3004:	4798      	blx	r3
								corr--;
    3006:	1e43      	subs	r3, r0, #1
    3008:	4198      	sbcs	r0, r3
    300a:	1a3f      	subs	r7, r7, r0
    300c:	e00d      	b.n	302a <_Z17sofwareCorrectionv+0x26e>
							}
					//		printf("corr<0");
					}
					else{
							if(correctionSoft-corr>0.5){//calculate int the most close to the real value
    300e:	1c38      	adds	r0, r7, #0
    3010:	4b3a      	ldr	r3, [pc, #232]	; (30fc <_Z17sofwareCorrectionv+0x340>)
    3012:	4798      	blx	r3
    3014:	1c01      	adds	r1, r0, #0
    3016:	9802      	ldr	r0, [sp, #8]
    3018:	4b39      	ldr	r3, [pc, #228]	; (3100 <_Z17sofwareCorrectionv+0x344>)
    301a:	4798      	blx	r3
    301c:	21fc      	movs	r1, #252	; 0xfc
    301e:	0589      	lsls	r1, r1, #22
    3020:	4b48      	ldr	r3, [pc, #288]	; (3144 <_Z17sofwareCorrectionv+0x388>)
    3022:	4798      	blx	r3
								corr++;
    3024:	1e43      	subs	r3, r0, #1
    3026:	4198      	sbcs	r0, r3
    3028:	183f      	adds	r7, r7, r0
							}
					//		printf("corr>0");
					}
					
					if(correctionTime-corrTime>0.5){//calculate int the most close to the real value
    302a:	1c20      	adds	r0, r4, #0
    302c:	4b33      	ldr	r3, [pc, #204]	; (30fc <_Z17sofwareCorrectionv+0x340>)
    302e:	4798      	blx	r3
    3030:	1c01      	adds	r1, r0, #0
    3032:	9804      	ldr	r0, [sp, #16]
    3034:	4b32      	ldr	r3, [pc, #200]	; (3100 <_Z17sofwareCorrectionv+0x344>)
    3036:	4798      	blx	r3
    3038:	21fc      	movs	r1, #252	; 0xfc
    303a:	0589      	lsls	r1, r1, #22
    303c:	4b41      	ldr	r3, [pc, #260]	; (3144 <_Z17sofwareCorrectionv+0x388>)
    303e:	4798      	blx	r3
						corrTime++;
    3040:	1e43      	subs	r3, r0, #1
    3042:	4198      	sbcs	r0, r3
    3044:	1824      	adds	r4, r4, r0
					}
					//	printf("moy : %d",(int)correctionSoft*1000);
					//	printf("corr: %u",corr);
					int pgcdi =pgcd(corrTime,corr);
    3046:	1c20      	adds	r0, r4, #0
    3048:	1c39      	adds	r1, r7, #0
    304a:	4b3f      	ldr	r3, [pc, #252]	; (3148 <_Z17sofwareCorrectionv+0x38c>)
    304c:	4798      	blx	r3
    304e:	1c03      	adds	r3, r0, #0
					corrTime=corrTime/pgcdi;
    3050:	4a3e      	ldr	r2, [pc, #248]	; (314c <_Z17sofwareCorrectionv+0x390>)
    3052:	4692      	mov	sl, r2
    3054:	1c20      	adds	r0, r4, #0
    3056:	9302      	str	r3, [sp, #8]
    3058:	1c19      	adds	r1, r3, #0
    305a:	4790      	blx	r2
    305c:	1c04      	adds	r4, r0, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    305e:	b672      	cpsid	i
    3060:	f3bf 8f5f 	dmb	sy
					corr=corr/pgcdi;
					Disable_global_interrupt();
    3064:	4a36      	ldr	r2, [pc, #216]	; (3140 <_Z17sofwareCorrectionv+0x384>)
    3066:	4691      	mov	r9, r2
    3068:	2300      	movs	r3, #0
    306a:	7013      	strb	r3, [r2, #0]
					
					valueCor=valueCor+Coef_Software_Correction*(corr-valueCor);
    306c:	4d2a      	ldr	r5, [pc, #168]	; (3118 <_Z17sofwareCorrectionv+0x35c>)
    306e:	682a      	ldr	r2, [r5, #0]
    3070:	4693      	mov	fp, r2
    3072:	682e      	ldr	r6, [r5, #0]
					}
					//	printf("moy : %d",(int)correctionSoft*1000);
					//	printf("corr: %u",corr);
					int pgcdi =pgcd(corrTime,corr);
					corrTime=corrTime/pgcdi;
					corr=corr/pgcdi;
    3074:	1c38      	adds	r0, r7, #0
    3076:	9902      	ldr	r1, [sp, #8]
    3078:	47d0      	blx	sl
					Disable_global_interrupt();
					
					valueCor=valueCor+Coef_Software_Correction*(corr-valueCor);
    307a:	465b      	mov	r3, fp
    307c:	1ac0      	subs	r0, r0, r3
    307e:	1986      	adds	r6, r0, r6
    3080:	602e      	str	r6, [r5, #0]
					timeCorrection=corrTime;
    3082:	4b26      	ldr	r3, [pc, #152]	; (311c <_Z17sofwareCorrectionv+0x360>)
    3084:	601c      	str	r4, [r3, #0]
					timeCorr=corrTime;
    3086:	4b32      	ldr	r3, [pc, #200]	; (3150 <_Z17sofwareCorrectionv+0x394>)
    3088:	601c      	str	r4, [r3, #0]
					Enable_global_interrupt();
    308a:	2301      	movs	r3, #1
    308c:	464a      	mov	r2, r9
    308e:	7013      	strb	r3, [r2, #0]
    3090:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    3094:	b662      	cpsie	i
						
					
					timeProt.correction.indiceFull=indice;
    3096:	2322      	movs	r3, #34	; 0x22
    3098:	33ff      	adds	r3, #255	; 0xff
    309a:	4a0f      	ldr	r2, [pc, #60]	; (30d8 <_Z17sofwareCorrectionv+0x31c>)
    309c:	4641      	mov	r1, r8
    309e:	54d1      	strb	r1, [r2, r3]
		}
			
		resetSofftwareCorrection();
    30a0:	4b2c      	ldr	r3, [pc, #176]	; (3154 <_Z17sofwareCorrectionv+0x398>)
    30a2:	4798      	blx	r3
		sprintf(messageHMICor,"		update time corr: %d(%d) sign : %d with %d sample",(int)valueCor,corrTime,averageOffset.sign,indice);
    30a4:	4b1c      	ldr	r3, [pc, #112]	; (3118 <_Z17sofwareCorrectionv+0x35c>)
    30a6:	681a      	ldr	r2, [r3, #0]
    30a8:	ab0a      	add	r3, sp, #40	; 0x28
    30aa:	7a1b      	ldrb	r3, [r3, #8]
    30ac:	4d2a      	ldr	r5, [pc, #168]	; (3158 <_Z17sofwareCorrectionv+0x39c>)
    30ae:	9300      	str	r3, [sp, #0]
    30b0:	4643      	mov	r3, r8
    30b2:	9301      	str	r3, [sp, #4]
    30b4:	1c28      	adds	r0, r5, #0
    30b6:	4929      	ldr	r1, [pc, #164]	; (315c <_Z17sofwareCorrectionv+0x3a0>)
    30b8:	1c23      	adds	r3, r4, #0
    30ba:	4c29      	ldr	r4, [pc, #164]	; (3160 <_Z17sofwareCorrectionv+0x3a4>)
    30bc:	47a0      	blx	r4
		sendHMI(messageHMICor);
    30be:	1c28      	adds	r0, r5, #0
    30c0:	4c07      	ldr	r4, [pc, #28]	; (30e0 <_Z17sofwareCorrectionv+0x324>)
    30c2:	47a0      	blx	r4
		sendHMI("	end Software correction");
    30c4:	4827      	ldr	r0, [pc, #156]	; (3164 <_Z17sofwareCorrectionv+0x3a8>)
    30c6:	47a0      	blx	r4
	}
	
}
    30c8:	b011      	add	sp, #68	; 0x44
    30ca:	bc3c      	pop	{r2, r3, r4, r5}
    30cc:	4690      	mov	r8, r2
    30ce:	4699      	mov	r9, r3
    30d0:	46a2      	mov	sl, r4
    30d2:	46ab      	mov	fp, r5
    30d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    30d6:	46c0      	nop			; (mov r8, r8)
    30d8:	200042cc 	.word	0x200042cc
    30dc:	0000ebb0 	.word	0x0000ebb0
    30e0:	00003aed 	.word	0x00003aed
    30e4:	200041f8 	.word	0x200041f8
    30e8:	000076c5 	.word	0x000076c5
    30ec:	00006cb1 	.word	0x00006cb1
    30f0:	000075f5 	.word	0x000075f5
    30f4:	00006535 	.word	0x00006535
    30f8:	0000932d 	.word	0x0000932d
    30fc:	00007635 	.word	0x00007635
    3100:	000072f9 	.word	0x000072f9
    3104:	00009391 	.word	0x00009391
    3108:	40df4000 	.word	0x40df4000
    310c:	00008621 	.word	0x00008621
    3110:	00007755 	.word	0x00007755
    3114:	0000697d 	.word	0x0000697d
    3118:	20003d50 	.word	0x20003d50
    311c:	20003d28 	.word	0x20003d28
    3120:	000003e7 	.word	0x000003e7
    3124:	00007095 	.word	0x00007095
    3128:	000068d9 	.word	0x000068d9
    312c:	461c4000 	.word	0x461c4000
    3130:	000069b9 	.word	0x000069b9
    3134:	000092b5 	.word	0x000092b5
    3138:	00007da5 	.word	0x00007da5
    313c:	00009439 	.word	0x00009439
    3140:	200000d0 	.word	0x200000d0
    3144:	00006901 	.word	0x00006901
    3148:	00002d55 	.word	0x00002d55
    314c:	00006655 	.word	0x00006655
    3150:	20003d30 	.word	0x20003d30
    3154:	00002d99 	.word	0x00002d99
    3158:	20004204 	.word	0x20004204
    315c:	0000ebc8 	.word	0x0000ebc8
    3160:	0000b319 	.word	0x0000b319
    3164:	0000ebfc 	.word	0x0000ebfc

00003168 <_Z18hardwareCorrectionv>:
		timeProt.correction.nbCorrection=0;
		timeProt.correction.sumTime.second=0;
		timeProt.correction.sumTime.halfmillis=0;
		timeProt.correction.currentTimeOffsetSync.second=0;// to not take the first value
}
bool hardwareCorrection(void){
    3168:	b5f0      	push	{r4, r5, r6, r7, lr}
    316a:	b08b      	sub	sp, #44	; 0x2c
	if(timeProt.correction.nbCorrection!=0){
    316c:	23a4      	movs	r3, #164	; 0xa4
    316e:	4a73      	ldr	r2, [pc, #460]	; (333c <_Z18hardwareCorrectionv+0x1d4>)
    3170:	58d3      	ldr	r3, [r2, r3]
			sendHMI("	end correction");
			return false;
		}
		
	}
	return false;	
    3172:	2000      	movs	r0, #0
		timeProt.correction.sumTime.second=0;
		timeProt.correction.sumTime.halfmillis=0;
		timeProt.correction.currentTimeOffsetSync.second=0;// to not take the first value
}
bool hardwareCorrection(void){
	if(timeProt.correction.nbCorrection!=0){
    3174:	2b00      	cmp	r3, #0
    3176:	d100      	bne.n	317a <_Z18hardwareCorrectionv+0x12>
    3178:	e0dd      	b.n	3336 <_Z18hardwareCorrectionv+0x1ce>
		sendHMI("	Hardware correction");
    317a:	4871      	ldr	r0, [pc, #452]	; (3340 <_Z18hardwareCorrectionv+0x1d8>)
    317c:	4b71      	ldr	r3, [pc, #452]	; (3344 <_Z18hardwareCorrectionv+0x1dc>)
    317e:	4798      	blx	r3
		long int sumOffsetl;
		Clock averageTime={0,0,true};
    3180:	af07      	add	r7, sp, #28
    3182:	2300      	movs	r3, #0
    3184:	9307      	str	r3, [sp, #28]
    3186:	9308      	str	r3, [sp, #32]
    3188:	3301      	adds	r3, #1
    318a:	723b      	strb	r3, [r7, #8]
		float second=(float)timeProt.correction.sumTime.second/timeProt.correction.nbCorrection;
    318c:	4c6b      	ldr	r4, [pc, #428]	; (333c <_Z18hardwareCorrectionv+0x1d4>)
    318e:	33c3      	adds	r3, #195	; 0xc3
    3190:	58e0      	ldr	r0, [r4, r3]
    3192:	3b20      	subs	r3, #32
    3194:	58e3      	ldr	r3, [r4, r3]
    3196:	9303      	str	r3, [sp, #12]
    3198:	4e6b      	ldr	r6, [pc, #428]	; (3348 <_Z18hardwareCorrectionv+0x1e0>)
    319a:	47b0      	blx	r6
    319c:	1c05      	adds	r5, r0, #0
    319e:	9803      	ldr	r0, [sp, #12]
    31a0:	47b0      	blx	r6
    31a2:	1c01      	adds	r1, r0, #0
    31a4:	1c28      	adds	r0, r5, #0
    31a6:	4b69      	ldr	r3, [pc, #420]	; (334c <_Z18hardwareCorrectionv+0x1e4>)
    31a8:	4798      	blx	r3
    31aa:	1c05      	adds	r5, r0, #0
		int secondi=(int)second;
    31ac:	4b68      	ldr	r3, [pc, #416]	; (3350 <_Z18hardwareCorrectionv+0x1e8>)
    31ae:	4798      	blx	r3
    31b0:	1c06      	adds	r6, r0, #0
		//calcul average time
		//printf("second : %d,%d",secondi,(int)((second-secondi)*1000.0));
		
		averageTime.second=secondi;
    31b2:	9007      	str	r0, [sp, #28]
		averageTime.halfmillis=(timeProt.correction.sumTime.halfmillis/timeProt.correction.nbCorrection)+RTC_FREQ*1.0*((float)(second-secondi));
    31b4:	23c8      	movs	r3, #200	; 0xc8
    31b6:	58e0      	ldr	r0, [r4, r3]
    31b8:	9903      	ldr	r1, [sp, #12]
    31ba:	4b66      	ldr	r3, [pc, #408]	; (3354 <_Z18hardwareCorrectionv+0x1ec>)
    31bc:	4798      	blx	r3
    31be:	4c66      	ldr	r4, [pc, #408]	; (3358 <_Z18hardwareCorrectionv+0x1f0>)
    31c0:	47a0      	blx	r4
    31c2:	9004      	str	r0, [sp, #16]
    31c4:	9105      	str	r1, [sp, #20]
    31c6:	1c30      	adds	r0, r6, #0
    31c8:	4b64      	ldr	r3, [pc, #400]	; (335c <_Z18hardwareCorrectionv+0x1f4>)
    31ca:	4798      	blx	r3
    31cc:	1c01      	adds	r1, r0, #0
    31ce:	1c28      	adds	r0, r5, #0
    31d0:	4b63      	ldr	r3, [pc, #396]	; (3360 <_Z18hardwareCorrectionv+0x1f8>)
    31d2:	4798      	blx	r3
    31d4:	4b63      	ldr	r3, [pc, #396]	; (3364 <_Z18hardwareCorrectionv+0x1fc>)
    31d6:	4798      	blx	r3
    31d8:	2200      	movs	r2, #0
    31da:	4b63      	ldr	r3, [pc, #396]	; (3368 <_Z18hardwareCorrectionv+0x200>)
    31dc:	4d63      	ldr	r5, [pc, #396]	; (336c <_Z18hardwareCorrectionv+0x204>)
    31de:	47a8      	blx	r5
    31e0:	1c02      	adds	r2, r0, #0
    31e2:	1c0b      	adds	r3, r1, #0
    31e4:	9804      	ldr	r0, [sp, #16]
    31e6:	9905      	ldr	r1, [sp, #20]
    31e8:	4d61      	ldr	r5, [pc, #388]	; (3370 <_Z18hardwareCorrectionv+0x208>)
    31ea:	47a8      	blx	r5
    31ec:	4b61      	ldr	r3, [pc, #388]	; (3374 <_Z18hardwareCorrectionv+0x20c>)
    31ee:	4798      	blx	r3
    31f0:	6078      	str	r0, [r7, #4]
		unsigned long int averageTimeli=(averageTime.second*RTC_FREQ)+(averageTime.halfmillis);
    31f2:	9b07      	ldr	r3, [sp, #28]
    31f4:	687a      	ldr	r2, [r7, #4]
    31f6:	26fa      	movs	r6, #250	; 0xfa
    31f8:	01f6      	lsls	r6, r6, #7
    31fa:	4373      	muls	r3, r6
    31fc:	189f      	adds	r7, r3, r2
	
		//printf("averageTime : %lu\r\n",averageTime);
		float Fnow=(float)RTC_FREQ*1.0/count_set_period;
    31fe:	4b5e      	ldr	r3, [pc, #376]	; (3378 <_Z18hardwareCorrectionv+0x210>)
    3200:	6818      	ldr	r0, [r3, #0]
    3202:	47a0      	blx	r4
    3204:	1c02      	adds	r2, r0, #0
    3206:	1c0b      	adds	r3, r1, #0
    3208:	2000      	movs	r0, #0
    320a:	4957      	ldr	r1, [pc, #348]	; (3368 <_Z18hardwareCorrectionv+0x200>)
    320c:	4d5b      	ldr	r5, [pc, #364]	; (337c <_Z18hardwareCorrectionv+0x214>)
    320e:	47a8      	blx	r5
    3210:	4b5b      	ldr	r3, [pc, #364]	; (3380 <_Z18hardwareCorrectionv+0x218>)
    3212:	4798      	blx	r3
    3214:	9004      	str	r0, [sp, #16]
		float Fafter=0;
		//calcul of the sumOffset in ms

		sumOffsetl=(sumOffset.second*RTC_FREQ)+(sumOffset.halfmillis);
    3216:	4a5b      	ldr	r2, [pc, #364]	; (3384 <_Z18hardwareCorrectionv+0x21c>)
    3218:	6810      	ldr	r0, [r2, #0]
    321a:	6853      	ldr	r3, [r2, #4]
    321c:	4370      	muls	r0, r6
    321e:	18c0      	adds	r0, r0, r3
		if(sumOffset.sign!=true){
    3220:	7a13      	ldrb	r3, [r2, #8]
    3222:	2b00      	cmp	r3, #0
    3224:	d100      	bne.n	3228 <_Z18hardwareCorrectionv+0xc0>
			sumOffsetl=-sumOffsetl;
    3226:	4240      	negs	r0, r0
		

		//printf("correction nb : %d",timeProt.correction.nbCorrection);
		//average per period of sync
		int nbcor=timeProt.correction.nbCorrection;
		sumOffsetl=sumOffsetl/nbcor;
    3228:	9903      	ldr	r1, [sp, #12]
    322a:	4b57      	ldr	r3, [pc, #348]	; (3388 <_Z18hardwareCorrectionv+0x220>)
    322c:	4798      	blx	r3
		
		//printf("sumOffsetmoy :  %ld\r\n",sumOffset/2);
		sumOffsetl=sumOffsetl/(float)(averageTimeli/(RTC_FREQ*1.0));
    322e:	4d4b      	ldr	r5, [pc, #300]	; (335c <_Z18hardwareCorrectionv+0x1f4>)
    3230:	47a8      	blx	r5
    3232:	1c06      	adds	r6, r0, #0
    3234:	1c38      	adds	r0, r7, #0
    3236:	4b48      	ldr	r3, [pc, #288]	; (3358 <_Z18hardwareCorrectionv+0x1f0>)
    3238:	4798      	blx	r3
    323a:	2200      	movs	r2, #0
    323c:	4b4a      	ldr	r3, [pc, #296]	; (3368 <_Z18hardwareCorrectionv+0x200>)
    323e:	4c4f      	ldr	r4, [pc, #316]	; (337c <_Z18hardwareCorrectionv+0x214>)
    3240:	47a0      	blx	r4
    3242:	4b4f      	ldr	r3, [pc, #316]	; (3380 <_Z18hardwareCorrectionv+0x218>)
    3244:	4798      	blx	r3
    3246:	1c01      	adds	r1, r0, #0
    3248:	4c40      	ldr	r4, [pc, #256]	; (334c <_Z18hardwareCorrectionv+0x1e4>)
    324a:	1c30      	adds	r0, r6, #0
    324c:	47a0      	blx	r4
    324e:	4b40      	ldr	r3, [pc, #256]	; (3350 <_Z18hardwareCorrectionv+0x1e8>)
    3250:	4798      	blx	r3
		//printf("sumOffset/S :  %ld\r\n",sumOffset/2);
	

	
		//number of ms/tick
		float decPerPeriod=(float)sumOffsetl/(RTC_FREQ*1.0);
    3252:	47a8      	blx	r5
    3254:	494d      	ldr	r1, [pc, #308]	; (338c <_Z18hardwareCorrectionv+0x224>)
    3256:	47a0      	blx	r4
    3258:	1c04      	adds	r4, r0, #0
		
		if(decPerPeriod<1.0){
    325a:	21fe      	movs	r1, #254	; 0xfe
    325c:	0589      	lsls	r1, r1, #22
    325e:	4b4c      	ldr	r3, [pc, #304]	; (3390 <_Z18hardwareCorrectionv+0x228>)
    3260:	4798      	blx	r3
    3262:	2800      	cmp	r0, #0
    3264:	d00a      	beq.n	327c <_Z18hardwareCorrectionv+0x114>
			Fafter=Fnow/(double)(1-decPerPeriod);
    3266:	20fe      	movs	r0, #254	; 0xfe
    3268:	0580      	lsls	r0, r0, #22
    326a:	1c21      	adds	r1, r4, #0
    326c:	4b3c      	ldr	r3, [pc, #240]	; (3360 <_Z18hardwareCorrectionv+0x1f8>)
    326e:	4798      	blx	r3
    3270:	1c01      	adds	r1, r0, #0
    3272:	9804      	ldr	r0, [sp, #16]
    3274:	4b35      	ldr	r3, [pc, #212]	; (334c <_Z18hardwareCorrectionv+0x1e4>)
    3276:	4798      	blx	r3
    3278:	1c05      	adds	r5, r0, #0
    327a:	e009      	b.n	3290 <_Z18hardwareCorrectionv+0x128>
		}
		else{
			Fafter=Fnow/(double)(1+decPerPeriod);
    327c:	1c20      	adds	r0, r4, #0
    327e:	21fe      	movs	r1, #254	; 0xfe
    3280:	0589      	lsls	r1, r1, #22
    3282:	4b44      	ldr	r3, [pc, #272]	; (3394 <_Z18hardwareCorrectionv+0x22c>)
    3284:	4798      	blx	r3
    3286:	1c01      	adds	r1, r0, #0
    3288:	9804      	ldr	r0, [sp, #16]
    328a:	4b30      	ldr	r3, [pc, #192]	; (334c <_Z18hardwareCorrectionv+0x1e4>)
    328c:	4798      	blx	r3
    328e:	1c05      	adds	r5, r0, #0
		}
		double dcount_set_period=32000/Fafter;
    3290:	483e      	ldr	r0, [pc, #248]	; (338c <_Z18hardwareCorrectionv+0x224>)
    3292:	1c29      	adds	r1, r5, #0
    3294:	4b2d      	ldr	r3, [pc, #180]	; (334c <_Z18hardwareCorrectionv+0x1e4>)
    3296:	4798      	blx	r3
    3298:	1c06      	adds	r6, r0, #0
		unsigned int count;
		count=(int)dcount_set_period;
    329a:	4b2d      	ldr	r3, [pc, #180]	; (3350 <_Z18hardwareCorrectionv+0x1e8>)
    329c:	4798      	blx	r3
    329e:	1c04      	adds	r4, r0, #0
			Fafter=Fnow/(double)(1-decPerPeriod);
		}
		else{
			Fafter=Fnow/(double)(1+decPerPeriod);
		}
		double dcount_set_period=32000/Fafter;
    32a0:	1c30      	adds	r0, r6, #0
    32a2:	4b30      	ldr	r3, [pc, #192]	; (3364 <_Z18hardwareCorrectionv+0x1fc>)
    32a4:	4798      	blx	r3
    32a6:	1c06      	adds	r6, r0, #0
    32a8:	1c0f      	adds	r7, r1, #0
		unsigned int count;
		count=(int)dcount_set_period;
		if((dcount_set_period-count)>0.5){
    32aa:	1c20      	adds	r0, r4, #0
    32ac:	4b2a      	ldr	r3, [pc, #168]	; (3358 <_Z18hardwareCorrectionv+0x1f0>)
    32ae:	4798      	blx	r3
    32b0:	1c02      	adds	r2, r0, #0
    32b2:	1c0b      	adds	r3, r1, #0
    32b4:	1c30      	adds	r0, r6, #0
    32b6:	1c39      	adds	r1, r7, #0
    32b8:	4e37      	ldr	r6, [pc, #220]	; (3398 <_Z18hardwareCorrectionv+0x230>)
    32ba:	47b0      	blx	r6
    32bc:	2200      	movs	r2, #0
    32be:	4b37      	ldr	r3, [pc, #220]	; (339c <_Z18hardwareCorrectionv+0x234>)
    32c0:	4e37      	ldr	r6, [pc, #220]	; (33a0 <_Z18hardwareCorrectionv+0x238>)
    32c2:	47b0      	blx	r6
			count++;
    32c4:	1e43      	subs	r3, r0, #1
    32c6:	4198      	sbcs	r0, r3
    32c8:	1824      	adds	r4, r4, r0
    32ca:	23fa      	movs	r3, #250	; 0xfa
    32cc:	01db      	lsls	r3, r3, #7
    32ce:	429c      	cmp	r4, r3
    32d0:	d900      	bls.n	32d4 <_Z18hardwareCorrectionv+0x16c>
    32d2:	1c1c      	adds	r4, r3, #0
		}
		if(count>RTC_FREQ){//never <1Hz of frequency
			count=RTC_FREQ;
		
		}
		if(count_set_period!=count){
    32d4:	4b28      	ldr	r3, [pc, #160]	; (3378 <_Z18hardwareCorrectionv+0x210>)
    32d6:	681b      	ldr	r3, [r3, #0]
    32d8:	42a3      	cmp	r3, r4
    32da:	d028      	beq.n	332e <_Z18hardwareCorrectionv+0x1c6>
			count_set_period=count;
    32dc:	4e26      	ldr	r6, [pc, #152]	; (3378 <_Z18hardwareCorrectionv+0x210>)
    32de:	6034      	str	r4, [r6, #0]
			resetSofftwareCorrection();
    32e0:	4b30      	ldr	r3, [pc, #192]	; (33a4 <_Z18hardwareCorrectionv+0x23c>)
    32e2:	4798      	blx	r3
			valueCor=0;
    32e4:	2300      	movs	r3, #0
    32e6:	4a30      	ldr	r2, [pc, #192]	; (33a8 <_Z18hardwareCorrectionv+0x240>)
    32e8:	6013      	str	r3, [r2, #0]
			timeProt.correction.indiceFull=0;
    32ea:	4a14      	ldr	r2, [pc, #80]	; (333c <_Z18hardwareCorrectionv+0x1d4>)
    32ec:	2122      	movs	r1, #34	; 0x22
    32ee:	31ff      	adds	r1, #255	; 0xff
    32f0:	5453      	strb	r3, [r2, r1]
			timeProt.correction.indiceMoySoftCor=0;
    32f2:	3901      	subs	r1, #1
    32f4:	5453      	strb	r3, [r2, r1]
			//printf("count : %u",(unsigned int)count);
			//rtc_count_set_compare(&rtc_instance,VALUE_TIMER,RTC_COUNT_COMPARE_0 );
		//	rtc_count_set_period(&rtc_instance,count_set_period); //MOMO
			RTC->MODE0.COMP[0].reg = count_set_period;
    32f6:	6832      	ldr	r2, [r6, #0]
    32f8:	4b2c      	ldr	r3, [pc, #176]	; (33ac <_Z18hardwareCorrectionv+0x244>)
    32fa:	619a      	str	r2, [r3, #24]
			unsigned int Fuse=(RTC_FREQ/count_set_period);
    32fc:	6837      	ldr	r7, [r6, #0]
			unsigned int Fbest=(int)Fafter;
		
			sprintf(messageHMICor,"		Fbest: %u Hz, Fuse= %u Hz count=%d",(unsigned int)Fbest,(unsigned int)Fuse,count);
    32fe:	4e2c      	ldr	r6, [pc, #176]	; (33b0 <_Z18hardwareCorrectionv+0x248>)
			//printf("count : %u",(unsigned int)count);
			//rtc_count_set_compare(&rtc_instance,VALUE_TIMER,RTC_COUNT_COMPARE_0 );
		//	rtc_count_set_period(&rtc_instance,count_set_period); //MOMO
			RTC->MODE0.COMP[0].reg = count_set_period;
			unsigned int Fuse=(RTC_FREQ/count_set_period);
			unsigned int Fbest=(int)Fafter;
    3300:	1c28      	adds	r0, r5, #0
    3302:	4b13      	ldr	r3, [pc, #76]	; (3350 <_Z18hardwareCorrectionv+0x1e8>)
    3304:	4798      	blx	r3
    3306:	1c05      	adds	r5, r0, #0
			timeProt.correction.indiceMoySoftCor=0;
			//printf("count : %u",(unsigned int)count);
			//rtc_count_set_compare(&rtc_instance,VALUE_TIMER,RTC_COUNT_COMPARE_0 );
		//	rtc_count_set_period(&rtc_instance,count_set_period); //MOMO
			RTC->MODE0.COMP[0].reg = count_set_period;
			unsigned int Fuse=(RTC_FREQ/count_set_period);
    3308:	20fa      	movs	r0, #250	; 0xfa
    330a:	01c0      	lsls	r0, r0, #7
    330c:	1c39      	adds	r1, r7, #0
    330e:	4b11      	ldr	r3, [pc, #68]	; (3354 <_Z18hardwareCorrectionv+0x1ec>)
    3310:	4798      	blx	r3
    3312:	1c03      	adds	r3, r0, #0
			unsigned int Fbest=(int)Fafter;
		
			sprintf(messageHMICor,"		Fbest: %u Hz, Fuse= %u Hz count=%d",(unsigned int)Fbest,(unsigned int)Fuse,count);
    3314:	9400      	str	r4, [sp, #0]
    3316:	1c30      	adds	r0, r6, #0
    3318:	4926      	ldr	r1, [pc, #152]	; (33b4 <_Z18hardwareCorrectionv+0x24c>)
    331a:	1c2a      	adds	r2, r5, #0
    331c:	4c26      	ldr	r4, [pc, #152]	; (33b8 <_Z18hardwareCorrectionv+0x250>)
    331e:	47a0      	blx	r4
			sendHMI(messageHMICor);
    3320:	1c30      	adds	r0, r6, #0
    3322:	4c08      	ldr	r4, [pc, #32]	; (3344 <_Z18hardwareCorrectionv+0x1dc>)
    3324:	47a0      	blx	r4
			sendHMI("	end correction");
    3326:	4825      	ldr	r0, [pc, #148]	; (33bc <_Z18hardwareCorrectionv+0x254>)
    3328:	47a0      	blx	r4
			return true;
    332a:	2001      	movs	r0, #1
    332c:	e003      	b.n	3336 <_Z18hardwareCorrectionv+0x1ce>
			
		}
		else{
	

			sendHMI("	end correction");
    332e:	4823      	ldr	r0, [pc, #140]	; (33bc <_Z18hardwareCorrectionv+0x254>)
    3330:	4b04      	ldr	r3, [pc, #16]	; (3344 <_Z18hardwareCorrectionv+0x1dc>)
    3332:	4798      	blx	r3
			return false;
    3334:	2000      	movs	r0, #0
		}
		
	}
	return false;	
}
    3336:	b00b      	add	sp, #44	; 0x2c
    3338:	bdf0      	pop	{r4, r5, r6, r7, pc}
    333a:	46c0      	nop			; (mov r8, r8)
    333c:	200042cc 	.word	0x200042cc
    3340:	0000ec18 	.word	0x0000ec18
    3344:	00003aed 	.word	0x00003aed
    3348:	000076c5 	.word	0x000076c5
    334c:	00006cb1 	.word	0x00006cb1
    3350:	000075f5 	.word	0x000075f5
    3354:	00006535 	.word	0x00006535
    3358:	0000932d 	.word	0x0000932d
    335c:	00007635 	.word	0x00007635
    3360:	000072f9 	.word	0x000072f9
    3364:	00009391 	.word	0x00009391
    3368:	40df4000 	.word	0x40df4000
    336c:	00008621 	.word	0x00008621
    3370:	00007755 	.word	0x00007755
    3374:	0000697d 	.word	0x0000697d
    3378:	200000c8 	.word	0x200000c8
    337c:	00007da5 	.word	0x00007da5
    3380:	00009439 	.word	0x00009439
    3384:	200041f8 	.word	0x200041f8
    3388:	00006655 	.word	0x00006655
    338c:	46fa0000 	.word	0x46fa0000
    3390:	000068d9 	.word	0x000068d9
    3394:	000069b9 	.word	0x000069b9
    3398:	00008b55 	.word	0x00008b55
    339c:	3fe00000 	.word	0x3fe00000
    33a0:	0000688d 	.word	0x0000688d
    33a4:	00002d99 	.word	0x00002d99
    33a8:	20003d50 	.word	0x20003d50
    33ac:	40001400 	.word	0x40001400
    33b0:	20004204 	.word	0x20004204
    33b4:	0000ec30 	.word	0x0000ec30
    33b8:	0000b319 	.word	0x0000b319
    33bc:	0000ec58 	.word	0x0000ec58

000033c0 <_Z10correctionv>:
	
	
	
}

void correction(void){
    33c0:	b508      	push	{r3, lr}
	

	if(xTaskGetTickCount()-saveCorrection>(TIME_CORRECTION/portTICK_RATE_MS)){
    33c2:	4b0c      	ldr	r3, [pc, #48]	; (33f4 <_Z10correctionv+0x34>)
    33c4:	4798      	blx	r3
    33c6:	4b0c      	ldr	r3, [pc, #48]	; (33f8 <_Z10correctionv+0x38>)
    33c8:	681b      	ldr	r3, [r3, #0]
    33ca:	1ac0      	subs	r0, r0, r3
    33cc:	4b0b      	ldr	r3, [pc, #44]	; (33fc <_Z10correctionv+0x3c>)
    33ce:	4298      	cmp	r0, r3
    33d0:	d90e      	bls.n	33f0 <_Z10correctionv+0x30>
			
			if(timeProt.correction.nbCorrection>1){
    33d2:	23a4      	movs	r3, #164	; 0xa4
    33d4:	4a0a      	ldr	r2, [pc, #40]	; (3400 <_Z10correctionv+0x40>)
    33d6:	58d3      	ldr	r3, [r2, r3]
    33d8:	2b01      	cmp	r3, #1
    33da:	d909      	bls.n	33f0 <_Z10correctionv+0x30>
				saveCorrection=xTaskGetTickCount();
    33dc:	4b05      	ldr	r3, [pc, #20]	; (33f4 <_Z10correctionv+0x34>)
    33de:	4798      	blx	r3
    33e0:	4b05      	ldr	r3, [pc, #20]	; (33f8 <_Z10correctionv+0x38>)
    33e2:	6018      	str	r0, [r3, #0]
				if(!hardwareCorrection()){
    33e4:	4b07      	ldr	r3, [pc, #28]	; (3404 <_Z10correctionv+0x44>)
    33e6:	4798      	blx	r3
    33e8:	2800      	cmp	r0, #0
    33ea:	d101      	bne.n	33f0 <_Z10correctionv+0x30>
					sofwareCorrection();
    33ec:	4b06      	ldr	r3, [pc, #24]	; (3408 <_Z10correctionv+0x48>)
    33ee:	4798      	blx	r3
				}
			}
	}
	
}
    33f0:	bd08      	pop	{r3, pc}
    33f2:	46c0      	nop			; (mov r8, r8)
    33f4:	00000b2d 	.word	0x00000b2d
    33f8:	20004034 	.word	0x20004034
    33fc:	00001388 	.word	0x00001388
    3400:	200042cc 	.word	0x200042cc
    3404:	00003169 	.word	0x00003169
    3408:	00002dbd 	.word	0x00002dbd

0000340c <_Z11updateClockv>:
			else{
				pc.printf("-%lu s,%u\r\n",clock.second,(unsigned int)clock.halfmillis);
			}
	*/
}
void updateClock(void){
    340c:	b5f0      	push	{r4, r5, r6, r7, lr}
    340e:	4647      	mov	r7, r8
    3410:	b480      	push	{r7}
    3412:	b090      	sub	sp, #64	; 0x40
		Clock diff;
		if(timeProt.correction.previousSignOffset==timeProt.offset.sign){
    3414:	4a64      	ldr	r2, [pc, #400]	; (35a8 <_Z11updateClockv+0x19c>)
    3416:	23a0      	movs	r3, #160	; 0xa0
    3418:	5cd3      	ldrb	r3, [r2, r3]
    341a:	b2db      	uxtb	r3, r3
    341c:	2191      	movs	r1, #145	; 0x91
    341e:	0049      	lsls	r1, r1, #1
    3420:	5c52      	ldrb	r2, [r2, r1]
    3422:	429a      	cmp	r2, r3
    3424:	d15a      	bne.n	34dc <_Z11updateClockv+0xd0>
			timeProt.correction.previousSignOffset=timeProt.offset.sign;
    3426:	4c60      	ldr	r4, [pc, #384]	; (35a8 <_Z11updateClockv+0x19c>)
    3428:	23a0      	movs	r3, #160	; 0xa0
    342a:	5ce2      	ldrb	r2, [r4, r3]
    342c:	1c0b      	adds	r3, r1, #0
    342e:	5462      	strb	r2, [r4, r1]
			timeProt.correction.previoustimeOffset.second=timeProt.correction.currentTimeOffsetSync.second;
    3430:	3b6a      	subs	r3, #106	; 0x6a
    3432:	58e3      	ldr	r3, [r4, r3]
    3434:	25ac      	movs	r5, #172	; 0xac
    3436:	5163      	str	r3, [r4, r5]
			timeProt.correction.previoustimeOffset.halfmillis=timeProt.correction.currentTimeOffsetSync.halfmillis;
    3438:	23bc      	movs	r3, #188	; 0xbc
    343a:	58e2      	ldr	r2, [r4, r3]
    343c:	3b0c      	subs	r3, #12
    343e:	50e2      	str	r2, [r4, r3]
			readClock(&timeProt.correction.currentTimeOffsetSync);
    3440:	1c20      	adds	r0, r4, #0
    3442:	30b8      	adds	r0, #184	; 0xb8
    3444:	4b59      	ldr	r3, [pc, #356]	; (35ac <_Z11updateClockv+0x1a0>)
    3446:	4798      	blx	r3
			if(timeProt.correction.previoustimeOffset.second!=0){
    3448:	5963      	ldr	r3, [r4, r5]
    344a:	2b00      	cmp	r3, #0
    344c:	d048      	beq.n	34e0 <_Z11updateClockv+0xd4>
				if(sup(timeProt.correction.currentTimeOffsetSync,timeProt.correction.previoustimeOffset)){
    344e:	4a56      	ldr	r2, [pc, #344]	; (35a8 <_Z11updateClockv+0x19c>)
    3450:	1c13      	adds	r3, r2, #0
    3452:	33b0      	adds	r3, #176	; 0xb0
    3454:	4669      	mov	r1, sp
    3456:	cb11      	ldmia	r3!, {r0, r4}
    3458:	c111      	stmia	r1!, {r0, r4}
    345a:	23ac      	movs	r3, #172	; 0xac
    345c:	58d3      	ldr	r3, [r2, r3]
    345e:	21b8      	movs	r1, #184	; 0xb8
    3460:	5850      	ldr	r0, [r2, r1]
    3462:	32b8      	adds	r2, #184	; 0xb8
    3464:	6851      	ldr	r1, [r2, #4]
    3466:	6892      	ldr	r2, [r2, #8]
    3468:	4c51      	ldr	r4, [pc, #324]	; (35b0 <_Z11updateClockv+0x1a4>)
    346a:	47a0      	blx	r4
    346c:	2800      	cmp	r0, #0
    346e:	d032      	beq.n	34d6 <_Z11updateClockv+0xca>
												
					diff=subClock(timeProt.correction.currentTimeOffsetSync,timeProt.correction.previoustimeOffset);
    3470:	ae0a      	add	r6, sp, #40	; 0x28
    3472:	4d4d      	ldr	r5, [pc, #308]	; (35a8 <_Z11updateClockv+0x19c>)
    3474:	1c2b      	adds	r3, r5, #0
    3476:	33ac      	adds	r3, #172	; 0xac
    3478:	466a      	mov	r2, sp
    347a:	cb13      	ldmia	r3!, {r0, r1, r4}
    347c:	c213      	stmia	r2!, {r0, r1, r4}
    347e:	1c30      	adds	r0, r6, #0
    3480:	23b8      	movs	r3, #184	; 0xb8
    3482:	58e9      	ldr	r1, [r5, r3]
    3484:	1c2b      	adds	r3, r5, #0
    3486:	33b8      	adds	r3, #184	; 0xb8
    3488:	685a      	ldr	r2, [r3, #4]
    348a:	689b      	ldr	r3, [r3, #8]
    348c:	4c49      	ldr	r4, [pc, #292]	; (35b4 <_Z11updateClockv+0x1a8>)
    348e:	47a0      	blx	r4
					//printf("diff: ");
					//printfClock(diff);
					timeProt.correction.sumTime=sumClock(timeProt.correction.sumTime,diff);
    3490:	ac06      	add	r4, sp, #24
    3492:	466b      	mov	r3, sp
    3494:	ce07      	ldmia	r6!, {r0, r1, r2}
    3496:	c307      	stmia	r3!, {r0, r1, r2}
    3498:	1c20      	adds	r0, r4, #0
    349a:	23c4      	movs	r3, #196	; 0xc4
    349c:	58e9      	ldr	r1, [r5, r3]
    349e:	1c2e      	adds	r6, r5, #0
    34a0:	36c4      	adds	r6, #196	; 0xc4
    34a2:	6872      	ldr	r2, [r6, #4]
    34a4:	68b3      	ldr	r3, [r6, #8]
    34a6:	4f44      	ldr	r7, [pc, #272]	; (35b8 <_Z11updateClockv+0x1ac>)
    34a8:	46b8      	mov	r8, r7
    34aa:	47b8      	blx	r7
    34ac:	1c23      	adds	r3, r4, #0
    34ae:	cb07      	ldmia	r3!, {r0, r1, r2}
    34b0:	c607      	stmia	r6!, {r0, r1, r2}
					sumOffset=sumClock(sumOffset,timeProt.offset);
    34b2:	4e42      	ldr	r6, [pc, #264]	; (35bc <_Z11updateClockv+0x1b0>)
    34b4:	1c2b      	adds	r3, r5, #0
    34b6:	3398      	adds	r3, #152	; 0x98
    34b8:	466a      	mov	r2, sp
    34ba:	cb83      	ldmia	r3!, {r0, r1, r7}
    34bc:	c283      	stmia	r2!, {r0, r1, r7}
    34be:	1c20      	adds	r0, r4, #0
    34c0:	6831      	ldr	r1, [r6, #0]
    34c2:	6872      	ldr	r2, [r6, #4]
    34c4:	68b3      	ldr	r3, [r6, #8]
    34c6:	47c0      	blx	r8
    34c8:	cc0e      	ldmia	r4!, {r1, r2, r3}
    34ca:	c60e      	stmia	r6!, {r1, r2, r3}
					printf("sumClock: ");
					printfClock(timeProt.correction.sumTime);
					
					printf("nb corrr  : %d",timeProt.correction.nbCorrection);
					*/
					timeProt.correction.nbCorrection++;
    34cc:	22a4      	movs	r2, #164	; 0xa4
    34ce:	58ab      	ldr	r3, [r5, r2]
    34d0:	3301      	adds	r3, #1
    34d2:	50ab      	str	r3, [r5, r2]
    34d4:	e004      	b.n	34e0 <_Z11updateClockv+0xd4>
				}
				else{
					resetSofftwareCorrection();
    34d6:	4b3a      	ldr	r3, [pc, #232]	; (35c0 <_Z11updateClockv+0x1b4>)
    34d8:	4798      	blx	r3
    34da:	e001      	b.n	34e0 <_Z11updateClockv+0xd4>
				}
			}
		}
		else{
			resetSofftwareCorrection();
    34dc:	4b38      	ldr	r3, [pc, #224]	; (35c0 <_Z11updateClockv+0x1b4>)
    34de:	4798      	blx	r3
		}
		timeProt.correction.previousSignOffset=timeProt.offset.sign;
    34e0:	4e31      	ldr	r6, [pc, #196]	; (35a8 <_Z11updateClockv+0x19c>)
    34e2:	23a0      	movs	r3, #160	; 0xa0
    34e4:	4698      	mov	r8, r3
    34e6:	5cf2      	ldrb	r2, [r6, r3]
    34e8:	3382      	adds	r3, #130	; 0x82
    34ea:	54f2      	strb	r2, [r6, r3]
		Clock timeCopy;
		readClock(&timeCopy);
    34ec:	ad0d      	add	r5, sp, #52	; 0x34
    34ee:	1c28      	adds	r0, r5, #0
    34f0:	4b2e      	ldr	r3, [pc, #184]	; (35ac <_Z11updateClockv+0x1a0>)
    34f2:	4798      	blx	r3


		
		timeCopy=sumClock(timeCopy,timeProt.offset);//add offset
    34f4:	ac06      	add	r4, sp, #24
    34f6:	1c33      	adds	r3, r6, #0
    34f8:	3398      	adds	r3, #152	; 0x98
    34fa:	466a      	mov	r2, sp
    34fc:	cb83      	ldmia	r3!, {r0, r1, r7}
    34fe:	c283      	stmia	r2!, {r0, r1, r7}
    3500:	1c20      	adds	r0, r4, #0
    3502:	990d      	ldr	r1, [sp, #52]	; 0x34
    3504:	686a      	ldr	r2, [r5, #4]
    3506:	68ab      	ldr	r3, [r5, #8]
    3508:	4f2b      	ldr	r7, [pc, #172]	; (35b8 <_Z11updateClockv+0x1ac>)
    350a:	47b8      	blx	r7
    350c:	1c23      	adds	r3, r4, #0
    350e:	cb07      	ldmia	r3!, {r0, r1, r2}
    3510:	c507      	stmia	r5!, {r0, r1, r2}
		writeClock(timeCopy);
    3512:	980d      	ldr	r0, [sp, #52]	; 0x34
    3514:	6861      	ldr	r1, [r4, #4]
    3516:	68a2      	ldr	r2, [r4, #8]
    3518:	4b2a      	ldr	r3, [pc, #168]	; (35c4 <_Z11updateClockv+0x1b8>)
    351a:	4798      	blx	r3
		report(timeProt.offset,1);
    351c:	2398      	movs	r3, #152	; 0x98
    351e:	58f0      	ldr	r0, [r6, r3]
    3520:	1c33      	adds	r3, r6, #0
    3522:	3398      	adds	r3, #152	; 0x98
    3524:	6859      	ldr	r1, [r3, #4]
    3526:	689a      	ldr	r2, [r3, #8]
    3528:	2301      	movs	r3, #1
    352a:	4c27      	ldr	r4, [pc, #156]	; (35c8 <_Z11updateClockv+0x1bc>)
    352c:	47a0      	blx	r4
		if(timeProt.offset.sign==true){
    352e:	4643      	mov	r3, r8
    3530:	5cf3      	ldrb	r3, [r6, r3]
    3532:	2b00      	cmp	r3, #0
    3534:	d018      	beq.n	3568 <_Z11updateClockv+0x15c>
			sprintf(messageHMIOffset,"		update clock offset: +%lus,%ld[+%lus,%lu ms,~%lu us]	t: %lu,%lu",timeProt.offset.second,(long unsigned int)timeProt.offset.halfmillis,timeProt.offset.second,timeProt.offset.halfmillis/32,(timeProt.offset.halfmillis%32)*31,timeCopy.second,timeCopy.halfmillis);
    3536:	491c      	ldr	r1, [pc, #112]	; (35a8 <_Z11updateClockv+0x19c>)
    3538:	2098      	movs	r0, #152	; 0x98
    353a:	580a      	ldr	r2, [r1, r0]
    353c:	249c      	movs	r4, #156	; 0x9c
    353e:	590b      	ldr	r3, [r1, r4]
    3540:	580e      	ldr	r6, [r1, r0]
    3542:	5908      	ldr	r0, [r1, r4]
    3544:	5909      	ldr	r1, [r1, r4]
    3546:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    3548:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    354a:	9600      	str	r6, [sp, #0]
    354c:	0940      	lsrs	r0, r0, #5
    354e:	9001      	str	r0, [sp, #4]
    3550:	201f      	movs	r0, #31
    3552:	4001      	ands	r1, r0
    3554:	0148      	lsls	r0, r1, #5
    3556:	1a41      	subs	r1, r0, r1
    3558:	9102      	str	r1, [sp, #8]
    355a:	9503      	str	r5, [sp, #12]
    355c:	9404      	str	r4, [sp, #16]
    355e:	481b      	ldr	r0, [pc, #108]	; (35cc <_Z11updateClockv+0x1c0>)
    3560:	491b      	ldr	r1, [pc, #108]	; (35d0 <_Z11updateClockv+0x1c4>)
    3562:	4c1c      	ldr	r4, [pc, #112]	; (35d4 <_Z11updateClockv+0x1c8>)
    3564:	47a0      	blx	r4
    3566:	e017      	b.n	3598 <_Z11updateClockv+0x18c>
		}
		else{
			sprintf(messageHMIOffset,"		update clock offset: -%lus,%ld[-%lus,%lums,~%lu us]	t: %lu,%lu",timeProt.offset.second,(long unsigned int)timeProt.offset.halfmillis,timeProt.offset.second,timeProt.offset.halfmillis/32,(timeProt.offset.halfmillis%32)*31,timeCopy.second,timeCopy.halfmillis);
    3568:	490f      	ldr	r1, [pc, #60]	; (35a8 <_Z11updateClockv+0x19c>)
    356a:	2098      	movs	r0, #152	; 0x98
    356c:	580a      	ldr	r2, [r1, r0]
    356e:	249c      	movs	r4, #156	; 0x9c
    3570:	590b      	ldr	r3, [r1, r4]
    3572:	580e      	ldr	r6, [r1, r0]
    3574:	5908      	ldr	r0, [r1, r4]
    3576:	5909      	ldr	r1, [r1, r4]
    3578:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    357a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    357c:	9600      	str	r6, [sp, #0]
    357e:	0940      	lsrs	r0, r0, #5
    3580:	9001      	str	r0, [sp, #4]
    3582:	201f      	movs	r0, #31
    3584:	4001      	ands	r1, r0
    3586:	0148      	lsls	r0, r1, #5
    3588:	1a41      	subs	r1, r0, r1
    358a:	9102      	str	r1, [sp, #8]
    358c:	9503      	str	r5, [sp, #12]
    358e:	9404      	str	r4, [sp, #16]
    3590:	480e      	ldr	r0, [pc, #56]	; (35cc <_Z11updateClockv+0x1c0>)
    3592:	4911      	ldr	r1, [pc, #68]	; (35d8 <_Z11updateClockv+0x1cc>)
    3594:	4c0f      	ldr	r4, [pc, #60]	; (35d4 <_Z11updateClockv+0x1c8>)
    3596:	47a0      	blx	r4
		}
		sendHMI(messageHMIOffset);
    3598:	480c      	ldr	r0, [pc, #48]	; (35cc <_Z11updateClockv+0x1c0>)
    359a:	4b10      	ldr	r3, [pc, #64]	; (35dc <_Z11updateClockv+0x1d0>)
    359c:	4798      	blx	r3
}
    359e:	b010      	add	sp, #64	; 0x40
    35a0:	bc04      	pop	{r2}
    35a2:	4690      	mov	r8, r2
    35a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    35a6:	46c0      	nop			; (mov r8, r8)
    35a8:	200042cc 	.word	0x200042cc
    35ac:	00001559 	.word	0x00001559
    35b0:	00001265 	.word	0x00001265
    35b4:	000012d5 	.word	0x000012d5
    35b8:	000013d9 	.word	0x000013d9
    35bc:	200041f8 	.word	0x200041f8
    35c0:	00002d99 	.word	0x00002d99
    35c4:	000015e5 	.word	0x000015e5
    35c8:	00002ce5 	.word	0x00002ce5
    35cc:	20004038 	.word	0x20004038
    35d0:	0000ec68 	.word	0x0000ec68
    35d4:	0000b319 	.word	0x0000b319
    35d8:	0000ecac 	.word	0x0000ecac
    35dc:	00003aed 	.word	0x00003aed

000035e0 <_Z11calculCRCID8enumTypehPKhh>:

}
uint8_t calculCRC(const Type type,const uint8_t length,const uint8_t* data){
	return calculCRCID(type,length,data,IDDEVICE);
}
uint8_t calculCRCID(const Type type,const uint8_t length,const uint8_t* data,const uint8_t id){
    35e0:	18cb      	adds	r3, r1, r3
	uint8_t crc;
	uint8_t i;
	crc=type+length+id;
    35e2:	18c0      	adds	r0, r0, r3
    35e4:	b2c0      	uxtb	r0, r0
	for(i=0;i<length;i++){
    35e6:	2900      	cmp	r1, #0
    35e8:	d00a      	beq.n	3600 <_Z11calculCRCID8enumTypehPKhh+0x20>
    35ea:	1c13      	adds	r3, r2, #0
    35ec:	3901      	subs	r1, #1
    35ee:	b2c9      	uxtb	r1, r1
    35f0:	3101      	adds	r1, #1
    35f2:	1852      	adds	r2, r2, r1
		crc=crc+data[i];
    35f4:	7819      	ldrb	r1, [r3, #0]
    35f6:	1840      	adds	r0, r0, r1
    35f8:	b2c0      	uxtb	r0, r0
    35fa:	3301      	adds	r3, #1
}
uint8_t calculCRCID(const Type type,const uint8_t length,const uint8_t* data,const uint8_t id){
	uint8_t crc;
	uint8_t i;
	crc=type+length+id;
	for(i=0;i<length;i++){
    35fc:	4293      	cmp	r3, r2
    35fe:	d1f9      	bne.n	35f4 <_Z11calculCRCID8enumTypehPKhh+0x14>
		crc=crc+data[i];
	}
	
	return crc;
    3600:	4770      	bx	lr
    3602:	46c0      	nop			; (mov r8, r8)

00003604 <_Z9calculCRC8enumTypehPKh>:
		send[3+i+j]=calculCRC(type,length,data);

		networkTx(send,length+4+j);

}
uint8_t calculCRC(const Type type,const uint8_t length,const uint8_t* data){
    3604:	b510      	push	{r4, lr}
	return calculCRCID(type,length,data,IDDEVICE);
    3606:	2300      	movs	r3, #0
    3608:	4c01      	ldr	r4, [pc, #4]	; (3610 <_Z9calculCRC8enumTypehPKh+0xc>)
    360a:	47a0      	blx	r4
}
    360c:	bd10      	pop	{r4, pc}
    360e:	46c0      	nop			; (mov r8, r8)
    3610:	000035e1 	.word	0x000035e1

00003614 <_Z4send8enumTypehPKh>:

	
	sendHMI("	delay request send");
}
#endif
void send(const Type type,const uint8_t length,const uint8_t* data){
    3614:	b5f0      	push	{r4, r5, r6, r7, lr}
    3616:	4647      	mov	r7, r8
    3618:	b480      	push	{r7}
    361a:	af00      	add	r7, sp, #0
    361c:	1c0c      	adds	r4, r1, #0
		uint8_t i;
		uint8_t j=0;
		uint8_t send[length+4];//to complete
    361e:	1c0b      	adds	r3, r1, #0
    3620:	330b      	adds	r3, #11
    3622:	08db      	lsrs	r3, r3, #3
    3624:	00db      	lsls	r3, r3, #3
    3626:	4669      	mov	r1, sp
    3628:	1acb      	subs	r3, r1, r3
    362a:	469d      	mov	sp, r3
    362c:	466d      	mov	r5, sp
		send[0]=HEADER;
    362e:	2355      	movs	r3, #85	; 0x55
    3630:	702b      	strb	r3, [r5, #0]
		send[1]=IDDEVICE;	
    3632:	2300      	movs	r3, #0
    3634:	706b      	strb	r3, [r5, #1]
		send[2]=type;
    3636:	70a8      	strb	r0, [r5, #2]
		if(length!=0){
    3638:	2c00      	cmp	r4, #0
    363a:	d00a      	beq.n	3652 <_Z4send8enumTypehPKh+0x3e>
			send[3]=length;//length data
    363c:	70ec      	strb	r4, [r5, #3]
    363e:	18e9      	adds	r1, r5, r3
			j=1;
		}
		for(i=0;i<length;i++){
			send[3+i+j]=data[i];
    3640:	5cd6      	ldrb	r6, [r2, r3]
    3642:	710e      	strb	r6, [r1, #4]
    3644:	3301      	adds	r3, #1
		send[2]=type;
		if(length!=0){
			send[3]=length;//length data
			j=1;
		}
		for(i=0;i<length;i++){
    3646:	b2d9      	uxtb	r1, r3
    3648:	428c      	cmp	r4, r1
    364a:	d8f8      	bhi.n	363e <_Z4send8enumTypehPKh+0x2a>
    364c:	1c23      	adds	r3, r4, #0
		send[0]=HEADER;
		send[1]=IDDEVICE;	
		send[2]=type;
		if(length!=0){
			send[3]=length;//length data
			j=1;
    364e:	2601      	movs	r6, #1
    3650:	e001      	b.n	3656 <_Z4send8enumTypehPKh+0x42>
	sendHMI("	delay request send");
}
#endif
void send(const Type type,const uint8_t length,const uint8_t* data){
		uint8_t i;
		uint8_t j=0;
    3652:	2600      	movs	r6, #0
		send[2]=type;
		if(length!=0){
			send[3]=length;//length data
			j=1;
		}
		for(i=0;i<length;i++){
    3654:	2300      	movs	r3, #0
			send[3+i+j]=data[i];
		}
		send[3+i+j]=calculCRC(type,length,data);
    3656:	3303      	adds	r3, #3
    3658:	4698      	mov	r8, r3
    365a:	44b0      	add	r8, r6
    365c:	1c21      	adds	r1, r4, #0
    365e:	4b07      	ldr	r3, [pc, #28]	; (367c <_Z4send8enumTypehPKh+0x68>)
    3660:	4798      	blx	r3
    3662:	4643      	mov	r3, r8
    3664:	54e8      	strb	r0, [r5, r3]
    3666:	3404      	adds	r4, #4

		networkTx(send,length+4+j);
    3668:	1931      	adds	r1, r6, r4
    366a:	b2c9      	uxtb	r1, r1
    366c:	1c28      	adds	r0, r5, #0
    366e:	4b04      	ldr	r3, [pc, #16]	; (3680 <_Z4send8enumTypehPKh+0x6c>)
    3670:	4798      	blx	r3

}
    3672:	46bd      	mov	sp, r7
    3674:	bc04      	pop	{r2}
    3676:	4690      	mov	r8, r2
    3678:	bdf0      	pop	{r4, r5, r6, r7, pc}
    367a:	46c0      	nop			; (mov r8, r8)
    367c:	00003605 	.word	0x00003605
    3680:	00001a61 	.word	0x00001a61

00003684 <_Z4syncv>:
				}
				
			}		
}
#ifdef MASTERMODE
void sync(void){
    3684:	b500      	push	{lr}
    3686:	b085      	sub	sp, #20
	uint8_t sendP[4];
	Type type=SYNC;
	Clock timeSave;
	readClock(&timeSave);
    3688:	a801      	add	r0, sp, #4
    368a:	4b0b      	ldr	r3, [pc, #44]	; (36b8 <_Z4syncv+0x34>)
    368c:	4798      	blx	r3
	sendP[0]=(uint8_t)(timeSave.second&0x00FF);
    368e:	9b01      	ldr	r3, [sp, #4]
    3690:	466a      	mov	r2, sp
    3692:	7013      	strb	r3, [r2, #0]
	sendP[1]=(uint8_t)((timeSave.second>>8)&0x00FF);
    3694:	9b01      	ldr	r3, [sp, #4]
    3696:	0a1b      	lsrs	r3, r3, #8
    3698:	7053      	strb	r3, [r2, #1]
	sendP[2]=(uint8_t)(timeSave.halfmillis&0x00FF);
    369a:	9b02      	ldr	r3, [sp, #8]
    369c:	7093      	strb	r3, [r2, #2]
	sendP[3]=(uint8_t)((timeSave.halfmillis>>8)&0x00FF);
    369e:	9b02      	ldr	r3, [sp, #8]
    36a0:	0a1b      	lsrs	r3, r3, #8
    36a2:	70d3      	strb	r3, [r2, #3]
	send(type,4,sendP);
    36a4:	2001      	movs	r0, #1
    36a6:	2104      	movs	r1, #4
    36a8:	4b04      	ldr	r3, [pc, #16]	; (36bc <_Z4syncv+0x38>)
    36aa:	4798      	blx	r3
	sendHMI("	sync send");
    36ac:	4804      	ldr	r0, [pc, #16]	; (36c0 <_Z4syncv+0x3c>)
    36ae:	4b05      	ldr	r3, [pc, #20]	; (36c4 <_Z4syncv+0x40>)
    36b0:	4798      	blx	r3
}
    36b2:	b005      	add	sp, #20
    36b4:	bd00      	pop	{pc}
    36b6:	46c0      	nop			; (mov r8, r8)
    36b8:	00001559 	.word	0x00001559
    36bc:	00003615 	.word	0x00003615
    36c0:	0000ecf0 	.word	0x0000ecf0
    36c4:	00003aed 	.word	0x00003aed

000036c8 <_Z6senderv>:
	vTaskDelay(500/portTICK_RATE_MS);
}



void sender(void){
    36c8:	b508      	push	{r3, lr}
		if(timeSender!=0){
			//printf("id : %d  , delay response time second : %lu",i,timeSender);
			delayResponse(i);
		}
	}*/
	if(xTaskGetTickCount()-saveSync>(TIMESYNC/portTICK_RATE_MS)){
    36ca:	4b07      	ldr	r3, [pc, #28]	; (36e8 <_Z6senderv+0x20>)
    36cc:	4798      	blx	r3
    36ce:	4b07      	ldr	r3, [pc, #28]	; (36ec <_Z6senderv+0x24>)
    36d0:	681b      	ldr	r3, [r3, #0]
    36d2:	1ac0      	subs	r0, r0, r3
    36d4:	4b06      	ldr	r3, [pc, #24]	; (36f0 <_Z6senderv+0x28>)
    36d6:	4298      	cmp	r0, r3
    36d8:	d905      	bls.n	36e6 <_Z6senderv+0x1e>
		saveSync=xTaskGetTickCount();
    36da:	4b03      	ldr	r3, [pc, #12]	; (36e8 <_Z6senderv+0x20>)
    36dc:	4798      	blx	r3
    36de:	4b03      	ldr	r3, [pc, #12]	; (36ec <_Z6senderv+0x24>)
    36e0:	6018      	str	r0, [r3, #0]
		sync();
    36e2:	4b04      	ldr	r3, [pc, #16]	; (36f4 <_Z6senderv+0x2c>)
    36e4:	4798      	blx	r3
		saveDRequest=xTaskGetTickCount();
		delayRequest();
	}
	#endif

}
    36e6:	bd08      	pop	{r3, pc}
    36e8:	00000b2d 	.word	0x00000b2d
    36ec:	20004100 	.word	0x20004100
    36f0:	00001388 	.word	0x00001388
    36f4:	00003685 	.word	0x00003685

000036f8 <_Z13delayResponseh>:
	sendP[2]=(uint8_t)(timeSave.halfmillis&0x00FF);
	sendP[3]=(uint8_t)((timeSave.halfmillis>>8)&0x00FF);
	send(type,4,sendP);
	sendHMI("	sync send");
}
void delayResponse(uint8_t id){
    36f8:	b530      	push	{r4, r5, lr}
    36fa:	b087      	sub	sp, #28
    36fc:	1c04      	adds	r4, r0, #0

	
	Type type=DELAYRESPONSE;
	uint8_t sendP[9];
	
	sendP[0]=id;
    36fe:	466b      	mov	r3, sp
    3700:	7018      	strb	r0, [r3, #0]
	sendP[1]=(uint8_t)(timeProt.saveTime[id].second&0x00FF);
    3702:	491e      	ldr	r1, [pc, #120]	; (377c <_Z13delayResponseh+0x84>)
    3704:	0043      	lsls	r3, r0, #1
    3706:	181a      	adds	r2, r3, r0
    3708:	0092      	lsls	r2, r2, #2
    370a:	5852      	ldr	r2, [r2, r1]
    370c:	4668      	mov	r0, sp
    370e:	7042      	strb	r2, [r0, #1]
	sendP[2]=(uint8_t)((timeProt.saveTime[id].second>>8)&0x00FF);
    3710:	191a      	adds	r2, r3, r4
    3712:	0092      	lsls	r2, r2, #2
    3714:	5852      	ldr	r2, [r2, r1]
    3716:	0a12      	lsrs	r2, r2, #8
    3718:	7082      	strb	r2, [r0, #2]
	sendP[3]=(uint8_t)(timeProt.saveTime[id].halfmillis&0x00FF);
    371a:	191a      	adds	r2, r3, r4
    371c:	0092      	lsls	r2, r2, #2
    371e:	188a      	adds	r2, r1, r2
    3720:	6850      	ldr	r0, [r2, #4]
    3722:	466d      	mov	r5, sp
    3724:	70e8      	strb	r0, [r5, #3]
	sendP[4]=(uint8_t)((timeProt.saveTime[id].halfmillis>>8)&0x00FF);
    3726:	6852      	ldr	r2, [r2, #4]
    3728:	0a12      	lsrs	r2, r2, #8
    372a:	712a      	strb	r2, [r5, #4]
	Clock timeSave={timeManage.second,timeManage.halfmillis,true};
    372c:	aa03      	add	r2, sp, #12
    372e:	2001      	movs	r0, #1
    3730:	7210      	strb	r0, [r2, #8]
    3732:	4813      	ldr	r0, [pc, #76]	; (3780 <_Z13delayResponseh+0x88>)
    3734:	6805      	ldr	r5, [r0, #0]
    3736:	9503      	str	r5, [sp, #12]
    3738:	6840      	ldr	r0, [r0, #4]
    373a:	9004      	str	r0, [sp, #16]
	timeProt.saveTime[id].second=0;
    373c:	191b      	adds	r3, r3, r4
    373e:	009b      	lsls	r3, r3, #2
    3740:	2000      	movs	r0, #0
    3742:	5058      	str	r0, [r3, r1]
	sendP[5]=(uint8_t)(timeSave.second&0x00FF);
    3744:	9b03      	ldr	r3, [sp, #12]
    3746:	4669      	mov	r1, sp
    3748:	714b      	strb	r3, [r1, #5]
	sendP[6]=(uint8_t)((timeSave.second>>8)&0x00FF);
    374a:	9b03      	ldr	r3, [sp, #12]
    374c:	0a1b      	lsrs	r3, r3, #8
    374e:	718b      	strb	r3, [r1, #6]
	sendP[7]=(uint8_t)(timeSave.halfmillis&0x00FF);
    3750:	9b04      	ldr	r3, [sp, #16]
    3752:	71cb      	strb	r3, [r1, #7]
	sendP[8]=(uint8_t)((timeSave.halfmillis>>8)&0x00FF);
    3754:	9b04      	ldr	r3, [sp, #16]
    3756:	0a1b      	lsrs	r3, r3, #8
    3758:	466a      	mov	r2, sp
    375a:	720b      	strb	r3, [r1, #8]
	
	send(type,9,sendP);
    375c:	3003      	adds	r0, #3
    375e:	2109      	movs	r1, #9
    3760:	4b08      	ldr	r3, [pc, #32]	; (3784 <_Z13delayResponseh+0x8c>)
    3762:	4798      	blx	r3
	sprintf(messageHMI,"	delay response send (id: %d)",id);
    3764:	4d08      	ldr	r5, [pc, #32]	; (3788 <_Z13delayResponseh+0x90>)
    3766:	1c28      	adds	r0, r5, #0
    3768:	4908      	ldr	r1, [pc, #32]	; (378c <_Z13delayResponseh+0x94>)
    376a:	1c22      	adds	r2, r4, #0
    376c:	4b08      	ldr	r3, [pc, #32]	; (3790 <_Z13delayResponseh+0x98>)
    376e:	4798      	blx	r3
	sendHMI(messageHMI);
    3770:	1c28      	adds	r0, r5, #0
    3772:	4b08      	ldr	r3, [pc, #32]	; (3794 <_Z13delayResponseh+0x9c>)
    3774:	4798      	blx	r3
}
    3776:	b007      	add	sp, #28
    3778:	bd30      	pop	{r4, r5, pc}
    377a:	46c0      	nop			; (mov r8, r8)
    377c:	200042cc 	.word	0x200042cc
    3780:	200000bc 	.word	0x200000bc
    3784:	00003615 	.word	0x00003615
    3788:	200043f0 	.word	0x200043f0
    378c:	0000ecfc 	.word	0x0000ecfc
    3790:	0000b319 	.word	0x0000b319
    3794:	00003aed 	.word	0x00003aed

00003798 <_Z8receiverv>:
		else{
			sprintf(messageHMIOffset,"		update clock offset: -%lus,%ld[-%lus,%lums,~%lu us]	t: %lu,%lu",timeProt.offset.second,(long unsigned int)timeProt.offset.halfmillis,timeProt.offset.second,timeProt.offset.halfmillis/32,(timeProt.offset.halfmillis%32)*31,timeCopy.second,timeCopy.halfmillis);
		}
		sendHMI(messageHMIOffset);
}
void receiver(){
    3798:	b5f0      	push	{r4, r5, r6, r7, lr}
    379a:	4647      	mov	r7, r8
    379c:	b480      	push	{r7}
    379e:	b08c      	sub	sp, #48	; 0x30
			Clock timeMaster={0,0,true};	
			uint8_t i=0;
			#endif
			Data data;
		
			if(networkAvailable()){
    37a0:	4b43      	ldr	r3, [pc, #268]	; (38b0 <_Z8receiverv+0x118>)
    37a2:	4798      	blx	r3
    37a4:	2800      	cmp	r0, #0
    37a6:	d07f      	beq.n	38a8 <_Z8receiverv+0x110>
				vTaskDelay(100);
    37a8:	2064      	movs	r0, #100	; 0x64
    37aa:	4b42      	ldr	r3, [pc, #264]	; (38b4 <_Z8receiverv+0x11c>)
    37ac:	4798      	blx	r3
				if(networkRead()==HEADER){
    37ae:	4b42      	ldr	r3, [pc, #264]	; (38b8 <_Z8receiverv+0x120>)
    37b0:	4798      	blx	r3
    37b2:	2855      	cmp	r0, #85	; 0x55
    37b4:	d178      	bne.n	38a8 <_Z8receiverv+0x110>
					data.id=networkRead();
    37b6:	4d40      	ldr	r5, [pc, #256]	; (38b8 <_Z8receiverv+0x120>)
    37b8:	47a8      	blx	r5
    37ba:	1c06      	adds	r6, r0, #0
    37bc:	ac03      	add	r4, sp, #12
    37be:	7060      	strb	r0, [r4, #1]
					data.type=(Type)networkRead();
    37c0:	47a8      	blx	r5
    37c2:	7020      	strb	r0, [r4, #0]
							switch (data.type){
    37c4:	2802      	cmp	r0, #2
    37c6:	d002      	beq.n	37ce <_Z8receiverv+0x36>
    37c8:	2804      	cmp	r0, #4
    37ca:	d025      	beq.n	3818 <_Z8receiverv+0x80>
    37cc:	e067      	b.n	389e <_Z8receiverv+0x106>

									
								#else
									case DELAYREQUEST:
									
										data.crc=networkRead();
    37ce:	4b3a      	ldr	r3, [pc, #232]	; (38b8 <_Z8receiverv+0x120>)
    37d0:	4798      	blx	r3
    37d2:	1c04      	adds	r4, r0, #0
    37d4:	2321      	movs	r3, #33	; 0x21
    37d6:	aa03      	add	r2, sp, #12
    37d8:	54d0      	strb	r0, [r2, r3]
										//printf("Type:%d , id:%d, crc:%d.",data.type, data.id,data.crc );
										if(calculCRCID(data.type,0,NULL,data.id)!=data.crc){
    37da:	2002      	movs	r0, #2
    37dc:	2100      	movs	r1, #0
    37de:	2200      	movs	r2, #0
    37e0:	1c33      	adds	r3, r6, #0
    37e2:	4d36      	ldr	r5, [pc, #216]	; (38bc <_Z8receiverv+0x124>)
    37e4:	47a8      	blx	r5
    37e6:	4284      	cmp	r4, r0
    37e8:	d00f      	beq.n	380a <_Z8receiverv+0x72>
											taskENTER_CRITICAL();
    37ea:	4b35      	ldr	r3, [pc, #212]	; (38c0 <_Z8receiverv+0x128>)
    37ec:	4798      	blx	r3
											timeProt.saveTime[data.id].second=0;
    37ee:	0073      	lsls	r3, r6, #1
    37f0:	199e      	adds	r6, r3, r6
    37f2:	00b6      	lsls	r6, r6, #2
    37f4:	2200      	movs	r2, #0
    37f6:	4b33      	ldr	r3, [pc, #204]	; (38c4 <_Z8receiverv+0x12c>)
    37f8:	50f2      	str	r2, [r6, r3]
											taskEXIT_CRITICAL();
    37fa:	4b33      	ldr	r3, [pc, #204]	; (38c8 <_Z8receiverv+0x130>)
    37fc:	4798      	blx	r3
											networkFlush();
    37fe:	4b33      	ldr	r3, [pc, #204]	; (38cc <_Z8receiverv+0x134>)
    3800:	4798      	blx	r3
											sendHMI("	Erreur crc");
    3802:	4833      	ldr	r0, [pc, #204]	; (38d0 <_Z8receiverv+0x138>)
    3804:	4b33      	ldr	r3, [pc, #204]	; (38d4 <_Z8receiverv+0x13c>)
    3806:	4798      	blx	r3
											return;
    3808:	e04e      	b.n	38a8 <_Z8receiverv+0x110>
										}
										else{
											sendHMI("	delay request receive");
    380a:	4833      	ldr	r0, [pc, #204]	; (38d8 <_Z8receiverv+0x140>)
    380c:	4b31      	ldr	r3, [pc, #196]	; (38d4 <_Z8receiverv+0x13c>)
    380e:	4798      	blx	r3
											delayResponse(data.id);
    3810:	1c30      	adds	r0, r6, #0
    3812:	4b32      	ldr	r3, [pc, #200]	; (38dc <_Z8receiverv+0x144>)
    3814:	4798      	blx	r3
											//pc.printf("id:%d",data.id);
										}
										
										
									break;
    3816:	e047      	b.n	38a8 <_Z8receiverv+0x110>
										case REP:
										uint8_t i;
										Clock timeMaster;
										sendHMI("	report receive");
    3818:	4831      	ldr	r0, [pc, #196]	; (38e0 <_Z8receiverv+0x148>)
    381a:	4b2e      	ldr	r3, [pc, #184]	; (38d4 <_Z8receiverv+0x13c>)
    381c:	4798      	blx	r3
										data.length=networkRead();
    381e:	4b26      	ldr	r3, [pc, #152]	; (38b8 <_Z8receiverv+0x120>)
    3820:	4798      	blx	r3
    3822:	4680      	mov	r8, r0
    3824:	ab03      	add	r3, sp, #12
    3826:	7098      	strb	r0, [r3, #2]
										for(i=0;i<data.length;i++){
    3828:	2800      	cmp	r0, #0
    382a:	d00d      	beq.n	3848 <_Z8receiverv+0xb0>
    382c:	240f      	movs	r4, #15
    382e:	446c      	add	r4, sp
    3830:	1e45      	subs	r5, r0, #1
    3832:	b2ed      	uxtb	r5, r5
    3834:	ab0c      	add	r3, sp, #48	; 0x30
    3836:	469c      	mov	ip, r3
    3838:	4465      	add	r5, ip
    383a:	3d20      	subs	r5, #32
											data.data[i]=networkRead();
    383c:	4f1e      	ldr	r7, [pc, #120]	; (38b8 <_Z8receiverv+0x120>)
    383e:	47b8      	blx	r7
    3840:	7020      	strb	r0, [r4, #0]
    3842:	3401      	adds	r4, #1
										case REP:
										uint8_t i;
										Clock timeMaster;
										sendHMI("	report receive");
										data.length=networkRead();
										for(i=0;i<data.length;i++){
    3844:	42ac      	cmp	r4, r5
    3846:	d1fa      	bne.n	383e <_Z8receiverv+0xa6>
											data.data[i]=networkRead();
										}
										data.crc=networkRead();
    3848:	4b1b      	ldr	r3, [pc, #108]	; (38b8 <_Z8receiverv+0x120>)
    384a:	4798      	blx	r3
    384c:	1c04      	adds	r4, r0, #0
    384e:	2321      	movs	r3, #33	; 0x21
    3850:	aa03      	add	r2, sp, #12
    3852:	54d0      	strb	r0, [r2, r3]
										//networkFlush();
										if(calculCRCID(data.type,data.length,data.data,data.id)!=data.crc){
    3854:	2004      	movs	r0, #4
    3856:	4641      	mov	r1, r8
    3858:	220f      	movs	r2, #15
    385a:	446a      	add	r2, sp
    385c:	1c33      	adds	r3, r6, #0
    385e:	4d17      	ldr	r5, [pc, #92]	; (38bc <_Z8receiverv+0x124>)
    3860:	47a8      	blx	r5
    3862:	4284      	cmp	r4, r0
    3864:	d003      	beq.n	386e <_Z8receiverv+0xd6>
											
											sendHMI("erreur crc");
    3866:	481f      	ldr	r0, [pc, #124]	; (38e4 <_Z8receiverv+0x14c>)
    3868:	4b1a      	ldr	r3, [pc, #104]	; (38d4 <_Z8receiverv+0x13c>)
    386a:	4798      	blx	r3
											return;
    386c:	e01c      	b.n	38a8 <_Z8receiverv+0x110>
										}
										else{	
											timeMaster.second=data.data[0]|(data.data[1]<<8);
    386e:	ab03      	add	r3, sp, #12
    3870:	791a      	ldrb	r2, [r3, #4]
    3872:	0211      	lsls	r1, r2, #8
    3874:	78da      	ldrb	r2, [r3, #3]
    3876:	430a      	orrs	r2, r1
    3878:	9200      	str	r2, [sp, #0]
											timeMaster.halfmillis=data.data[2]|(data.data[3]<<8);
    387a:	799a      	ldrb	r2, [r3, #6]
    387c:	0211      	lsls	r1, r2, #8
    387e:	795a      	ldrb	r2, [r3, #5]
    3880:	430a      	orrs	r2, r1
    3882:	9201      	str	r2, [sp, #4]
											timeMaster.sign=data.data[4];
    3884:	79db      	ldrb	r3, [r3, #7]
    3886:	1e5a      	subs	r2, r3, #1
    3888:	4193      	sbcs	r3, r2
    388a:	b2db      	uxtb	r3, r3
    388c:	466a      	mov	r2, sp
    388e:	7213      	strb	r3, [r2, #8]
											report(timeMaster,data.id);
    3890:	9800      	ldr	r0, [sp, #0]
    3892:	9901      	ldr	r1, [sp, #4]
    3894:	9a02      	ldr	r2, [sp, #8]
    3896:	1c33      	adds	r3, r6, #0
    3898:	4c13      	ldr	r4, [pc, #76]	; (38e8 <_Z8receiverv+0x150>)
    389a:	47a0      	blx	r4
										

										}
									break;
    389c:	e004      	b.n	38a8 <_Z8receiverv+0x110>
								#endif
								default:
									sendHMI("	Erreur type unknow");
    389e:	4813      	ldr	r0, [pc, #76]	; (38ec <_Z8receiverv+0x154>)
    38a0:	4b0c      	ldr	r3, [pc, #48]	; (38d4 <_Z8receiverv+0x13c>)
    38a2:	4798      	blx	r3
									networkFlush();	
    38a4:	4b09      	ldr	r3, [pc, #36]	; (38cc <_Z8receiverv+0x134>)
    38a6:	4798      	blx	r3
									
							}		
				}
				
			}		
}
    38a8:	b00c      	add	sp, #48	; 0x30
    38aa:	bc04      	pop	{r2}
    38ac:	4690      	mov	r8, r2
    38ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    38b0:	00001a35 	.word	0x00001a35
    38b4:	00000d61 	.word	0x00000d61
    38b8:	00001aa5 	.word	0x00001aa5
    38bc:	000035e1 	.word	0x000035e1
    38c0:	000010fd 	.word	0x000010fd
    38c4:	200042cc 	.word	0x200042cc
    38c8:	00001115 	.word	0x00001115
    38cc:	00001a4d 	.word	0x00001a4d
    38d0:	0000ed1c 	.word	0x0000ed1c
    38d4:	00003aed 	.word	0x00003aed
    38d8:	0000ed28 	.word	0x0000ed28
    38dc:	000036f9 	.word	0x000036f9
    38e0:	0000ed40 	.word	0x0000ed40
    38e4:	0000ed50 	.word	0x0000ed50
    38e8:	00002ce5 	.word	0x00002ce5
    38ec:	0000ed5c 	.word	0x0000ed5c

000038f0 <_Z16timeProtocolTaskv>:
		
	}
	return false;	
}

void timeProtocolTask(void){
    38f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    38f2:	b672      	cpsid	i
    38f4:	f3bf 8f5f 	dmb	sy
	Disable_global_interrupt();
    38f8:	2200      	movs	r2, #0
    38fa:	4b2f      	ldr	r3, [pc, #188]	; (39b8 <_Z16timeProtocolTaskv+0xc8>)
    38fc:	701a      	strb	r2, [r3, #0]
    38fe:	2300      	movs	r3, #0
		
	#ifdef MASTERMODE
		uint8_t i ;
		for(i=0;i<=MAX_SLAVE_CLOCK;i++){
			timeProt.saveTime[i].second=0;
    3900:	482e      	ldr	r0, [pc, #184]	; (39bc <_Z16timeProtocolTaskv+0xcc>)
    3902:	2100      	movs	r1, #0
    3904:	005a      	lsls	r2, r3, #1
    3906:	18d2      	adds	r2, r2, r3
    3908:	0092      	lsls	r2, r2, #2
    390a:	5011      	str	r1, [r2, r0]
    390c:	3301      	adds	r3, #1
void timeProtocolTask(void){
	Disable_global_interrupt();
		
	#ifdef MASTERMODE
		uint8_t i ;
		for(i=0;i<=MAX_SLAVE_CLOCK;i++){
    390e:	2b0b      	cmp	r3, #11
    3910:	d1f8      	bne.n	3904 <_Z16timeProtocolTaskv+0x14>
	timeProt.rx.sign=true;
	timeProt.rxDelay.sign=true;
	timeProt.rxSync.sign=true;
	timeProt.tx.sign=true;
	#endif
	timeProt.correction.nbCorrection=0;
    3912:	4c2a      	ldr	r4, [pc, #168]	; (39bc <_Z16timeProtocolTaskv+0xcc>)
    3914:	2300      	movs	r3, #0
    3916:	22a4      	movs	r2, #164	; 0xa4
    3918:	50a3      	str	r3, [r4, r2]

	
	sumOffset.second=0;
    391a:	4929      	ldr	r1, [pc, #164]	; (39c0 <_Z16timeProtocolTaskv+0xd0>)
    391c:	600b      	str	r3, [r1, #0]
	sumOffset.halfmillis=0;
    391e:	604b      	str	r3, [r1, #4]
	sumOffset.sign=true;
    3920:	3aa3      	subs	r2, #163	; 0xa3
    3922:	720a      	strb	r2, [r1, #8]
	
	
	timeProt.correction.currentTimeOffsetSync.second=0;
    3924:	21b8      	movs	r1, #184	; 0xb8
    3926:	5063      	str	r3, [r4, r1]
	timeProt.correction.currentTimeOffsetSync.halfmillis=0;
    3928:	3104      	adds	r1, #4
    392a:	5063      	str	r3, [r4, r1]
	timeProt.correction.currentTimeOffsetSync.sign=true;
    392c:	3104      	adds	r1, #4
    392e:	5462      	strb	r2, [r4, r1]
	
	
	timeProt.correction.previoustimeOffset.second=0;
    3930:	3914      	subs	r1, #20
    3932:	5063      	str	r3, [r4, r1]
	timeProt.correction.previoustimeOffset.halfmillis=0;
    3934:	3104      	adds	r1, #4
    3936:	5063      	str	r3, [r4, r1]
	timeProt.correction.previoustimeOffset.sign=true;
    3938:	3104      	adds	r1, #4
    393a:	5462      	strb	r2, [r4, r1]
	
	
	//timeProt.correction.timeSoftCor=0;
	timeProt.correction.indiceMoySoftCor=0;
    393c:	316c      	adds	r1, #108	; 0x6c
    393e:	5463      	strb	r3, [r4, r1]
	timeProt.correction.indiceFull=0;
    3940:	2122      	movs	r1, #34	; 0x22
    3942:	31ff      	adds	r1, #255	; 0xff
    3944:	5463      	strb	r3, [r4, r1]


	timeProt.delay.second=0;
    3946:	3999      	subs	r1, #153	; 0x99
    3948:	5063      	str	r3, [r4, r1]
	timeProt.delay.halfmillis=0;
    394a:	3104      	adds	r1, #4
    394c:	5063      	str	r3, [r4, r1]
	timeProt.delay.sign=true;
    394e:	3104      	adds	r1, #4
    3950:	5462      	strb	r2, [r4, r1]
	timeProt.waitIdentifier=false;
    3952:	3283      	adds	r2, #131	; 0x83
    3954:	54a3      	strb	r3, [r4, r2]
	timeProt.synchroTime=NULL;
    3956:	2594      	movs	r5, #148	; 0x94
    3958:	5163      	str	r3, [r4, r5]
	vSemaphoreCreateBinary(timeProt.synchroTime);
    395a:	2001      	movs	r0, #1
    395c:	2100      	movs	r1, #0
    395e:	3a81      	subs	r2, #129	; 0x81
    3960:	4b18      	ldr	r3, [pc, #96]	; (39c4 <_Z16timeProtocolTaskv+0xd4>)
    3962:	4798      	blx	r3
    3964:	5160      	str	r0, [r4, r5]
    3966:	2800      	cmp	r0, #0
    3968:	d004      	beq.n	3974 <_Z16timeProtocolTaskv+0x84>
    396a:	2100      	movs	r1, #0
    396c:	2200      	movs	r2, #0
    396e:	2300      	movs	r3, #0
    3970:	4c15      	ldr	r4, [pc, #84]	; (39c8 <_Z16timeProtocolTaskv+0xd8>)
    3972:	47a0      	blx	r4
	Enable_global_interrupt();
    3974:	2201      	movs	r2, #1
    3976:	4b10      	ldr	r3, [pc, #64]	; (39b8 <_Z16timeProtocolTaskv+0xc8>)
    3978:	701a      	strb	r2, [r3, #0]
    397a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    397e:	b662      	cpsie	i
	#ifdef SLAVEMODE
	delayRequest();
	#else
	sync();
    3980:	4b12      	ldr	r3, [pc, #72]	; (39cc <_Z16timeProtocolTaskv+0xdc>)
    3982:	4798      	blx	r3
	#endif
	
	while(1){
		//sendHMI("time protocol task.");
			//pc.printf("timeprotocol task");
			if(timeProt.synchroTime!=NULL){
    3984:	4d0d      	ldr	r5, [pc, #52]	; (39bc <_Z16timeProtocolTaskv+0xcc>)
				sender();
    3986:	4f12      	ldr	r7, [pc, #72]	; (39d0 <_Z16timeProtocolTaskv+0xe0>)
				if( xSemaphoreTake(timeProt.synchroTime,500/portTICK_RATE_MS) == pdTRUE ){
    3988:	1c2e      	adds	r6, r5, #0
	#endif
	
	while(1){
		//sendHMI("time protocol task.");
			//pc.printf("timeprotocol task");
			if(timeProt.synchroTime!=NULL){
    398a:	2394      	movs	r3, #148	; 0x94
    398c:	58eb      	ldr	r3, [r5, r3]
    398e:	2b00      	cmp	r3, #0
    3990:	d00f      	beq.n	39b2 <_Z16timeProtocolTaskv+0xc2>
				sender();
    3992:	47b8      	blx	r7
				if( xSemaphoreTake(timeProt.synchroTime,500/portTICK_RATE_MS) == pdTRUE ){
    3994:	2394      	movs	r3, #148	; 0x94
    3996:	58f0      	ldr	r0, [r6, r3]
    3998:	2100      	movs	r1, #0
    399a:	22fa      	movs	r2, #250	; 0xfa
    399c:	0052      	lsls	r2, r2, #1
    399e:	2300      	movs	r3, #0
    39a0:	4c0c      	ldr	r4, [pc, #48]	; (39d4 <_Z16timeProtocolTaskv+0xe4>)
    39a2:	47a0      	blx	r4
    39a4:	2801      	cmp	r0, #1
    39a6:	d104      	bne.n	39b2 <_Z16timeProtocolTaskv+0xc2>
					vTaskDelay(100/portTICK_RATE_MS);
    39a8:	3063      	adds	r0, #99	; 0x63
    39aa:	4b0b      	ldr	r3, [pc, #44]	; (39d8 <_Z16timeProtocolTaskv+0xe8>)
    39ac:	4798      	blx	r3
					receiver();
    39ae:	4b0b      	ldr	r3, [pc, #44]	; (39dc <_Z16timeProtocolTaskv+0xec>)
    39b0:	4798      	blx	r3
					
				}
					
			}
			correction();	
    39b2:	4b0b      	ldr	r3, [pc, #44]	; (39e0 <_Z16timeProtocolTaskv+0xf0>)
    39b4:	4798      	blx	r3
	}	 
	vTaskDelay(500/portTICK_RATE_MS);
    39b6:	e7e8      	b.n	398a <_Z16timeProtocolTaskv+0x9a>
    39b8:	200000d0 	.word	0x200000d0
    39bc:	200042cc 	.word	0x200042cc
    39c0:	200041f8 	.word	0x200041f8
    39c4:	00000481 	.word	0x00000481
    39c8:	000004d1 	.word	0x000004d1
    39cc:	00003685 	.word	0x00003685
    39d0:	000036c9 	.word	0x000036c9
    39d4:	00000661 	.word	0x00000661
    39d8:	00000d61 	.word	0x00000d61
    39dc:	00003799 	.word	0x00003799
    39e0:	000033c1 	.word	0x000033c1

000039e4 <_ZN4mbed6SerialD0Ev>:
    39e4:	b510      	push	{r4, lr}
    39e6:	1c04      	adds	r4, r0, #0
    39e8:	4b08      	ldr	r3, [pc, #32]	; (3a0c <_ZN4mbed6SerialD0Ev+0x28>)
    39ea:	6003      	str	r3, [r0, #0]
    39ec:	1c19      	adds	r1, r3, #0
    39ee:	3118      	adds	r1, #24
    39f0:	22dc      	movs	r2, #220	; 0xdc
    39f2:	5081      	str	r1, [r0, r2]
    39f4:	334c      	adds	r3, #76	; 0x4c
    39f6:	3204      	adds	r2, #4
    39f8:	5083      	str	r3, [r0, r2]
    39fa:	30dc      	adds	r0, #220	; 0xdc
    39fc:	4b04      	ldr	r3, [pc, #16]	; (3a10 <_ZN4mbed6SerialD0Ev+0x2c>)
    39fe:	4798      	blx	r3
    3a00:	1c20      	adds	r0, r4, #0
    3a02:	4b04      	ldr	r3, [pc, #16]	; (3a14 <_ZN4mbed6SerialD0Ev+0x30>)
    3a04:	4798      	blx	r3
    3a06:	1c20      	adds	r0, r4, #0
    3a08:	bd10      	pop	{r4, pc}
    3a0a:	46c0      	nop			; (mov r8, r8)
    3a0c:	0000f0a0 	.word	0x0000f0a0
    3a10:	00004dd5 	.word	0x00004dd5
    3a14:	0000652b 	.word	0x0000652b

00003a18 <_ZThn220_N4mbed6SerialD0Ev>:
    3a18:	b408      	push	{r3}
    3a1a:	4b02      	ldr	r3, [pc, #8]	; (3a24 <_ZThn220_N4mbed6SerialD0Ev+0xc>)
    3a1c:	469c      	mov	ip, r3
    3a1e:	38dc      	subs	r0, #220	; 0xdc
    3a20:	bc08      	pop	{r3}
    3a22:	4760      	bx	ip
    3a24:	000039e5 	.word	0x000039e5

00003a28 <_ZThn224_N4mbed6SerialD0Ev>:
    3a28:	b408      	push	{r3}
    3a2a:	4b02      	ldr	r3, [pc, #8]	; (3a34 <_ZThn224_N4mbed6SerialD0Ev+0xc>)
    3a2c:	469c      	mov	ip, r3
    3a2e:	38e0      	subs	r0, #224	; 0xe0
    3a30:	bc08      	pop	{r3}
    3a32:	4760      	bx	ip
    3a34:	000039e5 	.word	0x000039e5

00003a38 <_GLOBAL__sub_I_timeProt>:
	for(i=0;i<length;i++){
		crc=crc+data[i];
	}
	
	return crc;
    3a38:	b538      	push	{r3, r4, r5, lr}
char messageHMICor[200];
char messageHMIDelay[200];
char messageHMIOffset[200];
Clock sumOffset;
portTickType saveDRequest=0;
Serial pc(USBTX,USBRX);
    3a3a:	4c06      	ldr	r4, [pc, #24]	; (3a54 <_GLOBAL__sub_I_timeProt+0x1c>)
    3a3c:	1c20      	adds	r0, r4, #0
    3a3e:	2104      	movs	r1, #4
    3a40:	2205      	movs	r2, #5
    3a42:	2300      	movs	r3, #0
    3a44:	4d04      	ldr	r5, [pc, #16]	; (3a58 <_GLOBAL__sub_I_timeProt+0x20>)
    3a46:	47a8      	blx	r5
    3a48:	1c20      	adds	r0, r4, #0
    3a4a:	4904      	ldr	r1, [pc, #16]	; (3a5c <_GLOBAL__sub_I_timeProt+0x24>)
    3a4c:	4a04      	ldr	r2, [pc, #16]	; (3a60 <_GLOBAL__sub_I_timeProt+0x28>)
    3a4e:	4b05      	ldr	r3, [pc, #20]	; (3a64 <_GLOBAL__sub_I_timeProt+0x2c>)
    3a50:	4798      	blx	r3
	for(i=0;i<length;i++){
		crc=crc+data[i];
	}
	
	return crc;
    3a52:	bd38      	pop	{r3, r4, r5, pc}
    3a54:	20004104 	.word	0x20004104
    3a58:	00004bc9 	.word	0x00004bc9
    3a5c:	00002c8d 	.word	0x00002c8d
    3a60:	200000b0 	.word	0x200000b0
    3a64:	0000651d 	.word	0x0000651d

00003a68 <_Z12configureHMIv>:
Serial hmi(USBTX,USBRX);
//#endif
/************************************************************************/
/* FUNCTION                                                             */
/************************************************************************/
void configureHMI(void){
    3a68:	b508      	push	{r3, lr}
	hmi.printf("config HMI \r\n");
    3a6a:	4803      	ldr	r0, [pc, #12]	; (3a78 <_Z12configureHMIv+0x10>)
    3a6c:	30dc      	adds	r0, #220	; 0xdc
    3a6e:	4903      	ldr	r1, [pc, #12]	; (3a7c <_Z12configureHMIv+0x14>)
    3a70:	4b03      	ldr	r3, [pc, #12]	; (3a80 <_Z12configureHMIv+0x18>)
    3a72:	4798      	blx	r3
}
    3a74:	bd08      	pop	{r3, pc}
    3a76:	46c0      	nop			; (mov r8, r8)
    3a78:	200044b8 	.word	0x200044b8
    3a7c:	0000ed70 	.word	0x0000ed70
    3a80:	00004e11 	.word	0x00004e11

00003a84 <_Z7HMITaskv>:
void HMITask(){
    3a84:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a86:	b083      	sub	sp, #12
	//Can receive up to 10 char[50]
	uartQueue = xQueueCreate( LENGTH_QUEUE, sizeof( char* ) );
    3a88:	2032      	movs	r0, #50	; 0x32
    3a8a:	2104      	movs	r1, #4
    3a8c:	2200      	movs	r2, #0
    3a8e:	4b10      	ldr	r3, [pc, #64]	; (3ad0 <_Z7HMITaskv+0x4c>)
    3a90:	4798      	blx	r3
    3a92:	4b10      	ldr	r3, [pc, #64]	; (3ad4 <_Z7HMITaskv+0x50>)
    3a94:	6018      	str	r0, [r3, #0]

	while(1){
		//pc.printf("HMI task\r\n");
		 if( uartQueue != 0 )
    3a96:	1c1f      	adds	r7, r3, #0
		 {
			 char* receive;
			 // Receive a message on the created queue.
			 while( xQueueReceive( uartQueue, &( receive ), (  portTickType ) 0) )
			 {			
				 hmi.printf(receive);
    3a98:	4d0f      	ldr	r5, [pc, #60]	; (3ad8 <_Z7HMITaskv+0x54>)
    3a9a:	35dc      	adds	r5, #220	; 0xdc
	//Can receive up to 10 char[50]
	uartQueue = xQueueCreate( LENGTH_QUEUE, sizeof( char* ) );

	while(1){
		//pc.printf("HMI task\r\n");
		 if( uartQueue != 0 )
    3a9c:	683b      	ldr	r3, [r7, #0]
    3a9e:	2b00      	cmp	r3, #0
    3aa0:	d108      	bne.n	3ab4 <_Z7HMITaskv+0x30>
    3aa2:	e010      	b.n	3ac6 <_Z7HMITaskv+0x42>
		 {
			 char* receive;
			 // Receive a message on the created queue.
			 while( xQueueReceive( uartQueue, &( receive ), (  portTickType ) 0) )
			 {			
				 hmi.printf(receive);
    3aa4:	1c28      	adds	r0, r5, #0
    3aa6:	9901      	ldr	r1, [sp, #4]
    3aa8:	4c0c      	ldr	r4, [pc, #48]	; (3adc <_Z7HMITaskv+0x58>)
    3aaa:	47a0      	blx	r4
				 hmi.printf("\r\n");
    3aac:	1c28      	adds	r0, r5, #0
    3aae:	490c      	ldr	r1, [pc, #48]	; (3ae0 <_Z7HMITaskv+0x5c>)
    3ab0:	47a0      	blx	r4
    3ab2:	e000      	b.n	3ab6 <_Z7HMITaskv+0x32>
		//pc.printf("HMI task\r\n");
		 if( uartQueue != 0 )
		 {
			 char* receive;
			 // Receive a message on the created queue.
			 while( xQueueReceive( uartQueue, &( receive ), (  portTickType ) 0) )
    3ab4:	4e07      	ldr	r6, [pc, #28]	; (3ad4 <_Z7HMITaskv+0x50>)
    3ab6:	6830      	ldr	r0, [r6, #0]
    3ab8:	a901      	add	r1, sp, #4
    3aba:	2200      	movs	r2, #0
    3abc:	2300      	movs	r3, #0
    3abe:	4c09      	ldr	r4, [pc, #36]	; (3ae4 <_Z7HMITaskv+0x60>)
    3ac0:	47a0      	blx	r4
    3ac2:	2800      	cmp	r0, #0
    3ac4:	d1ee      	bne.n	3aa4 <_Z7HMITaskv+0x20>
			//printf("						t: %lus,%u\r\n",timeCopy.second,(unsigned int)timeCopy.halfmillis/2);
			//printf("timecor : %d\r\n",ti);
			//printf("corhms : %d\r\n",to);
		 }
		 // pc.printf("test");
        vTaskDelay(500/portTICK_RATE_MS);
    3ac6:	20fa      	movs	r0, #250	; 0xfa
    3ac8:	0040      	lsls	r0, r0, #1
    3aca:	4b07      	ldr	r3, [pc, #28]	; (3ae8 <_Z7HMITaskv+0x64>)
    3acc:	4798      	blx	r3
	}
    3ace:	e7e5      	b.n	3a9c <_Z7HMITaskv+0x18>
    3ad0:	00000481 	.word	0x00000481
    3ad4:	200045ac 	.word	0x200045ac
    3ad8:	200044b8 	.word	0x200044b8
    3adc:	00004e11 	.word	0x00004e11
    3ae0:	0000ea88 	.word	0x0000ea88
    3ae4:	00000661 	.word	0x00000661
    3ae8:	00000d61 	.word	0x00000d61

00003aec <_Z7sendHMIPKc>:
}
bool sendHMI(const char send[]){
    3aec:	b510      	push	{r4, lr}
    3aee:	b082      	sub	sp, #8
    3af0:	9001      	str	r0, [sp, #4]
			if( uartQueue != 0 )
    3af2:	4b08      	ldr	r3, [pc, #32]	; (3b14 <_Z7sendHMIPKc+0x28>)
    3af4:	6818      	ldr	r0, [r3, #0]
    3af6:	2800      	cmp	r0, #0
    3af8:	d009      	beq.n	3b0e <_Z7sendHMIPKc+0x22>
			{
				if( xQueueSendToBack( uartQueue,( void * ) &send,(  portTickType ) 0 ) == pdPASS )
    3afa:	a901      	add	r1, sp, #4
    3afc:	2200      	movs	r2, #0
    3afe:	2300      	movs	r3, #0
    3b00:	4c05      	ldr	r4, [pc, #20]	; (3b18 <_Z7sendHMIPKc+0x2c>)
    3b02:	47a0      	blx	r4
    3b04:	3801      	subs	r0, #1
    3b06:	4243      	negs	r3, r0
    3b08:	4158      	adcs	r0, r3
    3b0a:	b2c0      	uxtb	r0, r0
    3b0c:	e000      	b.n	3b10 <_Z7sendHMIPKc+0x24>
				
				/* Failed to post the message. */
				
			}
			
				return false;
    3b0e:	2000      	movs	r0, #0
			
    3b10:	b002      	add	sp, #8
    3b12:	bd10      	pop	{r4, pc}
    3b14:	200045ac 	.word	0x200045ac
    3b18:	000004d1 	.word	0x000004d1

00003b1c <_GLOBAL__sub_I_uartQueue>:
    3b1c:	b538      	push	{r3, r4, r5, lr}
/************************************************************************/
xQueueHandle uartQueue;
//#ifdef MASTERMODE
//Serial hmi(PA22,PA23);
//#else
Serial hmi(USBTX,USBRX);
    3b1e:	4c06      	ldr	r4, [pc, #24]	; (3b38 <_GLOBAL__sub_I_uartQueue+0x1c>)
    3b20:	1c20      	adds	r0, r4, #0
    3b22:	2104      	movs	r1, #4
    3b24:	2205      	movs	r2, #5
    3b26:	2300      	movs	r3, #0
    3b28:	4d04      	ldr	r5, [pc, #16]	; (3b3c <_GLOBAL__sub_I_uartQueue+0x20>)
    3b2a:	47a8      	blx	r5
    3b2c:	1c20      	adds	r0, r4, #0
    3b2e:	4904      	ldr	r1, [pc, #16]	; (3b40 <_GLOBAL__sub_I_uartQueue+0x24>)
    3b30:	4a04      	ldr	r2, [pc, #16]	; (3b44 <_GLOBAL__sub_I_uartQueue+0x28>)
    3b32:	4b05      	ldr	r3, [pc, #20]	; (3b48 <_GLOBAL__sub_I_uartQueue+0x2c>)
    3b34:	4798      	blx	r3
				
			}
			
				return false;
			
    3b36:	bd38      	pop	{r3, r4, r5, pc}
    3b38:	200044b8 	.word	0x200044b8
    3b3c:	00004bc9 	.word	0x00004bc9
    3b40:	00002c8d 	.word	0x00002c8d
    3b44:	200000b0 	.word	0x200000b0
    3b48:	0000651d 	.word	0x0000651d

00003b4c <mbed_die>:
    3b4c:	b508      	push	{r3, lr}
    3b4e:	b672      	cpsid	i
    3b50:	2096      	movs	r0, #150	; 0x96
    3b52:	f001 f9ed 	bl	4f30 <wait_ms>
    3b56:	2096      	movs	r0, #150	; 0x96
    3b58:	f001 f9ea 	bl	4f30 <wait_ms>
    3b5c:	e7f8      	b.n	3b50 <mbed_die+0x4>
    3b5e:	46c0      	nop			; (mov r8, r8)

00003b60 <NVIC_SetVector>:
    3b60:	4a0b      	ldr	r2, [pc, #44]	; (3b90 <NVIC_SetVector+0x30>)
    3b62:	b530      	push	{r4, r5, lr}
    3b64:	6894      	ldr	r4, [r2, #8]
    3b66:	6892      	ldr	r2, [r2, #8]
    3b68:	1c23      	adds	r3, r4, #0
    3b6a:	2a00      	cmp	r2, #0
    3b6c:	d10c      	bne.n	3b88 <NVIC_SetVector+0x28>
    3b6e:	2300      	movs	r3, #0
    3b70:	2280      	movs	r2, #128	; 0x80
    3b72:	591d      	ldr	r5, [r3, r4]
    3b74:	0592      	lsls	r2, r2, #22
    3b76:	189a      	adds	r2, r3, r2
    3b78:	3304      	adds	r3, #4
    3b7a:	6015      	str	r5, [r2, #0]
    3b7c:	2bb0      	cmp	r3, #176	; 0xb0
    3b7e:	d1f7      	bne.n	3b70 <NVIC_SetVector+0x10>
    3b80:	2380      	movs	r3, #128	; 0x80
    3b82:	4a03      	ldr	r2, [pc, #12]	; (3b90 <NVIC_SetVector+0x30>)
    3b84:	059b      	lsls	r3, r3, #22
    3b86:	6093      	str	r3, [r2, #8]
    3b88:	3010      	adds	r0, #16
    3b8a:	0080      	lsls	r0, r0, #2
    3b8c:	50c1      	str	r1, [r0, r3]
    3b8e:	bd30      	pop	{r4, r5, pc}
    3b90:	e000ed00 	.word	0xe000ed00

00003b94 <mbed_sdk_init>:
    3b94:	b508      	push	{r3, lr}
    3b96:	4b04      	ldr	r3, [pc, #16]	; (3ba8 <mbed_sdk_init+0x14>)
    3b98:	781a      	ldrb	r2, [r3, #0]
    3b9a:	2a00      	cmp	r2, #0
    3b9c:	d103      	bne.n	3ba6 <mbed_sdk_init+0x12>
    3b9e:	3201      	adds	r2, #1
    3ba0:	701a      	strb	r2, [r3, #0]
    3ba2:	f000 fc0f 	bl	43c4 <system_init>
    3ba6:	bd08      	pop	{r3, pc}
    3ba8:	200045b0 	.word	0x200045b0

00003bac <_ZN4mbed10FileHandle4flenEv>:
    3bac:	6803      	ldr	r3, [r0, #0]
    3bae:	b570      	push	{r4, r5, r6, lr}
    3bb0:	691b      	ldr	r3, [r3, #16]
    3bb2:	2100      	movs	r1, #0
    3bb4:	2201      	movs	r2, #1
    3bb6:	1c04      	adds	r4, r0, #0
    3bb8:	4798      	blx	r3
    3bba:	1c06      	adds	r6, r0, #0
    3bbc:	1c43      	adds	r3, r0, #1
    3bbe:	d00e      	beq.n	3bde <_ZN4mbed10FileHandle4flenEv+0x32>
    3bc0:	6823      	ldr	r3, [r4, #0]
    3bc2:	2100      	movs	r1, #0
    3bc4:	691b      	ldr	r3, [r3, #16]
    3bc6:	2202      	movs	r2, #2
    3bc8:	1c20      	adds	r0, r4, #0
    3bca:	4798      	blx	r3
    3bcc:	1c05      	adds	r5, r0, #0
    3bce:	6823      	ldr	r3, [r4, #0]
    3bd0:	1c20      	adds	r0, r4, #0
    3bd2:	691b      	ldr	r3, [r3, #16]
    3bd4:	1c31      	adds	r1, r6, #0
    3bd6:	2200      	movs	r2, #0
    3bd8:	4798      	blx	r3
    3bda:	1c28      	adds	r0, r5, #0
    3bdc:	bd70      	pop	{r4, r5, r6, pc}
    3bde:	e7fd      	b.n	3bdc <_ZN4mbed10FileHandle4flenEv+0x30>

00003be0 <_ZL11init_serialv.part.0>:
    3be0:	b508      	push	{r3, lr}
    3be2:	4803      	ldr	r0, [pc, #12]	; (3bf0 <_ZL11init_serialv.part.0+0x10>)
    3be4:	2104      	movs	r1, #4
    3be6:	2205      	movs	r2, #5
    3be8:	f000 fd2a 	bl	4640 <serial_init>
    3bec:	bd08      	pop	{r3, pc}
    3bee:	46c0      	nop			; (mov r8, r8)
    3bf0:	20004758 	.word	0x20004758

00003bf4 <_ZN4mbed10FileHandleD1Ev>:
    3bf4:	4b09      	ldr	r3, [pc, #36]	; (3c1c <_ZN4mbed10FileHandleD1Ev+0x28>)
    3bf6:	b510      	push	{r4, lr}
    3bf8:	3308      	adds	r3, #8
    3bfa:	6003      	str	r3, [r0, #0]
    3bfc:	4b08      	ldr	r3, [pc, #32]	; (3c20 <_ZN4mbed10FileHandleD1Ev+0x2c>)
    3bfe:	2100      	movs	r1, #0
    3c00:	1c5a      	adds	r2, r3, #1
    3c02:	32ff      	adds	r2, #255	; 0xff
    3c04:	e002      	b.n	3c0c <_ZN4mbed10FileHandleD1Ev+0x18>
    3c06:	3304      	adds	r3, #4
    3c08:	4293      	cmp	r3, r2
    3c0a:	d006      	beq.n	3c1a <_ZN4mbed10FileHandleD1Ev+0x26>
    3c0c:	681c      	ldr	r4, [r3, #0]
    3c0e:	4284      	cmp	r4, r0
    3c10:	d1f9      	bne.n	3c06 <_ZN4mbed10FileHandleD1Ev+0x12>
    3c12:	6019      	str	r1, [r3, #0]
    3c14:	3304      	adds	r3, #4
    3c16:	4293      	cmp	r3, r2
    3c18:	d1f8      	bne.n	3c0c <_ZN4mbed10FileHandleD1Ev+0x18>
    3c1a:	bd10      	pop	{r4, pc}
    3c1c:	0000ed98 	.word	0x0000ed98
    3c20:	200045b4 	.word	0x200045b4

00003c24 <_open>:
    3c24:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c26:	4647      	mov	r7, r8
    3c28:	b480      	push	{r7}
    3c2a:	1c0e      	adds	r6, r1, #0
    3c2c:	b082      	sub	sp, #8
    3c2e:	4934      	ldr	r1, [pc, #208]	; (3d00 <_open+0xdc>)
    3c30:	1c05      	adds	r5, r0, #0
    3c32:	f007 fc09 	bl	b448 <strcmp>
    3c36:	1e04      	subs	r4, r0, #0
    3c38:	d108      	bne.n	3c4c <_open+0x28>
    3c3a:	4b32      	ldr	r3, [pc, #200]	; (3d04 <_open+0xe0>)
    3c3c:	681b      	ldr	r3, [r3, #0]
    3c3e:	2b00      	cmp	r3, #0
    3c40:	d00f      	beq.n	3c62 <_open+0x3e>
    3c42:	1c20      	adds	r0, r4, #0
    3c44:	b002      	add	sp, #8
    3c46:	bc04      	pop	{r2}
    3c48:	4690      	mov	r8, r2
    3c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c4c:	1c28      	adds	r0, r5, #0
    3c4e:	492e      	ldr	r1, [pc, #184]	; (3d08 <_open+0xe4>)
    3c50:	f007 fbfa 	bl	b448 <strcmp>
    3c54:	2800      	cmp	r0, #0
    3c56:	d107      	bne.n	3c68 <_open+0x44>
    3c58:	4b2a      	ldr	r3, [pc, #168]	; (3d04 <_open+0xe0>)
    3c5a:	2401      	movs	r4, #1
    3c5c:	681b      	ldr	r3, [r3, #0]
    3c5e:	2b00      	cmp	r3, #0
    3c60:	d1ef      	bne.n	3c42 <_open+0x1e>
    3c62:	f7ff ffbd 	bl	3be0 <_ZL11init_serialv.part.0>
    3c66:	e7ec      	b.n	3c42 <_open+0x1e>
    3c68:	1c28      	adds	r0, r5, #0
    3c6a:	4928      	ldr	r1, [pc, #160]	; (3d0c <_open+0xe8>)
    3c6c:	f007 fbec 	bl	b448 <strcmp>
    3c70:	2800      	cmp	r0, #0
    3c72:	d024      	beq.n	3cbe <_open+0x9a>
    3c74:	4f26      	ldr	r7, [pc, #152]	; (3d10 <_open+0xec>)
    3c76:	2400      	movs	r4, #0
    3c78:	1c3b      	adds	r3, r7, #0
    3c7a:	e003      	b.n	3c84 <_open+0x60>
    3c7c:	3401      	adds	r4, #1
    3c7e:	3304      	adds	r3, #4
    3c80:	2c40      	cmp	r4, #64	; 0x40
    3c82:	d022      	beq.n	3cca <_open+0xa6>
    3c84:	681a      	ldr	r2, [r3, #0]
    3c86:	2a00      	cmp	r2, #0
    3c88:	d1f8      	bne.n	3c7c <_open+0x58>
    3c8a:	782b      	ldrb	r3, [r5, #0]
    3c8c:	2b3a      	cmp	r3, #58	; 0x3a
    3c8e:	d030      	beq.n	3cf2 <_open+0xce>
    3c90:	4668      	mov	r0, sp
    3c92:	1c29      	adds	r1, r5, #0
    3c94:	f000 fe5e 	bl	4954 <_ZN4mbed8FilePathC1EPKc>
    3c98:	4668      	mov	r0, sp
    3c9a:	f000 feb5 	bl	4a08 <_ZN4mbed8FilePath6existsEv>
    3c9e:	2800      	cmp	r0, #0
    3ca0:	d013      	beq.n	3cca <_open+0xa6>
    3ca2:	4668      	mov	r0, sp
    3ca4:	f000 fe92 	bl	49cc <_ZN4mbed8FilePath6isFileEv>
    3ca8:	2800      	cmp	r0, #0
    3caa:	d011      	beq.n	3cd0 <_open+0xac>
    3cac:	4668      	mov	r0, sp
    3cae:	f000 fe99 	bl	49e4 <_ZN4mbed8FilePath4fileEv>
    3cb2:	2800      	cmp	r0, #0
    3cb4:	d009      	beq.n	3cca <_open+0xa6>
    3cb6:	00a3      	lsls	r3, r4, #2
    3cb8:	50f8      	str	r0, [r7, r3]
    3cba:	3403      	adds	r4, #3
    3cbc:	e7c1      	b.n	3c42 <_open+0x1e>
    3cbe:	4b11      	ldr	r3, [pc, #68]	; (3d04 <_open+0xe0>)
    3cc0:	2402      	movs	r4, #2
    3cc2:	681b      	ldr	r3, [r3, #0]
    3cc4:	2b00      	cmp	r3, #0
    3cc6:	d1bc      	bne.n	3c42 <_open+0x1e>
    3cc8:	e7cb      	b.n	3c62 <_open+0x3e>
    3cca:	2401      	movs	r4, #1
    3ccc:	4264      	negs	r4, r4
    3cce:	e7b8      	b.n	3c42 <_open+0x1e>
    3cd0:	4668      	mov	r0, sp
    3cd2:	f000 fe6d 	bl	49b0 <_ZN4mbed8FilePath10fileSystemEv>
    3cd6:	1e05      	subs	r5, r0, #0
    3cd8:	d0f7      	beq.n	3cca <_open+0xa6>
    3cda:	6803      	ldr	r3, [r0, #0]
    3cdc:	4668      	mov	r0, sp
    3cde:	689b      	ldr	r3, [r3, #8]
    3ce0:	4698      	mov	r8, r3
    3ce2:	f000 fe63 	bl	49ac <_ZN4mbed8FilePath8fileNameEv>
    3ce6:	4a0b      	ldr	r2, [pc, #44]	; (3d14 <_open+0xf0>)
    3ce8:	1c01      	adds	r1, r0, #0
    3cea:	4032      	ands	r2, r6
    3cec:	1c28      	adds	r0, r5, #0
    3cee:	47c0      	blx	r8
    3cf0:	e7df      	b.n	3cb2 <_open+0x8e>
    3cf2:	1c28      	adds	r0, r5, #0
    3cf4:	4908      	ldr	r1, [pc, #32]	; (3d18 <_open+0xf4>)
    3cf6:	466a      	mov	r2, sp
    3cf8:	f007 fb30 	bl	b35c <siscanf>
    3cfc:	9800      	ldr	r0, [sp, #0]
    3cfe:	e7d8      	b.n	3cb2 <_open+0x8e>
    3d00:	0000ed80 	.word	0x0000ed80
    3d04:	200046bc 	.word	0x200046bc
    3d08:	0000ed90 	.word	0x0000ed90
    3d0c:	0000ed88 	.word	0x0000ed88
    3d10:	200045b4 	.word	0x200045b4
    3d14:	fffeffff 	.word	0xfffeffff
    3d18:	0000edc4 	.word	0x0000edc4

00003d1c <_close>:
    3d1c:	b508      	push	{r3, lr}
    3d1e:	1c03      	adds	r3, r0, #0
    3d20:	2000      	movs	r0, #0
    3d22:	2b02      	cmp	r3, #2
    3d24:	dd0a      	ble.n	3d3c <_close+0x20>
    3d26:	4907      	ldr	r1, [pc, #28]	; (3d44 <_close+0x28>)
    3d28:	3b03      	subs	r3, #3
    3d2a:	009b      	lsls	r3, r3, #2
    3d2c:	585a      	ldr	r2, [r3, r1]
    3d2e:	5058      	str	r0, [r3, r1]
    3d30:	2a00      	cmp	r2, #0
    3d32:	d004      	beq.n	3d3e <_close+0x22>
    3d34:	6813      	ldr	r3, [r2, #0]
    3d36:	1c10      	adds	r0, r2, #0
    3d38:	685b      	ldr	r3, [r3, #4]
    3d3a:	4798      	blx	r3
    3d3c:	bd08      	pop	{r3, pc}
    3d3e:	2001      	movs	r0, #1
    3d40:	4240      	negs	r0, r0
    3d42:	e7fb      	b.n	3d3c <_close+0x20>
    3d44:	200045b4 	.word	0x200045b4

00003d48 <_write>:
    3d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d4a:	1c0c      	adds	r4, r1, #0
    3d4c:	1c17      	adds	r7, r2, #0
    3d4e:	2802      	cmp	r0, #2
    3d50:	dc12      	bgt.n	3d78 <_write+0x30>
    3d52:	4b10      	ldr	r3, [pc, #64]	; (3d94 <_write+0x4c>)
    3d54:	681b      	ldr	r3, [r3, #0]
    3d56:	2b00      	cmp	r3, #0
    3d58:	d101      	bne.n	3d5e <_write+0x16>
    3d5a:	f7ff ff41 	bl	3be0 <_ZL11init_serialv.part.0>
    3d5e:	2f00      	cmp	r7, #0
    3d60:	d008      	beq.n	3d74 <_write+0x2c>
    3d62:	4d0d      	ldr	r5, [pc, #52]	; (3d98 <_write+0x50>)
    3d64:	19e6      	adds	r6, r4, r7
    3d66:	7821      	ldrb	r1, [r4, #0]
    3d68:	1c28      	adds	r0, r5, #0
    3d6a:	3401      	adds	r4, #1
    3d6c:	f000 fdd2 	bl	4914 <serial_putc>
    3d70:	42b4      	cmp	r4, r6
    3d72:	d1f8      	bne.n	3d66 <_write+0x1e>
    3d74:	1c38      	adds	r0, r7, #0
    3d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3d78:	3803      	subs	r0, #3
    3d7a:	4b08      	ldr	r3, [pc, #32]	; (3d9c <_write+0x54>)
    3d7c:	0080      	lsls	r0, r0, #2
    3d7e:	58c0      	ldr	r0, [r0, r3]
    3d80:	2800      	cmp	r0, #0
    3d82:	d003      	beq.n	3d8c <_write+0x44>
    3d84:	6803      	ldr	r3, [r0, #0]
    3d86:	681b      	ldr	r3, [r3, #0]
    3d88:	4798      	blx	r3
    3d8a:	e7f4      	b.n	3d76 <_write+0x2e>
    3d8c:	2001      	movs	r0, #1
    3d8e:	4240      	negs	r0, r0
    3d90:	e7f1      	b.n	3d76 <_write+0x2e>
    3d92:	46c0      	nop			; (mov r8, r8)
    3d94:	200046bc 	.word	0x200046bc
    3d98:	20004758 	.word	0x20004758
    3d9c:	200045b4 	.word	0x200045b4

00003da0 <_read>:
    3da0:	b510      	push	{r4, lr}
    3da2:	1c0c      	adds	r4, r1, #0
    3da4:	2802      	cmp	r0, #2
    3da6:	dc09      	bgt.n	3dbc <_read+0x1c>
    3da8:	4b0c      	ldr	r3, [pc, #48]	; (3ddc <_read+0x3c>)
    3daa:	681b      	ldr	r3, [r3, #0]
    3dac:	2b00      	cmp	r3, #0
    3dae:	d00f      	beq.n	3dd0 <_read+0x30>
    3db0:	480b      	ldr	r0, [pc, #44]	; (3de0 <_read+0x40>)
    3db2:	f000 fd83 	bl	48bc <serial_getc>
    3db6:	7020      	strb	r0, [r4, #0]
    3db8:	2001      	movs	r0, #1
    3dba:	bd10      	pop	{r4, pc}
    3dbc:	3803      	subs	r0, #3
    3dbe:	4b09      	ldr	r3, [pc, #36]	; (3de4 <_read+0x44>)
    3dc0:	0080      	lsls	r0, r0, #2
    3dc2:	58c0      	ldr	r0, [r0, r3]
    3dc4:	2800      	cmp	r0, #0
    3dc6:	d006      	beq.n	3dd6 <_read+0x36>
    3dc8:	6803      	ldr	r3, [r0, #0]
    3dca:	689b      	ldr	r3, [r3, #8]
    3dcc:	4798      	blx	r3
    3dce:	e7f4      	b.n	3dba <_read+0x1a>
    3dd0:	f7ff ff06 	bl	3be0 <_ZL11init_serialv.part.0>
    3dd4:	e7ec      	b.n	3db0 <_read+0x10>
    3dd6:	2001      	movs	r0, #1
    3dd8:	4240      	negs	r0, r0
    3dda:	e7ee      	b.n	3dba <_read+0x1a>
    3ddc:	200046bc 	.word	0x200046bc
    3de0:	20004758 	.word	0x20004758
    3de4:	200045b4 	.word	0x200045b4

00003de8 <_isatty>:
    3de8:	b508      	push	{r3, lr}
    3dea:	1c03      	adds	r3, r0, #0
    3dec:	2001      	movs	r0, #1
    3dee:	2b02      	cmp	r3, #2
    3df0:	dd08      	ble.n	3e04 <_isatty+0x1c>
    3df2:	3b03      	subs	r3, #3
    3df4:	4a05      	ldr	r2, [pc, #20]	; (3e0c <_isatty+0x24>)
    3df6:	009b      	lsls	r3, r3, #2
    3df8:	5898      	ldr	r0, [r3, r2]
    3dfa:	2800      	cmp	r0, #0
    3dfc:	d003      	beq.n	3e06 <_isatty+0x1e>
    3dfe:	6803      	ldr	r3, [r0, #0]
    3e00:	68db      	ldr	r3, [r3, #12]
    3e02:	4798      	blx	r3
    3e04:	bd08      	pop	{r3, pc}
    3e06:	2001      	movs	r0, #1
    3e08:	4240      	negs	r0, r0
    3e0a:	e7fb      	b.n	3e04 <_isatty+0x1c>
    3e0c:	200045b4 	.word	0x200045b4

00003e10 <_lseek>:
    3e10:	b508      	push	{r3, lr}
    3e12:	1c03      	adds	r3, r0, #0
    3e14:	2000      	movs	r0, #0
    3e16:	2b02      	cmp	r3, #2
    3e18:	dd08      	ble.n	3e2c <_lseek+0x1c>
    3e1a:	3b03      	subs	r3, #3
    3e1c:	4805      	ldr	r0, [pc, #20]	; (3e34 <_lseek+0x24>)
    3e1e:	009b      	lsls	r3, r3, #2
    3e20:	5818      	ldr	r0, [r3, r0]
    3e22:	2800      	cmp	r0, #0
    3e24:	d003      	beq.n	3e2e <_lseek+0x1e>
    3e26:	6803      	ldr	r3, [r0, #0]
    3e28:	691b      	ldr	r3, [r3, #16]
    3e2a:	4798      	blx	r3
    3e2c:	bd08      	pop	{r3, pc}
    3e2e:	2001      	movs	r0, #1
    3e30:	4240      	negs	r0, r0
    3e32:	e7fb      	b.n	3e2c <_lseek+0x1c>
    3e34:	200045b4 	.word	0x200045b4

00003e38 <_fstat>:
    3e38:	b508      	push	{r3, lr}
    3e3a:	2802      	cmp	r0, #2
    3e3c:	d804      	bhi.n	3e48 <_fstat+0x10>
    3e3e:	2380      	movs	r3, #128	; 0x80
    3e40:	2000      	movs	r0, #0
    3e42:	019b      	lsls	r3, r3, #6
    3e44:	604b      	str	r3, [r1, #4]
    3e46:	bd08      	pop	{r3, pc}
    3e48:	f005 fbb2 	bl	95b0 <__errno>
    3e4c:	2309      	movs	r3, #9
    3e4e:	6003      	str	r3, [r0, #0]
    3e50:	2001      	movs	r0, #1
    3e52:	4240      	negs	r0, r0
    3e54:	e7f7      	b.n	3e46 <_fstat+0xe>
    3e56:	46c0      	nop			; (mov r8, r8)

00003e58 <__cxa_pure_virtual>:
    3e58:	b508      	push	{r3, lr}
    3e5a:	2001      	movs	r0, #1
    3e5c:	f005 fbae 	bl	95bc <exit>

00003e60 <mbed_main>:
    3e60:	4770      	bx	lr
    3e62:	46c0      	nop			; (mov r8, r8)

00003e64 <__wrap_main>:
    3e64:	b508      	push	{r3, lr}
    3e66:	f7ff fe95 	bl	3b94 <mbed_sdk_init>
    3e6a:	f7ff fff9 	bl	3e60 <mbed_main>
    3e6e:	f7fd fe83 	bl	1b78 <main>
    3e72:	bd08      	pop	{r3, pc}

00003e74 <_sbrk>:
    3e74:	4a07      	ldr	r2, [pc, #28]	; (3e94 <_sbrk+0x20>)
    3e76:	6813      	ldr	r3, [r2, #0]
    3e78:	1818      	adds	r0, r3, r0
    3e7a:	f3ef 8108 	mrs	r1, MSP
    3e7e:	4288      	cmp	r0, r1
    3e80:	d202      	bcs.n	3e88 <_sbrk+0x14>
    3e82:	6010      	str	r0, [r2, #0]
    3e84:	1c18      	adds	r0, r3, #0
    3e86:	4770      	bx	lr
    3e88:	220c      	movs	r2, #12
    3e8a:	2001      	movs	r0, #1
    3e8c:	4b02      	ldr	r3, [pc, #8]	; (3e98 <_sbrk+0x24>)
    3e8e:	4240      	negs	r0, r0
    3e90:	601a      	str	r2, [r3, #0]
    3e92:	e7f8      	b.n	3e86 <_sbrk+0x12>
    3e94:	200000cc 	.word	0x200000cc
    3e98:	200047c8 	.word	0x200047c8

00003e9c <_exit>:
    3e9c:	b508      	push	{r3, lr}
    3e9e:	2800      	cmp	r0, #0
    3ea0:	d100      	bne.n	3ea4 <_exit+0x8>
    3ea2:	e7fe      	b.n	3ea2 <_exit+0x6>
    3ea4:	f7ff fe52 	bl	3b4c <mbed_die>
    3ea8:	e7fb      	b.n	3ea2 <_exit+0x6>
    3eaa:	46c0      	nop			; (mov r8, r8)

00003eac <_ZN4mbed26mbed_set_unbuffered_streamEP7__sFILE>:
    3eac:	b508      	push	{r3, lr}
    3eae:	2100      	movs	r1, #0
    3eb0:	f007 f99f 	bl	b1f2 <setbuf>
    3eb4:	bd08      	pop	{r3, pc}
    3eb6:	46c0      	nop			; (mov r8, r8)

00003eb8 <Dummy_Handler>:
    3eb8:	e7fe      	b.n	3eb8 <Dummy_Handler>
    3eba:	46c0      	nop			; (mov r8, r8)

00003ebc <Reset_Handler>:
    3ebc:	4816      	ldr	r0, [pc, #88]	; (3f18 <Reset_Handler+0x5c>)
    3ebe:	4917      	ldr	r1, [pc, #92]	; (3f1c <Reset_Handler+0x60>)
    3ec0:	b510      	push	{r4, lr}
    3ec2:	4288      	cmp	r0, r1
    3ec4:	d00d      	beq.n	3ee2 <Reset_Handler+0x26>
    3ec6:	4b16      	ldr	r3, [pc, #88]	; (3f20 <Reset_Handler+0x64>)
    3ec8:	4299      	cmp	r1, r3
    3eca:	d20a      	bcs.n	3ee2 <Reset_Handler+0x26>
    3ecc:	43ca      	mvns	r2, r1
    3ece:	18d3      	adds	r3, r2, r3
    3ed0:	2200      	movs	r2, #0
    3ed2:	089b      	lsrs	r3, r3, #2
    3ed4:	3301      	adds	r3, #1
    3ed6:	009b      	lsls	r3, r3, #2
    3ed8:	5884      	ldr	r4, [r0, r2]
    3eda:	508c      	str	r4, [r1, r2]
    3edc:	3204      	adds	r2, #4
    3ede:	429a      	cmp	r2, r3
    3ee0:	d1fa      	bne.n	3ed8 <Reset_Handler+0x1c>
    3ee2:	4910      	ldr	r1, [pc, #64]	; (3f24 <Reset_Handler+0x68>)
    3ee4:	4b10      	ldr	r3, [pc, #64]	; (3f28 <Reset_Handler+0x6c>)
    3ee6:	4299      	cmp	r1, r3
    3ee8:	d20b      	bcs.n	3f02 <Reset_Handler+0x46>
    3eea:	43ca      	mvns	r2, r1
    3eec:	2000      	movs	r0, #0
    3eee:	18d3      	adds	r3, r2, r3
    3ef0:	2200      	movs	r2, #0
    3ef2:	089b      	lsrs	r3, r3, #2
    3ef4:	3301      	adds	r3, #1
    3ef6:	009b      	lsls	r3, r3, #2
    3ef8:	188c      	adds	r4, r1, r2
    3efa:	3204      	adds	r2, #4
    3efc:	6020      	str	r0, [r4, #0]
    3efe:	429a      	cmp	r2, r3
    3f00:	d1fa      	bne.n	3ef8 <Reset_Handler+0x3c>
    3f02:	21ff      	movs	r1, #255	; 0xff
    3f04:	4b09      	ldr	r3, [pc, #36]	; (3f2c <Reset_Handler+0x70>)
    3f06:	4a0a      	ldr	r2, [pc, #40]	; (3f30 <Reset_Handler+0x74>)
    3f08:	438b      	bics	r3, r1
    3f0a:	6093      	str	r3, [r2, #8]
    3f0c:	f005 fe86 	bl	9c1c <__libc_init_array>
    3f10:	f7ff ffa8 	bl	3e64 <__wrap_main>
    3f14:	e7fe      	b.n	3f14 <Reset_Handler+0x58>
    3f16:	46c0      	nop			; (mov r8, r8)
    3f18:	0000fc0c 	.word	0x0000fc0c
    3f1c:	200000b0 	.word	0x200000b0
    3f20:	20000174 	.word	0x20000174
    3f24:	20000174 	.word	0x20000174
    3f28:	200047cc 	.word	0x200047cc
    3f2c:	00000000 	.word	0x00000000
    3f30:	e000ed00 	.word	0xe000ed00

00003f34 <extint_register_callback>:
    3f34:	2317      	movs	r3, #23
    3f36:	2a00      	cmp	r2, #0
    3f38:	d001      	beq.n	3f3e <extint_register_callback+0xa>
    3f3a:	1c18      	adds	r0, r3, #0
    3f3c:	4770      	bx	lr
    3f3e:	4a06      	ldr	r2, [pc, #24]	; (3f58 <extint_register_callback+0x24>)
    3f40:	0089      	lsls	r1, r1, #2
    3f42:	588b      	ldr	r3, [r1, r2]
    3f44:	2b00      	cmp	r3, #0
    3f46:	d003      	beq.n	3f50 <extint_register_callback+0x1c>
    3f48:	4283      	cmp	r3, r0
    3f4a:	d003      	beq.n	3f54 <extint_register_callback+0x20>
    3f4c:	231d      	movs	r3, #29
    3f4e:	e7f4      	b.n	3f3a <extint_register_callback+0x6>
    3f50:	5088      	str	r0, [r1, r2]
    3f52:	e7f2      	b.n	3f3a <extint_register_callback+0x6>
    3f54:	2300      	movs	r3, #0
    3f56:	e7f0      	b.n	3f3a <extint_register_callback+0x6>
    3f58:	20004718 	.word	0x20004718

00003f5c <extint_chan_enable_callback>:
    3f5c:	2317      	movs	r3, #23
    3f5e:	2900      	cmp	r1, #0
    3f60:	d001      	beq.n	3f66 <extint_chan_enable_callback+0xa>
    3f62:	1c18      	adds	r0, r3, #0
    3f64:	4770      	bx	lr
    3f66:	2200      	movs	r2, #0
    3f68:	281f      	cmp	r0, #31
    3f6a:	d800      	bhi.n	3f6e <extint_chan_enable_callback+0x12>
    3f6c:	4a02      	ldr	r2, [pc, #8]	; (3f78 <extint_chan_enable_callback+0x1c>)
    3f6e:	2301      	movs	r3, #1
    3f70:	4083      	lsls	r3, r0
    3f72:	60d3      	str	r3, [r2, #12]
    3f74:	2300      	movs	r3, #0
    3f76:	e7f4      	b.n	3f62 <extint_chan_enable_callback+0x6>
    3f78:	40001800 	.word	0x40001800

00003f7c <EIC_Handler>:
    3f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f7e:	2300      	movs	r3, #0
    3f80:	2601      	movs	r6, #1
    3f82:	4c0b      	ldr	r4, [pc, #44]	; (3fb0 <EIC_Handler+0x34>)
    3f84:	4d0b      	ldr	r5, [pc, #44]	; (3fb4 <EIC_Handler+0x38>)
    3f86:	4f0c      	ldr	r7, [pc, #48]	; (3fb8 <EIC_Handler+0x3c>)
    3f88:	7023      	strb	r3, [r4, #0]
    3f8a:	1c32      	adds	r2, r6, #0
    3f8c:	409a      	lsls	r2, r3
    3f8e:	6929      	ldr	r1, [r5, #16]
    3f90:	4211      	tst	r1, r2
    3f92:	d005      	beq.n	3fa0 <EIC_Handler+0x24>
    3f94:	612a      	str	r2, [r5, #16]
    3f96:	009b      	lsls	r3, r3, #2
    3f98:	59db      	ldr	r3, [r3, r7]
    3f9a:	2b00      	cmp	r3, #0
    3f9c:	d000      	beq.n	3fa0 <EIC_Handler+0x24>
    3f9e:	4798      	blx	r3
    3fa0:	7823      	ldrb	r3, [r4, #0]
    3fa2:	3301      	adds	r3, #1
    3fa4:	b2db      	uxtb	r3, r3
    3fa6:	7023      	strb	r3, [r4, #0]
    3fa8:	2b0f      	cmp	r3, #15
    3faa:	d9ee      	bls.n	3f8a <EIC_Handler+0xe>
    3fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3fae:	46c0      	nop			; (mov r8, r8)
    3fb0:	20004714 	.word	0x20004714
    3fb4:	40001800 	.word	0x40001800
    3fb8:	20004718 	.word	0x20004718

00003fbc <_extint_enable>:
    3fbc:	2302      	movs	r3, #2
    3fbe:	4a04      	ldr	r2, [pc, #16]	; (3fd0 <_extint_enable+0x14>)
    3fc0:	7811      	ldrb	r1, [r2, #0]
    3fc2:	430b      	orrs	r3, r1
    3fc4:	7013      	strb	r3, [r2, #0]
    3fc6:	7853      	ldrb	r3, [r2, #1]
    3fc8:	b25b      	sxtb	r3, r3
    3fca:	2b00      	cmp	r3, #0
    3fcc:	dbfb      	blt.n	3fc6 <_extint_enable+0xa>
    3fce:	4770      	bx	lr
    3fd0:	40001800 	.word	0x40001800

00003fd4 <_system_extint_init>:
    3fd4:	2340      	movs	r3, #64	; 0x40
    3fd6:	b500      	push	{lr}
    3fd8:	4a12      	ldr	r2, [pc, #72]	; (4024 <_system_extint_init+0x50>)
    3fda:	b083      	sub	sp, #12
    3fdc:	6991      	ldr	r1, [r2, #24]
    3fde:	2005      	movs	r0, #5
    3fe0:	430b      	orrs	r3, r1
    3fe2:	6193      	str	r3, [r2, #24]
    3fe4:	2300      	movs	r3, #0
    3fe6:	a901      	add	r1, sp, #4
    3fe8:	700b      	strb	r3, [r1, #0]
    3fea:	f000 f9c9 	bl	4380 <system_gclk_chan_set_config>
    3fee:	2005      	movs	r0, #5
    3ff0:	f000 f988 	bl	4304 <system_gclk_chan_enable>
    3ff4:	2301      	movs	r3, #1
    3ff6:	4a0c      	ldr	r2, [pc, #48]	; (4028 <_system_extint_init+0x54>)
    3ff8:	7811      	ldrb	r1, [r2, #0]
    3ffa:	430b      	orrs	r3, r1
    3ffc:	7013      	strb	r3, [r2, #0]
    3ffe:	7853      	ldrb	r3, [r2, #1]
    4000:	b25b      	sxtb	r3, r3
    4002:	2b00      	cmp	r3, #0
    4004:	dbfb      	blt.n	3ffe <_system_extint_init+0x2a>
    4006:	4b09      	ldr	r3, [pc, #36]	; (402c <_system_extint_init+0x58>)
    4008:	2200      	movs	r2, #0
    400a:	1c19      	adds	r1, r3, #0
    400c:	3140      	adds	r1, #64	; 0x40
    400e:	c304      	stmia	r3!, {r2}
    4010:	428b      	cmp	r3, r1
    4012:	d1fc      	bne.n	400e <_system_extint_init+0x3a>
    4014:	2210      	movs	r2, #16
    4016:	4b06      	ldr	r3, [pc, #24]	; (4030 <_system_extint_init+0x5c>)
    4018:	601a      	str	r2, [r3, #0]
    401a:	f7ff ffcf 	bl	3fbc <_extint_enable>
    401e:	b003      	add	sp, #12
    4020:	bd00      	pop	{pc}
    4022:	46c0      	nop			; (mov r8, r8)
    4024:	40000400 	.word	0x40000400
    4028:	40001800 	.word	0x40001800
    402c:	20004718 	.word	0x20004718
    4030:	e000e100 	.word	0xe000e100

00004034 <extint_chan_get_config_defaults>:
    4034:	2300      	movs	r3, #0
    4036:	2201      	movs	r2, #1
    4038:	6003      	str	r3, [r0, #0]
    403a:	6043      	str	r3, [r0, #4]
    403c:	7283      	strb	r3, [r0, #10]
    403e:	3302      	adds	r3, #2
    4040:	7202      	strb	r2, [r0, #8]
    4042:	7242      	strb	r2, [r0, #9]
    4044:	72c3      	strb	r3, [r0, #11]
    4046:	4770      	bx	lr

00004048 <extint_chan_set_config>:
    4048:	b5f0      	push	{r4, r5, r6, r7, lr}
    404a:	2300      	movs	r3, #0
    404c:	1c0c      	adds	r4, r1, #0
    404e:	b083      	sub	sp, #12
    4050:	a901      	add	r1, sp, #4
    4052:	704b      	strb	r3, [r1, #1]
    4054:	70cb      	strb	r3, [r1, #3]
    4056:	7923      	ldrb	r3, [r4, #4]
    4058:	1c05      	adds	r5, r0, #0
    405a:	700b      	strb	r3, [r1, #0]
    405c:	7a23      	ldrb	r3, [r4, #8]
    405e:	7820      	ldrb	r0, [r4, #0]
    4060:	708b      	strb	r3, [r1, #2]
    4062:	2600      	movs	r6, #0
    4064:	f000 f882 	bl	416c <system_pinmux_pin_set_config>
    4068:	2d1f      	cmp	r5, #31
    406a:	d800      	bhi.n	406e <extint_chan_set_config+0x26>
    406c:	4e12      	ldr	r6, [pc, #72]	; (40b8 <extint_chan_set_config+0x70>)
    406e:	2207      	movs	r2, #7
    4070:	7aa3      	ldrb	r3, [r4, #10]
    4072:	402a      	ands	r2, r5
    4074:	0092      	lsls	r2, r2, #2
    4076:	7ae0      	ldrb	r0, [r4, #11]
    4078:	2b00      	cmp	r3, #0
    407a:	d001      	beq.n	4080 <extint_chan_set_config+0x38>
    407c:	2308      	movs	r3, #8
    407e:	4318      	orrs	r0, r3
    4080:	270f      	movs	r7, #15
    4082:	4097      	lsls	r7, r2
    4084:	08eb      	lsrs	r3, r5, #3
    4086:	009b      	lsls	r3, r3, #2
    4088:	18f3      	adds	r3, r6, r3
    408a:	6999      	ldr	r1, [r3, #24]
    408c:	4090      	lsls	r0, r2
    408e:	43b9      	bics	r1, r7
    4090:	1c0a      	adds	r2, r1, #0
    4092:	4302      	orrs	r2, r0
    4094:	619a      	str	r2, [r3, #24]
    4096:	7a63      	ldrb	r3, [r4, #9]
    4098:	2b00      	cmp	r3, #0
    409a:	d106      	bne.n	40aa <extint_chan_set_config+0x62>
    409c:	2201      	movs	r2, #1
    409e:	40aa      	lsls	r2, r5
    40a0:	6973      	ldr	r3, [r6, #20]
    40a2:	4393      	bics	r3, r2
    40a4:	6173      	str	r3, [r6, #20]
    40a6:	b003      	add	sp, #12
    40a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    40aa:	2201      	movs	r2, #1
    40ac:	40aa      	lsls	r2, r5
    40ae:	1c15      	adds	r5, r2, #0
    40b0:	6973      	ldr	r3, [r6, #20]
    40b2:	431d      	orrs	r5, r3
    40b4:	6175      	str	r5, [r6, #20]
    40b6:	e7f6      	b.n	40a6 <extint_chan_set_config+0x5e>
    40b8:	40001800 	.word	0x40001800

000040bc <_system_pinmux_config>:
    40bc:	78d3      	ldrb	r3, [r2, #3]
    40be:	b570      	push	{r4, r5, r6, lr}
    40c0:	2b00      	cmp	r3, #0
    40c2:	d131      	bne.n	4128 <_system_pinmux_config+0x6c>
    40c4:	7814      	ldrb	r4, [r2, #0]
    40c6:	2c80      	cmp	r4, #128	; 0x80
    40c8:	d047      	beq.n	415a <_system_pinmux_config+0x9e>
    40ca:	2380      	movs	r3, #128	; 0x80
    40cc:	0624      	lsls	r4, r4, #24
    40ce:	025b      	lsls	r3, r3, #9
    40d0:	431c      	orrs	r4, r3
    40d2:	7853      	ldrb	r3, [r2, #1]
    40d4:	2502      	movs	r5, #2
    40d6:	1c1e      	adds	r6, r3, #0
    40d8:	43ae      	bics	r6, r5
    40da:	d107      	bne.n	40ec <_system_pinmux_config+0x30>
    40dc:	7893      	ldrb	r3, [r2, #2]
    40de:	2b00      	cmp	r3, #0
    40e0:	d137      	bne.n	4152 <_system_pinmux_config+0x96>
    40e2:	2380      	movs	r3, #128	; 0x80
    40e4:	029b      	lsls	r3, r3, #10
    40e6:	431c      	orrs	r4, r3
    40e8:	6041      	str	r1, [r0, #4]
    40ea:	7853      	ldrb	r3, [r2, #1]
    40ec:	3b01      	subs	r3, #1
    40ee:	2b01      	cmp	r3, #1
    40f0:	d935      	bls.n	415e <_system_pinmux_config+0xa2>
    40f2:	25a0      	movs	r5, #160	; 0xa0
    40f4:	040b      	lsls	r3, r1, #16
    40f6:	05ed      	lsls	r5, r5, #23
    40f8:	0c1b      	lsrs	r3, r3, #16
    40fa:	432b      	orrs	r3, r5
    40fc:	25d0      	movs	r5, #208	; 0xd0
    40fe:	4323      	orrs	r3, r4
    4100:	6283      	str	r3, [r0, #40]	; 0x28
    4102:	062d      	lsls	r5, r5, #24
    4104:	0c0b      	lsrs	r3, r1, #16
    4106:	432b      	orrs	r3, r5
    4108:	4323      	orrs	r3, r4
    410a:	6283      	str	r3, [r0, #40]	; 0x28
    410c:	78d3      	ldrb	r3, [r2, #3]
    410e:	2b00      	cmp	r3, #0
    4110:	d109      	bne.n	4126 <_system_pinmux_config+0x6a>
    4112:	0363      	lsls	r3, r4, #13
    4114:	d503      	bpl.n	411e <_system_pinmux_config+0x62>
    4116:	7893      	ldrb	r3, [r2, #2]
    4118:	2b01      	cmp	r3, #1
    411a:	d023      	beq.n	4164 <_system_pinmux_config+0xa8>
    411c:	6141      	str	r1, [r0, #20]
    411e:	7853      	ldrb	r3, [r2, #1]
    4120:	3b01      	subs	r3, #1
    4122:	2b01      	cmp	r3, #1
    4124:	d913      	bls.n	414e <_system_pinmux_config+0x92>
    4126:	bd70      	pop	{r4, r5, r6, pc}
    4128:	24a0      	movs	r4, #160	; 0xa0
    412a:	040b      	lsls	r3, r1, #16
    412c:	05e4      	lsls	r4, r4, #23
    412e:	0c1b      	lsrs	r3, r3, #16
    4130:	4323      	orrs	r3, r4
    4132:	24d0      	movs	r4, #208	; 0xd0
    4134:	6041      	str	r1, [r0, #4]
    4136:	0624      	lsls	r4, r4, #24
    4138:	6283      	str	r3, [r0, #40]	; 0x28
    413a:	0c0b      	lsrs	r3, r1, #16
    413c:	4323      	orrs	r3, r4
    413e:	6283      	str	r3, [r0, #40]	; 0x28
    4140:	78d3      	ldrb	r3, [r2, #3]
    4142:	2b00      	cmp	r3, #0
    4144:	d1ef      	bne.n	4126 <_system_pinmux_config+0x6a>
    4146:	7853      	ldrb	r3, [r2, #1]
    4148:	3b01      	subs	r3, #1
    414a:	2b01      	cmp	r3, #1
    414c:	d8eb      	bhi.n	4126 <_system_pinmux_config+0x6a>
    414e:	6081      	str	r1, [r0, #8]
    4150:	e7e9      	b.n	4126 <_system_pinmux_config+0x6a>
    4152:	23c0      	movs	r3, #192	; 0xc0
    4154:	02db      	lsls	r3, r3, #11
    4156:	431c      	orrs	r4, r3
    4158:	e7c6      	b.n	40e8 <_system_pinmux_config+0x2c>
    415a:	2400      	movs	r4, #0
    415c:	e7b9      	b.n	40d2 <_system_pinmux_config+0x16>
    415e:	4b02      	ldr	r3, [pc, #8]	; (4168 <_system_pinmux_config+0xac>)
    4160:	401c      	ands	r4, r3
    4162:	e7c6      	b.n	40f2 <_system_pinmux_config+0x36>
    4164:	6181      	str	r1, [r0, #24]
    4166:	e7da      	b.n	411e <_system_pinmux_config+0x62>
    4168:	fffbffff 	.word	0xfffbffff

0000416c <system_pinmux_pin_set_config>:
    416c:	b508      	push	{r3, lr}
    416e:	1c0a      	adds	r2, r1, #0
    4170:	1c03      	adds	r3, r0, #0
    4172:	09c1      	lsrs	r1, r0, #7
    4174:	2000      	movs	r0, #0
    4176:	2900      	cmp	r1, #0
    4178:	d104      	bne.n	4184 <system_pinmux_pin_set_config+0x18>
    417a:	4906      	ldr	r1, [pc, #24]	; (4194 <system_pinmux_pin_set_config+0x28>)
    417c:	0958      	lsrs	r0, r3, #5
    417e:	468c      	mov	ip, r1
    4180:	01c0      	lsls	r0, r0, #7
    4182:	4460      	add	r0, ip
    4184:	211f      	movs	r1, #31
    4186:	400b      	ands	r3, r1
    4188:	391e      	subs	r1, #30
    418a:	4099      	lsls	r1, r3
    418c:	f7ff ff96 	bl	40bc <_system_pinmux_config>
    4190:	bd08      	pop	{r3, pc}
    4192:	46c0      	nop			; (mov r8, r8)
    4194:	41004400 	.word	0x41004400

00004198 <system_gclk_init>:
    4198:	2308      	movs	r3, #8
    419a:	4a06      	ldr	r2, [pc, #24]	; (41b4 <system_gclk_init+0x1c>)
    419c:	6991      	ldr	r1, [r2, #24]
    419e:	430b      	orrs	r3, r1
    41a0:	6193      	str	r3, [r2, #24]
    41a2:	2301      	movs	r3, #1
    41a4:	2101      	movs	r1, #1
    41a6:	4a04      	ldr	r2, [pc, #16]	; (41b8 <system_gclk_init+0x20>)
    41a8:	7013      	strb	r3, [r2, #0]
    41aa:	7813      	ldrb	r3, [r2, #0]
    41ac:	4219      	tst	r1, r3
    41ae:	d1fc      	bne.n	41aa <system_gclk_init+0x12>
    41b0:	4770      	bx	lr
    41b2:	46c0      	nop			; (mov r8, r8)
    41b4:	40000400 	.word	0x40000400
    41b8:	40000c00 	.word	0x40000c00

000041bc <system_gclk_gen_set_config>:
    41bc:	b570      	push	{r4, r5, r6, lr}
    41be:	780d      	ldrb	r5, [r1, #0]
    41c0:	784b      	ldrb	r3, [r1, #1]
    41c2:	022d      	lsls	r5, r5, #8
    41c4:	1c04      	adds	r4, r0, #0
    41c6:	4305      	orrs	r5, r0
    41c8:	2b00      	cmp	r3, #0
    41ca:	d002      	beq.n	41d2 <system_gclk_gen_set_config+0x16>
    41cc:	2380      	movs	r3, #128	; 0x80
    41ce:	02db      	lsls	r3, r3, #11
    41d0:	431d      	orrs	r5, r3
    41d2:	7a4b      	ldrb	r3, [r1, #9]
    41d4:	2b00      	cmp	r3, #0
    41d6:	d002      	beq.n	41de <system_gclk_gen_set_config+0x22>
    41d8:	2380      	movs	r3, #128	; 0x80
    41da:	031b      	lsls	r3, r3, #12
    41dc:	431d      	orrs	r5, r3
    41de:	684e      	ldr	r6, [r1, #4]
    41e0:	2e01      	cmp	r6, #1
    41e2:	d90f      	bls.n	4204 <system_gclk_gen_set_config+0x48>
    41e4:	1e73      	subs	r3, r6, #1
    41e6:	4033      	ands	r3, r6
    41e8:	d129      	bne.n	423e <system_gclk_gen_set_config+0x82>
    41ea:	2e02      	cmp	r6, #2
    41ec:	d005      	beq.n	41fa <system_gclk_gen_set_config+0x3e>
    41ee:	2202      	movs	r2, #2
    41f0:	3301      	adds	r3, #1
    41f2:	0052      	lsls	r2, r2, #1
    41f4:	4296      	cmp	r6, r2
    41f6:	d8fb      	bhi.n	41f0 <system_gclk_gen_set_config+0x34>
    41f8:	021b      	lsls	r3, r3, #8
    41fa:	4318      	orrs	r0, r3
    41fc:	2380      	movs	r3, #128	; 0x80
    41fe:	1c04      	adds	r4, r0, #0
    4200:	035b      	lsls	r3, r3, #13
    4202:	431d      	orrs	r5, r3
    4204:	7a0b      	ldrb	r3, [r1, #8]
    4206:	2b00      	cmp	r3, #0
    4208:	d002      	beq.n	4210 <system_gclk_gen_set_config+0x54>
    420a:	2380      	movs	r3, #128	; 0x80
    420c:	039b      	lsls	r3, r3, #14
    420e:	431d      	orrs	r5, r3
    4210:	4a0e      	ldr	r2, [pc, #56]	; (424c <system_gclk_gen_set_config+0x90>)
    4212:	7853      	ldrb	r3, [r2, #1]
    4214:	4e0d      	ldr	r6, [pc, #52]	; (424c <system_gclk_gen_set_config+0x90>)
    4216:	b25b      	sxtb	r3, r3
    4218:	2b00      	cmp	r3, #0
    421a:	dbfa      	blt.n	4212 <system_gclk_gen_set_config+0x56>
    421c:	f000 f8de 	bl	43dc <cpu_irq_enter_critical>
    4220:	60b4      	str	r4, [r6, #8]
    4222:	7873      	ldrb	r3, [r6, #1]
    4224:	4a09      	ldr	r2, [pc, #36]	; (424c <system_gclk_gen_set_config+0x90>)
    4226:	b25b      	sxtb	r3, r3
    4228:	2b00      	cmp	r3, #0
    422a:	dbfa      	blt.n	4222 <system_gclk_gen_set_config+0x66>
    422c:	2380      	movs	r3, #128	; 0x80
    422e:	6851      	ldr	r1, [r2, #4]
    4230:	025b      	lsls	r3, r3, #9
    4232:	400b      	ands	r3, r1
    4234:	431d      	orrs	r5, r3
    4236:	6055      	str	r5, [r2, #4]
    4238:	f000 f8ee 	bl	4418 <cpu_irq_leave_critical>
    423c:	bd70      	pop	{r4, r5, r6, pc}
    423e:	2380      	movs	r3, #128	; 0x80
    4240:	0234      	lsls	r4, r6, #8
    4242:	029b      	lsls	r3, r3, #10
    4244:	4304      	orrs	r4, r0
    4246:	431d      	orrs	r5, r3
    4248:	e7dc      	b.n	4204 <system_gclk_gen_set_config+0x48>
    424a:	46c0      	nop			; (mov r8, r8)
    424c:	40000c00 	.word	0x40000c00

00004250 <system_gclk_gen_enable>:
    4250:	b510      	push	{r4, lr}
    4252:	1c04      	adds	r4, r0, #0
    4254:	4a0b      	ldr	r2, [pc, #44]	; (4284 <system_gclk_gen_enable+0x34>)
    4256:	7853      	ldrb	r3, [r2, #1]
    4258:	b25b      	sxtb	r3, r3
    425a:	2b00      	cmp	r3, #0
    425c:	dbfb      	blt.n	4256 <system_gclk_gen_enable+0x6>
    425e:	f000 f8bd 	bl	43dc <cpu_irq_enter_critical>
    4262:	4b09      	ldr	r3, [pc, #36]	; (4288 <system_gclk_gen_enable+0x38>)
    4264:	4907      	ldr	r1, [pc, #28]	; (4284 <system_gclk_gen_enable+0x34>)
    4266:	701c      	strb	r4, [r3, #0]
    4268:	784b      	ldrb	r3, [r1, #1]
    426a:	4a06      	ldr	r2, [pc, #24]	; (4284 <system_gclk_gen_enable+0x34>)
    426c:	b25b      	sxtb	r3, r3
    426e:	2b00      	cmp	r3, #0
    4270:	dbfa      	blt.n	4268 <system_gclk_gen_enable+0x18>
    4272:	2180      	movs	r1, #128	; 0x80
    4274:	6853      	ldr	r3, [r2, #4]
    4276:	0249      	lsls	r1, r1, #9
    4278:	430b      	orrs	r3, r1
    427a:	6053      	str	r3, [r2, #4]
    427c:	f000 f8cc 	bl	4418 <cpu_irq_leave_critical>
    4280:	bd10      	pop	{r4, pc}
    4282:	46c0      	nop			; (mov r8, r8)
    4284:	40000c00 	.word	0x40000c00
    4288:	40000c04 	.word	0x40000c04

0000428c <system_gclk_gen_get_hz>:
    428c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    428e:	1c07      	adds	r7, r0, #0
    4290:	4a19      	ldr	r2, [pc, #100]	; (42f8 <system_gclk_gen_get_hz+0x6c>)
    4292:	7853      	ldrb	r3, [r2, #1]
    4294:	b25b      	sxtb	r3, r3
    4296:	2b00      	cmp	r3, #0
    4298:	dbfb      	blt.n	4292 <system_gclk_gen_get_hz+0x6>
    429a:	f000 f89f 	bl	43dc <cpu_irq_enter_critical>
    429e:	4b17      	ldr	r3, [pc, #92]	; (42fc <system_gclk_gen_get_hz+0x70>)
    42a0:	4a15      	ldr	r2, [pc, #84]	; (42f8 <system_gclk_gen_get_hz+0x6c>)
    42a2:	701f      	strb	r7, [r3, #0]
    42a4:	7853      	ldrb	r3, [r2, #1]
    42a6:	4c14      	ldr	r4, [pc, #80]	; (42f8 <system_gclk_gen_get_hz+0x6c>)
    42a8:	b25b      	sxtb	r3, r3
    42aa:	2b00      	cmp	r3, #0
    42ac:	dbfa      	blt.n	42a4 <system_gclk_gen_get_hz+0x18>
    42ae:	6860      	ldr	r0, [r4, #4]
    42b0:	04c0      	lsls	r0, r0, #19
    42b2:	0ec0      	lsrs	r0, r0, #27
    42b4:	f000 ff58 	bl	5168 <system_clock_source_get_hz>
    42b8:	1c06      	adds	r6, r0, #0
    42ba:	4b10      	ldr	r3, [pc, #64]	; (42fc <system_gclk_gen_get_hz+0x70>)
    42bc:	701f      	strb	r7, [r3, #0]
    42be:	6865      	ldr	r5, [r4, #4]
    42c0:	4b0f      	ldr	r3, [pc, #60]	; (4300 <system_gclk_gen_get_hz+0x74>)
    42c2:	02ed      	lsls	r5, r5, #11
    42c4:	0fed      	lsrs	r5, r5, #31
    42c6:	701f      	strb	r7, [r3, #0]
    42c8:	7863      	ldrb	r3, [r4, #1]
    42ca:	b25b      	sxtb	r3, r3
    42cc:	2b00      	cmp	r3, #0
    42ce:	dbfb      	blt.n	42c8 <system_gclk_gen_get_hz+0x3c>
    42d0:	4b09      	ldr	r3, [pc, #36]	; (42f8 <system_gclk_gen_get_hz+0x6c>)
    42d2:	6899      	ldr	r1, [r3, #8]
    42d4:	0a09      	lsrs	r1, r1, #8
    42d6:	b28c      	uxth	r4, r1
    42d8:	f000 f89e 	bl	4418 <cpu_irq_leave_critical>
    42dc:	2d00      	cmp	r5, #0
    42de:	d003      	beq.n	42e8 <system_gclk_gen_get_hz+0x5c>
    42e0:	1c61      	adds	r1, r4, #1
    42e2:	40ce      	lsrs	r6, r1
    42e4:	1c30      	adds	r0, r6, #0
    42e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    42e8:	2c01      	cmp	r4, #1
    42ea:	d9fb      	bls.n	42e4 <system_gclk_gen_get_hz+0x58>
    42ec:	1c30      	adds	r0, r6, #0
    42ee:	1c21      	adds	r1, r4, #0
    42f0:	f002 f920 	bl	6534 <__aeabi_uidiv>
    42f4:	1c06      	adds	r6, r0, #0
    42f6:	e7f5      	b.n	42e4 <system_gclk_gen_get_hz+0x58>
    42f8:	40000c00 	.word	0x40000c00
    42fc:	40000c04 	.word	0x40000c04
    4300:	40000c08 	.word	0x40000c08

00004304 <system_gclk_chan_enable>:
    4304:	b510      	push	{r4, lr}
    4306:	1c04      	adds	r4, r0, #0
    4308:	f000 f868 	bl	43dc <cpu_irq_enter_critical>
    430c:	2180      	movs	r1, #128	; 0x80
    430e:	4b05      	ldr	r3, [pc, #20]	; (4324 <system_gclk_chan_enable+0x20>)
    4310:	4a05      	ldr	r2, [pc, #20]	; (4328 <system_gclk_chan_enable+0x24>)
    4312:	701c      	strb	r4, [r3, #0]
    4314:	8853      	ldrh	r3, [r2, #2]
    4316:	01c9      	lsls	r1, r1, #7
    4318:	430b      	orrs	r3, r1
    431a:	8053      	strh	r3, [r2, #2]
    431c:	f000 f87c 	bl	4418 <cpu_irq_leave_critical>
    4320:	bd10      	pop	{r4, pc}
    4322:	46c0      	nop			; (mov r8, r8)
    4324:	40000c02 	.word	0x40000c02
    4328:	40000c00 	.word	0x40000c00

0000432c <system_gclk_chan_disable>:
    432c:	b510      	push	{r4, lr}
    432e:	1c04      	adds	r4, r0, #0
    4330:	f000 f854 	bl	43dc <cpu_irq_enter_critical>
    4334:	2080      	movs	r0, #128	; 0x80
    4336:	4b0e      	ldr	r3, [pc, #56]	; (4370 <system_gclk_chan_disable+0x44>)
    4338:	4a0e      	ldr	r2, [pc, #56]	; (4374 <system_gclk_chan_disable+0x48>)
    433a:	701c      	strb	r4, [r3, #0]
    433c:	8854      	ldrh	r4, [r2, #2]
    433e:	4b0e      	ldr	r3, [pc, #56]	; (4378 <system_gclk_chan_disable+0x4c>)
    4340:	8851      	ldrh	r1, [r2, #2]
    4342:	0524      	lsls	r4, r4, #20
    4344:	400b      	ands	r3, r1
    4346:	8053      	strh	r3, [r2, #2]
    4348:	8851      	ldrh	r1, [r2, #2]
    434a:	4b0c      	ldr	r3, [pc, #48]	; (437c <system_gclk_chan_disable+0x50>)
    434c:	0f24      	lsrs	r4, r4, #28
    434e:	400b      	ands	r3, r1
    4350:	8053      	strh	r3, [r2, #2]
    4352:	01c0      	lsls	r0, r0, #7
    4354:	8853      	ldrh	r3, [r2, #2]
    4356:	4907      	ldr	r1, [pc, #28]	; (4374 <system_gclk_chan_disable+0x48>)
    4358:	4203      	tst	r3, r0
    435a:	d1fb      	bne.n	4354 <system_gclk_chan_disable+0x28>
    435c:	8848      	ldrh	r0, [r1, #2]
    435e:	4b06      	ldr	r3, [pc, #24]	; (4378 <system_gclk_chan_disable+0x4c>)
    4360:	0222      	lsls	r2, r4, #8
    4362:	4003      	ands	r3, r0
    4364:	4313      	orrs	r3, r2
    4366:	804b      	strh	r3, [r1, #2]
    4368:	f000 f856 	bl	4418 <cpu_irq_leave_critical>
    436c:	bd10      	pop	{r4, pc}
    436e:	46c0      	nop			; (mov r8, r8)
    4370:	40000c02 	.word	0x40000c02
    4374:	40000c00 	.word	0x40000c00
    4378:	fffff0ff 	.word	0xfffff0ff
    437c:	ffffbfff 	.word	0xffffbfff

00004380 <system_gclk_chan_set_config>:
    4380:	b510      	push	{r4, lr}
    4382:	780c      	ldrb	r4, [r1, #0]
    4384:	0224      	lsls	r4, r4, #8
    4386:	4304      	orrs	r4, r0
    4388:	f7ff ffd0 	bl	432c <system_gclk_chan_disable>
    438c:	4b01      	ldr	r3, [pc, #4]	; (4394 <system_gclk_chan_set_config+0x14>)
    438e:	b2a4      	uxth	r4, r4
    4390:	805c      	strh	r4, [r3, #2]
    4392:	bd10      	pop	{r4, pc}
    4394:	40000c00 	.word	0x40000c00

00004398 <system_gclk_chan_get_hz>:
    4398:	b510      	push	{r4, lr}
    439a:	1c04      	adds	r4, r0, #0
    439c:	f000 f81e 	bl	43dc <cpu_irq_enter_critical>
    43a0:	4b05      	ldr	r3, [pc, #20]	; (43b8 <system_gclk_chan_get_hz+0x20>)
    43a2:	701c      	strb	r4, [r3, #0]
    43a4:	4b05      	ldr	r3, [pc, #20]	; (43bc <system_gclk_chan_get_hz+0x24>)
    43a6:	885c      	ldrh	r4, [r3, #2]
    43a8:	f000 f836 	bl	4418 <cpu_irq_leave_critical>
    43ac:	0524      	lsls	r4, r4, #20
    43ae:	0f24      	lsrs	r4, r4, #28
    43b0:	1c20      	adds	r0, r4, #0
    43b2:	f7ff ff6b 	bl	428c <system_gclk_gen_get_hz>
    43b6:	bd10      	pop	{r4, pc}
    43b8:	40000c02 	.word	0x40000c02
    43bc:	40000c00 	.word	0x40000c00

000043c0 <_system_dummy_init>:
    43c0:	4770      	bx	lr
    43c2:	46c0      	nop			; (mov r8, r8)

000043c4 <system_init>:
    43c4:	b508      	push	{r3, lr}
    43c6:	f000 ff63 	bl	5290 <system_clock_init>
    43ca:	f7ff fff9 	bl	43c0 <_system_dummy_init>
    43ce:	f7ff fff7 	bl	43c0 <_system_dummy_init>
    43d2:	f7ff fdff 	bl	3fd4 <_system_extint_init>
    43d6:	f7ff fff3 	bl	43c0 <_system_dummy_init>
    43da:	bd08      	pop	{r3, pc}

000043dc <cpu_irq_enter_critical>:
    43dc:	4b0b      	ldr	r3, [pc, #44]	; (440c <cpu_irq_enter_critical+0x30>)
    43de:	681a      	ldr	r2, [r3, #0]
    43e0:	2a00      	cmp	r2, #0
    43e2:	d105      	bne.n	43f0 <cpu_irq_enter_critical+0x14>
    43e4:	f3ef 8110 	mrs	r1, PRIMASK
    43e8:	2900      	cmp	r1, #0
    43ea:	d005      	beq.n	43f8 <cpu_irq_enter_critical+0x1c>
    43ec:	4908      	ldr	r1, [pc, #32]	; (4410 <cpu_irq_enter_critical+0x34>)
    43ee:	700a      	strb	r2, [r1, #0]
    43f0:	681a      	ldr	r2, [r3, #0]
    43f2:	3201      	adds	r2, #1
    43f4:	601a      	str	r2, [r3, #0]
    43f6:	4770      	bx	lr
    43f8:	b672      	cpsid	i
    43fa:	f3bf 8f5f 	dmb	sy
    43fe:	4a05      	ldr	r2, [pc, #20]	; (4414 <cpu_irq_enter_critical+0x38>)
    4400:	7011      	strb	r1, [r2, #0]
    4402:	4a03      	ldr	r2, [pc, #12]	; (4410 <cpu_irq_enter_critical+0x34>)
    4404:	3101      	adds	r1, #1
    4406:	7011      	strb	r1, [r2, #0]
    4408:	e7f2      	b.n	43f0 <cpu_irq_enter_critical+0x14>
    440a:	46c0      	nop			; (mov r8, r8)
    440c:	200046b4 	.word	0x200046b4
    4410:	200046b8 	.word	0x200046b8
    4414:	200000d0 	.word	0x200000d0

00004418 <cpu_irq_leave_critical>:
    4418:	4b08      	ldr	r3, [pc, #32]	; (443c <cpu_irq_leave_critical+0x24>)
    441a:	681a      	ldr	r2, [r3, #0]
    441c:	3a01      	subs	r2, #1
    441e:	601a      	str	r2, [r3, #0]
    4420:	681b      	ldr	r3, [r3, #0]
    4422:	2b00      	cmp	r3, #0
    4424:	d109      	bne.n	443a <cpu_irq_leave_critical+0x22>
    4426:	4b06      	ldr	r3, [pc, #24]	; (4440 <cpu_irq_leave_critical+0x28>)
    4428:	781b      	ldrb	r3, [r3, #0]
    442a:	2b00      	cmp	r3, #0
    442c:	d005      	beq.n	443a <cpu_irq_leave_critical+0x22>
    442e:	2201      	movs	r2, #1
    4430:	4b04      	ldr	r3, [pc, #16]	; (4444 <cpu_irq_leave_critical+0x2c>)
    4432:	701a      	strb	r2, [r3, #0]
    4434:	f3bf 8f5f 	dmb	sy
    4438:	b662      	cpsie	i
    443a:	4770      	bx	lr
    443c:	200046b4 	.word	0x200046b4
    4440:	200046b8 	.word	0x200046b8
    4444:	200000d0 	.word	0x200000d0

00004448 <usart_set_config_default>:
    4448:	b5f0      	push	{r4, r5, r6, r7, lr}
    444a:	464f      	mov	r7, r9
    444c:	4646      	mov	r6, r8
    444e:	b4c0      	push	{r6, r7}
    4450:	1c04      	adds	r4, r0, #0
    4452:	b085      	sub	sp, #20
    4454:	2800      	cmp	r0, #0
    4456:	d05c      	beq.n	4512 <usart_set_config_default+0xca>
    4458:	6800      	ldr	r0, [r0, #0]
    445a:	f000 fe6d 	bl	5138 <_sercom_get_sercom_inst_index>
    445e:	250e      	movs	r5, #14
    4460:	2300      	movs	r3, #0
    4462:	3014      	adds	r0, #20
    4464:	446d      	add	r5, sp
    4466:	b2c0      	uxtb	r0, r0
    4468:	802b      	strh	r3, [r5, #0]
    446a:	69a7      	ldr	r7, [r4, #24]
    446c:	6966      	ldr	r6, [r4, #20]
    446e:	f7ff ff93 	bl	4398 <system_gclk_chan_get_hz>
    4472:	2310      	movs	r3, #16
    4474:	1c01      	adds	r1, r0, #0
    4476:	9300      	str	r3, [sp, #0]
    4478:	1c38      	adds	r0, r7, #0
    447a:	1c2a      	adds	r2, r5, #0
    447c:	2300      	movs	r3, #0
    447e:	f000 fd73 	bl	4f68 <_sercom_get_async_baud_val>
    4482:	6822      	ldr	r2, [r4, #0]
    4484:	69d3      	ldr	r3, [r2, #28]
    4486:	2b00      	cmp	r3, #0
    4488:	d1fc      	bne.n	4484 <usart_set_config_default+0x3c>
    448a:	882b      	ldrh	r3, [r5, #0]
    448c:	8193      	strh	r3, [r2, #12]
    448e:	68e2      	ldr	r2, [r4, #12]
    4490:	6923      	ldr	r3, [r4, #16]
    4492:	4313      	orrs	r3, r2
    4494:	221d      	movs	r2, #29
    4496:	56a2      	ldrsb	r2, [r4, r2]
    4498:	3201      	adds	r2, #1
    449a:	d028      	beq.n	44ee <usart_set_config_default+0xa6>
    449c:	25c0      	movs	r5, #192	; 0xc0
    449e:	02ad      	lsls	r5, r5, #10
    44a0:	431d      	orrs	r5, r3
    44a2:	231c      	movs	r3, #28
    44a4:	56e3      	ldrsb	r3, [r4, r3]
    44a6:	3301      	adds	r3, #1
    44a8:	d019      	beq.n	44de <usart_set_config_default+0x96>
    44aa:	68a2      	ldr	r2, [r4, #8]
    44ac:	2aff      	cmp	r2, #255	; 0xff
    44ae:	d01b      	beq.n	44e8 <usart_set_config_default+0xa0>
    44b0:	4b29      	ldr	r3, [pc, #164]	; (4558 <usart_set_config_default+0x110>)
    44b2:	4315      	orrs	r5, r2
    44b4:	431e      	orrs	r6, r3
    44b6:	2c00      	cmp	r4, #0
    44b8:	d025      	beq.n	4506 <usart_set_config_default+0xbe>
    44ba:	6822      	ldr	r2, [r4, #0]
    44bc:	69d3      	ldr	r3, [r2, #28]
    44be:	2b00      	cmp	r3, #0
    44c0:	d1fc      	bne.n	44bc <usart_set_config_default+0x74>
    44c2:	6055      	str	r5, [r2, #4]
    44c4:	2c00      	cmp	r4, #0
    44c6:	d018      	beq.n	44fa <usart_set_config_default+0xb2>
    44c8:	6822      	ldr	r2, [r4, #0]
    44ca:	69d3      	ldr	r3, [r2, #28]
    44cc:	2b00      	cmp	r3, #0
    44ce:	d1fc      	bne.n	44ca <usart_set_config_default+0x82>
    44d0:	2000      	movs	r0, #0
    44d2:	6016      	str	r6, [r2, #0]
    44d4:	b005      	add	sp, #20
    44d6:	bc0c      	pop	{r2, r3}
    44d8:	4690      	mov	r8, r2
    44da:	4699      	mov	r9, r3
    44dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    44de:	4b1f      	ldr	r3, [pc, #124]	; (455c <usart_set_config_default+0x114>)
    44e0:	68a2      	ldr	r2, [r4, #8]
    44e2:	401d      	ands	r5, r3
    44e4:	2aff      	cmp	r2, #255	; 0xff
    44e6:	d1e3      	bne.n	44b0 <usart_set_config_default+0x68>
    44e8:	4b1d      	ldr	r3, [pc, #116]	; (4560 <usart_set_config_default+0x118>)
    44ea:	431e      	orrs	r6, r3
    44ec:	e7e3      	b.n	44b6 <usart_set_config_default+0x6e>
    44ee:	4d1d      	ldr	r5, [pc, #116]	; (4564 <usart_set_config_default+0x11c>)
    44f0:	401d      	ands	r5, r3
    44f2:	2380      	movs	r3, #128	; 0x80
    44f4:	025b      	lsls	r3, r3, #9
    44f6:	431d      	orrs	r5, r3
    44f8:	e7d3      	b.n	44a2 <usart_set_config_default+0x5a>
    44fa:	481b      	ldr	r0, [pc, #108]	; (4568 <usart_set_config_default+0x120>)
    44fc:	491b      	ldr	r1, [pc, #108]	; (456c <usart_set_config_default+0x124>)
    44fe:	223f      	movs	r2, #63	; 0x3f
    4500:	f000 fc9a 	bl	4e38 <mbed_assert_internal>
    4504:	e7e0      	b.n	44c8 <usart_set_config_default+0x80>
    4506:	4818      	ldr	r0, [pc, #96]	; (4568 <usart_set_config_default+0x120>)
    4508:	4918      	ldr	r1, [pc, #96]	; (456c <usart_set_config_default+0x124>)
    450a:	223f      	movs	r2, #63	; 0x3f
    450c:	f000 fc94 	bl	4e38 <mbed_assert_internal>
    4510:	e7d3      	b.n	44ba <usart_set_config_default+0x72>
    4512:	4b15      	ldr	r3, [pc, #84]	; (4568 <usart_set_config_default+0x120>)
    4514:	4f15      	ldr	r7, [pc, #84]	; (456c <usart_set_config_default+0x124>)
    4516:	1c18      	adds	r0, r3, #0
    4518:	1c39      	adds	r1, r7, #0
    451a:	229c      	movs	r2, #156	; 0x9c
    451c:	4698      	mov	r8, r3
    451e:	f000 fc8b 	bl	4e38 <mbed_assert_internal>
    4522:	6820      	ldr	r0, [r4, #0]
    4524:	f000 fe08 	bl	5138 <_sercom_get_sercom_inst_index>
    4528:	250e      	movs	r5, #14
    452a:	69a3      	ldr	r3, [r4, #24]
    452c:	3014      	adds	r0, #20
    452e:	446d      	add	r5, sp
    4530:	b2c0      	uxtb	r0, r0
    4532:	4699      	mov	r9, r3
    4534:	802c      	strh	r4, [r5, #0]
    4536:	6966      	ldr	r6, [r4, #20]
    4538:	f7ff ff2e 	bl	4398 <system_gclk_chan_get_hz>
    453c:	2310      	movs	r3, #16
    453e:	1c01      	adds	r1, r0, #0
    4540:	9300      	str	r3, [sp, #0]
    4542:	1c2a      	adds	r2, r5, #0
    4544:	4648      	mov	r0, r9
    4546:	2300      	movs	r3, #0
    4548:	f000 fd0e 	bl	4f68 <_sercom_get_async_baud_val>
    454c:	4640      	mov	r0, r8
    454e:	1c39      	adds	r1, r7, #0
    4550:	223f      	movs	r2, #63	; 0x3f
    4552:	f000 fc71 	bl	4e38 <mbed_assert_internal>
    4556:	e794      	b.n	4482 <usart_set_config_default+0x3a>
    4558:	41000004 	.word	0x41000004
    455c:	fffeffff 	.word	0xfffeffff
    4560:	40000004 	.word	0x40000004
    4564:	fffdffff 	.word	0xfffdffff
    4568:	0000ede0 	.word	0x0000ede0
    456c:	0000ede4 	.word	0x0000ede4

00004570 <serial_find_mux_settings>:
    4570:	b570      	push	{r4, r5, r6, lr}
    4572:	1c05      	adds	r5, r0, #0
    4574:	b086      	sub	sp, #24
    4576:	2800      	cmp	r0, #0
    4578:	d03c      	beq.n	45f4 <serial_find_mux_settings+0x84>
    457a:	201c      	movs	r0, #28
    457c:	211d      	movs	r1, #29
    457e:	2300      	movs	r3, #0
    4580:	5628      	ldrsb	r0, [r5, r0]
    4582:	5669      	ldrsb	r1, [r5, r1]
    4584:	9302      	str	r3, [sp, #8]
    4586:	9303      	str	r3, [sp, #12]
    4588:	9304      	str	r3, [sp, #16]
    458a:	9305      	str	r3, [sp, #20]
    458c:	f001 f82a 	bl	55e4 <pinmap_merge_sercom>
    4590:	2400      	movs	r4, #0
    4592:	1c06      	adds	r6, r0, #0
    4594:	201c      	movs	r0, #28
    4596:	192b      	adds	r3, r5, r4
    4598:	5618      	ldrsb	r0, [r3, r0]
    459a:	1c31      	adds	r1, r6, #0
    459c:	f001 f8b2 	bl	5704 <pinmap_pad_sercom>
    45a0:	00a3      	lsls	r3, r4, #2
    45a2:	aa02      	add	r2, sp, #8
    45a4:	3401      	adds	r4, #1
    45a6:	50d0      	str	r0, [r2, r3]
    45a8:	2c04      	cmp	r4, #4
    45aa:	d1f3      	bne.n	4594 <serial_find_mux_settings+0x24>
    45ac:	9b03      	ldr	r3, [sp, #12]
    45ae:	2000      	movs	r0, #0
    45b0:	9301      	str	r3, [sp, #4]
    45b2:	3b01      	subs	r3, #1
    45b4:	2b02      	cmp	r3, #2
    45b6:	d802      	bhi.n	45be <serial_find_mux_settings+0x4e>
    45b8:	4a11      	ldr	r2, [pc, #68]	; (4600 <serial_find_mux_settings+0x90>)
    45ba:	009b      	lsls	r3, r3, #2
    45bc:	5898      	ldr	r0, [r3, r2]
    45be:	221e      	movs	r2, #30
    45c0:	5eab      	ldrsh	r3, [r5, r2]
    45c2:	3301      	adds	r3, #1
    45c4:	d008      	beq.n	45d8 <serial_find_mux_settings+0x68>
    45c6:	9b02      	ldr	r3, [sp, #8]
    45c8:	2b00      	cmp	r3, #0
    45ca:	d103      	bne.n	45d4 <serial_find_mux_settings+0x64>
    45cc:	9b04      	ldr	r3, [sp, #16]
    45ce:	9301      	str	r3, [sp, #4]
    45d0:	2b02      	cmp	r3, #2
    45d2:	d008      	beq.n	45e6 <serial_find_mux_settings+0x76>
    45d4:	b006      	add	sp, #24
    45d6:	bd70      	pop	{r4, r5, r6, pc}
    45d8:	9b02      	ldr	r3, [sp, #8]
    45da:	2b02      	cmp	r3, #2
    45dc:	d1fa      	bne.n	45d4 <serial_find_mux_settings+0x64>
    45de:	2380      	movs	r3, #128	; 0x80
    45e0:	025b      	lsls	r3, r3, #9
    45e2:	4318      	orrs	r0, r3
    45e4:	e7f6      	b.n	45d4 <serial_find_mux_settings+0x64>
    45e6:	9b05      	ldr	r3, [sp, #20]
    45e8:	2b03      	cmp	r3, #3
    45ea:	d1f3      	bne.n	45d4 <serial_find_mux_settings+0x64>
    45ec:	2380      	movs	r3, #128	; 0x80
    45ee:	029b      	lsls	r3, r3, #10
    45f0:	4318      	orrs	r0, r3
    45f2:	e7ef      	b.n	45d4 <serial_find_mux_settings+0x64>
    45f4:	4803      	ldr	r0, [pc, #12]	; (4604 <serial_find_mux_settings+0x94>)
    45f6:	4904      	ldr	r1, [pc, #16]	; (4608 <serial_find_mux_settings+0x98>)
    45f8:	2271      	movs	r2, #113	; 0x71
    45fa:	f000 fc1d 	bl	4e38 <mbed_assert_internal>
    45fe:	e7bc      	b.n	457a <serial_find_mux_settings+0xa>
    4600:	0000edd4 	.word	0x0000edd4
    4604:	0000ede0 	.word	0x0000ede0
    4608:	0000ede4 	.word	0x0000ede4

0000460c <get_default_serial_values>:
    460c:	b510      	push	{r4, lr}
    460e:	1e04      	subs	r4, r0, #0
    4610:	d00b      	beq.n	462a <get_default_serial_values+0x1e>
    4612:	23ff      	movs	r3, #255	; 0xff
    4614:	60a3      	str	r3, [r4, #8]
    4616:	2300      	movs	r3, #0
    4618:	60e3      	str	r3, [r4, #12]
    461a:	6123      	str	r3, [r4, #16]
    461c:	2396      	movs	r3, #150	; 0x96
    461e:	019b      	lsls	r3, r3, #6
    4620:	61a3      	str	r3, [r4, #24]
    4622:	2388      	movs	r3, #136	; 0x88
    4624:	035b      	lsls	r3, r3, #13
    4626:	6163      	str	r3, [r4, #20]
    4628:	bd10      	pop	{r4, pc}
    462a:	4803      	ldr	r0, [pc, #12]	; (4638 <get_default_serial_values+0x2c>)
    462c:	4903      	ldr	r1, [pc, #12]	; (463c <get_default_serial_values+0x30>)
    462e:	22e1      	movs	r2, #225	; 0xe1
    4630:	f000 fc02 	bl	4e38 <mbed_assert_internal>
    4634:	e7ed      	b.n	4612 <get_default_serial_values+0x6>
    4636:	46c0      	nop			; (mov r8, r8)
    4638:	0000ede0 	.word	0x0000ede0
    463c:	0000ede4 	.word	0x0000ede4

00004640 <serial_init>:
    4640:	b5f0      	push	{r4, r5, r6, r7, lr}
    4642:	464e      	mov	r6, r9
    4644:	4645      	mov	r5, r8
    4646:	4657      	mov	r7, sl
    4648:	b4e0      	push	{r5, r6, r7}
    464a:	1c04      	adds	r4, r0, #0
    464c:	b084      	sub	sp, #16
    464e:	1c0e      	adds	r6, r1, #0
    4650:	1c15      	adds	r5, r2, #0
    4652:	2800      	cmp	r0, #0
    4654:	d100      	bne.n	4658 <serial_init+0x18>
    4656:	e09d      	b.n	4794 <serial_init+0x154>
    4658:	4f60      	ldr	r7, [pc, #384]	; (47dc <serial_init+0x19c>)
    465a:	783b      	ldrb	r3, [r7, #0]
    465c:	2b00      	cmp	r3, #0
    465e:	d100      	bne.n	4662 <serial_init+0x22>
    4660:	e083      	b.n	476a <serial_init+0x12a>
    4662:	1c20      	adds	r0, r4, #0
    4664:	f7ff ffd2 	bl	460c <get_default_serial_values>
    4668:	23ff      	movs	r3, #255	; 0xff
    466a:	7726      	strb	r6, [r4, #28]
    466c:	77a3      	strb	r3, [r4, #30]
    466e:	77e3      	strb	r3, [r4, #31]
    4670:	7765      	strb	r5, [r4, #29]
    4672:	1c20      	adds	r0, r4, #0
    4674:	f7ff ff7c 	bl	4570 <serial_find_mux_settings>
    4678:	1c29      	adds	r1, r5, #0
    467a:	1c07      	adds	r7, r0, #0
    467c:	1c30      	adds	r0, r6, #0
    467e:	f000 ffb1 	bl	55e4 <pinmap_merge_sercom>
    4682:	1c43      	adds	r3, r0, #1
    4684:	d017      	beq.n	46b6 <serial_init+0x76>
    4686:	250f      	movs	r5, #15
    4688:	4005      	ands	r5, r0
    468a:	2001      	movs	r0, #1
    468c:	1c29      	adds	r1, r5, #0
    468e:	4240      	negs	r0, r0
    4690:	f001 f85a 	bl	5748 <pinmap_peripheral_sercom>
    4694:	1c06      	adds	r6, r0, #0
    4696:	1c02      	adds	r2, r0, #0
    4698:	6020      	str	r0, [r4, #0]
    469a:	2c00      	cmp	r4, #0
    469c:	d06a      	beq.n	4774 <serial_init+0x134>
    469e:	69d3      	ldr	r3, [r2, #28]
    46a0:	2b00      	cmp	r3, #0
    46a2:	d1fc      	bne.n	469e <serial_init+0x5e>
    46a4:	2102      	movs	r1, #2
    46a6:	6813      	ldr	r3, [r2, #0]
    46a8:	438b      	bics	r3, r1
    46aa:	6013      	str	r3, [r2, #0]
    46ac:	2201      	movs	r2, #1
    46ae:	6823      	ldr	r3, [r4, #0]
    46b0:	6818      	ldr	r0, [r3, #0]
    46b2:	4202      	tst	r2, r0
    46b4:	d005      	beq.n	46c2 <serial_init+0x82>
    46b6:	b004      	add	sp, #16
    46b8:	bc1c      	pop	{r2, r3, r4}
    46ba:	4690      	mov	r8, r2
    46bc:	4699      	mov	r9, r3
    46be:	46a2      	mov	sl, r4
    46c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    46c2:	681b      	ldr	r3, [r3, #0]
    46c4:	4019      	ands	r1, r3
    46c6:	4688      	mov	r8, r1
    46c8:	d1f5      	bne.n	46b6 <serial_init+0x76>
    46ca:	1ca8      	adds	r0, r5, #2
    46cc:	4082      	lsls	r2, r0
    46ce:	4944      	ldr	r1, [pc, #272]	; (47e0 <serial_init+0x1a0>)
    46d0:	6a0b      	ldr	r3, [r1, #32]
    46d2:	431a      	orrs	r2, r3
    46d4:	620a      	str	r2, [r1, #32]
    46d6:	4642      	mov	r2, r8
    46d8:	ab02      	add	r3, sp, #8
    46da:	701a      	strb	r2, [r3, #0]
    46dc:	2314      	movs	r3, #20
    46de:	4699      	mov	r9, r3
    46e0:	44a9      	add	r9, r5
    46e2:	a902      	add	r1, sp, #8
    46e4:	4648      	mov	r0, r9
    46e6:	f7ff fe4b 	bl	4380 <system_gclk_chan_set_config>
    46ea:	4648      	mov	r0, r9
    46ec:	f7ff fe0a 	bl	4304 <system_gclk_chan_enable>
    46f0:	2100      	movs	r1, #0
    46f2:	2000      	movs	r0, #0
    46f4:	f000 fd00 	bl	50f8 <sercom_set_gclk_generator>
    46f8:	6167      	str	r7, [r4, #20]
    46fa:	1c20      	adds	r0, r4, #0
    46fc:	f7ff fea4 	bl	4448 <usart_set_config_default>
    4700:	4642      	mov	r2, r8
    4702:	ab02      	add	r3, sp, #8
    4704:	715a      	strb	r2, [r3, #5]
    4706:	719a      	strb	r2, [r3, #6]
    4708:	71da      	strb	r2, [r3, #7]
    470a:	2320      	movs	r3, #32
    470c:	1c27      	adds	r7, r4, #0
    470e:	469a      	mov	sl, r3
    4710:	371c      	adds	r7, #28
    4712:	44a2      	add	sl, r4
    4714:	2300      	movs	r3, #0
    4716:	56fb      	ldrsb	r3, [r7, r3]
    4718:	4699      	mov	r9, r3
    471a:	3301      	adds	r3, #1
    471c:	d00f      	beq.n	473e <serial_init+0xfe>
    471e:	4648      	mov	r0, r9
    4720:	1c29      	adds	r1, r5, #0
    4722:	f000 ffcb 	bl	56bc <pinmap_function_sercom>
    4726:	ab02      	add	r3, sp, #8
    4728:	b2c0      	uxtb	r0, r0
    472a:	7118      	strb	r0, [r3, #4]
    472c:	28ff      	cmp	r0, #255	; 0xff
    472e:	d006      	beq.n	473e <serial_init+0xfe>
    4730:	466a      	mov	r2, sp
    4732:	464b      	mov	r3, r9
    4734:	71d3      	strb	r3, [r2, #7]
    4736:	79d0      	ldrb	r0, [r2, #7]
    4738:	a903      	add	r1, sp, #12
    473a:	f7ff fd17 	bl	416c <system_pinmux_pin_set_config>
    473e:	3701      	adds	r7, #1
    4740:	4557      	cmp	r7, sl
    4742:	d1e7      	bne.n	4714 <serial_init+0xd4>
    4744:	4b27      	ldr	r3, [pc, #156]	; (47e4 <serial_init+0x1a4>)
    4746:	429e      	cmp	r6, r3
    4748:	d030      	beq.n	47ac <serial_init+0x16c>
    474a:	2c00      	cmp	r4, #0
    474c:	d028      	beq.n	47a0 <serial_init+0x160>
    474e:	6823      	ldr	r3, [r4, #0]
    4750:	69da      	ldr	r2, [r3, #28]
    4752:	2a00      	cmp	r2, #0
    4754:	d1fc      	bne.n	4750 <serial_init+0x110>
    4756:	2c00      	cmp	r4, #0
    4758:	d031      	beq.n	47be <serial_init+0x17e>
    475a:	69da      	ldr	r2, [r3, #28]
    475c:	2a00      	cmp	r2, #0
    475e:	d1fc      	bne.n	475a <serial_init+0x11a>
    4760:	6819      	ldr	r1, [r3, #0]
    4762:	3202      	adds	r2, #2
    4764:	430a      	orrs	r2, r1
    4766:	601a      	str	r2, [r3, #0]
    4768:	e7a5      	b.n	46b6 <serial_init+0x76>
    476a:	f7ff fe2b 	bl	43c4 <system_init>
    476e:	2301      	movs	r3, #1
    4770:	703b      	strb	r3, [r7, #0]
    4772:	e776      	b.n	4662 <serial_init+0x22>
    4774:	4b1c      	ldr	r3, [pc, #112]	; (47e8 <serial_init+0x1a8>)
    4776:	2256      	movs	r2, #86	; 0x56
    4778:	4699      	mov	r9, r3
    477a:	4b1c      	ldr	r3, [pc, #112]	; (47ec <serial_init+0x1ac>)
    477c:	4648      	mov	r0, r9
    477e:	4698      	mov	r8, r3
    4780:	1c19      	adds	r1, r3, #0
    4782:	f000 fb59 	bl	4e38 <mbed_assert_internal>
    4786:	223f      	movs	r2, #63	; 0x3f
    4788:	4648      	mov	r0, r9
    478a:	4641      	mov	r1, r8
    478c:	f000 fb54 	bl	4e38 <mbed_assert_internal>
    4790:	6822      	ldr	r2, [r4, #0]
    4792:	e784      	b.n	469e <serial_init+0x5e>
    4794:	4814      	ldr	r0, [pc, #80]	; (47e8 <serial_init+0x1a8>)
    4796:	4915      	ldr	r1, [pc, #84]	; (47ec <serial_init+0x1ac>)
    4798:	22ed      	movs	r2, #237	; 0xed
    479a:	f000 fb4d 	bl	4e38 <mbed_assert_internal>
    479e:	e75b      	b.n	4658 <serial_init+0x18>
    47a0:	4811      	ldr	r0, [pc, #68]	; (47e8 <serial_init+0x1a8>)
    47a2:	4912      	ldr	r1, [pc, #72]	; (47ec <serial_init+0x1ac>)
    47a4:	223f      	movs	r2, #63	; 0x3f
    47a6:	f000 fb47 	bl	4e38 <mbed_assert_internal>
    47aa:	e7d0      	b.n	474e <serial_init+0x10e>
    47ac:	2201      	movs	r2, #1
    47ae:	4b10      	ldr	r3, [pc, #64]	; (47f0 <serial_init+0x1b0>)
    47b0:	1c21      	adds	r1, r4, #0
    47b2:	601a      	str	r2, [r3, #0]
    47b4:	480f      	ldr	r0, [pc, #60]	; (47f4 <serial_init+0x1b4>)
    47b6:	3247      	adds	r2, #71	; 0x47
    47b8:	f005 facd 	bl	9d56 <memcpy>
    47bc:	e7c5      	b.n	474a <serial_init+0x10a>
    47be:	4e0a      	ldr	r6, [pc, #40]	; (47e8 <serial_init+0x1a8>)
    47c0:	4d0a      	ldr	r5, [pc, #40]	; (47ec <serial_init+0x1ac>)
    47c2:	1c30      	adds	r0, r6, #0
    47c4:	1c29      	adds	r1, r5, #0
    47c6:	324a      	adds	r2, #74	; 0x4a
    47c8:	f000 fb36 	bl	4e38 <mbed_assert_internal>
    47cc:	1c30      	adds	r0, r6, #0
    47ce:	1c29      	adds	r1, r5, #0
    47d0:	223f      	movs	r2, #63	; 0x3f
    47d2:	f000 fb31 	bl	4e38 <mbed_assert_internal>
    47d6:	6823      	ldr	r3, [r4, #0]
    47d8:	e7bf      	b.n	475a <serial_init+0x11a>
    47da:	46c0      	nop			; (mov r8, r8)
    47dc:	200045b0 	.word	0x200045b0
    47e0:	40000400 	.word	0x40000400
    47e4:	42000800 	.word	0x42000800
    47e8:	0000ede0 	.word	0x0000ede0
    47ec:	0000ede4 	.word	0x0000ede4
    47f0:	200046bc 	.word	0x200046bc
    47f4:	20004758 	.word	0x20004758

000047f8 <serial_irq_handler>:
    47f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    47fa:	4647      	mov	r7, r8
    47fc:	1c04      	adds	r4, r0, #0
    47fe:	b480      	push	{r7}
    4800:	1c0e      	adds	r6, r1, #0
    4802:	1c15      	adds	r5, r2, #0
    4804:	2800      	cmp	r0, #0
    4806:	d020      	beq.n	484a <serial_irq_handler+0x52>
    4808:	4b18      	ldr	r3, [pc, #96]	; (486c <serial_irq_handler+0x74>)
    480a:	6019      	str	r1, [r3, #0]
    480c:	6822      	ldr	r2, [r4, #0]
    480e:	4b18      	ldr	r3, [pc, #96]	; (4870 <serial_irq_handler+0x78>)
    4810:	429a      	cmp	r2, r3
    4812:	d018      	beq.n	4846 <serial_irq_handler+0x4e>
    4814:	dc0d      	bgt.n	4832 <serial_irq_handler+0x3a>
    4816:	4917      	ldr	r1, [pc, #92]	; (4874 <serial_irq_handler+0x7c>)
    4818:	2301      	movs	r3, #1
    481a:	428a      	cmp	r2, r1
    481c:	d003      	beq.n	4826 <serial_irq_handler+0x2e>
    481e:	4916      	ldr	r1, [pc, #88]	; (4878 <serial_irq_handler+0x80>)
    4820:	3301      	adds	r3, #1
    4822:	428a      	cmp	r2, r1
    4824:	d10d      	bne.n	4842 <serial_irq_handler+0x4a>
    4826:	4a15      	ldr	r2, [pc, #84]	; (487c <serial_irq_handler+0x84>)
    4828:	009b      	lsls	r3, r3, #2
    482a:	509d      	str	r5, [r3, r2]
    482c:	bc04      	pop	{r2}
    482e:	4690      	mov	r8, r2
    4830:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4832:	4913      	ldr	r1, [pc, #76]	; (4880 <serial_irq_handler+0x88>)
    4834:	2304      	movs	r3, #4
    4836:	428a      	cmp	r2, r1
    4838:	d0f5      	beq.n	4826 <serial_irq_handler+0x2e>
    483a:	4912      	ldr	r1, [pc, #72]	; (4884 <serial_irq_handler+0x8c>)
    483c:	3301      	adds	r3, #1
    483e:	428a      	cmp	r2, r1
    4840:	d0f1      	beq.n	4826 <serial_irq_handler+0x2e>
    4842:	2300      	movs	r3, #0
    4844:	e7ef      	b.n	4826 <serial_irq_handler+0x2e>
    4846:	2303      	movs	r3, #3
    4848:	e7ed      	b.n	4826 <serial_irq_handler+0x2e>
    484a:	4b0f      	ldr	r3, [pc, #60]	; (4888 <serial_irq_handler+0x90>)
    484c:	22b3      	movs	r2, #179	; 0xb3
    484e:	4698      	mov	r8, r3
    4850:	4f0e      	ldr	r7, [pc, #56]	; (488c <serial_irq_handler+0x94>)
    4852:	1c18      	adds	r0, r3, #0
    4854:	1c39      	adds	r1, r7, #0
    4856:	0092      	lsls	r2, r2, #2
    4858:	f000 faee 	bl	4e38 <mbed_assert_internal>
    485c:	4b03      	ldr	r3, [pc, #12]	; (486c <serial_irq_handler+0x74>)
    485e:	4640      	mov	r0, r8
    4860:	1c39      	adds	r1, r7, #0
    4862:	4a0b      	ldr	r2, [pc, #44]	; (4890 <serial_irq_handler+0x98>)
    4864:	601e      	str	r6, [r3, #0]
    4866:	f000 fae7 	bl	4e38 <mbed_assert_internal>
    486a:	e7cf      	b.n	480c <serial_irq_handler+0x14>
    486c:	200046d8 	.word	0x200046d8
    4870:	42001400 	.word	0x42001400
    4874:	42000c00 	.word	0x42000c00
    4878:	42001000 	.word	0x42001000
    487c:	200046c0 	.word	0x200046c0
    4880:	42001800 	.word	0x42001800
    4884:	42001c00 	.word	0x42001c00
    4888:	0000ede0 	.word	0x0000ede0
    488c:	0000ede4 	.word	0x0000ede4
    4890:	00000266 	.word	0x00000266

00004894 <serial_readable>:
    4894:	b510      	push	{r4, lr}
    4896:	1e04      	subs	r4, r0, #0
    4898:	d004      	beq.n	48a4 <serial_readable+0x10>
    489a:	6823      	ldr	r3, [r4, #0]
    489c:	7e18      	ldrb	r0, [r3, #24]
    489e:	0740      	lsls	r0, r0, #29
    48a0:	0fc0      	lsrs	r0, r0, #31
    48a2:	bd10      	pop	{r4, pc}
    48a4:	4802      	ldr	r0, [pc, #8]	; (48b0 <serial_readable+0x1c>)
    48a6:	4903      	ldr	r1, [pc, #12]	; (48b4 <serial_readable+0x20>)
    48a8:	4a03      	ldr	r2, [pc, #12]	; (48b8 <serial_readable+0x24>)
    48aa:	f000 fac5 	bl	4e38 <mbed_assert_internal>
    48ae:	e7f4      	b.n	489a <serial_readable+0x6>
    48b0:	0000ede0 	.word	0x0000ede0
    48b4:	0000ede4 	.word	0x0000ede4
    48b8:	00000323 	.word	0x00000323

000048bc <serial_getc>:
    48bc:	b510      	push	{r4, lr}
    48be:	1e04      	subs	r4, r0, #0
    48c0:	d008      	beq.n	48d4 <serial_getc+0x18>
    48c2:	1c20      	adds	r0, r4, #0
    48c4:	f7ff ffe6 	bl	4894 <serial_readable>
    48c8:	2800      	cmp	r0, #0
    48ca:	d0fa      	beq.n	48c2 <serial_getc+0x6>
    48cc:	6823      	ldr	r3, [r4, #0]
    48ce:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    48d0:	b280      	uxth	r0, r0
    48d2:	bd10      	pop	{r4, pc}
    48d4:	4802      	ldr	r0, [pc, #8]	; (48e0 <serial_getc+0x24>)
    48d6:	4903      	ldr	r1, [pc, #12]	; (48e4 <serial_getc+0x28>)
    48d8:	4a03      	ldr	r2, [pc, #12]	; (48e8 <serial_getc+0x2c>)
    48da:	f000 faad 	bl	4e38 <mbed_assert_internal>
    48de:	e7f0      	b.n	48c2 <serial_getc+0x6>
    48e0:	0000ede0 	.word	0x0000ede0
    48e4:	0000ede4 	.word	0x0000ede4
    48e8:	00000311 	.word	0x00000311

000048ec <serial_writable>:
    48ec:	b510      	push	{r4, lr}
    48ee:	1e04      	subs	r4, r0, #0
    48f0:	d004      	beq.n	48fc <serial_writable+0x10>
    48f2:	2001      	movs	r0, #1
    48f4:	6823      	ldr	r3, [r4, #0]
    48f6:	7e1b      	ldrb	r3, [r3, #24]
    48f8:	4018      	ands	r0, r3
    48fa:	bd10      	pop	{r4, pc}
    48fc:	22cc      	movs	r2, #204	; 0xcc
    48fe:	4803      	ldr	r0, [pc, #12]	; (490c <serial_writable+0x20>)
    4900:	4903      	ldr	r1, [pc, #12]	; (4910 <serial_writable+0x24>)
    4902:	0092      	lsls	r2, r2, #2
    4904:	f000 fa98 	bl	4e38 <mbed_assert_internal>
    4908:	e7f3      	b.n	48f2 <serial_writable+0x6>
    490a:	46c0      	nop			; (mov r8, r8)
    490c:	0000ede0 	.word	0x0000ede0
    4910:	0000ede4 	.word	0x0000ede4

00004914 <serial_putc>:
    4914:	b538      	push	{r3, r4, r5, lr}
    4916:	1c04      	adds	r4, r0, #0
    4918:	1c0d      	adds	r5, r1, #0
    491a:	2800      	cmp	r0, #0
    491c:	d00e      	beq.n	493c <serial_putc+0x28>
    491e:	05ed      	lsls	r5, r5, #23
    4920:	0ded      	lsrs	r5, r5, #23
    4922:	1c20      	adds	r0, r4, #0
    4924:	f7ff ffe2 	bl	48ec <serial_writable>
    4928:	2800      	cmp	r0, #0
    492a:	d0fa      	beq.n	4922 <serial_putc+0xe>
    492c:	2202      	movs	r2, #2
    492e:	6823      	ldr	r3, [r4, #0]
    4930:	851d      	strh	r5, [r3, #40]	; 0x28
    4932:	6821      	ldr	r1, [r4, #0]
    4934:	7e0b      	ldrb	r3, [r1, #24]
    4936:	421a      	tst	r2, r3
    4938:	d0fc      	beq.n	4934 <serial_putc+0x20>
    493a:	bd38      	pop	{r3, r4, r5, pc}
    493c:	4802      	ldr	r0, [pc, #8]	; (4948 <serial_putc+0x34>)
    493e:	4903      	ldr	r1, [pc, #12]	; (494c <serial_putc+0x38>)
    4940:	4a03      	ldr	r2, [pc, #12]	; (4950 <serial_putc+0x3c>)
    4942:	f000 fa79 	bl	4e38 <mbed_assert_internal>
    4946:	e7ea      	b.n	491e <serial_putc+0xa>
    4948:	0000ede0 	.word	0x0000ede0
    494c:	0000ede4 	.word	0x0000ede4
    4950:	00000319 	.word	0x00000319

00004954 <_ZN4mbed8FilePathC1EPKc>:
    4954:	b538      	push	{r3, r4, r5, lr}
    4956:	2300      	movs	r3, #0
    4958:	6003      	str	r3, [r0, #0]
    495a:	6043      	str	r3, [r0, #4]
    495c:	780b      	ldrb	r3, [r1, #0]
    495e:	1c04      	adds	r4, r0, #0
    4960:	2b2f      	cmp	r3, #47	; 0x2f
    4962:	d001      	beq.n	4968 <_ZN4mbed8FilePathC1EPKc+0x14>
    4964:	1c20      	adds	r0, r4, #0
    4966:	bd38      	pop	{r3, r4, r5, pc}
    4968:	784b      	ldrb	r3, [r1, #1]
    496a:	2b00      	cmp	r3, #0
    496c:	d0fa      	beq.n	4964 <_ZN4mbed8FilePathC1EPKc+0x10>
    496e:	1c48      	adds	r0, r1, #1
    4970:	6020      	str	r0, [r4, #0]
    4972:	784b      	ldrb	r3, [r1, #1]
    4974:	2b2f      	cmp	r3, #47	; 0x2f
    4976:	d014      	beq.n	49a2 <_ZN4mbed8FilePathC1EPKc+0x4e>
    4978:	2b00      	cmp	r3, #0
    497a:	d015      	beq.n	49a8 <_ZN4mbed8FilePathC1EPKc+0x54>
    497c:	1c03      	adds	r3, r0, #0
    497e:	e001      	b.n	4984 <_ZN4mbed8FilePathC1EPKc+0x30>
    4980:	2a00      	cmp	r2, #0
    4982:	d00c      	beq.n	499e <_ZN4mbed8FilePathC1EPKc+0x4a>
    4984:	1a5d      	subs	r5, r3, r1
    4986:	3301      	adds	r3, #1
    4988:	6023      	str	r3, [r4, #0]
    498a:	781a      	ldrb	r2, [r3, #0]
    498c:	2a2f      	cmp	r2, #47	; 0x2f
    498e:	d1f7      	bne.n	4980 <_ZN4mbed8FilePathC1EPKc+0x2c>
    4990:	1c29      	adds	r1, r5, #0
    4992:	3301      	adds	r3, #1
    4994:	6023      	str	r3, [r4, #0]
    4996:	f001 fb2f 	bl	5ff8 <_ZN4mbed8FileBase6lookupEPKcj>
    499a:	6060      	str	r0, [r4, #4]
    499c:	e7e2      	b.n	4964 <_ZN4mbed8FilePathC1EPKc+0x10>
    499e:	1c29      	adds	r1, r5, #0
    49a0:	e7f9      	b.n	4996 <_ZN4mbed8FilePathC1EPKc+0x42>
    49a2:	1c03      	adds	r3, r0, #0
    49a4:	2100      	movs	r1, #0
    49a6:	e7f4      	b.n	4992 <_ZN4mbed8FilePathC1EPKc+0x3e>
    49a8:	2100      	movs	r1, #0
    49aa:	e7f4      	b.n	4996 <_ZN4mbed8FilePathC1EPKc+0x42>

000049ac <_ZN4mbed8FilePath8fileNameEv>:
    49ac:	6800      	ldr	r0, [r0, #0]
    49ae:	4770      	bx	lr

000049b0 <_ZN4mbed8FilePath10fileSystemEv>:
    49b0:	6843      	ldr	r3, [r0, #4]
    49b2:	b510      	push	{r4, lr}
    49b4:	2b00      	cmp	r3, #0
    49b6:	d007      	beq.n	49c8 <_ZN4mbed8FilePath10fileSystemEv+0x18>
    49b8:	1c04      	adds	r4, r0, #0
    49ba:	1c18      	adds	r0, r3, #0
    49bc:	f001 fb3c 	bl	6038 <_ZN4mbed8FileBase11getPathTypeEv>
    49c0:	2801      	cmp	r0, #1
    49c2:	d101      	bne.n	49c8 <_ZN4mbed8FilePath10fileSystemEv+0x18>
    49c4:	6860      	ldr	r0, [r4, #4]
    49c6:	bd10      	pop	{r4, pc}
    49c8:	2000      	movs	r0, #0
    49ca:	e7fc      	b.n	49c6 <_ZN4mbed8FilePath10fileSystemEv+0x16>

000049cc <_ZN4mbed8FilePath6isFileEv>:
    49cc:	6840      	ldr	r0, [r0, #4]
    49ce:	b508      	push	{r3, lr}
    49d0:	2800      	cmp	r0, #0
    49d2:	d005      	beq.n	49e0 <_ZN4mbed8FilePath6isFileEv+0x14>
    49d4:	f001 fb30 	bl	6038 <_ZN4mbed8FileBase11getPathTypeEv>
    49d8:	4243      	negs	r3, r0
    49da:	4158      	adcs	r0, r3
    49dc:	b2c0      	uxtb	r0, r0
    49de:	bd08      	pop	{r3, pc}
    49e0:	2000      	movs	r0, #0
    49e2:	e7fc      	b.n	49de <_ZN4mbed8FilePath6isFileEv+0x12>

000049e4 <_ZN4mbed8FilePath4fileEv>:
    49e4:	6843      	ldr	r3, [r0, #4]
    49e6:	b510      	push	{r4, lr}
    49e8:	2b00      	cmp	r3, #0
    49ea:	d00a      	beq.n	4a02 <_ZN4mbed8FilePath4fileEv+0x1e>
    49ec:	1c04      	adds	r4, r0, #0
    49ee:	1c18      	adds	r0, r3, #0
    49f0:	f001 fb22 	bl	6038 <_ZN4mbed8FileBase11getPathTypeEv>
    49f4:	2800      	cmp	r0, #0
    49f6:	d104      	bne.n	4a02 <_ZN4mbed8FilePath4fileEv+0x1e>
    49f8:	6860      	ldr	r0, [r4, #4]
    49fa:	2800      	cmp	r0, #0
    49fc:	d001      	beq.n	4a02 <_ZN4mbed8FilePath4fileEv+0x1e>
    49fe:	3804      	subs	r0, #4
    4a00:	bd10      	pop	{r4, pc}
    4a02:	2000      	movs	r0, #0
    4a04:	e7fc      	b.n	4a00 <_ZN4mbed8FilePath4fileEv+0x1c>
    4a06:	46c0      	nop			; (mov r8, r8)

00004a08 <_ZN4mbed8FilePath6existsEv>:
    4a08:	6840      	ldr	r0, [r0, #4]
    4a0a:	1e43      	subs	r3, r0, #1
    4a0c:	4198      	sbcs	r0, r3
    4a0e:	b2c0      	uxtb	r0, r0
    4a10:	4770      	bx	lr
    4a12:	46c0      	nop			; (mov r8, r8)

00004a14 <_ZN4mbed3SPID1Ev>:
    4a14:	4770      	bx	lr
    4a16:	46c0      	nop			; (mov r8, r8)

00004a18 <_ZN6CThunkIN4mbed3SPIEE10trampolineEPS1_PvPMS1_FvS4_E>:
    4a18:	b510      	push	{r4, lr}
    4a1a:	2800      	cmp	r0, #0
    4a1c:	d008      	beq.n	4a30 <_ZN6CThunkIN4mbed3SPIEE10trampolineEPS1_PvPMS1_FvS4_E+0x18>
    4a1e:	6814      	ldr	r4, [r2, #0]
    4a20:	6853      	ldr	r3, [r2, #4]
    4a22:	2c00      	cmp	r4, #0
    4a24:	d005      	beq.n	4a32 <_ZN6CThunkIN4mbed3SPIEE10trampolineEPS1_PvPMS1_FvS4_E+0x1a>
    4a26:	07da      	lsls	r2, r3, #31
    4a28:	d405      	bmi.n	4a36 <_ZN6CThunkIN4mbed3SPIEE10trampolineEPS1_PvPMS1_FvS4_E+0x1e>
    4a2a:	105b      	asrs	r3, r3, #1
    4a2c:	18c0      	adds	r0, r0, r3
    4a2e:	47a0      	blx	r4
    4a30:	bd10      	pop	{r4, pc}
    4a32:	07da      	lsls	r2, r3, #31
    4a34:	d5fc      	bpl.n	4a30 <_ZN6CThunkIN4mbed3SPIEE10trampolineEPS1_PvPMS1_FvS4_E+0x18>
    4a36:	105b      	asrs	r3, r3, #1
    4a38:	18c0      	adds	r0, r0, r3
    4a3a:	6803      	ldr	r3, [r0, #0]
    4a3c:	591c      	ldr	r4, [r3, r4]
    4a3e:	47a0      	blx	r4
    4a40:	e7f6      	b.n	4a30 <_ZN6CThunkIN4mbed3SPIEE10trampolineEPS1_PvPMS1_FvS4_E+0x18>
    4a42:	46c0      	nop			; (mov r8, r8)

00004a44 <_ZN4mbed3SPID0Ev>:
    4a44:	b510      	push	{r4, lr}
    4a46:	1c04      	adds	r4, r0, #0
    4a48:	f001 fd6f 	bl	652a <_ZdlPv>
    4a4c:	1c20      	adds	r0, r4, #0
    4a4e:	bd10      	pop	{r4, pc}

00004a50 <_ZN4mbed3SPIC1E7PinNameS1_S1_S1_>:
    4a50:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a52:	4656      	mov	r6, sl
    4a54:	465f      	mov	r7, fp
    4a56:	464d      	mov	r5, r9
    4a58:	4644      	mov	r4, r8
    4a5a:	4691      	mov	r9, r2
    4a5c:	2200      	movs	r2, #0
    4a5e:	b4f0      	push	{r4, r5, r6, r7}
    4a60:	1c05      	adds	r5, r0, #0
    4a62:	1c04      	adds	r4, r0, #0
    4a64:	b087      	sub	sp, #28
    4a66:	9303      	str	r3, [sp, #12]
    4a68:	ab10      	add	r3, sp, #64	; 0x40
    4a6a:	569a      	ldrsb	r2, [r3, r2]
    4a6c:	4b26      	ldr	r3, [pc, #152]	; (4b08 <_ZN4mbed3SPIC1E7PinNameS1_S1_S1_+0xb8>)
    4a6e:	468a      	mov	sl, r1
    4a70:	3308      	adds	r3, #8
    4a72:	c508      	stmia	r5!, {r3}
    4a74:	4693      	mov	fp, r2
    4a76:	1c28      	adds	r0, r5, #0
    4a78:	2100      	movs	r1, #0
    4a7a:	2240      	movs	r2, #64	; 0x40
    4a7c:	f005 f974 	bl	9d68 <memset>
    4a80:	2300      	movs	r3, #0
    4a82:	1c22      	adds	r2, r4, #0
    4a84:	9304      	str	r3, [sp, #16]
    4a86:	9305      	str	r3, [sp, #20]
    4a88:	a904      	add	r1, sp, #16
    4a8a:	3248      	adds	r2, #72	; 0x48
    4a8c:	c941      	ldmia	r1!, {r0, r6}
    4a8e:	c241      	stmia	r2!, {r0, r6}
    4a90:	4a1e      	ldr	r2, [pc, #120]	; (4b0c <_ZN4mbed3SPIC1E7PinNameS1_S1_S1_+0xbc>)
    4a92:	6522      	str	r2, [r4, #80]	; 0x50
    4a94:	4a1e      	ldr	r2, [pc, #120]	; (4b10 <_ZN4mbed3SPIC1E7PinNameS1_S1_S1_+0xc0>)
    4a96:	6562      	str	r2, [r4, #84]	; 0x54
    4a98:	4a1e      	ldr	r2, [pc, #120]	; (4b14 <_ZN4mbed3SPIC1E7PinNameS1_S1_S1_+0xc4>)
    4a9a:	65a2      	str	r2, [r4, #88]	; 0x58
    4a9c:	1c22      	adds	r2, r4, #0
    4a9e:	3248      	adds	r2, #72	; 0x48
    4aa0:	6623      	str	r3, [r4, #96]	; 0x60
    4aa2:	65e4      	str	r4, [r4, #92]	; 0x5c
    4aa4:	6662      	str	r2, [r4, #100]	; 0x64
    4aa6:	4a1c      	ldr	r2, [pc, #112]	; (4b18 <_ZN4mbed3SPIC1E7PinNameS1_S1_S1_+0xc8>)
    4aa8:	66a2      	str	r2, [r4, #104]	; 0x68
    4aaa:	f3bf 8f6f 	isb	sy
    4aae:	f3bf 8f4f 	dsb	sy
    4ab2:	2280      	movs	r2, #128	; 0x80
    4ab4:	66e3      	str	r3, [r4, #108]	; 0x6c
    4ab6:	50a3      	str	r3, [r4, r2]
    4ab8:	3204      	adds	r2, #4
    4aba:	54a3      	strb	r3, [r4, r2]
    4abc:	3204      	adds	r2, #4
    4abe:	4690      	mov	r8, r2
    4ac0:	4641      	mov	r1, r8
    4ac2:	278c      	movs	r7, #140	; 0x8c
    4ac4:	3a80      	subs	r2, #128	; 0x80
    4ac6:	5062      	str	r2, [r4, r1]
    4ac8:	2690      	movs	r6, #144	; 0x90
    4aca:	465a      	mov	r2, fp
    4acc:	51e3      	str	r3, [r4, r7]
    4ace:	4b13      	ldr	r3, [pc, #76]	; (4b1c <_ZN4mbed3SPIC1E7PinNameS1_S1_S1_+0xcc>)
    4ad0:	9200      	str	r2, [sp, #0]
    4ad2:	51a3      	str	r3, [r4, r6]
    4ad4:	1c28      	adds	r0, r5, #0
    4ad6:	4651      	mov	r1, sl
    4ad8:	464a      	mov	r2, r9
    4ada:	9b03      	ldr	r3, [sp, #12]
    4adc:	f000 ff92 	bl	5a04 <spi_init>
    4ae0:	4643      	mov	r3, r8
    4ae2:	59e2      	ldr	r2, [r4, r7]
    4ae4:	58e1      	ldr	r1, [r4, r3]
    4ae6:	1c28      	adds	r0, r5, #0
    4ae8:	2300      	movs	r3, #0
    4aea:	f001 f883 	bl	5bf4 <spi_format>
    4aee:	1c28      	adds	r0, r5, #0
    4af0:	59a1      	ldr	r1, [r4, r6]
    4af2:	f001 f933 	bl	5d5c <spi_frequency>
    4af6:	1c20      	adds	r0, r4, #0
    4af8:	b007      	add	sp, #28
    4afa:	bc3c      	pop	{r2, r3, r4, r5}
    4afc:	4690      	mov	r8, r2
    4afe:	4699      	mov	r9, r3
    4b00:	46a2      	mov	sl, r4
    4b02:	46ab      	mov	fp, r5
    4b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4b06:	46c0      	nop			; (mov r8, r8)
    4b08:	0000f080 	.word	0x0000f080
    4b0c:	2404b51f 	.word	0x2404b51f
    4b10:	cc0f447c 	.word	0xcc0f447c
    4b14:	bd1f4798 	.word	0xbd1f4798
    4b18:	00004a19 	.word	0x00004a19
    4b1c:	000f4240 	.word	0x000f4240

00004b20 <_ZN4mbed3SPI6aquireEv>:
    4b20:	b570      	push	{r4, r5, r6, lr}
    4b22:	4d0a      	ldr	r5, [pc, #40]	; (4b4c <_ZN4mbed3SPI6aquireEv+0x2c>)
    4b24:	682b      	ldr	r3, [r5, #0]
    4b26:	4283      	cmp	r3, r0
    4b28:	d00f      	beq.n	4b4a <_ZN4mbed3SPI6aquireEv+0x2a>
    4b2a:	2388      	movs	r3, #136	; 0x88
    4b2c:	1d06      	adds	r6, r0, #4
    4b2e:	58c1      	ldr	r1, [r0, r3]
    4b30:	3304      	adds	r3, #4
    4b32:	58c2      	ldr	r2, [r0, r3]
    4b34:	1c04      	adds	r4, r0, #0
    4b36:	2300      	movs	r3, #0
    4b38:	1c30      	adds	r0, r6, #0
    4b3a:	f001 f85b 	bl	5bf4 <spi_format>
    4b3e:	2390      	movs	r3, #144	; 0x90
    4b40:	1c30      	adds	r0, r6, #0
    4b42:	58e1      	ldr	r1, [r4, r3]
    4b44:	f001 f90a 	bl	5d5c <spi_frequency>
    4b48:	602c      	str	r4, [r5, #0]
    4b4a:	bd70      	pop	{r4, r5, r6, pc}
    4b4c:	200046dc 	.word	0x200046dc

00004b50 <_ZN4mbed3SPI6formatEii>:
    4b50:	b508      	push	{r3, lr}
    4b52:	2388      	movs	r3, #136	; 0x88
    4b54:	50c1      	str	r1, [r0, r3]
    4b56:	3304      	adds	r3, #4
    4b58:	50c2      	str	r2, [r0, r3]
    4b5a:	2200      	movs	r2, #0
    4b5c:	4b02      	ldr	r3, [pc, #8]	; (4b68 <_ZN4mbed3SPI6formatEii+0x18>)
    4b5e:	601a      	str	r2, [r3, #0]
    4b60:	f7ff ffde 	bl	4b20 <_ZN4mbed3SPI6aquireEv>
    4b64:	bd08      	pop	{r3, pc}
    4b66:	46c0      	nop			; (mov r8, r8)
    4b68:	200046dc 	.word	0x200046dc

00004b6c <_ZN4mbed3SPI9frequencyEi>:
    4b6c:	b508      	push	{r3, lr}
    4b6e:	2390      	movs	r3, #144	; 0x90
    4b70:	2200      	movs	r2, #0
    4b72:	50c1      	str	r1, [r0, r3]
    4b74:	4b02      	ldr	r3, [pc, #8]	; (4b80 <_ZN4mbed3SPI9frequencyEi+0x14>)
    4b76:	601a      	str	r2, [r3, #0]
    4b78:	f7ff ffd2 	bl	4b20 <_ZN4mbed3SPI6aquireEv>
    4b7c:	bd08      	pop	{r3, pc}
    4b7e:	46c0      	nop			; (mov r8, r8)
    4b80:	200046dc 	.word	0x200046dc

00004b84 <_ZN4mbed3SPI5writeEi>:
    4b84:	b538      	push	{r3, r4, r5, lr}
    4b86:	1c0d      	adds	r5, r1, #0
    4b88:	1c04      	adds	r4, r0, #0
    4b8a:	f7ff ffc9 	bl	4b20 <_ZN4mbed3SPI6aquireEv>
    4b8e:	1c29      	adds	r1, r5, #0
    4b90:	1d20      	adds	r0, r4, #4
    4b92:	f001 f95f 	bl	5e54 <spi_master_write>
    4b96:	bd38      	pop	{r3, r4, r5, pc}

00004b98 <_ZN4mbed6Serial5_getcEv>:
    4b98:	b508      	push	{r3, lr}
    4b9a:	f000 f8b5 	bl	4d08 <_ZN4mbed10SerialBase10_base_getcEv>
    4b9e:	bd08      	pop	{r3, pc}

00004ba0 <_ZThn220_N4mbed6Serial5_getcEv>:
    4ba0:	b408      	push	{r3}
    4ba2:	4b02      	ldr	r3, [pc, #8]	; (4bac <_ZThn220_N4mbed6Serial5_getcEv+0xc>)
    4ba4:	469c      	mov	ip, r3
    4ba6:	38dc      	subs	r0, #220	; 0xdc
    4ba8:	bc08      	pop	{r3}
    4baa:	4760      	bx	ip
    4bac:	00004b99 	.word	0x00004b99

00004bb0 <_ZN4mbed6Serial5_putcEi>:
    4bb0:	b508      	push	{r3, lr}
    4bb2:	f000 f8af 	bl	4d14 <_ZN4mbed10SerialBase10_base_putcEi>
    4bb6:	bd08      	pop	{r3, pc}

00004bb8 <_ZThn220_N4mbed6Serial5_putcEi>:
    4bb8:	b408      	push	{r3}
    4bba:	4b02      	ldr	r3, [pc, #8]	; (4bc4 <_ZThn220_N4mbed6Serial5_putcEi+0xc>)
    4bbc:	469c      	mov	ip, r3
    4bbe:	38dc      	subs	r0, #220	; 0xdc
    4bc0:	bc08      	pop	{r3}
    4bc2:	4760      	bx	ip
    4bc4:	00004bb1 	.word	0x00004bb1

00004bc8 <_ZN4mbed6SerialC1E7PinNameS1_PKc>:
    4bc8:	b538      	push	{r3, r4, r5, lr}
    4bca:	1c04      	adds	r4, r0, #0
    4bcc:	1c1d      	adds	r5, r3, #0
    4bce:	f000 f843 	bl	4c58 <_ZN4mbed10SerialBaseC1E7PinNameS1_>
    4bd2:	1c20      	adds	r0, r4, #0
    4bd4:	1c29      	adds	r1, r5, #0
    4bd6:	30dc      	adds	r0, #220	; 0xdc
    4bd8:	f000 f8da 	bl	4d90 <_ZN4mbed6StreamC1EPKc>
    4bdc:	4b06      	ldr	r3, [pc, #24]	; (4bf8 <_ZN4mbed6SerialC1E7PinNameS1_PKc+0x30>)
    4bde:	1c20      	adds	r0, r4, #0
    4be0:	1c1a      	adds	r2, r3, #0
    4be2:	1c19      	adds	r1, r3, #0
    4be4:	3208      	adds	r2, #8
    4be6:	6022      	str	r2, [r4, #0]
    4be8:	22dc      	movs	r2, #220	; 0xdc
    4bea:	3120      	adds	r1, #32
    4bec:	50a1      	str	r1, [r4, r2]
    4bee:	3354      	adds	r3, #84	; 0x54
    4bf0:	3204      	adds	r2, #4
    4bf2:	50a3      	str	r3, [r4, r2]
    4bf4:	bd38      	pop	{r3, r4, r5, pc}
    4bf6:	46c0      	nop			; (mov r8, r8)
    4bf8:	0000f098 	.word	0x0000f098

00004bfc <_ZN4mbed10SerialBase12_irq_handlerEm9SerialIrq>:
    4bfc:	b508      	push	{r3, lr}
    4bfe:	004b      	lsls	r3, r1, #1
    4c00:	1859      	adds	r1, r3, r1
    4c02:	00c9      	lsls	r1, r1, #3
    4c04:	1843      	adds	r3, r0, r1
    4c06:	1c1a      	adds	r2, r3, #0
    4c08:	32b8      	adds	r2, #184	; 0xb8
    4c0a:	6852      	ldr	r2, [r2, #4]
    4c0c:	33a8      	adds	r3, #168	; 0xa8
    4c0e:	681b      	ldr	r3, [r3, #0]
    4c10:	2a00      	cmp	r2, #0
    4c12:	d006      	beq.n	4c22 <_ZN4mbed10SerialBase12_irq_handlerEm9SerialIrq+0x26>
    4c14:	2b00      	cmp	r3, #0
    4c16:	d003      	beq.n	4c20 <_ZN4mbed10SerialBase12_irq_handlerEm9SerialIrq+0x24>
    4c18:	1841      	adds	r1, r0, r1
    4c1a:	31ac      	adds	r1, #172	; 0xac
    4c1c:	1c18      	adds	r0, r3, #0
    4c1e:	4790      	blx	r2
    4c20:	bd08      	pop	{r3, pc}
    4c22:	2b00      	cmp	r3, #0
    4c24:	d0fc      	beq.n	4c20 <_ZN4mbed10SerialBase12_irq_handlerEm9SerialIrq+0x24>
    4c26:	4798      	blx	r3
    4c28:	e7fa      	b.n	4c20 <_ZN4mbed10SerialBase12_irq_handlerEm9SerialIrq+0x24>
    4c2a:	46c0      	nop			; (mov r8, r8)

00004c2c <_ZN6CThunkIN4mbed10SerialBaseEE10trampolineEPS1_PvPMS1_FvS4_E>:
    4c2c:	b510      	push	{r4, lr}
    4c2e:	2800      	cmp	r0, #0
    4c30:	d008      	beq.n	4c44 <_ZN6CThunkIN4mbed10SerialBaseEE10trampolineEPS1_PvPMS1_FvS4_E+0x18>
    4c32:	6814      	ldr	r4, [r2, #0]
    4c34:	6853      	ldr	r3, [r2, #4]
    4c36:	2c00      	cmp	r4, #0
    4c38:	d005      	beq.n	4c46 <_ZN6CThunkIN4mbed10SerialBaseEE10trampolineEPS1_PvPMS1_FvS4_E+0x1a>
    4c3a:	07da      	lsls	r2, r3, #31
    4c3c:	d405      	bmi.n	4c4a <_ZN6CThunkIN4mbed10SerialBaseEE10trampolineEPS1_PvPMS1_FvS4_E+0x1e>
    4c3e:	105b      	asrs	r3, r3, #1
    4c40:	18c0      	adds	r0, r0, r3
    4c42:	47a0      	blx	r4
    4c44:	bd10      	pop	{r4, pc}
    4c46:	07da      	lsls	r2, r3, #31
    4c48:	d5fc      	bpl.n	4c44 <_ZN6CThunkIN4mbed10SerialBaseEE10trampolineEPS1_PvPMS1_FvS4_E+0x18>
    4c4a:	105b      	asrs	r3, r3, #1
    4c4c:	18c0      	adds	r0, r0, r3
    4c4e:	6803      	ldr	r3, [r0, #0]
    4c50:	591c      	ldr	r4, [r3, r4]
    4c52:	47a0      	blx	r4
    4c54:	e7f6      	b.n	4c44 <_ZN6CThunkIN4mbed10SerialBaseEE10trampolineEPS1_PvPMS1_FvS4_E+0x18>
    4c56:	46c0      	nop			; (mov r8, r8)

00004c58 <_ZN4mbed10SerialBaseC1E7PinNameS1_>:
    4c58:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c5a:	4647      	mov	r7, r8
    4c5c:	b480      	push	{r7}
    4c5e:	4b24      	ldr	r3, [pc, #144]	; (4cf0 <_ZN4mbed10SerialBaseC1E7PinNameS1_+0x98>)
    4c60:	b082      	sub	sp, #8
    4c62:	6003      	str	r3, [r0, #0]
    4c64:	2500      	movs	r5, #0
    4c66:	1c03      	adds	r3, r0, #0
    4c68:	1c17      	adds	r7, r2, #0
    4c6a:	466a      	mov	r2, sp
    4c6c:	1c04      	adds	r4, r0, #0
    4c6e:	9500      	str	r5, [sp, #0]
    4c70:	9501      	str	r5, [sp, #4]
    4c72:	3308      	adds	r3, #8
    4c74:	4688      	mov	r8, r1
    4c76:	ca03      	ldmia	r2!, {r0, r1}
    4c78:	c303      	stmia	r3!, {r0, r1}
    4c7a:	4b1e      	ldr	r3, [pc, #120]	; (4cf4 <_ZN4mbed10SerialBaseC1E7PinNameS1_+0x9c>)
    4c7c:	6123      	str	r3, [r4, #16]
    4c7e:	4b1e      	ldr	r3, [pc, #120]	; (4cf8 <_ZN4mbed10SerialBaseC1E7PinNameS1_+0xa0>)
    4c80:	6163      	str	r3, [r4, #20]
    4c82:	4b1e      	ldr	r3, [pc, #120]	; (4cfc <_ZN4mbed10SerialBaseC1E7PinNameS1_+0xa4>)
    4c84:	61a3      	str	r3, [r4, #24]
    4c86:	1c23      	adds	r3, r4, #0
    4c88:	3308      	adds	r3, #8
    4c8a:	6225      	str	r5, [r4, #32]
    4c8c:	61e4      	str	r4, [r4, #28]
    4c8e:	6263      	str	r3, [r4, #36]	; 0x24
    4c90:	4b1b      	ldr	r3, [pc, #108]	; (4d00 <_ZN4mbed10SerialBaseC1E7PinNameS1_+0xa8>)
    4c92:	62a3      	str	r3, [r4, #40]	; 0x28
    4c94:	f3bf 8f6f 	isb	sy
    4c98:	f3bf 8f4f 	dsb	sy
    4c9c:	235c      	movs	r3, #92	; 0x5c
    4c9e:	1c26      	adds	r6, r4, #0
    4ca0:	62e5      	str	r5, [r4, #44]	; 0x2c
    4ca2:	6425      	str	r5, [r4, #64]	; 0x40
    4ca4:	6465      	str	r5, [r4, #68]	; 0x44
    4ca6:	65a5      	str	r5, [r4, #88]	; 0x58
    4ca8:	3660      	adds	r6, #96	; 0x60
    4caa:	54e5      	strb	r5, [r4, r3]
    4cac:	3301      	adds	r3, #1
    4cae:	54e5      	strb	r5, [r4, r3]
    4cb0:	1c30      	adds	r0, r6, #0
    4cb2:	2100      	movs	r1, #0
    4cb4:	2248      	movs	r2, #72	; 0x48
    4cb6:	f005 f857 	bl	9d68 <memset>
    4cba:	23a8      	movs	r3, #168	; 0xa8
    4cbc:	2296      	movs	r2, #150	; 0x96
    4cbe:	50e5      	str	r5, [r4, r3]
    4cc0:	3314      	adds	r3, #20
    4cc2:	50e5      	str	r5, [r4, r3]
    4cc4:	3304      	adds	r3, #4
    4cc6:	50e5      	str	r5, [r4, r3]
    4cc8:	3314      	adds	r3, #20
    4cca:	50e5      	str	r5, [r4, r3]
    4ccc:	0192      	lsls	r2, r2, #6
    4cce:	3304      	adds	r3, #4
    4cd0:	50e2      	str	r2, [r4, r3]
    4cd2:	1c30      	adds	r0, r6, #0
    4cd4:	4641      	mov	r1, r8
    4cd6:	1c3a      	adds	r2, r7, #0
    4cd8:	f7ff fcb2 	bl	4640 <serial_init>
    4cdc:	1c30      	adds	r0, r6, #0
    4cde:	4909      	ldr	r1, [pc, #36]	; (4d04 <_ZN4mbed10SerialBaseC1E7PinNameS1_+0xac>)
    4ce0:	1c22      	adds	r2, r4, #0
    4ce2:	f7ff fd89 	bl	47f8 <serial_irq_handler>
    4ce6:	1c20      	adds	r0, r4, #0
    4ce8:	b002      	add	sp, #8
    4cea:	bc04      	pop	{r2}
    4cec:	4690      	mov	r8, r2
    4cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4cf0:	0000f100 	.word	0x0000f100
    4cf4:	2404b51f 	.word	0x2404b51f
    4cf8:	cc0f447c 	.word	0xcc0f447c
    4cfc:	bd1f4798 	.word	0xbd1f4798
    4d00:	00004c2d 	.word	0x00004c2d
    4d04:	00004bfd 	.word	0x00004bfd

00004d08 <_ZN4mbed10SerialBase10_base_getcEv>:
    4d08:	b508      	push	{r3, lr}
    4d0a:	3060      	adds	r0, #96	; 0x60
    4d0c:	f7ff fdd6 	bl	48bc <serial_getc>
    4d10:	bd08      	pop	{r3, pc}
    4d12:	46c0      	nop			; (mov r8, r8)

00004d14 <_ZN4mbed10SerialBase10_base_putcEi>:
    4d14:	b510      	push	{r4, lr}
    4d16:	1c0c      	adds	r4, r1, #0
    4d18:	3060      	adds	r0, #96	; 0x60
    4d1a:	f7ff fdfb 	bl	4914 <serial_putc>
    4d1e:	1c20      	adds	r0, r4, #0
    4d20:	bd10      	pop	{r4, pc}
    4d22:	46c0      	nop			; (mov r8, r8)

00004d24 <_ZN4mbed6Stream5closeEv>:
    4d24:	2000      	movs	r0, #0
    4d26:	4770      	bx	lr

00004d28 <_ZN4mbed6Stream5writeEPKvj>:
    4d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4d2a:	188e      	adds	r6, r1, r2
    4d2c:	1c05      	adds	r5, r0, #0
    4d2e:	1c0f      	adds	r7, r1, #0
    4d30:	1e0c      	subs	r4, r1, #0
    4d32:	42b4      	cmp	r4, r6
    4d34:	d102      	bne.n	4d3c <_ZN4mbed6Stream5writeEPKvj+0x14>
    4d36:	e00a      	b.n	4d4e <_ZN4mbed6Stream5writeEPKvj+0x26>
    4d38:	42a6      	cmp	r6, r4
    4d3a:	d008      	beq.n	4d4e <_ZN4mbed6Stream5writeEPKvj+0x26>
    4d3c:	3401      	adds	r4, #1
    4d3e:	682b      	ldr	r3, [r5, #0]
    4d40:	1e62      	subs	r2, r4, #1
    4d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4d44:	7811      	ldrb	r1, [r2, #0]
    4d46:	1c28      	adds	r0, r5, #0
    4d48:	4798      	blx	r3
    4d4a:	1c43      	adds	r3, r0, #1
    4d4c:	d1f4      	bne.n	4d38 <_ZN4mbed6Stream5writeEPKvj+0x10>
    4d4e:	1be0      	subs	r0, r4, r7
    4d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4d52:	46c0      	nop			; (mov r8, r8)

00004d54 <_ZN4mbed6Stream4readEPvj>:
    4d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4d56:	188e      	adds	r6, r1, r2
    4d58:	1c05      	adds	r5, r0, #0
    4d5a:	1c0f      	adds	r7, r1, #0
    4d5c:	1e0c      	subs	r4, r1, #0
    4d5e:	42b4      	cmp	r4, r6
    4d60:	d105      	bne.n	4d6e <_ZN4mbed6Stream4readEPvj+0x1a>
    4d62:	e00a      	b.n	4d7a <_ZN4mbed6Stream4readEPvj+0x26>
    4d64:	3401      	adds	r4, #1
    4d66:	1e63      	subs	r3, r4, #1
    4d68:	7018      	strb	r0, [r3, #0]
    4d6a:	42a6      	cmp	r6, r4
    4d6c:	d005      	beq.n	4d7a <_ZN4mbed6Stream4readEPvj+0x26>
    4d6e:	682b      	ldr	r3, [r5, #0]
    4d70:	1c28      	adds	r0, r5, #0
    4d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4d74:	4798      	blx	r3
    4d76:	1c43      	adds	r3, r0, #1
    4d78:	d1f4      	bne.n	4d64 <_ZN4mbed6Stream4readEPvj+0x10>
    4d7a:	1be0      	subs	r0, r4, r7
    4d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4d7e:	46c0      	nop			; (mov r8, r8)

00004d80 <_ZN4mbed6Stream5lseekEli>:
    4d80:	2000      	movs	r0, #0
    4d82:	4770      	bx	lr

00004d84 <_ZN4mbed6Stream6isattyEv>:
    4d84:	2000      	movs	r0, #0
    4d86:	4770      	bx	lr

00004d88 <_ZN4mbed6Stream5fsyncEv>:
    4d88:	2000      	movs	r0, #0
    4d8a:	4770      	bx	lr

00004d8c <_ZN4mbed6Stream4flenEv>:
    4d8c:	2000      	movs	r0, #0
    4d8e:	4770      	bx	lr

00004d90 <_ZN4mbed6StreamC1EPKc>:
    4d90:	b510      	push	{r4, lr}
    4d92:	1c04      	adds	r4, r0, #0
    4d94:	b084      	sub	sp, #16
    4d96:	f001 f951 	bl	603c <_ZN4mbed8FileLikeC1EPKc>
    4d9a:	4b0b      	ldr	r3, [pc, #44]	; (4dc8 <_ZN4mbed6StreamC1EPKc+0x38>)
    4d9c:	a801      	add	r0, sp, #4
    4d9e:	1c1a      	adds	r2, r3, #0
    4da0:	333c      	adds	r3, #60	; 0x3c
    4da2:	6063      	str	r3, [r4, #4]
    4da4:	2300      	movs	r3, #0
    4da6:	3208      	adds	r2, #8
    4da8:	6163      	str	r3, [r4, #20]
    4daa:	6022      	str	r2, [r4, #0]
    4dac:	4907      	ldr	r1, [pc, #28]	; (4dcc <_ZN4mbed6StreamC1EPKc+0x3c>)
    4dae:	1c22      	adds	r2, r4, #0
    4db0:	f006 fab2 	bl	b318 <siprintf>
    4db4:	4906      	ldr	r1, [pc, #24]	; (4dd0 <_ZN4mbed6StreamC1EPKc+0x40>)
    4db6:	a801      	add	r0, sp, #4
    4db8:	f004 fe34 	bl	9a24 <fopen>
    4dbc:	6160      	str	r0, [r4, #20]
    4dbe:	f7ff f875 	bl	3eac <_ZN4mbed26mbed_set_unbuffered_streamEP7__sFILE>
    4dc2:	1c20      	adds	r0, r4, #0
    4dc4:	b004      	add	sp, #16
    4dc6:	bd10      	pop	{r4, pc}
    4dc8:	0000f108 	.word	0x0000f108
    4dcc:	0000edc4 	.word	0x0000edc4
    4dd0:	0000f14c 	.word	0x0000f14c

00004dd4 <_ZN4mbed6StreamD1Ev>:
    4dd4:	4b07      	ldr	r3, [pc, #28]	; (4df4 <_ZN4mbed6StreamD1Ev+0x20>)
    4dd6:	b510      	push	{r4, lr}
    4dd8:	1c1a      	adds	r2, r3, #0
    4dda:	1c04      	adds	r4, r0, #0
    4ddc:	3208      	adds	r2, #8
    4dde:	333c      	adds	r3, #60	; 0x3c
    4de0:	6002      	str	r2, [r0, #0]
    4de2:	6043      	str	r3, [r0, #4]
    4de4:	6940      	ldr	r0, [r0, #20]
    4de6:	f004 fc57 	bl	9698 <fclose>
    4dea:	1c20      	adds	r0, r4, #0
    4dec:	f001 f93a 	bl	6064 <_ZN4mbed8FileLikeD1Ev>
    4df0:	1c20      	adds	r0, r4, #0
    4df2:	bd10      	pop	{r4, pc}
    4df4:	0000f108 	.word	0x0000f108

00004df8 <_ZN4mbed6Stream4putcEi>:
    4df8:	b538      	push	{r3, r4, r5, lr}
    4dfa:	1c0d      	adds	r5, r1, #0
    4dfc:	1c04      	adds	r4, r0, #0
    4dfe:	6940      	ldr	r0, [r0, #20]
    4e00:	f004 fd0a 	bl	9818 <fflush>
    4e04:	1c28      	adds	r0, r5, #0
    4e06:	6961      	ldr	r1, [r4, #20]
    4e08:	f004 fe3e 	bl	9a88 <fputc>
    4e0c:	bd38      	pop	{r3, r4, r5, pc}
    4e0e:	46c0      	nop			; (mov r8, r8)

00004e10 <_ZN4mbed6Stream6printfEPKcz>:
    4e10:	b40e      	push	{r1, r2, r3}
    4e12:	b530      	push	{r4, r5, lr}
    4e14:	1c04      	adds	r4, r0, #0
    4e16:	b082      	sub	sp, #8
    4e18:	ab05      	add	r3, sp, #20
    4e1a:	cb20      	ldmia	r3!, {r5}
    4e1c:	6940      	ldr	r0, [r0, #20]
    4e1e:	9301      	str	r3, [sp, #4]
    4e20:	f004 fcfa 	bl	9818 <fflush>
    4e24:	6960      	ldr	r0, [r4, #20]
    4e26:	1c29      	adds	r1, r5, #0
    4e28:	9a01      	ldr	r2, [sp, #4]
    4e2a:	f005 f97b 	bl	a124 <vfiprintf>
    4e2e:	b002      	add	sp, #8
    4e30:	bc30      	pop	{r4, r5}
    4e32:	bc08      	pop	{r3}
    4e34:	b003      	add	sp, #12
    4e36:	4718      	bx	r3

00004e38 <mbed_assert_internal>:
    4e38:	b538      	push	{r3, r4, r5, lr}
    4e3a:	1c05      	adds	r5, r0, #0
    4e3c:	1c0c      	adds	r4, r1, #0
    4e3e:	1c13      	adds	r3, r2, #0
    4e40:	1c29      	adds	r1, r5, #0
    4e42:	4802      	ldr	r0, [pc, #8]	; (4e4c <mbed_assert_internal+0x14>)
    4e44:	1c22      	adds	r2, r4, #0
    4e46:	f000 f803 	bl	4e50 <error>
    4e4a:	bd38      	pop	{r3, r4, r5, pc}
    4e4c:	0000f150 	.word	0x0000f150

00004e50 <error>:
    4e50:	b40f      	push	{r0, r1, r2, r3}
    4e52:	2001      	movs	r0, #1
    4e54:	b508      	push	{r3, lr}
    4e56:	f004 fbb1 	bl	95bc <exit>
    4e5a:	46c0      	nop			; (mov r8, r8)

00004e5c <gpio_init_out>:
    4e5c:	b538      	push	{r3, r4, r5, lr}
    4e5e:	1c0d      	adds	r5, r1, #0
    4e60:	1c04      	adds	r4, r0, #0
    4e62:	f000 fa8b 	bl	537c <gpio_init>
    4e66:	1c6b      	adds	r3, r5, #1
    4e68:	d00e      	beq.n	4e88 <gpio_init_out+0x2c>
    4e6a:	2300      	movs	r3, #0
    4e6c:	56e3      	ldrsb	r3, [r4, r3]
    4e6e:	3301      	adds	r3, #1
    4e70:	d00b      	beq.n	4e8a <gpio_init_out+0x2e>
    4e72:	68e3      	ldr	r3, [r4, #12]
    4e74:	6862      	ldr	r2, [r4, #4]
    4e76:	1c20      	adds	r0, r4, #0
    4e78:	2101      	movs	r1, #1
    4e7a:	601a      	str	r2, [r3, #0]
    4e7c:	f000 fae6 	bl	544c <gpio_dir>
    4e80:	1c20      	adds	r0, r4, #0
    4e82:	2100      	movs	r1, #0
    4e84:	f000 faba 	bl	53fc <gpio_mode>
    4e88:	bd38      	pop	{r3, r4, r5, pc}
    4e8a:	4803      	ldr	r0, [pc, #12]	; (4e98 <gpio_init_out+0x3c>)
    4e8c:	4903      	ldr	r1, [pc, #12]	; (4e9c <gpio_init_out+0x40>)
    4e8e:	2228      	movs	r2, #40	; 0x28
    4e90:	f7ff ffd2 	bl	4e38 <mbed_assert_internal>
    4e94:	e7ed      	b.n	4e72 <gpio_init_out+0x16>
    4e96:	46c0      	nop			; (mov r8, r8)
    4e98:	0000e988 	.word	0x0000e988
    4e9c:	0000f184 	.word	0x0000f184

00004ea0 <pinmap_find_peripheral>:
    4ea0:	e002      	b.n	4ea8 <pinmap_find_peripheral+0x8>
    4ea2:	4283      	cmp	r3, r0
    4ea4:	d006      	beq.n	4eb4 <pinmap_find_peripheral+0x14>
    4ea6:	310c      	adds	r1, #12
    4ea8:	2300      	movs	r3, #0
    4eaa:	56cb      	ldrsb	r3, [r1, r3]
    4eac:	1c5a      	adds	r2, r3, #1
    4eae:	d1f8      	bne.n	4ea2 <pinmap_find_peripheral+0x2>
    4eb0:	1c18      	adds	r0, r3, #0
    4eb2:	4770      	bx	lr
    4eb4:	6848      	ldr	r0, [r1, #4]
    4eb6:	e7fc      	b.n	4eb2 <pinmap_find_peripheral+0x12>

00004eb8 <pinmap_peripheral>:
    4eb8:	1c02      	adds	r2, r0, #0
    4eba:	b508      	push	{r3, lr}
    4ebc:	1c53      	adds	r3, r2, #1
    4ebe:	d103      	bne.n	4ec8 <pinmap_peripheral+0x10>
    4ec0:	e00b      	b.n	4eda <pinmap_peripheral+0x22>
    4ec2:	429a      	cmp	r2, r3
    4ec4:	d00a      	beq.n	4edc <pinmap_peripheral+0x24>
    4ec6:	310c      	adds	r1, #12
    4ec8:	2300      	movs	r3, #0
    4eca:	56cb      	ldrsb	r3, [r1, r3]
    4ecc:	1c58      	adds	r0, r3, #1
    4ece:	d1f8      	bne.n	4ec2 <pinmap_peripheral+0xa>
    4ed0:	4804      	ldr	r0, [pc, #16]	; (4ee4 <pinmap_peripheral+0x2c>)
    4ed2:	f7ff ffbd 	bl	4e50 <error>
    4ed6:	2001      	movs	r0, #1
    4ed8:	4240      	negs	r0, r0
    4eda:	bd08      	pop	{r3, pc}
    4edc:	6848      	ldr	r0, [r1, #4]
    4ede:	1c43      	adds	r3, r0, #1
    4ee0:	d1fb      	bne.n	4eda <pinmap_peripheral+0x22>
    4ee2:	e7f5      	b.n	4ed0 <pinmap_peripheral+0x18>
    4ee4:	0000f224 	.word	0x0000f224

00004ee8 <pinmap_function>:
    4ee8:	1c02      	adds	r2, r0, #0
    4eea:	b508      	push	{r3, lr}
    4eec:	1c53      	adds	r3, r2, #1
    4eee:	d103      	bne.n	4ef8 <pinmap_function+0x10>
    4ef0:	e00b      	b.n	4f0a <pinmap_function+0x22>
    4ef2:	429a      	cmp	r2, r3
    4ef4:	d00a      	beq.n	4f0c <pinmap_function+0x24>
    4ef6:	310c      	adds	r1, #12
    4ef8:	2300      	movs	r3, #0
    4efa:	56cb      	ldrsb	r3, [r1, r3]
    4efc:	1c58      	adds	r0, r3, #1
    4efe:	d1f8      	bne.n	4ef2 <pinmap_function+0xa>
    4f00:	4804      	ldr	r0, [pc, #16]	; (4f14 <pinmap_function+0x2c>)
    4f02:	f7ff ffa5 	bl	4e50 <error>
    4f06:	2001      	movs	r0, #1
    4f08:	4240      	negs	r0, r0
    4f0a:	bd08      	pop	{r3, pc}
    4f0c:	6888      	ldr	r0, [r1, #8]
    4f0e:	1c43      	adds	r3, r0, #1
    4f10:	d1fb      	bne.n	4f0a <pinmap_function+0x22>
    4f12:	e7f5      	b.n	4f00 <pinmap_function+0x18>
    4f14:	0000f244 	.word	0x0000f244

00004f18 <wait_us>:
    4f18:	b538      	push	{r3, r4, r5, lr}
    4f1a:	1c05      	adds	r5, r0, #0
    4f1c:	f000 fcbc 	bl	5898 <us_ticker_read>
    4f20:	1c04      	adds	r4, r0, #0
    4f22:	f000 fcb9 	bl	5898 <us_ticker_read>
    4f26:	1b00      	subs	r0, r0, r4
    4f28:	42a8      	cmp	r0, r5
    4f2a:	d3fa      	bcc.n	4f22 <wait_us+0xa>
    4f2c:	bd38      	pop	{r3, r4, r5, pc}
    4f2e:	46c0      	nop			; (mov r8, r8)

00004f30 <wait_ms>:
    4f30:	b508      	push	{r3, lr}
    4f32:	23fa      	movs	r3, #250	; 0xfa
    4f34:	009b      	lsls	r3, r3, #2
    4f36:	4358      	muls	r0, r3
    4f38:	f7ff ffee 	bl	4f18 <wait_us>
    4f3c:	bd08      	pop	{r3, pc}
    4f3e:	46c0      	nop			; (mov r8, r8)

00004f40 <_sercom_get_sync_baud_val>:
    4f40:	b510      	push	{r4, lr}
    4f42:	0849      	lsrs	r1, r1, #1
    4f44:	2340      	movs	r3, #64	; 0x40
    4f46:	2400      	movs	r4, #0
    4f48:	4281      	cmp	r1, r0
    4f4a:	d202      	bcs.n	4f52 <_sercom_get_sync_baud_val+0x12>
    4f4c:	1c18      	adds	r0, r3, #0
    4f4e:	bd10      	pop	{r4, pc}
    4f50:	1c1c      	adds	r4, r3, #0
    4f52:	1c63      	adds	r3, r4, #1
    4f54:	1a09      	subs	r1, r1, r0
    4f56:	b29b      	uxth	r3, r3
    4f58:	4288      	cmp	r0, r1
    4f5a:	d9f9      	bls.n	4f50 <_sercom_get_sync_baud_val+0x10>
    4f5c:	2340      	movs	r3, #64	; 0x40
    4f5e:	2cff      	cmp	r4, #255	; 0xff
    4f60:	d8f4      	bhi.n	4f4c <_sercom_get_sync_baud_val+0xc>
    4f62:	8014      	strh	r4, [r2, #0]
    4f64:	2300      	movs	r3, #0
    4f66:	e7f1      	b.n	4f4c <_sercom_get_sync_baud_val+0xc>

00004f68 <_sercom_get_async_baud_val>:
    4f68:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f6a:	4656      	mov	r6, sl
    4f6c:	464d      	mov	r5, r9
    4f6e:	4644      	mov	r4, r8
    4f70:	465f      	mov	r7, fp
    4f72:	b4f0      	push	{r4, r5, r6, r7}
    4f74:	1c04      	adds	r4, r0, #0
    4f76:	1c25      	adds	r5, r4, #0
    4f78:	b087      	sub	sp, #28
    4f7a:	a810      	add	r0, sp, #64	; 0x40
    4f7c:	7806      	ldrb	r6, [r0, #0]
    4f7e:	2040      	movs	r0, #64	; 0x40
    4f80:	4375      	muls	r5, r6
    4f82:	428d      	cmp	r5, r1
    4f84:	d906      	bls.n	4f94 <_sercom_get_async_baud_val+0x2c>
    4f86:	b007      	add	sp, #28
    4f88:	bc3c      	pop	{r2, r3, r4, r5}
    4f8a:	4690      	mov	r8, r2
    4f8c:	4699      	mov	r9, r3
    4f8e:	46a2      	mov	sl, r4
    4f90:	46ab      	mov	fp, r5
    4f92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4f94:	9204      	str	r2, [sp, #16]
    4f96:	1c0d      	adds	r5, r1, #0
    4f98:	1c22      	adds	r2, r4, #0
    4f9a:	2b00      	cmp	r3, #0
    4f9c:	d13f      	bne.n	501e <_sercom_get_async_baud_val+0xb6>
    4f9e:	1c30      	adds	r0, r6, #0
    4fa0:	2100      	movs	r1, #0
    4fa2:	f001 fcc1 	bl	6928 <__aeabi_lmul>
    4fa6:	2300      	movs	r3, #0
    4fa8:	4683      	mov	fp, r0
    4faa:	213f      	movs	r1, #63	; 0x3f
    4fac:	2001      	movs	r0, #1
    4fae:	469c      	mov	ip, r3
    4fb0:	469a      	mov	sl, r3
    4fb2:	1c2e      	adds	r6, r5, #0
    4fb4:	2700      	movs	r7, #0
    4fb6:	2200      	movs	r2, #0
    4fb8:	2300      	movs	r3, #0
    4fba:	4680      	mov	r8, r0
    4fbc:	1c0c      	adds	r4, r1, #0
    4fbe:	e024      	b.n	500a <_sercom_get_async_baud_val+0xa2>
    4fc0:	4641      	mov	r1, r8
    4fc2:	40a9      	lsls	r1, r5
    4fc4:	1c0d      	adds	r5, r1, #0
    4fc6:	4641      	mov	r1, r8
    4fc8:	40a1      	lsls	r1, r4
    4fca:	1c10      	adds	r0, r2, #0
    4fcc:	4689      	mov	r9, r1
    4fce:	1c19      	adds	r1, r3, #0
    4fd0:	1880      	adds	r0, r0, r2
    4fd2:	4159      	adcs	r1, r3
    4fd4:	1c0b      	adds	r3, r1, #0
    4fd6:	1c02      	adds	r2, r0, #0
    4fd8:	4659      	mov	r1, fp
    4fda:	9200      	str	r2, [sp, #0]
    4fdc:	9301      	str	r3, [sp, #4]
    4fde:	4229      	tst	r1, r5
    4fe0:	d003      	beq.n	4fea <_sercom_get_async_baud_val+0x82>
    4fe2:	4640      	mov	r0, r8
    4fe4:	4310      	orrs	r0, r2
    4fe6:	1c02      	adds	r2, r0, #0
    4fe8:	9b01      	ldr	r3, [sp, #4]
    4fea:	429f      	cmp	r7, r3
    4fec:	d80b      	bhi.n	5006 <_sercom_get_async_baud_val+0x9e>
    4fee:	d101      	bne.n	4ff4 <_sercom_get_async_baud_val+0x8c>
    4ff0:	4296      	cmp	r6, r2
    4ff2:	d808      	bhi.n	5006 <_sercom_get_async_baud_val+0x9e>
    4ff4:	4661      	mov	r1, ip
    4ff6:	4648      	mov	r0, r9
    4ff8:	4301      	orrs	r1, r0
    4ffa:	4650      	mov	r0, sl
    4ffc:	4328      	orrs	r0, r5
    4ffe:	1b92      	subs	r2, r2, r6
    5000:	41bb      	sbcs	r3, r7
    5002:	468c      	mov	ip, r1
    5004:	4682      	mov	sl, r0
    5006:	3c01      	subs	r4, #1
    5008:	d310      	bcc.n	502c <_sercom_get_async_baud_val+0xc4>
    500a:	2120      	movs	r1, #32
    500c:	4249      	negs	r1, r1
    500e:	1865      	adds	r5, r4, r1
    5010:	d5d6      	bpl.n	4fc0 <_sercom_get_async_baud_val+0x58>
    5012:	2120      	movs	r1, #32
    5014:	1b0d      	subs	r5, r1, r4
    5016:	4641      	mov	r1, r8
    5018:	40e9      	lsrs	r1, r5
    501a:	1c0d      	adds	r5, r1, #0
    501c:	e7d3      	b.n	4fc6 <_sercom_get_async_baud_val+0x5e>
    501e:	2400      	movs	r4, #0
    5020:	2b01      	cmp	r3, #1
    5022:	d007      	beq.n	5034 <_sercom_get_async_baud_val+0xcc>
    5024:	9b04      	ldr	r3, [sp, #16]
    5026:	2000      	movs	r0, #0
    5028:	801c      	strh	r4, [r3, #0]
    502a:	e7ac      	b.n	4f86 <_sercom_get_async_baud_val+0x1e>
    502c:	4663      	mov	r3, ip
    502e:	425c      	negs	r4, r3
    5030:	0c24      	lsrs	r4, r4, #16
    5032:	e7f7      	b.n	5024 <_sercom_get_async_baud_val+0xbc>
    5034:	0f4b      	lsrs	r3, r1, #29
    5036:	1c1c      	adds	r4, r3, #0
    5038:	00cb      	lsls	r3, r1, #3
    503a:	4698      	mov	r8, r3
    503c:	1c30      	adds	r0, r6, #0
    503e:	2300      	movs	r3, #0
    5040:	2100      	movs	r1, #0
    5042:	f001 fc71 	bl	6928 <__aeabi_lmul>
    5046:	2300      	movs	r3, #0
    5048:	469c      	mov	ip, r3
    504a:	3320      	adds	r3, #32
    504c:	469b      	mov	fp, r3
    504e:	4663      	mov	r3, ip
    5050:	46a1      	mov	r9, r4
    5052:	9000      	str	r0, [sp, #0]
    5054:	9101      	str	r1, [sp, #4]
    5056:	9303      	str	r3, [sp, #12]
    5058:	466b      	mov	r3, sp
    505a:	7b1b      	ldrb	r3, [r3, #12]
    505c:	2000      	movs	r0, #0
    505e:	9305      	str	r3, [sp, #20]
    5060:	2300      	movs	r3, #0
    5062:	2100      	movs	r1, #0
    5064:	469c      	mov	ip, r3
    5066:	223f      	movs	r2, #63	; 0x3f
    5068:	e027      	b.n	50ba <_sercom_get_async_baud_val+0x152>
    506a:	2401      	movs	r4, #1
    506c:	409c      	lsls	r4, r3
    506e:	1c23      	adds	r3, r4, #0
    5070:	2701      	movs	r7, #1
    5072:	4646      	mov	r6, r8
    5074:	4097      	lsls	r7, r2
    5076:	403e      	ands	r6, r7
    5078:	1c04      	adds	r4, r0, #0
    507a:	1c0d      	adds	r5, r1, #0
    507c:	46b2      	mov	sl, r6
    507e:	464e      	mov	r6, r9
    5080:	1824      	adds	r4, r4, r0
    5082:	414d      	adcs	r5, r1
    5084:	4033      	ands	r3, r6
    5086:	4656      	mov	r6, sl
    5088:	1c20      	adds	r0, r4, #0
    508a:	1c29      	adds	r1, r5, #0
    508c:	4333      	orrs	r3, r6
    508e:	d004      	beq.n	509a <_sercom_get_async_baud_val+0x132>
    5090:	2101      	movs	r1, #1
    5092:	1c23      	adds	r3, r4, #0
    5094:	430b      	orrs	r3, r1
    5096:	1c18      	adds	r0, r3, #0
    5098:	1c29      	adds	r1, r5, #0
    509a:	9b01      	ldr	r3, [sp, #4]
    509c:	428b      	cmp	r3, r1
    509e:	d80a      	bhi.n	50b6 <_sercom_get_async_baud_val+0x14e>
    50a0:	d102      	bne.n	50a8 <_sercom_get_async_baud_val+0x140>
    50a2:	9b00      	ldr	r3, [sp, #0]
    50a4:	4283      	cmp	r3, r0
    50a6:	d806      	bhi.n	50b6 <_sercom_get_async_baud_val+0x14e>
    50a8:	9b00      	ldr	r3, [sp, #0]
    50aa:	9c01      	ldr	r4, [sp, #4]
    50ac:	1ac0      	subs	r0, r0, r3
    50ae:	41a1      	sbcs	r1, r4
    50b0:	4663      	mov	r3, ip
    50b2:	433b      	orrs	r3, r7
    50b4:	469c      	mov	ip, r3
    50b6:	3a01      	subs	r2, #1
    50b8:	d309      	bcc.n	50ce <_sercom_get_async_baud_val+0x166>
    50ba:	2320      	movs	r3, #32
    50bc:	425b      	negs	r3, r3
    50be:	18d3      	adds	r3, r2, r3
    50c0:	d5d3      	bpl.n	506a <_sercom_get_async_baud_val+0x102>
    50c2:	465b      	mov	r3, fp
    50c4:	2401      	movs	r4, #1
    50c6:	1a9b      	subs	r3, r3, r2
    50c8:	40dc      	lsrs	r4, r3
    50ca:	1c23      	adds	r3, r4, #0
    50cc:	e7d0      	b.n	5070 <_sercom_get_async_baud_val+0x108>
    50ce:	4661      	mov	r1, ip
    50d0:	9a03      	ldr	r2, [sp, #12]
    50d2:	1a8b      	subs	r3, r1, r2
    50d4:	4907      	ldr	r1, [pc, #28]	; (50f4 <_sercom_get_async_baud_val+0x18c>)
    50d6:	08db      	lsrs	r3, r3, #3
    50d8:	428b      	cmp	r3, r1
    50da:	d906      	bls.n	50ea <_sercom_get_async_baud_val+0x182>
    50dc:	1c13      	adds	r3, r2, #0
    50de:	3301      	adds	r3, #1
    50e0:	9303      	str	r3, [sp, #12]
    50e2:	2b08      	cmp	r3, #8
    50e4:	d1b8      	bne.n	5058 <_sercom_get_async_baud_val+0xf0>
    50e6:	2040      	movs	r0, #64	; 0x40
    50e8:	e74d      	b.n	4f86 <_sercom_get_async_baud_val+0x1e>
    50ea:	9a05      	ldr	r2, [sp, #20]
    50ec:	0354      	lsls	r4, r2, #13
    50ee:	431c      	orrs	r4, r3
    50f0:	b2a4      	uxth	r4, r4
    50f2:	e797      	b.n	5024 <_sercom_get_async_baud_val+0xbc>
    50f4:	00001fff 	.word	0x00001fff

000050f8 <sercom_set_gclk_generator>:
    50f8:	b530      	push	{r4, r5, lr}
    50fa:	4c0e      	ldr	r4, [pc, #56]	; (5134 <sercom_set_gclk_generator+0x3c>)
    50fc:	b083      	sub	sp, #12
    50fe:	7823      	ldrb	r3, [r4, #0]
    5100:	1c05      	adds	r5, r0, #0
    5102:	2b00      	cmp	r3, #0
    5104:	d006      	beq.n	5114 <sercom_set_gclk_generator+0x1c>
    5106:	2900      	cmp	r1, #0
    5108:	d104      	bne.n	5114 <sercom_set_gclk_generator+0x1c>
    510a:	7863      	ldrb	r3, [r4, #1]
    510c:	4283      	cmp	r3, r0
    510e:	d00f      	beq.n	5130 <sercom_set_gclk_generator+0x38>
    5110:	201d      	movs	r0, #29
    5112:	e00b      	b.n	512c <sercom_set_gclk_generator+0x34>
    5114:	a901      	add	r1, sp, #4
    5116:	2013      	movs	r0, #19
    5118:	700d      	strb	r5, [r1, #0]
    511a:	f7ff f931 	bl	4380 <system_gclk_chan_set_config>
    511e:	2013      	movs	r0, #19
    5120:	f7ff f8f0 	bl	4304 <system_gclk_chan_enable>
    5124:	2301      	movs	r3, #1
    5126:	2000      	movs	r0, #0
    5128:	7065      	strb	r5, [r4, #1]
    512a:	7023      	strb	r3, [r4, #0]
    512c:	b003      	add	sp, #12
    512e:	bd30      	pop	{r4, r5, pc}
    5130:	2000      	movs	r0, #0
    5132:	e7fb      	b.n	512c <sercom_set_gclk_generator+0x34>
    5134:	200046e0 	.word	0x200046e0

00005138 <_sercom_get_sercom_inst_index>:
    5138:	b570      	push	{r4, r5, r6, lr}
    513a:	b086      	sub	sp, #24
    513c:	4669      	mov	r1, sp
    513e:	4b09      	ldr	r3, [pc, #36]	; (5164 <_sercom_get_sercom_inst_index+0x2c>)
    5140:	466a      	mov	r2, sp
    5142:	cb70      	ldmia	r3!, {r4, r5, r6}
    5144:	c170      	stmia	r1!, {r4, r5, r6}
    5146:	cb70      	ldmia	r3!, {r4, r5, r6}
    5148:	c170      	stmia	r1!, {r4, r5, r6}
    514a:	2300      	movs	r3, #0
    514c:	0099      	lsls	r1, r3, #2
    514e:	5851      	ldr	r1, [r2, r1]
    5150:	4281      	cmp	r1, r0
    5152:	d005      	beq.n	5160 <_sercom_get_sercom_inst_index+0x28>
    5154:	3301      	adds	r3, #1
    5156:	2b06      	cmp	r3, #6
    5158:	d1f8      	bne.n	514c <_sercom_get_sercom_inst_index+0x14>
    515a:	2000      	movs	r0, #0
    515c:	b006      	add	sp, #24
    515e:	bd70      	pop	{r4, r5, r6, pc}
    5160:	b2d8      	uxtb	r0, r3
    5162:	e7fb      	b.n	515c <_sercom_get_sercom_inst_index+0x24>
    5164:	0000f474 	.word	0x0000f474

00005168 <system_clock_source_get_hz>:
    5168:	b510      	push	{r4, lr}
    516a:	2808      	cmp	r0, #8
    516c:	d82c      	bhi.n	51c8 <system_clock_source_get_hz+0x60>
    516e:	4b1b      	ldr	r3, [pc, #108]	; (51dc <system_clock_source_get_hz+0x74>)
    5170:	0080      	lsls	r0, r0, #2
    5172:	581b      	ldr	r3, [r3, r0]
    5174:	469f      	mov	pc, r3
    5176:	2080      	movs	r0, #128	; 0x80
    5178:	0200      	lsls	r0, r0, #8
    517a:	bd10      	pop	{r4, pc}
    517c:	4b18      	ldr	r3, [pc, #96]	; (51e0 <system_clock_source_get_hz+0x78>)
    517e:	6958      	ldr	r0, [r3, #20]
    5180:	e7fb      	b.n	517a <system_clock_source_get_hz+0x12>
    5182:	4b18      	ldr	r3, [pc, #96]	; (51e4 <system_clock_source_get_hz+0x7c>)
    5184:	6a18      	ldr	r0, [r3, #32]
    5186:	4b18      	ldr	r3, [pc, #96]	; (51e8 <system_clock_source_get_hz+0x80>)
    5188:	0580      	lsls	r0, r0, #22
    518a:	0f80      	lsrs	r0, r0, #30
    518c:	40c3      	lsrs	r3, r0
    518e:	1c18      	adds	r0, r3, #0
    5190:	e7f3      	b.n	517a <system_clock_source_get_hz+0x12>
    5192:	2002      	movs	r0, #2
    5194:	4c12      	ldr	r4, [pc, #72]	; (51e0 <system_clock_source_get_hz+0x78>)
    5196:	6823      	ldr	r3, [r4, #0]
    5198:	4018      	ands	r0, r3
    519a:	d0ee      	beq.n	517a <system_clock_source_get_hz+0x12>
    519c:	2210      	movs	r2, #16
    519e:	4911      	ldr	r1, [pc, #68]	; (51e4 <system_clock_source_get_hz+0x7c>)
    51a0:	68cb      	ldr	r3, [r1, #12]
    51a2:	421a      	tst	r2, r3
    51a4:	d0fc      	beq.n	51a0 <system_clock_source_get_hz+0x38>
    51a6:	6823      	ldr	r3, [r4, #0]
    51a8:	075b      	lsls	r3, r3, #29
    51aa:	d40f      	bmi.n	51cc <system_clock_source_get_hz+0x64>
    51ac:	480f      	ldr	r0, [pc, #60]	; (51ec <system_clock_source_get_hz+0x84>)
    51ae:	e7e4      	b.n	517a <system_clock_source_get_hz+0x12>
    51b0:	4b0b      	ldr	r3, [pc, #44]	; (51e0 <system_clock_source_get_hz+0x78>)
    51b2:	6918      	ldr	r0, [r3, #16]
    51b4:	e7e1      	b.n	517a <system_clock_source_get_hz+0x12>
    51b6:	2350      	movs	r3, #80	; 0x50
    51b8:	4a0a      	ldr	r2, [pc, #40]	; (51e4 <system_clock_source_get_hz+0x7c>)
    51ba:	2000      	movs	r0, #0
    51bc:	5cd3      	ldrb	r3, [r2, r3]
    51be:	075b      	lsls	r3, r3, #29
    51c0:	d5db      	bpl.n	517a <system_clock_source_get_hz+0x12>
    51c2:	4b07      	ldr	r3, [pc, #28]	; (51e0 <system_clock_source_get_hz+0x78>)
    51c4:	68d8      	ldr	r0, [r3, #12]
    51c6:	e7d8      	b.n	517a <system_clock_source_get_hz+0x12>
    51c8:	2000      	movs	r0, #0
    51ca:	e7d6      	b.n	517a <system_clock_source_get_hz+0x12>
    51cc:	2000      	movs	r0, #0
    51ce:	f7ff f8e3 	bl	4398 <system_gclk_chan_get_hz>
    51d2:	68a3      	ldr	r3, [r4, #8]
    51d4:	041b      	lsls	r3, r3, #16
    51d6:	0c1b      	lsrs	r3, r3, #16
    51d8:	4358      	muls	r0, r3
    51da:	e7ce      	b.n	517a <system_clock_source_get_hz+0x12>
    51dc:	0000f48c 	.word	0x0000f48c
    51e0:	200046e4 	.word	0x200046e4
    51e4:	40000800 	.word	0x40000800
    51e8:	007a1200 	.word	0x007a1200
    51ec:	02dc6c00 	.word	0x02dc6c00

000051f0 <system_clock_source_enable>:
    51f0:	b510      	push	{r4, lr}
    51f2:	2808      	cmp	r0, #8
    51f4:	d841      	bhi.n	527a <system_clock_source_enable+0x8a>
    51f6:	4b22      	ldr	r3, [pc, #136]	; (5280 <system_clock_source_enable+0x90>)
    51f8:	0080      	lsls	r0, r0, #2
    51fa:	581b      	ldr	r3, [r3, r0]
    51fc:	469f      	mov	pc, r3
    51fe:	2000      	movs	r0, #0
    5200:	bd10      	pop	{r4, pc}
    5202:	2302      	movs	r3, #2
    5204:	4a1f      	ldr	r2, [pc, #124]	; (5284 <system_clock_source_enable+0x94>)
    5206:	2000      	movs	r0, #0
    5208:	6991      	ldr	r1, [r2, #24]
    520a:	430b      	orrs	r3, r1
    520c:	6193      	str	r3, [r2, #24]
    520e:	e7f7      	b.n	5200 <system_clock_source_enable+0x10>
    5210:	2302      	movs	r3, #2
    5212:	4a1c      	ldr	r2, [pc, #112]	; (5284 <system_clock_source_enable+0x94>)
    5214:	2000      	movs	r0, #0
    5216:	8a91      	ldrh	r1, [r2, #20]
    5218:	430b      	orrs	r3, r1
    521a:	8293      	strh	r3, [r2, #20]
    521c:	e7f0      	b.n	5200 <system_clock_source_enable+0x10>
    521e:	2302      	movs	r3, #2
    5220:	4a18      	ldr	r2, [pc, #96]	; (5284 <system_clock_source_enable+0x94>)
    5222:	2000      	movs	r0, #0
    5224:	6a11      	ldr	r1, [r2, #32]
    5226:	430b      	orrs	r3, r1
    5228:	6213      	str	r3, [r2, #32]
    522a:	e7e9      	b.n	5200 <system_clock_source_enable+0x10>
    522c:	2302      	movs	r3, #2
    522e:	2010      	movs	r0, #16
    5230:	4c15      	ldr	r4, [pc, #84]	; (5288 <system_clock_source_enable+0x98>)
    5232:	6822      	ldr	r2, [r4, #0]
    5234:	4313      	orrs	r3, r2
    5236:	6023      	str	r3, [r4, #0]
    5238:	6822      	ldr	r2, [r4, #0]
    523a:	4b14      	ldr	r3, [pc, #80]	; (528c <system_clock_source_enable+0x9c>)
    523c:	4013      	ands	r3, r2
    523e:	4a11      	ldr	r2, [pc, #68]	; (5284 <system_clock_source_enable+0x94>)
    5240:	8493      	strh	r3, [r2, #36]	; 0x24
    5242:	68d3      	ldr	r3, [r2, #12]
    5244:	490f      	ldr	r1, [pc, #60]	; (5284 <system_clock_source_enable+0x94>)
    5246:	4218      	tst	r0, r3
    5248:	d0fb      	beq.n	5242 <system_clock_source_enable+0x52>
    524a:	68a3      	ldr	r3, [r4, #8]
    524c:	2000      	movs	r0, #0
    524e:	62cb      	str	r3, [r1, #44]	; 0x2c
    5250:	6863      	ldr	r3, [r4, #4]
    5252:	628b      	str	r3, [r1, #40]	; 0x28
    5254:	6823      	ldr	r3, [r4, #0]
    5256:	b29b      	uxth	r3, r3
    5258:	848b      	strh	r3, [r1, #36]	; 0x24
    525a:	e7d1      	b.n	5200 <system_clock_source_enable+0x10>
    525c:	2244      	movs	r2, #68	; 0x44
    525e:	2302      	movs	r3, #2
    5260:	4908      	ldr	r1, [pc, #32]	; (5284 <system_clock_source_enable+0x94>)
    5262:	5c88      	ldrb	r0, [r1, r2]
    5264:	4303      	orrs	r3, r0
    5266:	548b      	strb	r3, [r1, r2]
    5268:	2000      	movs	r0, #0
    526a:	e7c9      	b.n	5200 <system_clock_source_enable+0x10>
    526c:	2302      	movs	r3, #2
    526e:	4a05      	ldr	r2, [pc, #20]	; (5284 <system_clock_source_enable+0x94>)
    5270:	2000      	movs	r0, #0
    5272:	8a11      	ldrh	r1, [r2, #16]
    5274:	430b      	orrs	r3, r1
    5276:	8213      	strh	r3, [r2, #16]
    5278:	e7c2      	b.n	5200 <system_clock_source_enable+0x10>
    527a:	2017      	movs	r0, #23
    527c:	e7c0      	b.n	5200 <system_clock_source_enable+0x10>
    527e:	46c0      	nop			; (mov r8, r8)
    5280:	0000f4b0 	.word	0x0000f4b0
    5284:	40000800 	.word	0x40000800
    5288:	200046e4 	.word	0x200046e4
    528c:	0000ff7f 	.word	0x0000ff7f

00005290 <system_clock_init>:
    5290:	b5f0      	push	{r4, r5, r6, r7, lr}
    5292:	4647      	mov	r7, r8
    5294:	22c2      	movs	r2, #194	; 0xc2
    5296:	211e      	movs	r1, #30
    5298:	b480      	push	{r7}
    529a:	4b31      	ldr	r3, [pc, #196]	; (5360 <system_clock_init+0xd0>)
    529c:	00d2      	lsls	r2, r2, #3
    529e:	609a      	str	r2, [r3, #8]
    52a0:	4a30      	ldr	r2, [pc, #192]	; (5364 <system_clock_init+0xd4>)
    52a2:	2400      	movs	r4, #0
    52a4:	6853      	ldr	r3, [r2, #4]
    52a6:	b084      	sub	sp, #16
    52a8:	438b      	bics	r3, r1
    52aa:	6053      	str	r3, [r2, #4]
    52ac:	2301      	movs	r3, #1
    52ae:	ad01      	add	r5, sp, #4
    52b0:	702b      	strb	r3, [r5, #0]
    52b2:	b2e0      	uxtb	r0, r4
    52b4:	1c29      	adds	r1, r5, #0
    52b6:	3401      	adds	r4, #1
    52b8:	f7ff f862 	bl	4380 <system_gclk_chan_set_config>
    52bc:	2c25      	cmp	r4, #37	; 0x25
    52be:	d1f8      	bne.n	52b2 <system_clock_init+0x22>
    52c0:	4b29      	ldr	r3, [pc, #164]	; (5368 <system_clock_init+0xd8>)
    52c2:	4c27      	ldr	r4, [pc, #156]	; (5360 <system_clock_init+0xd0>)
    52c4:	681b      	ldr	r3, [r3, #0]
    52c6:	69a1      	ldr	r1, [r4, #24]
    52c8:	04db      	lsls	r3, r3, #19
    52ca:	0e5b      	lsrs	r3, r3, #25
    52cc:	041a      	lsls	r2, r3, #16
    52ce:	4b27      	ldr	r3, [pc, #156]	; (536c <system_clock_init+0xdc>)
    52d0:	2604      	movs	r6, #4
    52d2:	400b      	ands	r3, r1
    52d4:	4313      	orrs	r3, r2
    52d6:	2208      	movs	r2, #8
    52d8:	2740      	movs	r7, #64	; 0x40
    52da:	61a3      	str	r3, [r4, #24]
    52dc:	69a3      	ldr	r3, [r4, #24]
    52de:	2004      	movs	r0, #4
    52e0:	4333      	orrs	r3, r6
    52e2:	4313      	orrs	r3, r2
    52e4:	43bb      	bics	r3, r7
    52e6:	3278      	adds	r2, #120	; 0x78
    52e8:	4690      	mov	r8, r2
    52ea:	4313      	orrs	r3, r2
    52ec:	22e0      	movs	r2, #224	; 0xe0
    52ee:	00d2      	lsls	r2, r2, #3
    52f0:	4313      	orrs	r3, r2
    52f2:	4a1f      	ldr	r2, [pc, #124]	; (5370 <system_clock_init+0xe0>)
    52f4:	4013      	ands	r3, r2
    52f6:	61a3      	str	r3, [r4, #24]
    52f8:	f7ff ff7a 	bl	51f0 <system_clock_source_enable>
    52fc:	4642      	mov	r2, r8
    52fe:	6a23      	ldr	r3, [r4, #32]
    5300:	2006      	movs	r0, #6
    5302:	43bb      	bics	r3, r7
    5304:	4313      	orrs	r3, r2
    5306:	4a1b      	ldr	r2, [pc, #108]	; (5374 <system_clock_init+0xe4>)
    5308:	4013      	ands	r3, r2
    530a:	6223      	str	r3, [r4, #32]
    530c:	f7ff ff70 	bl	51f0 <system_clock_source_enable>
    5310:	2400      	movs	r4, #0
    5312:	f7fe ff41 	bl	4198 <system_gclk_init>
    5316:	2320      	movs	r3, #32
    5318:	1c29      	adds	r1, r5, #0
    531a:	2002      	movs	r0, #2
    531c:	606b      	str	r3, [r5, #4]
    531e:	706c      	strb	r4, [r5, #1]
    5320:	722c      	strb	r4, [r5, #8]
    5322:	726c      	strb	r4, [r5, #9]
    5324:	702e      	strb	r6, [r5, #0]
    5326:	f7fe ff49 	bl	41bc <system_gclk_gen_set_config>
    532a:	2002      	movs	r0, #2
    532c:	f7fe ff90 	bl	4250 <system_gclk_gen_enable>
    5330:	4b11      	ldr	r3, [pc, #68]	; (5378 <system_clock_init+0xe8>)
    5332:	1c29      	adds	r1, r5, #0
    5334:	721c      	strb	r4, [r3, #8]
    5336:	725c      	strb	r4, [r3, #9]
    5338:	729c      	strb	r4, [r3, #10]
    533a:	72dc      	strb	r4, [r3, #11]
    533c:	2301      	movs	r3, #1
    533e:	2000      	movs	r0, #0
    5340:	606b      	str	r3, [r5, #4]
    5342:	3305      	adds	r3, #5
    5344:	702b      	strb	r3, [r5, #0]
    5346:	706c      	strb	r4, [r5, #1]
    5348:	722c      	strb	r4, [r5, #8]
    534a:	726c      	strb	r4, [r5, #9]
    534c:	f7fe ff36 	bl	41bc <system_gclk_gen_set_config>
    5350:	2000      	movs	r0, #0
    5352:	f7fe ff7d 	bl	4250 <system_gclk_gen_enable>
    5356:	b004      	add	sp, #16
    5358:	bc04      	pop	{r2}
    535a:	4690      	mov	r8, r2
    535c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    535e:	46c0      	nop			; (mov r8, r8)
    5360:	40000800 	.word	0x40000800
    5364:	41004000 	.word	0x41004000
    5368:	00806024 	.word	0x00806024
    536c:	ff80ffff 	.word	0xff80ffff
    5370:	ffffefff 	.word	0xffffefff
    5374:	fffffcff 	.word	0xfffffcff
    5378:	40000400 	.word	0x40000400

0000537c <gpio_init>:
    537c:	b570      	push	{r4, r5, r6, lr}
    537e:	1c05      	adds	r5, r0, #0
    5380:	b082      	sub	sp, #8
    5382:	1c0c      	adds	r4, r1, #0
    5384:	1c4b      	adds	r3, r1, #1
    5386:	d028      	beq.n	53da <gpio_init+0x5e>
    5388:	b2c8      	uxtb	r0, r1
    538a:	2900      	cmp	r1, #0
    538c:	db2c      	blt.n	53e8 <gpio_init+0x6c>
    538e:	4b18      	ldr	r3, [pc, #96]	; (53f0 <gpio_init+0x74>)
    5390:	0946      	lsrs	r6, r0, #5
    5392:	469c      	mov	ip, r3
    5394:	01f6      	lsls	r6, r6, #7
    5396:	4466      	add	r6, ip
    5398:	702c      	strb	r4, [r5, #0]
    539a:	17e2      	asrs	r2, r4, #31
    539c:	0ed2      	lsrs	r2, r2, #27
    539e:	18a3      	adds	r3, r4, r2
    53a0:	241f      	movs	r4, #31
    53a2:	401c      	ands	r4, r3
    53a4:	1aa4      	subs	r4, r4, r2
    53a6:	2201      	movs	r2, #1
    53a8:	1c13      	adds	r3, r2, #0
    53aa:	b264      	sxtb	r4, r4
    53ac:	40a3      	lsls	r3, r4
    53ae:	606b      	str	r3, [r5, #4]
    53b0:	2300      	movs	r3, #0
    53b2:	a901      	add	r1, sp, #4
    53b4:	722b      	strb	r3, [r5, #8]
    53b6:	72ab      	strb	r3, [r5, #10]
    53b8:	726a      	strb	r2, [r5, #9]
    53ba:	700b      	strb	r3, [r1, #0]
    53bc:	708b      	strb	r3, [r1, #2]
    53be:	704a      	strb	r2, [r1, #1]
    53c0:	f000 fe6a 	bl	6098 <port_pin_set_config>
    53c4:	1c33      	adds	r3, r6, #0
    53c6:	3314      	adds	r3, #20
    53c8:	60eb      	str	r3, [r5, #12]
    53ca:	3304      	adds	r3, #4
    53cc:	612b      	str	r3, [r5, #16]
    53ce:	3610      	adds	r6, #16
    53d0:	3308      	adds	r3, #8
    53d2:	616b      	str	r3, [r5, #20]
    53d4:	61ae      	str	r6, [r5, #24]
    53d6:	b002      	add	sp, #8
    53d8:	bd70      	pop	{r4, r5, r6, pc}
    53da:	4806      	ldr	r0, [pc, #24]	; (53f4 <gpio_init+0x78>)
    53dc:	4906      	ldr	r1, [pc, #24]	; (53f8 <gpio_init+0x7c>)
    53de:	221f      	movs	r2, #31
    53e0:	f7ff fd2a 	bl	4e38 <mbed_assert_internal>
    53e4:	702c      	strb	r4, [r5, #0]
    53e6:	e7f6      	b.n	53d6 <gpio_init+0x5a>
    53e8:	702c      	strb	r4, [r5, #0]
    53ea:	2600      	movs	r6, #0
    53ec:	e7d5      	b.n	539a <gpio_init+0x1e>
    53ee:	46c0      	nop			; (mov r8, r8)
    53f0:	41004400 	.word	0x41004400
    53f4:	0000f4d4 	.word	0x0000f4d4
    53f8:	0000f4e8 	.word	0x0000f4e8

000053fc <gpio_mode>:
    53fc:	b530      	push	{r4, r5, lr}
    53fe:	1c04      	adds	r4, r0, #0
    5400:	7800      	ldrb	r0, [r0, #0]
    5402:	b083      	sub	sp, #12
    5404:	b243      	sxtb	r3, r0
    5406:	1c0d      	adds	r5, r1, #0
    5408:	3301      	adds	r3, #1
    540a:	d013      	beq.n	5434 <gpio_mode+0x38>
    540c:	7aa3      	ldrb	r3, [r4, #10]
    540e:	a901      	add	r1, sp, #4
    5410:	700b      	strb	r3, [r1, #0]
    5412:	7a23      	ldrb	r3, [r4, #8]
    5414:	7265      	strb	r5, [r4, #9]
    5416:	1e5a      	subs	r2, r3, #1
    5418:	4193      	sbcs	r3, r2
    541a:	708b      	strb	r3, [r1, #2]
    541c:	2d01      	cmp	r5, #1
    541e:	d003      	beq.n	5428 <gpio_mode+0x2c>
    5420:	2d00      	cmp	r5, #0
    5422:	d001      	beq.n	5428 <gpio_mode+0x2c>
    5424:	2d02      	cmp	r5, #2
    5426:	d100      	bne.n	542a <gpio_mode+0x2e>
    5428:	704d      	strb	r5, [r1, #1]
    542a:	b2c0      	uxtb	r0, r0
    542c:	f000 fe34 	bl	6098 <port_pin_set_config>
    5430:	b003      	add	sp, #12
    5432:	bd30      	pop	{r4, r5, pc}
    5434:	4803      	ldr	r0, [pc, #12]	; (5444 <gpio_mode+0x48>)
    5436:	4904      	ldr	r1, [pc, #16]	; (5448 <gpio_mode+0x4c>)
    5438:	2236      	movs	r2, #54	; 0x36
    543a:	f7ff fcfd 	bl	4e38 <mbed_assert_internal>
    543e:	7820      	ldrb	r0, [r4, #0]
    5440:	e7e4      	b.n	540c <gpio_mode+0x10>
    5442:	46c0      	nop			; (mov r8, r8)
    5444:	0000e988 	.word	0x0000e988
    5448:	0000f4e8 	.word	0x0000f4e8

0000544c <gpio_dir>:
    544c:	b530      	push	{r4, r5, lr}
    544e:	1c04      	adds	r4, r0, #0
    5450:	7800      	ldrb	r0, [r0, #0]
    5452:	b083      	sub	sp, #12
    5454:	b243      	sxtb	r3, r0
    5456:	1c0d      	adds	r5, r1, #0
    5458:	3301      	adds	r3, #1
    545a:	d013      	beq.n	5484 <gpio_dir+0x38>
    545c:	7a63      	ldrb	r3, [r4, #9]
    545e:	a901      	add	r1, sp, #4
    5460:	704b      	strb	r3, [r1, #1]
    5462:	7a23      	ldrb	r3, [r4, #8]
    5464:	72a5      	strb	r5, [r4, #10]
    5466:	1e5a      	subs	r2, r3, #1
    5468:	4193      	sbcs	r3, r2
    546a:	708b      	strb	r3, [r1, #2]
    546c:	2d01      	cmp	r5, #1
    546e:	d003      	beq.n	5478 <gpio_dir+0x2c>
    5470:	2d00      	cmp	r5, #0
    5472:	d001      	beq.n	5478 <gpio_dir+0x2c>
    5474:	2d02      	cmp	r5, #2
    5476:	d100      	bne.n	547a <gpio_dir+0x2e>
    5478:	700d      	strb	r5, [r1, #0]
    547a:	b2c0      	uxtb	r0, r0
    547c:	f000 fe0c 	bl	6098 <port_pin_set_config>
    5480:	b003      	add	sp, #12
    5482:	bd30      	pop	{r4, r5, pc}
    5484:	4803      	ldr	r0, [pc, #12]	; (5494 <gpio_dir+0x48>)
    5486:	4904      	ldr	r1, [pc, #16]	; (5498 <gpio_dir+0x4c>)
    5488:	224c      	movs	r2, #76	; 0x4c
    548a:	f7ff fcd5 	bl	4e38 <mbed_assert_internal>
    548e:	7820      	ldrb	r0, [r4, #0]
    5490:	e7e4      	b.n	545c <gpio_dir+0x10>
    5492:	46c0      	nop			; (mov r8, r8)
    5494:	0000e988 	.word	0x0000e988
    5498:	0000f4e8 	.word	0x0000f4e8

0000549c <pin_mode>:
    549c:	b5f0      	push	{r4, r5, r6, r7, lr}
    549e:	4645      	mov	r5, r8
    54a0:	4657      	mov	r7, sl
    54a2:	464e      	mov	r6, r9
    54a4:	b4e0      	push	{r5, r6, r7}
    54a6:	4688      	mov	r8, r1
    54a8:	b082      	sub	sp, #8
    54aa:	1c05      	adds	r5, r0, #0
    54ac:	1c43      	adds	r3, r0, #1
    54ae:	d062      	beq.n	5576 <pin_mode+0xda>
    54b0:	17c4      	asrs	r4, r0, #31
    54b2:	0ee2      	lsrs	r2, r4, #27
    54b4:	241f      	movs	r4, #31
    54b6:	2701      	movs	r7, #1
    54b8:	1883      	adds	r3, r0, r2
    54ba:	401c      	ands	r4, r3
    54bc:	1aa4      	subs	r4, r4, r2
    54be:	b264      	sxtb	r4, r4
    54c0:	40a7      	lsls	r7, r4
    54c2:	b2c6      	uxtb	r6, r0
    54c4:	46ba      	mov	sl, r7
    54c6:	0975      	lsrs	r5, r6, #5
    54c8:	09f3      	lsrs	r3, r6, #7
    54ca:	d13e      	bne.n	554a <pin_mode+0xae>
    54cc:	4b37      	ldr	r3, [pc, #220]	; (55ac <pin_mode+0x110>)
    54ce:	01ed      	lsls	r5, r5, #7
    54d0:	469c      	mov	ip, r3
    54d2:	4465      	add	r5, ip
    54d4:	2d00      	cmp	r5, #0
    54d6:	d062      	beq.n	559e <pin_mode+0x102>
    54d8:	1c28      	adds	r0, r5, #0
    54da:	231f      	movs	r3, #31
    54dc:	4033      	ands	r3, r6
    54de:	18c2      	adds	r2, r0, r3
    54e0:	3240      	adds	r2, #64	; 0x40
    54e2:	7812      	ldrb	r2, [r2, #0]
    54e4:	2101      	movs	r1, #1
    54e6:	4694      	mov	ip, r2
    54e8:	4667      	mov	r7, ip
    54ea:	2280      	movs	r2, #128	; 0x80
    54ec:	4239      	tst	r1, r7
    54ee:	d136      	bne.n	555e <pin_mode+0xc2>
    54f0:	a901      	add	r1, sp, #4
    54f2:	700a      	strb	r2, [r1, #0]
    54f4:	2202      	movs	r2, #2
    54f6:	192c      	adds	r4, r5, r4
    54f8:	3440      	adds	r4, #64	; 0x40
    54fa:	7823      	ldrb	r3, [r4, #0]
    54fc:	421a      	tst	r2, r3
    54fe:	d010      	beq.n	5522 <pin_mode+0x86>
    5500:	4650      	mov	r0, sl
    5502:	682b      	ldr	r3, [r5, #0]
    5504:	4003      	ands	r3, r0
    5506:	d134      	bne.n	5572 <pin_mode+0xd6>
    5508:	704b      	strb	r3, [r1, #1]
    550a:	7823      	ldrb	r3, [r4, #0]
    550c:	075b      	lsls	r3, r3, #29
    550e:	d50a      	bpl.n	5526 <pin_mode+0x8a>
    5510:	692b      	ldr	r3, [r5, #16]
    5512:	4642      	mov	r2, r8
    5514:	2300      	movs	r3, #0
    5516:	70cb      	strb	r3, [r1, #3]
    5518:	2a01      	cmp	r2, #1
    551a:	d109      	bne.n	5530 <pin_mode+0x94>
    551c:	4643      	mov	r3, r8
    551e:	708b      	strb	r3, [r1, #2]
    5520:	e00a      	b.n	5538 <pin_mode+0x9c>
    5522:	2301      	movs	r3, #1
    5524:	704b      	strb	r3, [r1, #1]
    5526:	2300      	movs	r3, #0
    5528:	4642      	mov	r2, r8
    552a:	70cb      	strb	r3, [r1, #3]
    552c:	2a01      	cmp	r2, #1
    552e:	d0f5      	beq.n	551c <pin_mode+0x80>
    5530:	4642      	mov	r2, r8
    5532:	2a02      	cmp	r2, #2
    5534:	d0f2      	beq.n	551c <pin_mode+0x80>
    5536:	708b      	strb	r3, [r1, #2]
    5538:	1c30      	adds	r0, r6, #0
    553a:	f7fe fe17 	bl	416c <system_pinmux_pin_set_config>
    553e:	b002      	add	sp, #8
    5540:	bc1c      	pop	{r2, r3, r4}
    5542:	4690      	mov	r8, r2
    5544:	4699      	mov	r9, r3
    5546:	46a2      	mov	sl, r4
    5548:	bdf0      	pop	{r4, r5, r6, r7, pc}
    554a:	4b19      	ldr	r3, [pc, #100]	; (55b0 <pin_mode+0x114>)
    554c:	4699      	mov	r9, r3
    554e:	4819      	ldr	r0, [pc, #100]	; (55b4 <pin_mode+0x118>)
    5550:	4649      	mov	r1, r9
    5552:	2223      	movs	r2, #35	; 0x23
    5554:	f7ff fc70 	bl	4e38 <mbed_assert_internal>
    5558:	2500      	movs	r5, #0
    555a:	2000      	movs	r0, #0
    555c:	e7bd      	b.n	54da <pin_mode+0x3e>
    555e:	085b      	lsrs	r3, r3, #1
    5560:	18c3      	adds	r3, r0, r3
    5562:	3330      	adds	r3, #48	; 0x30
    5564:	781a      	ldrb	r2, [r3, #0]
    5566:	b2d2      	uxtb	r2, r2
    5568:	4231      	tst	r1, r6
    556a:	d116      	bne.n	559a <pin_mode+0xfe>
    556c:	230f      	movs	r3, #15
    556e:	401a      	ands	r2, r3
    5570:	e7be      	b.n	54f0 <pin_mode+0x54>
    5572:	704a      	strb	r2, [r1, #1]
    5574:	e7d7      	b.n	5526 <pin_mode+0x8a>
    5576:	4b0e      	ldr	r3, [pc, #56]	; (55b0 <pin_mode+0x114>)
    5578:	4c0f      	ldr	r4, [pc, #60]	; (55b8 <pin_mode+0x11c>)
    557a:	4699      	mov	r9, r3
    557c:	1c19      	adds	r1, r3, #0
    557e:	1c20      	adds	r0, r4, #0
    5580:	225c      	movs	r2, #92	; 0x5c
    5582:	f7ff fc59 	bl	4e38 <mbed_assert_internal>
    5586:	1c20      	adds	r0, r4, #0
    5588:	4649      	mov	r1, r9
    558a:	221e      	movs	r2, #30
    558c:	f7ff fc54 	bl	4e38 <mbed_assert_internal>
    5590:	2300      	movs	r3, #0
    5592:	26ff      	movs	r6, #255	; 0xff
    5594:	469a      	mov	sl, r3
    5596:	1c2c      	adds	r4, r5, #0
    5598:	e7d9      	b.n	554e <pin_mode+0xb2>
    559a:	0912      	lsrs	r2, r2, #4
    559c:	e7a8      	b.n	54f0 <pin_mode+0x54>
    559e:	4805      	ldr	r0, [pc, #20]	; (55b4 <pin_mode+0x118>)
    55a0:	4903      	ldr	r1, [pc, #12]	; (55b0 <pin_mode+0x114>)
    55a2:	2223      	movs	r2, #35	; 0x23
    55a4:	f7ff fc48 	bl	4e38 <mbed_assert_internal>
    55a8:	2000      	movs	r0, #0
    55aa:	e796      	b.n	54da <pin_mode+0x3e>
    55ac:	41004400 	.word	0x41004400
    55b0:	0000f550 	.word	0x0000f550
    55b4:	0000f5b8 	.word	0x0000f5b8
    55b8:	0000f4d4 	.word	0x0000f4d4

000055bc <pinmap_find_peripheral_from_pad.part.0>:
    55bc:	b510      	push	{r4, lr}
    55be:	1c04      	adds	r4, r0, #0
    55c0:	2901      	cmp	r1, #1
    55c2:	d004      	beq.n	55ce <pinmap_find_peripheral_from_pad.part.0+0x12>
    55c4:	1c20      	adds	r0, r4, #0
    55c6:	4905      	ldr	r1, [pc, #20]	; (55dc <pinmap_find_peripheral_from_pad.part.0+0x20>)
    55c8:	f7ff fc6a 	bl	4ea0 <pinmap_find_peripheral>
    55cc:	bd10      	pop	{r4, pc}
    55ce:	4904      	ldr	r1, [pc, #16]	; (55e0 <pinmap_find_peripheral_from_pad.part.0+0x24>)
    55d0:	f7ff fc66 	bl	4ea0 <pinmap_find_peripheral>
    55d4:	1c43      	adds	r3, r0, #1
    55d6:	d1f9      	bne.n	55cc <pinmap_find_peripheral_from_pad.part.0+0x10>
    55d8:	e7f4      	b.n	55c4 <pinmap_find_peripheral_from_pad.part.0+0x8>
    55da:	46c0      	nop			; (mov r8, r8)
    55dc:	0000f2e8 	.word	0x0000f2e8
    55e0:	0000f264 	.word	0x0000f264

000055e4 <pinmap_merge_sercom>:
    55e4:	b538      	push	{r3, r4, r5, lr}
    55e6:	1c0d      	adds	r5, r1, #0
    55e8:	1c43      	adds	r3, r0, #1
    55ea:	d01b      	beq.n	5624 <pinmap_merge_sercom+0x40>
    55ec:	2100      	movs	r1, #0
    55ee:	f7ff ffe5 	bl	55bc <pinmap_find_peripheral_from_pad.part.0>
    55f2:	1c43      	adds	r3, r0, #1
    55f4:	d016      	beq.n	5624 <pinmap_merge_sercom+0x40>
    55f6:	240f      	movs	r4, #15
    55f8:	4004      	ands	r4, r0
    55fa:	1c28      	adds	r0, r5, #0
    55fc:	1c6b      	adds	r3, r5, #1
    55fe:	d008      	beq.n	5612 <pinmap_merge_sercom+0x2e>
    5600:	2100      	movs	r1, #0
    5602:	f7ff ffdb 	bl	55bc <pinmap_find_peripheral_from_pad.part.0>
    5606:	1c43      	adds	r3, r0, #1
    5608:	d003      	beq.n	5612 <pinmap_merge_sercom+0x2e>
    560a:	230f      	movs	r3, #15
    560c:	4018      	ands	r0, r3
    560e:	42a0      	cmp	r0, r4
    5610:	d006      	beq.n	5620 <pinmap_merge_sercom+0x3c>
    5612:	1c63      	adds	r3, r4, #1
    5614:	d003      	beq.n	561e <pinmap_merge_sercom+0x3a>
    5616:	1c43      	adds	r3, r0, #1
    5618:	d002      	beq.n	5620 <pinmap_merge_sercom+0x3c>
    561a:	2001      	movs	r0, #1
    561c:	4240      	negs	r0, r0
    561e:	bd38      	pop	{r3, r4, r5, pc}
    5620:	1c20      	adds	r0, r4, #0
    5622:	e7fc      	b.n	561e <pinmap_merge_sercom+0x3a>
    5624:	1c28      	adds	r0, r5, #0
    5626:	1c6b      	adds	r3, r5, #1
    5628:	d0f9      	beq.n	561e <pinmap_merge_sercom+0x3a>
    562a:	2100      	movs	r1, #0
    562c:	2401      	movs	r4, #1
    562e:	f7ff ffc5 	bl	55bc <pinmap_find_peripheral_from_pad.part.0>
    5632:	4264      	negs	r4, r4
    5634:	1c43      	adds	r3, r0, #1
    5636:	d1e8      	bne.n	560a <pinmap_merge_sercom+0x26>
    5638:	e7f1      	b.n	561e <pinmap_merge_sercom+0x3a>
    563a:	46c0      	nop			; (mov r8, r8)

0000563c <pinmap_find_sercom>:
    563c:	b5f0      	push	{r4, r5, r6, r7, lr}
    563e:	1c0f      	adds	r7, r1, #0
    5640:	b085      	sub	sp, #20
    5642:	1c16      	adds	r6, r2, #0
    5644:	1c1d      	adds	r5, r3, #0
    5646:	1c04      	adds	r4, r0, #0
    5648:	1c43      	adds	r3, r0, #1
    564a:	d003      	beq.n	5654 <pinmap_find_sercom+0x18>
    564c:	2100      	movs	r1, #0
    564e:	f7ff ffb5 	bl	55bc <pinmap_find_peripheral_from_pad.part.0>
    5652:	1c04      	adds	r4, r0, #0
    5654:	9400      	str	r4, [sp, #0]
    5656:	1c38      	adds	r0, r7, #0
    5658:	1c7b      	adds	r3, r7, #1
    565a:	d002      	beq.n	5662 <pinmap_find_sercom+0x26>
    565c:	2100      	movs	r1, #0
    565e:	f7ff ffad 	bl	55bc <pinmap_find_peripheral_from_pad.part.0>
    5662:	9001      	str	r0, [sp, #4]
    5664:	1c30      	adds	r0, r6, #0
    5666:	1c73      	adds	r3, r6, #1
    5668:	d002      	beq.n	5670 <pinmap_find_sercom+0x34>
    566a:	2100      	movs	r1, #0
    566c:	f7ff ffa6 	bl	55bc <pinmap_find_peripheral_from_pad.part.0>
    5670:	9002      	str	r0, [sp, #8]
    5672:	1c28      	adds	r0, r5, #0
    5674:	1c6b      	adds	r3, r5, #1
    5676:	d002      	beq.n	567e <pinmap_find_sercom+0x42>
    5678:	2100      	movs	r1, #0
    567a:	f7ff ff9f 	bl	55bc <pinmap_find_peripheral_from_pad.part.0>
    567e:	9003      	str	r0, [sp, #12]
    5680:	2001      	movs	r0, #1
    5682:	2300      	movs	r3, #0
    5684:	4240      	negs	r0, r0
    5686:	220f      	movs	r2, #15
    5688:	1c61      	adds	r1, r4, #1
    568a:	d004      	beq.n	5696 <pinmap_find_sercom+0x5a>
    568c:	1c41      	adds	r1, r0, #1
    568e:	d00b      	beq.n	56a8 <pinmap_find_sercom+0x6c>
    5690:	4014      	ands	r4, r2
    5692:	4284      	cmp	r4, r0
    5694:	d10f      	bne.n	56b6 <pinmap_find_sercom+0x7a>
    5696:	3304      	adds	r3, #4
    5698:	2b10      	cmp	r3, #16
    569a:	d00a      	beq.n	56b2 <pinmap_find_sercom+0x76>
    569c:	4669      	mov	r1, sp
    569e:	58cc      	ldr	r4, [r1, r3]
    56a0:	1c61      	adds	r1, r4, #1
    56a2:	d0f8      	beq.n	5696 <pinmap_find_sercom+0x5a>
    56a4:	1c41      	adds	r1, r0, #1
    56a6:	d1f3      	bne.n	5690 <pinmap_find_sercom+0x54>
    56a8:	1c20      	adds	r0, r4, #0
    56aa:	3304      	adds	r3, #4
    56ac:	4010      	ands	r0, r2
    56ae:	2b10      	cmp	r3, #16
    56b0:	d1f4      	bne.n	569c <pinmap_find_sercom+0x60>
    56b2:	b005      	add	sp, #20
    56b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    56b6:	2001      	movs	r0, #1
    56b8:	4240      	negs	r0, r0
    56ba:	e7fa      	b.n	56b2 <pinmap_find_sercom+0x76>

000056bc <pinmap_function_sercom>:
    56bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    56be:	1c43      	adds	r3, r0, #1
    56c0:	d004      	beq.n	56cc <pinmap_function_sercom+0x10>
    56c2:	260f      	movs	r6, #15
    56c4:	4031      	ands	r1, r6
    56c6:	1e0d      	subs	r5, r1, #0
    56c8:	2d05      	cmp	r5, #5
    56ca:	d902      	bls.n	56d2 <pinmap_function_sercom+0x16>
    56cc:	2001      	movs	r0, #1
    56ce:	4240      	negs	r0, r0
    56d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    56d2:	4f0a      	ldr	r7, [pc, #40]	; (56fc <pinmap_function_sercom+0x40>)
    56d4:	1c04      	adds	r4, r0, #0
    56d6:	1c39      	adds	r1, r7, #0
    56d8:	f7ff fbee 	bl	4eb8 <pinmap_peripheral>
    56dc:	4030      	ands	r0, r6
    56de:	42a8      	cmp	r0, r5
    56e0:	d007      	beq.n	56f2 <pinmap_function_sercom+0x36>
    56e2:	4f07      	ldr	r7, [pc, #28]	; (5700 <pinmap_function_sercom+0x44>)
    56e4:	1c20      	adds	r0, r4, #0
    56e6:	1c39      	adds	r1, r7, #0
    56e8:	f7ff fbe6 	bl	4eb8 <pinmap_peripheral>
    56ec:	4006      	ands	r6, r0
    56ee:	42ae      	cmp	r6, r5
    56f0:	d1ec      	bne.n	56cc <pinmap_function_sercom+0x10>
    56f2:	1c20      	adds	r0, r4, #0
    56f4:	1c39      	adds	r1, r7, #0
    56f6:	f7ff fbf7 	bl	4ee8 <pinmap_function>
    56fa:	e7e9      	b.n	56d0 <pinmap_function_sercom+0x14>
    56fc:	0000f2e8 	.word	0x0000f2e8
    5700:	0000f264 	.word	0x0000f264

00005704 <pinmap_pad_sercom>:
    5704:	b570      	push	{r4, r5, r6, lr}
    5706:	1c43      	adds	r3, r0, #1
    5708:	d004      	beq.n	5714 <pinmap_pad_sercom+0x10>
    570a:	240f      	movs	r4, #15
    570c:	4021      	ands	r1, r4
    570e:	1e0d      	subs	r5, r1, #0
    5710:	2d05      	cmp	r5, #5
    5712:	d902      	bls.n	571a <pinmap_pad_sercom+0x16>
    5714:	2001      	movs	r0, #1
    5716:	4240      	negs	r0, r0
    5718:	bd70      	pop	{r4, r5, r6, pc}
    571a:	4909      	ldr	r1, [pc, #36]	; (5740 <pinmap_pad_sercom+0x3c>)
    571c:	1c06      	adds	r6, r0, #0
    571e:	f7ff fbcb 	bl	4eb8 <pinmap_peripheral>
    5722:	1c23      	adds	r3, r4, #0
    5724:	4003      	ands	r3, r0
    5726:	42ab      	cmp	r3, r5
    5728:	d007      	beq.n	573a <pinmap_pad_sercom+0x36>
    572a:	1c30      	adds	r0, r6, #0
    572c:	4905      	ldr	r1, [pc, #20]	; (5744 <pinmap_pad_sercom+0x40>)
    572e:	f7ff fbc3 	bl	4eb8 <pinmap_peripheral>
    5732:	1c23      	adds	r3, r4, #0
    5734:	4003      	ands	r3, r0
    5736:	42ab      	cmp	r3, r5
    5738:	d1ec      	bne.n	5714 <pinmap_pad_sercom+0x10>
    573a:	0900      	lsrs	r0, r0, #4
    573c:	4020      	ands	r0, r4
    573e:	e7eb      	b.n	5718 <pinmap_pad_sercom+0x14>
    5740:	0000f2e8 	.word	0x0000f2e8
    5744:	0000f264 	.word	0x0000f264

00005748 <pinmap_peripheral_sercom>:
    5748:	b570      	push	{r4, r5, r6, lr}
    574a:	b086      	sub	sp, #24
    574c:	466a      	mov	r2, sp
    574e:	4b08      	ldr	r3, [pc, #32]	; (5770 <pinmap_peripheral_sercom+0x28>)
    5750:	4668      	mov	r0, sp
    5752:	cb70      	ldmia	r3!, {r4, r5, r6}
    5754:	c270      	stmia	r2!, {r4, r5, r6}
    5756:	cb70      	ldmia	r3!, {r4, r5, r6}
    5758:	c270      	stmia	r2!, {r4, r5, r6}
    575a:	230f      	movs	r3, #15
    575c:	4019      	ands	r1, r3
    575e:	2905      	cmp	r1, #5
    5760:	d903      	bls.n	576a <pinmap_peripheral_sercom+0x22>
    5762:	2001      	movs	r0, #1
    5764:	4240      	negs	r0, r0
    5766:	b006      	add	sp, #24
    5768:	bd70      	pop	{r4, r5, r6, pc}
    576a:	0089      	lsls	r1, r1, #2
    576c:	5808      	ldr	r0, [r1, r0]
    576e:	e7fa      	b.n	5766 <pinmap_peripheral_sercom+0x1e>
    5770:	0000f5c0 	.word	0x0000f5c0

00005774 <us_ticker_irq_handler_internal>:
    5774:	2203      	movs	r2, #3
    5776:	b508      	push	{r3, lr}
    5778:	4b02      	ldr	r3, [pc, #8]	; (5784 <us_ticker_irq_handler_internal+0x10>)
    577a:	681b      	ldr	r3, [r3, #0]
    577c:	739a      	strb	r2, [r3, #14]
    577e:	f000 fc83 	bl	6088 <us_ticker_irq_handler>
    5782:	bd08      	pop	{r3, pc}
    5784:	200047a0 	.word	0x200047a0

00005788 <us_ticker_init.part.5>:
    5788:	b530      	push	{r4, r5, lr}
    578a:	2501      	movs	r5, #1
    578c:	4b35      	ldr	r3, [pc, #212]	; (5864 <us_ticker_init.part.5+0xdc>)
    578e:	4c36      	ldr	r4, [pc, #216]	; (5868 <us_ticker_init.part.5+0xe0>)
    5790:	601d      	str	r5, [r3, #0]
    5792:	7823      	ldrb	r3, [r4, #0]
    5794:	b08f      	sub	sp, #60	; 0x3c
    5796:	2b00      	cmp	r3, #0
    5798:	d05c      	beq.n	5854 <us_ticker_init.part.5+0xcc>
    579a:	2300      	movs	r3, #0
    579c:	2200      	movs	r2, #0
    579e:	ac01      	add	r4, sp, #4
    57a0:	7422      	strb	r2, [r4, #16]
    57a2:	6163      	str	r3, [r4, #20]
    57a4:	61a3      	str	r3, [r4, #24]
    57a6:	7722      	strb	r2, [r4, #28]
    57a8:	6223      	str	r3, [r4, #32]
    57aa:	6263      	str	r3, [r4, #36]	; 0x24
    57ac:	2000      	movs	r0, #0
    57ae:	7023      	strb	r3, [r4, #0]
    57b0:	70a3      	strb	r3, [r4, #2]
    57b2:	80a3      	strh	r3, [r4, #4]
    57b4:	71a2      	strb	r2, [r4, #6]
    57b6:	8123      	strh	r3, [r4, #8]
    57b8:	7062      	strb	r2, [r4, #1]
    57ba:	72a2      	strb	r2, [r4, #10]
    57bc:	72e2      	strb	r2, [r4, #11]
    57be:	7322      	strb	r2, [r4, #12]
    57c0:	73a2      	strb	r2, [r4, #14]
    57c2:	7362      	strb	r2, [r4, #13]
    57c4:	8523      	strh	r3, [r4, #40]	; 0x28
    57c6:	8563      	strh	r3, [r4, #42]	; 0x2a
    57c8:	85a3      	strh	r3, [r4, #44]	; 0x2c
    57ca:	f7fe fd5f 	bl	428c <system_gclk_gen_get_hz>
    57ce:	4927      	ldr	r1, [pc, #156]	; (586c <us_ticker_init.part.5+0xe4>)
    57d0:	f000 feb0 	bl	6534 <__aeabi_uidiv>
    57d4:	2800      	cmp	r0, #0
    57d6:	d032      	beq.n	583e <us_ticker_init.part.5+0xb6>
    57d8:	2300      	movs	r3, #0
    57da:	2801      	cmp	r0, #1
    57dc:	d007      	beq.n	57ee <us_ticker_init.part.5+0x66>
    57de:	0840      	lsrs	r0, r0, #1
    57e0:	3301      	adds	r3, #1
    57e2:	2801      	cmp	r0, #1
    57e4:	d022      	beq.n	582c <us_ticker_init.part.5+0xa4>
    57e6:	2b0b      	cmp	r3, #11
    57e8:	d1f9      	bne.n	57de <us_ticker_init.part.5+0x56>
    57ea:	23e0      	movs	r3, #224	; 0xe0
    57ec:	00db      	lsls	r3, r3, #3
    57ee:	80a3      	strh	r3, [r4, #4]
    57f0:	2308      	movs	r3, #8
    57f2:	70a3      	strb	r3, [r4, #2]
    57f4:	3b07      	subs	r3, #7
    57f6:	7063      	strb	r3, [r4, #1]
    57f8:	2300      	movs	r3, #0
    57fa:	4d1d      	ldr	r5, [pc, #116]	; (5870 <us_ticker_init.part.5+0xe8>)
    57fc:	62a3      	str	r3, [r4, #40]	; 0x28
    57fe:	491d      	ldr	r1, [pc, #116]	; (5874 <us_ticker_init.part.5+0xec>)
    5800:	3b01      	subs	r3, #1
    5802:	1c22      	adds	r2, r4, #0
    5804:	1c28      	adds	r0, r5, #0
    5806:	62e3      	str	r3, [r4, #44]	; 0x2c
    5808:	f000 fcd2 	bl	61b0 <tc_init>
    580c:	491a      	ldr	r1, [pc, #104]	; (5878 <us_ticker_init.part.5+0xf0>)
    580e:	2202      	movs	r2, #2
    5810:	1c28      	adds	r0, r5, #0
    5812:	f000 fc51 	bl	60b8 <tc_register_callback>
    5816:	217f      	movs	r1, #127	; 0x7f
    5818:	682a      	ldr	r2, [r5, #0]
    581a:	7bd3      	ldrb	r3, [r2, #15]
    581c:	438b      	bics	r3, r1
    581e:	d1fc      	bne.n	581a <us_ticker_init.part.5+0x92>
    5820:	8811      	ldrh	r1, [r2, #0]
    5822:	3302      	adds	r3, #2
    5824:	430b      	orrs	r3, r1
    5826:	8013      	strh	r3, [r2, #0]
    5828:	b00f      	add	sp, #60	; 0x3c
    582a:	bd30      	pop	{r4, r5, pc}
    582c:	2b08      	cmp	r3, #8
    582e:	d8dc      	bhi.n	57ea <us_ticker_init.part.5+0x62>
    5830:	2b06      	cmp	r3, #6
    5832:	d813      	bhi.n	585c <us_ticker_init.part.5+0xd4>
    5834:	2b04      	cmp	r3, #4
    5836:	d908      	bls.n	584a <us_ticker_init.part.5+0xc2>
    5838:	23a0      	movs	r3, #160	; 0xa0
    583a:	00db      	lsls	r3, r3, #3
    583c:	e7d7      	b.n	57ee <us_ticker_init.part.5+0x66>
    583e:	480f      	ldr	r0, [pc, #60]	; (587c <us_ticker_init.part.5+0xf4>)
    5840:	490f      	ldr	r1, [pc, #60]	; (5880 <us_ticker_init.part.5+0xf8>)
    5842:	2257      	movs	r2, #87	; 0x57
    5844:	f7ff faf8 	bl	4e38 <mbed_assert_internal>
    5848:	2300      	movs	r3, #0
    584a:	22e0      	movs	r2, #224	; 0xe0
    584c:	021b      	lsls	r3, r3, #8
    584e:	00d2      	lsls	r2, r2, #3
    5850:	4013      	ands	r3, r2
    5852:	e7cc      	b.n	57ee <us_ticker_init.part.5+0x66>
    5854:	f7fe fdb6 	bl	43c4 <system_init>
    5858:	7025      	strb	r5, [r4, #0]
    585a:	e79e      	b.n	579a <us_ticker_init.part.5+0x12>
    585c:	23c0      	movs	r3, #192	; 0xc0
    585e:	00db      	lsls	r3, r3, #3
    5860:	e7c5      	b.n	57ee <us_ticker_init.part.5+0x66>
    5862:	46c0      	nop			; (mov r8, r8)
    5864:	200046fc 	.word	0x200046fc
    5868:	200045b0 	.word	0x200045b0
    586c:	000f4240 	.word	0x000f4240
    5870:	200047a0 	.word	0x200047a0
    5874:	42003000 	.word	0x42003000
    5878:	00005775 	.word	0x00005775
    587c:	0000f5d8 	.word	0x0000f5d8
    5880:	0000f5ec 	.word	0x0000f5ec

00005884 <us_ticker_init>:
    5884:	b508      	push	{r3, lr}
    5886:	4b03      	ldr	r3, [pc, #12]	; (5894 <us_ticker_init+0x10>)
    5888:	681b      	ldr	r3, [r3, #0]
    588a:	2b00      	cmp	r3, #0
    588c:	d101      	bne.n	5892 <us_ticker_init+0xe>
    588e:	f7ff ff7b 	bl	5788 <us_ticker_init.part.5>
    5892:	bd08      	pop	{r3, pc}
    5894:	200046fc 	.word	0x200046fc

00005898 <us_ticker_read>:
    5898:	b508      	push	{r3, lr}
    589a:	4b05      	ldr	r3, [pc, #20]	; (58b0 <us_ticker_read+0x18>)
    589c:	681b      	ldr	r3, [r3, #0]
    589e:	2b00      	cmp	r3, #0
    58a0:	d101      	bne.n	58a6 <us_ticker_read+0xe>
    58a2:	f7ff ff71 	bl	5788 <us_ticker_init.part.5>
    58a6:	4803      	ldr	r0, [pc, #12]	; (58b4 <us_ticker_read+0x1c>)
    58a8:	f000 fdd4 	bl	6454 <tc_get_count_value>
    58ac:	bd08      	pop	{r3, pc}
    58ae:	46c0      	nop			; (mov r8, r8)
    58b0:	200046fc 	.word	0x200046fc
    58b4:	200047a0 	.word	0x200047a0

000058b8 <us_ticker_set_interrupt>:
    58b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    58ba:	1c06      	adds	r6, r0, #0
    58bc:	f7ff ffec 	bl	5898 <us_ticker_read>
    58c0:	1a30      	subs	r0, r6, r0
    58c2:	d421      	bmi.n	5908 <us_ticker_set_interrupt+0x50>
    58c4:	2780      	movs	r7, #128	; 0x80
    58c6:	2380      	movs	r3, #128	; 0x80
    58c8:	4d11      	ldr	r5, [pc, #68]	; (5910 <us_ticker_set_interrupt+0x58>)
    58ca:	033f      	lsls	r7, r7, #12
    58cc:	50ef      	str	r7, [r5, r3]
    58ce:	4911      	ldr	r1, [pc, #68]	; (5914 <us_ticker_set_interrupt+0x5c>)
    58d0:	2013      	movs	r0, #19
    58d2:	f7fe f945 	bl	3b60 <NVIC_SetVector>
    58d6:	4c10      	ldr	r4, [pc, #64]	; (5918 <us_ticker_set_interrupt+0x60>)
    58d8:	6820      	ldr	r0, [r4, #0]
    58da:	f000 fc49 	bl	6170 <_tc_get_inst_index>
    58de:	221f      	movs	r2, #31
    58e0:	4b0e      	ldr	r3, [pc, #56]	; (591c <us_ticker_set_interrupt+0x64>)
    58e2:	2100      	movs	r1, #0
    58e4:	5c1b      	ldrb	r3, [r3, r0]
    58e6:	1c20      	adds	r0, r4, #0
    58e8:	4013      	ands	r3, r2
    58ea:	3a1e      	subs	r2, #30
    58ec:	409a      	lsls	r2, r3
    58ee:	2310      	movs	r3, #16
    58f0:	602a      	str	r2, [r5, #0]
    58f2:	7e62      	ldrb	r2, [r4, #25]
    58f4:	4313      	orrs	r3, r2
    58f6:	7663      	strb	r3, [r4, #25]
    58f8:	2310      	movs	r3, #16
    58fa:	6822      	ldr	r2, [r4, #0]
    58fc:	7353      	strb	r3, [r2, #13]
    58fe:	1c32      	adds	r2, r6, #0
    5900:	f000 fdbe 	bl	6480 <tc_set_compare_value>
    5904:	602f      	str	r7, [r5, #0]
    5906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5908:	f000 fbbe 	bl	6088 <us_ticker_irq_handler>
    590c:	e7fb      	b.n	5906 <us_ticker_set_interrupt+0x4e>
    590e:	46c0      	nop			; (mov r8, r8)
    5910:	e000e100 	.word	0xe000e100
    5914:	00006159 	.word	0x00006159
    5918:	200047a0 	.word	0x200047a0
    591c:	0000f65c 	.word	0x0000f65c

00005920 <us_ticker_disable_interrupt>:
    5920:	2110      	movs	r1, #16
    5922:	4b06      	ldr	r3, [pc, #24]	; (593c <us_ticker_disable_interrupt+0x1c>)
    5924:	681a      	ldr	r2, [r3, #0]
    5926:	7311      	strb	r1, [r2, #12]
    5928:	7e5a      	ldrb	r2, [r3, #25]
    592a:	438a      	bics	r2, r1
    592c:	2180      	movs	r1, #128	; 0x80
    592e:	765a      	strb	r2, [r3, #25]
    5930:	2380      	movs	r3, #128	; 0x80
    5932:	4a03      	ldr	r2, [pc, #12]	; (5940 <us_ticker_disable_interrupt+0x20>)
    5934:	0309      	lsls	r1, r1, #12
    5936:	50d1      	str	r1, [r2, r3]
    5938:	4770      	bx	lr
    593a:	46c0      	nop			; (mov r8, r8)
    593c:	200047a0 	.word	0x200047a0
    5940:	e000e100 	.word	0xe000e100

00005944 <us_ticker_clear_interrupt>:
    5944:	2210      	movs	r2, #16
    5946:	4b05      	ldr	r3, [pc, #20]	; (595c <us_ticker_clear_interrupt+0x18>)
    5948:	2180      	movs	r1, #128	; 0x80
    594a:	681b      	ldr	r3, [r3, #0]
    594c:	0309      	lsls	r1, r1, #12
    594e:	739a      	strb	r2, [r3, #14]
    5950:	731a      	strb	r2, [r3, #12]
    5952:	23c0      	movs	r3, #192	; 0xc0
    5954:	4a02      	ldr	r2, [pc, #8]	; (5960 <us_ticker_clear_interrupt+0x1c>)
    5956:	005b      	lsls	r3, r3, #1
    5958:	50d1      	str	r1, [r2, r3]
    595a:	4770      	bx	lr
    595c:	200047a0 	.word	0x200047a0
    5960:	e000e100 	.word	0xe000e100

00005964 <spi_find_mux_settings>:
    5964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5966:	1e04      	subs	r4, r0, #0
    5968:	d03e      	beq.n	59e8 <spi_find_mux_settings+0x84>
    596a:	6820      	ldr	r0, [r4, #0]
    596c:	f7ff fbe4 	bl	5138 <_sercom_get_sercom_inst_index>
    5970:	7923      	ldrb	r3, [r4, #4]
    5972:	1c07      	adds	r7, r0, #0
    5974:	2b01      	cmp	r3, #1
    5976:	d02a      	beq.n	59ce <spi_find_mux_settings+0x6a>
    5978:	2501      	movs	r5, #1
    597a:	2300      	movs	r3, #0
    597c:	2005      	movs	r0, #5
    597e:	18e3      	adds	r3, r4, r3
    5980:	5618      	ldrsb	r0, [r3, r0]
    5982:	1c43      	adds	r3, r0, #1
    5984:	d00f      	beq.n	59a6 <spi_find_mux_settings+0x42>
    5986:	1c39      	adds	r1, r7, #0
    5988:	f7ff febc 	bl	5704 <pinmap_pad_sercom>
    598c:	1c43      	adds	r3, r0, #1
    598e:	d00a      	beq.n	59a6 <spi_find_mux_settings+0x42>
    5990:	26c0      	movs	r6, #192	; 0xc0
    5992:	0500      	lsls	r0, r0, #20
    5994:	03b6      	lsls	r6, r6, #14
    5996:	4006      	ands	r6, r0
    5998:	2005      	movs	r0, #5
    599a:	1965      	adds	r5, r4, r5
    599c:	5628      	ldrsb	r0, [r5, r0]
    599e:	1c43      	adds	r3, r0, #1
    59a0:	d107      	bne.n	59b2 <spi_find_mux_settings+0x4e>
    59a2:	1c30      	adds	r0, r6, #0
    59a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    59a6:	2005      	movs	r0, #5
    59a8:	1965      	adds	r5, r4, r5
    59aa:	5628      	ldrsb	r0, [r5, r0]
    59ac:	2600      	movs	r6, #0
    59ae:	1c43      	adds	r3, r0, #1
    59b0:	d0f7      	beq.n	59a2 <spi_find_mux_settings+0x3e>
    59b2:	1c39      	adds	r1, r7, #0
    59b4:	f7ff fea6 	bl	5704 <pinmap_pad_sercom>
    59b8:	1c43      	adds	r3, r0, #1
    59ba:	d0f2      	beq.n	59a2 <spi_find_mux_settings+0x3e>
    59bc:	2800      	cmp	r0, #0
    59be:	d009      	beq.n	59d4 <spi_find_mux_settings+0x70>
    59c0:	23c0      	movs	r3, #192	; 0xc0
    59c2:	3801      	subs	r0, #1
    59c4:	0400      	lsls	r0, r0, #16
    59c6:	029b      	lsls	r3, r3, #10
    59c8:	4018      	ands	r0, r3
    59ca:	4306      	orrs	r6, r0
    59cc:	e7e9      	b.n	59a2 <spi_find_mux_settings+0x3e>
    59ce:	2500      	movs	r5, #0
    59d0:	2301      	movs	r3, #1
    59d2:	e7d3      	b.n	597c <spi_find_mux_settings+0x18>
    59d4:	2007      	movs	r0, #7
    59d6:	1c39      	adds	r1, r7, #0
    59d8:	5620      	ldrsb	r0, [r4, r0]
    59da:	f7ff fe93 	bl	5704 <pinmap_pad_sercom>
    59de:	2803      	cmp	r0, #3
    59e0:	d008      	beq.n	59f4 <spi_find_mux_settings+0x90>
    59e2:	2000      	movs	r0, #0
    59e4:	4306      	orrs	r6, r0
    59e6:	e7dc      	b.n	59a2 <spi_find_mux_settings+0x3e>
    59e8:	4804      	ldr	r0, [pc, #16]	; (59fc <spi_find_mux_settings+0x98>)
    59ea:	4905      	ldr	r1, [pc, #20]	; (5a00 <spi_find_mux_settings+0x9c>)
    59ec:	22b1      	movs	r2, #177	; 0xb1
    59ee:	f7ff fa23 	bl	4e38 <mbed_assert_internal>
    59f2:	e7ba      	b.n	596a <spi_find_mux_settings+0x6>
    59f4:	20c0      	movs	r0, #192	; 0xc0
    59f6:	0280      	lsls	r0, r0, #10
    59f8:	4306      	orrs	r6, r0
    59fa:	e7d2      	b.n	59a2 <spi_find_mux_settings+0x3e>
    59fc:	0000ede0 	.word	0x0000ede0
    5a00:	0000f660 	.word	0x0000f660

00005a04 <spi_init>:
    5a04:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a06:	4644      	mov	r4, r8
    5a08:	465f      	mov	r7, fp
    5a0a:	464d      	mov	r5, r9
    5a0c:	4656      	mov	r6, sl
    5a0e:	b4f0      	push	{r4, r5, r6, r7}
    5a10:	b085      	sub	sp, #20
    5a12:	4698      	mov	r8, r3
    5a14:	ab0e      	add	r3, sp, #56	; 0x38
    5a16:	781b      	ldrb	r3, [r3, #0]
    5a18:	1c04      	adds	r4, r0, #0
    5a1a:	b25b      	sxtb	r3, r3
    5a1c:	1c0d      	adds	r5, r1, #0
    5a1e:	4693      	mov	fp, r2
    5a20:	9300      	str	r3, [sp, #0]
    5a22:	2800      	cmp	r0, #0
    5a24:	d100      	bne.n	5a28 <spi_init+0x24>
    5a26:	e0c8      	b.n	5bba <spi_init+0x1b6>
    5a28:	4643      	mov	r3, r8
    5a2a:	3301      	adds	r3, #1
    5a2c:	d100      	bne.n	5a30 <spi_init+0x2c>
    5a2e:	e0b8      	b.n	5ba2 <spi_init+0x19e>
    5a30:	2300      	movs	r3, #0
    5a32:	4e6a      	ldr	r6, [pc, #424]	; (5bdc <spi_init+0x1d8>)
    5a34:	aa02      	add	r2, sp, #8
    5a36:	8053      	strh	r3, [r2, #2]
    5a38:	7833      	ldrb	r3, [r6, #0]
    5a3a:	2b00      	cmp	r3, #0
    5a3c:	d032      	beq.n	5aa4 <spi_init+0xa0>
    5a3e:	4659      	mov	r1, fp
    5a40:	4642      	mov	r2, r8
    5a42:	9b00      	ldr	r3, [sp, #0]
    5a44:	1c28      	adds	r0, r5, #0
    5a46:	f7ff fdf9 	bl	563c <pinmap_find_sercom>
    5a4a:	4681      	mov	r9, r0
    5a4c:	2001      	movs	r0, #1
    5a4e:	4649      	mov	r1, r9
    5a50:	4240      	negs	r0, r0
    5a52:	f7ff fe79 	bl	5748 <pinmap_peripheral_sercom>
    5a56:	6020      	str	r0, [r4, #0]
    5a58:	2c00      	cmp	r4, #0
    5a5a:	d100      	bne.n	5a5e <spi_init+0x5a>
    5a5c:	e0a7      	b.n	5bae <spi_init+0x1aa>
    5a5e:	4f60      	ldr	r7, [pc, #384]	; (5be0 <spi_init+0x1dc>)
    5a60:	4e60      	ldr	r6, [pc, #384]	; (5be4 <spi_init+0x1e0>)
    5a62:	e003      	b.n	5a6c <spi_init+0x68>
    5a64:	6822      	ldr	r2, [r4, #0]
    5a66:	8b53      	ldrh	r3, [r2, #26]
    5a68:	0bdb      	lsrs	r3, r3, #15
    5a6a:	d00a      	beq.n	5a82 <spi_init+0x7e>
    5a6c:	2c00      	cmp	r4, #0
    5a6e:	d1f9      	bne.n	5a64 <spi_init+0x60>
    5a70:	2244      	movs	r2, #68	; 0x44
    5a72:	1c38      	adds	r0, r7, #0
    5a74:	1c31      	adds	r1, r6, #0
    5a76:	f7ff f9df 	bl	4e38 <mbed_assert_internal>
    5a7a:	6822      	ldr	r2, [r4, #0]
    5a7c:	8b53      	ldrh	r3, [r2, #26]
    5a7e:	0bdb      	lsrs	r3, r3, #15
    5a80:	d1f4      	bne.n	5a6c <spi_init+0x68>
    5a82:	2102      	movs	r1, #2
    5a84:	6813      	ldr	r3, [r2, #0]
    5a86:	438b      	bics	r3, r1
    5a88:	6013      	str	r3, [r2, #0]
    5a8a:	6823      	ldr	r3, [r4, #0]
    5a8c:	681e      	ldr	r6, [r3, #0]
    5a8e:	2301      	movs	r3, #1
    5a90:	469a      	mov	sl, r3
    5a92:	401e      	ands	r6, r3
    5a94:	d00b      	beq.n	5aae <spi_init+0xaa>
    5a96:	b005      	add	sp, #20
    5a98:	bc3c      	pop	{r2, r3, r4, r5}
    5a9a:	4690      	mov	r8, r2
    5a9c:	4699      	mov	r9, r3
    5a9e:	46a2      	mov	sl, r4
    5aa0:	46ab      	mov	fp, r5
    5aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5aa4:	f7fe fc8e 	bl	43c4 <system_init>
    5aa8:	2301      	movs	r3, #1
    5aaa:	7033      	strb	r3, [r6, #0]
    5aac:	e7c7      	b.n	5a3e <spi_init+0x3a>
    5aae:	464b      	mov	r3, r9
    5ab0:	4650      	mov	r0, sl
    5ab2:	3302      	adds	r3, #2
    5ab4:	4098      	lsls	r0, r3
    5ab6:	1c03      	adds	r3, r0, #0
    5ab8:	494b      	ldr	r1, [pc, #300]	; (5be8 <spi_init+0x1e4>)
    5aba:	6a0a      	ldr	r2, [r1, #32]
    5abc:	4313      	orrs	r3, r2
    5abe:	620b      	str	r3, [r1, #32]
    5ac0:	ab02      	add	r3, sp, #8
    5ac2:	701e      	strb	r6, [r3, #0]
    5ac4:	464b      	mov	r3, r9
    5ac6:	3314      	adds	r3, #20
    5ac8:	b2db      	uxtb	r3, r3
    5aca:	1c1f      	adds	r7, r3, #0
    5acc:	1c18      	adds	r0, r3, #0
    5ace:	a902      	add	r1, sp, #8
    5ad0:	9301      	str	r3, [sp, #4]
    5ad2:	f7fe fc55 	bl	4380 <system_gclk_chan_set_config>
    5ad6:	1c38      	adds	r0, r7, #0
    5ad8:	f7fe fc14 	bl	4304 <system_gclk_chan_enable>
    5adc:	2100      	movs	r1, #0
    5ade:	2000      	movs	r0, #0
    5ae0:	f7ff fb0a 	bl	50f8 <sercom_set_gclk_generator>
    5ae4:	230c      	movs	r3, #12
    5ae6:	6822      	ldr	r2, [r4, #0]
    5ae8:	af03      	add	r7, sp, #12
    5aea:	6811      	ldr	r1, [r2, #0]
    5aec:	430b      	orrs	r3, r1
    5aee:	6013      	str	r3, [r2, #0]
    5af0:	4653      	mov	r3, sl
    5af2:	7123      	strb	r3, [r4, #4]
    5af4:	2380      	movs	r3, #128	; 0x80
    5af6:	703b      	strb	r3, [r7, #0]
    5af8:	4653      	mov	r3, sl
    5afa:	70bb      	strb	r3, [r7, #2]
    5afc:	465b      	mov	r3, fp
    5afe:	71a3      	strb	r3, [r4, #6]
    5b00:	4643      	mov	r3, r8
    5b02:	71e3      	strb	r3, [r4, #7]
    5b04:	466b      	mov	r3, sp
    5b06:	781b      	ldrb	r3, [r3, #0]
    5b08:	7165      	strb	r5, [r4, #5]
    5b0a:	7223      	strb	r3, [r4, #8]
    5b0c:	2309      	movs	r3, #9
    5b0e:	4698      	mov	r8, r3
    5b10:	b26d      	sxtb	r5, r5
    5b12:	707e      	strb	r6, [r7, #1]
    5b14:	70fe      	strb	r6, [r7, #3]
    5b16:	44a0      	add	r8, r4
    5b18:	1da6      	adds	r6, r4, #6
    5b1a:	1c6b      	adds	r3, r5, #1
    5b1c:	d00b      	beq.n	5b36 <spi_init+0x132>
    5b1e:	1c28      	adds	r0, r5, #0
    5b20:	4649      	mov	r1, r9
    5b22:	f7ff fdcb 	bl	56bc <pinmap_function_sercom>
    5b26:	b2c0      	uxtb	r0, r0
    5b28:	7038      	strb	r0, [r7, #0]
    5b2a:	28ff      	cmp	r0, #255	; 0xff
    5b2c:	d003      	beq.n	5b36 <spi_init+0x132>
    5b2e:	b2e8      	uxtb	r0, r5
    5b30:	1c39      	adds	r1, r7, #0
    5b32:	f7fe fb1b 	bl	416c <system_pinmux_pin_set_config>
    5b36:	4546      	cmp	r6, r8
    5b38:	d006      	beq.n	5b48 <spi_init+0x144>
    5b3a:	7835      	ldrb	r5, [r6, #0]
    5b3c:	3601      	adds	r6, #1
    5b3e:	b26d      	sxtb	r5, r5
    5b40:	1c6b      	adds	r3, r5, #1
    5b42:	d1ec      	bne.n	5b1e <spi_init+0x11a>
    5b44:	4546      	cmp	r6, r8
    5b46:	d1f8      	bne.n	5b3a <spi_init+0x136>
    5b48:	9801      	ldr	r0, [sp, #4]
    5b4a:	f7fe fc25 	bl	4398 <system_gclk_chan_get_hz>
    5b4e:	ab02      	add	r3, sp, #8
    5b50:	1c01      	adds	r1, r0, #0
    5b52:	1c9a      	adds	r2, r3, #2
    5b54:	4825      	ldr	r0, [pc, #148]	; (5bec <spi_init+0x1e8>)
    5b56:	f7ff f9f3 	bl	4f40 <_sercom_get_sync_baud_val>
    5b5a:	2800      	cmp	r0, #0
    5b5c:	d19b      	bne.n	5a96 <spi_init+0x92>
    5b5e:	ab02      	add	r3, sp, #8
    5b60:	789b      	ldrb	r3, [r3, #2]
    5b62:	6822      	ldr	r2, [r4, #0]
    5b64:	1c20      	adds	r0, r4, #0
    5b66:	7313      	strb	r3, [r2, #12]
    5b68:	f7ff fefc 	bl	5964 <spi_find_mux_settings>
    5b6c:	2180      	movs	r1, #128	; 0x80
    5b6e:	6822      	ldr	r2, [r4, #0]
    5b70:	0289      	lsls	r1, r1, #10
    5b72:	6813      	ldr	r3, [r2, #0]
    5b74:	4318      	orrs	r0, r3
    5b76:	6010      	str	r0, [r2, #0]
    5b78:	6822      	ldr	r2, [r4, #0]
    5b7a:	6853      	ldr	r3, [r2, #4]
    5b7c:	430b      	orrs	r3, r1
    5b7e:	6053      	str	r3, [r2, #4]
    5b80:	2c00      	cmp	r4, #0
    5b82:	d025      	beq.n	5bd0 <spi_init+0x1cc>
    5b84:	4e16      	ldr	r6, [pc, #88]	; (5be0 <spi_init+0x1dc>)
    5b86:	4d17      	ldr	r5, [pc, #92]	; (5be4 <spi_init+0x1e0>)
    5b88:	e003      	b.n	5b92 <spi_init+0x18e>
    5b8a:	6822      	ldr	r2, [r4, #0]
    5b8c:	8b53      	ldrh	r3, [r2, #26]
    5b8e:	0bdb      	lsrs	r3, r3, #15
    5b90:	d019      	beq.n	5bc6 <spi_init+0x1c2>
    5b92:	2c00      	cmp	r4, #0
    5b94:	d1f9      	bne.n	5b8a <spi_init+0x186>
    5b96:	1c30      	adds	r0, r6, #0
    5b98:	1c29      	adds	r1, r5, #0
    5b9a:	2244      	movs	r2, #68	; 0x44
    5b9c:	f7ff f94c 	bl	4e38 <mbed_assert_internal>
    5ba0:	e7f3      	b.n	5b8a <spi_init+0x186>
    5ba2:	4813      	ldr	r0, [pc, #76]	; (5bf0 <spi_init+0x1ec>)
    5ba4:	490f      	ldr	r1, [pc, #60]	; (5be4 <spi_init+0x1e0>)
    5ba6:	22f5      	movs	r2, #245	; 0xf5
    5ba8:	f7ff f946 	bl	4e38 <mbed_assert_internal>
    5bac:	e740      	b.n	5a30 <spi_init+0x2c>
    5bae:	480c      	ldr	r0, [pc, #48]	; (5be0 <spi_init+0x1dc>)
    5bb0:	490c      	ldr	r1, [pc, #48]	; (5be4 <spi_init+0x1e0>)
    5bb2:	225e      	movs	r2, #94	; 0x5e
    5bb4:	f7ff f940 	bl	4e38 <mbed_assert_internal>
    5bb8:	e751      	b.n	5a5e <spi_init+0x5a>
    5bba:	4809      	ldr	r0, [pc, #36]	; (5be0 <spi_init+0x1dc>)
    5bbc:	4909      	ldr	r1, [pc, #36]	; (5be4 <spi_init+0x1e0>)
    5bbe:	22f4      	movs	r2, #244	; 0xf4
    5bc0:	f7ff f93a 	bl	4e38 <mbed_assert_internal>
    5bc4:	e730      	b.n	5a28 <spi_init+0x24>
    5bc6:	6811      	ldr	r1, [r2, #0]
    5bc8:	3302      	adds	r3, #2
    5bca:	430b      	orrs	r3, r1
    5bcc:	6013      	str	r3, [r2, #0]
    5bce:	e762      	b.n	5a96 <spi_init+0x92>
    5bd0:	4803      	ldr	r0, [pc, #12]	; (5be0 <spi_init+0x1dc>)
    5bd2:	4904      	ldr	r1, [pc, #16]	; (5be4 <spi_init+0x1e0>)
    5bd4:	2252      	movs	r2, #82	; 0x52
    5bd6:	f7ff f92f 	bl	4e38 <mbed_assert_internal>
    5bda:	e7d3      	b.n	5b84 <spi_init+0x180>
    5bdc:	200045b0 	.word	0x200045b0
    5be0:	0000ede0 	.word	0x0000ede0
    5be4:	0000f660 	.word	0x0000f660
    5be8:	40000400 	.word	0x40000400
    5bec:	000186a0 	.word	0x000186a0
    5bf0:	0000f6c8 	.word	0x0000f6c8

00005bf4 <spi_format>:
    5bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5bf6:	464f      	mov	r7, r9
    5bf8:	4646      	mov	r6, r8
    5bfa:	1c04      	adds	r4, r0, #0
    5bfc:	b4c0      	push	{r6, r7}
    5bfe:	4688      	mov	r8, r1
    5c00:	1c15      	adds	r5, r2, #0
    5c02:	4699      	mov	r9, r3
    5c04:	2800      	cmp	r0, #0
    5c06:	d100      	bne.n	5c0a <spi_format+0x16>
    5c08:	e08a      	b.n	5d20 <spi_format+0x12c>
    5c0a:	4f4f      	ldr	r7, [pc, #316]	; (5d48 <spi_format+0x154>)
    5c0c:	4e4f      	ldr	r6, [pc, #316]	; (5d4c <spi_format+0x158>)
    5c0e:	e006      	b.n	5c1e <spi_format+0x2a>
    5c10:	6822      	ldr	r2, [r4, #0]
    5c12:	8b53      	ldrh	r3, [r2, #26]
    5c14:	0bdb      	lsrs	r3, r3, #15
    5c16:	03db      	lsls	r3, r3, #15
    5c18:	b29b      	uxth	r3, r3
    5c1a:	2b00      	cmp	r3, #0
    5c1c:	d00d      	beq.n	5c3a <spi_format+0x46>
    5c1e:	2c00      	cmp	r4, #0
    5c20:	d1f6      	bne.n	5c10 <spi_format+0x1c>
    5c22:	2244      	movs	r2, #68	; 0x44
    5c24:	1c38      	adds	r0, r7, #0
    5c26:	1c31      	adds	r1, r6, #0
    5c28:	f7ff f906 	bl	4e38 <mbed_assert_internal>
    5c2c:	6822      	ldr	r2, [r4, #0]
    5c2e:	8b53      	ldrh	r3, [r2, #26]
    5c30:	0bdb      	lsrs	r3, r3, #15
    5c32:	03db      	lsls	r3, r3, #15
    5c34:	b29b      	uxth	r3, r3
    5c36:	2b00      	cmp	r3, #0
    5c38:	d1f1      	bne.n	5c1e <spi_format+0x2a>
    5c3a:	2002      	movs	r0, #2
    5c3c:	6811      	ldr	r1, [r2, #0]
    5c3e:	4381      	bics	r1, r0
    5c40:	6011      	str	r1, [r2, #0]
    5c42:	464a      	mov	r2, r9
    5c44:	2a00      	cmp	r2, #0
    5c46:	d060      	beq.n	5d0a <spi_format+0x116>
    5c48:	211c      	movs	r1, #28
    5c4a:	6820      	ldr	r0, [r4, #0]
    5c4c:	6802      	ldr	r2, [r0, #0]
    5c4e:	438a      	bics	r2, r1
    5c50:	3914      	subs	r1, #20
    5c52:	430a      	orrs	r2, r1
    5c54:	6002      	str	r2, [r0, #0]
    5c56:	6822      	ldr	r2, [r4, #0]
    5c58:	7123      	strb	r3, [r4, #4]
    5c5a:	6851      	ldr	r1, [r2, #4]
    5c5c:	3340      	adds	r3, #64	; 0x40
    5c5e:	430b      	orrs	r3, r1
    5c60:	6053      	str	r3, [r2, #4]
    5c62:	2300      	movs	r3, #0
    5c64:	4699      	mov	r9, r3
    5c66:	1c27      	adds	r7, r4, #0
    5c68:	1d66      	adds	r6, r4, #5
    5c6a:	3709      	adds	r7, #9
    5c6c:	2000      	movs	r0, #0
    5c6e:	5630      	ldrsb	r0, [r6, r0]
    5c70:	1c43      	adds	r3, r0, #1
    5c72:	d002      	beq.n	5c7a <spi_format+0x86>
    5c74:	4649      	mov	r1, r9
    5c76:	f7ff fc11 	bl	549c <pin_mode>
    5c7a:	3601      	adds	r6, #1
    5c7c:	42be      	cmp	r6, r7
    5c7e:	d1f5      	bne.n	5c6c <spi_format+0x78>
    5c80:	6823      	ldr	r3, [r4, #0]
    5c82:	1c20      	adds	r0, r4, #0
    5c84:	681e      	ldr	r6, [r3, #0]
    5c86:	4b32      	ldr	r3, [pc, #200]	; (5d50 <spi_format+0x15c>)
    5c88:	401e      	ands	r6, r3
    5c8a:	f7ff fe6b 	bl	5964 <spi_find_mux_settings>
    5c8e:	4642      	mov	r2, r8
    5c90:	6823      	ldr	r3, [r4, #0]
    5c92:	4306      	orrs	r6, r0
    5c94:	601e      	str	r6, [r3, #0]
    5c96:	6821      	ldr	r1, [r4, #0]
    5c98:	2301      	movs	r3, #1
    5c9a:	2a08      	cmp	r2, #8
    5c9c:	dc00      	bgt.n	5ca0 <spi_format+0xac>
    5c9e:	2300      	movs	r3, #0
    5ca0:	2007      	movs	r0, #7
    5ca2:	684a      	ldr	r2, [r1, #4]
    5ca4:	4003      	ands	r3, r0
    5ca6:	4382      	bics	r2, r0
    5ca8:	4313      	orrs	r3, r2
    5caa:	604b      	str	r3, [r1, #4]
    5cac:	2301      	movs	r3, #1
    5cae:	1c1a      	adds	r2, r3, #0
    5cb0:	6820      	ldr	r0, [r4, #0]
    5cb2:	402a      	ands	r2, r5
    5cb4:	6806      	ldr	r6, [r0, #0]
    5cb6:	0711      	lsls	r1, r2, #28
    5cb8:	4a26      	ldr	r2, [pc, #152]	; (5d54 <spi_format+0x160>)
    5cba:	086d      	lsrs	r5, r5, #1
    5cbc:	4032      	ands	r2, r6
    5cbe:	430a      	orrs	r2, r1
    5cc0:	6002      	str	r2, [r0, #0]
    5cc2:	6821      	ldr	r1, [r4, #0]
    5cc4:	401d      	ands	r5, r3
    5cc6:	076b      	lsls	r3, r5, #29
    5cc8:	4a23      	ldr	r2, [pc, #140]	; (5d58 <spi_format+0x164>)
    5cca:	680d      	ldr	r5, [r1, #0]
    5ccc:	4015      	ands	r5, r2
    5cce:	431d      	orrs	r5, r3
    5cd0:	600d      	str	r5, [r1, #0]
    5cd2:	2c00      	cmp	r4, #0
    5cd4:	d032      	beq.n	5d3c <spi_format+0x148>
    5cd6:	4e1c      	ldr	r6, [pc, #112]	; (5d48 <spi_format+0x154>)
    5cd8:	4d1c      	ldr	r5, [pc, #112]	; (5d4c <spi_format+0x158>)
    5cda:	e003      	b.n	5ce4 <spi_format+0xf0>
    5cdc:	6822      	ldr	r2, [r4, #0]
    5cde:	8b53      	ldrh	r3, [r2, #26]
    5ce0:	0bdb      	lsrs	r3, r3, #15
    5ce2:	d00a      	beq.n	5cfa <spi_format+0x106>
    5ce4:	2c00      	cmp	r4, #0
    5ce6:	d1f9      	bne.n	5cdc <spi_format+0xe8>
    5ce8:	2244      	movs	r2, #68	; 0x44
    5cea:	1c30      	adds	r0, r6, #0
    5cec:	1c29      	adds	r1, r5, #0
    5cee:	f7ff f8a3 	bl	4e38 <mbed_assert_internal>
    5cf2:	6822      	ldr	r2, [r4, #0]
    5cf4:	8b53      	ldrh	r3, [r2, #26]
    5cf6:	0bdb      	lsrs	r3, r3, #15
    5cf8:	d1f4      	bne.n	5ce4 <spi_format+0xf0>
    5cfa:	6811      	ldr	r1, [r2, #0]
    5cfc:	3302      	adds	r3, #2
    5cfe:	430b      	orrs	r3, r1
    5d00:	6013      	str	r3, [r2, #0]
    5d02:	bc0c      	pop	{r2, r3}
    5d04:	4690      	mov	r8, r2
    5d06:	4699      	mov	r9, r3
    5d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5d0a:	221c      	movs	r2, #28
    5d0c:	6821      	ldr	r1, [r4, #0]
    5d0e:	680b      	ldr	r3, [r1, #0]
    5d10:	4393      	bics	r3, r2
    5d12:	3a10      	subs	r2, #16
    5d14:	4313      	orrs	r3, r2
    5d16:	600b      	str	r3, [r1, #0]
    5d18:	2301      	movs	r3, #1
    5d1a:	7123      	strb	r3, [r4, #4]
    5d1c:	4699      	mov	r9, r3
    5d1e:	e7a2      	b.n	5c66 <spi_format+0x72>
    5d20:	2296      	movs	r2, #150	; 0x96
    5d22:	4f09      	ldr	r7, [pc, #36]	; (5d48 <spi_format+0x154>)
    5d24:	4e09      	ldr	r6, [pc, #36]	; (5d4c <spi_format+0x158>)
    5d26:	1c38      	adds	r0, r7, #0
    5d28:	1c31      	adds	r1, r6, #0
    5d2a:	32ff      	adds	r2, #255	; 0xff
    5d2c:	f7ff f884 	bl	4e38 <mbed_assert_internal>
    5d30:	1c38      	adds	r0, r7, #0
    5d32:	1c31      	adds	r1, r6, #0
    5d34:	225e      	movs	r2, #94	; 0x5e
    5d36:	f7ff f87f 	bl	4e38 <mbed_assert_internal>
    5d3a:	e766      	b.n	5c0a <spi_format+0x16>
    5d3c:	4802      	ldr	r0, [pc, #8]	; (5d48 <spi_format+0x154>)
    5d3e:	4903      	ldr	r1, [pc, #12]	; (5d4c <spi_format+0x158>)
    5d40:	2252      	movs	r2, #82	; 0x52
    5d42:	f7ff f879 	bl	4e38 <mbed_assert_internal>
    5d46:	e7c6      	b.n	5cd6 <spi_format+0xe2>
    5d48:	0000ede0 	.word	0x0000ede0
    5d4c:	0000f660 	.word	0x0000f660
    5d50:	ffccffff 	.word	0xffccffff
    5d54:	efffffff 	.word	0xefffffff
    5d58:	dfffffff 	.word	0xdfffffff

00005d5c <spi_frequency>:
    5d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5d5e:	b083      	sub	sp, #12
    5d60:	2300      	movs	r3, #0
    5d62:	466a      	mov	r2, sp
    5d64:	1c04      	adds	r4, r0, #0
    5d66:	1c0d      	adds	r5, r1, #0
    5d68:	80d3      	strh	r3, [r2, #6]
    5d6a:	2800      	cmp	r0, #0
    5d6c:	d053      	beq.n	5e16 <spi_frequency+0xba>
    5d6e:	4f37      	ldr	r7, [pc, #220]	; (5e4c <spi_frequency+0xf0>)
    5d70:	4e37      	ldr	r6, [pc, #220]	; (5e50 <spi_frequency+0xf4>)
    5d72:	e003      	b.n	5d7c <spi_frequency+0x20>
    5d74:	6822      	ldr	r2, [r4, #0]
    5d76:	8b53      	ldrh	r3, [r2, #26]
    5d78:	0bdb      	lsrs	r3, r3, #15
    5d7a:	d00a      	beq.n	5d92 <spi_frequency+0x36>
    5d7c:	2c00      	cmp	r4, #0
    5d7e:	d1f9      	bne.n	5d74 <spi_frequency+0x18>
    5d80:	2244      	movs	r2, #68	; 0x44
    5d82:	1c38      	adds	r0, r7, #0
    5d84:	1c31      	adds	r1, r6, #0
    5d86:	f7ff f857 	bl	4e38 <mbed_assert_internal>
    5d8a:	6822      	ldr	r2, [r4, #0]
    5d8c:	8b53      	ldrh	r3, [r2, #26]
    5d8e:	0bdb      	lsrs	r3, r3, #15
    5d90:	d1f4      	bne.n	5d7c <spi_frequency+0x20>
    5d92:	2102      	movs	r1, #2
    5d94:	6813      	ldr	r3, [r2, #0]
    5d96:	438b      	bics	r3, r1
    5d98:	6013      	str	r3, [r2, #0]
    5d9a:	6820      	ldr	r0, [r4, #0]
    5d9c:	f7ff f9cc 	bl	5138 <_sercom_get_sercom_inst_index>
    5da0:	3014      	adds	r0, #20
    5da2:	b2c0      	uxtb	r0, r0
    5da4:	f7fe faf8 	bl	4398 <system_gclk_chan_get_hz>
    5da8:	466b      	mov	r3, sp
    5daa:	1c01      	adds	r1, r0, #0
    5dac:	1d9a      	adds	r2, r3, #6
    5dae:	1c28      	adds	r0, r5, #0
    5db0:	f7ff f8c6 	bl	4f40 <_sercom_get_sync_baud_val>
    5db4:	2800      	cmp	r0, #0
    5db6:	d11d      	bne.n	5df4 <spi_frequency+0x98>
    5db8:	466b      	mov	r3, sp
    5dba:	6822      	ldr	r2, [r4, #0]
    5dbc:	799b      	ldrb	r3, [r3, #6]
    5dbe:	7313      	strb	r3, [r2, #12]
    5dc0:	2c00      	cmp	r4, #0
    5dc2:	d036      	beq.n	5e32 <spi_frequency+0xd6>
    5dc4:	4e21      	ldr	r6, [pc, #132]	; (5e4c <spi_frequency+0xf0>)
    5dc6:	4d22      	ldr	r5, [pc, #136]	; (5e50 <spi_frequency+0xf4>)
    5dc8:	e003      	b.n	5dd2 <spi_frequency+0x76>
    5dca:	6822      	ldr	r2, [r4, #0]
    5dcc:	8b53      	ldrh	r3, [r2, #26]
    5dce:	0bdb      	lsrs	r3, r3, #15
    5dd0:	d00a      	beq.n	5de8 <spi_frequency+0x8c>
    5dd2:	2c00      	cmp	r4, #0
    5dd4:	d1f9      	bne.n	5dca <spi_frequency+0x6e>
    5dd6:	2244      	movs	r2, #68	; 0x44
    5dd8:	1c30      	adds	r0, r6, #0
    5dda:	1c29      	adds	r1, r5, #0
    5ddc:	f7ff f82c 	bl	4e38 <mbed_assert_internal>
    5de0:	6822      	ldr	r2, [r4, #0]
    5de2:	8b53      	ldrh	r3, [r2, #26]
    5de4:	0bdb      	lsrs	r3, r3, #15
    5de6:	d1f4      	bne.n	5dd2 <spi_frequency+0x76>
    5de8:	6811      	ldr	r1, [r2, #0]
    5dea:	3302      	adds	r3, #2
    5dec:	430b      	orrs	r3, r1
    5dee:	6013      	str	r3, [r2, #0]
    5df0:	b003      	add	sp, #12
    5df2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5df4:	2c00      	cmp	r4, #0
    5df6:	d022      	beq.n	5e3e <spi_frequency+0xe2>
    5df8:	4e14      	ldr	r6, [pc, #80]	; (5e4c <spi_frequency+0xf0>)
    5dfa:	4d15      	ldr	r5, [pc, #84]	; (5e50 <spi_frequency+0xf4>)
    5dfc:	e003      	b.n	5e06 <spi_frequency+0xaa>
    5dfe:	6822      	ldr	r2, [r4, #0]
    5e00:	8b53      	ldrh	r3, [r2, #26]
    5e02:	0bdb      	lsrs	r3, r3, #15
    5e04:	d0f0      	beq.n	5de8 <spi_frequency+0x8c>
    5e06:	2c00      	cmp	r4, #0
    5e08:	d1f9      	bne.n	5dfe <spi_frequency+0xa2>
    5e0a:	1c30      	adds	r0, r6, #0
    5e0c:	1c29      	adds	r1, r5, #0
    5e0e:	2244      	movs	r2, #68	; 0x44
    5e10:	f7ff f812 	bl	4e38 <mbed_assert_internal>
    5e14:	e7f3      	b.n	5dfe <spi_frequency+0xa2>
    5e16:	22d0      	movs	r2, #208	; 0xd0
    5e18:	4f0c      	ldr	r7, [pc, #48]	; (5e4c <spi_frequency+0xf0>)
    5e1a:	4e0d      	ldr	r6, [pc, #52]	; (5e50 <spi_frequency+0xf4>)
    5e1c:	1c38      	adds	r0, r7, #0
    5e1e:	1c31      	adds	r1, r6, #0
    5e20:	32ff      	adds	r2, #255	; 0xff
    5e22:	f7ff f809 	bl	4e38 <mbed_assert_internal>
    5e26:	1c38      	adds	r0, r7, #0
    5e28:	1c31      	adds	r1, r6, #0
    5e2a:	225e      	movs	r2, #94	; 0x5e
    5e2c:	f7ff f804 	bl	4e38 <mbed_assert_internal>
    5e30:	e79d      	b.n	5d6e <spi_frequency+0x12>
    5e32:	4806      	ldr	r0, [pc, #24]	; (5e4c <spi_frequency+0xf0>)
    5e34:	4906      	ldr	r1, [pc, #24]	; (5e50 <spi_frequency+0xf4>)
    5e36:	2252      	movs	r2, #82	; 0x52
    5e38:	f7fe fffe 	bl	4e38 <mbed_assert_internal>
    5e3c:	e7c2      	b.n	5dc4 <spi_frequency+0x68>
    5e3e:	4803      	ldr	r0, [pc, #12]	; (5e4c <spi_frequency+0xf0>)
    5e40:	4903      	ldr	r1, [pc, #12]	; (5e50 <spi_frequency+0xf4>)
    5e42:	2252      	movs	r2, #82	; 0x52
    5e44:	f7fe fff8 	bl	4e38 <mbed_assert_internal>
    5e48:	e7d6      	b.n	5df8 <spi_frequency+0x9c>
    5e4a:	46c0      	nop			; (mov r8, r8)
    5e4c:	0000ede0 	.word	0x0000ede0
    5e50:	0000f660 	.word	0x0000f660

00005e54 <spi_master_write>:
    5e54:	b5f0      	push	{r4, r5, r6, r7, lr}
    5e56:	4647      	mov	r7, r8
    5e58:	1c04      	adds	r4, r0, #0
    5e5a:	b480      	push	{r7}
    5e5c:	1c0e      	adds	r6, r1, #0
    5e5e:	2800      	cmp	r0, #0
    5e60:	d052      	beq.n	5f08 <spi_master_write+0xb4>
    5e62:	7a63      	ldrb	r3, [r4, #9]
    5e64:	2b05      	cmp	r3, #5
    5e66:	d045      	beq.n	5ef4 <spi_master_write+0xa0>
    5e68:	4b3a      	ldr	r3, [pc, #232]	; (5f54 <spi_master_write+0x100>)
    5e6a:	4f3b      	ldr	r7, [pc, #236]	; (5f58 <spi_master_write+0x104>)
    5e6c:	4698      	mov	r8, r3
    5e6e:	2501      	movs	r5, #1
    5e70:	e003      	b.n	5e7a <spi_master_write+0x26>
    5e72:	6823      	ldr	r3, [r4, #0]
    5e74:	7e1a      	ldrb	r2, [r3, #24]
    5e76:	4215      	tst	r5, r2
    5e78:	d10a      	bne.n	5e90 <spi_master_write+0x3c>
    5e7a:	2c00      	cmp	r4, #0
    5e7c:	d1f9      	bne.n	5e72 <spi_master_write+0x1e>
    5e7e:	2273      	movs	r2, #115	; 0x73
    5e80:	4640      	mov	r0, r8
    5e82:	1c39      	adds	r1, r7, #0
    5e84:	f7fe ffd8 	bl	4e38 <mbed_assert_internal>
    5e88:	6823      	ldr	r3, [r4, #0]
    5e8a:	7e1a      	ldrb	r2, [r3, #24]
    5e8c:	4215      	tst	r5, r2
    5e8e:	d0f4      	beq.n	5e7a <spi_master_write+0x26>
    5e90:	2c00      	cmp	r4, #0
    5e92:	d043      	beq.n	5f1c <spi_master_write+0xc8>
    5e94:	7e1a      	ldrb	r2, [r3, #24]
    5e96:	07d2      	lsls	r2, r2, #31
    5e98:	d503      	bpl.n	5ea2 <spi_master_write+0x4e>
    5e9a:	05f6      	lsls	r6, r6, #23
    5e9c:	0df6      	lsrs	r6, r6, #23
    5e9e:	629e      	str	r6, [r3, #40]	; 0x28
    5ea0:	6823      	ldr	r3, [r4, #0]
    5ea2:	685b      	ldr	r3, [r3, #4]
    5ea4:	039b      	lsls	r3, r3, #14
    5ea6:	d525      	bpl.n	5ef4 <spi_master_write+0xa0>
    5ea8:	4f2a      	ldr	r7, [pc, #168]	; (5f54 <spi_master_write+0x100>)
    5eaa:	4e2b      	ldr	r6, [pc, #172]	; (5f58 <spi_master_write+0x104>)
    5eac:	2504      	movs	r5, #4
    5eae:	e003      	b.n	5eb8 <spi_master_write+0x64>
    5eb0:	6823      	ldr	r3, [r4, #0]
    5eb2:	7e1a      	ldrb	r2, [r3, #24]
    5eb4:	4215      	tst	r5, r2
    5eb6:	d10a      	bne.n	5ece <spi_master_write+0x7a>
    5eb8:	2c00      	cmp	r4, #0
    5eba:	d1f9      	bne.n	5eb0 <spi_master_write+0x5c>
    5ebc:	227c      	movs	r2, #124	; 0x7c
    5ebe:	1c38      	adds	r0, r7, #0
    5ec0:	1c31      	adds	r1, r6, #0
    5ec2:	f7fe ffb9 	bl	4e38 <mbed_assert_internal>
    5ec6:	6823      	ldr	r3, [r4, #0]
    5ec8:	7e1a      	ldrb	r2, [r3, #24]
    5eca:	4215      	tst	r5, r2
    5ecc:	d0f4      	beq.n	5eb8 <spi_master_write+0x64>
    5ece:	2c00      	cmp	r4, #0
    5ed0:	d032      	beq.n	5f38 <spi_master_write+0xe4>
    5ed2:	2204      	movs	r2, #4
    5ed4:	7e19      	ldrb	r1, [r3, #24]
    5ed6:	2000      	movs	r0, #0
    5ed8:	420a      	tst	r2, r1
    5eda:	d00c      	beq.n	5ef6 <spi_master_write+0xa2>
    5edc:	8b59      	ldrh	r1, [r3, #26]
    5ede:	420a      	tst	r2, r1
    5ee0:	d10c      	bne.n	5efc <spi_master_write+0xa8>
    5ee2:	2107      	movs	r1, #7
    5ee4:	685a      	ldr	r2, [r3, #4]
    5ee6:	400a      	ands	r2, r1
    5ee8:	2a01      	cmp	r2, #1
    5eea:	d013      	beq.n	5f14 <spi_master_write+0xc0>
    5eec:	20ff      	movs	r0, #255	; 0xff
    5eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5ef0:	4018      	ands	r0, r3
    5ef2:	e000      	b.n	5ef6 <spi_master_write+0xa2>
    5ef4:	2000      	movs	r0, #0
    5ef6:	bc04      	pop	{r2}
    5ef8:	4690      	mov	r8, r2
    5efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5efc:	8b59      	ldrh	r1, [r3, #26]
    5efe:	430a      	orrs	r2, r1
    5f00:	b292      	uxth	r2, r2
    5f02:	835a      	strh	r2, [r3, #26]
    5f04:	6823      	ldr	r3, [r4, #0]
    5f06:	e7ec      	b.n	5ee2 <spi_master_write+0x8e>
    5f08:	4812      	ldr	r0, [pc, #72]	; (5f54 <spi_master_write+0x100>)
    5f0a:	4913      	ldr	r1, [pc, #76]	; (5f58 <spi_master_write+0x104>)
    5f0c:	4a13      	ldr	r2, [pc, #76]	; (5f5c <spi_master_write+0x108>)
    5f0e:	f7fe ff93 	bl	4e38 <mbed_assert_internal>
    5f12:	e7a6      	b.n	5e62 <spi_master_write+0xe>
    5f14:	6a98      	ldr	r0, [r3, #40]	; 0x28
    5f16:	05c0      	lsls	r0, r0, #23
    5f18:	0dc0      	lsrs	r0, r0, #23
    5f1a:	e7ec      	b.n	5ef6 <spi_master_write+0xa2>
    5f1c:	4f0d      	ldr	r7, [pc, #52]	; (5f54 <spi_master_write+0x100>)
    5f1e:	4d0e      	ldr	r5, [pc, #56]	; (5f58 <spi_master_write+0x104>)
    5f20:	1c38      	adds	r0, r7, #0
    5f22:	1c29      	adds	r1, r5, #0
    5f24:	2285      	movs	r2, #133	; 0x85
    5f26:	f7fe ff87 	bl	4e38 <mbed_assert_internal>
    5f2a:	1c38      	adds	r0, r7, #0
    5f2c:	1c29      	adds	r1, r5, #0
    5f2e:	2273      	movs	r2, #115	; 0x73
    5f30:	f7fe ff82 	bl	4e38 <mbed_assert_internal>
    5f34:	6823      	ldr	r3, [r4, #0]
    5f36:	e7ad      	b.n	5e94 <spi_master_write+0x40>
    5f38:	4e06      	ldr	r6, [pc, #24]	; (5f54 <spi_master_write+0x100>)
    5f3a:	4d07      	ldr	r5, [pc, #28]	; (5f58 <spi_master_write+0x104>)
    5f3c:	1c30      	adds	r0, r6, #0
    5f3e:	1c29      	adds	r1, r5, #0
    5f40:	2296      	movs	r2, #150	; 0x96
    5f42:	f7fe ff79 	bl	4e38 <mbed_assert_internal>
    5f46:	1c30      	adds	r0, r6, #0
    5f48:	1c29      	adds	r1, r5, #0
    5f4a:	227c      	movs	r2, #124	; 0x7c
    5f4c:	f7fe ff74 	bl	4e38 <mbed_assert_internal>
    5f50:	6823      	ldr	r3, [r4, #0]
    5f52:	e7be      	b.n	5ed2 <spi_master_write+0x7e>
    5f54:	0000ede0 	.word	0x0000ede0
    5f58:	0000f660 	.word	0x0000f660
    5f5c:	00000212 	.word	0x00000212

00005f60 <_ZN4mbed8FileBaseD1Ev>:
    5f60:	4b0a      	ldr	r3, [pc, #40]	; (5f8c <_ZN4mbed8FileBaseD1Ev+0x2c>)
    5f62:	3308      	adds	r3, #8
    5f64:	6003      	str	r3, [r0, #0]
    5f66:	6883      	ldr	r3, [r0, #8]
    5f68:	2b00      	cmp	r3, #0
    5f6a:	d00a      	beq.n	5f82 <_ZN4mbed8FileBaseD1Ev+0x22>
    5f6c:	4b08      	ldr	r3, [pc, #32]	; (5f90 <_ZN4mbed8FileBaseD1Ev+0x30>)
    5f6e:	681a      	ldr	r2, [r3, #0]
    5f70:	4282      	cmp	r2, r0
    5f72:	d101      	bne.n	5f78 <_ZN4mbed8FileBaseD1Ev+0x18>
    5f74:	e006      	b.n	5f84 <_ZN4mbed8FileBaseD1Ev+0x24>
    5f76:	1c1a      	adds	r2, r3, #0
    5f78:	6853      	ldr	r3, [r2, #4]
    5f7a:	4283      	cmp	r3, r0
    5f7c:	d1fb      	bne.n	5f76 <_ZN4mbed8FileBaseD1Ev+0x16>
    5f7e:	6843      	ldr	r3, [r0, #4]
    5f80:	6053      	str	r3, [r2, #4]
    5f82:	4770      	bx	lr
    5f84:	6842      	ldr	r2, [r0, #4]
    5f86:	601a      	str	r2, [r3, #0]
    5f88:	e7fb      	b.n	5f82 <_ZN4mbed8FileBaseD1Ev+0x22>
    5f8a:	46c0      	nop			; (mov r8, r8)
    5f8c:	0000f6d8 	.word	0x0000f6d8
    5f90:	20004700 	.word	0x20004700

00005f94 <_ZN4mbed8FileBaseD0Ev>:
    5f94:	4b0d      	ldr	r3, [pc, #52]	; (5fcc <_ZN4mbed8FileBaseD0Ev+0x38>)
    5f96:	b510      	push	{r4, lr}
    5f98:	3308      	adds	r3, #8
    5f9a:	6003      	str	r3, [r0, #0]
    5f9c:	6883      	ldr	r3, [r0, #8]
    5f9e:	1c04      	adds	r4, r0, #0
    5fa0:	2b00      	cmp	r3, #0
    5fa2:	d00a      	beq.n	5fba <_ZN4mbed8FileBaseD0Ev+0x26>
    5fa4:	4b0a      	ldr	r3, [pc, #40]	; (5fd0 <_ZN4mbed8FileBaseD0Ev+0x3c>)
    5fa6:	681a      	ldr	r2, [r3, #0]
    5fa8:	4290      	cmp	r0, r2
    5faa:	d101      	bne.n	5fb0 <_ZN4mbed8FileBaseD0Ev+0x1c>
    5fac:	e00a      	b.n	5fc4 <_ZN4mbed8FileBaseD0Ev+0x30>
    5fae:	1c1a      	adds	r2, r3, #0
    5fb0:	6853      	ldr	r3, [r2, #4]
    5fb2:	429c      	cmp	r4, r3
    5fb4:	d1fb      	bne.n	5fae <_ZN4mbed8FileBaseD0Ev+0x1a>
    5fb6:	6863      	ldr	r3, [r4, #4]
    5fb8:	6053      	str	r3, [r2, #4]
    5fba:	1c20      	adds	r0, r4, #0
    5fbc:	f000 fab5 	bl	652a <_ZdlPv>
    5fc0:	1c20      	adds	r0, r4, #0
    5fc2:	bd10      	pop	{r4, pc}
    5fc4:	6842      	ldr	r2, [r0, #4]
    5fc6:	601a      	str	r2, [r3, #0]
    5fc8:	e7f7      	b.n	5fba <_ZN4mbed8FileBaseD0Ev+0x26>
    5fca:	46c0      	nop			; (mov r8, r8)
    5fcc:	0000f6d8 	.word	0x0000f6d8
    5fd0:	20004700 	.word	0x20004700

00005fd4 <_ZN4mbed8FileBaseC1EPKcNS_8PathTypeE>:
    5fd4:	4b06      	ldr	r3, [pc, #24]	; (5ff0 <_ZN4mbed8FileBaseC1EPKcNS_8PathTypeE+0x1c>)
    5fd6:	6081      	str	r1, [r0, #8]
    5fd8:	3308      	adds	r3, #8
    5fda:	6003      	str	r3, [r0, #0]
    5fdc:	2300      	movs	r3, #0
    5fde:	7302      	strb	r2, [r0, #12]
    5fe0:	6043      	str	r3, [r0, #4]
    5fe2:	2900      	cmp	r1, #0
    5fe4:	d003      	beq.n	5fee <_ZN4mbed8FileBaseC1EPKcNS_8PathTypeE+0x1a>
    5fe6:	4b03      	ldr	r3, [pc, #12]	; (5ff4 <_ZN4mbed8FileBaseC1EPKcNS_8PathTypeE+0x20>)
    5fe8:	681a      	ldr	r2, [r3, #0]
    5fea:	6018      	str	r0, [r3, #0]
    5fec:	6042      	str	r2, [r0, #4]
    5fee:	4770      	bx	lr
    5ff0:	0000f6d8 	.word	0x0000f6d8
    5ff4:	20004700 	.word	0x20004700

00005ff8 <_ZN4mbed8FileBase6lookupEPKcj>:
    5ff8:	4b0e      	ldr	r3, [pc, #56]	; (6034 <_ZN4mbed8FileBase6lookupEPKcj+0x3c>)
    5ffa:	b570      	push	{r4, r5, r6, lr}
    5ffc:	681c      	ldr	r4, [r3, #0]
    5ffe:	1c06      	adds	r6, r0, #0
    6000:	1c0d      	adds	r5, r1, #0
    6002:	2c00      	cmp	r4, #0
    6004:	d103      	bne.n	600e <_ZN4mbed8FileBase6lookupEPKcj+0x16>
    6006:	e012      	b.n	602e <_ZN4mbed8FileBase6lookupEPKcj+0x36>
    6008:	6864      	ldr	r4, [r4, #4]
    600a:	2c00      	cmp	r4, #0
    600c:	d00f      	beq.n	602e <_ZN4mbed8FileBase6lookupEPKcj+0x36>
    600e:	68a0      	ldr	r0, [r4, #8]
    6010:	2800      	cmp	r0, #0
    6012:	d0f9      	beq.n	6008 <_ZN4mbed8FileBase6lookupEPKcj+0x10>
    6014:	1c31      	adds	r1, r6, #0
    6016:	1c2a      	adds	r2, r5, #0
    6018:	f005 fa27 	bl	b46a <strncmp>
    601c:	2800      	cmp	r0, #0
    601e:	d1f3      	bne.n	6008 <_ZN4mbed8FileBase6lookupEPKcj+0x10>
    6020:	68a0      	ldr	r0, [r4, #8]
    6022:	f005 fa1b 	bl	b45c <strlen>
    6026:	42a8      	cmp	r0, r5
    6028:	d1ee      	bne.n	6008 <_ZN4mbed8FileBase6lookupEPKcj+0x10>
    602a:	1c20      	adds	r0, r4, #0
    602c:	e000      	b.n	6030 <_ZN4mbed8FileBase6lookupEPKcj+0x38>
    602e:	2000      	movs	r0, #0
    6030:	bd70      	pop	{r4, r5, r6, pc}
    6032:	46c0      	nop			; (mov r8, r8)
    6034:	20004700 	.word	0x20004700

00006038 <_ZN4mbed8FileBase11getPathTypeEv>:
    6038:	7b00      	ldrb	r0, [r0, #12]
    603a:	4770      	bx	lr

0000603c <_ZN4mbed8FileLikeC1EPKc>:
    603c:	4b07      	ldr	r3, [pc, #28]	; (605c <_ZN4mbed8FileLikeC1EPKc+0x20>)
    603e:	b510      	push	{r4, lr}
    6040:	2200      	movs	r2, #0
    6042:	1c04      	adds	r4, r0, #0
    6044:	c008      	stmia	r0!, {r3}
    6046:	f7ff ffc5 	bl	5fd4 <_ZN4mbed8FileBaseC1EPKcNS_8PathTypeE>
    604a:	4b05      	ldr	r3, [pc, #20]	; (6060 <_ZN4mbed8FileLikeC1EPKc+0x24>)
    604c:	1c20      	adds	r0, r4, #0
    604e:	1c1a      	adds	r2, r3, #0
    6050:	3334      	adds	r3, #52	; 0x34
    6052:	3208      	adds	r2, #8
    6054:	6022      	str	r2, [r4, #0]
    6056:	6063      	str	r3, [r4, #4]
    6058:	bd10      	pop	{r4, pc}
    605a:	46c0      	nop			; (mov r8, r8)
    605c:	0000eda0 	.word	0x0000eda0
    6060:	0000f6e8 	.word	0x0000f6e8

00006064 <_ZN4mbed8FileLikeD1Ev>:
    6064:	4b07      	ldr	r3, [pc, #28]	; (6084 <_ZN4mbed8FileLikeD1Ev+0x20>)
    6066:	b510      	push	{r4, lr}
    6068:	1c1a      	adds	r2, r3, #0
    606a:	1c04      	adds	r4, r0, #0
    606c:	3208      	adds	r2, #8
    606e:	3334      	adds	r3, #52	; 0x34
    6070:	6002      	str	r2, [r0, #0]
    6072:	6043      	str	r3, [r0, #4]
    6074:	3004      	adds	r0, #4
    6076:	f7ff ff73 	bl	5f60 <_ZN4mbed8FileBaseD1Ev>
    607a:	1c20      	adds	r0, r4, #0
    607c:	f7fd fdba 	bl	3bf4 <_ZN4mbed10FileHandleD1Ev>
    6080:	1c20      	adds	r0, r4, #0
    6082:	bd10      	pop	{r4, pc}
    6084:	0000f6e8 	.word	0x0000f6e8

00006088 <us_ticker_irq_handler>:
    6088:	b508      	push	{r3, lr}
    608a:	4802      	ldr	r0, [pc, #8]	; (6094 <us_ticker_irq_handler+0xc>)
    608c:	f000 fa20 	bl	64d0 <ticker_irq_handler>
    6090:	bd08      	pop	{r3, pc}
    6092:	46c0      	nop			; (mov r8, r8)
    6094:	0000f738 	.word	0x0000f738

00006098 <port_pin_set_config>:
    6098:	2280      	movs	r2, #128	; 0x80
    609a:	b500      	push	{lr}
    609c:	b083      	sub	sp, #12
    609e:	ab01      	add	r3, sp, #4
    60a0:	701a      	strb	r2, [r3, #0]
    60a2:	780a      	ldrb	r2, [r1, #0]
    60a4:	705a      	strb	r2, [r3, #1]
    60a6:	784a      	ldrb	r2, [r1, #1]
    60a8:	709a      	strb	r2, [r3, #2]
    60aa:	788a      	ldrb	r2, [r1, #2]
    60ac:	1c19      	adds	r1, r3, #0
    60ae:	70da      	strb	r2, [r3, #3]
    60b0:	f7fe f85c 	bl	416c <system_pinmux_pin_set_config>
    60b4:	b003      	add	sp, #12
    60b6:	bd00      	pop	{pc}

000060b8 <tc_register_callback>:
    60b8:	1c93      	adds	r3, r2, #2
    60ba:	009b      	lsls	r3, r3, #2
    60bc:	5019      	str	r1, [r3, r0]
    60be:	2a02      	cmp	r2, #2
    60c0:	d009      	beq.n	60d6 <tc_register_callback+0x1e>
    60c2:	2a03      	cmp	r2, #3
    60c4:	d00c      	beq.n	60e0 <tc_register_callback+0x28>
    60c6:	2301      	movs	r3, #1
    60c8:	4093      	lsls	r3, r2
    60ca:	1c1a      	adds	r2, r3, #0
    60cc:	7e03      	ldrb	r3, [r0, #24]
    60ce:	431a      	orrs	r2, r3
    60d0:	7602      	strb	r2, [r0, #24]
    60d2:	2000      	movs	r0, #0
    60d4:	4770      	bx	lr
    60d6:	2310      	movs	r3, #16
    60d8:	7e02      	ldrb	r2, [r0, #24]
    60da:	4313      	orrs	r3, r2
    60dc:	7603      	strb	r3, [r0, #24]
    60de:	e7f8      	b.n	60d2 <tc_register_callback+0x1a>
    60e0:	2320      	movs	r3, #32
    60e2:	7e02      	ldrb	r2, [r0, #24]
    60e4:	4313      	orrs	r3, r2
    60e6:	7603      	strb	r3, [r0, #24]
    60e8:	e7f3      	b.n	60d2 <tc_register_callback+0x1a>
    60ea:	46c0      	nop			; (mov r8, r8)

000060ec <_tc_interrupt_handler>:
    60ec:	b570      	push	{r4, r5, r6, lr}
    60ee:	2601      	movs	r6, #1
    60f0:	4b15      	ldr	r3, [pc, #84]	; (6148 <_tc_interrupt_handler+0x5c>)
    60f2:	0080      	lsls	r0, r0, #2
    60f4:	58c5      	ldr	r5, [r0, r3]
    60f6:	682b      	ldr	r3, [r5, #0]
    60f8:	7e2c      	ldrb	r4, [r5, #24]
    60fa:	7b9b      	ldrb	r3, [r3, #14]
    60fc:	401c      	ands	r4, r3
    60fe:	7e6b      	ldrb	r3, [r5, #25]
    6100:	401c      	ands	r4, r3
    6102:	4226      	tst	r6, r4
    6104:	d11a      	bne.n	613c <_tc_interrupt_handler+0x50>
    6106:	2602      	movs	r6, #2
    6108:	4226      	tst	r6, r4
    610a:	d111      	bne.n	6130 <_tc_interrupt_handler+0x44>
    610c:	2610      	movs	r6, #16
    610e:	4226      	tst	r6, r4
    6110:	d108      	bne.n	6124 <_tc_interrupt_handler+0x38>
    6112:	2620      	movs	r6, #32
    6114:	4226      	tst	r6, r4
    6116:	d004      	beq.n	6122 <_tc_interrupt_handler+0x36>
    6118:	696b      	ldr	r3, [r5, #20]
    611a:	1c28      	adds	r0, r5, #0
    611c:	4798      	blx	r3
    611e:	682b      	ldr	r3, [r5, #0]
    6120:	739e      	strb	r6, [r3, #14]
    6122:	bd70      	pop	{r4, r5, r6, pc}
    6124:	692b      	ldr	r3, [r5, #16]
    6126:	1c28      	adds	r0, r5, #0
    6128:	4798      	blx	r3
    612a:	682b      	ldr	r3, [r5, #0]
    612c:	739e      	strb	r6, [r3, #14]
    612e:	e7f0      	b.n	6112 <_tc_interrupt_handler+0x26>
    6130:	68eb      	ldr	r3, [r5, #12]
    6132:	1c28      	adds	r0, r5, #0
    6134:	4798      	blx	r3
    6136:	682b      	ldr	r3, [r5, #0]
    6138:	739e      	strb	r6, [r3, #14]
    613a:	e7e7      	b.n	610c <_tc_interrupt_handler+0x20>
    613c:	68ab      	ldr	r3, [r5, #8]
    613e:	1c28      	adds	r0, r5, #0
    6140:	4798      	blx	r3
    6142:	682b      	ldr	r3, [r5, #0]
    6144:	739e      	strb	r6, [r3, #14]
    6146:	e7de      	b.n	6106 <_tc_interrupt_handler+0x1a>
    6148:	200047bc 	.word	0x200047bc

0000614c <TC3_Handler>:
    614c:	b508      	push	{r3, lr}
    614e:	2000      	movs	r0, #0
    6150:	f7ff ffcc 	bl	60ec <_tc_interrupt_handler>
    6154:	bd08      	pop	{r3, pc}
    6156:	46c0      	nop			; (mov r8, r8)

00006158 <TC4_Handler>:
    6158:	b508      	push	{r3, lr}
    615a:	2001      	movs	r0, #1
    615c:	f7ff ffc6 	bl	60ec <_tc_interrupt_handler>
    6160:	bd08      	pop	{r3, pc}
    6162:	46c0      	nop			; (mov r8, r8)

00006164 <TC5_Handler>:
    6164:	b508      	push	{r3, lr}
    6166:	2002      	movs	r0, #2
    6168:	f7ff ffc0 	bl	60ec <_tc_interrupt_handler>
    616c:	bd08      	pop	{r3, pc}
    616e:	46c0      	nop			; (mov r8, r8)

00006170 <_tc_get_inst_index>:
    6170:	4b0e      	ldr	r3, [pc, #56]	; (61ac <_tc_get_inst_index+0x3c>)
    6172:	1c01      	adds	r1, r0, #0
    6174:	1c18      	adds	r0, r3, #0
    6176:	b570      	push	{r4, r5, r6, lr}
    6178:	b084      	sub	sp, #16
    617a:	aa01      	add	r2, sp, #4
    617c:	c870      	ldmia	r0!, {r4, r5, r6}
    617e:	c270      	stmia	r2!, {r4, r5, r6}
    6180:	9a01      	ldr	r2, [sp, #4]
    6182:	428a      	cmp	r2, r1
    6184:	d008      	beq.n	6198 <_tc_get_inst_index+0x28>
    6186:	685a      	ldr	r2, [r3, #4]
    6188:	428a      	cmp	r2, r1
    618a:	d008      	beq.n	619e <_tc_get_inst_index+0x2e>
    618c:	689b      	ldr	r3, [r3, #8]
    618e:	2000      	movs	r0, #0
    6190:	428b      	cmp	r3, r1
    6192:	d007      	beq.n	61a4 <_tc_get_inst_index+0x34>
    6194:	b004      	add	sp, #16
    6196:	bd70      	pop	{r4, r5, r6, pc}
    6198:	2000      	movs	r0, #0
    619a:	b2c0      	uxtb	r0, r0
    619c:	e7fa      	b.n	6194 <_tc_get_inst_index+0x24>
    619e:	2001      	movs	r0, #1
    61a0:	b2c0      	uxtb	r0, r0
    61a2:	e7f7      	b.n	6194 <_tc_get_inst_index+0x24>
    61a4:	3002      	adds	r0, #2
    61a6:	b2c0      	uxtb	r0, r0
    61a8:	e7f4      	b.n	6194 <_tc_get_inst_index+0x24>
    61aa:	46c0      	nop			; (mov r8, r8)
    61ac:	0000f740 	.word	0x0000f740

000061b0 <tc_init>:
    61b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    61b2:	4657      	mov	r7, sl
    61b4:	464e      	mov	r6, r9
    61b6:	4645      	mov	r5, r8
    61b8:	4ca3      	ldr	r4, [pc, #652]	; (6448 <tc_init+0x298>)
    61ba:	4691      	mov	r9, r2
    61bc:	1c22      	adds	r2, r4, #0
    61be:	b4e0      	push	{r5, r6, r7}
    61c0:	b086      	sub	sp, #24
    61c2:	ab03      	add	r3, sp, #12
    61c4:	1c05      	adds	r5, r0, #0
    61c6:	1c0e      	adds	r6, r1, #0
    61c8:	469a      	mov	sl, r3
    61ca:	ca83      	ldmia	r2!, {r0, r1, r7}
    61cc:	c383      	stmia	r3!, {r0, r1, r7}
    61ce:	9b03      	ldr	r3, [sp, #12]
    61d0:	429e      	cmp	r6, r3
    61d2:	d100      	bne.n	61d6 <tc_init+0x26>
    61d4:	e10c      	b.n	63f0 <tc_init+0x240>
    61d6:	6863      	ldr	r3, [r4, #4]
    61d8:	429e      	cmp	r6, r3
    61da:	d100      	bne.n	61de <tc_init+0x2e>
    61dc:	e10b      	b.n	63f6 <tc_init+0x246>
    61de:	2300      	movs	r3, #0
    61e0:	4698      	mov	r8, r3
    61e2:	68a3      	ldr	r3, [r4, #8]
    61e4:	429e      	cmp	r6, r3
    61e6:	d100      	bne.n	61ea <tc_init+0x3a>
    61e8:	e108      	b.n	63fc <tc_init+0x24c>
    61ea:	1c21      	adds	r1, r4, #0
    61ec:	2203      	movs	r2, #3
    61ee:	310c      	adds	r1, #12
    61f0:	a801      	add	r0, sp, #4
    61f2:	f003 fdb0 	bl	9d56 <memcpy>
    61f6:	1c21      	adds	r1, r4, #0
    61f8:	2206      	movs	r2, #6
    61fa:	3110      	adds	r1, #16
    61fc:	4650      	mov	r0, sl
    61fe:	f003 fdaa 	bl	9d56 <memcpy>
    6202:	2300      	movs	r3, #0
    6204:	60ab      	str	r3, [r5, #8]
    6206:	60eb      	str	r3, [r5, #12]
    6208:	612b      	str	r3, [r5, #16]
    620a:	616b      	str	r3, [r5, #20]
    620c:	762b      	strb	r3, [r5, #24]
    620e:	766b      	strb	r3, [r5, #25]
    6210:	4643      	mov	r3, r8
    6212:	4a8e      	ldr	r2, [pc, #568]	; (644c <tc_init+0x29c>)
    6214:	009b      	lsls	r3, r3, #2
    6216:	509d      	str	r5, [r3, r2]
    6218:	464b      	mov	r3, r9
    621a:	602e      	str	r6, [r5, #0]
    621c:	789b      	ldrb	r3, [r3, #2]
    621e:	2b08      	cmp	r3, #8
    6220:	d00b      	beq.n	623a <tc_init+0x8a>
    6222:	712b      	strb	r3, [r5, #4]
    6224:	8833      	ldrh	r3, [r6, #0]
    6226:	2201      	movs	r2, #1
    6228:	2005      	movs	r0, #5
    622a:	07db      	lsls	r3, r3, #31
    622c:	d50a      	bpl.n	6244 <tc_init+0x94>
    622e:	b006      	add	sp, #24
    6230:	bc1c      	pop	{r2, r3, r4}
    6232:	4690      	mov	r8, r2
    6234:	4699      	mov	r9, r3
    6236:	46a2      	mov	sl, r4
    6238:	bdf0      	pop	{r4, r5, r6, r7, pc}
    623a:	4642      	mov	r2, r8
    623c:	2017      	movs	r0, #23
    623e:	07d2      	lsls	r2, r2, #31
    6240:	d5f5      	bpl.n	622e <tc_init+0x7e>
    6242:	e7ee      	b.n	6222 <tc_init+0x72>
    6244:	7bf3      	ldrb	r3, [r6, #15]
    6246:	3017      	adds	r0, #23
    6248:	06db      	lsls	r3, r3, #27
    624a:	d4f0      	bmi.n	622e <tc_init+0x7e>
    624c:	2102      	movs	r1, #2
    624e:	8833      	ldrh	r3, [r6, #0]
    6250:	400b      	ands	r3, r1
    6252:	d1ec      	bne.n	622e <tc_init+0x7e>
    6254:	4649      	mov	r1, r9
    6256:	7c09      	ldrb	r1, [r1, #16]
    6258:	2900      	cmp	r1, #0
    625a:	d000      	beq.n	625e <tc_init+0xae>
    625c:	e0d1      	b.n	6402 <tc_init+0x252>
    625e:	464b      	mov	r3, r9
    6260:	7f1b      	ldrb	r3, [r3, #28]
    6262:	2b00      	cmp	r3, #0
    6264:	d000      	beq.n	6268 <tc_init+0xb8>
    6266:	e0d8      	b.n	641a <tc_init+0x26a>
    6268:	4641      	mov	r1, r8
    626a:	4650      	mov	r0, sl
    626c:	4a78      	ldr	r2, [pc, #480]	; (6450 <tc_init+0x2a0>)
    626e:	0049      	lsls	r1, r1, #1
    6270:	6a13      	ldr	r3, [r2, #32]
    6272:	5a41      	ldrh	r1, [r0, r1]
    6274:	430b      	orrs	r3, r1
    6276:	6213      	str	r3, [r2, #32]
    6278:	464b      	mov	r3, r9
    627a:	789b      	ldrb	r3, [r3, #2]
    627c:	2b08      	cmp	r3, #8
    627e:	d100      	bne.n	6282 <tc_init+0xd2>
    6280:	e0da      	b.n	6438 <tc_init+0x288>
    6282:	464b      	mov	r3, r9
    6284:	466a      	mov	r2, sp
    6286:	781b      	ldrb	r3, [r3, #0]
    6288:	4669      	mov	r1, sp
    628a:	7013      	strb	r3, [r2, #0]
    628c:	466b      	mov	r3, sp
    628e:	4642      	mov	r2, r8
    6290:	3304      	adds	r3, #4
    6292:	5c9c      	ldrb	r4, [r3, r2]
    6294:	1c20      	adds	r0, r4, #0
    6296:	f7fe f873 	bl	4380 <system_gclk_chan_set_config>
    629a:	1c20      	adds	r0, r4, #0
    629c:	f7fe f832 	bl	4304 <system_gclk_chan_enable>
    62a0:	464b      	mov	r3, r9
    62a2:	464a      	mov	r2, r9
    62a4:	8898      	ldrh	r0, [r3, #4]
    62a6:	891b      	ldrh	r3, [r3, #8]
    62a8:	4303      	orrs	r3, r0
    62aa:	7990      	ldrb	r0, [r2, #6]
    62ac:	7892      	ldrb	r2, [r2, #2]
    62ae:	4310      	orrs	r0, r2
    62b0:	4318      	orrs	r0, r3
    62b2:	464b      	mov	r3, r9
    62b4:	785b      	ldrb	r3, [r3, #1]
    62b6:	2b00      	cmp	r3, #0
    62b8:	d002      	beq.n	62c0 <tc_init+0x110>
    62ba:	2380      	movs	r3, #128	; 0x80
    62bc:	011b      	lsls	r3, r3, #4
    62be:	4318      	orrs	r0, r3
    62c0:	227f      	movs	r2, #127	; 0x7f
    62c2:	6829      	ldr	r1, [r5, #0]
    62c4:	7bcb      	ldrb	r3, [r1, #15]
    62c6:	4393      	bics	r3, r2
    62c8:	d1fc      	bne.n	62c4 <tc_init+0x114>
    62ca:	464b      	mov	r3, r9
    62cc:	8030      	strh	r0, [r6, #0]
    62ce:	7b58      	ldrb	r0, [r3, #13]
    62d0:	1e43      	subs	r3, r0, #1
    62d2:	4198      	sbcs	r0, r3
    62d4:	464b      	mov	r3, r9
    62d6:	7b9b      	ldrb	r3, [r3, #14]
    62d8:	0080      	lsls	r0, r0, #2
    62da:	2b00      	cmp	r3, #0
    62dc:	d001      	beq.n	62e2 <tc_init+0x132>
    62de:	2301      	movs	r3, #1
    62e0:	4318      	orrs	r0, r3
    62e2:	227f      	movs	r2, #127	; 0x7f
    62e4:	6829      	ldr	r1, [r5, #0]
    62e6:	7bcb      	ldrb	r3, [r1, #15]
    62e8:	4393      	bics	r3, r2
    62ea:	d1fc      	bne.n	62e6 <tc_init+0x136>
    62ec:	33ff      	adds	r3, #255	; 0xff
    62ee:	7133      	strb	r3, [r6, #4]
    62f0:	2800      	cmp	r0, #0
    62f2:	d005      	beq.n	6300 <tc_init+0x150>
    62f4:	227f      	movs	r2, #127	; 0x7f
    62f6:	6829      	ldr	r1, [r5, #0]
    62f8:	7bcb      	ldrb	r3, [r1, #15]
    62fa:	4393      	bics	r3, r2
    62fc:	d1fc      	bne.n	62f8 <tc_init+0x148>
    62fe:	7170      	strb	r0, [r6, #5]
    6300:	464b      	mov	r3, r9
    6302:	7a98      	ldrb	r0, [r3, #10]
    6304:	7adb      	ldrb	r3, [r3, #11]
    6306:	2b00      	cmp	r3, #0
    6308:	d001      	beq.n	630e <tc_init+0x15e>
    630a:	2310      	movs	r3, #16
    630c:	4318      	orrs	r0, r3
    630e:	464b      	mov	r3, r9
    6310:	7b1b      	ldrb	r3, [r3, #12]
    6312:	2b00      	cmp	r3, #0
    6314:	d001      	beq.n	631a <tc_init+0x16a>
    6316:	2320      	movs	r3, #32
    6318:	4318      	orrs	r0, r3
    631a:	227f      	movs	r2, #127	; 0x7f
    631c:	6829      	ldr	r1, [r5, #0]
    631e:	7bcb      	ldrb	r3, [r1, #15]
    6320:	4393      	bics	r3, r2
    6322:	d1fc      	bne.n	631e <tc_init+0x16e>
    6324:	217f      	movs	r1, #127	; 0x7f
    6326:	71b0      	strb	r0, [r6, #6]
    6328:	682a      	ldr	r2, [r5, #0]
    632a:	7bd3      	ldrb	r3, [r2, #15]
    632c:	438b      	bics	r3, r1
    632e:	d1fc      	bne.n	632a <tc_init+0x17a>
    6330:	792b      	ldrb	r3, [r5, #4]
    6332:	217f      	movs	r1, #127	; 0x7f
    6334:	2b04      	cmp	r3, #4
    6336:	d007      	beq.n	6348 <tc_init+0x198>
    6338:	217f      	movs	r1, #127	; 0x7f
    633a:	2b08      	cmp	r3, #8
    633c:	d040      	beq.n	63c0 <tc_init+0x210>
    633e:	217f      	movs	r1, #127	; 0x7f
    6340:	2b00      	cmp	r3, #0
    6342:	d025      	beq.n	6390 <tc_init+0x1e0>
    6344:	2017      	movs	r0, #23
    6346:	e772      	b.n	622e <tc_init+0x7e>
    6348:	7bd3      	ldrb	r3, [r2, #15]
    634a:	438b      	bics	r3, r1
    634c:	d1fc      	bne.n	6348 <tc_init+0x198>
    634e:	464a      	mov	r2, r9
    6350:	3328      	adds	r3, #40	; 0x28
    6352:	5cd3      	ldrb	r3, [r2, r3]
    6354:	227f      	movs	r2, #127	; 0x7f
    6356:	7433      	strb	r3, [r6, #16]
    6358:	6829      	ldr	r1, [r5, #0]
    635a:	7bcb      	ldrb	r3, [r1, #15]
    635c:	4393      	bics	r3, r2
    635e:	d1fc      	bne.n	635a <tc_init+0x1aa>
    6360:	464a      	mov	r2, r9
    6362:	3329      	adds	r3, #41	; 0x29
    6364:	5cd3      	ldrb	r3, [r2, r3]
    6366:	227f      	movs	r2, #127	; 0x7f
    6368:	7533      	strb	r3, [r6, #20]
    636a:	6829      	ldr	r1, [r5, #0]
    636c:	7bcb      	ldrb	r3, [r1, #15]
    636e:	4393      	bics	r3, r2
    6370:	d1fc      	bne.n	636c <tc_init+0x1bc>
    6372:	464a      	mov	r2, r9
    6374:	332a      	adds	r3, #42	; 0x2a
    6376:	5cd3      	ldrb	r3, [r2, r3]
    6378:	227f      	movs	r2, #127	; 0x7f
    637a:	7633      	strb	r3, [r6, #24]
    637c:	6829      	ldr	r1, [r5, #0]
    637e:	7bcb      	ldrb	r3, [r1, #15]
    6380:	4393      	bics	r3, r2
    6382:	d1fc      	bne.n	637e <tc_init+0x1ce>
    6384:	464a      	mov	r2, r9
    6386:	332b      	adds	r3, #43	; 0x2b
    6388:	5cd3      	ldrb	r3, [r2, r3]
    638a:	2000      	movs	r0, #0
    638c:	7673      	strb	r3, [r6, #25]
    638e:	e74e      	b.n	622e <tc_init+0x7e>
    6390:	7bd3      	ldrb	r3, [r2, #15]
    6392:	438b      	bics	r3, r1
    6394:	d1fc      	bne.n	6390 <tc_init+0x1e0>
    6396:	464b      	mov	r3, r9
    6398:	227f      	movs	r2, #127	; 0x7f
    639a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    639c:	8233      	strh	r3, [r6, #16]
    639e:	6829      	ldr	r1, [r5, #0]
    63a0:	7bcb      	ldrb	r3, [r1, #15]
    63a2:	4393      	bics	r3, r2
    63a4:	d1fc      	bne.n	63a0 <tc_init+0x1f0>
    63a6:	464b      	mov	r3, r9
    63a8:	227f      	movs	r2, #127	; 0x7f
    63aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    63ac:	8333      	strh	r3, [r6, #24]
    63ae:	6829      	ldr	r1, [r5, #0]
    63b0:	7bcb      	ldrb	r3, [r1, #15]
    63b2:	4393      	bics	r3, r2
    63b4:	d1fc      	bne.n	63b0 <tc_init+0x200>
    63b6:	464b      	mov	r3, r9
    63b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    63ba:	2000      	movs	r0, #0
    63bc:	8373      	strh	r3, [r6, #26]
    63be:	e736      	b.n	622e <tc_init+0x7e>
    63c0:	7bd3      	ldrb	r3, [r2, #15]
    63c2:	438b      	bics	r3, r1
    63c4:	d1fc      	bne.n	63c0 <tc_init+0x210>
    63c6:	464b      	mov	r3, r9
    63c8:	227f      	movs	r2, #127	; 0x7f
    63ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    63cc:	6133      	str	r3, [r6, #16]
    63ce:	6829      	ldr	r1, [r5, #0]
    63d0:	7bcb      	ldrb	r3, [r1, #15]
    63d2:	4393      	bics	r3, r2
    63d4:	d1fc      	bne.n	63d0 <tc_init+0x220>
    63d6:	464b      	mov	r3, r9
    63d8:	227f      	movs	r2, #127	; 0x7f
    63da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    63dc:	61b3      	str	r3, [r6, #24]
    63de:	6829      	ldr	r1, [r5, #0]
    63e0:	7bcb      	ldrb	r3, [r1, #15]
    63e2:	4393      	bics	r3, r2
    63e4:	d1fc      	bne.n	63e0 <tc_init+0x230>
    63e6:	464b      	mov	r3, r9
    63e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    63ea:	2000      	movs	r0, #0
    63ec:	61f3      	str	r3, [r6, #28]
    63ee:	e71e      	b.n	622e <tc_init+0x7e>
    63f0:	2300      	movs	r3, #0
    63f2:	4698      	mov	r8, r3
    63f4:	e6f9      	b.n	61ea <tc_init+0x3a>
    63f6:	2301      	movs	r3, #1
    63f8:	4698      	mov	r8, r3
    63fa:	e6f6      	b.n	61ea <tc_init+0x3a>
    63fc:	2302      	movs	r3, #2
    63fe:	4698      	mov	r8, r3
    6400:	e6f3      	b.n	61ea <tc_init+0x3a>
    6402:	a902      	add	r1, sp, #8
    6404:	70cb      	strb	r3, [r1, #3]
    6406:	464b      	mov	r3, r9
    6408:	7e1b      	ldrb	r3, [r3, #24]
    640a:	708a      	strb	r2, [r1, #2]
    640c:	700b      	strb	r3, [r1, #0]
    640e:	464b      	mov	r3, r9
    6410:	7d18      	ldrb	r0, [r3, #20]
    6412:	704a      	strb	r2, [r1, #1]
    6414:	f7fd feaa 	bl	416c <system_pinmux_pin_set_config>
    6418:	e721      	b.n	625e <tc_init+0xae>
    641a:	2301      	movs	r3, #1
    641c:	2200      	movs	r2, #0
    641e:	a902      	add	r1, sp, #8
    6420:	708b      	strb	r3, [r1, #2]
    6422:	704b      	strb	r3, [r1, #1]
    6424:	464b      	mov	r3, r9
    6426:	70ca      	strb	r2, [r1, #3]
    6428:	464a      	mov	r2, r9
    642a:	6a1b      	ldr	r3, [r3, #32]
    642c:	6a52      	ldr	r2, [r2, #36]	; 0x24
    642e:	b2d8      	uxtb	r0, r3
    6430:	700a      	strb	r2, [r1, #0]
    6432:	f7fd fe9b 	bl	416c <system_pinmux_pin_set_config>
    6436:	e717      	b.n	6268 <tc_init+0xb8>
    6438:	4641      	mov	r1, r8
    643a:	3101      	adds	r1, #1
    643c:	0049      	lsls	r1, r1, #1
    643e:	6a13      	ldr	r3, [r2, #32]
    6440:	5a41      	ldrh	r1, [r0, r1]
    6442:	430b      	orrs	r3, r1
    6444:	6213      	str	r3, [r2, #32]
    6446:	e71c      	b.n	6282 <tc_init+0xd2>
    6448:	0000f740 	.word	0x0000f740
    644c:	200047bc 	.word	0x200047bc
    6450:	40000400 	.word	0x40000400

00006454 <tc_get_count_value>:
    6454:	217f      	movs	r1, #127	; 0x7f
    6456:	6802      	ldr	r2, [r0, #0]
    6458:	7bd3      	ldrb	r3, [r2, #15]
    645a:	438b      	bics	r3, r1
    645c:	d1fc      	bne.n	6458 <tc_get_count_value+0x4>
    645e:	7903      	ldrb	r3, [r0, #4]
    6460:	2b04      	cmp	r3, #4
    6462:	d00a      	beq.n	647a <tc_get_count_value+0x26>
    6464:	2b08      	cmp	r3, #8
    6466:	d006      	beq.n	6476 <tc_get_count_value+0x22>
    6468:	2000      	movs	r0, #0
    646a:	2b00      	cmp	r3, #0
    646c:	d000      	beq.n	6470 <tc_get_count_value+0x1c>
    646e:	4770      	bx	lr
    6470:	8a10      	ldrh	r0, [r2, #16]
    6472:	b280      	uxth	r0, r0
    6474:	e7fb      	b.n	646e <tc_get_count_value+0x1a>
    6476:	6910      	ldr	r0, [r2, #16]
    6478:	e7f9      	b.n	646e <tc_get_count_value+0x1a>
    647a:	7c10      	ldrb	r0, [r2, #16]
    647c:	b2c0      	uxtb	r0, r0
    647e:	e7f6      	b.n	646e <tc_get_count_value+0x1a>

00006480 <tc_set_compare_value>:
    6480:	b530      	push	{r4, r5, lr}
    6482:	257f      	movs	r5, #127	; 0x7f
    6484:	6804      	ldr	r4, [r0, #0]
    6486:	7be3      	ldrb	r3, [r4, #15]
    6488:	43ab      	bics	r3, r5
    648a:	d1fc      	bne.n	6486 <tc_set_compare_value+0x6>
    648c:	7903      	ldrb	r3, [r0, #4]
    648e:	2b04      	cmp	r3, #4
    6490:	d016      	beq.n	64c0 <tc_set_compare_value+0x40>
    6492:	2b08      	cmp	r3, #8
    6494:	d00c      	beq.n	64b0 <tc_set_compare_value+0x30>
    6496:	2017      	movs	r0, #23
    6498:	2b00      	cmp	r3, #0
    649a:	d000      	beq.n	649e <tc_set_compare_value+0x1e>
    649c:	bd30      	pop	{r4, r5, pc}
    649e:	2017      	movs	r0, #23
    64a0:	2901      	cmp	r1, #1
    64a2:	d8fb      	bhi.n	649c <tc_set_compare_value+0x1c>
    64a4:	310c      	adds	r1, #12
    64a6:	b292      	uxth	r2, r2
    64a8:	0049      	lsls	r1, r1, #1
    64aa:	530a      	strh	r2, [r1, r4]
    64ac:	2000      	movs	r0, #0
    64ae:	e7f5      	b.n	649c <tc_set_compare_value+0x1c>
    64b0:	2017      	movs	r0, #23
    64b2:	2901      	cmp	r1, #1
    64b4:	d8f2      	bhi.n	649c <tc_set_compare_value+0x1c>
    64b6:	3106      	adds	r1, #6
    64b8:	0089      	lsls	r1, r1, #2
    64ba:	510a      	str	r2, [r1, r4]
    64bc:	2000      	movs	r0, #0
    64be:	e7ed      	b.n	649c <tc_set_compare_value+0x1c>
    64c0:	2017      	movs	r0, #23
    64c2:	2901      	cmp	r1, #1
    64c4:	d8ea      	bhi.n	649c <tc_set_compare_value+0x1c>
    64c6:	b2d2      	uxtb	r2, r2
    64c8:	1861      	adds	r1, r4, r1
    64ca:	760a      	strb	r2, [r1, #24]
    64cc:	2000      	movs	r0, #0
    64ce:	e7e5      	b.n	649c <tc_set_compare_value+0x1c>

000064d0 <ticker_irq_handler>:
    64d0:	b538      	push	{r3, r4, r5, lr}
    64d2:	6803      	ldr	r3, [r0, #0]
    64d4:	1c05      	adds	r5, r0, #0
    64d6:	68db      	ldr	r3, [r3, #12]
    64d8:	4798      	blx	r3
    64da:	686b      	ldr	r3, [r5, #4]
    64dc:	685b      	ldr	r3, [r3, #4]
    64de:	e00d      	b.n	64fc <ticker_irq_handler+0x2c>
    64e0:	681c      	ldr	r4, [r3, #0]
    64e2:	682b      	ldr	r3, [r5, #0]
    64e4:	685b      	ldr	r3, [r3, #4]
    64e6:	4798      	blx	r3
    64e8:	1a24      	subs	r4, r4, r0
    64ea:	2c00      	cmp	r4, #0
    64ec:	dc0c      	bgt.n	6508 <ticker_irq_handler+0x38>
    64ee:	686a      	ldr	r2, [r5, #4]
    64f0:	6851      	ldr	r1, [r2, #4]
    64f2:	688b      	ldr	r3, [r1, #8]
    64f4:	6053      	str	r3, [r2, #4]
    64f6:	6812      	ldr	r2, [r2, #0]
    64f8:	2a00      	cmp	r2, #0
    64fa:	d10c      	bne.n	6516 <ticker_irq_handler+0x46>
    64fc:	2b00      	cmp	r3, #0
    64fe:	d1ef      	bne.n	64e0 <ticker_irq_handler+0x10>
    6500:	682b      	ldr	r3, [r5, #0]
    6502:	689b      	ldr	r3, [r3, #8]
    6504:	4798      	blx	r3
    6506:	bd38      	pop	{r3, r4, r5, pc}
    6508:	686a      	ldr	r2, [r5, #4]
    650a:	682b      	ldr	r3, [r5, #0]
    650c:	6852      	ldr	r2, [r2, #4]
    650e:	691b      	ldr	r3, [r3, #16]
    6510:	6810      	ldr	r0, [r2, #0]
    6512:	4798      	blx	r3
    6514:	e7f7      	b.n	6506 <ticker_irq_handler+0x36>
    6516:	6848      	ldr	r0, [r1, #4]
    6518:	4790      	blx	r2
    651a:	e7de      	b.n	64da <ticker_irq_handler+0xa>

0000651c <__aeabi_atexit>:
    651c:	b508      	push	{r3, lr}
    651e:	1c03      	adds	r3, r0, #0
    6520:	1c08      	adds	r0, r1, #0
    6522:	1c19      	adds	r1, r3, #0
    6524:	f003 f836 	bl	9594 <__cxa_atexit>
    6528:	bd08      	pop	{r3, pc}

0000652a <_ZdlPv>:
    652a:	b508      	push	{r3, lr}
    652c:	f003 fbfe 	bl	9d2c <free>
    6530:	bd08      	pop	{r3, pc}
	...

00006534 <__aeabi_uidiv>:
    6534:	2200      	movs	r2, #0
    6536:	0843      	lsrs	r3, r0, #1
    6538:	428b      	cmp	r3, r1
    653a:	d374      	bcc.n	6626 <__aeabi_uidiv+0xf2>
    653c:	0903      	lsrs	r3, r0, #4
    653e:	428b      	cmp	r3, r1
    6540:	d35f      	bcc.n	6602 <__aeabi_uidiv+0xce>
    6542:	0a03      	lsrs	r3, r0, #8
    6544:	428b      	cmp	r3, r1
    6546:	d344      	bcc.n	65d2 <__aeabi_uidiv+0x9e>
    6548:	0b03      	lsrs	r3, r0, #12
    654a:	428b      	cmp	r3, r1
    654c:	d328      	bcc.n	65a0 <__aeabi_uidiv+0x6c>
    654e:	0c03      	lsrs	r3, r0, #16
    6550:	428b      	cmp	r3, r1
    6552:	d30d      	bcc.n	6570 <__aeabi_uidiv+0x3c>
    6554:	22ff      	movs	r2, #255	; 0xff
    6556:	0209      	lsls	r1, r1, #8
    6558:	ba12      	rev	r2, r2
    655a:	0c03      	lsrs	r3, r0, #16
    655c:	428b      	cmp	r3, r1
    655e:	d302      	bcc.n	6566 <__aeabi_uidiv+0x32>
    6560:	1212      	asrs	r2, r2, #8
    6562:	0209      	lsls	r1, r1, #8
    6564:	d065      	beq.n	6632 <__aeabi_uidiv+0xfe>
    6566:	0b03      	lsrs	r3, r0, #12
    6568:	428b      	cmp	r3, r1
    656a:	d319      	bcc.n	65a0 <__aeabi_uidiv+0x6c>
    656c:	e000      	b.n	6570 <__aeabi_uidiv+0x3c>
    656e:	0a09      	lsrs	r1, r1, #8
    6570:	0bc3      	lsrs	r3, r0, #15
    6572:	428b      	cmp	r3, r1
    6574:	d301      	bcc.n	657a <__aeabi_uidiv+0x46>
    6576:	03cb      	lsls	r3, r1, #15
    6578:	1ac0      	subs	r0, r0, r3
    657a:	4152      	adcs	r2, r2
    657c:	0b83      	lsrs	r3, r0, #14
    657e:	428b      	cmp	r3, r1
    6580:	d301      	bcc.n	6586 <__aeabi_uidiv+0x52>
    6582:	038b      	lsls	r3, r1, #14
    6584:	1ac0      	subs	r0, r0, r3
    6586:	4152      	adcs	r2, r2
    6588:	0b43      	lsrs	r3, r0, #13
    658a:	428b      	cmp	r3, r1
    658c:	d301      	bcc.n	6592 <__aeabi_uidiv+0x5e>
    658e:	034b      	lsls	r3, r1, #13
    6590:	1ac0      	subs	r0, r0, r3
    6592:	4152      	adcs	r2, r2
    6594:	0b03      	lsrs	r3, r0, #12
    6596:	428b      	cmp	r3, r1
    6598:	d301      	bcc.n	659e <__aeabi_uidiv+0x6a>
    659a:	030b      	lsls	r3, r1, #12
    659c:	1ac0      	subs	r0, r0, r3
    659e:	4152      	adcs	r2, r2
    65a0:	0ac3      	lsrs	r3, r0, #11
    65a2:	428b      	cmp	r3, r1
    65a4:	d301      	bcc.n	65aa <__aeabi_uidiv+0x76>
    65a6:	02cb      	lsls	r3, r1, #11
    65a8:	1ac0      	subs	r0, r0, r3
    65aa:	4152      	adcs	r2, r2
    65ac:	0a83      	lsrs	r3, r0, #10
    65ae:	428b      	cmp	r3, r1
    65b0:	d301      	bcc.n	65b6 <__aeabi_uidiv+0x82>
    65b2:	028b      	lsls	r3, r1, #10
    65b4:	1ac0      	subs	r0, r0, r3
    65b6:	4152      	adcs	r2, r2
    65b8:	0a43      	lsrs	r3, r0, #9
    65ba:	428b      	cmp	r3, r1
    65bc:	d301      	bcc.n	65c2 <__aeabi_uidiv+0x8e>
    65be:	024b      	lsls	r3, r1, #9
    65c0:	1ac0      	subs	r0, r0, r3
    65c2:	4152      	adcs	r2, r2
    65c4:	0a03      	lsrs	r3, r0, #8
    65c6:	428b      	cmp	r3, r1
    65c8:	d301      	bcc.n	65ce <__aeabi_uidiv+0x9a>
    65ca:	020b      	lsls	r3, r1, #8
    65cc:	1ac0      	subs	r0, r0, r3
    65ce:	4152      	adcs	r2, r2
    65d0:	d2cd      	bcs.n	656e <__aeabi_uidiv+0x3a>
    65d2:	09c3      	lsrs	r3, r0, #7
    65d4:	428b      	cmp	r3, r1
    65d6:	d301      	bcc.n	65dc <__aeabi_uidiv+0xa8>
    65d8:	01cb      	lsls	r3, r1, #7
    65da:	1ac0      	subs	r0, r0, r3
    65dc:	4152      	adcs	r2, r2
    65de:	0983      	lsrs	r3, r0, #6
    65e0:	428b      	cmp	r3, r1
    65e2:	d301      	bcc.n	65e8 <__aeabi_uidiv+0xb4>
    65e4:	018b      	lsls	r3, r1, #6
    65e6:	1ac0      	subs	r0, r0, r3
    65e8:	4152      	adcs	r2, r2
    65ea:	0943      	lsrs	r3, r0, #5
    65ec:	428b      	cmp	r3, r1
    65ee:	d301      	bcc.n	65f4 <__aeabi_uidiv+0xc0>
    65f0:	014b      	lsls	r3, r1, #5
    65f2:	1ac0      	subs	r0, r0, r3
    65f4:	4152      	adcs	r2, r2
    65f6:	0903      	lsrs	r3, r0, #4
    65f8:	428b      	cmp	r3, r1
    65fa:	d301      	bcc.n	6600 <__aeabi_uidiv+0xcc>
    65fc:	010b      	lsls	r3, r1, #4
    65fe:	1ac0      	subs	r0, r0, r3
    6600:	4152      	adcs	r2, r2
    6602:	08c3      	lsrs	r3, r0, #3
    6604:	428b      	cmp	r3, r1
    6606:	d301      	bcc.n	660c <__aeabi_uidiv+0xd8>
    6608:	00cb      	lsls	r3, r1, #3
    660a:	1ac0      	subs	r0, r0, r3
    660c:	4152      	adcs	r2, r2
    660e:	0883      	lsrs	r3, r0, #2
    6610:	428b      	cmp	r3, r1
    6612:	d301      	bcc.n	6618 <__aeabi_uidiv+0xe4>
    6614:	008b      	lsls	r3, r1, #2
    6616:	1ac0      	subs	r0, r0, r3
    6618:	4152      	adcs	r2, r2
    661a:	0843      	lsrs	r3, r0, #1
    661c:	428b      	cmp	r3, r1
    661e:	d301      	bcc.n	6624 <__aeabi_uidiv+0xf0>
    6620:	004b      	lsls	r3, r1, #1
    6622:	1ac0      	subs	r0, r0, r3
    6624:	4152      	adcs	r2, r2
    6626:	1a41      	subs	r1, r0, r1
    6628:	d200      	bcs.n	662c <__aeabi_uidiv+0xf8>
    662a:	4601      	mov	r1, r0
    662c:	4152      	adcs	r2, r2
    662e:	4610      	mov	r0, r2
    6630:	4770      	bx	lr
    6632:	e7ff      	b.n	6634 <__aeabi_uidiv+0x100>
    6634:	b501      	push	{r0, lr}
    6636:	2000      	movs	r0, #0
    6638:	f000 f8fc 	bl	6834 <__aeabi_idiv0>
    663c:	bd02      	pop	{r1, pc}
    663e:	46c0      	nop			; (mov r8, r8)

00006640 <__aeabi_uidivmod>:
    6640:	2900      	cmp	r1, #0
    6642:	d0f7      	beq.n	6634 <__aeabi_uidiv+0x100>
    6644:	b503      	push	{r0, r1, lr}
    6646:	f7ff ff75 	bl	6534 <__aeabi_uidiv>
    664a:	bc0e      	pop	{r1, r2, r3}
    664c:	4342      	muls	r2, r0
    664e:	1a89      	subs	r1, r1, r2
    6650:	4718      	bx	r3
    6652:	46c0      	nop			; (mov r8, r8)

00006654 <__aeabi_idiv>:
    6654:	4603      	mov	r3, r0
    6656:	430b      	orrs	r3, r1
    6658:	d47f      	bmi.n	675a <__aeabi_idiv+0x106>
    665a:	2200      	movs	r2, #0
    665c:	0843      	lsrs	r3, r0, #1
    665e:	428b      	cmp	r3, r1
    6660:	d374      	bcc.n	674c <__aeabi_idiv+0xf8>
    6662:	0903      	lsrs	r3, r0, #4
    6664:	428b      	cmp	r3, r1
    6666:	d35f      	bcc.n	6728 <__aeabi_idiv+0xd4>
    6668:	0a03      	lsrs	r3, r0, #8
    666a:	428b      	cmp	r3, r1
    666c:	d344      	bcc.n	66f8 <__aeabi_idiv+0xa4>
    666e:	0b03      	lsrs	r3, r0, #12
    6670:	428b      	cmp	r3, r1
    6672:	d328      	bcc.n	66c6 <__aeabi_idiv+0x72>
    6674:	0c03      	lsrs	r3, r0, #16
    6676:	428b      	cmp	r3, r1
    6678:	d30d      	bcc.n	6696 <__aeabi_idiv+0x42>
    667a:	22ff      	movs	r2, #255	; 0xff
    667c:	0209      	lsls	r1, r1, #8
    667e:	ba12      	rev	r2, r2
    6680:	0c03      	lsrs	r3, r0, #16
    6682:	428b      	cmp	r3, r1
    6684:	d302      	bcc.n	668c <__aeabi_idiv+0x38>
    6686:	1212      	asrs	r2, r2, #8
    6688:	0209      	lsls	r1, r1, #8
    668a:	d065      	beq.n	6758 <__aeabi_idiv+0x104>
    668c:	0b03      	lsrs	r3, r0, #12
    668e:	428b      	cmp	r3, r1
    6690:	d319      	bcc.n	66c6 <__aeabi_idiv+0x72>
    6692:	e000      	b.n	6696 <__aeabi_idiv+0x42>
    6694:	0a09      	lsrs	r1, r1, #8
    6696:	0bc3      	lsrs	r3, r0, #15
    6698:	428b      	cmp	r3, r1
    669a:	d301      	bcc.n	66a0 <__aeabi_idiv+0x4c>
    669c:	03cb      	lsls	r3, r1, #15
    669e:	1ac0      	subs	r0, r0, r3
    66a0:	4152      	adcs	r2, r2
    66a2:	0b83      	lsrs	r3, r0, #14
    66a4:	428b      	cmp	r3, r1
    66a6:	d301      	bcc.n	66ac <__aeabi_idiv+0x58>
    66a8:	038b      	lsls	r3, r1, #14
    66aa:	1ac0      	subs	r0, r0, r3
    66ac:	4152      	adcs	r2, r2
    66ae:	0b43      	lsrs	r3, r0, #13
    66b0:	428b      	cmp	r3, r1
    66b2:	d301      	bcc.n	66b8 <__aeabi_idiv+0x64>
    66b4:	034b      	lsls	r3, r1, #13
    66b6:	1ac0      	subs	r0, r0, r3
    66b8:	4152      	adcs	r2, r2
    66ba:	0b03      	lsrs	r3, r0, #12
    66bc:	428b      	cmp	r3, r1
    66be:	d301      	bcc.n	66c4 <__aeabi_idiv+0x70>
    66c0:	030b      	lsls	r3, r1, #12
    66c2:	1ac0      	subs	r0, r0, r3
    66c4:	4152      	adcs	r2, r2
    66c6:	0ac3      	lsrs	r3, r0, #11
    66c8:	428b      	cmp	r3, r1
    66ca:	d301      	bcc.n	66d0 <__aeabi_idiv+0x7c>
    66cc:	02cb      	lsls	r3, r1, #11
    66ce:	1ac0      	subs	r0, r0, r3
    66d0:	4152      	adcs	r2, r2
    66d2:	0a83      	lsrs	r3, r0, #10
    66d4:	428b      	cmp	r3, r1
    66d6:	d301      	bcc.n	66dc <__aeabi_idiv+0x88>
    66d8:	028b      	lsls	r3, r1, #10
    66da:	1ac0      	subs	r0, r0, r3
    66dc:	4152      	adcs	r2, r2
    66de:	0a43      	lsrs	r3, r0, #9
    66e0:	428b      	cmp	r3, r1
    66e2:	d301      	bcc.n	66e8 <__aeabi_idiv+0x94>
    66e4:	024b      	lsls	r3, r1, #9
    66e6:	1ac0      	subs	r0, r0, r3
    66e8:	4152      	adcs	r2, r2
    66ea:	0a03      	lsrs	r3, r0, #8
    66ec:	428b      	cmp	r3, r1
    66ee:	d301      	bcc.n	66f4 <__aeabi_idiv+0xa0>
    66f0:	020b      	lsls	r3, r1, #8
    66f2:	1ac0      	subs	r0, r0, r3
    66f4:	4152      	adcs	r2, r2
    66f6:	d2cd      	bcs.n	6694 <__aeabi_idiv+0x40>
    66f8:	09c3      	lsrs	r3, r0, #7
    66fa:	428b      	cmp	r3, r1
    66fc:	d301      	bcc.n	6702 <__aeabi_idiv+0xae>
    66fe:	01cb      	lsls	r3, r1, #7
    6700:	1ac0      	subs	r0, r0, r3
    6702:	4152      	adcs	r2, r2
    6704:	0983      	lsrs	r3, r0, #6
    6706:	428b      	cmp	r3, r1
    6708:	d301      	bcc.n	670e <__aeabi_idiv+0xba>
    670a:	018b      	lsls	r3, r1, #6
    670c:	1ac0      	subs	r0, r0, r3
    670e:	4152      	adcs	r2, r2
    6710:	0943      	lsrs	r3, r0, #5
    6712:	428b      	cmp	r3, r1
    6714:	d301      	bcc.n	671a <__aeabi_idiv+0xc6>
    6716:	014b      	lsls	r3, r1, #5
    6718:	1ac0      	subs	r0, r0, r3
    671a:	4152      	adcs	r2, r2
    671c:	0903      	lsrs	r3, r0, #4
    671e:	428b      	cmp	r3, r1
    6720:	d301      	bcc.n	6726 <__aeabi_idiv+0xd2>
    6722:	010b      	lsls	r3, r1, #4
    6724:	1ac0      	subs	r0, r0, r3
    6726:	4152      	adcs	r2, r2
    6728:	08c3      	lsrs	r3, r0, #3
    672a:	428b      	cmp	r3, r1
    672c:	d301      	bcc.n	6732 <__aeabi_idiv+0xde>
    672e:	00cb      	lsls	r3, r1, #3
    6730:	1ac0      	subs	r0, r0, r3
    6732:	4152      	adcs	r2, r2
    6734:	0883      	lsrs	r3, r0, #2
    6736:	428b      	cmp	r3, r1
    6738:	d301      	bcc.n	673e <__aeabi_idiv+0xea>
    673a:	008b      	lsls	r3, r1, #2
    673c:	1ac0      	subs	r0, r0, r3
    673e:	4152      	adcs	r2, r2
    6740:	0843      	lsrs	r3, r0, #1
    6742:	428b      	cmp	r3, r1
    6744:	d301      	bcc.n	674a <__aeabi_idiv+0xf6>
    6746:	004b      	lsls	r3, r1, #1
    6748:	1ac0      	subs	r0, r0, r3
    674a:	4152      	adcs	r2, r2
    674c:	1a41      	subs	r1, r0, r1
    674e:	d200      	bcs.n	6752 <__aeabi_idiv+0xfe>
    6750:	4601      	mov	r1, r0
    6752:	4152      	adcs	r2, r2
    6754:	4610      	mov	r0, r2
    6756:	4770      	bx	lr
    6758:	e05d      	b.n	6816 <__aeabi_idiv+0x1c2>
    675a:	0fca      	lsrs	r2, r1, #31
    675c:	d000      	beq.n	6760 <__aeabi_idiv+0x10c>
    675e:	4249      	negs	r1, r1
    6760:	1003      	asrs	r3, r0, #32
    6762:	d300      	bcc.n	6766 <__aeabi_idiv+0x112>
    6764:	4240      	negs	r0, r0
    6766:	4053      	eors	r3, r2
    6768:	2200      	movs	r2, #0
    676a:	469c      	mov	ip, r3
    676c:	0903      	lsrs	r3, r0, #4
    676e:	428b      	cmp	r3, r1
    6770:	d32d      	bcc.n	67ce <__aeabi_idiv+0x17a>
    6772:	0a03      	lsrs	r3, r0, #8
    6774:	428b      	cmp	r3, r1
    6776:	d312      	bcc.n	679e <__aeabi_idiv+0x14a>
    6778:	22fc      	movs	r2, #252	; 0xfc
    677a:	0189      	lsls	r1, r1, #6
    677c:	ba12      	rev	r2, r2
    677e:	0a03      	lsrs	r3, r0, #8
    6780:	428b      	cmp	r3, r1
    6782:	d30c      	bcc.n	679e <__aeabi_idiv+0x14a>
    6784:	0189      	lsls	r1, r1, #6
    6786:	1192      	asrs	r2, r2, #6
    6788:	428b      	cmp	r3, r1
    678a:	d308      	bcc.n	679e <__aeabi_idiv+0x14a>
    678c:	0189      	lsls	r1, r1, #6
    678e:	1192      	asrs	r2, r2, #6
    6790:	428b      	cmp	r3, r1
    6792:	d304      	bcc.n	679e <__aeabi_idiv+0x14a>
    6794:	0189      	lsls	r1, r1, #6
    6796:	d03a      	beq.n	680e <__aeabi_idiv+0x1ba>
    6798:	1192      	asrs	r2, r2, #6
    679a:	e000      	b.n	679e <__aeabi_idiv+0x14a>
    679c:	0989      	lsrs	r1, r1, #6
    679e:	09c3      	lsrs	r3, r0, #7
    67a0:	428b      	cmp	r3, r1
    67a2:	d301      	bcc.n	67a8 <__aeabi_idiv+0x154>
    67a4:	01cb      	lsls	r3, r1, #7
    67a6:	1ac0      	subs	r0, r0, r3
    67a8:	4152      	adcs	r2, r2
    67aa:	0983      	lsrs	r3, r0, #6
    67ac:	428b      	cmp	r3, r1
    67ae:	d301      	bcc.n	67b4 <__aeabi_idiv+0x160>
    67b0:	018b      	lsls	r3, r1, #6
    67b2:	1ac0      	subs	r0, r0, r3
    67b4:	4152      	adcs	r2, r2
    67b6:	0943      	lsrs	r3, r0, #5
    67b8:	428b      	cmp	r3, r1
    67ba:	d301      	bcc.n	67c0 <__aeabi_idiv+0x16c>
    67bc:	014b      	lsls	r3, r1, #5
    67be:	1ac0      	subs	r0, r0, r3
    67c0:	4152      	adcs	r2, r2
    67c2:	0903      	lsrs	r3, r0, #4
    67c4:	428b      	cmp	r3, r1
    67c6:	d301      	bcc.n	67cc <__aeabi_idiv+0x178>
    67c8:	010b      	lsls	r3, r1, #4
    67ca:	1ac0      	subs	r0, r0, r3
    67cc:	4152      	adcs	r2, r2
    67ce:	08c3      	lsrs	r3, r0, #3
    67d0:	428b      	cmp	r3, r1
    67d2:	d301      	bcc.n	67d8 <__aeabi_idiv+0x184>
    67d4:	00cb      	lsls	r3, r1, #3
    67d6:	1ac0      	subs	r0, r0, r3
    67d8:	4152      	adcs	r2, r2
    67da:	0883      	lsrs	r3, r0, #2
    67dc:	428b      	cmp	r3, r1
    67de:	d301      	bcc.n	67e4 <__aeabi_idiv+0x190>
    67e0:	008b      	lsls	r3, r1, #2
    67e2:	1ac0      	subs	r0, r0, r3
    67e4:	4152      	adcs	r2, r2
    67e6:	d2d9      	bcs.n	679c <__aeabi_idiv+0x148>
    67e8:	0843      	lsrs	r3, r0, #1
    67ea:	428b      	cmp	r3, r1
    67ec:	d301      	bcc.n	67f2 <__aeabi_idiv+0x19e>
    67ee:	004b      	lsls	r3, r1, #1
    67f0:	1ac0      	subs	r0, r0, r3
    67f2:	4152      	adcs	r2, r2
    67f4:	1a41      	subs	r1, r0, r1
    67f6:	d200      	bcs.n	67fa <__aeabi_idiv+0x1a6>
    67f8:	4601      	mov	r1, r0
    67fa:	4663      	mov	r3, ip
    67fc:	4152      	adcs	r2, r2
    67fe:	105b      	asrs	r3, r3, #1
    6800:	4610      	mov	r0, r2
    6802:	d301      	bcc.n	6808 <__aeabi_idiv+0x1b4>
    6804:	4240      	negs	r0, r0
    6806:	2b00      	cmp	r3, #0
    6808:	d500      	bpl.n	680c <__aeabi_idiv+0x1b8>
    680a:	4249      	negs	r1, r1
    680c:	4770      	bx	lr
    680e:	4663      	mov	r3, ip
    6810:	105b      	asrs	r3, r3, #1
    6812:	d300      	bcc.n	6816 <__aeabi_idiv+0x1c2>
    6814:	4240      	negs	r0, r0
    6816:	b501      	push	{r0, lr}
    6818:	2000      	movs	r0, #0
    681a:	f000 f80b 	bl	6834 <__aeabi_idiv0>
    681e:	bd02      	pop	{r1, pc}

00006820 <__aeabi_idivmod>:
    6820:	2900      	cmp	r1, #0
    6822:	d0f8      	beq.n	6816 <__aeabi_idiv+0x1c2>
    6824:	b503      	push	{r0, r1, lr}
    6826:	f7ff ff15 	bl	6654 <__aeabi_idiv>
    682a:	bc0e      	pop	{r1, r2, r3}
    682c:	4342      	muls	r2, r0
    682e:	1a89      	subs	r1, r1, r2
    6830:	4718      	bx	r3
    6832:	46c0      	nop			; (mov r8, r8)

00006834 <__aeabi_idiv0>:
    6834:	4770      	bx	lr
    6836:	46c0      	nop			; (mov r8, r8)

00006838 <__aeabi_cdrcmple>:
    6838:	4684      	mov	ip, r0
    683a:	1c10      	adds	r0, r2, #0
    683c:	4662      	mov	r2, ip
    683e:	468c      	mov	ip, r1
    6840:	1c19      	adds	r1, r3, #0
    6842:	4663      	mov	r3, ip
    6844:	e000      	b.n	6848 <__aeabi_cdcmpeq>
    6846:	46c0      	nop			; (mov r8, r8)

00006848 <__aeabi_cdcmpeq>:
    6848:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    684a:	f001 fe83 	bl	8554 <__ledf2>
    684e:	2800      	cmp	r0, #0
    6850:	d401      	bmi.n	6856 <__aeabi_cdcmpeq+0xe>
    6852:	2100      	movs	r1, #0
    6854:	42c8      	cmn	r0, r1
    6856:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00006858 <__aeabi_dcmpeq>:
    6858:	b510      	push	{r4, lr}
    685a:	f001 fdc7 	bl	83ec <__eqdf2>
    685e:	4240      	negs	r0, r0
    6860:	3001      	adds	r0, #1
    6862:	bd10      	pop	{r4, pc}

00006864 <__aeabi_dcmplt>:
    6864:	b510      	push	{r4, lr}
    6866:	f001 fe75 	bl	8554 <__ledf2>
    686a:	2800      	cmp	r0, #0
    686c:	db01      	blt.n	6872 <__aeabi_dcmplt+0xe>
    686e:	2000      	movs	r0, #0
    6870:	bd10      	pop	{r4, pc}
    6872:	2001      	movs	r0, #1
    6874:	bd10      	pop	{r4, pc}
    6876:	46c0      	nop			; (mov r8, r8)

00006878 <__aeabi_dcmple>:
    6878:	b510      	push	{r4, lr}
    687a:	f001 fe6b 	bl	8554 <__ledf2>
    687e:	2800      	cmp	r0, #0
    6880:	dd01      	ble.n	6886 <__aeabi_dcmple+0xe>
    6882:	2000      	movs	r0, #0
    6884:	bd10      	pop	{r4, pc}
    6886:	2001      	movs	r0, #1
    6888:	bd10      	pop	{r4, pc}
    688a:	46c0      	nop			; (mov r8, r8)

0000688c <__aeabi_dcmpgt>:
    688c:	b510      	push	{r4, lr}
    688e:	f001 fdf1 	bl	8474 <__gedf2>
    6892:	2800      	cmp	r0, #0
    6894:	dc01      	bgt.n	689a <__aeabi_dcmpgt+0xe>
    6896:	2000      	movs	r0, #0
    6898:	bd10      	pop	{r4, pc}
    689a:	2001      	movs	r0, #1
    689c:	bd10      	pop	{r4, pc}
    689e:	46c0      	nop			; (mov r8, r8)

000068a0 <__aeabi_dcmpge>:
    68a0:	b510      	push	{r4, lr}
    68a2:	f001 fde7 	bl	8474 <__gedf2>
    68a6:	2800      	cmp	r0, #0
    68a8:	da01      	bge.n	68ae <__aeabi_dcmpge+0xe>
    68aa:	2000      	movs	r0, #0
    68ac:	bd10      	pop	{r4, pc}
    68ae:	2001      	movs	r0, #1
    68b0:	bd10      	pop	{r4, pc}
    68b2:	46c0      	nop			; (mov r8, r8)

000068b4 <__aeabi_cfrcmple>:
    68b4:	4684      	mov	ip, r0
    68b6:	1c08      	adds	r0, r1, #0
    68b8:	4661      	mov	r1, ip
    68ba:	e7ff      	b.n	68bc <__aeabi_cfcmpeq>

000068bc <__aeabi_cfcmpeq>:
    68bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    68be:	f000 fba3 	bl	7008 <__lesf2>
    68c2:	2800      	cmp	r0, #0
    68c4:	d401      	bmi.n	68ca <__aeabi_cfcmpeq+0xe>
    68c6:	2100      	movs	r1, #0
    68c8:	42c8      	cmn	r0, r1
    68ca:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000068cc <__aeabi_fcmpeq>:
    68cc:	b510      	push	{r4, lr}
    68ce:	f000 fb27 	bl	6f20 <__eqsf2>
    68d2:	4240      	negs	r0, r0
    68d4:	3001      	adds	r0, #1
    68d6:	bd10      	pop	{r4, pc}

000068d8 <__aeabi_fcmplt>:
    68d8:	b510      	push	{r4, lr}
    68da:	f000 fb95 	bl	7008 <__lesf2>
    68de:	2800      	cmp	r0, #0
    68e0:	db01      	blt.n	68e6 <__aeabi_fcmplt+0xe>
    68e2:	2000      	movs	r0, #0
    68e4:	bd10      	pop	{r4, pc}
    68e6:	2001      	movs	r0, #1
    68e8:	bd10      	pop	{r4, pc}
    68ea:	46c0      	nop			; (mov r8, r8)

000068ec <__aeabi_fcmple>:
    68ec:	b510      	push	{r4, lr}
    68ee:	f000 fb8b 	bl	7008 <__lesf2>
    68f2:	2800      	cmp	r0, #0
    68f4:	dd01      	ble.n	68fa <__aeabi_fcmple+0xe>
    68f6:	2000      	movs	r0, #0
    68f8:	bd10      	pop	{r4, pc}
    68fa:	2001      	movs	r0, #1
    68fc:	bd10      	pop	{r4, pc}
    68fe:	46c0      	nop			; (mov r8, r8)

00006900 <__aeabi_fcmpgt>:
    6900:	b510      	push	{r4, lr}
    6902:	f000 fb37 	bl	6f74 <__gesf2>
    6906:	2800      	cmp	r0, #0
    6908:	dc01      	bgt.n	690e <__aeabi_fcmpgt+0xe>
    690a:	2000      	movs	r0, #0
    690c:	bd10      	pop	{r4, pc}
    690e:	2001      	movs	r0, #1
    6910:	bd10      	pop	{r4, pc}
    6912:	46c0      	nop			; (mov r8, r8)

00006914 <__aeabi_fcmpge>:
    6914:	b510      	push	{r4, lr}
    6916:	f000 fb2d 	bl	6f74 <__gesf2>
    691a:	2800      	cmp	r0, #0
    691c:	da01      	bge.n	6922 <__aeabi_fcmpge+0xe>
    691e:	2000      	movs	r0, #0
    6920:	bd10      	pop	{r4, pc}
    6922:	2001      	movs	r0, #1
    6924:	bd10      	pop	{r4, pc}
    6926:	46c0      	nop			; (mov r8, r8)

00006928 <__aeabi_lmul>:
    6928:	b5f0      	push	{r4, r5, r6, r7, lr}
    692a:	464f      	mov	r7, r9
    692c:	4646      	mov	r6, r8
    692e:	0405      	lsls	r5, r0, #16
    6930:	0c2d      	lsrs	r5, r5, #16
    6932:	1c2c      	adds	r4, r5, #0
    6934:	b4c0      	push	{r6, r7}
    6936:	0417      	lsls	r7, r2, #16
    6938:	0c16      	lsrs	r6, r2, #16
    693a:	0c3f      	lsrs	r7, r7, #16
    693c:	4699      	mov	r9, r3
    693e:	0c03      	lsrs	r3, r0, #16
    6940:	437c      	muls	r4, r7
    6942:	4375      	muls	r5, r6
    6944:	435f      	muls	r7, r3
    6946:	4373      	muls	r3, r6
    6948:	197d      	adds	r5, r7, r5
    694a:	0c26      	lsrs	r6, r4, #16
    694c:	19ad      	adds	r5, r5, r6
    694e:	469c      	mov	ip, r3
    6950:	42af      	cmp	r7, r5
    6952:	d903      	bls.n	695c <__aeabi_lmul+0x34>
    6954:	2380      	movs	r3, #128	; 0x80
    6956:	025b      	lsls	r3, r3, #9
    6958:	4698      	mov	r8, r3
    695a:	44c4      	add	ip, r8
    695c:	464b      	mov	r3, r9
    695e:	4351      	muls	r1, r2
    6960:	4343      	muls	r3, r0
    6962:	0424      	lsls	r4, r4, #16
    6964:	0c2e      	lsrs	r6, r5, #16
    6966:	0c24      	lsrs	r4, r4, #16
    6968:	042d      	lsls	r5, r5, #16
    696a:	4466      	add	r6, ip
    696c:	192c      	adds	r4, r5, r4
    696e:	1859      	adds	r1, r3, r1
    6970:	1989      	adds	r1, r1, r6
    6972:	1c20      	adds	r0, r4, #0
    6974:	bc0c      	pop	{r2, r3}
    6976:	4690      	mov	r8, r2
    6978:	4699      	mov	r9, r3
    697a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000697c <__aeabi_d2uiz>:
    697c:	b538      	push	{r3, r4, r5, lr}
    697e:	2200      	movs	r2, #0
    6980:	4b0c      	ldr	r3, [pc, #48]	; (69b4 <__aeabi_d2uiz+0x38>)
    6982:	1c04      	adds	r4, r0, #0
    6984:	1c0d      	adds	r5, r1, #0
    6986:	f7ff ff8b 	bl	68a0 <__aeabi_dcmpge>
    698a:	2800      	cmp	r0, #0
    698c:	d104      	bne.n	6998 <__aeabi_d2uiz+0x1c>
    698e:	1c20      	adds	r0, r4, #0
    6990:	1c29      	adds	r1, r5, #0
    6992:	f002 fc59 	bl	9248 <__aeabi_d2iz>
    6996:	bd38      	pop	{r3, r4, r5, pc}
    6998:	4b06      	ldr	r3, [pc, #24]	; (69b4 <__aeabi_d2uiz+0x38>)
    699a:	2200      	movs	r2, #0
    699c:	1c20      	adds	r0, r4, #0
    699e:	1c29      	adds	r1, r5, #0
    69a0:	f002 f8d8 	bl	8b54 <__aeabi_dsub>
    69a4:	f002 fc50 	bl	9248 <__aeabi_d2iz>
    69a8:	2380      	movs	r3, #128	; 0x80
    69aa:	061b      	lsls	r3, r3, #24
    69ac:	469c      	mov	ip, r3
    69ae:	4460      	add	r0, ip
    69b0:	e7f1      	b.n	6996 <__aeabi_d2uiz+0x1a>
    69b2:	46c0      	nop			; (mov r8, r8)
    69b4:	41e00000 	.word	0x41e00000

000069b8 <__aeabi_fadd>:
    69b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    69ba:	004a      	lsls	r2, r1, #1
    69bc:	0243      	lsls	r3, r0, #9
    69be:	0044      	lsls	r4, r0, #1
    69c0:	024e      	lsls	r6, r1, #9
    69c2:	0fc5      	lsrs	r5, r0, #31
    69c4:	0e24      	lsrs	r4, r4, #24
    69c6:	1c28      	adds	r0, r5, #0
    69c8:	099b      	lsrs	r3, r3, #6
    69ca:	0e12      	lsrs	r2, r2, #24
    69cc:	0fc9      	lsrs	r1, r1, #31
    69ce:	09b7      	lsrs	r7, r6, #6
    69d0:	428d      	cmp	r5, r1
    69d2:	d040      	beq.n	6a56 <__aeabi_fadd+0x9e>
    69d4:	1aa0      	subs	r0, r4, r2
    69d6:	2800      	cmp	r0, #0
    69d8:	dc00      	bgt.n	69dc <__aeabi_fadd+0x24>
    69da:	e084      	b.n	6ae6 <__aeabi_fadd+0x12e>
    69dc:	2a00      	cmp	r2, #0
    69de:	d11c      	bne.n	6a1a <__aeabi_fadd+0x62>
    69e0:	2f00      	cmp	r7, #0
    69e2:	d15c      	bne.n	6a9e <__aeabi_fadd+0xe6>
    69e4:	075a      	lsls	r2, r3, #29
    69e6:	d004      	beq.n	69f2 <__aeabi_fadd+0x3a>
    69e8:	220f      	movs	r2, #15
    69ea:	401a      	ands	r2, r3
    69ec:	2a04      	cmp	r2, #4
    69ee:	d000      	beq.n	69f2 <__aeabi_fadd+0x3a>
    69f0:	3304      	adds	r3, #4
    69f2:	2280      	movs	r2, #128	; 0x80
    69f4:	04d2      	lsls	r2, r2, #19
    69f6:	401a      	ands	r2, r3
    69f8:	1c28      	adds	r0, r5, #0
    69fa:	2a00      	cmp	r2, #0
    69fc:	d024      	beq.n	6a48 <__aeabi_fadd+0x90>
    69fe:	3401      	adds	r4, #1
    6a00:	2cff      	cmp	r4, #255	; 0xff
    6a02:	d100      	bne.n	6a06 <__aeabi_fadd+0x4e>
    6a04:	e07b      	b.n	6afe <__aeabi_fadd+0x146>
    6a06:	019b      	lsls	r3, r3, #6
    6a08:	0a5b      	lsrs	r3, r3, #9
    6a0a:	b2e4      	uxtb	r4, r4
    6a0c:	025b      	lsls	r3, r3, #9
    6a0e:	05e4      	lsls	r4, r4, #23
    6a10:	0a5b      	lsrs	r3, r3, #9
    6a12:	4323      	orrs	r3, r4
    6a14:	07c0      	lsls	r0, r0, #31
    6a16:	4318      	orrs	r0, r3
    6a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6a1a:	2cff      	cmp	r4, #255	; 0xff
    6a1c:	d0e2      	beq.n	69e4 <__aeabi_fadd+0x2c>
    6a1e:	2280      	movs	r2, #128	; 0x80
    6a20:	04d2      	lsls	r2, r2, #19
    6a22:	4317      	orrs	r7, r2
    6a24:	2601      	movs	r6, #1
    6a26:	281b      	cmp	r0, #27
    6a28:	dc08      	bgt.n	6a3c <__aeabi_fadd+0x84>
    6a2a:	1c39      	adds	r1, r7, #0
    6a2c:	2220      	movs	r2, #32
    6a2e:	1c3e      	adds	r6, r7, #0
    6a30:	40c1      	lsrs	r1, r0
    6a32:	1a10      	subs	r0, r2, r0
    6a34:	4086      	lsls	r6, r0
    6a36:	1e77      	subs	r7, r6, #1
    6a38:	41be      	sbcs	r6, r7
    6a3a:	430e      	orrs	r6, r1
    6a3c:	1b9b      	subs	r3, r3, r6
    6a3e:	015a      	lsls	r2, r3, #5
    6a40:	d433      	bmi.n	6aaa <__aeabi_fadd+0xf2>
    6a42:	1c28      	adds	r0, r5, #0
    6a44:	075a      	lsls	r2, r3, #29
    6a46:	d1cf      	bne.n	69e8 <__aeabi_fadd+0x30>
    6a48:	08db      	lsrs	r3, r3, #3
    6a4a:	2cff      	cmp	r4, #255	; 0xff
    6a4c:	d01e      	beq.n	6a8c <__aeabi_fadd+0xd4>
    6a4e:	025b      	lsls	r3, r3, #9
    6a50:	0a5b      	lsrs	r3, r3, #9
    6a52:	b2e4      	uxtb	r4, r4
    6a54:	e7da      	b.n	6a0c <__aeabi_fadd+0x54>
    6a56:	1aa1      	subs	r1, r4, r2
    6a58:	2900      	cmp	r1, #0
    6a5a:	dd57      	ble.n	6b0c <__aeabi_fadd+0x154>
    6a5c:	2a00      	cmp	r2, #0
    6a5e:	d03a      	beq.n	6ad6 <__aeabi_fadd+0x11e>
    6a60:	2cff      	cmp	r4, #255	; 0xff
    6a62:	d0bf      	beq.n	69e4 <__aeabi_fadd+0x2c>
    6a64:	2280      	movs	r2, #128	; 0x80
    6a66:	04d2      	lsls	r2, r2, #19
    6a68:	4317      	orrs	r7, r2
    6a6a:	2601      	movs	r6, #1
    6a6c:	291b      	cmp	r1, #27
    6a6e:	dd72      	ble.n	6b56 <__aeabi_fadd+0x19e>
    6a70:	199b      	adds	r3, r3, r6
    6a72:	015a      	lsls	r2, r3, #5
    6a74:	d5e5      	bpl.n	6a42 <__aeabi_fadd+0x8a>
    6a76:	3401      	adds	r4, #1
    6a78:	2cff      	cmp	r4, #255	; 0xff
    6a7a:	d100      	bne.n	6a7e <__aeabi_fadd+0xc6>
    6a7c:	e087      	b.n	6b8e <__aeabi_fadd+0x1d6>
    6a7e:	2101      	movs	r1, #1
    6a80:	4a8a      	ldr	r2, [pc, #552]	; (6cac <__aeabi_fadd+0x2f4>)
    6a82:	4019      	ands	r1, r3
    6a84:	4013      	ands	r3, r2
    6a86:	085b      	lsrs	r3, r3, #1
    6a88:	430b      	orrs	r3, r1
    6a8a:	e7ab      	b.n	69e4 <__aeabi_fadd+0x2c>
    6a8c:	2b00      	cmp	r3, #0
    6a8e:	d036      	beq.n	6afe <__aeabi_fadd+0x146>
    6a90:	2280      	movs	r2, #128	; 0x80
    6a92:	03d2      	lsls	r2, r2, #15
    6a94:	4313      	orrs	r3, r2
    6a96:	025b      	lsls	r3, r3, #9
    6a98:	0a5b      	lsrs	r3, r3, #9
    6a9a:	24ff      	movs	r4, #255	; 0xff
    6a9c:	e7b6      	b.n	6a0c <__aeabi_fadd+0x54>
    6a9e:	3801      	subs	r0, #1
    6aa0:	2800      	cmp	r0, #0
    6aa2:	d13f      	bne.n	6b24 <__aeabi_fadd+0x16c>
    6aa4:	1bdb      	subs	r3, r3, r7
    6aa6:	015a      	lsls	r2, r3, #5
    6aa8:	d5cb      	bpl.n	6a42 <__aeabi_fadd+0x8a>
    6aaa:	019b      	lsls	r3, r3, #6
    6aac:	099e      	lsrs	r6, r3, #6
    6aae:	1c30      	adds	r0, r6, #0
    6ab0:	f002 fd52 	bl	9558 <__clzsi2>
    6ab4:	3805      	subs	r0, #5
    6ab6:	4086      	lsls	r6, r0
    6ab8:	4284      	cmp	r4, r0
    6aba:	dc23      	bgt.n	6b04 <__aeabi_fadd+0x14c>
    6abc:	1b00      	subs	r0, r0, r4
    6abe:	241f      	movs	r4, #31
    6ac0:	1c32      	adds	r2, r6, #0
    6ac2:	1c43      	adds	r3, r0, #1
    6ac4:	1a20      	subs	r0, r4, r0
    6ac6:	40da      	lsrs	r2, r3
    6ac8:	4086      	lsls	r6, r0
    6aca:	1c13      	adds	r3, r2, #0
    6acc:	1e74      	subs	r4, r6, #1
    6ace:	41a6      	sbcs	r6, r4
    6ad0:	2400      	movs	r4, #0
    6ad2:	4333      	orrs	r3, r6
    6ad4:	e786      	b.n	69e4 <__aeabi_fadd+0x2c>
    6ad6:	2f00      	cmp	r7, #0
    6ad8:	d100      	bne.n	6adc <__aeabi_fadd+0x124>
    6ada:	e783      	b.n	69e4 <__aeabi_fadd+0x2c>
    6adc:	3901      	subs	r1, #1
    6ade:	2900      	cmp	r1, #0
    6ae0:	d150      	bne.n	6b84 <__aeabi_fadd+0x1cc>
    6ae2:	19db      	adds	r3, r3, r7
    6ae4:	e7c5      	b.n	6a72 <__aeabi_fadd+0xba>
    6ae6:	2800      	cmp	r0, #0
    6ae8:	d120      	bne.n	6b2c <__aeabi_fadd+0x174>
    6aea:	1c62      	adds	r2, r4, #1
    6aec:	b2d2      	uxtb	r2, r2
    6aee:	2a01      	cmp	r2, #1
    6af0:	dd5e      	ble.n	6bb0 <__aeabi_fadd+0x1f8>
    6af2:	1bde      	subs	r6, r3, r7
    6af4:	0172      	lsls	r2, r6, #5
    6af6:	d528      	bpl.n	6b4a <__aeabi_fadd+0x192>
    6af8:	1afe      	subs	r6, r7, r3
    6afa:	1c0d      	adds	r5, r1, #0
    6afc:	e7d7      	b.n	6aae <__aeabi_fadd+0xf6>
    6afe:	24ff      	movs	r4, #255	; 0xff
    6b00:	2300      	movs	r3, #0
    6b02:	e783      	b.n	6a0c <__aeabi_fadd+0x54>
    6b04:	4b69      	ldr	r3, [pc, #420]	; (6cac <__aeabi_fadd+0x2f4>)
    6b06:	1a24      	subs	r4, r4, r0
    6b08:	4033      	ands	r3, r6
    6b0a:	e76b      	b.n	69e4 <__aeabi_fadd+0x2c>
    6b0c:	2900      	cmp	r1, #0
    6b0e:	d158      	bne.n	6bc2 <__aeabi_fadd+0x20a>
    6b10:	1c62      	adds	r2, r4, #1
    6b12:	b2d1      	uxtb	r1, r2
    6b14:	2901      	cmp	r1, #1
    6b16:	dd3c      	ble.n	6b92 <__aeabi_fadd+0x1da>
    6b18:	2aff      	cmp	r2, #255	; 0xff
    6b1a:	d037      	beq.n	6b8c <__aeabi_fadd+0x1d4>
    6b1c:	18fb      	adds	r3, r7, r3
    6b1e:	085b      	lsrs	r3, r3, #1
    6b20:	1c14      	adds	r4, r2, #0
    6b22:	e75f      	b.n	69e4 <__aeabi_fadd+0x2c>
    6b24:	2cff      	cmp	r4, #255	; 0xff
    6b26:	d000      	beq.n	6b2a <__aeabi_fadd+0x172>
    6b28:	e77c      	b.n	6a24 <__aeabi_fadd+0x6c>
    6b2a:	e75b      	b.n	69e4 <__aeabi_fadd+0x2c>
    6b2c:	2c00      	cmp	r4, #0
    6b2e:	d01e      	beq.n	6b6e <__aeabi_fadd+0x1b6>
    6b30:	2aff      	cmp	r2, #255	; 0xff
    6b32:	d023      	beq.n	6b7c <__aeabi_fadd+0x1c4>
    6b34:	2480      	movs	r4, #128	; 0x80
    6b36:	04e4      	lsls	r4, r4, #19
    6b38:	4240      	negs	r0, r0
    6b3a:	4323      	orrs	r3, r4
    6b3c:	281b      	cmp	r0, #27
    6b3e:	dd5b      	ble.n	6bf8 <__aeabi_fadd+0x240>
    6b40:	2301      	movs	r3, #1
    6b42:	1afb      	subs	r3, r7, r3
    6b44:	1c14      	adds	r4, r2, #0
    6b46:	1c0d      	adds	r5, r1, #0
    6b48:	e7ad      	b.n	6aa6 <__aeabi_fadd+0xee>
    6b4a:	2e00      	cmp	r6, #0
    6b4c:	d1af      	bne.n	6aae <__aeabi_fadd+0xf6>
    6b4e:	2300      	movs	r3, #0
    6b50:	2000      	movs	r0, #0
    6b52:	2400      	movs	r4, #0
    6b54:	e778      	b.n	6a48 <__aeabi_fadd+0x90>
    6b56:	1c3a      	adds	r2, r7, #0
    6b58:	40ca      	lsrs	r2, r1
    6b5a:	4694      	mov	ip, r2
    6b5c:	2220      	movs	r2, #32
    6b5e:	1c3e      	adds	r6, r7, #0
    6b60:	1a51      	subs	r1, r2, r1
    6b62:	408e      	lsls	r6, r1
    6b64:	4662      	mov	r2, ip
    6b66:	1e77      	subs	r7, r6, #1
    6b68:	41be      	sbcs	r6, r7
    6b6a:	4316      	orrs	r6, r2
    6b6c:	e780      	b.n	6a70 <__aeabi_fadd+0xb8>
    6b6e:	2b00      	cmp	r3, #0
    6b70:	d03e      	beq.n	6bf0 <__aeabi_fadd+0x238>
    6b72:	43c0      	mvns	r0, r0
    6b74:	2800      	cmp	r0, #0
    6b76:	d0e4      	beq.n	6b42 <__aeabi_fadd+0x18a>
    6b78:	2aff      	cmp	r2, #255	; 0xff
    6b7a:	d1df      	bne.n	6b3c <__aeabi_fadd+0x184>
    6b7c:	1c3b      	adds	r3, r7, #0
    6b7e:	24ff      	movs	r4, #255	; 0xff
    6b80:	1c0d      	adds	r5, r1, #0
    6b82:	e72f      	b.n	69e4 <__aeabi_fadd+0x2c>
    6b84:	2cff      	cmp	r4, #255	; 0xff
    6b86:	d000      	beq.n	6b8a <__aeabi_fadd+0x1d2>
    6b88:	e76f      	b.n	6a6a <__aeabi_fadd+0xb2>
    6b8a:	e72b      	b.n	69e4 <__aeabi_fadd+0x2c>
    6b8c:	24ff      	movs	r4, #255	; 0xff
    6b8e:	2300      	movs	r3, #0
    6b90:	e75a      	b.n	6a48 <__aeabi_fadd+0x90>
    6b92:	2c00      	cmp	r4, #0
    6b94:	d15a      	bne.n	6c4c <__aeabi_fadd+0x294>
    6b96:	2b00      	cmp	r3, #0
    6b98:	d07f      	beq.n	6c9a <__aeabi_fadd+0x2e2>
    6b9a:	2f00      	cmp	r7, #0
    6b9c:	d100      	bne.n	6ba0 <__aeabi_fadd+0x1e8>
    6b9e:	e721      	b.n	69e4 <__aeabi_fadd+0x2c>
    6ba0:	19db      	adds	r3, r3, r7
    6ba2:	015a      	lsls	r2, r3, #5
    6ba4:	d400      	bmi.n	6ba8 <__aeabi_fadd+0x1f0>
    6ba6:	e74c      	b.n	6a42 <__aeabi_fadd+0x8a>
    6ba8:	4a40      	ldr	r2, [pc, #256]	; (6cac <__aeabi_fadd+0x2f4>)
    6baa:	3401      	adds	r4, #1
    6bac:	4013      	ands	r3, r2
    6bae:	e719      	b.n	69e4 <__aeabi_fadd+0x2c>
    6bb0:	2c00      	cmp	r4, #0
    6bb2:	d115      	bne.n	6be0 <__aeabi_fadd+0x228>
    6bb4:	2b00      	cmp	r3, #0
    6bb6:	d12f      	bne.n	6c18 <__aeabi_fadd+0x260>
    6bb8:	2f00      	cmp	r7, #0
    6bba:	d05d      	beq.n	6c78 <__aeabi_fadd+0x2c0>
    6bbc:	1c3b      	adds	r3, r7, #0
    6bbe:	1c0d      	adds	r5, r1, #0
    6bc0:	e710      	b.n	69e4 <__aeabi_fadd+0x2c>
    6bc2:	2c00      	cmp	r4, #0
    6bc4:	d121      	bne.n	6c0a <__aeabi_fadd+0x252>
    6bc6:	2b00      	cmp	r3, #0
    6bc8:	d053      	beq.n	6c72 <__aeabi_fadd+0x2ba>
    6bca:	43c9      	mvns	r1, r1
    6bcc:	2900      	cmp	r1, #0
    6bce:	d004      	beq.n	6bda <__aeabi_fadd+0x222>
    6bd0:	2aff      	cmp	r2, #255	; 0xff
    6bd2:	d04b      	beq.n	6c6c <__aeabi_fadd+0x2b4>
    6bd4:	291b      	cmp	r1, #27
    6bd6:	dd57      	ble.n	6c88 <__aeabi_fadd+0x2d0>
    6bd8:	2301      	movs	r3, #1
    6bda:	19db      	adds	r3, r3, r7
    6bdc:	1c14      	adds	r4, r2, #0
    6bde:	e748      	b.n	6a72 <__aeabi_fadd+0xba>
    6be0:	2b00      	cmp	r3, #0
    6be2:	d122      	bne.n	6c2a <__aeabi_fadd+0x272>
    6be4:	2f00      	cmp	r7, #0
    6be6:	d04a      	beq.n	6c7e <__aeabi_fadd+0x2c6>
    6be8:	1c3b      	adds	r3, r7, #0
    6bea:	1c0d      	adds	r5, r1, #0
    6bec:	24ff      	movs	r4, #255	; 0xff
    6bee:	e6f9      	b.n	69e4 <__aeabi_fadd+0x2c>
    6bf0:	1c3b      	adds	r3, r7, #0
    6bf2:	1c14      	adds	r4, r2, #0
    6bf4:	1c0d      	adds	r5, r1, #0
    6bf6:	e6f5      	b.n	69e4 <__aeabi_fadd+0x2c>
    6bf8:	1c1d      	adds	r5, r3, #0
    6bfa:	2420      	movs	r4, #32
    6bfc:	40c5      	lsrs	r5, r0
    6bfe:	1a20      	subs	r0, r4, r0
    6c00:	4083      	lsls	r3, r0
    6c02:	1e58      	subs	r0, r3, #1
    6c04:	4183      	sbcs	r3, r0
    6c06:	432b      	orrs	r3, r5
    6c08:	e79b      	b.n	6b42 <__aeabi_fadd+0x18a>
    6c0a:	2aff      	cmp	r2, #255	; 0xff
    6c0c:	d02e      	beq.n	6c6c <__aeabi_fadd+0x2b4>
    6c0e:	2480      	movs	r4, #128	; 0x80
    6c10:	04e4      	lsls	r4, r4, #19
    6c12:	4249      	negs	r1, r1
    6c14:	4323      	orrs	r3, r4
    6c16:	e7dd      	b.n	6bd4 <__aeabi_fadd+0x21c>
    6c18:	2f00      	cmp	r7, #0
    6c1a:	d100      	bne.n	6c1e <__aeabi_fadd+0x266>
    6c1c:	e6e2      	b.n	69e4 <__aeabi_fadd+0x2c>
    6c1e:	1bda      	subs	r2, r3, r7
    6c20:	0150      	lsls	r0, r2, #5
    6c22:	d53c      	bpl.n	6c9e <__aeabi_fadd+0x2e6>
    6c24:	1afb      	subs	r3, r7, r3
    6c26:	1c0d      	adds	r5, r1, #0
    6c28:	e6dc      	b.n	69e4 <__aeabi_fadd+0x2c>
    6c2a:	24ff      	movs	r4, #255	; 0xff
    6c2c:	2f00      	cmp	r7, #0
    6c2e:	d100      	bne.n	6c32 <__aeabi_fadd+0x27a>
    6c30:	e6d8      	b.n	69e4 <__aeabi_fadd+0x2c>
    6c32:	2280      	movs	r2, #128	; 0x80
    6c34:	08db      	lsrs	r3, r3, #3
    6c36:	03d2      	lsls	r2, r2, #15
    6c38:	4213      	tst	r3, r2
    6c3a:	d004      	beq.n	6c46 <__aeabi_fadd+0x28e>
    6c3c:	08fe      	lsrs	r6, r7, #3
    6c3e:	4216      	tst	r6, r2
    6c40:	d101      	bne.n	6c46 <__aeabi_fadd+0x28e>
    6c42:	1c33      	adds	r3, r6, #0
    6c44:	1c0d      	adds	r5, r1, #0
    6c46:	00db      	lsls	r3, r3, #3
    6c48:	24ff      	movs	r4, #255	; 0xff
    6c4a:	e6cb      	b.n	69e4 <__aeabi_fadd+0x2c>
    6c4c:	2b00      	cmp	r3, #0
    6c4e:	d00d      	beq.n	6c6c <__aeabi_fadd+0x2b4>
    6c50:	24ff      	movs	r4, #255	; 0xff
    6c52:	2f00      	cmp	r7, #0
    6c54:	d100      	bne.n	6c58 <__aeabi_fadd+0x2a0>
    6c56:	e6c5      	b.n	69e4 <__aeabi_fadd+0x2c>
    6c58:	2280      	movs	r2, #128	; 0x80
    6c5a:	08db      	lsrs	r3, r3, #3
    6c5c:	03d2      	lsls	r2, r2, #15
    6c5e:	4213      	tst	r3, r2
    6c60:	d0f1      	beq.n	6c46 <__aeabi_fadd+0x28e>
    6c62:	08fe      	lsrs	r6, r7, #3
    6c64:	4216      	tst	r6, r2
    6c66:	d1ee      	bne.n	6c46 <__aeabi_fadd+0x28e>
    6c68:	1c33      	adds	r3, r6, #0
    6c6a:	e7ec      	b.n	6c46 <__aeabi_fadd+0x28e>
    6c6c:	1c3b      	adds	r3, r7, #0
    6c6e:	24ff      	movs	r4, #255	; 0xff
    6c70:	e6b8      	b.n	69e4 <__aeabi_fadd+0x2c>
    6c72:	1c3b      	adds	r3, r7, #0
    6c74:	1c14      	adds	r4, r2, #0
    6c76:	e6b5      	b.n	69e4 <__aeabi_fadd+0x2c>
    6c78:	1c23      	adds	r3, r4, #0
    6c7a:	2000      	movs	r0, #0
    6c7c:	e6e4      	b.n	6a48 <__aeabi_fadd+0x90>
    6c7e:	2380      	movs	r3, #128	; 0x80
    6c80:	2000      	movs	r0, #0
    6c82:	049b      	lsls	r3, r3, #18
    6c84:	24ff      	movs	r4, #255	; 0xff
    6c86:	e6df      	b.n	6a48 <__aeabi_fadd+0x90>
    6c88:	1c1e      	adds	r6, r3, #0
    6c8a:	2420      	movs	r4, #32
    6c8c:	40ce      	lsrs	r6, r1
    6c8e:	1a61      	subs	r1, r4, r1
    6c90:	408b      	lsls	r3, r1
    6c92:	1e59      	subs	r1, r3, #1
    6c94:	418b      	sbcs	r3, r1
    6c96:	4333      	orrs	r3, r6
    6c98:	e79f      	b.n	6bda <__aeabi_fadd+0x222>
    6c9a:	1c3b      	adds	r3, r7, #0
    6c9c:	e6a2      	b.n	69e4 <__aeabi_fadd+0x2c>
    6c9e:	1e13      	subs	r3, r2, #0
    6ca0:	d000      	beq.n	6ca4 <__aeabi_fadd+0x2ec>
    6ca2:	e6ce      	b.n	6a42 <__aeabi_fadd+0x8a>
    6ca4:	2300      	movs	r3, #0
    6ca6:	2000      	movs	r0, #0
    6ca8:	e6ce      	b.n	6a48 <__aeabi_fadd+0x90>
    6caa:	46c0      	nop			; (mov r8, r8)
    6cac:	fbffffff 	.word	0xfbffffff

00006cb0 <__aeabi_fdiv>:
    6cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    6cb2:	4656      	mov	r6, sl
    6cb4:	464d      	mov	r5, r9
    6cb6:	465f      	mov	r7, fp
    6cb8:	4644      	mov	r4, r8
    6cba:	b4f0      	push	{r4, r5, r6, r7}
    6cbc:	0243      	lsls	r3, r0, #9
    6cbe:	0045      	lsls	r5, r0, #1
    6cc0:	0fc7      	lsrs	r7, r0, #31
    6cc2:	b083      	sub	sp, #12
    6cc4:	468a      	mov	sl, r1
    6cc6:	0a5c      	lsrs	r4, r3, #9
    6cc8:	0e2e      	lsrs	r6, r5, #24
    6cca:	46b9      	mov	r9, r7
    6ccc:	d041      	beq.n	6d52 <__aeabi_fdiv+0xa2>
    6cce:	2eff      	cmp	r6, #255	; 0xff
    6cd0:	d026      	beq.n	6d20 <__aeabi_fdiv+0x70>
    6cd2:	2380      	movs	r3, #128	; 0x80
    6cd4:	041b      	lsls	r3, r3, #16
    6cd6:	4323      	orrs	r3, r4
    6cd8:	00dc      	lsls	r4, r3, #3
    6cda:	2300      	movs	r3, #0
    6cdc:	4698      	mov	r8, r3
    6cde:	469b      	mov	fp, r3
    6ce0:	3e7f      	subs	r6, #127	; 0x7f
    6ce2:	4653      	mov	r3, sl
    6ce4:	025b      	lsls	r3, r3, #9
    6ce6:	0a5d      	lsrs	r5, r3, #9
    6ce8:	4653      	mov	r3, sl
    6cea:	005a      	lsls	r2, r3, #1
    6cec:	0fdb      	lsrs	r3, r3, #31
    6cee:	0e12      	lsrs	r2, r2, #24
    6cf0:	469a      	mov	sl, r3
    6cf2:	d039      	beq.n	6d68 <__aeabi_fdiv+0xb8>
    6cf4:	2aff      	cmp	r2, #255	; 0xff
    6cf6:	d033      	beq.n	6d60 <__aeabi_fdiv+0xb0>
    6cf8:	2380      	movs	r3, #128	; 0x80
    6cfa:	041b      	lsls	r3, r3, #16
    6cfc:	432b      	orrs	r3, r5
    6cfe:	00dd      	lsls	r5, r3, #3
    6d00:	2300      	movs	r3, #0
    6d02:	3a7f      	subs	r2, #127	; 0x7f
    6d04:	4651      	mov	r1, sl
    6d06:	1ab2      	subs	r2, r6, r2
    6d08:	4646      	mov	r6, r8
    6d0a:	4079      	eors	r1, r7
    6d0c:	1c08      	adds	r0, r1, #0
    6d0e:	9201      	str	r2, [sp, #4]
    6d10:	431e      	orrs	r6, r3
    6d12:	2e0f      	cmp	r6, #15
    6d14:	d900      	bls.n	6d18 <__aeabi_fdiv+0x68>
    6d16:	e076      	b.n	6e06 <__aeabi_fdiv+0x156>
    6d18:	4a7e      	ldr	r2, [pc, #504]	; (6f14 <__aeabi_fdiv+0x264>)
    6d1a:	00b6      	lsls	r6, r6, #2
    6d1c:	5996      	ldr	r6, [r2, r6]
    6d1e:	46b7      	mov	pc, r6
    6d20:	2c00      	cmp	r4, #0
    6d22:	d130      	bne.n	6d86 <__aeabi_fdiv+0xd6>
    6d24:	2308      	movs	r3, #8
    6d26:	4698      	mov	r8, r3
    6d28:	3b06      	subs	r3, #6
    6d2a:	469b      	mov	fp, r3
    6d2c:	e7d9      	b.n	6ce2 <__aeabi_fdiv+0x32>
    6d2e:	2380      	movs	r3, #128	; 0x80
    6d30:	2100      	movs	r1, #0
    6d32:	03db      	lsls	r3, r3, #15
    6d34:	24ff      	movs	r4, #255	; 0xff
    6d36:	025b      	lsls	r3, r3, #9
    6d38:	05e4      	lsls	r4, r4, #23
    6d3a:	0a5b      	lsrs	r3, r3, #9
    6d3c:	07c9      	lsls	r1, r1, #31
    6d3e:	4323      	orrs	r3, r4
    6d40:	430b      	orrs	r3, r1
    6d42:	1c18      	adds	r0, r3, #0
    6d44:	b003      	add	sp, #12
    6d46:	bc3c      	pop	{r2, r3, r4, r5}
    6d48:	4690      	mov	r8, r2
    6d4a:	4699      	mov	r9, r3
    6d4c:	46a2      	mov	sl, r4
    6d4e:	46ab      	mov	fp, r5
    6d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6d52:	2c00      	cmp	r4, #0
    6d54:	d128      	bne.n	6da8 <__aeabi_fdiv+0xf8>
    6d56:	2304      	movs	r3, #4
    6d58:	4698      	mov	r8, r3
    6d5a:	3b03      	subs	r3, #3
    6d5c:	469b      	mov	fp, r3
    6d5e:	e7c0      	b.n	6ce2 <__aeabi_fdiv+0x32>
    6d60:	2d00      	cmp	r5, #0
    6d62:	d11f      	bne.n	6da4 <__aeabi_fdiv+0xf4>
    6d64:	2302      	movs	r3, #2
    6d66:	e002      	b.n	6d6e <__aeabi_fdiv+0xbe>
    6d68:	2d00      	cmp	r5, #0
    6d6a:	d111      	bne.n	6d90 <__aeabi_fdiv+0xe0>
    6d6c:	2301      	movs	r3, #1
    6d6e:	1ab2      	subs	r2, r6, r2
    6d70:	4650      	mov	r0, sl
    6d72:	4646      	mov	r6, r8
    6d74:	4078      	eors	r0, r7
    6d76:	9201      	str	r2, [sp, #4]
    6d78:	431e      	orrs	r6, r3
    6d7a:	2e0f      	cmp	r6, #15
    6d7c:	d827      	bhi.n	6dce <__aeabi_fdiv+0x11e>
    6d7e:	4966      	ldr	r1, [pc, #408]	; (6f18 <__aeabi_fdiv+0x268>)
    6d80:	00b6      	lsls	r6, r6, #2
    6d82:	5989      	ldr	r1, [r1, r6]
    6d84:	468f      	mov	pc, r1
    6d86:	230c      	movs	r3, #12
    6d88:	4698      	mov	r8, r3
    6d8a:	3b09      	subs	r3, #9
    6d8c:	469b      	mov	fp, r3
    6d8e:	e7a8      	b.n	6ce2 <__aeabi_fdiv+0x32>
    6d90:	1c28      	adds	r0, r5, #0
    6d92:	f002 fbe1 	bl	9558 <__clzsi2>
    6d96:	2276      	movs	r2, #118	; 0x76
    6d98:	1f43      	subs	r3, r0, #5
    6d9a:	4252      	negs	r2, r2
    6d9c:	409d      	lsls	r5, r3
    6d9e:	1a12      	subs	r2, r2, r0
    6da0:	2300      	movs	r3, #0
    6da2:	e7af      	b.n	6d04 <__aeabi_fdiv+0x54>
    6da4:	2303      	movs	r3, #3
    6da6:	e7ad      	b.n	6d04 <__aeabi_fdiv+0x54>
    6da8:	1c20      	adds	r0, r4, #0
    6daa:	f002 fbd5 	bl	9558 <__clzsi2>
    6dae:	1f43      	subs	r3, r0, #5
    6db0:	409c      	lsls	r4, r3
    6db2:	2376      	movs	r3, #118	; 0x76
    6db4:	425b      	negs	r3, r3
    6db6:	1a1e      	subs	r6, r3, r0
    6db8:	2300      	movs	r3, #0
    6dba:	4698      	mov	r8, r3
    6dbc:	469b      	mov	fp, r3
    6dbe:	e790      	b.n	6ce2 <__aeabi_fdiv+0x32>
    6dc0:	2500      	movs	r5, #0
    6dc2:	46d1      	mov	r9, sl
    6dc4:	469b      	mov	fp, r3
    6dc6:	465b      	mov	r3, fp
    6dc8:	4648      	mov	r0, r9
    6dca:	2b02      	cmp	r3, #2
    6dcc:	d16f      	bne.n	6eae <__aeabi_fdiv+0x1fe>
    6dce:	2101      	movs	r1, #1
    6dd0:	24ff      	movs	r4, #255	; 0xff
    6dd2:	4001      	ands	r1, r0
    6dd4:	2300      	movs	r3, #0
    6dd6:	e7ae      	b.n	6d36 <__aeabi_fdiv+0x86>
    6dd8:	237e      	movs	r3, #126	; 0x7e
    6dda:	9a01      	ldr	r2, [sp, #4]
    6ddc:	425b      	negs	r3, r3
    6dde:	1a9b      	subs	r3, r3, r2
    6de0:	2b1b      	cmp	r3, #27
    6de2:	dd6d      	ble.n	6ec0 <__aeabi_fdiv+0x210>
    6de4:	2101      	movs	r1, #1
    6de6:	464b      	mov	r3, r9
    6de8:	4019      	ands	r1, r3
    6dea:	2400      	movs	r4, #0
    6dec:	2300      	movs	r3, #0
    6dee:	e7a2      	b.n	6d36 <__aeabi_fdiv+0x86>
    6df0:	2380      	movs	r3, #128	; 0x80
    6df2:	03db      	lsls	r3, r3, #15
    6df4:	421c      	tst	r4, r3
    6df6:	d149      	bne.n	6e8c <__aeabi_fdiv+0x1dc>
    6df8:	2380      	movs	r3, #128	; 0x80
    6dfa:	03db      	lsls	r3, r3, #15
    6dfc:	4323      	orrs	r3, r4
    6dfe:	025b      	lsls	r3, r3, #9
    6e00:	0a5b      	lsrs	r3, r3, #9
    6e02:	1c39      	adds	r1, r7, #0
    6e04:	e796      	b.n	6d34 <__aeabi_fdiv+0x84>
    6e06:	0163      	lsls	r3, r4, #5
    6e08:	016d      	lsls	r5, r5, #5
    6e0a:	42ab      	cmp	r3, r5
    6e0c:	d337      	bcc.n	6e7e <__aeabi_fdiv+0x1ce>
    6e0e:	4689      	mov	r9, r1
    6e10:	201a      	movs	r0, #26
    6e12:	2101      	movs	r1, #1
    6e14:	1b5b      	subs	r3, r3, r5
    6e16:	2401      	movs	r4, #1
    6e18:	1c1e      	adds	r6, r3, #0
    6e1a:	0049      	lsls	r1, r1, #1
    6e1c:	005b      	lsls	r3, r3, #1
    6e1e:	2e00      	cmp	r6, #0
    6e20:	db01      	blt.n	6e26 <__aeabi_fdiv+0x176>
    6e22:	42ab      	cmp	r3, r5
    6e24:	d301      	bcc.n	6e2a <__aeabi_fdiv+0x17a>
    6e26:	1b5b      	subs	r3, r3, r5
    6e28:	4321      	orrs	r1, r4
    6e2a:	3801      	subs	r0, #1
    6e2c:	2800      	cmp	r0, #0
    6e2e:	d1f3      	bne.n	6e18 <__aeabi_fdiv+0x168>
    6e30:	1e58      	subs	r0, r3, #1
    6e32:	4183      	sbcs	r3, r0
    6e34:	430b      	orrs	r3, r1
    6e36:	1c1d      	adds	r5, r3, #0
    6e38:	9c01      	ldr	r4, [sp, #4]
    6e3a:	347f      	adds	r4, #127	; 0x7f
    6e3c:	2c00      	cmp	r4, #0
    6e3e:	ddcb      	ble.n	6dd8 <__aeabi_fdiv+0x128>
    6e40:	076b      	lsls	r3, r5, #29
    6e42:	d004      	beq.n	6e4e <__aeabi_fdiv+0x19e>
    6e44:	230f      	movs	r3, #15
    6e46:	402b      	ands	r3, r5
    6e48:	2b04      	cmp	r3, #4
    6e4a:	d000      	beq.n	6e4e <__aeabi_fdiv+0x19e>
    6e4c:	3504      	adds	r5, #4
    6e4e:	012b      	lsls	r3, r5, #4
    6e50:	d504      	bpl.n	6e5c <__aeabi_fdiv+0x1ac>
    6e52:	9a01      	ldr	r2, [sp, #4]
    6e54:	4b31      	ldr	r3, [pc, #196]	; (6f1c <__aeabi_fdiv+0x26c>)
    6e56:	3280      	adds	r2, #128	; 0x80
    6e58:	1c14      	adds	r4, r2, #0
    6e5a:	401d      	ands	r5, r3
    6e5c:	2cfe      	cmp	r4, #254	; 0xfe
    6e5e:	dd07      	ble.n	6e70 <__aeabi_fdiv+0x1c0>
    6e60:	464b      	mov	r3, r9
    6e62:	2101      	movs	r1, #1
    6e64:	24ff      	movs	r4, #255	; 0xff
    6e66:	4019      	ands	r1, r3
    6e68:	2300      	movs	r3, #0
    6e6a:	e764      	b.n	6d36 <__aeabi_fdiv+0x86>
    6e6c:	1c25      	adds	r5, r4, #0
    6e6e:	e7aa      	b.n	6dc6 <__aeabi_fdiv+0x116>
    6e70:	2101      	movs	r1, #1
    6e72:	464a      	mov	r2, r9
    6e74:	01ab      	lsls	r3, r5, #6
    6e76:	0a5b      	lsrs	r3, r3, #9
    6e78:	b2e4      	uxtb	r4, r4
    6e7a:	4011      	ands	r1, r2
    6e7c:	e75b      	b.n	6d36 <__aeabi_fdiv+0x86>
    6e7e:	9a01      	ldr	r2, [sp, #4]
    6e80:	4689      	mov	r9, r1
    6e82:	3a01      	subs	r2, #1
    6e84:	9201      	str	r2, [sp, #4]
    6e86:	201b      	movs	r0, #27
    6e88:	2100      	movs	r1, #0
    6e8a:	e7c4      	b.n	6e16 <__aeabi_fdiv+0x166>
    6e8c:	421d      	tst	r5, r3
    6e8e:	d007      	beq.n	6ea0 <__aeabi_fdiv+0x1f0>
    6e90:	4323      	orrs	r3, r4
    6e92:	025b      	lsls	r3, r3, #9
    6e94:	0a5b      	lsrs	r3, r3, #9
    6e96:	1c39      	adds	r1, r7, #0
    6e98:	e74c      	b.n	6d34 <__aeabi_fdiv+0x84>
    6e9a:	2500      	movs	r5, #0
    6e9c:	0263      	lsls	r3, r4, #9
    6e9e:	d5ab      	bpl.n	6df8 <__aeabi_fdiv+0x148>
    6ea0:	2380      	movs	r3, #128	; 0x80
    6ea2:	03db      	lsls	r3, r3, #15
    6ea4:	432b      	orrs	r3, r5
    6ea6:	025b      	lsls	r3, r3, #9
    6ea8:	0a5b      	lsrs	r3, r3, #9
    6eaa:	4651      	mov	r1, sl
    6eac:	e742      	b.n	6d34 <__aeabi_fdiv+0x84>
    6eae:	2b03      	cmp	r3, #3
    6eb0:	d025      	beq.n	6efe <__aeabi_fdiv+0x24e>
    6eb2:	2b01      	cmp	r3, #1
    6eb4:	d1c0      	bne.n	6e38 <__aeabi_fdiv+0x188>
    6eb6:	2101      	movs	r1, #1
    6eb8:	2400      	movs	r4, #0
    6eba:	4001      	ands	r1, r0
    6ebc:	2300      	movs	r3, #0
    6ebe:	e73a      	b.n	6d36 <__aeabi_fdiv+0x86>
    6ec0:	1c29      	adds	r1, r5, #0
    6ec2:	40d9      	lsrs	r1, r3
    6ec4:	1c2b      	adds	r3, r5, #0
    6ec6:	9a01      	ldr	r2, [sp, #4]
    6ec8:	329e      	adds	r2, #158	; 0x9e
    6eca:	4093      	lsls	r3, r2
    6ecc:	1e5d      	subs	r5, r3, #1
    6ece:	41ab      	sbcs	r3, r5
    6ed0:	430b      	orrs	r3, r1
    6ed2:	075a      	lsls	r2, r3, #29
    6ed4:	d004      	beq.n	6ee0 <__aeabi_fdiv+0x230>
    6ed6:	220f      	movs	r2, #15
    6ed8:	401a      	ands	r2, r3
    6eda:	2a04      	cmp	r2, #4
    6edc:	d000      	beq.n	6ee0 <__aeabi_fdiv+0x230>
    6ede:	3304      	adds	r3, #4
    6ee0:	015a      	lsls	r2, r3, #5
    6ee2:	d505      	bpl.n	6ef0 <__aeabi_fdiv+0x240>
    6ee4:	464b      	mov	r3, r9
    6ee6:	2101      	movs	r1, #1
    6ee8:	2401      	movs	r4, #1
    6eea:	4019      	ands	r1, r3
    6eec:	2300      	movs	r3, #0
    6eee:	e722      	b.n	6d36 <__aeabi_fdiv+0x86>
    6ef0:	2101      	movs	r1, #1
    6ef2:	464a      	mov	r2, r9
    6ef4:	019b      	lsls	r3, r3, #6
    6ef6:	0a5b      	lsrs	r3, r3, #9
    6ef8:	4011      	ands	r1, r2
    6efa:	2400      	movs	r4, #0
    6efc:	e71b      	b.n	6d36 <__aeabi_fdiv+0x86>
    6efe:	2380      	movs	r3, #128	; 0x80
    6f00:	2101      	movs	r1, #1
    6f02:	464a      	mov	r2, r9
    6f04:	03db      	lsls	r3, r3, #15
    6f06:	432b      	orrs	r3, r5
    6f08:	025b      	lsls	r3, r3, #9
    6f0a:	400a      	ands	r2, r1
    6f0c:	0a5b      	lsrs	r3, r3, #9
    6f0e:	1c11      	adds	r1, r2, #0
    6f10:	e710      	b.n	6d34 <__aeabi_fdiv+0x84>
    6f12:	46c0      	nop			; (mov r8, r8)
    6f14:	0000f758 	.word	0x0000f758
    6f18:	0000f798 	.word	0x0000f798
    6f1c:	f7ffffff 	.word	0xf7ffffff

00006f20 <__eqsf2>:
    6f20:	0243      	lsls	r3, r0, #9
    6f22:	b570      	push	{r4, r5, r6, lr}
    6f24:	0042      	lsls	r2, r0, #1
    6f26:	004c      	lsls	r4, r1, #1
    6f28:	0a5d      	lsrs	r5, r3, #9
    6f2a:	0fc3      	lsrs	r3, r0, #31
    6f2c:	0248      	lsls	r0, r1, #9
    6f2e:	0e12      	lsrs	r2, r2, #24
    6f30:	0a46      	lsrs	r6, r0, #9
    6f32:	0e24      	lsrs	r4, r4, #24
    6f34:	0fc9      	lsrs	r1, r1, #31
    6f36:	2aff      	cmp	r2, #255	; 0xff
    6f38:	d005      	beq.n	6f46 <__eqsf2+0x26>
    6f3a:	2cff      	cmp	r4, #255	; 0xff
    6f3c:	d008      	beq.n	6f50 <__eqsf2+0x30>
    6f3e:	2001      	movs	r0, #1
    6f40:	42a2      	cmp	r2, r4
    6f42:	d00b      	beq.n	6f5c <__eqsf2+0x3c>
    6f44:	bd70      	pop	{r4, r5, r6, pc}
    6f46:	2001      	movs	r0, #1
    6f48:	2d00      	cmp	r5, #0
    6f4a:	d1fb      	bne.n	6f44 <__eqsf2+0x24>
    6f4c:	2cff      	cmp	r4, #255	; 0xff
    6f4e:	d1f6      	bne.n	6f3e <__eqsf2+0x1e>
    6f50:	2001      	movs	r0, #1
    6f52:	2e00      	cmp	r6, #0
    6f54:	d1f6      	bne.n	6f44 <__eqsf2+0x24>
    6f56:	2001      	movs	r0, #1
    6f58:	42a2      	cmp	r2, r4
    6f5a:	d1f3      	bne.n	6f44 <__eqsf2+0x24>
    6f5c:	42b5      	cmp	r5, r6
    6f5e:	d1f1      	bne.n	6f44 <__eqsf2+0x24>
    6f60:	428b      	cmp	r3, r1
    6f62:	d005      	beq.n	6f70 <__eqsf2+0x50>
    6f64:	2a00      	cmp	r2, #0
    6f66:	d1ed      	bne.n	6f44 <__eqsf2+0x24>
    6f68:	1c28      	adds	r0, r5, #0
    6f6a:	1e43      	subs	r3, r0, #1
    6f6c:	4198      	sbcs	r0, r3
    6f6e:	e7e9      	b.n	6f44 <__eqsf2+0x24>
    6f70:	2000      	movs	r0, #0
    6f72:	e7e7      	b.n	6f44 <__eqsf2+0x24>

00006f74 <__gesf2>:
    6f74:	b5f0      	push	{r4, r5, r6, r7, lr}
    6f76:	0243      	lsls	r3, r0, #9
    6f78:	024d      	lsls	r5, r1, #9
    6f7a:	004a      	lsls	r2, r1, #1
    6f7c:	0044      	lsls	r4, r0, #1
    6f7e:	0a5e      	lsrs	r6, r3, #9
    6f80:	0e24      	lsrs	r4, r4, #24
    6f82:	0fc3      	lsrs	r3, r0, #31
    6f84:	0a6d      	lsrs	r5, r5, #9
    6f86:	0e12      	lsrs	r2, r2, #24
    6f88:	0fc9      	lsrs	r1, r1, #31
    6f8a:	2cff      	cmp	r4, #255	; 0xff
    6f8c:	d00d      	beq.n	6faa <__gesf2+0x36>
    6f8e:	2aff      	cmp	r2, #255	; 0xff
    6f90:	d031      	beq.n	6ff6 <__gesf2+0x82>
    6f92:	2c00      	cmp	r4, #0
    6f94:	d10d      	bne.n	6fb2 <__gesf2+0x3e>
    6f96:	4277      	negs	r7, r6
    6f98:	4177      	adcs	r7, r6
    6f9a:	2a00      	cmp	r2, #0
    6f9c:	d123      	bne.n	6fe6 <__gesf2+0x72>
    6f9e:	2d00      	cmp	r5, #0
    6fa0:	d121      	bne.n	6fe6 <__gesf2+0x72>
    6fa2:	2000      	movs	r0, #0
    6fa4:	2f00      	cmp	r7, #0
    6fa6:	d10b      	bne.n	6fc0 <__gesf2+0x4c>
    6fa8:	e007      	b.n	6fba <__gesf2+0x46>
    6faa:	2e00      	cmp	r6, #0
    6fac:	d128      	bne.n	7000 <__gesf2+0x8c>
    6fae:	2aff      	cmp	r2, #255	; 0xff
    6fb0:	d021      	beq.n	6ff6 <__gesf2+0x82>
    6fb2:	2a00      	cmp	r2, #0
    6fb4:	d005      	beq.n	6fc2 <__gesf2+0x4e>
    6fb6:	428b      	cmp	r3, r1
    6fb8:	d007      	beq.n	6fca <__gesf2+0x56>
    6fba:	4258      	negs	r0, r3
    6fbc:	2301      	movs	r3, #1
    6fbe:	4318      	orrs	r0, r3
    6fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6fc2:	2d00      	cmp	r5, #0
    6fc4:	d0f9      	beq.n	6fba <__gesf2+0x46>
    6fc6:	428b      	cmp	r3, r1
    6fc8:	d1f7      	bne.n	6fba <__gesf2+0x46>
    6fca:	4294      	cmp	r4, r2
    6fcc:	dcf5      	bgt.n	6fba <__gesf2+0x46>
    6fce:	db04      	blt.n	6fda <__gesf2+0x66>
    6fd0:	42ae      	cmp	r6, r5
    6fd2:	d8f2      	bhi.n	6fba <__gesf2+0x46>
    6fd4:	2000      	movs	r0, #0
    6fd6:	42ae      	cmp	r6, r5
    6fd8:	d2f2      	bcs.n	6fc0 <__gesf2+0x4c>
    6fda:	4258      	negs	r0, r3
    6fdc:	4143      	adcs	r3, r0
    6fde:	2001      	movs	r0, #1
    6fe0:	425b      	negs	r3, r3
    6fe2:	4318      	orrs	r0, r3
    6fe4:	e7ec      	b.n	6fc0 <__gesf2+0x4c>
    6fe6:	2f00      	cmp	r7, #0
    6fe8:	d0e5      	beq.n	6fb6 <__gesf2+0x42>
    6fea:	4248      	negs	r0, r1
    6fec:	4141      	adcs	r1, r0
    6fee:	2001      	movs	r0, #1
    6ff0:	4249      	negs	r1, r1
    6ff2:	4308      	orrs	r0, r1
    6ff4:	e7e4      	b.n	6fc0 <__gesf2+0x4c>
    6ff6:	2d00      	cmp	r5, #0
    6ff8:	d102      	bne.n	7000 <__gesf2+0x8c>
    6ffa:	2c00      	cmp	r4, #0
    6ffc:	d0cb      	beq.n	6f96 <__gesf2+0x22>
    6ffe:	e7da      	b.n	6fb6 <__gesf2+0x42>
    7000:	2002      	movs	r0, #2
    7002:	4240      	negs	r0, r0
    7004:	e7dc      	b.n	6fc0 <__gesf2+0x4c>
    7006:	46c0      	nop			; (mov r8, r8)

00007008 <__lesf2>:
    7008:	0243      	lsls	r3, r0, #9
    700a:	b5f0      	push	{r4, r5, r6, r7, lr}
    700c:	0042      	lsls	r2, r0, #1
    700e:	004c      	lsls	r4, r1, #1
    7010:	0a5e      	lsrs	r6, r3, #9
    7012:	0fc3      	lsrs	r3, r0, #31
    7014:	0248      	lsls	r0, r1, #9
    7016:	0e12      	lsrs	r2, r2, #24
    7018:	0a45      	lsrs	r5, r0, #9
    701a:	0e24      	lsrs	r4, r4, #24
    701c:	0fc9      	lsrs	r1, r1, #31
    701e:	2aff      	cmp	r2, #255	; 0xff
    7020:	d00f      	beq.n	7042 <__lesf2+0x3a>
    7022:	2cff      	cmp	r4, #255	; 0xff
    7024:	d01a      	beq.n	705c <__lesf2+0x54>
    7026:	2a00      	cmp	r2, #0
    7028:	d110      	bne.n	704c <__lesf2+0x44>
    702a:	4277      	negs	r7, r6
    702c:	4177      	adcs	r7, r6
    702e:	2c00      	cmp	r4, #0
    7030:	d029      	beq.n	7086 <__lesf2+0x7e>
    7032:	2f00      	cmp	r7, #0
    7034:	d017      	beq.n	7066 <__lesf2+0x5e>
    7036:	4248      	negs	r0, r1
    7038:	4141      	adcs	r1, r0
    703a:	2001      	movs	r0, #1
    703c:	4249      	negs	r1, r1
    703e:	4308      	orrs	r0, r1
    7040:	e00b      	b.n	705a <__lesf2+0x52>
    7042:	2002      	movs	r0, #2
    7044:	2e00      	cmp	r6, #0
    7046:	d108      	bne.n	705a <__lesf2+0x52>
    7048:	2cff      	cmp	r4, #255	; 0xff
    704a:	d007      	beq.n	705c <__lesf2+0x54>
    704c:	2c00      	cmp	r4, #0
    704e:	d10a      	bne.n	7066 <__lesf2+0x5e>
    7050:	2d00      	cmp	r5, #0
    7052:	d108      	bne.n	7066 <__lesf2+0x5e>
    7054:	4258      	negs	r0, r3
    7056:	2301      	movs	r3, #1
    7058:	4318      	orrs	r0, r3
    705a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    705c:	2002      	movs	r0, #2
    705e:	2d00      	cmp	r5, #0
    7060:	d1fb      	bne.n	705a <__lesf2+0x52>
    7062:	2a00      	cmp	r2, #0
    7064:	d0e1      	beq.n	702a <__lesf2+0x22>
    7066:	428b      	cmp	r3, r1
    7068:	d1f4      	bne.n	7054 <__lesf2+0x4c>
    706a:	42a2      	cmp	r2, r4
    706c:	dcf2      	bgt.n	7054 <__lesf2+0x4c>
    706e:	db04      	blt.n	707a <__lesf2+0x72>
    7070:	42ae      	cmp	r6, r5
    7072:	d8ef      	bhi.n	7054 <__lesf2+0x4c>
    7074:	2000      	movs	r0, #0
    7076:	42ae      	cmp	r6, r5
    7078:	d2ef      	bcs.n	705a <__lesf2+0x52>
    707a:	4258      	negs	r0, r3
    707c:	4143      	adcs	r3, r0
    707e:	2001      	movs	r0, #1
    7080:	425b      	negs	r3, r3
    7082:	4318      	orrs	r0, r3
    7084:	e7e9      	b.n	705a <__lesf2+0x52>
    7086:	2d00      	cmp	r5, #0
    7088:	d1d3      	bne.n	7032 <__lesf2+0x2a>
    708a:	2000      	movs	r0, #0
    708c:	2f00      	cmp	r7, #0
    708e:	d1e4      	bne.n	705a <__lesf2+0x52>
    7090:	e7e0      	b.n	7054 <__lesf2+0x4c>
    7092:	46c0      	nop			; (mov r8, r8)

00007094 <__aeabi_fmul>:
    7094:	b5f0      	push	{r4, r5, r6, r7, lr}
    7096:	465f      	mov	r7, fp
    7098:	4656      	mov	r6, sl
    709a:	464d      	mov	r5, r9
    709c:	4644      	mov	r4, r8
    709e:	b4f0      	push	{r4, r5, r6, r7}
    70a0:	0245      	lsls	r5, r0, #9
    70a2:	0046      	lsls	r6, r0, #1
    70a4:	0fc4      	lsrs	r4, r0, #31
    70a6:	b083      	sub	sp, #12
    70a8:	1c0f      	adds	r7, r1, #0
    70aa:	0a6d      	lsrs	r5, r5, #9
    70ac:	0e36      	lsrs	r6, r6, #24
    70ae:	46a3      	mov	fp, r4
    70b0:	d045      	beq.n	713e <__aeabi_fmul+0xaa>
    70b2:	2eff      	cmp	r6, #255	; 0xff
    70b4:	d025      	beq.n	7102 <__aeabi_fmul+0x6e>
    70b6:	2380      	movs	r3, #128	; 0x80
    70b8:	041b      	lsls	r3, r3, #16
    70ba:	431d      	orrs	r5, r3
    70bc:	2300      	movs	r3, #0
    70be:	469a      	mov	sl, r3
    70c0:	00ed      	lsls	r5, r5, #3
    70c2:	3e7f      	subs	r6, #127	; 0x7f
    70c4:	9301      	str	r3, [sp, #4]
    70c6:	027b      	lsls	r3, r7, #9
    70c8:	0a5b      	lsrs	r3, r3, #9
    70ca:	4698      	mov	r8, r3
    70cc:	0078      	lsls	r0, r7, #1
    70ce:	0ffb      	lsrs	r3, r7, #31
    70d0:	0e00      	lsrs	r0, r0, #24
    70d2:	4699      	mov	r9, r3
    70d4:	d040      	beq.n	7158 <__aeabi_fmul+0xc4>
    70d6:	28ff      	cmp	r0, #255	; 0xff
    70d8:	d038      	beq.n	714c <__aeabi_fmul+0xb8>
    70da:	2380      	movs	r3, #128	; 0x80
    70dc:	4642      	mov	r2, r8
    70de:	041b      	lsls	r3, r3, #16
    70e0:	4313      	orrs	r3, r2
    70e2:	00db      	lsls	r3, r3, #3
    70e4:	4698      	mov	r8, r3
    70e6:	2300      	movs	r3, #0
    70e8:	387f      	subs	r0, #127	; 0x7f
    70ea:	464a      	mov	r2, r9
    70ec:	9f01      	ldr	r7, [sp, #4]
    70ee:	1830      	adds	r0, r6, r0
    70f0:	4062      	eors	r2, r4
    70f2:	1c41      	adds	r1, r0, #1
    70f4:	431f      	orrs	r7, r3
    70f6:	2f0f      	cmp	r7, #15
    70f8:	d869      	bhi.n	71ce <__aeabi_fmul+0x13a>
    70fa:	4e7d      	ldr	r6, [pc, #500]	; (72f0 <__aeabi_fmul+0x25c>)
    70fc:	00bf      	lsls	r7, r7, #2
    70fe:	59f6      	ldr	r6, [r6, r7]
    7100:	46b7      	mov	pc, r6
    7102:	2d00      	cmp	r5, #0
    7104:	d145      	bne.n	7192 <__aeabi_fmul+0xfe>
    7106:	2308      	movs	r3, #8
    7108:	9301      	str	r3, [sp, #4]
    710a:	3b06      	subs	r3, #6
    710c:	469a      	mov	sl, r3
    710e:	e7da      	b.n	70c6 <__aeabi_fmul+0x32>
    7110:	4693      	mov	fp, r2
    7112:	4653      	mov	r3, sl
    7114:	2b02      	cmp	r3, #2
    7116:	d12f      	bne.n	7178 <__aeabi_fmul+0xe4>
    7118:	465b      	mov	r3, fp
    711a:	2401      	movs	r4, #1
    711c:	2500      	movs	r5, #0
    711e:	401c      	ands	r4, r3
    7120:	23ff      	movs	r3, #255	; 0xff
    7122:	026d      	lsls	r5, r5, #9
    7124:	05db      	lsls	r3, r3, #23
    7126:	0a6d      	lsrs	r5, r5, #9
    7128:	07e4      	lsls	r4, r4, #31
    712a:	431d      	orrs	r5, r3
    712c:	4325      	orrs	r5, r4
    712e:	1c28      	adds	r0, r5, #0
    7130:	b003      	add	sp, #12
    7132:	bc3c      	pop	{r2, r3, r4, r5}
    7134:	4690      	mov	r8, r2
    7136:	4699      	mov	r9, r3
    7138:	46a2      	mov	sl, r4
    713a:	46ab      	mov	fp, r5
    713c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    713e:	2d00      	cmp	r5, #0
    7140:	d12c      	bne.n	719c <__aeabi_fmul+0x108>
    7142:	2304      	movs	r3, #4
    7144:	9301      	str	r3, [sp, #4]
    7146:	3b03      	subs	r3, #3
    7148:	469a      	mov	sl, r3
    714a:	e7bc      	b.n	70c6 <__aeabi_fmul+0x32>
    714c:	4643      	mov	r3, r8
    714e:	425a      	negs	r2, r3
    7150:	4153      	adcs	r3, r2
    7152:	2203      	movs	r2, #3
    7154:	1ad3      	subs	r3, r2, r3
    7156:	e7c8      	b.n	70ea <__aeabi_fmul+0x56>
    7158:	4642      	mov	r2, r8
    715a:	2301      	movs	r3, #1
    715c:	2a00      	cmp	r2, #0
    715e:	d0c4      	beq.n	70ea <__aeabi_fmul+0x56>
    7160:	4640      	mov	r0, r8
    7162:	f002 f9f9 	bl	9558 <__clzsi2>
    7166:	4642      	mov	r2, r8
    7168:	1f43      	subs	r3, r0, #5
    716a:	409a      	lsls	r2, r3
    716c:	2376      	movs	r3, #118	; 0x76
    716e:	425b      	negs	r3, r3
    7170:	1a18      	subs	r0, r3, r0
    7172:	4690      	mov	r8, r2
    7174:	2300      	movs	r3, #0
    7176:	e7b8      	b.n	70ea <__aeabi_fmul+0x56>
    7178:	2b03      	cmp	r3, #3
    717a:	d100      	bne.n	717e <__aeabi_fmul+0xea>
    717c:	e0ad      	b.n	72da <__aeabi_fmul+0x246>
    717e:	2b01      	cmp	r3, #1
    7180:	d000      	beq.n	7184 <__aeabi_fmul+0xf0>
    7182:	e08c      	b.n	729e <__aeabi_fmul+0x20a>
    7184:	465b      	mov	r3, fp
    7186:	4654      	mov	r4, sl
    7188:	401c      	ands	r4, r3
    718a:	b2e4      	uxtb	r4, r4
    718c:	2300      	movs	r3, #0
    718e:	2500      	movs	r5, #0
    7190:	e7c7      	b.n	7122 <__aeabi_fmul+0x8e>
    7192:	230c      	movs	r3, #12
    7194:	9301      	str	r3, [sp, #4]
    7196:	3b09      	subs	r3, #9
    7198:	469a      	mov	sl, r3
    719a:	e794      	b.n	70c6 <__aeabi_fmul+0x32>
    719c:	1c28      	adds	r0, r5, #0
    719e:	f002 f9db 	bl	9558 <__clzsi2>
    71a2:	2676      	movs	r6, #118	; 0x76
    71a4:	1f43      	subs	r3, r0, #5
    71a6:	409d      	lsls	r5, r3
    71a8:	2300      	movs	r3, #0
    71aa:	4276      	negs	r6, r6
    71ac:	1a36      	subs	r6, r6, r0
    71ae:	9301      	str	r3, [sp, #4]
    71b0:	469a      	mov	sl, r3
    71b2:	e788      	b.n	70c6 <__aeabi_fmul+0x32>
    71b4:	2580      	movs	r5, #128	; 0x80
    71b6:	2400      	movs	r4, #0
    71b8:	03ed      	lsls	r5, r5, #15
    71ba:	23ff      	movs	r3, #255	; 0xff
    71bc:	e7b1      	b.n	7122 <__aeabi_fmul+0x8e>
    71be:	4645      	mov	r5, r8
    71c0:	46cb      	mov	fp, r9
    71c2:	469a      	mov	sl, r3
    71c4:	e7a5      	b.n	7112 <__aeabi_fmul+0x7e>
    71c6:	4645      	mov	r5, r8
    71c8:	4693      	mov	fp, r2
    71ca:	469a      	mov	sl, r3
    71cc:	e7a1      	b.n	7112 <__aeabi_fmul+0x7e>
    71ce:	4643      	mov	r3, r8
    71d0:	042c      	lsls	r4, r5, #16
    71d2:	0c1b      	lsrs	r3, r3, #16
    71d4:	469c      	mov	ip, r3
    71d6:	0c23      	lsrs	r3, r4, #16
    71d8:	4644      	mov	r4, r8
    71da:	0426      	lsls	r6, r4, #16
    71dc:	1c1c      	adds	r4, r3, #0
    71de:	0c36      	lsrs	r6, r6, #16
    71e0:	0c2f      	lsrs	r7, r5, #16
    71e2:	4374      	muls	r4, r6
    71e4:	1c35      	adds	r5, r6, #0
    71e6:	4666      	mov	r6, ip
    71e8:	437d      	muls	r5, r7
    71ea:	4373      	muls	r3, r6
    71ec:	4377      	muls	r7, r6
    71ee:	18eb      	adds	r3, r5, r3
    71f0:	0c26      	lsrs	r6, r4, #16
    71f2:	199e      	adds	r6, r3, r6
    71f4:	42b5      	cmp	r5, r6
    71f6:	d903      	bls.n	7200 <__aeabi_fmul+0x16c>
    71f8:	2380      	movs	r3, #128	; 0x80
    71fa:	025b      	lsls	r3, r3, #9
    71fc:	469c      	mov	ip, r3
    71fe:	4467      	add	r7, ip
    7200:	0424      	lsls	r4, r4, #16
    7202:	0433      	lsls	r3, r6, #16
    7204:	0c24      	lsrs	r4, r4, #16
    7206:	191b      	adds	r3, r3, r4
    7208:	019d      	lsls	r5, r3, #6
    720a:	1e6c      	subs	r4, r5, #1
    720c:	41a5      	sbcs	r5, r4
    720e:	0e9b      	lsrs	r3, r3, #26
    7210:	0c36      	lsrs	r6, r6, #16
    7212:	432b      	orrs	r3, r5
    7214:	19bd      	adds	r5, r7, r6
    7216:	01ad      	lsls	r5, r5, #6
    7218:	431d      	orrs	r5, r3
    721a:	012b      	lsls	r3, r5, #4
    721c:	d504      	bpl.n	7228 <__aeabi_fmul+0x194>
    721e:	2301      	movs	r3, #1
    7220:	0868      	lsrs	r0, r5, #1
    7222:	401d      	ands	r5, r3
    7224:	4305      	orrs	r5, r0
    7226:	1c08      	adds	r0, r1, #0
    7228:	1c03      	adds	r3, r0, #0
    722a:	337f      	adds	r3, #127	; 0x7f
    722c:	2b00      	cmp	r3, #0
    722e:	dd2c      	ble.n	728a <__aeabi_fmul+0x1f6>
    7230:	0769      	lsls	r1, r5, #29
    7232:	d004      	beq.n	723e <__aeabi_fmul+0x1aa>
    7234:	210f      	movs	r1, #15
    7236:	4029      	ands	r1, r5
    7238:	2904      	cmp	r1, #4
    723a:	d000      	beq.n	723e <__aeabi_fmul+0x1aa>
    723c:	3504      	adds	r5, #4
    723e:	0129      	lsls	r1, r5, #4
    7240:	d503      	bpl.n	724a <__aeabi_fmul+0x1b6>
    7242:	4b2c      	ldr	r3, [pc, #176]	; (72f4 <__aeabi_fmul+0x260>)
    7244:	401d      	ands	r5, r3
    7246:	1c03      	adds	r3, r0, #0
    7248:	3380      	adds	r3, #128	; 0x80
    724a:	2bfe      	cmp	r3, #254	; 0xfe
    724c:	dd17      	ble.n	727e <__aeabi_fmul+0x1ea>
    724e:	2401      	movs	r4, #1
    7250:	23ff      	movs	r3, #255	; 0xff
    7252:	4014      	ands	r4, r2
    7254:	2500      	movs	r5, #0
    7256:	e764      	b.n	7122 <__aeabi_fmul+0x8e>
    7258:	2080      	movs	r0, #128	; 0x80
    725a:	03c0      	lsls	r0, r0, #15
    725c:	4205      	tst	r5, r0
    725e:	d009      	beq.n	7274 <__aeabi_fmul+0x1e0>
    7260:	4643      	mov	r3, r8
    7262:	4203      	tst	r3, r0
    7264:	d106      	bne.n	7274 <__aeabi_fmul+0x1e0>
    7266:	4645      	mov	r5, r8
    7268:	4305      	orrs	r5, r0
    726a:	026d      	lsls	r5, r5, #9
    726c:	0a6d      	lsrs	r5, r5, #9
    726e:	464c      	mov	r4, r9
    7270:	23ff      	movs	r3, #255	; 0xff
    7272:	e756      	b.n	7122 <__aeabi_fmul+0x8e>
    7274:	4305      	orrs	r5, r0
    7276:	026d      	lsls	r5, r5, #9
    7278:	0a6d      	lsrs	r5, r5, #9
    727a:	23ff      	movs	r3, #255	; 0xff
    727c:	e751      	b.n	7122 <__aeabi_fmul+0x8e>
    727e:	2401      	movs	r4, #1
    7280:	01ad      	lsls	r5, r5, #6
    7282:	0a6d      	lsrs	r5, r5, #9
    7284:	b2db      	uxtb	r3, r3
    7286:	4014      	ands	r4, r2
    7288:	e74b      	b.n	7122 <__aeabi_fmul+0x8e>
    728a:	237e      	movs	r3, #126	; 0x7e
    728c:	425b      	negs	r3, r3
    728e:	1a1b      	subs	r3, r3, r0
    7290:	2b1b      	cmp	r3, #27
    7292:	dd07      	ble.n	72a4 <__aeabi_fmul+0x210>
    7294:	2401      	movs	r4, #1
    7296:	2300      	movs	r3, #0
    7298:	4014      	ands	r4, r2
    729a:	2500      	movs	r5, #0
    729c:	e741      	b.n	7122 <__aeabi_fmul+0x8e>
    729e:	1c08      	adds	r0, r1, #0
    72a0:	465a      	mov	r2, fp
    72a2:	e7c1      	b.n	7228 <__aeabi_fmul+0x194>
    72a4:	309e      	adds	r0, #158	; 0x9e
    72a6:	1c29      	adds	r1, r5, #0
    72a8:	4085      	lsls	r5, r0
    72aa:	40d9      	lsrs	r1, r3
    72ac:	1e68      	subs	r0, r5, #1
    72ae:	4185      	sbcs	r5, r0
    72b0:	430d      	orrs	r5, r1
    72b2:	076b      	lsls	r3, r5, #29
    72b4:	d004      	beq.n	72c0 <__aeabi_fmul+0x22c>
    72b6:	230f      	movs	r3, #15
    72b8:	402b      	ands	r3, r5
    72ba:	2b04      	cmp	r3, #4
    72bc:	d000      	beq.n	72c0 <__aeabi_fmul+0x22c>
    72be:	3504      	adds	r5, #4
    72c0:	016b      	lsls	r3, r5, #5
    72c2:	d504      	bpl.n	72ce <__aeabi_fmul+0x23a>
    72c4:	2401      	movs	r4, #1
    72c6:	2301      	movs	r3, #1
    72c8:	4014      	ands	r4, r2
    72ca:	2500      	movs	r5, #0
    72cc:	e729      	b.n	7122 <__aeabi_fmul+0x8e>
    72ce:	2401      	movs	r4, #1
    72d0:	01ad      	lsls	r5, r5, #6
    72d2:	0a6d      	lsrs	r5, r5, #9
    72d4:	4014      	ands	r4, r2
    72d6:	2300      	movs	r3, #0
    72d8:	e723      	b.n	7122 <__aeabi_fmul+0x8e>
    72da:	2380      	movs	r3, #128	; 0x80
    72dc:	03db      	lsls	r3, r3, #15
    72de:	431d      	orrs	r5, r3
    72e0:	2401      	movs	r4, #1
    72e2:	465b      	mov	r3, fp
    72e4:	026d      	lsls	r5, r5, #9
    72e6:	4023      	ands	r3, r4
    72e8:	1c1c      	adds	r4, r3, #0
    72ea:	0a6d      	lsrs	r5, r5, #9
    72ec:	23ff      	movs	r3, #255	; 0xff
    72ee:	e718      	b.n	7122 <__aeabi_fmul+0x8e>
    72f0:	0000f7d8 	.word	0x0000f7d8
    72f4:	f7ffffff 	.word	0xf7ffffff

000072f8 <__aeabi_fsub>:
    72f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    72fa:	004a      	lsls	r2, r1, #1
    72fc:	0243      	lsls	r3, r0, #9
    72fe:	0044      	lsls	r4, r0, #1
    7300:	024d      	lsls	r5, r1, #9
    7302:	0fc0      	lsrs	r0, r0, #31
    7304:	0e24      	lsrs	r4, r4, #24
    7306:	1c06      	adds	r6, r0, #0
    7308:	099b      	lsrs	r3, r3, #6
    730a:	0e12      	lsrs	r2, r2, #24
    730c:	0fc9      	lsrs	r1, r1, #31
    730e:	09ad      	lsrs	r5, r5, #6
    7310:	2aff      	cmp	r2, #255	; 0xff
    7312:	d100      	bne.n	7316 <__aeabi_fsub+0x1e>
    7314:	e075      	b.n	7402 <__aeabi_fsub+0x10a>
    7316:	2701      	movs	r7, #1
    7318:	4079      	eors	r1, r7
    731a:	4288      	cmp	r0, r1
    731c:	d050      	beq.n	73c0 <__aeabi_fsub+0xc8>
    731e:	1aa0      	subs	r0, r4, r2
    7320:	2800      	cmp	r0, #0
    7322:	dc00      	bgt.n	7326 <__aeabi_fsub+0x2e>
    7324:	e08f      	b.n	7446 <__aeabi_fsub+0x14e>
    7326:	2a00      	cmp	r2, #0
    7328:	d11e      	bne.n	7368 <__aeabi_fsub+0x70>
    732a:	2d00      	cmp	r5, #0
    732c:	d000      	beq.n	7330 <__aeabi_fsub+0x38>
    732e:	e075      	b.n	741c <__aeabi_fsub+0x124>
    7330:	075a      	lsls	r2, r3, #29
    7332:	d004      	beq.n	733e <__aeabi_fsub+0x46>
    7334:	220f      	movs	r2, #15
    7336:	401a      	ands	r2, r3
    7338:	2a04      	cmp	r2, #4
    733a:	d000      	beq.n	733e <__aeabi_fsub+0x46>
    733c:	3304      	adds	r3, #4
    733e:	2280      	movs	r2, #128	; 0x80
    7340:	2001      	movs	r0, #1
    7342:	04d2      	lsls	r2, r2, #19
    7344:	401a      	ands	r2, r3
    7346:	4030      	ands	r0, r6
    7348:	2a00      	cmp	r2, #0
    734a:	d032      	beq.n	73b2 <__aeabi_fsub+0xba>
    734c:	3401      	adds	r4, #1
    734e:	2cff      	cmp	r4, #255	; 0xff
    7350:	d100      	bne.n	7354 <__aeabi_fsub+0x5c>
    7352:	e084      	b.n	745e <__aeabi_fsub+0x166>
    7354:	019b      	lsls	r3, r3, #6
    7356:	0a5b      	lsrs	r3, r3, #9
    7358:	b2e4      	uxtb	r4, r4
    735a:	025b      	lsls	r3, r3, #9
    735c:	05e4      	lsls	r4, r4, #23
    735e:	0a5b      	lsrs	r3, r3, #9
    7360:	4323      	orrs	r3, r4
    7362:	07c0      	lsls	r0, r0, #31
    7364:	4318      	orrs	r0, r3
    7366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7368:	2cff      	cmp	r4, #255	; 0xff
    736a:	d0e1      	beq.n	7330 <__aeabi_fsub+0x38>
    736c:	2280      	movs	r2, #128	; 0x80
    736e:	04d2      	lsls	r2, r2, #19
    7370:	4315      	orrs	r5, r2
    7372:	281b      	cmp	r0, #27
    7374:	dd7a      	ble.n	746c <__aeabi_fsub+0x174>
    7376:	2501      	movs	r5, #1
    7378:	1b5b      	subs	r3, r3, r5
    737a:	015a      	lsls	r2, r3, #5
    737c:	d55d      	bpl.n	743a <__aeabi_fsub+0x142>
    737e:	019b      	lsls	r3, r3, #6
    7380:	099f      	lsrs	r7, r3, #6
    7382:	1c38      	adds	r0, r7, #0
    7384:	f002 f8e8 	bl	9558 <__clzsi2>
    7388:	3805      	subs	r0, #5
    738a:	4087      	lsls	r7, r0
    738c:	4284      	cmp	r4, r0
    738e:	dc69      	bgt.n	7464 <__aeabi_fsub+0x16c>
    7390:	1b00      	subs	r0, r0, r4
    7392:	241f      	movs	r4, #31
    7394:	1c3a      	adds	r2, r7, #0
    7396:	1c43      	adds	r3, r0, #1
    7398:	1a20      	subs	r0, r4, r0
    739a:	40da      	lsrs	r2, r3
    739c:	4087      	lsls	r7, r0
    739e:	1c13      	adds	r3, r2, #0
    73a0:	1e7c      	subs	r4, r7, #1
    73a2:	41a7      	sbcs	r7, r4
    73a4:	2400      	movs	r4, #0
    73a6:	433b      	orrs	r3, r7
    73a8:	e7c2      	b.n	7330 <__aeabi_fsub+0x38>
    73aa:	1e13      	subs	r3, r2, #0
    73ac:	d145      	bne.n	743a <__aeabi_fsub+0x142>
    73ae:	2300      	movs	r3, #0
    73b0:	2000      	movs	r0, #0
    73b2:	08db      	lsrs	r3, r3, #3
    73b4:	2cff      	cmp	r4, #255	; 0xff
    73b6:	d028      	beq.n	740a <__aeabi_fsub+0x112>
    73b8:	025b      	lsls	r3, r3, #9
    73ba:	0a5b      	lsrs	r3, r3, #9
    73bc:	b2e4      	uxtb	r4, r4
    73be:	e7cc      	b.n	735a <__aeabi_fsub+0x62>
    73c0:	1aa1      	subs	r1, r4, r2
    73c2:	2900      	cmp	r1, #0
    73c4:	dd5b      	ble.n	747e <__aeabi_fsub+0x186>
    73c6:	2a00      	cmp	r2, #0
    73c8:	d02e      	beq.n	7428 <__aeabi_fsub+0x130>
    73ca:	2cff      	cmp	r4, #255	; 0xff
    73cc:	d0b0      	beq.n	7330 <__aeabi_fsub+0x38>
    73ce:	2280      	movs	r2, #128	; 0x80
    73d0:	04d2      	lsls	r2, r2, #19
    73d2:	4315      	orrs	r5, r2
    73d4:	291b      	cmp	r1, #27
    73d6:	dc74      	bgt.n	74c2 <__aeabi_fsub+0x1ca>
    73d8:	1c2f      	adds	r7, r5, #0
    73da:	2220      	movs	r2, #32
    73dc:	40cf      	lsrs	r7, r1
    73de:	1a51      	subs	r1, r2, r1
    73e0:	408d      	lsls	r5, r1
    73e2:	1e69      	subs	r1, r5, #1
    73e4:	418d      	sbcs	r5, r1
    73e6:	433d      	orrs	r5, r7
    73e8:	195b      	adds	r3, r3, r5
    73ea:	015a      	lsls	r2, r3, #5
    73ec:	d525      	bpl.n	743a <__aeabi_fsub+0x142>
    73ee:	3401      	adds	r4, #1
    73f0:	2cff      	cmp	r4, #255	; 0xff
    73f2:	d074      	beq.n	74de <__aeabi_fsub+0x1e6>
    73f4:	2101      	movs	r1, #1
    73f6:	4a7e      	ldr	r2, [pc, #504]	; (75f0 <__aeabi_fsub+0x2f8>)
    73f8:	4019      	ands	r1, r3
    73fa:	4013      	ands	r3, r2
    73fc:	085b      	lsrs	r3, r3, #1
    73fe:	430b      	orrs	r3, r1
    7400:	e796      	b.n	7330 <__aeabi_fsub+0x38>
    7402:	2d00      	cmp	r5, #0
    7404:	d000      	beq.n	7408 <__aeabi_fsub+0x110>
    7406:	e788      	b.n	731a <__aeabi_fsub+0x22>
    7408:	e785      	b.n	7316 <__aeabi_fsub+0x1e>
    740a:	2b00      	cmp	r3, #0
    740c:	d027      	beq.n	745e <__aeabi_fsub+0x166>
    740e:	2280      	movs	r2, #128	; 0x80
    7410:	03d2      	lsls	r2, r2, #15
    7412:	4313      	orrs	r3, r2
    7414:	025b      	lsls	r3, r3, #9
    7416:	0a5b      	lsrs	r3, r3, #9
    7418:	24ff      	movs	r4, #255	; 0xff
    741a:	e79e      	b.n	735a <__aeabi_fsub+0x62>
    741c:	3801      	subs	r0, #1
    741e:	2800      	cmp	r0, #0
    7420:	d0aa      	beq.n	7378 <__aeabi_fsub+0x80>
    7422:	2cff      	cmp	r4, #255	; 0xff
    7424:	d1a5      	bne.n	7372 <__aeabi_fsub+0x7a>
    7426:	e783      	b.n	7330 <__aeabi_fsub+0x38>
    7428:	2d00      	cmp	r5, #0
    742a:	d100      	bne.n	742e <__aeabi_fsub+0x136>
    742c:	e780      	b.n	7330 <__aeabi_fsub+0x38>
    742e:	3901      	subs	r1, #1
    7430:	2900      	cmp	r1, #0
    7432:	d0d9      	beq.n	73e8 <__aeabi_fsub+0xf0>
    7434:	2cff      	cmp	r4, #255	; 0xff
    7436:	d1cd      	bne.n	73d4 <__aeabi_fsub+0xdc>
    7438:	e77a      	b.n	7330 <__aeabi_fsub+0x38>
    743a:	075a      	lsls	r2, r3, #29
    743c:	d000      	beq.n	7440 <__aeabi_fsub+0x148>
    743e:	e779      	b.n	7334 <__aeabi_fsub+0x3c>
    7440:	2001      	movs	r0, #1
    7442:	4030      	ands	r0, r6
    7444:	e7b5      	b.n	73b2 <__aeabi_fsub+0xba>
    7446:	2800      	cmp	r0, #0
    7448:	d125      	bne.n	7496 <__aeabi_fsub+0x19e>
    744a:	1c62      	adds	r2, r4, #1
    744c:	b2d2      	uxtb	r2, r2
    744e:	2a01      	cmp	r2, #1
    7450:	dd55      	ble.n	74fe <__aeabi_fsub+0x206>
    7452:	1b5f      	subs	r7, r3, r5
    7454:	017a      	lsls	r2, r7, #5
    7456:	d52d      	bpl.n	74b4 <__aeabi_fsub+0x1bc>
    7458:	1aef      	subs	r7, r5, r3
    745a:	1c0e      	adds	r6, r1, #0
    745c:	e791      	b.n	7382 <__aeabi_fsub+0x8a>
    745e:	24ff      	movs	r4, #255	; 0xff
    7460:	2300      	movs	r3, #0
    7462:	e77a      	b.n	735a <__aeabi_fsub+0x62>
    7464:	4b62      	ldr	r3, [pc, #392]	; (75f0 <__aeabi_fsub+0x2f8>)
    7466:	1a24      	subs	r4, r4, r0
    7468:	403b      	ands	r3, r7
    746a:	e761      	b.n	7330 <__aeabi_fsub+0x38>
    746c:	1c29      	adds	r1, r5, #0
    746e:	2220      	movs	r2, #32
    7470:	40c1      	lsrs	r1, r0
    7472:	1a10      	subs	r0, r2, r0
    7474:	4085      	lsls	r5, r0
    7476:	1e68      	subs	r0, r5, #1
    7478:	4185      	sbcs	r5, r0
    747a:	430d      	orrs	r5, r1
    747c:	e77c      	b.n	7378 <__aeabi_fsub+0x80>
    747e:	2900      	cmp	r1, #0
    7480:	d146      	bne.n	7510 <__aeabi_fsub+0x218>
    7482:	1c62      	adds	r2, r4, #1
    7484:	b2d1      	uxtb	r1, r2
    7486:	2901      	cmp	r1, #1
    7488:	dd2b      	ble.n	74e2 <__aeabi_fsub+0x1ea>
    748a:	2aff      	cmp	r2, #255	; 0xff
    748c:	d026      	beq.n	74dc <__aeabi_fsub+0x1e4>
    748e:	18eb      	adds	r3, r5, r3
    7490:	085b      	lsrs	r3, r3, #1
    7492:	1c14      	adds	r4, r2, #0
    7494:	e74c      	b.n	7330 <__aeabi_fsub+0x38>
    7496:	2c00      	cmp	r4, #0
    7498:	d015      	beq.n	74c6 <__aeabi_fsub+0x1ce>
    749a:	2aff      	cmp	r2, #255	; 0xff
    749c:	d01a      	beq.n	74d4 <__aeabi_fsub+0x1dc>
    749e:	2480      	movs	r4, #128	; 0x80
    74a0:	04e4      	lsls	r4, r4, #19
    74a2:	4240      	negs	r0, r0
    74a4:	4323      	orrs	r3, r4
    74a6:	281b      	cmp	r0, #27
    74a8:	dd4d      	ble.n	7546 <__aeabi_fsub+0x24e>
    74aa:	2301      	movs	r3, #1
    74ac:	1aeb      	subs	r3, r5, r3
    74ae:	1c14      	adds	r4, r2, #0
    74b0:	1c0e      	adds	r6, r1, #0
    74b2:	e762      	b.n	737a <__aeabi_fsub+0x82>
    74b4:	2f00      	cmp	r7, #0
    74b6:	d000      	beq.n	74ba <__aeabi_fsub+0x1c2>
    74b8:	e763      	b.n	7382 <__aeabi_fsub+0x8a>
    74ba:	2300      	movs	r3, #0
    74bc:	2000      	movs	r0, #0
    74be:	2400      	movs	r4, #0
    74c0:	e777      	b.n	73b2 <__aeabi_fsub+0xba>
    74c2:	2501      	movs	r5, #1
    74c4:	e790      	b.n	73e8 <__aeabi_fsub+0xf0>
    74c6:	2b00      	cmp	r3, #0
    74c8:	d039      	beq.n	753e <__aeabi_fsub+0x246>
    74ca:	43c0      	mvns	r0, r0
    74cc:	2800      	cmp	r0, #0
    74ce:	d0ed      	beq.n	74ac <__aeabi_fsub+0x1b4>
    74d0:	2aff      	cmp	r2, #255	; 0xff
    74d2:	d1e8      	bne.n	74a6 <__aeabi_fsub+0x1ae>
    74d4:	1c2b      	adds	r3, r5, #0
    74d6:	24ff      	movs	r4, #255	; 0xff
    74d8:	1c0e      	adds	r6, r1, #0
    74da:	e729      	b.n	7330 <__aeabi_fsub+0x38>
    74dc:	24ff      	movs	r4, #255	; 0xff
    74de:	2300      	movs	r3, #0
    74e0:	e767      	b.n	73b2 <__aeabi_fsub+0xba>
    74e2:	2c00      	cmp	r4, #0
    74e4:	d15a      	bne.n	759c <__aeabi_fsub+0x2a4>
    74e6:	2b00      	cmp	r3, #0
    74e8:	d07f      	beq.n	75ea <__aeabi_fsub+0x2f2>
    74ea:	2d00      	cmp	r5, #0
    74ec:	d100      	bne.n	74f0 <__aeabi_fsub+0x1f8>
    74ee:	e71f      	b.n	7330 <__aeabi_fsub+0x38>
    74f0:	195b      	adds	r3, r3, r5
    74f2:	015a      	lsls	r2, r3, #5
    74f4:	d5a1      	bpl.n	743a <__aeabi_fsub+0x142>
    74f6:	4a3e      	ldr	r2, [pc, #248]	; (75f0 <__aeabi_fsub+0x2f8>)
    74f8:	3401      	adds	r4, #1
    74fa:	4013      	ands	r3, r2
    74fc:	e718      	b.n	7330 <__aeabi_fsub+0x38>
    74fe:	2c00      	cmp	r4, #0
    7500:	d115      	bne.n	752e <__aeabi_fsub+0x236>
    7502:	2b00      	cmp	r3, #0
    7504:	d12f      	bne.n	7566 <__aeabi_fsub+0x26e>
    7506:	2d00      	cmp	r5, #0
    7508:	d05e      	beq.n	75c8 <__aeabi_fsub+0x2d0>
    750a:	1c2b      	adds	r3, r5, #0
    750c:	1c0e      	adds	r6, r1, #0
    750e:	e70f      	b.n	7330 <__aeabi_fsub+0x38>
    7510:	2c00      	cmp	r4, #0
    7512:	d121      	bne.n	7558 <__aeabi_fsub+0x260>
    7514:	2b00      	cmp	r3, #0
    7516:	d054      	beq.n	75c2 <__aeabi_fsub+0x2ca>
    7518:	43c9      	mvns	r1, r1
    751a:	2900      	cmp	r1, #0
    751c:	d004      	beq.n	7528 <__aeabi_fsub+0x230>
    751e:	2aff      	cmp	r2, #255	; 0xff
    7520:	d04c      	beq.n	75bc <__aeabi_fsub+0x2c4>
    7522:	291b      	cmp	r1, #27
    7524:	dd58      	ble.n	75d8 <__aeabi_fsub+0x2e0>
    7526:	2301      	movs	r3, #1
    7528:	195b      	adds	r3, r3, r5
    752a:	1c14      	adds	r4, r2, #0
    752c:	e75d      	b.n	73ea <__aeabi_fsub+0xf2>
    752e:	2b00      	cmp	r3, #0
    7530:	d123      	bne.n	757a <__aeabi_fsub+0x282>
    7532:	2d00      	cmp	r5, #0
    7534:	d04b      	beq.n	75ce <__aeabi_fsub+0x2d6>
    7536:	1c2b      	adds	r3, r5, #0
    7538:	1c0e      	adds	r6, r1, #0
    753a:	24ff      	movs	r4, #255	; 0xff
    753c:	e6f8      	b.n	7330 <__aeabi_fsub+0x38>
    753e:	1c2b      	adds	r3, r5, #0
    7540:	1c14      	adds	r4, r2, #0
    7542:	1c0e      	adds	r6, r1, #0
    7544:	e6f4      	b.n	7330 <__aeabi_fsub+0x38>
    7546:	1c1e      	adds	r6, r3, #0
    7548:	2420      	movs	r4, #32
    754a:	40c6      	lsrs	r6, r0
    754c:	1a20      	subs	r0, r4, r0
    754e:	4083      	lsls	r3, r0
    7550:	1e58      	subs	r0, r3, #1
    7552:	4183      	sbcs	r3, r0
    7554:	4333      	orrs	r3, r6
    7556:	e7a9      	b.n	74ac <__aeabi_fsub+0x1b4>
    7558:	2aff      	cmp	r2, #255	; 0xff
    755a:	d02f      	beq.n	75bc <__aeabi_fsub+0x2c4>
    755c:	2480      	movs	r4, #128	; 0x80
    755e:	04e4      	lsls	r4, r4, #19
    7560:	4249      	negs	r1, r1
    7562:	4323      	orrs	r3, r4
    7564:	e7dd      	b.n	7522 <__aeabi_fsub+0x22a>
    7566:	2d00      	cmp	r5, #0
    7568:	d100      	bne.n	756c <__aeabi_fsub+0x274>
    756a:	e6e1      	b.n	7330 <__aeabi_fsub+0x38>
    756c:	1b5a      	subs	r2, r3, r5
    756e:	0150      	lsls	r0, r2, #5
    7570:	d400      	bmi.n	7574 <__aeabi_fsub+0x27c>
    7572:	e71a      	b.n	73aa <__aeabi_fsub+0xb2>
    7574:	1aeb      	subs	r3, r5, r3
    7576:	1c0e      	adds	r6, r1, #0
    7578:	e6da      	b.n	7330 <__aeabi_fsub+0x38>
    757a:	24ff      	movs	r4, #255	; 0xff
    757c:	2d00      	cmp	r5, #0
    757e:	d100      	bne.n	7582 <__aeabi_fsub+0x28a>
    7580:	e6d6      	b.n	7330 <__aeabi_fsub+0x38>
    7582:	2280      	movs	r2, #128	; 0x80
    7584:	08db      	lsrs	r3, r3, #3
    7586:	03d2      	lsls	r2, r2, #15
    7588:	4213      	tst	r3, r2
    758a:	d004      	beq.n	7596 <__aeabi_fsub+0x29e>
    758c:	08ed      	lsrs	r5, r5, #3
    758e:	4215      	tst	r5, r2
    7590:	d101      	bne.n	7596 <__aeabi_fsub+0x29e>
    7592:	1c2b      	adds	r3, r5, #0
    7594:	1c0e      	adds	r6, r1, #0
    7596:	00db      	lsls	r3, r3, #3
    7598:	24ff      	movs	r4, #255	; 0xff
    759a:	e6c9      	b.n	7330 <__aeabi_fsub+0x38>
    759c:	2b00      	cmp	r3, #0
    759e:	d00d      	beq.n	75bc <__aeabi_fsub+0x2c4>
    75a0:	24ff      	movs	r4, #255	; 0xff
    75a2:	2d00      	cmp	r5, #0
    75a4:	d100      	bne.n	75a8 <__aeabi_fsub+0x2b0>
    75a6:	e6c3      	b.n	7330 <__aeabi_fsub+0x38>
    75a8:	2280      	movs	r2, #128	; 0x80
    75aa:	08db      	lsrs	r3, r3, #3
    75ac:	03d2      	lsls	r2, r2, #15
    75ae:	4213      	tst	r3, r2
    75b0:	d0f1      	beq.n	7596 <__aeabi_fsub+0x29e>
    75b2:	08ed      	lsrs	r5, r5, #3
    75b4:	4215      	tst	r5, r2
    75b6:	d1ee      	bne.n	7596 <__aeabi_fsub+0x29e>
    75b8:	1c2b      	adds	r3, r5, #0
    75ba:	e7ec      	b.n	7596 <__aeabi_fsub+0x29e>
    75bc:	1c2b      	adds	r3, r5, #0
    75be:	24ff      	movs	r4, #255	; 0xff
    75c0:	e6b6      	b.n	7330 <__aeabi_fsub+0x38>
    75c2:	1c2b      	adds	r3, r5, #0
    75c4:	1c14      	adds	r4, r2, #0
    75c6:	e6b3      	b.n	7330 <__aeabi_fsub+0x38>
    75c8:	1c23      	adds	r3, r4, #0
    75ca:	2000      	movs	r0, #0
    75cc:	e6f1      	b.n	73b2 <__aeabi_fsub+0xba>
    75ce:	2380      	movs	r3, #128	; 0x80
    75d0:	2000      	movs	r0, #0
    75d2:	049b      	lsls	r3, r3, #18
    75d4:	24ff      	movs	r4, #255	; 0xff
    75d6:	e6ec      	b.n	73b2 <__aeabi_fsub+0xba>
    75d8:	1c1f      	adds	r7, r3, #0
    75da:	2420      	movs	r4, #32
    75dc:	40cf      	lsrs	r7, r1
    75de:	1a61      	subs	r1, r4, r1
    75e0:	408b      	lsls	r3, r1
    75e2:	1e59      	subs	r1, r3, #1
    75e4:	418b      	sbcs	r3, r1
    75e6:	433b      	orrs	r3, r7
    75e8:	e79e      	b.n	7528 <__aeabi_fsub+0x230>
    75ea:	1c2b      	adds	r3, r5, #0
    75ec:	e6a0      	b.n	7330 <__aeabi_fsub+0x38>
    75ee:	46c0      	nop			; (mov r8, r8)
    75f0:	fbffffff 	.word	0xfbffffff

000075f4 <__aeabi_f2iz>:
    75f4:	0242      	lsls	r2, r0, #9
    75f6:	0a51      	lsrs	r1, r2, #9
    75f8:	0042      	lsls	r2, r0, #1
    75fa:	0fc3      	lsrs	r3, r0, #31
    75fc:	0e12      	lsrs	r2, r2, #24
    75fe:	2000      	movs	r0, #0
    7600:	2a7e      	cmp	r2, #126	; 0x7e
    7602:	dd0d      	ble.n	7620 <__aeabi_f2iz+0x2c>
    7604:	2a9d      	cmp	r2, #157	; 0x9d
    7606:	dc0c      	bgt.n	7622 <__aeabi_f2iz+0x2e>
    7608:	2080      	movs	r0, #128	; 0x80
    760a:	0400      	lsls	r0, r0, #16
    760c:	4301      	orrs	r1, r0
    760e:	2a95      	cmp	r2, #149	; 0x95
    7610:	dc0a      	bgt.n	7628 <__aeabi_f2iz+0x34>
    7612:	2096      	movs	r0, #150	; 0x96
    7614:	1a82      	subs	r2, r0, r2
    7616:	40d1      	lsrs	r1, r2
    7618:	1c0a      	adds	r2, r1, #0
    761a:	4258      	negs	r0, r3
    761c:	4042      	eors	r2, r0
    761e:	18d0      	adds	r0, r2, r3
    7620:	4770      	bx	lr
    7622:	4a03      	ldr	r2, [pc, #12]	; (7630 <__aeabi_f2iz+0x3c>)
    7624:	1898      	adds	r0, r3, r2
    7626:	e7fb      	b.n	7620 <__aeabi_f2iz+0x2c>
    7628:	3a96      	subs	r2, #150	; 0x96
    762a:	4091      	lsls	r1, r2
    762c:	1c0a      	adds	r2, r1, #0
    762e:	e7f4      	b.n	761a <__aeabi_f2iz+0x26>
    7630:	7fffffff 	.word	0x7fffffff

00007634 <__aeabi_i2f>:
    7634:	b570      	push	{r4, r5, r6, lr}
    7636:	1e04      	subs	r4, r0, #0
    7638:	d039      	beq.n	76ae <__aeabi_i2f+0x7a>
    763a:	0fc5      	lsrs	r5, r0, #31
    763c:	d000      	beq.n	7640 <__aeabi_i2f+0xc>
    763e:	4244      	negs	r4, r0
    7640:	1c20      	adds	r0, r4, #0
    7642:	f001 ff89 	bl	9558 <__clzsi2>
    7646:	239e      	movs	r3, #158	; 0x9e
    7648:	1c26      	adds	r6, r4, #0
    764a:	1a1b      	subs	r3, r3, r0
    764c:	2b96      	cmp	r3, #150	; 0x96
    764e:	dc07      	bgt.n	7660 <__aeabi_i2f+0x2c>
    7650:	2808      	cmp	r0, #8
    7652:	dd01      	ble.n	7658 <__aeabi_i2f+0x24>
    7654:	3808      	subs	r0, #8
    7656:	4084      	lsls	r4, r0
    7658:	0264      	lsls	r4, r4, #9
    765a:	0a64      	lsrs	r4, r4, #9
    765c:	b2d8      	uxtb	r0, r3
    765e:	e01e      	b.n	769e <__aeabi_i2f+0x6a>
    7660:	2b99      	cmp	r3, #153	; 0x99
    7662:	dd0a      	ble.n	767a <__aeabi_i2f+0x46>
    7664:	2205      	movs	r2, #5
    7666:	1c21      	adds	r1, r4, #0
    7668:	1a12      	subs	r2, r2, r0
    766a:	40d1      	lsrs	r1, r2
    766c:	1c0a      	adds	r2, r1, #0
    766e:	1c01      	adds	r1, r0, #0
    7670:	311b      	adds	r1, #27
    7672:	408e      	lsls	r6, r1
    7674:	1e71      	subs	r1, r6, #1
    7676:	418e      	sbcs	r6, r1
    7678:	4316      	orrs	r6, r2
    767a:	2805      	cmp	r0, #5
    767c:	dd01      	ble.n	7682 <__aeabi_i2f+0x4e>
    767e:	1f42      	subs	r2, r0, #5
    7680:	4096      	lsls	r6, r2
    7682:	4c0f      	ldr	r4, [pc, #60]	; (76c0 <__aeabi_i2f+0x8c>)
    7684:	4034      	ands	r4, r6
    7686:	0772      	lsls	r2, r6, #29
    7688:	d004      	beq.n	7694 <__aeabi_i2f+0x60>
    768a:	220f      	movs	r2, #15
    768c:	4016      	ands	r6, r2
    768e:	2e04      	cmp	r6, #4
    7690:	d000      	beq.n	7694 <__aeabi_i2f+0x60>
    7692:	3404      	adds	r4, #4
    7694:	0162      	lsls	r2, r4, #5
    7696:	d40e      	bmi.n	76b6 <__aeabi_i2f+0x82>
    7698:	01a4      	lsls	r4, r4, #6
    769a:	0a64      	lsrs	r4, r4, #9
    769c:	b2d8      	uxtb	r0, r3
    769e:	0264      	lsls	r4, r4, #9
    76a0:	05c0      	lsls	r0, r0, #23
    76a2:	0a64      	lsrs	r4, r4, #9
    76a4:	07ed      	lsls	r5, r5, #31
    76a6:	4304      	orrs	r4, r0
    76a8:	432c      	orrs	r4, r5
    76aa:	1c20      	adds	r0, r4, #0
    76ac:	bd70      	pop	{r4, r5, r6, pc}
    76ae:	2500      	movs	r5, #0
    76b0:	2000      	movs	r0, #0
    76b2:	2400      	movs	r4, #0
    76b4:	e7f3      	b.n	769e <__aeabi_i2f+0x6a>
    76b6:	4b02      	ldr	r3, [pc, #8]	; (76c0 <__aeabi_i2f+0x8c>)
    76b8:	401c      	ands	r4, r3
    76ba:	239f      	movs	r3, #159	; 0x9f
    76bc:	1a1b      	subs	r3, r3, r0
    76be:	e7eb      	b.n	7698 <__aeabi_i2f+0x64>
    76c0:	fbffffff 	.word	0xfbffffff

000076c4 <__aeabi_ui2f>:
    76c4:	b510      	push	{r4, lr}
    76c6:	1e04      	subs	r4, r0, #0
    76c8:	d035      	beq.n	7736 <__aeabi_ui2f+0x72>
    76ca:	f001 ff45 	bl	9558 <__clzsi2>
    76ce:	219e      	movs	r1, #158	; 0x9e
    76d0:	1a09      	subs	r1, r1, r0
    76d2:	2996      	cmp	r1, #150	; 0x96
    76d4:	dc09      	bgt.n	76ea <__aeabi_ui2f+0x26>
    76d6:	2808      	cmp	r0, #8
    76d8:	dd30      	ble.n	773c <__aeabi_ui2f+0x78>
    76da:	1c02      	adds	r2, r0, #0
    76dc:	1c23      	adds	r3, r4, #0
    76de:	3a08      	subs	r2, #8
    76e0:	4093      	lsls	r3, r2
    76e2:	025b      	lsls	r3, r3, #9
    76e4:	0a5b      	lsrs	r3, r3, #9
    76e6:	b2c8      	uxtb	r0, r1
    76e8:	e020      	b.n	772c <__aeabi_ui2f+0x68>
    76ea:	2999      	cmp	r1, #153	; 0x99
    76ec:	dd0c      	ble.n	7708 <__aeabi_ui2f+0x44>
    76ee:	2205      	movs	r2, #5
    76f0:	1c23      	adds	r3, r4, #0
    76f2:	1a12      	subs	r2, r2, r0
    76f4:	40d3      	lsrs	r3, r2
    76f6:	1c1a      	adds	r2, r3, #0
    76f8:	1c03      	adds	r3, r0, #0
    76fa:	331b      	adds	r3, #27
    76fc:	409c      	lsls	r4, r3
    76fe:	1c23      	adds	r3, r4, #0
    7700:	1e5c      	subs	r4, r3, #1
    7702:	41a3      	sbcs	r3, r4
    7704:	4313      	orrs	r3, r2
    7706:	1c1c      	adds	r4, r3, #0
    7708:	2805      	cmp	r0, #5
    770a:	dd01      	ble.n	7710 <__aeabi_ui2f+0x4c>
    770c:	1f43      	subs	r3, r0, #5
    770e:	409c      	lsls	r4, r3
    7710:	4b0f      	ldr	r3, [pc, #60]	; (7750 <__aeabi_ui2f+0x8c>)
    7712:	4023      	ands	r3, r4
    7714:	0762      	lsls	r2, r4, #29
    7716:	d004      	beq.n	7722 <__aeabi_ui2f+0x5e>
    7718:	220f      	movs	r2, #15
    771a:	4014      	ands	r4, r2
    771c:	2c04      	cmp	r4, #4
    771e:	d000      	beq.n	7722 <__aeabi_ui2f+0x5e>
    7720:	3304      	adds	r3, #4
    7722:	015a      	lsls	r2, r3, #5
    7724:	d40e      	bmi.n	7744 <__aeabi_ui2f+0x80>
    7726:	019b      	lsls	r3, r3, #6
    7728:	0a5b      	lsrs	r3, r3, #9
    772a:	b2c8      	uxtb	r0, r1
    772c:	025b      	lsls	r3, r3, #9
    772e:	0a5b      	lsrs	r3, r3, #9
    7730:	05c0      	lsls	r0, r0, #23
    7732:	4318      	orrs	r0, r3
    7734:	bd10      	pop	{r4, pc}
    7736:	2000      	movs	r0, #0
    7738:	2300      	movs	r3, #0
    773a:	e7f7      	b.n	772c <__aeabi_ui2f+0x68>
    773c:	0263      	lsls	r3, r4, #9
    773e:	0a5b      	lsrs	r3, r3, #9
    7740:	b2c8      	uxtb	r0, r1
    7742:	e7f3      	b.n	772c <__aeabi_ui2f+0x68>
    7744:	219f      	movs	r1, #159	; 0x9f
    7746:	4a02      	ldr	r2, [pc, #8]	; (7750 <__aeabi_ui2f+0x8c>)
    7748:	1a09      	subs	r1, r1, r0
    774a:	4013      	ands	r3, r2
    774c:	e7eb      	b.n	7726 <__aeabi_ui2f+0x62>
    774e:	46c0      	nop			; (mov r8, r8)
    7750:	fbffffff 	.word	0xfbffffff

00007754 <__aeabi_dadd>:
    7754:	b5f0      	push	{r4, r5, r6, r7, lr}
    7756:	4645      	mov	r5, r8
    7758:	4657      	mov	r7, sl
    775a:	464e      	mov	r6, r9
    775c:	4694      	mov	ip, r2
    775e:	004c      	lsls	r4, r1, #1
    7760:	030a      	lsls	r2, r1, #12
    7762:	0fc9      	lsrs	r1, r1, #31
    7764:	b4e0      	push	{r5, r6, r7}
    7766:	4688      	mov	r8, r1
    7768:	1c0e      	adds	r6, r1, #0
    776a:	0319      	lsls	r1, r3, #12
    776c:	0f47      	lsrs	r7, r0, #29
    776e:	00c5      	lsls	r5, r0, #3
    7770:	0a48      	lsrs	r0, r1, #9
    7772:	4661      	mov	r1, ip
    7774:	0f49      	lsrs	r1, r1, #29
    7776:	4301      	orrs	r1, r0
    7778:	4660      	mov	r0, ip
    777a:	0a52      	lsrs	r2, r2, #9
    777c:	4317      	orrs	r7, r2
    777e:	00c0      	lsls	r0, r0, #3
    7780:	005a      	lsls	r2, r3, #1
    7782:	0d64      	lsrs	r4, r4, #21
    7784:	0d52      	lsrs	r2, r2, #21
    7786:	0fdb      	lsrs	r3, r3, #31
    7788:	4684      	mov	ip, r0
    778a:	4598      	cmp	r8, r3
    778c:	d100      	bne.n	7790 <__aeabi_dadd+0x3c>
    778e:	e0a7      	b.n	78e0 <__aeabi_dadd+0x18c>
    7790:	1aa0      	subs	r0, r4, r2
    7792:	2800      	cmp	r0, #0
    7794:	dc00      	bgt.n	7798 <__aeabi_dadd+0x44>
    7796:	e101      	b.n	799c <__aeabi_dadd+0x248>
    7798:	2a00      	cmp	r2, #0
    779a:	d13d      	bne.n	7818 <__aeabi_dadd+0xc4>
    779c:	4663      	mov	r3, ip
    779e:	430b      	orrs	r3, r1
    77a0:	d000      	beq.n	77a4 <__aeabi_dadd+0x50>
    77a2:	e0d4      	b.n	794e <__aeabi_dadd+0x1fa>
    77a4:	076b      	lsls	r3, r5, #29
    77a6:	d100      	bne.n	77aa <__aeabi_dadd+0x56>
    77a8:	e088      	b.n	78bc <__aeabi_dadd+0x168>
    77aa:	230f      	movs	r3, #15
    77ac:	402b      	ands	r3, r5
    77ae:	2b04      	cmp	r3, #4
    77b0:	d100      	bne.n	77b4 <__aeabi_dadd+0x60>
    77b2:	e083      	b.n	78bc <__aeabi_dadd+0x168>
    77b4:	1d2a      	adds	r2, r5, #4
    77b6:	42aa      	cmp	r2, r5
    77b8:	41ad      	sbcs	r5, r5
    77ba:	2380      	movs	r3, #128	; 0x80
    77bc:	426d      	negs	r5, r5
    77be:	197f      	adds	r7, r7, r5
    77c0:	041b      	lsls	r3, r3, #16
    77c2:	403b      	ands	r3, r7
    77c4:	4646      	mov	r6, r8
    77c6:	1c15      	adds	r5, r2, #0
    77c8:	2b00      	cmp	r3, #0
    77ca:	d100      	bne.n	77ce <__aeabi_dadd+0x7a>
    77cc:	e07c      	b.n	78c8 <__aeabi_dadd+0x174>
    77ce:	4bcc      	ldr	r3, [pc, #816]	; (7b00 <__aeabi_dadd+0x3ac>)
    77d0:	3401      	adds	r4, #1
    77d2:	429c      	cmp	r4, r3
    77d4:	d100      	bne.n	77d8 <__aeabi_dadd+0x84>
    77d6:	e0fd      	b.n	79d4 <__aeabi_dadd+0x280>
    77d8:	1c3a      	adds	r2, r7, #0
    77da:	4bca      	ldr	r3, [pc, #808]	; (7b04 <__aeabi_dadd+0x3b0>)
    77dc:	08ed      	lsrs	r5, r5, #3
    77de:	401a      	ands	r2, r3
    77e0:	0750      	lsls	r0, r2, #29
    77e2:	0564      	lsls	r4, r4, #21
    77e4:	0252      	lsls	r2, r2, #9
    77e6:	4305      	orrs	r5, r0
    77e8:	0b12      	lsrs	r2, r2, #12
    77ea:	0d64      	lsrs	r4, r4, #21
    77ec:	2100      	movs	r1, #0
    77ee:	0312      	lsls	r2, r2, #12
    77f0:	0d0b      	lsrs	r3, r1, #20
    77f2:	051b      	lsls	r3, r3, #20
    77f4:	0564      	lsls	r4, r4, #21
    77f6:	0b12      	lsrs	r2, r2, #12
    77f8:	431a      	orrs	r2, r3
    77fa:	0863      	lsrs	r3, r4, #1
    77fc:	4cc2      	ldr	r4, [pc, #776]	; (7b08 <__aeabi_dadd+0x3b4>)
    77fe:	07f6      	lsls	r6, r6, #31
    7800:	4014      	ands	r4, r2
    7802:	431c      	orrs	r4, r3
    7804:	0064      	lsls	r4, r4, #1
    7806:	0864      	lsrs	r4, r4, #1
    7808:	4334      	orrs	r4, r6
    780a:	1c28      	adds	r0, r5, #0
    780c:	1c21      	adds	r1, r4, #0
    780e:	bc1c      	pop	{r2, r3, r4}
    7810:	4690      	mov	r8, r2
    7812:	4699      	mov	r9, r3
    7814:	46a2      	mov	sl, r4
    7816:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7818:	4bb9      	ldr	r3, [pc, #740]	; (7b00 <__aeabi_dadd+0x3ac>)
    781a:	429c      	cmp	r4, r3
    781c:	d0c2      	beq.n	77a4 <__aeabi_dadd+0x50>
    781e:	2380      	movs	r3, #128	; 0x80
    7820:	041b      	lsls	r3, r3, #16
    7822:	4319      	orrs	r1, r3
    7824:	2838      	cmp	r0, #56	; 0x38
    7826:	dd00      	ble.n	782a <__aeabi_dadd+0xd6>
    7828:	e0ec      	b.n	7a04 <__aeabi_dadd+0x2b0>
    782a:	281f      	cmp	r0, #31
    782c:	dd00      	ble.n	7830 <__aeabi_dadd+0xdc>
    782e:	e121      	b.n	7a74 <__aeabi_dadd+0x320>
    7830:	2220      	movs	r2, #32
    7832:	1c0e      	adds	r6, r1, #0
    7834:	4663      	mov	r3, ip
    7836:	1a12      	subs	r2, r2, r0
    7838:	4096      	lsls	r6, r2
    783a:	40c3      	lsrs	r3, r0
    783c:	4333      	orrs	r3, r6
    783e:	4666      	mov	r6, ip
    7840:	4096      	lsls	r6, r2
    7842:	1c32      	adds	r2, r6, #0
    7844:	1e56      	subs	r6, r2, #1
    7846:	41b2      	sbcs	r2, r6
    7848:	4313      	orrs	r3, r2
    784a:	1c0a      	adds	r2, r1, #0
    784c:	40c2      	lsrs	r2, r0
    784e:	1aeb      	subs	r3, r5, r3
    7850:	429d      	cmp	r5, r3
    7852:	41b6      	sbcs	r6, r6
    7854:	1c1d      	adds	r5, r3, #0
    7856:	1aba      	subs	r2, r7, r2
    7858:	4276      	negs	r6, r6
    785a:	1b97      	subs	r7, r2, r6
    785c:	023b      	lsls	r3, r7, #8
    785e:	d400      	bmi.n	7862 <__aeabi_dadd+0x10e>
    7860:	e097      	b.n	7992 <__aeabi_dadd+0x23e>
    7862:	027a      	lsls	r2, r7, #9
    7864:	0a56      	lsrs	r6, r2, #9
    7866:	2e00      	cmp	r6, #0
    7868:	d100      	bne.n	786c <__aeabi_dadd+0x118>
    786a:	e0b6      	b.n	79da <__aeabi_dadd+0x286>
    786c:	1c30      	adds	r0, r6, #0
    786e:	f001 fe73 	bl	9558 <__clzsi2>
    7872:	1c03      	adds	r3, r0, #0
    7874:	3b08      	subs	r3, #8
    7876:	2b1f      	cmp	r3, #31
    7878:	dd00      	ble.n	787c <__aeabi_dadd+0x128>
    787a:	e0b7      	b.n	79ec <__aeabi_dadd+0x298>
    787c:	409e      	lsls	r6, r3
    787e:	1c37      	adds	r7, r6, #0
    7880:	2628      	movs	r6, #40	; 0x28
    7882:	1c2a      	adds	r2, r5, #0
    7884:	1a36      	subs	r6, r6, r0
    7886:	40f2      	lsrs	r2, r6
    7888:	1c16      	adds	r6, r2, #0
    788a:	409d      	lsls	r5, r3
    788c:	433e      	orrs	r6, r7
    788e:	429c      	cmp	r4, r3
    7890:	dd00      	ble.n	7894 <__aeabi_dadd+0x140>
    7892:	e0b2      	b.n	79fa <__aeabi_dadd+0x2a6>
    7894:	1b1c      	subs	r4, r3, r4
    7896:	1c62      	adds	r2, r4, #1
    7898:	2a1f      	cmp	r2, #31
    789a:	dd00      	ble.n	789e <__aeabi_dadd+0x14a>
    789c:	e0d8      	b.n	7a50 <__aeabi_dadd+0x2fc>
    789e:	231f      	movs	r3, #31
    78a0:	1c29      	adds	r1, r5, #0
    78a2:	1b1c      	subs	r4, r3, r4
    78a4:	1c33      	adds	r3, r6, #0
    78a6:	40a5      	lsls	r5, r4
    78a8:	40a3      	lsls	r3, r4
    78aa:	40d1      	lsrs	r1, r2
    78ac:	1e6c      	subs	r4, r5, #1
    78ae:	41a5      	sbcs	r5, r4
    78b0:	40d6      	lsrs	r6, r2
    78b2:	4319      	orrs	r1, r3
    78b4:	430d      	orrs	r5, r1
    78b6:	1c37      	adds	r7, r6, #0
    78b8:	2400      	movs	r4, #0
    78ba:	e773      	b.n	77a4 <__aeabi_dadd+0x50>
    78bc:	2380      	movs	r3, #128	; 0x80
    78be:	041b      	lsls	r3, r3, #16
    78c0:	403b      	ands	r3, r7
    78c2:	4646      	mov	r6, r8
    78c4:	d000      	beq.n	78c8 <__aeabi_dadd+0x174>
    78c6:	e782      	b.n	77ce <__aeabi_dadd+0x7a>
    78c8:	4b8d      	ldr	r3, [pc, #564]	; (7b00 <__aeabi_dadd+0x3ac>)
    78ca:	08ed      	lsrs	r5, r5, #3
    78cc:	0778      	lsls	r0, r7, #29
    78ce:	4305      	orrs	r5, r0
    78d0:	08fa      	lsrs	r2, r7, #3
    78d2:	429c      	cmp	r4, r3
    78d4:	d032      	beq.n	793c <__aeabi_dadd+0x1e8>
    78d6:	0312      	lsls	r2, r2, #12
    78d8:	0564      	lsls	r4, r4, #21
    78da:	0b12      	lsrs	r2, r2, #12
    78dc:	0d64      	lsrs	r4, r4, #21
    78de:	e785      	b.n	77ec <__aeabi_dadd+0x98>
    78e0:	1aa3      	subs	r3, r4, r2
    78e2:	2b00      	cmp	r3, #0
    78e4:	dc00      	bgt.n	78e8 <__aeabi_dadd+0x194>
    78e6:	e094      	b.n	7a12 <__aeabi_dadd+0x2be>
    78e8:	2a00      	cmp	r2, #0
    78ea:	d03c      	beq.n	7966 <__aeabi_dadd+0x212>
    78ec:	4a84      	ldr	r2, [pc, #528]	; (7b00 <__aeabi_dadd+0x3ac>)
    78ee:	4294      	cmp	r4, r2
    78f0:	d100      	bne.n	78f4 <__aeabi_dadd+0x1a0>
    78f2:	e757      	b.n	77a4 <__aeabi_dadd+0x50>
    78f4:	2280      	movs	r2, #128	; 0x80
    78f6:	0412      	lsls	r2, r2, #16
    78f8:	4311      	orrs	r1, r2
    78fa:	2b38      	cmp	r3, #56	; 0x38
    78fc:	dc00      	bgt.n	7900 <__aeabi_dadd+0x1ac>
    78fe:	e105      	b.n	7b0c <__aeabi_dadd+0x3b8>
    7900:	4663      	mov	r3, ip
    7902:	4319      	orrs	r1, r3
    7904:	1e48      	subs	r0, r1, #1
    7906:	4181      	sbcs	r1, r0
    7908:	2200      	movs	r2, #0
    790a:	b2c8      	uxtb	r0, r1
    790c:	1940      	adds	r0, r0, r5
    790e:	42a8      	cmp	r0, r5
    7910:	419b      	sbcs	r3, r3
    7912:	1c05      	adds	r5, r0, #0
    7914:	19d2      	adds	r2, r2, r7
    7916:	425b      	negs	r3, r3
    7918:	18d7      	adds	r7, r2, r3
    791a:	023b      	lsls	r3, r7, #8
    791c:	d539      	bpl.n	7992 <__aeabi_dadd+0x23e>
    791e:	4b78      	ldr	r3, [pc, #480]	; (7b00 <__aeabi_dadd+0x3ac>)
    7920:	3401      	adds	r4, #1
    7922:	429c      	cmp	r4, r3
    7924:	d100      	bne.n	7928 <__aeabi_dadd+0x1d4>
    7926:	e14c      	b.n	7bc2 <__aeabi_dadd+0x46e>
    7928:	2001      	movs	r0, #1
    792a:	4a76      	ldr	r2, [pc, #472]	; (7b04 <__aeabi_dadd+0x3b0>)
    792c:	086b      	lsrs	r3, r5, #1
    792e:	403a      	ands	r2, r7
    7930:	4028      	ands	r0, r5
    7932:	4318      	orrs	r0, r3
    7934:	07d5      	lsls	r5, r2, #31
    7936:	4305      	orrs	r5, r0
    7938:	0857      	lsrs	r7, r2, #1
    793a:	e733      	b.n	77a4 <__aeabi_dadd+0x50>
    793c:	1c2b      	adds	r3, r5, #0
    793e:	4313      	orrs	r3, r2
    7940:	d048      	beq.n	79d4 <__aeabi_dadd+0x280>
    7942:	2380      	movs	r3, #128	; 0x80
    7944:	031b      	lsls	r3, r3, #12
    7946:	431a      	orrs	r2, r3
    7948:	0312      	lsls	r2, r2, #12
    794a:	0b12      	lsrs	r2, r2, #12
    794c:	e74e      	b.n	77ec <__aeabi_dadd+0x98>
    794e:	3801      	subs	r0, #1
    7950:	2800      	cmp	r0, #0
    7952:	d178      	bne.n	7a46 <__aeabi_dadd+0x2f2>
    7954:	4663      	mov	r3, ip
    7956:	1aee      	subs	r6, r5, r3
    7958:	42b5      	cmp	r5, r6
    795a:	419b      	sbcs	r3, r3
    795c:	1a7a      	subs	r2, r7, r1
    795e:	425b      	negs	r3, r3
    7960:	1ad7      	subs	r7, r2, r3
    7962:	1c35      	adds	r5, r6, #0
    7964:	e77a      	b.n	785c <__aeabi_dadd+0x108>
    7966:	1c02      	adds	r2, r0, #0
    7968:	430a      	orrs	r2, r1
    796a:	d100      	bne.n	796e <__aeabi_dadd+0x21a>
    796c:	e71a      	b.n	77a4 <__aeabi_dadd+0x50>
    796e:	3b01      	subs	r3, #1
    7970:	2b00      	cmp	r3, #0
    7972:	d000      	beq.n	7976 <__aeabi_dadd+0x222>
    7974:	e0f2      	b.n	7b5c <__aeabi_dadd+0x408>
    7976:	1940      	adds	r0, r0, r5
    7978:	42a8      	cmp	r0, r5
    797a:	419b      	sbcs	r3, r3
    797c:	19ca      	adds	r2, r1, r7
    797e:	425b      	negs	r3, r3
    7980:	18d7      	adds	r7, r2, r3
    7982:	1c05      	adds	r5, r0, #0
    7984:	e7c9      	b.n	791a <__aeabi_dadd+0x1c6>
    7986:	1c13      	adds	r3, r2, #0
    7988:	4333      	orrs	r3, r6
    798a:	d100      	bne.n	798e <__aeabi_dadd+0x23a>
    798c:	e118      	b.n	7bc0 <__aeabi_dadd+0x46c>
    798e:	1c17      	adds	r7, r2, #0
    7990:	1c35      	adds	r5, r6, #0
    7992:	4646      	mov	r6, r8
    7994:	076b      	lsls	r3, r5, #29
    7996:	d000      	beq.n	799a <__aeabi_dadd+0x246>
    7998:	e707      	b.n	77aa <__aeabi_dadd+0x56>
    799a:	e795      	b.n	78c8 <__aeabi_dadd+0x174>
    799c:	2800      	cmp	r0, #0
    799e:	d17a      	bne.n	7a96 <__aeabi_dadd+0x342>
    79a0:	1c62      	adds	r2, r4, #1
    79a2:	0552      	lsls	r2, r2, #21
    79a4:	0d52      	lsrs	r2, r2, #21
    79a6:	2a01      	cmp	r2, #1
    79a8:	dc00      	bgt.n	79ac <__aeabi_dadd+0x258>
    79aa:	e0fb      	b.n	7ba4 <__aeabi_dadd+0x450>
    79ac:	4662      	mov	r2, ip
    79ae:	1aaa      	subs	r2, r5, r2
    79b0:	4295      	cmp	r5, r2
    79b2:	41b6      	sbcs	r6, r6
    79b4:	4691      	mov	r9, r2
    79b6:	1a78      	subs	r0, r7, r1
    79b8:	4272      	negs	r2, r6
    79ba:	1a86      	subs	r6, r0, r2
    79bc:	0232      	lsls	r2, r6, #8
    79be:	d400      	bmi.n	79c2 <__aeabi_dadd+0x26e>
    79c0:	e093      	b.n	7aea <__aeabi_dadd+0x396>
    79c2:	4662      	mov	r2, ip
    79c4:	1b55      	subs	r5, r2, r5
    79c6:	45ac      	cmp	ip, r5
    79c8:	4180      	sbcs	r0, r0
    79ca:	1bcf      	subs	r7, r1, r7
    79cc:	4240      	negs	r0, r0
    79ce:	1a3e      	subs	r6, r7, r0
    79d0:	4698      	mov	r8, r3
    79d2:	e748      	b.n	7866 <__aeabi_dadd+0x112>
    79d4:	2200      	movs	r2, #0
    79d6:	2500      	movs	r5, #0
    79d8:	e708      	b.n	77ec <__aeabi_dadd+0x98>
    79da:	1c28      	adds	r0, r5, #0
    79dc:	f001 fdbc 	bl	9558 <__clzsi2>
    79e0:	3020      	adds	r0, #32
    79e2:	1c03      	adds	r3, r0, #0
    79e4:	3b08      	subs	r3, #8
    79e6:	2b1f      	cmp	r3, #31
    79e8:	dc00      	bgt.n	79ec <__aeabi_dadd+0x298>
    79ea:	e747      	b.n	787c <__aeabi_dadd+0x128>
    79ec:	3828      	subs	r0, #40	; 0x28
    79ee:	4085      	lsls	r5, r0
    79f0:	1c2e      	adds	r6, r5, #0
    79f2:	2500      	movs	r5, #0
    79f4:	429c      	cmp	r4, r3
    79f6:	dc00      	bgt.n	79fa <__aeabi_dadd+0x2a6>
    79f8:	e74c      	b.n	7894 <__aeabi_dadd+0x140>
    79fa:	4a42      	ldr	r2, [pc, #264]	; (7b04 <__aeabi_dadd+0x3b0>)
    79fc:	1ae4      	subs	r4, r4, r3
    79fe:	4016      	ands	r6, r2
    7a00:	1c37      	adds	r7, r6, #0
    7a02:	e6cf      	b.n	77a4 <__aeabi_dadd+0x50>
    7a04:	4663      	mov	r3, ip
    7a06:	4319      	orrs	r1, r3
    7a08:	1e4b      	subs	r3, r1, #1
    7a0a:	4199      	sbcs	r1, r3
    7a0c:	2200      	movs	r2, #0
    7a0e:	b2cb      	uxtb	r3, r1
    7a10:	e71d      	b.n	784e <__aeabi_dadd+0xfa>
    7a12:	2b00      	cmp	r3, #0
    7a14:	d000      	beq.n	7a18 <__aeabi_dadd+0x2c4>
    7a16:	e0f2      	b.n	7bfe <__aeabi_dadd+0x4aa>
    7a18:	1c60      	adds	r0, r4, #1
    7a1a:	0543      	lsls	r3, r0, #21
    7a1c:	0d5b      	lsrs	r3, r3, #21
    7a1e:	2b01      	cmp	r3, #1
    7a20:	dc00      	bgt.n	7a24 <__aeabi_dadd+0x2d0>
    7a22:	e0a4      	b.n	7b6e <__aeabi_dadd+0x41a>
    7a24:	4b36      	ldr	r3, [pc, #216]	; (7b00 <__aeabi_dadd+0x3ac>)
    7a26:	4298      	cmp	r0, r3
    7a28:	d100      	bne.n	7a2c <__aeabi_dadd+0x2d8>
    7a2a:	e121      	b.n	7c70 <__aeabi_dadd+0x51c>
    7a2c:	4663      	mov	r3, ip
    7a2e:	195c      	adds	r4, r3, r5
    7a30:	42ac      	cmp	r4, r5
    7a32:	419b      	sbcs	r3, r3
    7a34:	19cf      	adds	r7, r1, r7
    7a36:	425b      	negs	r3, r3
    7a38:	18fa      	adds	r2, r7, r3
    7a3a:	0864      	lsrs	r4, r4, #1
    7a3c:	07d5      	lsls	r5, r2, #31
    7a3e:	4325      	orrs	r5, r4
    7a40:	0857      	lsrs	r7, r2, #1
    7a42:	1c04      	adds	r4, r0, #0
    7a44:	e6ae      	b.n	77a4 <__aeabi_dadd+0x50>
    7a46:	4b2e      	ldr	r3, [pc, #184]	; (7b00 <__aeabi_dadd+0x3ac>)
    7a48:	429c      	cmp	r4, r3
    7a4a:	d000      	beq.n	7a4e <__aeabi_dadd+0x2fa>
    7a4c:	e6ea      	b.n	7824 <__aeabi_dadd+0xd0>
    7a4e:	e6a9      	b.n	77a4 <__aeabi_dadd+0x50>
    7a50:	1c21      	adds	r1, r4, #0
    7a52:	1c33      	adds	r3, r6, #0
    7a54:	391f      	subs	r1, #31
    7a56:	40cb      	lsrs	r3, r1
    7a58:	1c19      	adds	r1, r3, #0
    7a5a:	2a20      	cmp	r2, #32
    7a5c:	d100      	bne.n	7a60 <__aeabi_dadd+0x30c>
    7a5e:	e082      	b.n	7b66 <__aeabi_dadd+0x412>
    7a60:	233f      	movs	r3, #63	; 0x3f
    7a62:	1b1c      	subs	r4, r3, r4
    7a64:	40a6      	lsls	r6, r4
    7a66:	4335      	orrs	r5, r6
    7a68:	1e6e      	subs	r6, r5, #1
    7a6a:	41b5      	sbcs	r5, r6
    7a6c:	2700      	movs	r7, #0
    7a6e:	430d      	orrs	r5, r1
    7a70:	2400      	movs	r4, #0
    7a72:	e78e      	b.n	7992 <__aeabi_dadd+0x23e>
    7a74:	1c03      	adds	r3, r0, #0
    7a76:	1c0e      	adds	r6, r1, #0
    7a78:	3b20      	subs	r3, #32
    7a7a:	40de      	lsrs	r6, r3
    7a7c:	2820      	cmp	r0, #32
    7a7e:	d074      	beq.n	7b6a <__aeabi_dadd+0x416>
    7a80:	2340      	movs	r3, #64	; 0x40
    7a82:	1a1b      	subs	r3, r3, r0
    7a84:	4099      	lsls	r1, r3
    7a86:	1c0b      	adds	r3, r1, #0
    7a88:	4662      	mov	r2, ip
    7a8a:	4313      	orrs	r3, r2
    7a8c:	1e59      	subs	r1, r3, #1
    7a8e:	418b      	sbcs	r3, r1
    7a90:	2200      	movs	r2, #0
    7a92:	4333      	orrs	r3, r6
    7a94:	e6db      	b.n	784e <__aeabi_dadd+0xfa>
    7a96:	2c00      	cmp	r4, #0
    7a98:	d050      	beq.n	7b3c <__aeabi_dadd+0x3e8>
    7a9a:	4c19      	ldr	r4, [pc, #100]	; (7b00 <__aeabi_dadd+0x3ac>)
    7a9c:	42a2      	cmp	r2, r4
    7a9e:	d100      	bne.n	7aa2 <__aeabi_dadd+0x34e>
    7aa0:	e0a8      	b.n	7bf4 <__aeabi_dadd+0x4a0>
    7aa2:	2480      	movs	r4, #128	; 0x80
    7aa4:	0424      	lsls	r4, r4, #16
    7aa6:	4240      	negs	r0, r0
    7aa8:	4327      	orrs	r7, r4
    7aaa:	2838      	cmp	r0, #56	; 0x38
    7aac:	dd00      	ble.n	7ab0 <__aeabi_dadd+0x35c>
    7aae:	e0d9      	b.n	7c64 <__aeabi_dadd+0x510>
    7ab0:	281f      	cmp	r0, #31
    7ab2:	dd00      	ble.n	7ab6 <__aeabi_dadd+0x362>
    7ab4:	e139      	b.n	7d2a <__aeabi_dadd+0x5d6>
    7ab6:	2420      	movs	r4, #32
    7ab8:	1c3e      	adds	r6, r7, #0
    7aba:	1a24      	subs	r4, r4, r0
    7abc:	40a6      	lsls	r6, r4
    7abe:	46b0      	mov	r8, r6
    7ac0:	1c2e      	adds	r6, r5, #0
    7ac2:	46a1      	mov	r9, r4
    7ac4:	40c6      	lsrs	r6, r0
    7ac6:	4644      	mov	r4, r8
    7ac8:	4326      	orrs	r6, r4
    7aca:	464c      	mov	r4, r9
    7acc:	40a5      	lsls	r5, r4
    7ace:	1e6c      	subs	r4, r5, #1
    7ad0:	41a5      	sbcs	r5, r4
    7ad2:	40c7      	lsrs	r7, r0
    7ad4:	4335      	orrs	r5, r6
    7ad6:	4660      	mov	r0, ip
    7ad8:	1b45      	subs	r5, r0, r5
    7ada:	1bcf      	subs	r7, r1, r7
    7adc:	45ac      	cmp	ip, r5
    7ade:	4189      	sbcs	r1, r1
    7ae0:	4249      	negs	r1, r1
    7ae2:	1a7f      	subs	r7, r7, r1
    7ae4:	1c14      	adds	r4, r2, #0
    7ae6:	4698      	mov	r8, r3
    7ae8:	e6b8      	b.n	785c <__aeabi_dadd+0x108>
    7aea:	464b      	mov	r3, r9
    7aec:	464d      	mov	r5, r9
    7aee:	4333      	orrs	r3, r6
    7af0:	d000      	beq.n	7af4 <__aeabi_dadd+0x3a0>
    7af2:	e6b8      	b.n	7866 <__aeabi_dadd+0x112>
    7af4:	2600      	movs	r6, #0
    7af6:	2700      	movs	r7, #0
    7af8:	2400      	movs	r4, #0
    7afa:	2500      	movs	r5, #0
    7afc:	e6e4      	b.n	78c8 <__aeabi_dadd+0x174>
    7afe:	46c0      	nop			; (mov r8, r8)
    7b00:	000007ff 	.word	0x000007ff
    7b04:	ff7fffff 	.word	0xff7fffff
    7b08:	800fffff 	.word	0x800fffff
    7b0c:	2b1f      	cmp	r3, #31
    7b0e:	dc5b      	bgt.n	7bc8 <__aeabi_dadd+0x474>
    7b10:	2220      	movs	r2, #32
    7b12:	1c08      	adds	r0, r1, #0
    7b14:	1ad2      	subs	r2, r2, r3
    7b16:	4090      	lsls	r0, r2
    7b18:	4681      	mov	r9, r0
    7b1a:	4660      	mov	r0, ip
    7b1c:	4692      	mov	sl, r2
    7b1e:	40d8      	lsrs	r0, r3
    7b20:	464a      	mov	r2, r9
    7b22:	4310      	orrs	r0, r2
    7b24:	4681      	mov	r9, r0
    7b26:	4652      	mov	r2, sl
    7b28:	4660      	mov	r0, ip
    7b2a:	4090      	lsls	r0, r2
    7b2c:	1c02      	adds	r2, r0, #0
    7b2e:	1e50      	subs	r0, r2, #1
    7b30:	4182      	sbcs	r2, r0
    7b32:	4648      	mov	r0, r9
    7b34:	4310      	orrs	r0, r2
    7b36:	1c0a      	adds	r2, r1, #0
    7b38:	40da      	lsrs	r2, r3
    7b3a:	e6e7      	b.n	790c <__aeabi_dadd+0x1b8>
    7b3c:	1c3c      	adds	r4, r7, #0
    7b3e:	432c      	orrs	r4, r5
    7b40:	d058      	beq.n	7bf4 <__aeabi_dadd+0x4a0>
    7b42:	43c0      	mvns	r0, r0
    7b44:	2800      	cmp	r0, #0
    7b46:	d151      	bne.n	7bec <__aeabi_dadd+0x498>
    7b48:	4660      	mov	r0, ip
    7b4a:	1b45      	subs	r5, r0, r5
    7b4c:	45ac      	cmp	ip, r5
    7b4e:	4180      	sbcs	r0, r0
    7b50:	1bcf      	subs	r7, r1, r7
    7b52:	4240      	negs	r0, r0
    7b54:	1a3f      	subs	r7, r7, r0
    7b56:	1c14      	adds	r4, r2, #0
    7b58:	4698      	mov	r8, r3
    7b5a:	e67f      	b.n	785c <__aeabi_dadd+0x108>
    7b5c:	4a8f      	ldr	r2, [pc, #572]	; (7d9c <__aeabi_dadd+0x648>)
    7b5e:	4294      	cmp	r4, r2
    7b60:	d000      	beq.n	7b64 <__aeabi_dadd+0x410>
    7b62:	e6ca      	b.n	78fa <__aeabi_dadd+0x1a6>
    7b64:	e61e      	b.n	77a4 <__aeabi_dadd+0x50>
    7b66:	2600      	movs	r6, #0
    7b68:	e77d      	b.n	7a66 <__aeabi_dadd+0x312>
    7b6a:	2300      	movs	r3, #0
    7b6c:	e78c      	b.n	7a88 <__aeabi_dadd+0x334>
    7b6e:	1c3b      	adds	r3, r7, #0
    7b70:	432b      	orrs	r3, r5
    7b72:	2c00      	cmp	r4, #0
    7b74:	d000      	beq.n	7b78 <__aeabi_dadd+0x424>
    7b76:	e0bd      	b.n	7cf4 <__aeabi_dadd+0x5a0>
    7b78:	2b00      	cmp	r3, #0
    7b7a:	d100      	bne.n	7b7e <__aeabi_dadd+0x42a>
    7b7c:	e0f5      	b.n	7d6a <__aeabi_dadd+0x616>
    7b7e:	4663      	mov	r3, ip
    7b80:	430b      	orrs	r3, r1
    7b82:	d100      	bne.n	7b86 <__aeabi_dadd+0x432>
    7b84:	e60e      	b.n	77a4 <__aeabi_dadd+0x50>
    7b86:	4663      	mov	r3, ip
    7b88:	195b      	adds	r3, r3, r5
    7b8a:	42ab      	cmp	r3, r5
    7b8c:	4180      	sbcs	r0, r0
    7b8e:	19ca      	adds	r2, r1, r7
    7b90:	4240      	negs	r0, r0
    7b92:	1817      	adds	r7, r2, r0
    7b94:	023a      	lsls	r2, r7, #8
    7b96:	d400      	bmi.n	7b9a <__aeabi_dadd+0x446>
    7b98:	e0fc      	b.n	7d94 <__aeabi_dadd+0x640>
    7b9a:	4a81      	ldr	r2, [pc, #516]	; (7da0 <__aeabi_dadd+0x64c>)
    7b9c:	1c1d      	adds	r5, r3, #0
    7b9e:	4017      	ands	r7, r2
    7ba0:	3401      	adds	r4, #1
    7ba2:	e5ff      	b.n	77a4 <__aeabi_dadd+0x50>
    7ba4:	1c3a      	adds	r2, r7, #0
    7ba6:	432a      	orrs	r2, r5
    7ba8:	2c00      	cmp	r4, #0
    7baa:	d151      	bne.n	7c50 <__aeabi_dadd+0x4fc>
    7bac:	2a00      	cmp	r2, #0
    7bae:	d000      	beq.n	7bb2 <__aeabi_dadd+0x45e>
    7bb0:	e085      	b.n	7cbe <__aeabi_dadd+0x56a>
    7bb2:	4662      	mov	r2, ip
    7bb4:	430a      	orrs	r2, r1
    7bb6:	d003      	beq.n	7bc0 <__aeabi_dadd+0x46c>
    7bb8:	1c0f      	adds	r7, r1, #0
    7bba:	4665      	mov	r5, ip
    7bbc:	4698      	mov	r8, r3
    7bbe:	e5f1      	b.n	77a4 <__aeabi_dadd+0x50>
    7bc0:	2600      	movs	r6, #0
    7bc2:	2700      	movs	r7, #0
    7bc4:	2500      	movs	r5, #0
    7bc6:	e67f      	b.n	78c8 <__aeabi_dadd+0x174>
    7bc8:	1c18      	adds	r0, r3, #0
    7bca:	1c0a      	adds	r2, r1, #0
    7bcc:	3820      	subs	r0, #32
    7bce:	40c2      	lsrs	r2, r0
    7bd0:	2b20      	cmp	r3, #32
    7bd2:	d100      	bne.n	7bd6 <__aeabi_dadd+0x482>
    7bd4:	e0a7      	b.n	7d26 <__aeabi_dadd+0x5d2>
    7bd6:	2040      	movs	r0, #64	; 0x40
    7bd8:	1ac0      	subs	r0, r0, r3
    7bda:	4081      	lsls	r1, r0
    7bdc:	1c08      	adds	r0, r1, #0
    7bde:	4663      	mov	r3, ip
    7be0:	4318      	orrs	r0, r3
    7be2:	1e41      	subs	r1, r0, #1
    7be4:	4188      	sbcs	r0, r1
    7be6:	4310      	orrs	r0, r2
    7be8:	2200      	movs	r2, #0
    7bea:	e68f      	b.n	790c <__aeabi_dadd+0x1b8>
    7bec:	4c6b      	ldr	r4, [pc, #428]	; (7d9c <__aeabi_dadd+0x648>)
    7bee:	42a2      	cmp	r2, r4
    7bf0:	d000      	beq.n	7bf4 <__aeabi_dadd+0x4a0>
    7bf2:	e75a      	b.n	7aaa <__aeabi_dadd+0x356>
    7bf4:	1c0f      	adds	r7, r1, #0
    7bf6:	4665      	mov	r5, ip
    7bf8:	1c14      	adds	r4, r2, #0
    7bfa:	4698      	mov	r8, r3
    7bfc:	e5d2      	b.n	77a4 <__aeabi_dadd+0x50>
    7bfe:	2c00      	cmp	r4, #0
    7c00:	d13a      	bne.n	7c78 <__aeabi_dadd+0x524>
    7c02:	1c38      	adds	r0, r7, #0
    7c04:	4328      	orrs	r0, r5
    7c06:	d071      	beq.n	7cec <__aeabi_dadd+0x598>
    7c08:	43db      	mvns	r3, r3
    7c0a:	2b00      	cmp	r3, #0
    7c0c:	d018      	beq.n	7c40 <__aeabi_dadd+0x4ec>
    7c0e:	4863      	ldr	r0, [pc, #396]	; (7d9c <__aeabi_dadd+0x648>)
    7c10:	4282      	cmp	r2, r0
    7c12:	d06b      	beq.n	7cec <__aeabi_dadd+0x598>
    7c14:	2b38      	cmp	r3, #56	; 0x38
    7c16:	dd00      	ble.n	7c1a <__aeabi_dadd+0x4c6>
    7c18:	e09d      	b.n	7d56 <__aeabi_dadd+0x602>
    7c1a:	2b1f      	cmp	r3, #31
    7c1c:	dd00      	ble.n	7c20 <__aeabi_dadd+0x4cc>
    7c1e:	e0a7      	b.n	7d70 <__aeabi_dadd+0x61c>
    7c20:	2020      	movs	r0, #32
    7c22:	1c3c      	adds	r4, r7, #0
    7c24:	1ac0      	subs	r0, r0, r3
    7c26:	4084      	lsls	r4, r0
    7c28:	46a1      	mov	r9, r4
    7c2a:	1c2c      	adds	r4, r5, #0
    7c2c:	4682      	mov	sl, r0
    7c2e:	40dc      	lsrs	r4, r3
    7c30:	4648      	mov	r0, r9
    7c32:	4304      	orrs	r4, r0
    7c34:	4650      	mov	r0, sl
    7c36:	4085      	lsls	r5, r0
    7c38:	1e68      	subs	r0, r5, #1
    7c3a:	4185      	sbcs	r5, r0
    7c3c:	40df      	lsrs	r7, r3
    7c3e:	4325      	orrs	r5, r4
    7c40:	4465      	add	r5, ip
    7c42:	4565      	cmp	r5, ip
    7c44:	419b      	sbcs	r3, r3
    7c46:	187f      	adds	r7, r7, r1
    7c48:	425b      	negs	r3, r3
    7c4a:	18ff      	adds	r7, r7, r3
    7c4c:	1c14      	adds	r4, r2, #0
    7c4e:	e664      	b.n	791a <__aeabi_dadd+0x1c6>
    7c50:	2a00      	cmp	r2, #0
    7c52:	d119      	bne.n	7c88 <__aeabi_dadd+0x534>
    7c54:	4662      	mov	r2, ip
    7c56:	430a      	orrs	r2, r1
    7c58:	d077      	beq.n	7d4a <__aeabi_dadd+0x5f6>
    7c5a:	1c0f      	adds	r7, r1, #0
    7c5c:	4665      	mov	r5, ip
    7c5e:	4698      	mov	r8, r3
    7c60:	4c4e      	ldr	r4, [pc, #312]	; (7d9c <__aeabi_dadd+0x648>)
    7c62:	e59f      	b.n	77a4 <__aeabi_dadd+0x50>
    7c64:	433d      	orrs	r5, r7
    7c66:	1e6f      	subs	r7, r5, #1
    7c68:	41bd      	sbcs	r5, r7
    7c6a:	2700      	movs	r7, #0
    7c6c:	b2ed      	uxtb	r5, r5
    7c6e:	e732      	b.n	7ad6 <__aeabi_dadd+0x382>
    7c70:	1c04      	adds	r4, r0, #0
    7c72:	2700      	movs	r7, #0
    7c74:	2500      	movs	r5, #0
    7c76:	e627      	b.n	78c8 <__aeabi_dadd+0x174>
    7c78:	4848      	ldr	r0, [pc, #288]	; (7d9c <__aeabi_dadd+0x648>)
    7c7a:	4282      	cmp	r2, r0
    7c7c:	d036      	beq.n	7cec <__aeabi_dadd+0x598>
    7c7e:	2080      	movs	r0, #128	; 0x80
    7c80:	0400      	lsls	r0, r0, #16
    7c82:	425b      	negs	r3, r3
    7c84:	4307      	orrs	r7, r0
    7c86:	e7c5      	b.n	7c14 <__aeabi_dadd+0x4c0>
    7c88:	4662      	mov	r2, ip
    7c8a:	430a      	orrs	r2, r1
    7c8c:	d049      	beq.n	7d22 <__aeabi_dadd+0x5ce>
    7c8e:	2480      	movs	r4, #128	; 0x80
    7c90:	08ed      	lsrs	r5, r5, #3
    7c92:	0778      	lsls	r0, r7, #29
    7c94:	08fa      	lsrs	r2, r7, #3
    7c96:	0324      	lsls	r4, r4, #12
    7c98:	4328      	orrs	r0, r5
    7c9a:	4222      	tst	r2, r4
    7c9c:	d009      	beq.n	7cb2 <__aeabi_dadd+0x55e>
    7c9e:	08ce      	lsrs	r6, r1, #3
    7ca0:	4226      	tst	r6, r4
    7ca2:	d106      	bne.n	7cb2 <__aeabi_dadd+0x55e>
    7ca4:	4662      	mov	r2, ip
    7ca6:	074f      	lsls	r7, r1, #29
    7ca8:	1c38      	adds	r0, r7, #0
    7caa:	08d2      	lsrs	r2, r2, #3
    7cac:	4310      	orrs	r0, r2
    7cae:	4698      	mov	r8, r3
    7cb0:	1c32      	adds	r2, r6, #0
    7cb2:	00d2      	lsls	r2, r2, #3
    7cb4:	0f47      	lsrs	r7, r0, #29
    7cb6:	4317      	orrs	r7, r2
    7cb8:	00c5      	lsls	r5, r0, #3
    7cba:	4c38      	ldr	r4, [pc, #224]	; (7d9c <__aeabi_dadd+0x648>)
    7cbc:	e572      	b.n	77a4 <__aeabi_dadd+0x50>
    7cbe:	4662      	mov	r2, ip
    7cc0:	430a      	orrs	r2, r1
    7cc2:	d100      	bne.n	7cc6 <__aeabi_dadd+0x572>
    7cc4:	e56e      	b.n	77a4 <__aeabi_dadd+0x50>
    7cc6:	4662      	mov	r2, ip
    7cc8:	1aae      	subs	r6, r5, r2
    7cca:	42b5      	cmp	r5, r6
    7ccc:	4192      	sbcs	r2, r2
    7cce:	1a78      	subs	r0, r7, r1
    7cd0:	4252      	negs	r2, r2
    7cd2:	1a82      	subs	r2, r0, r2
    7cd4:	0210      	lsls	r0, r2, #8
    7cd6:	d400      	bmi.n	7cda <__aeabi_dadd+0x586>
    7cd8:	e655      	b.n	7986 <__aeabi_dadd+0x232>
    7cda:	4662      	mov	r2, ip
    7cdc:	1b55      	subs	r5, r2, r5
    7cde:	45ac      	cmp	ip, r5
    7ce0:	4180      	sbcs	r0, r0
    7ce2:	1bca      	subs	r2, r1, r7
    7ce4:	4240      	negs	r0, r0
    7ce6:	1a17      	subs	r7, r2, r0
    7ce8:	4698      	mov	r8, r3
    7cea:	e55b      	b.n	77a4 <__aeabi_dadd+0x50>
    7cec:	1c0f      	adds	r7, r1, #0
    7cee:	4665      	mov	r5, ip
    7cf0:	1c14      	adds	r4, r2, #0
    7cf2:	e557      	b.n	77a4 <__aeabi_dadd+0x50>
    7cf4:	2b00      	cmp	r3, #0
    7cf6:	d034      	beq.n	7d62 <__aeabi_dadd+0x60e>
    7cf8:	4663      	mov	r3, ip
    7cfa:	430b      	orrs	r3, r1
    7cfc:	d011      	beq.n	7d22 <__aeabi_dadd+0x5ce>
    7cfe:	2480      	movs	r4, #128	; 0x80
    7d00:	08ed      	lsrs	r5, r5, #3
    7d02:	0778      	lsls	r0, r7, #29
    7d04:	08fa      	lsrs	r2, r7, #3
    7d06:	0324      	lsls	r4, r4, #12
    7d08:	4328      	orrs	r0, r5
    7d0a:	4222      	tst	r2, r4
    7d0c:	d0d1      	beq.n	7cb2 <__aeabi_dadd+0x55e>
    7d0e:	08cb      	lsrs	r3, r1, #3
    7d10:	4223      	tst	r3, r4
    7d12:	d1ce      	bne.n	7cb2 <__aeabi_dadd+0x55e>
    7d14:	4662      	mov	r2, ip
    7d16:	074f      	lsls	r7, r1, #29
    7d18:	1c38      	adds	r0, r7, #0
    7d1a:	08d2      	lsrs	r2, r2, #3
    7d1c:	4310      	orrs	r0, r2
    7d1e:	1c1a      	adds	r2, r3, #0
    7d20:	e7c7      	b.n	7cb2 <__aeabi_dadd+0x55e>
    7d22:	4c1e      	ldr	r4, [pc, #120]	; (7d9c <__aeabi_dadd+0x648>)
    7d24:	e53e      	b.n	77a4 <__aeabi_dadd+0x50>
    7d26:	2000      	movs	r0, #0
    7d28:	e759      	b.n	7bde <__aeabi_dadd+0x48a>
    7d2a:	1c04      	adds	r4, r0, #0
    7d2c:	1c3e      	adds	r6, r7, #0
    7d2e:	3c20      	subs	r4, #32
    7d30:	40e6      	lsrs	r6, r4
    7d32:	1c34      	adds	r4, r6, #0
    7d34:	2820      	cmp	r0, #32
    7d36:	d02b      	beq.n	7d90 <__aeabi_dadd+0x63c>
    7d38:	2640      	movs	r6, #64	; 0x40
    7d3a:	1a30      	subs	r0, r6, r0
    7d3c:	4087      	lsls	r7, r0
    7d3e:	433d      	orrs	r5, r7
    7d40:	1e6f      	subs	r7, r5, #1
    7d42:	41bd      	sbcs	r5, r7
    7d44:	2700      	movs	r7, #0
    7d46:	4325      	orrs	r5, r4
    7d48:	e6c5      	b.n	7ad6 <__aeabi_dadd+0x382>
    7d4a:	2780      	movs	r7, #128	; 0x80
    7d4c:	2600      	movs	r6, #0
    7d4e:	03ff      	lsls	r7, r7, #15
    7d50:	4c12      	ldr	r4, [pc, #72]	; (7d9c <__aeabi_dadd+0x648>)
    7d52:	2500      	movs	r5, #0
    7d54:	e5b8      	b.n	78c8 <__aeabi_dadd+0x174>
    7d56:	433d      	orrs	r5, r7
    7d58:	1e6f      	subs	r7, r5, #1
    7d5a:	41bd      	sbcs	r5, r7
    7d5c:	2700      	movs	r7, #0
    7d5e:	b2ed      	uxtb	r5, r5
    7d60:	e76e      	b.n	7c40 <__aeabi_dadd+0x4ec>
    7d62:	1c0f      	adds	r7, r1, #0
    7d64:	4665      	mov	r5, ip
    7d66:	4c0d      	ldr	r4, [pc, #52]	; (7d9c <__aeabi_dadd+0x648>)
    7d68:	e51c      	b.n	77a4 <__aeabi_dadd+0x50>
    7d6a:	1c0f      	adds	r7, r1, #0
    7d6c:	4665      	mov	r5, ip
    7d6e:	e519      	b.n	77a4 <__aeabi_dadd+0x50>
    7d70:	1c1c      	adds	r4, r3, #0
    7d72:	1c38      	adds	r0, r7, #0
    7d74:	3c20      	subs	r4, #32
    7d76:	40e0      	lsrs	r0, r4
    7d78:	1c04      	adds	r4, r0, #0
    7d7a:	2b20      	cmp	r3, #32
    7d7c:	d00c      	beq.n	7d98 <__aeabi_dadd+0x644>
    7d7e:	2040      	movs	r0, #64	; 0x40
    7d80:	1ac3      	subs	r3, r0, r3
    7d82:	409f      	lsls	r7, r3
    7d84:	433d      	orrs	r5, r7
    7d86:	1e6f      	subs	r7, r5, #1
    7d88:	41bd      	sbcs	r5, r7
    7d8a:	2700      	movs	r7, #0
    7d8c:	4325      	orrs	r5, r4
    7d8e:	e757      	b.n	7c40 <__aeabi_dadd+0x4ec>
    7d90:	2700      	movs	r7, #0
    7d92:	e7d4      	b.n	7d3e <__aeabi_dadd+0x5ea>
    7d94:	1c1d      	adds	r5, r3, #0
    7d96:	e5fc      	b.n	7992 <__aeabi_dadd+0x23e>
    7d98:	2700      	movs	r7, #0
    7d9a:	e7f3      	b.n	7d84 <__aeabi_dadd+0x630>
    7d9c:	000007ff 	.word	0x000007ff
    7da0:	ff7fffff 	.word	0xff7fffff

00007da4 <__aeabi_ddiv>:
    7da4:	b5f0      	push	{r4, r5, r6, r7, lr}
    7da6:	465f      	mov	r7, fp
    7da8:	4656      	mov	r6, sl
    7daa:	464d      	mov	r5, r9
    7dac:	4644      	mov	r4, r8
    7dae:	b4f0      	push	{r4, r5, r6, r7}
    7db0:	030f      	lsls	r7, r1, #12
    7db2:	b087      	sub	sp, #28
    7db4:	4698      	mov	r8, r3
    7db6:	004d      	lsls	r5, r1, #1
    7db8:	0b3b      	lsrs	r3, r7, #12
    7dba:	0fcc      	lsrs	r4, r1, #31
    7dbc:	1c06      	adds	r6, r0, #0
    7dbe:	4692      	mov	sl, r2
    7dc0:	4681      	mov	r9, r0
    7dc2:	469b      	mov	fp, r3
    7dc4:	0d6d      	lsrs	r5, r5, #21
    7dc6:	9401      	str	r4, [sp, #4]
    7dc8:	d06b      	beq.n	7ea2 <__aeabi_ddiv+0xfe>
    7dca:	4b66      	ldr	r3, [pc, #408]	; (7f64 <__aeabi_ddiv+0x1c0>)
    7dcc:	429d      	cmp	r5, r3
    7dce:	d035      	beq.n	7e3c <__aeabi_ddiv+0x98>
    7dd0:	2780      	movs	r7, #128	; 0x80
    7dd2:	465b      	mov	r3, fp
    7dd4:	037f      	lsls	r7, r7, #13
    7dd6:	431f      	orrs	r7, r3
    7dd8:	00f3      	lsls	r3, r6, #3
    7dda:	4699      	mov	r9, r3
    7ddc:	4b62      	ldr	r3, [pc, #392]	; (7f68 <__aeabi_ddiv+0x1c4>)
    7dde:	00ff      	lsls	r7, r7, #3
    7de0:	0f40      	lsrs	r0, r0, #29
    7de2:	469c      	mov	ip, r3
    7de4:	4307      	orrs	r7, r0
    7de6:	2300      	movs	r3, #0
    7de8:	46bb      	mov	fp, r7
    7dea:	2600      	movs	r6, #0
    7dec:	4465      	add	r5, ip
    7dee:	9300      	str	r3, [sp, #0]
    7df0:	4642      	mov	r2, r8
    7df2:	0317      	lsls	r7, r2, #12
    7df4:	0050      	lsls	r0, r2, #1
    7df6:	0fd2      	lsrs	r2, r2, #31
    7df8:	4653      	mov	r3, sl
    7dfa:	0b3f      	lsrs	r7, r7, #12
    7dfc:	0d40      	lsrs	r0, r0, #21
    7dfe:	4690      	mov	r8, r2
    7e00:	d100      	bne.n	7e04 <__aeabi_ddiv+0x60>
    7e02:	e072      	b.n	7eea <__aeabi_ddiv+0x146>
    7e04:	4a57      	ldr	r2, [pc, #348]	; (7f64 <__aeabi_ddiv+0x1c0>)
    7e06:	4290      	cmp	r0, r2
    7e08:	d067      	beq.n	7eda <__aeabi_ddiv+0x136>
    7e0a:	2380      	movs	r3, #128	; 0x80
    7e0c:	035b      	lsls	r3, r3, #13
    7e0e:	431f      	orrs	r7, r3
    7e10:	4653      	mov	r3, sl
    7e12:	4a55      	ldr	r2, [pc, #340]	; (7f68 <__aeabi_ddiv+0x1c4>)
    7e14:	0f5b      	lsrs	r3, r3, #29
    7e16:	00ff      	lsls	r7, r7, #3
    7e18:	431f      	orrs	r7, r3
    7e1a:	4694      	mov	ip, r2
    7e1c:	4653      	mov	r3, sl
    7e1e:	2100      	movs	r1, #0
    7e20:	00db      	lsls	r3, r3, #3
    7e22:	4460      	add	r0, ip
    7e24:	4642      	mov	r2, r8
    7e26:	4062      	eors	r2, r4
    7e28:	4692      	mov	sl, r2
    7e2a:	1a2d      	subs	r5, r5, r0
    7e2c:	430e      	orrs	r6, r1
    7e2e:	2e0f      	cmp	r6, #15
    7e30:	d900      	bls.n	7e34 <__aeabi_ddiv+0x90>
    7e32:	e0a1      	b.n	7f78 <__aeabi_ddiv+0x1d4>
    7e34:	484d      	ldr	r0, [pc, #308]	; (7f6c <__aeabi_ddiv+0x1c8>)
    7e36:	00b6      	lsls	r6, r6, #2
    7e38:	5980      	ldr	r0, [r0, r6]
    7e3a:	4687      	mov	pc, r0
    7e3c:	465b      	mov	r3, fp
    7e3e:	431e      	orrs	r6, r3
    7e40:	d000      	beq.n	7e44 <__aeabi_ddiv+0xa0>
    7e42:	e076      	b.n	7f32 <__aeabi_ddiv+0x18e>
    7e44:	2300      	movs	r3, #0
    7e46:	469b      	mov	fp, r3
    7e48:	4699      	mov	r9, r3
    7e4a:	3302      	adds	r3, #2
    7e4c:	2608      	movs	r6, #8
    7e4e:	9300      	str	r3, [sp, #0]
    7e50:	e7ce      	b.n	7df0 <__aeabi_ddiv+0x4c>
    7e52:	4699      	mov	r9, r3
    7e54:	4643      	mov	r3, r8
    7e56:	46bb      	mov	fp, r7
    7e58:	9301      	str	r3, [sp, #4]
    7e5a:	9100      	str	r1, [sp, #0]
    7e5c:	9b00      	ldr	r3, [sp, #0]
    7e5e:	2b02      	cmp	r3, #2
    7e60:	d16b      	bne.n	7f3a <__aeabi_ddiv+0x196>
    7e62:	9b01      	ldr	r3, [sp, #4]
    7e64:	469a      	mov	sl, r3
    7e66:	2100      	movs	r1, #0
    7e68:	4653      	mov	r3, sl
    7e6a:	2201      	movs	r2, #1
    7e6c:	2700      	movs	r7, #0
    7e6e:	4689      	mov	r9, r1
    7e70:	401a      	ands	r2, r3
    7e72:	4b3c      	ldr	r3, [pc, #240]	; (7f64 <__aeabi_ddiv+0x1c0>)
    7e74:	2100      	movs	r1, #0
    7e76:	033f      	lsls	r7, r7, #12
    7e78:	0d0c      	lsrs	r4, r1, #20
    7e7a:	0524      	lsls	r4, r4, #20
    7e7c:	0b3f      	lsrs	r7, r7, #12
    7e7e:	4327      	orrs	r7, r4
    7e80:	4c3b      	ldr	r4, [pc, #236]	; (7f70 <__aeabi_ddiv+0x1cc>)
    7e82:	051b      	lsls	r3, r3, #20
    7e84:	4027      	ands	r7, r4
    7e86:	431f      	orrs	r7, r3
    7e88:	007f      	lsls	r7, r7, #1
    7e8a:	07d2      	lsls	r2, r2, #31
    7e8c:	087f      	lsrs	r7, r7, #1
    7e8e:	4317      	orrs	r7, r2
    7e90:	4648      	mov	r0, r9
    7e92:	1c39      	adds	r1, r7, #0
    7e94:	b007      	add	sp, #28
    7e96:	bc3c      	pop	{r2, r3, r4, r5}
    7e98:	4690      	mov	r8, r2
    7e9a:	4699      	mov	r9, r3
    7e9c:	46a2      	mov	sl, r4
    7e9e:	46ab      	mov	fp, r5
    7ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7ea2:	4303      	orrs	r3, r0
    7ea4:	d03e      	beq.n	7f24 <__aeabi_ddiv+0x180>
    7ea6:	465b      	mov	r3, fp
    7ea8:	2b00      	cmp	r3, #0
    7eaa:	d100      	bne.n	7eae <__aeabi_ddiv+0x10a>
    7eac:	e19c      	b.n	81e8 <__aeabi_ddiv+0x444>
    7eae:	4658      	mov	r0, fp
    7eb0:	f001 fb52 	bl	9558 <__clzsi2>
    7eb4:	2328      	movs	r3, #40	; 0x28
    7eb6:	1c31      	adds	r1, r6, #0
    7eb8:	1a1b      	subs	r3, r3, r0
    7eba:	1c02      	adds	r2, r0, #0
    7ebc:	465f      	mov	r7, fp
    7ebe:	40d9      	lsrs	r1, r3
    7ec0:	3a08      	subs	r2, #8
    7ec2:	4097      	lsls	r7, r2
    7ec4:	1c0b      	adds	r3, r1, #0
    7ec6:	4096      	lsls	r6, r2
    7ec8:	433b      	orrs	r3, r7
    7eca:	469b      	mov	fp, r3
    7ecc:	46b1      	mov	r9, r6
    7ece:	2300      	movs	r3, #0
    7ed0:	4d28      	ldr	r5, [pc, #160]	; (7f74 <__aeabi_ddiv+0x1d0>)
    7ed2:	2600      	movs	r6, #0
    7ed4:	1a2d      	subs	r5, r5, r0
    7ed6:	9300      	str	r3, [sp, #0]
    7ed8:	e78a      	b.n	7df0 <__aeabi_ddiv+0x4c>
    7eda:	4652      	mov	r2, sl
    7edc:	2103      	movs	r1, #3
    7ede:	433a      	orrs	r2, r7
    7ee0:	d1a0      	bne.n	7e24 <__aeabi_ddiv+0x80>
    7ee2:	2700      	movs	r7, #0
    7ee4:	2300      	movs	r3, #0
    7ee6:	2102      	movs	r1, #2
    7ee8:	e79c      	b.n	7e24 <__aeabi_ddiv+0x80>
    7eea:	4652      	mov	r2, sl
    7eec:	433a      	orrs	r2, r7
    7eee:	d015      	beq.n	7f1c <__aeabi_ddiv+0x178>
    7ef0:	2f00      	cmp	r7, #0
    7ef2:	d100      	bne.n	7ef6 <__aeabi_ddiv+0x152>
    7ef4:	e185      	b.n	8202 <__aeabi_ddiv+0x45e>
    7ef6:	1c38      	adds	r0, r7, #0
    7ef8:	f001 fb2e 	bl	9558 <__clzsi2>
    7efc:	1c02      	adds	r2, r0, #0
    7efe:	2128      	movs	r1, #40	; 0x28
    7f00:	4650      	mov	r0, sl
    7f02:	1a89      	subs	r1, r1, r2
    7f04:	1c13      	adds	r3, r2, #0
    7f06:	40c8      	lsrs	r0, r1
    7f08:	4651      	mov	r1, sl
    7f0a:	3b08      	subs	r3, #8
    7f0c:	4099      	lsls	r1, r3
    7f0e:	409f      	lsls	r7, r3
    7f10:	1c0b      	adds	r3, r1, #0
    7f12:	4307      	orrs	r7, r0
    7f14:	4817      	ldr	r0, [pc, #92]	; (7f74 <__aeabi_ddiv+0x1d0>)
    7f16:	2100      	movs	r1, #0
    7f18:	1a80      	subs	r0, r0, r2
    7f1a:	e783      	b.n	7e24 <__aeabi_ddiv+0x80>
    7f1c:	2700      	movs	r7, #0
    7f1e:	2300      	movs	r3, #0
    7f20:	2101      	movs	r1, #1
    7f22:	e77f      	b.n	7e24 <__aeabi_ddiv+0x80>
    7f24:	2300      	movs	r3, #0
    7f26:	469b      	mov	fp, r3
    7f28:	4699      	mov	r9, r3
    7f2a:	3301      	adds	r3, #1
    7f2c:	2604      	movs	r6, #4
    7f2e:	9300      	str	r3, [sp, #0]
    7f30:	e75e      	b.n	7df0 <__aeabi_ddiv+0x4c>
    7f32:	2303      	movs	r3, #3
    7f34:	260c      	movs	r6, #12
    7f36:	9300      	str	r3, [sp, #0]
    7f38:	e75a      	b.n	7df0 <__aeabi_ddiv+0x4c>
    7f3a:	2b03      	cmp	r3, #3
    7f3c:	d100      	bne.n	7f40 <__aeabi_ddiv+0x19c>
    7f3e:	e23c      	b.n	83ba <__aeabi_ddiv+0x616>
    7f40:	2b01      	cmp	r3, #1
    7f42:	d000      	beq.n	7f46 <__aeabi_ddiv+0x1a2>
    7f44:	e1bf      	b.n	82c6 <__aeabi_ddiv+0x522>
    7f46:	1c1a      	adds	r2, r3, #0
    7f48:	9b01      	ldr	r3, [sp, #4]
    7f4a:	401a      	ands	r2, r3
    7f4c:	2100      	movs	r1, #0
    7f4e:	2300      	movs	r3, #0
    7f50:	2700      	movs	r7, #0
    7f52:	4689      	mov	r9, r1
    7f54:	e78e      	b.n	7e74 <__aeabi_ddiv+0xd0>
    7f56:	2300      	movs	r3, #0
    7f58:	2780      	movs	r7, #128	; 0x80
    7f5a:	4699      	mov	r9, r3
    7f5c:	2200      	movs	r2, #0
    7f5e:	033f      	lsls	r7, r7, #12
    7f60:	4b00      	ldr	r3, [pc, #0]	; (7f64 <__aeabi_ddiv+0x1c0>)
    7f62:	e787      	b.n	7e74 <__aeabi_ddiv+0xd0>
    7f64:	000007ff 	.word	0x000007ff
    7f68:	fffffc01 	.word	0xfffffc01
    7f6c:	0000f818 	.word	0x0000f818
    7f70:	800fffff 	.word	0x800fffff
    7f74:	fffffc0d 	.word	0xfffffc0d
    7f78:	45bb      	cmp	fp, r7
    7f7a:	d900      	bls.n	7f7e <__aeabi_ddiv+0x1da>
    7f7c:	e151      	b.n	8222 <__aeabi_ddiv+0x47e>
    7f7e:	d100      	bne.n	7f82 <__aeabi_ddiv+0x1de>
    7f80:	e14c      	b.n	821c <__aeabi_ddiv+0x478>
    7f82:	464a      	mov	r2, r9
    7f84:	9203      	str	r2, [sp, #12]
    7f86:	2200      	movs	r2, #0
    7f88:	465c      	mov	r4, fp
    7f8a:	4690      	mov	r8, r2
    7f8c:	3d01      	subs	r5, #1
    7f8e:	0e18      	lsrs	r0, r3, #24
    7f90:	023f      	lsls	r7, r7, #8
    7f92:	4338      	orrs	r0, r7
    7f94:	021b      	lsls	r3, r3, #8
    7f96:	9301      	str	r3, [sp, #4]
    7f98:	0c03      	lsrs	r3, r0, #16
    7f9a:	4699      	mov	r9, r3
    7f9c:	0403      	lsls	r3, r0, #16
    7f9e:	0c1b      	lsrs	r3, r3, #16
    7fa0:	4649      	mov	r1, r9
    7fa2:	1c06      	adds	r6, r0, #0
    7fa4:	1c20      	adds	r0, r4, #0
    7fa6:	1c1f      	adds	r7, r3, #0
    7fa8:	9300      	str	r3, [sp, #0]
    7faa:	f7fe fac3 	bl	6534 <__aeabi_uidiv>
    7fae:	1c02      	adds	r2, r0, #0
    7fb0:	437a      	muls	r2, r7
    7fb2:	9002      	str	r0, [sp, #8]
    7fb4:	4649      	mov	r1, r9
    7fb6:	1c20      	adds	r0, r4, #0
    7fb8:	1c17      	adds	r7, r2, #0
    7fba:	f7fe fb41 	bl	6640 <__aeabi_uidivmod>
    7fbe:	9b03      	ldr	r3, [sp, #12]
    7fc0:	0409      	lsls	r1, r1, #16
    7fc2:	0c1b      	lsrs	r3, r3, #16
    7fc4:	4319      	orrs	r1, r3
    7fc6:	428f      	cmp	r7, r1
    7fc8:	d90c      	bls.n	7fe4 <__aeabi_ddiv+0x240>
    7fca:	9b02      	ldr	r3, [sp, #8]
    7fcc:	1989      	adds	r1, r1, r6
    7fce:	3b01      	subs	r3, #1
    7fd0:	428e      	cmp	r6, r1
    7fd2:	d900      	bls.n	7fd6 <__aeabi_ddiv+0x232>
    7fd4:	e152      	b.n	827c <__aeabi_ddiv+0x4d8>
    7fd6:	428f      	cmp	r7, r1
    7fd8:	d800      	bhi.n	7fdc <__aeabi_ddiv+0x238>
    7fda:	e14f      	b.n	827c <__aeabi_ddiv+0x4d8>
    7fdc:	9b02      	ldr	r3, [sp, #8]
    7fde:	1989      	adds	r1, r1, r6
    7fe0:	3b02      	subs	r3, #2
    7fe2:	9302      	str	r3, [sp, #8]
    7fe4:	1bcc      	subs	r4, r1, r7
    7fe6:	1c20      	adds	r0, r4, #0
    7fe8:	4649      	mov	r1, r9
    7fea:	f7fe faa3 	bl	6534 <__aeabi_uidiv>
    7fee:	9f00      	ldr	r7, [sp, #0]
    7ff0:	4683      	mov	fp, r0
    7ff2:	4347      	muls	r7, r0
    7ff4:	4649      	mov	r1, r9
    7ff6:	1c20      	adds	r0, r4, #0
    7ff8:	f7fe fb22 	bl	6640 <__aeabi_uidivmod>
    7ffc:	9a03      	ldr	r2, [sp, #12]
    7ffe:	040b      	lsls	r3, r1, #16
    8000:	0414      	lsls	r4, r2, #16
    8002:	0c24      	lsrs	r4, r4, #16
    8004:	4323      	orrs	r3, r4
    8006:	429f      	cmp	r7, r3
    8008:	d90d      	bls.n	8026 <__aeabi_ddiv+0x282>
    800a:	465a      	mov	r2, fp
    800c:	199b      	adds	r3, r3, r6
    800e:	3a01      	subs	r2, #1
    8010:	429e      	cmp	r6, r3
    8012:	d900      	bls.n	8016 <__aeabi_ddiv+0x272>
    8014:	e130      	b.n	8278 <__aeabi_ddiv+0x4d4>
    8016:	429f      	cmp	r7, r3
    8018:	d800      	bhi.n	801c <__aeabi_ddiv+0x278>
    801a:	e12d      	b.n	8278 <__aeabi_ddiv+0x4d4>
    801c:	2202      	movs	r2, #2
    801e:	4252      	negs	r2, r2
    8020:	4694      	mov	ip, r2
    8022:	199b      	adds	r3, r3, r6
    8024:	44e3      	add	fp, ip
    8026:	9a02      	ldr	r2, [sp, #8]
    8028:	1bdb      	subs	r3, r3, r7
    802a:	0417      	lsls	r7, r2, #16
    802c:	465a      	mov	r2, fp
    802e:	433a      	orrs	r2, r7
    8030:	4693      	mov	fp, r2
    8032:	9c01      	ldr	r4, [sp, #4]
    8034:	0c17      	lsrs	r7, r2, #16
    8036:	0c22      	lsrs	r2, r4, #16
    8038:	1c10      	adds	r0, r2, #0
    803a:	9204      	str	r2, [sp, #16]
    803c:	465a      	mov	r2, fp
    803e:	0411      	lsls	r1, r2, #16
    8040:	0422      	lsls	r2, r4, #16
    8042:	0c12      	lsrs	r2, r2, #16
    8044:	1c14      	adds	r4, r2, #0
    8046:	0c09      	lsrs	r1, r1, #16
    8048:	437c      	muls	r4, r7
    804a:	9205      	str	r2, [sp, #20]
    804c:	434a      	muls	r2, r1
    804e:	4341      	muls	r1, r0
    8050:	4347      	muls	r7, r0
    8052:	1861      	adds	r1, r4, r1
    8054:	0c10      	lsrs	r0, r2, #16
    8056:	1809      	adds	r1, r1, r0
    8058:	428c      	cmp	r4, r1
    805a:	d903      	bls.n	8064 <__aeabi_ddiv+0x2c0>
    805c:	2080      	movs	r0, #128	; 0x80
    805e:	0240      	lsls	r0, r0, #9
    8060:	4684      	mov	ip, r0
    8062:	4467      	add	r7, ip
    8064:	0c0c      	lsrs	r4, r1, #16
    8066:	0412      	lsls	r2, r2, #16
    8068:	0408      	lsls	r0, r1, #16
    806a:	0c12      	lsrs	r2, r2, #16
    806c:	193c      	adds	r4, r7, r4
    806e:	1881      	adds	r1, r0, r2
    8070:	42a3      	cmp	r3, r4
    8072:	d200      	bcs.n	8076 <__aeabi_ddiv+0x2d2>
    8074:	e0e5      	b.n	8242 <__aeabi_ddiv+0x49e>
    8076:	d100      	bne.n	807a <__aeabi_ddiv+0x2d6>
    8078:	e0df      	b.n	823a <__aeabi_ddiv+0x496>
    807a:	1b1f      	subs	r7, r3, r4
    807c:	4643      	mov	r3, r8
    807e:	1a5c      	subs	r4, r3, r1
    8080:	45a0      	cmp	r8, r4
    8082:	4192      	sbcs	r2, r2
    8084:	4252      	negs	r2, r2
    8086:	1abf      	subs	r7, r7, r2
    8088:	42b7      	cmp	r7, r6
    808a:	d100      	bne.n	808e <__aeabi_ddiv+0x2ea>
    808c:	e10e      	b.n	82ac <__aeabi_ddiv+0x508>
    808e:	1c38      	adds	r0, r7, #0
    8090:	4649      	mov	r1, r9
    8092:	f7fe fa4f 	bl	6534 <__aeabi_uidiv>
    8096:	9b00      	ldr	r3, [sp, #0]
    8098:	9002      	str	r0, [sp, #8]
    809a:	4343      	muls	r3, r0
    809c:	4649      	mov	r1, r9
    809e:	1c38      	adds	r0, r7, #0
    80a0:	4698      	mov	r8, r3
    80a2:	f7fe facd 	bl	6640 <__aeabi_uidivmod>
    80a6:	0c23      	lsrs	r3, r4, #16
    80a8:	040f      	lsls	r7, r1, #16
    80aa:	431f      	orrs	r7, r3
    80ac:	45b8      	cmp	r8, r7
    80ae:	d90c      	bls.n	80ca <__aeabi_ddiv+0x326>
    80b0:	9b02      	ldr	r3, [sp, #8]
    80b2:	19bf      	adds	r7, r7, r6
    80b4:	3b01      	subs	r3, #1
    80b6:	42be      	cmp	r6, r7
    80b8:	d900      	bls.n	80bc <__aeabi_ddiv+0x318>
    80ba:	e0fb      	b.n	82b4 <__aeabi_ddiv+0x510>
    80bc:	45b8      	cmp	r8, r7
    80be:	d800      	bhi.n	80c2 <__aeabi_ddiv+0x31e>
    80c0:	e0f8      	b.n	82b4 <__aeabi_ddiv+0x510>
    80c2:	9b02      	ldr	r3, [sp, #8]
    80c4:	19bf      	adds	r7, r7, r6
    80c6:	3b02      	subs	r3, #2
    80c8:	9302      	str	r3, [sp, #8]
    80ca:	4643      	mov	r3, r8
    80cc:	1aff      	subs	r7, r7, r3
    80ce:	4649      	mov	r1, r9
    80d0:	1c38      	adds	r0, r7, #0
    80d2:	f7fe fa2f 	bl	6534 <__aeabi_uidiv>
    80d6:	9b00      	ldr	r3, [sp, #0]
    80d8:	9003      	str	r0, [sp, #12]
    80da:	4343      	muls	r3, r0
    80dc:	4649      	mov	r1, r9
    80de:	1c38      	adds	r0, r7, #0
    80e0:	4698      	mov	r8, r3
    80e2:	f7fe faad 	bl	6640 <__aeabi_uidivmod>
    80e6:	0424      	lsls	r4, r4, #16
    80e8:	0409      	lsls	r1, r1, #16
    80ea:	0c24      	lsrs	r4, r4, #16
    80ec:	4321      	orrs	r1, r4
    80ee:	4588      	cmp	r8, r1
    80f0:	d90c      	bls.n	810c <__aeabi_ddiv+0x368>
    80f2:	9b03      	ldr	r3, [sp, #12]
    80f4:	1989      	adds	r1, r1, r6
    80f6:	3b01      	subs	r3, #1
    80f8:	428e      	cmp	r6, r1
    80fa:	d900      	bls.n	80fe <__aeabi_ddiv+0x35a>
    80fc:	e0dc      	b.n	82b8 <__aeabi_ddiv+0x514>
    80fe:	4588      	cmp	r8, r1
    8100:	d800      	bhi.n	8104 <__aeabi_ddiv+0x360>
    8102:	e0d9      	b.n	82b8 <__aeabi_ddiv+0x514>
    8104:	9b03      	ldr	r3, [sp, #12]
    8106:	1989      	adds	r1, r1, r6
    8108:	3b02      	subs	r3, #2
    810a:	9303      	str	r3, [sp, #12]
    810c:	4643      	mov	r3, r8
    810e:	1ac9      	subs	r1, r1, r3
    8110:	9b02      	ldr	r3, [sp, #8]
    8112:	9a03      	ldr	r2, [sp, #12]
    8114:	041b      	lsls	r3, r3, #16
    8116:	9c05      	ldr	r4, [sp, #20]
    8118:	431a      	orrs	r2, r3
    811a:	0c10      	lsrs	r0, r2, #16
    811c:	0413      	lsls	r3, r2, #16
    811e:	4691      	mov	r9, r2
    8120:	1c22      	adds	r2, r4, #0
    8122:	9f04      	ldr	r7, [sp, #16]
    8124:	0c1b      	lsrs	r3, r3, #16
    8126:	435a      	muls	r2, r3
    8128:	4344      	muls	r4, r0
    812a:	437b      	muls	r3, r7
    812c:	4378      	muls	r0, r7
    812e:	18e3      	adds	r3, r4, r3
    8130:	0c17      	lsrs	r7, r2, #16
    8132:	19db      	adds	r3, r3, r7
    8134:	429c      	cmp	r4, r3
    8136:	d903      	bls.n	8140 <__aeabi_ddiv+0x39c>
    8138:	2480      	movs	r4, #128	; 0x80
    813a:	0264      	lsls	r4, r4, #9
    813c:	46a4      	mov	ip, r4
    813e:	4460      	add	r0, ip
    8140:	0c1c      	lsrs	r4, r3, #16
    8142:	0412      	lsls	r2, r2, #16
    8144:	041b      	lsls	r3, r3, #16
    8146:	0c12      	lsrs	r2, r2, #16
    8148:	1900      	adds	r0, r0, r4
    814a:	189b      	adds	r3, r3, r2
    814c:	4281      	cmp	r1, r0
    814e:	d200      	bcs.n	8152 <__aeabi_ddiv+0x3ae>
    8150:	e096      	b.n	8280 <__aeabi_ddiv+0x4dc>
    8152:	d100      	bne.n	8156 <__aeabi_ddiv+0x3b2>
    8154:	e0fc      	b.n	8350 <__aeabi_ddiv+0x5ac>
    8156:	464a      	mov	r2, r9
    8158:	2301      	movs	r3, #1
    815a:	431a      	orrs	r2, r3
    815c:	4691      	mov	r9, r2
    815e:	4b9b      	ldr	r3, [pc, #620]	; (83cc <__aeabi_ddiv+0x628>)
    8160:	18eb      	adds	r3, r5, r3
    8162:	2b00      	cmp	r3, #0
    8164:	dc00      	bgt.n	8168 <__aeabi_ddiv+0x3c4>
    8166:	e099      	b.n	829c <__aeabi_ddiv+0x4f8>
    8168:	464a      	mov	r2, r9
    816a:	0752      	lsls	r2, r2, #29
    816c:	d00a      	beq.n	8184 <__aeabi_ddiv+0x3e0>
    816e:	220f      	movs	r2, #15
    8170:	4649      	mov	r1, r9
    8172:	400a      	ands	r2, r1
    8174:	2a04      	cmp	r2, #4
    8176:	d005      	beq.n	8184 <__aeabi_ddiv+0x3e0>
    8178:	3104      	adds	r1, #4
    817a:	4549      	cmp	r1, r9
    817c:	4192      	sbcs	r2, r2
    817e:	4689      	mov	r9, r1
    8180:	4252      	negs	r2, r2
    8182:	4493      	add	fp, r2
    8184:	465a      	mov	r2, fp
    8186:	01d2      	lsls	r2, r2, #7
    8188:	d506      	bpl.n	8198 <__aeabi_ddiv+0x3f4>
    818a:	465a      	mov	r2, fp
    818c:	4b90      	ldr	r3, [pc, #576]	; (83d0 <__aeabi_ddiv+0x62c>)
    818e:	401a      	ands	r2, r3
    8190:	2380      	movs	r3, #128	; 0x80
    8192:	4693      	mov	fp, r2
    8194:	00db      	lsls	r3, r3, #3
    8196:	18eb      	adds	r3, r5, r3
    8198:	4a8e      	ldr	r2, [pc, #568]	; (83d4 <__aeabi_ddiv+0x630>)
    819a:	4293      	cmp	r3, r2
    819c:	dd00      	ble.n	81a0 <__aeabi_ddiv+0x3fc>
    819e:	e662      	b.n	7e66 <__aeabi_ddiv+0xc2>
    81a0:	464a      	mov	r2, r9
    81a2:	4659      	mov	r1, fp
    81a4:	08d2      	lsrs	r2, r2, #3
    81a6:	0749      	lsls	r1, r1, #29
    81a8:	4311      	orrs	r1, r2
    81aa:	465a      	mov	r2, fp
    81ac:	4689      	mov	r9, r1
    81ae:	0257      	lsls	r7, r2, #9
    81b0:	4651      	mov	r1, sl
    81b2:	2201      	movs	r2, #1
    81b4:	055b      	lsls	r3, r3, #21
    81b6:	0b3f      	lsrs	r7, r7, #12
    81b8:	0d5b      	lsrs	r3, r3, #21
    81ba:	400a      	ands	r2, r1
    81bc:	e65a      	b.n	7e74 <__aeabi_ddiv+0xd0>
    81be:	2080      	movs	r0, #128	; 0x80
    81c0:	465a      	mov	r2, fp
    81c2:	0300      	lsls	r0, r0, #12
    81c4:	4202      	tst	r2, r0
    81c6:	d008      	beq.n	81da <__aeabi_ddiv+0x436>
    81c8:	4207      	tst	r7, r0
    81ca:	d106      	bne.n	81da <__aeabi_ddiv+0x436>
    81cc:	4307      	orrs	r7, r0
    81ce:	033f      	lsls	r7, r7, #12
    81d0:	4699      	mov	r9, r3
    81d2:	0b3f      	lsrs	r7, r7, #12
    81d4:	4642      	mov	r2, r8
    81d6:	4b80      	ldr	r3, [pc, #512]	; (83d8 <__aeabi_ddiv+0x634>)
    81d8:	e64c      	b.n	7e74 <__aeabi_ddiv+0xd0>
    81da:	465f      	mov	r7, fp
    81dc:	4307      	orrs	r7, r0
    81de:	033f      	lsls	r7, r7, #12
    81e0:	0b3f      	lsrs	r7, r7, #12
    81e2:	1c22      	adds	r2, r4, #0
    81e4:	4b7c      	ldr	r3, [pc, #496]	; (83d8 <__aeabi_ddiv+0x634>)
    81e6:	e645      	b.n	7e74 <__aeabi_ddiv+0xd0>
    81e8:	f001 f9b6 	bl	9558 <__clzsi2>
    81ec:	1c03      	adds	r3, r0, #0
    81ee:	3020      	adds	r0, #32
    81f0:	2827      	cmp	r0, #39	; 0x27
    81f2:	dc00      	bgt.n	81f6 <__aeabi_ddiv+0x452>
    81f4:	e65e      	b.n	7eb4 <__aeabi_ddiv+0x110>
    81f6:	3b08      	subs	r3, #8
    81f8:	409e      	lsls	r6, r3
    81fa:	2300      	movs	r3, #0
    81fc:	46b3      	mov	fp, r6
    81fe:	4699      	mov	r9, r3
    8200:	e665      	b.n	7ece <__aeabi_ddiv+0x12a>
    8202:	4650      	mov	r0, sl
    8204:	f001 f9a8 	bl	9558 <__clzsi2>
    8208:	1c02      	adds	r2, r0, #0
    820a:	3220      	adds	r2, #32
    820c:	2a27      	cmp	r2, #39	; 0x27
    820e:	dc00      	bgt.n	8212 <__aeabi_ddiv+0x46e>
    8210:	e675      	b.n	7efe <__aeabi_ddiv+0x15a>
    8212:	4657      	mov	r7, sl
    8214:	3808      	subs	r0, #8
    8216:	4087      	lsls	r7, r0
    8218:	2300      	movs	r3, #0
    821a:	e67b      	b.n	7f14 <__aeabi_ddiv+0x170>
    821c:	4599      	cmp	r9, r3
    821e:	d200      	bcs.n	8222 <__aeabi_ddiv+0x47e>
    8220:	e6af      	b.n	7f82 <__aeabi_ddiv+0x1de>
    8222:	465a      	mov	r2, fp
    8224:	4659      	mov	r1, fp
    8226:	0854      	lsrs	r4, r2, #1
    8228:	464a      	mov	r2, r9
    822a:	07c8      	lsls	r0, r1, #31
    822c:	0852      	lsrs	r2, r2, #1
    822e:	4302      	orrs	r2, r0
    8230:	9203      	str	r2, [sp, #12]
    8232:	464a      	mov	r2, r9
    8234:	07d2      	lsls	r2, r2, #31
    8236:	4690      	mov	r8, r2
    8238:	e6a9      	b.n	7f8e <__aeabi_ddiv+0x1ea>
    823a:	2700      	movs	r7, #0
    823c:	4588      	cmp	r8, r1
    823e:	d300      	bcc.n	8242 <__aeabi_ddiv+0x49e>
    8240:	e71c      	b.n	807c <__aeabi_ddiv+0x2d8>
    8242:	9f01      	ldr	r7, [sp, #4]
    8244:	465a      	mov	r2, fp
    8246:	46bc      	mov	ip, r7
    8248:	44e0      	add	r8, ip
    824a:	45b8      	cmp	r8, r7
    824c:	41bf      	sbcs	r7, r7
    824e:	427f      	negs	r7, r7
    8250:	19bf      	adds	r7, r7, r6
    8252:	18ff      	adds	r7, r7, r3
    8254:	3a01      	subs	r2, #1
    8256:	42be      	cmp	r6, r7
    8258:	d206      	bcs.n	8268 <__aeabi_ddiv+0x4c4>
    825a:	42bc      	cmp	r4, r7
    825c:	d85f      	bhi.n	831e <__aeabi_ddiv+0x57a>
    825e:	d100      	bne.n	8262 <__aeabi_ddiv+0x4be>
    8260:	e09f      	b.n	83a2 <__aeabi_ddiv+0x5fe>
    8262:	1b3f      	subs	r7, r7, r4
    8264:	4693      	mov	fp, r2
    8266:	e709      	b.n	807c <__aeabi_ddiv+0x2d8>
    8268:	42b7      	cmp	r7, r6
    826a:	d1fa      	bne.n	8262 <__aeabi_ddiv+0x4be>
    826c:	9b01      	ldr	r3, [sp, #4]
    826e:	4543      	cmp	r3, r8
    8270:	d9f3      	bls.n	825a <__aeabi_ddiv+0x4b6>
    8272:	1b37      	subs	r7, r6, r4
    8274:	4693      	mov	fp, r2
    8276:	e701      	b.n	807c <__aeabi_ddiv+0x2d8>
    8278:	4693      	mov	fp, r2
    827a:	e6d4      	b.n	8026 <__aeabi_ddiv+0x282>
    827c:	9302      	str	r3, [sp, #8]
    827e:	e6b1      	b.n	7fe4 <__aeabi_ddiv+0x240>
    8280:	464a      	mov	r2, r9
    8282:	1989      	adds	r1, r1, r6
    8284:	3a01      	subs	r2, #1
    8286:	428e      	cmp	r6, r1
    8288:	d918      	bls.n	82bc <__aeabi_ddiv+0x518>
    828a:	4691      	mov	r9, r2
    828c:	4281      	cmp	r1, r0
    828e:	d000      	beq.n	8292 <__aeabi_ddiv+0x4ee>
    8290:	e761      	b.n	8156 <__aeabi_ddiv+0x3b2>
    8292:	9a01      	ldr	r2, [sp, #4]
    8294:	429a      	cmp	r2, r3
    8296:	d000      	beq.n	829a <__aeabi_ddiv+0x4f6>
    8298:	e75d      	b.n	8156 <__aeabi_ddiv+0x3b2>
    829a:	e760      	b.n	815e <__aeabi_ddiv+0x3ba>
    829c:	4f4f      	ldr	r7, [pc, #316]	; (83dc <__aeabi_ddiv+0x638>)
    829e:	1b7f      	subs	r7, r7, r5
    82a0:	2f38      	cmp	r7, #56	; 0x38
    82a2:	dd13      	ble.n	82cc <__aeabi_ddiv+0x528>
    82a4:	2201      	movs	r2, #1
    82a6:	4653      	mov	r3, sl
    82a8:	401a      	ands	r2, r3
    82aa:	e64f      	b.n	7f4c <__aeabi_ddiv+0x1a8>
    82ac:	2301      	movs	r3, #1
    82ae:	425b      	negs	r3, r3
    82b0:	4699      	mov	r9, r3
    82b2:	e754      	b.n	815e <__aeabi_ddiv+0x3ba>
    82b4:	9302      	str	r3, [sp, #8]
    82b6:	e708      	b.n	80ca <__aeabi_ddiv+0x326>
    82b8:	9303      	str	r3, [sp, #12]
    82ba:	e727      	b.n	810c <__aeabi_ddiv+0x368>
    82bc:	4288      	cmp	r0, r1
    82be:	d83c      	bhi.n	833a <__aeabi_ddiv+0x596>
    82c0:	d074      	beq.n	83ac <__aeabi_ddiv+0x608>
    82c2:	4691      	mov	r9, r2
    82c4:	e747      	b.n	8156 <__aeabi_ddiv+0x3b2>
    82c6:	9b01      	ldr	r3, [sp, #4]
    82c8:	469a      	mov	sl, r3
    82ca:	e748      	b.n	815e <__aeabi_ddiv+0x3ba>
    82cc:	2f1f      	cmp	r7, #31
    82ce:	dc44      	bgt.n	835a <__aeabi_ddiv+0x5b6>
    82d0:	4b43      	ldr	r3, [pc, #268]	; (83e0 <__aeabi_ddiv+0x63c>)
    82d2:	464a      	mov	r2, r9
    82d4:	469c      	mov	ip, r3
    82d6:	465b      	mov	r3, fp
    82d8:	4465      	add	r5, ip
    82da:	40fa      	lsrs	r2, r7
    82dc:	40ab      	lsls	r3, r5
    82de:	4313      	orrs	r3, r2
    82e0:	464a      	mov	r2, r9
    82e2:	40aa      	lsls	r2, r5
    82e4:	1c15      	adds	r5, r2, #0
    82e6:	1e6a      	subs	r2, r5, #1
    82e8:	4195      	sbcs	r5, r2
    82ea:	465a      	mov	r2, fp
    82ec:	40fa      	lsrs	r2, r7
    82ee:	432b      	orrs	r3, r5
    82f0:	1c17      	adds	r7, r2, #0
    82f2:	075a      	lsls	r2, r3, #29
    82f4:	d009      	beq.n	830a <__aeabi_ddiv+0x566>
    82f6:	220f      	movs	r2, #15
    82f8:	401a      	ands	r2, r3
    82fa:	2a04      	cmp	r2, #4
    82fc:	d005      	beq.n	830a <__aeabi_ddiv+0x566>
    82fe:	1d1a      	adds	r2, r3, #4
    8300:	429a      	cmp	r2, r3
    8302:	419b      	sbcs	r3, r3
    8304:	425b      	negs	r3, r3
    8306:	18ff      	adds	r7, r7, r3
    8308:	1c13      	adds	r3, r2, #0
    830a:	023a      	lsls	r2, r7, #8
    830c:	d53e      	bpl.n	838c <__aeabi_ddiv+0x5e8>
    830e:	4653      	mov	r3, sl
    8310:	2201      	movs	r2, #1
    8312:	2100      	movs	r1, #0
    8314:	401a      	ands	r2, r3
    8316:	2700      	movs	r7, #0
    8318:	2301      	movs	r3, #1
    831a:	4689      	mov	r9, r1
    831c:	e5aa      	b.n	7e74 <__aeabi_ddiv+0xd0>
    831e:	2302      	movs	r3, #2
    8320:	425b      	negs	r3, r3
    8322:	469c      	mov	ip, r3
    8324:	9a01      	ldr	r2, [sp, #4]
    8326:	44e3      	add	fp, ip
    8328:	4694      	mov	ip, r2
    832a:	44e0      	add	r8, ip
    832c:	4590      	cmp	r8, r2
    832e:	419b      	sbcs	r3, r3
    8330:	425b      	negs	r3, r3
    8332:	199b      	adds	r3, r3, r6
    8334:	19df      	adds	r7, r3, r7
    8336:	1b3f      	subs	r7, r7, r4
    8338:	e6a0      	b.n	807c <__aeabi_ddiv+0x2d8>
    833a:	9f01      	ldr	r7, [sp, #4]
    833c:	464a      	mov	r2, r9
    833e:	007c      	lsls	r4, r7, #1
    8340:	42bc      	cmp	r4, r7
    8342:	41bf      	sbcs	r7, r7
    8344:	427f      	negs	r7, r7
    8346:	19bf      	adds	r7, r7, r6
    8348:	3a02      	subs	r2, #2
    834a:	19c9      	adds	r1, r1, r7
    834c:	9401      	str	r4, [sp, #4]
    834e:	e79c      	b.n	828a <__aeabi_ddiv+0x4e6>
    8350:	2b00      	cmp	r3, #0
    8352:	d195      	bne.n	8280 <__aeabi_ddiv+0x4dc>
    8354:	2200      	movs	r2, #0
    8356:	9201      	str	r2, [sp, #4]
    8358:	e79b      	b.n	8292 <__aeabi_ddiv+0x4ee>
    835a:	465a      	mov	r2, fp
    835c:	4b21      	ldr	r3, [pc, #132]	; (83e4 <__aeabi_ddiv+0x640>)
    835e:	1b5b      	subs	r3, r3, r5
    8360:	40da      	lsrs	r2, r3
    8362:	2f20      	cmp	r7, #32
    8364:	d027      	beq.n	83b6 <__aeabi_ddiv+0x612>
    8366:	4b20      	ldr	r3, [pc, #128]	; (83e8 <__aeabi_ddiv+0x644>)
    8368:	469c      	mov	ip, r3
    836a:	465b      	mov	r3, fp
    836c:	4465      	add	r5, ip
    836e:	40ab      	lsls	r3, r5
    8370:	4649      	mov	r1, r9
    8372:	430b      	orrs	r3, r1
    8374:	1e59      	subs	r1, r3, #1
    8376:	418b      	sbcs	r3, r1
    8378:	4313      	orrs	r3, r2
    837a:	2207      	movs	r2, #7
    837c:	2700      	movs	r7, #0
    837e:	401a      	ands	r2, r3
    8380:	d007      	beq.n	8392 <__aeabi_ddiv+0x5ee>
    8382:	220f      	movs	r2, #15
    8384:	2700      	movs	r7, #0
    8386:	401a      	ands	r2, r3
    8388:	2a04      	cmp	r2, #4
    838a:	d1b8      	bne.n	82fe <__aeabi_ddiv+0x55a>
    838c:	077a      	lsls	r2, r7, #29
    838e:	027f      	lsls	r7, r7, #9
    8390:	0b3f      	lsrs	r7, r7, #12
    8392:	08db      	lsrs	r3, r3, #3
    8394:	4313      	orrs	r3, r2
    8396:	4699      	mov	r9, r3
    8398:	2201      	movs	r2, #1
    839a:	4653      	mov	r3, sl
    839c:	401a      	ands	r2, r3
    839e:	2300      	movs	r3, #0
    83a0:	e568      	b.n	7e74 <__aeabi_ddiv+0xd0>
    83a2:	4541      	cmp	r1, r8
    83a4:	d8bb      	bhi.n	831e <__aeabi_ddiv+0x57a>
    83a6:	4693      	mov	fp, r2
    83a8:	2700      	movs	r7, #0
    83aa:	e667      	b.n	807c <__aeabi_ddiv+0x2d8>
    83ac:	9c01      	ldr	r4, [sp, #4]
    83ae:	429c      	cmp	r4, r3
    83b0:	d3c3      	bcc.n	833a <__aeabi_ddiv+0x596>
    83b2:	4691      	mov	r9, r2
    83b4:	e76d      	b.n	8292 <__aeabi_ddiv+0x4ee>
    83b6:	2300      	movs	r3, #0
    83b8:	e7da      	b.n	8370 <__aeabi_ddiv+0x5cc>
    83ba:	2780      	movs	r7, #128	; 0x80
    83bc:	465b      	mov	r3, fp
    83be:	033f      	lsls	r7, r7, #12
    83c0:	431f      	orrs	r7, r3
    83c2:	033f      	lsls	r7, r7, #12
    83c4:	0b3f      	lsrs	r7, r7, #12
    83c6:	9a01      	ldr	r2, [sp, #4]
    83c8:	4b03      	ldr	r3, [pc, #12]	; (83d8 <__aeabi_ddiv+0x634>)
    83ca:	e553      	b.n	7e74 <__aeabi_ddiv+0xd0>
    83cc:	000003ff 	.word	0x000003ff
    83d0:	feffffff 	.word	0xfeffffff
    83d4:	000007fe 	.word	0x000007fe
    83d8:	000007ff 	.word	0x000007ff
    83dc:	fffffc02 	.word	0xfffffc02
    83e0:	0000041e 	.word	0x0000041e
    83e4:	fffffbe2 	.word	0xfffffbe2
    83e8:	0000043e 	.word	0x0000043e

000083ec <__eqdf2>:
    83ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    83ee:	465f      	mov	r7, fp
    83f0:	464d      	mov	r5, r9
    83f2:	4644      	mov	r4, r8
    83f4:	4656      	mov	r6, sl
    83f6:	b4f0      	push	{r4, r5, r6, r7}
    83f8:	031f      	lsls	r7, r3, #12
    83fa:	005c      	lsls	r4, r3, #1
    83fc:	0fdb      	lsrs	r3, r3, #31
    83fe:	4699      	mov	r9, r3
    8400:	4b1b      	ldr	r3, [pc, #108]	; (8470 <__eqdf2+0x84>)
    8402:	030e      	lsls	r6, r1, #12
    8404:	004d      	lsls	r5, r1, #1
    8406:	0fc9      	lsrs	r1, r1, #31
    8408:	4684      	mov	ip, r0
    840a:	0b36      	lsrs	r6, r6, #12
    840c:	0d6d      	lsrs	r5, r5, #21
    840e:	468b      	mov	fp, r1
    8410:	4690      	mov	r8, r2
    8412:	0b3f      	lsrs	r7, r7, #12
    8414:	0d64      	lsrs	r4, r4, #21
    8416:	429d      	cmp	r5, r3
    8418:	d00c      	beq.n	8434 <__eqdf2+0x48>
    841a:	4b15      	ldr	r3, [pc, #84]	; (8470 <__eqdf2+0x84>)
    841c:	429c      	cmp	r4, r3
    841e:	d010      	beq.n	8442 <__eqdf2+0x56>
    8420:	2301      	movs	r3, #1
    8422:	42a5      	cmp	r5, r4
    8424:	d014      	beq.n	8450 <__eqdf2+0x64>
    8426:	1c18      	adds	r0, r3, #0
    8428:	bc3c      	pop	{r2, r3, r4, r5}
    842a:	4690      	mov	r8, r2
    842c:	4699      	mov	r9, r3
    842e:	46a2      	mov	sl, r4
    8430:	46ab      	mov	fp, r5
    8432:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8434:	1c31      	adds	r1, r6, #0
    8436:	2301      	movs	r3, #1
    8438:	4301      	orrs	r1, r0
    843a:	d1f4      	bne.n	8426 <__eqdf2+0x3a>
    843c:	4b0c      	ldr	r3, [pc, #48]	; (8470 <__eqdf2+0x84>)
    843e:	429c      	cmp	r4, r3
    8440:	d1ee      	bne.n	8420 <__eqdf2+0x34>
    8442:	433a      	orrs	r2, r7
    8444:	2301      	movs	r3, #1
    8446:	2a00      	cmp	r2, #0
    8448:	d1ed      	bne.n	8426 <__eqdf2+0x3a>
    844a:	2301      	movs	r3, #1
    844c:	42a5      	cmp	r5, r4
    844e:	d1ea      	bne.n	8426 <__eqdf2+0x3a>
    8450:	42be      	cmp	r6, r7
    8452:	d1e8      	bne.n	8426 <__eqdf2+0x3a>
    8454:	45c4      	cmp	ip, r8
    8456:	d1e6      	bne.n	8426 <__eqdf2+0x3a>
    8458:	45cb      	cmp	fp, r9
    845a:	d006      	beq.n	846a <__eqdf2+0x7e>
    845c:	2d00      	cmp	r5, #0
    845e:	d1e2      	bne.n	8426 <__eqdf2+0x3a>
    8460:	4330      	orrs	r0, r6
    8462:	1c03      	adds	r3, r0, #0
    8464:	1e58      	subs	r0, r3, #1
    8466:	4183      	sbcs	r3, r0
    8468:	e7dd      	b.n	8426 <__eqdf2+0x3a>
    846a:	2300      	movs	r3, #0
    846c:	e7db      	b.n	8426 <__eqdf2+0x3a>
    846e:	46c0      	nop			; (mov r8, r8)
    8470:	000007ff 	.word	0x000007ff

00008474 <__gedf2>:
    8474:	b5f0      	push	{r4, r5, r6, r7, lr}
    8476:	4657      	mov	r7, sl
    8478:	4645      	mov	r5, r8
    847a:	464e      	mov	r6, r9
    847c:	b4e0      	push	{r5, r6, r7}
    847e:	030f      	lsls	r7, r1, #12
    8480:	004e      	lsls	r6, r1, #1
    8482:	0fc9      	lsrs	r1, r1, #31
    8484:	468a      	mov	sl, r1
    8486:	4932      	ldr	r1, [pc, #200]	; (8550 <__gedf2+0xdc>)
    8488:	031d      	lsls	r5, r3, #12
    848a:	005c      	lsls	r4, r3, #1
    848c:	4684      	mov	ip, r0
    848e:	0b3f      	lsrs	r7, r7, #12
    8490:	0d76      	lsrs	r6, r6, #21
    8492:	4690      	mov	r8, r2
    8494:	0b2d      	lsrs	r5, r5, #12
    8496:	0d64      	lsrs	r4, r4, #21
    8498:	0fdb      	lsrs	r3, r3, #31
    849a:	428e      	cmp	r6, r1
    849c:	d00f      	beq.n	84be <__gedf2+0x4a>
    849e:	428c      	cmp	r4, r1
    84a0:	d039      	beq.n	8516 <__gedf2+0xa2>
    84a2:	2e00      	cmp	r6, #0
    84a4:	d110      	bne.n	84c8 <__gedf2+0x54>
    84a6:	4338      	orrs	r0, r7
    84a8:	4241      	negs	r1, r0
    84aa:	4141      	adcs	r1, r0
    84ac:	4689      	mov	r9, r1
    84ae:	2c00      	cmp	r4, #0
    84b0:	d127      	bne.n	8502 <__gedf2+0x8e>
    84b2:	432a      	orrs	r2, r5
    84b4:	d125      	bne.n	8502 <__gedf2+0x8e>
    84b6:	2000      	movs	r0, #0
    84b8:	2900      	cmp	r1, #0
    84ba:	d10e      	bne.n	84da <__gedf2+0x66>
    84bc:	e008      	b.n	84d0 <__gedf2+0x5c>
    84be:	1c39      	adds	r1, r7, #0
    84c0:	4301      	orrs	r1, r0
    84c2:	d12e      	bne.n	8522 <__gedf2+0xae>
    84c4:	42b4      	cmp	r4, r6
    84c6:	d026      	beq.n	8516 <__gedf2+0xa2>
    84c8:	2c00      	cmp	r4, #0
    84ca:	d00b      	beq.n	84e4 <__gedf2+0x70>
    84cc:	459a      	cmp	sl, r3
    84ce:	d00d      	beq.n	84ec <__gedf2+0x78>
    84d0:	4653      	mov	r3, sl
    84d2:	4259      	negs	r1, r3
    84d4:	2301      	movs	r3, #1
    84d6:	4319      	orrs	r1, r3
    84d8:	1c08      	adds	r0, r1, #0
    84da:	bc1c      	pop	{r2, r3, r4}
    84dc:	4690      	mov	r8, r2
    84de:	4699      	mov	r9, r3
    84e0:	46a2      	mov	sl, r4
    84e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    84e4:	432a      	orrs	r2, r5
    84e6:	d0f3      	beq.n	84d0 <__gedf2+0x5c>
    84e8:	459a      	cmp	sl, r3
    84ea:	d1f1      	bne.n	84d0 <__gedf2+0x5c>
    84ec:	42a6      	cmp	r6, r4
    84ee:	dcef      	bgt.n	84d0 <__gedf2+0x5c>
    84f0:	da1a      	bge.n	8528 <__gedf2+0xb4>
    84f2:	4650      	mov	r0, sl
    84f4:	4241      	negs	r1, r0
    84f6:	4148      	adcs	r0, r1
    84f8:	2301      	movs	r3, #1
    84fa:	4241      	negs	r1, r0
    84fc:	4319      	orrs	r1, r3
    84fe:	1c08      	adds	r0, r1, #0
    8500:	e7eb      	b.n	84da <__gedf2+0x66>
    8502:	464a      	mov	r2, r9
    8504:	2a00      	cmp	r2, #0
    8506:	d0e1      	beq.n	84cc <__gedf2+0x58>
    8508:	4258      	negs	r0, r3
    850a:	4158      	adcs	r0, r3
    850c:	2201      	movs	r2, #1
    850e:	4241      	negs	r1, r0
    8510:	4311      	orrs	r1, r2
    8512:	1c08      	adds	r0, r1, #0
    8514:	e7e1      	b.n	84da <__gedf2+0x66>
    8516:	1c29      	adds	r1, r5, #0
    8518:	4311      	orrs	r1, r2
    851a:	d102      	bne.n	8522 <__gedf2+0xae>
    851c:	2e00      	cmp	r6, #0
    851e:	d0c2      	beq.n	84a6 <__gedf2+0x32>
    8520:	e7d4      	b.n	84cc <__gedf2+0x58>
    8522:	2002      	movs	r0, #2
    8524:	4240      	negs	r0, r0
    8526:	e7d8      	b.n	84da <__gedf2+0x66>
    8528:	42af      	cmp	r7, r5
    852a:	d8d1      	bhi.n	84d0 <__gedf2+0x5c>
    852c:	d009      	beq.n	8542 <__gedf2+0xce>
    852e:	2000      	movs	r0, #0
    8530:	42af      	cmp	r7, r5
    8532:	d2d2      	bcs.n	84da <__gedf2+0x66>
    8534:	4650      	mov	r0, sl
    8536:	4241      	negs	r1, r0
    8538:	4148      	adcs	r0, r1
    853a:	2301      	movs	r3, #1
    853c:	4240      	negs	r0, r0
    853e:	4318      	orrs	r0, r3
    8540:	e7cb      	b.n	84da <__gedf2+0x66>
    8542:	45c4      	cmp	ip, r8
    8544:	d8c4      	bhi.n	84d0 <__gedf2+0x5c>
    8546:	2000      	movs	r0, #0
    8548:	45c4      	cmp	ip, r8
    854a:	d3f3      	bcc.n	8534 <__gedf2+0xc0>
    854c:	e7c5      	b.n	84da <__gedf2+0x66>
    854e:	46c0      	nop			; (mov r8, r8)
    8550:	000007ff 	.word	0x000007ff

00008554 <__ledf2>:
    8554:	b5f0      	push	{r4, r5, r6, r7, lr}
    8556:	465f      	mov	r7, fp
    8558:	464d      	mov	r5, r9
    855a:	4644      	mov	r4, r8
    855c:	4656      	mov	r6, sl
    855e:	4680      	mov	r8, r0
    8560:	b4f0      	push	{r4, r5, r6, r7}
    8562:	1c06      	adds	r6, r0, #0
    8564:	0308      	lsls	r0, r1, #12
    8566:	0b00      	lsrs	r0, r0, #12
    8568:	4684      	mov	ip, r0
    856a:	482c      	ldr	r0, [pc, #176]	; (861c <__ledf2+0xc8>)
    856c:	004c      	lsls	r4, r1, #1
    856e:	031f      	lsls	r7, r3, #12
    8570:	005d      	lsls	r5, r3, #1
    8572:	0fc9      	lsrs	r1, r1, #31
    8574:	0d64      	lsrs	r4, r4, #21
    8576:	468b      	mov	fp, r1
    8578:	4691      	mov	r9, r2
    857a:	0b3f      	lsrs	r7, r7, #12
    857c:	0d6d      	lsrs	r5, r5, #21
    857e:	0fdb      	lsrs	r3, r3, #31
    8580:	4284      	cmp	r4, r0
    8582:	d012      	beq.n	85aa <__ledf2+0x56>
    8584:	4285      	cmp	r5, r0
    8586:	d025      	beq.n	85d4 <__ledf2+0x80>
    8588:	2c00      	cmp	r4, #0
    858a:	d114      	bne.n	85b6 <__ledf2+0x62>
    858c:	4661      	mov	r1, ip
    858e:	430e      	orrs	r6, r1
    8590:	4270      	negs	r0, r6
    8592:	4146      	adcs	r6, r0
    8594:	2d00      	cmp	r5, #0
    8596:	d035      	beq.n	8604 <__ledf2+0xb0>
    8598:	2e00      	cmp	r6, #0
    859a:	d021      	beq.n	85e0 <__ledf2+0x8c>
    859c:	4258      	negs	r0, r3
    859e:	4158      	adcs	r0, r3
    85a0:	2101      	movs	r1, #1
    85a2:	4243      	negs	r3, r0
    85a4:	430b      	orrs	r3, r1
    85a6:	1c18      	adds	r0, r3, #0
    85a8:	e00e      	b.n	85c8 <__ledf2+0x74>
    85aa:	4661      	mov	r1, ip
    85ac:	2002      	movs	r0, #2
    85ae:	4331      	orrs	r1, r6
    85b0:	d10a      	bne.n	85c8 <__ledf2+0x74>
    85b2:	42a5      	cmp	r5, r4
    85b4:	d00e      	beq.n	85d4 <__ledf2+0x80>
    85b6:	2d00      	cmp	r5, #0
    85b8:	d112      	bne.n	85e0 <__ledf2+0x8c>
    85ba:	433a      	orrs	r2, r7
    85bc:	d110      	bne.n	85e0 <__ledf2+0x8c>
    85be:	465b      	mov	r3, fp
    85c0:	4259      	negs	r1, r3
    85c2:	2301      	movs	r3, #1
    85c4:	4319      	orrs	r1, r3
    85c6:	1c08      	adds	r0, r1, #0
    85c8:	bc3c      	pop	{r2, r3, r4, r5}
    85ca:	4690      	mov	r8, r2
    85cc:	4699      	mov	r9, r3
    85ce:	46a2      	mov	sl, r4
    85d0:	46ab      	mov	fp, r5
    85d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    85d4:	1c39      	adds	r1, r7, #0
    85d6:	2002      	movs	r0, #2
    85d8:	4311      	orrs	r1, r2
    85da:	d1f5      	bne.n	85c8 <__ledf2+0x74>
    85dc:	2c00      	cmp	r4, #0
    85de:	d0d5      	beq.n	858c <__ledf2+0x38>
    85e0:	459b      	cmp	fp, r3
    85e2:	d1ec      	bne.n	85be <__ledf2+0x6a>
    85e4:	42ac      	cmp	r4, r5
    85e6:	dcea      	bgt.n	85be <__ledf2+0x6a>
    85e8:	db05      	blt.n	85f6 <__ledf2+0xa2>
    85ea:	45bc      	cmp	ip, r7
    85ec:	d8e7      	bhi.n	85be <__ledf2+0x6a>
    85ee:	d00f      	beq.n	8610 <__ledf2+0xbc>
    85f0:	2000      	movs	r0, #0
    85f2:	45bc      	cmp	ip, r7
    85f4:	d2e8      	bcs.n	85c8 <__ledf2+0x74>
    85f6:	4658      	mov	r0, fp
    85f8:	4241      	negs	r1, r0
    85fa:	4148      	adcs	r0, r1
    85fc:	4241      	negs	r1, r0
    85fe:	2001      	movs	r0, #1
    8600:	4308      	orrs	r0, r1
    8602:	e7e1      	b.n	85c8 <__ledf2+0x74>
    8604:	433a      	orrs	r2, r7
    8606:	d1c7      	bne.n	8598 <__ledf2+0x44>
    8608:	2000      	movs	r0, #0
    860a:	2e00      	cmp	r6, #0
    860c:	d1dc      	bne.n	85c8 <__ledf2+0x74>
    860e:	e7d6      	b.n	85be <__ledf2+0x6a>
    8610:	45c8      	cmp	r8, r9
    8612:	d8d4      	bhi.n	85be <__ledf2+0x6a>
    8614:	2000      	movs	r0, #0
    8616:	45c8      	cmp	r8, r9
    8618:	d3ed      	bcc.n	85f6 <__ledf2+0xa2>
    861a:	e7d5      	b.n	85c8 <__ledf2+0x74>
    861c:	000007ff 	.word	0x000007ff

00008620 <__aeabi_dmul>:
    8620:	b5f0      	push	{r4, r5, r6, r7, lr}
    8622:	465f      	mov	r7, fp
    8624:	4656      	mov	r6, sl
    8626:	464d      	mov	r5, r9
    8628:	4644      	mov	r4, r8
    862a:	b4f0      	push	{r4, r5, r6, r7}
    862c:	1c05      	adds	r5, r0, #0
    862e:	1c06      	adds	r6, r0, #0
    8630:	0308      	lsls	r0, r1, #12
    8632:	b087      	sub	sp, #28
    8634:	4699      	mov	r9, r3
    8636:	004f      	lsls	r7, r1, #1
    8638:	0b03      	lsrs	r3, r0, #12
    863a:	0fcc      	lsrs	r4, r1, #31
    863c:	4692      	mov	sl, r2
    863e:	469b      	mov	fp, r3
    8640:	0d7f      	lsrs	r7, r7, #21
    8642:	9401      	str	r4, [sp, #4]
    8644:	d067      	beq.n	8716 <__aeabi_dmul+0xf6>
    8646:	4b6c      	ldr	r3, [pc, #432]	; (87f8 <__aeabi_dmul+0x1d8>)
    8648:	429f      	cmp	r7, r3
    864a:	d036      	beq.n	86ba <__aeabi_dmul+0x9a>
    864c:	2080      	movs	r0, #128	; 0x80
    864e:	465b      	mov	r3, fp
    8650:	0340      	lsls	r0, r0, #13
    8652:	4318      	orrs	r0, r3
    8654:	00c0      	lsls	r0, r0, #3
    8656:	0f6b      	lsrs	r3, r5, #29
    8658:	4318      	orrs	r0, r3
    865a:	4b68      	ldr	r3, [pc, #416]	; (87fc <__aeabi_dmul+0x1dc>)
    865c:	4683      	mov	fp, r0
    865e:	469c      	mov	ip, r3
    8660:	2300      	movs	r3, #0
    8662:	4698      	mov	r8, r3
    8664:	00ee      	lsls	r6, r5, #3
    8666:	4467      	add	r7, ip
    8668:	9300      	str	r3, [sp, #0]
    866a:	464b      	mov	r3, r9
    866c:	4649      	mov	r1, r9
    866e:	031d      	lsls	r5, r3, #12
    8670:	0fc9      	lsrs	r1, r1, #31
    8672:	005b      	lsls	r3, r3, #1
    8674:	4652      	mov	r2, sl
    8676:	0b2d      	lsrs	r5, r5, #12
    8678:	0d5b      	lsrs	r3, r3, #21
    867a:	4689      	mov	r9, r1
    867c:	d100      	bne.n	8680 <__aeabi_dmul+0x60>
    867e:	e06e      	b.n	875e <__aeabi_dmul+0x13e>
    8680:	495d      	ldr	r1, [pc, #372]	; (87f8 <__aeabi_dmul+0x1d8>)
    8682:	428b      	cmp	r3, r1
    8684:	d064      	beq.n	8750 <__aeabi_dmul+0x130>
    8686:	2080      	movs	r0, #128	; 0x80
    8688:	495c      	ldr	r1, [pc, #368]	; (87fc <__aeabi_dmul+0x1dc>)
    868a:	0340      	lsls	r0, r0, #13
    868c:	468c      	mov	ip, r1
    868e:	2100      	movs	r1, #0
    8690:	4305      	orrs	r5, r0
    8692:	00ed      	lsls	r5, r5, #3
    8694:	0f50      	lsrs	r0, r2, #29
    8696:	4305      	orrs	r5, r0
    8698:	00d2      	lsls	r2, r2, #3
    869a:	4463      	add	r3, ip
    869c:	4648      	mov	r0, r9
    869e:	18ff      	adds	r7, r7, r3
    86a0:	1c7b      	adds	r3, r7, #1
    86a2:	469a      	mov	sl, r3
    86a4:	9b00      	ldr	r3, [sp, #0]
    86a6:	4060      	eors	r0, r4
    86a8:	9002      	str	r0, [sp, #8]
    86aa:	430b      	orrs	r3, r1
    86ac:	2b0f      	cmp	r3, #15
    86ae:	d900      	bls.n	86b2 <__aeabi_dmul+0x92>
    86b0:	e0ac      	b.n	880c <__aeabi_dmul+0x1ec>
    86b2:	4853      	ldr	r0, [pc, #332]	; (8800 <__aeabi_dmul+0x1e0>)
    86b4:	009b      	lsls	r3, r3, #2
    86b6:	58c3      	ldr	r3, [r0, r3]
    86b8:	469f      	mov	pc, r3
    86ba:	465b      	mov	r3, fp
    86bc:	431d      	orrs	r5, r3
    86be:	d000      	beq.n	86c2 <__aeabi_dmul+0xa2>
    86c0:	e082      	b.n	87c8 <__aeabi_dmul+0x1a8>
    86c2:	2308      	movs	r3, #8
    86c4:	9300      	str	r3, [sp, #0]
    86c6:	2300      	movs	r3, #0
    86c8:	469b      	mov	fp, r3
    86ca:	3302      	adds	r3, #2
    86cc:	2600      	movs	r6, #0
    86ce:	4698      	mov	r8, r3
    86d0:	e7cb      	b.n	866a <__aeabi_dmul+0x4a>
    86d2:	9b02      	ldr	r3, [sp, #8]
    86d4:	9301      	str	r3, [sp, #4]
    86d6:	4643      	mov	r3, r8
    86d8:	2b02      	cmp	r3, #2
    86da:	d159      	bne.n	8790 <__aeabi_dmul+0x170>
    86dc:	2401      	movs	r4, #1
    86de:	2500      	movs	r5, #0
    86e0:	2600      	movs	r6, #0
    86e2:	9b01      	ldr	r3, [sp, #4]
    86e4:	401c      	ands	r4, r3
    86e6:	4b44      	ldr	r3, [pc, #272]	; (87f8 <__aeabi_dmul+0x1d8>)
    86e8:	2100      	movs	r1, #0
    86ea:	032d      	lsls	r5, r5, #12
    86ec:	0d0a      	lsrs	r2, r1, #20
    86ee:	0512      	lsls	r2, r2, #20
    86f0:	0b2d      	lsrs	r5, r5, #12
    86f2:	4315      	orrs	r5, r2
    86f4:	4a43      	ldr	r2, [pc, #268]	; (8804 <__aeabi_dmul+0x1e4>)
    86f6:	051b      	lsls	r3, r3, #20
    86f8:	4015      	ands	r5, r2
    86fa:	431d      	orrs	r5, r3
    86fc:	006d      	lsls	r5, r5, #1
    86fe:	07e4      	lsls	r4, r4, #31
    8700:	086d      	lsrs	r5, r5, #1
    8702:	4325      	orrs	r5, r4
    8704:	1c30      	adds	r0, r6, #0
    8706:	1c29      	adds	r1, r5, #0
    8708:	b007      	add	sp, #28
    870a:	bc3c      	pop	{r2, r3, r4, r5}
    870c:	4690      	mov	r8, r2
    870e:	4699      	mov	r9, r3
    8710:	46a2      	mov	sl, r4
    8712:	46ab      	mov	fp, r5
    8714:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8716:	432b      	orrs	r3, r5
    8718:	d04e      	beq.n	87b8 <__aeabi_dmul+0x198>
    871a:	465b      	mov	r3, fp
    871c:	2b00      	cmp	r3, #0
    871e:	d100      	bne.n	8722 <__aeabi_dmul+0x102>
    8720:	e185      	b.n	8a2e <__aeabi_dmul+0x40e>
    8722:	4658      	mov	r0, fp
    8724:	f000 ff18 	bl	9558 <__clzsi2>
    8728:	1c02      	adds	r2, r0, #0
    872a:	2328      	movs	r3, #40	; 0x28
    872c:	1c29      	adds	r1, r5, #0
    872e:	1a9b      	subs	r3, r3, r2
    8730:	1c16      	adds	r6, r2, #0
    8732:	4658      	mov	r0, fp
    8734:	40d9      	lsrs	r1, r3
    8736:	3e08      	subs	r6, #8
    8738:	40b0      	lsls	r0, r6
    873a:	1c0b      	adds	r3, r1, #0
    873c:	40b5      	lsls	r5, r6
    873e:	4303      	orrs	r3, r0
    8740:	469b      	mov	fp, r3
    8742:	1c2e      	adds	r6, r5, #0
    8744:	2300      	movs	r3, #0
    8746:	4f30      	ldr	r7, [pc, #192]	; (8808 <__aeabi_dmul+0x1e8>)
    8748:	9300      	str	r3, [sp, #0]
    874a:	1abf      	subs	r7, r7, r2
    874c:	4698      	mov	r8, r3
    874e:	e78c      	b.n	866a <__aeabi_dmul+0x4a>
    8750:	4651      	mov	r1, sl
    8752:	4329      	orrs	r1, r5
    8754:	d12e      	bne.n	87b4 <__aeabi_dmul+0x194>
    8756:	2500      	movs	r5, #0
    8758:	2200      	movs	r2, #0
    875a:	2102      	movs	r1, #2
    875c:	e79e      	b.n	869c <__aeabi_dmul+0x7c>
    875e:	4651      	mov	r1, sl
    8760:	4329      	orrs	r1, r5
    8762:	d023      	beq.n	87ac <__aeabi_dmul+0x18c>
    8764:	2d00      	cmp	r5, #0
    8766:	d100      	bne.n	876a <__aeabi_dmul+0x14a>
    8768:	e154      	b.n	8a14 <__aeabi_dmul+0x3f4>
    876a:	1c28      	adds	r0, r5, #0
    876c:	f000 fef4 	bl	9558 <__clzsi2>
    8770:	1c03      	adds	r3, r0, #0
    8772:	2128      	movs	r1, #40	; 0x28
    8774:	4650      	mov	r0, sl
    8776:	1ac9      	subs	r1, r1, r3
    8778:	1c1a      	adds	r2, r3, #0
    877a:	40c8      	lsrs	r0, r1
    877c:	4651      	mov	r1, sl
    877e:	3a08      	subs	r2, #8
    8780:	4091      	lsls	r1, r2
    8782:	4095      	lsls	r5, r2
    8784:	1c0a      	adds	r2, r1, #0
    8786:	4305      	orrs	r5, r0
    8788:	481f      	ldr	r0, [pc, #124]	; (8808 <__aeabi_dmul+0x1e8>)
    878a:	2100      	movs	r1, #0
    878c:	1ac3      	subs	r3, r0, r3
    878e:	e785      	b.n	869c <__aeabi_dmul+0x7c>
    8790:	2b03      	cmp	r3, #3
    8792:	d100      	bne.n	8796 <__aeabi_dmul+0x176>
    8794:	e1c2      	b.n	8b1c <__aeabi_dmul+0x4fc>
    8796:	2b01      	cmp	r3, #1
    8798:	d000      	beq.n	879c <__aeabi_dmul+0x17c>
    879a:	e16d      	b.n	8a78 <__aeabi_dmul+0x458>
    879c:	4644      	mov	r4, r8
    879e:	9b01      	ldr	r3, [sp, #4]
    87a0:	2500      	movs	r5, #0
    87a2:	401c      	ands	r4, r3
    87a4:	b2e4      	uxtb	r4, r4
    87a6:	2300      	movs	r3, #0
    87a8:	2600      	movs	r6, #0
    87aa:	e79d      	b.n	86e8 <__aeabi_dmul+0xc8>
    87ac:	2500      	movs	r5, #0
    87ae:	2200      	movs	r2, #0
    87b0:	2101      	movs	r1, #1
    87b2:	e773      	b.n	869c <__aeabi_dmul+0x7c>
    87b4:	2103      	movs	r1, #3
    87b6:	e771      	b.n	869c <__aeabi_dmul+0x7c>
    87b8:	2304      	movs	r3, #4
    87ba:	9300      	str	r3, [sp, #0]
    87bc:	2300      	movs	r3, #0
    87be:	469b      	mov	fp, r3
    87c0:	3301      	adds	r3, #1
    87c2:	2600      	movs	r6, #0
    87c4:	4698      	mov	r8, r3
    87c6:	e750      	b.n	866a <__aeabi_dmul+0x4a>
    87c8:	230c      	movs	r3, #12
    87ca:	9300      	str	r3, [sp, #0]
    87cc:	3b09      	subs	r3, #9
    87ce:	4698      	mov	r8, r3
    87d0:	e74b      	b.n	866a <__aeabi_dmul+0x4a>
    87d2:	2580      	movs	r5, #128	; 0x80
    87d4:	2400      	movs	r4, #0
    87d6:	032d      	lsls	r5, r5, #12
    87d8:	2600      	movs	r6, #0
    87da:	4b07      	ldr	r3, [pc, #28]	; (87f8 <__aeabi_dmul+0x1d8>)
    87dc:	e784      	b.n	86e8 <__aeabi_dmul+0xc8>
    87de:	464b      	mov	r3, r9
    87e0:	46ab      	mov	fp, r5
    87e2:	1c16      	adds	r6, r2, #0
    87e4:	9301      	str	r3, [sp, #4]
    87e6:	4688      	mov	r8, r1
    87e8:	e775      	b.n	86d6 <__aeabi_dmul+0xb6>
    87ea:	9b02      	ldr	r3, [sp, #8]
    87ec:	46ab      	mov	fp, r5
    87ee:	1c16      	adds	r6, r2, #0
    87f0:	9301      	str	r3, [sp, #4]
    87f2:	4688      	mov	r8, r1
    87f4:	e76f      	b.n	86d6 <__aeabi_dmul+0xb6>
    87f6:	46c0      	nop			; (mov r8, r8)
    87f8:	000007ff 	.word	0x000007ff
    87fc:	fffffc01 	.word	0xfffffc01
    8800:	0000f858 	.word	0x0000f858
    8804:	800fffff 	.word	0x800fffff
    8808:	fffffc0d 	.word	0xfffffc0d
    880c:	0c33      	lsrs	r3, r6, #16
    880e:	0436      	lsls	r6, r6, #16
    8810:	0c36      	lsrs	r6, r6, #16
    8812:	469c      	mov	ip, r3
    8814:	1c33      	adds	r3, r6, #0
    8816:	0c14      	lsrs	r4, r2, #16
    8818:	0412      	lsls	r2, r2, #16
    881a:	0c12      	lsrs	r2, r2, #16
    881c:	4353      	muls	r3, r2
    881e:	4698      	mov	r8, r3
    8820:	4663      	mov	r3, ip
    8822:	4353      	muls	r3, r2
    8824:	4699      	mov	r9, r3
    8826:	4663      	mov	r3, ip
    8828:	4363      	muls	r3, r4
    882a:	9301      	str	r3, [sp, #4]
    882c:	1c33      	adds	r3, r6, #0
    882e:	4641      	mov	r1, r8
    8830:	4363      	muls	r3, r4
    8832:	0c09      	lsrs	r1, r1, #16
    8834:	444b      	add	r3, r9
    8836:	185b      	adds	r3, r3, r1
    8838:	4599      	cmp	r9, r3
    883a:	d905      	bls.n	8848 <__aeabi_dmul+0x228>
    883c:	2080      	movs	r0, #128	; 0x80
    883e:	0240      	lsls	r0, r0, #9
    8840:	4681      	mov	r9, r0
    8842:	9901      	ldr	r1, [sp, #4]
    8844:	4449      	add	r1, r9
    8846:	9101      	str	r1, [sp, #4]
    8848:	0c19      	lsrs	r1, r3, #16
    884a:	9103      	str	r1, [sp, #12]
    884c:	4641      	mov	r1, r8
    884e:	0409      	lsls	r1, r1, #16
    8850:	0c09      	lsrs	r1, r1, #16
    8852:	041b      	lsls	r3, r3, #16
    8854:	185b      	adds	r3, r3, r1
    8856:	9304      	str	r3, [sp, #16]
    8858:	0c2b      	lsrs	r3, r5, #16
    885a:	4698      	mov	r8, r3
    885c:	1c33      	adds	r3, r6, #0
    885e:	042d      	lsls	r5, r5, #16
    8860:	0c29      	lsrs	r1, r5, #16
    8862:	434b      	muls	r3, r1
    8864:	4660      	mov	r0, ip
    8866:	9300      	str	r3, [sp, #0]
    8868:	4643      	mov	r3, r8
    886a:	4665      	mov	r5, ip
    886c:	4358      	muls	r0, r3
    886e:	435e      	muls	r6, r3
    8870:	9b00      	ldr	r3, [sp, #0]
    8872:	434d      	muls	r5, r1
    8874:	0c1b      	lsrs	r3, r3, #16
    8876:	4699      	mov	r9, r3
    8878:	19ae      	adds	r6, r5, r6
    887a:	444e      	add	r6, r9
    887c:	4684      	mov	ip, r0
    887e:	42b5      	cmp	r5, r6
    8880:	d903      	bls.n	888a <__aeabi_dmul+0x26a>
    8882:	2380      	movs	r3, #128	; 0x80
    8884:	025b      	lsls	r3, r3, #9
    8886:	4699      	mov	r9, r3
    8888:	44cc      	add	ip, r9
    888a:	0c35      	lsrs	r5, r6, #16
    888c:	1c2b      	adds	r3, r5, #0
    888e:	9803      	ldr	r0, [sp, #12]
    8890:	4463      	add	r3, ip
    8892:	4684      	mov	ip, r0
    8894:	9305      	str	r3, [sp, #20]
    8896:	9b00      	ldr	r3, [sp, #0]
    8898:	0436      	lsls	r6, r6, #16
    889a:	041b      	lsls	r3, r3, #16
    889c:	0c1b      	lsrs	r3, r3, #16
    889e:	18f3      	adds	r3, r6, r3
    88a0:	449c      	add	ip, r3
    88a2:	4660      	mov	r0, ip
    88a4:	9003      	str	r0, [sp, #12]
    88a6:	4658      	mov	r0, fp
    88a8:	0405      	lsls	r5, r0, #16
    88aa:	0c06      	lsrs	r6, r0, #16
    88ac:	0c28      	lsrs	r0, r5, #16
    88ae:	4684      	mov	ip, r0
    88b0:	4350      	muls	r0, r2
    88b2:	1c35      	adds	r5, r6, #0
    88b4:	4681      	mov	r9, r0
    88b6:	4660      	mov	r0, ip
    88b8:	4365      	muls	r5, r4
    88ba:	4344      	muls	r4, r0
    88bc:	4648      	mov	r0, r9
    88be:	0c00      	lsrs	r0, r0, #16
    88c0:	4683      	mov	fp, r0
    88c2:	4372      	muls	r2, r6
    88c4:	1914      	adds	r4, r2, r4
    88c6:	445c      	add	r4, fp
    88c8:	42a2      	cmp	r2, r4
    88ca:	d903      	bls.n	88d4 <__aeabi_dmul+0x2b4>
    88cc:	2280      	movs	r2, #128	; 0x80
    88ce:	0252      	lsls	r2, r2, #9
    88d0:	4693      	mov	fp, r2
    88d2:	445d      	add	r5, fp
    88d4:	0c22      	lsrs	r2, r4, #16
    88d6:	18ad      	adds	r5, r5, r2
    88d8:	464a      	mov	r2, r9
    88da:	0412      	lsls	r2, r2, #16
    88dc:	0c12      	lsrs	r2, r2, #16
    88de:	0424      	lsls	r4, r4, #16
    88e0:	4640      	mov	r0, r8
    88e2:	18a4      	adds	r4, r4, r2
    88e4:	4662      	mov	r2, ip
    88e6:	434a      	muls	r2, r1
    88e8:	4371      	muls	r1, r6
    88ea:	4346      	muls	r6, r0
    88ec:	4660      	mov	r0, ip
    88ee:	9600      	str	r6, [sp, #0]
    88f0:	4646      	mov	r6, r8
    88f2:	4370      	muls	r0, r6
    88f4:	4680      	mov	r8, r0
    88f6:	0c10      	lsrs	r0, r2, #16
    88f8:	4684      	mov	ip, r0
    88fa:	4488      	add	r8, r1
    88fc:	44e0      	add	r8, ip
    88fe:	4541      	cmp	r1, r8
    8900:	d905      	bls.n	890e <__aeabi_dmul+0x2ee>
    8902:	2180      	movs	r1, #128	; 0x80
    8904:	0249      	lsls	r1, r1, #9
    8906:	468c      	mov	ip, r1
    8908:	9900      	ldr	r1, [sp, #0]
    890a:	4461      	add	r1, ip
    890c:	9100      	str	r1, [sp, #0]
    890e:	9801      	ldr	r0, [sp, #4]
    8910:	9903      	ldr	r1, [sp, #12]
    8912:	4684      	mov	ip, r0
    8914:	4461      	add	r1, ip
    8916:	4299      	cmp	r1, r3
    8918:	419b      	sbcs	r3, r3
    891a:	425b      	negs	r3, r3
    891c:	4699      	mov	r9, r3
    891e:	9805      	ldr	r0, [sp, #20]
    8920:	4643      	mov	r3, r8
    8922:	4684      	mov	ip, r0
    8924:	0412      	lsls	r2, r2, #16
    8926:	0c12      	lsrs	r2, r2, #16
    8928:	041b      	lsls	r3, r3, #16
    892a:	189b      	adds	r3, r3, r2
    892c:	4463      	add	r3, ip
    892e:	469c      	mov	ip, r3
    8930:	46ab      	mov	fp, r5
    8932:	4283      	cmp	r3, r0
    8934:	419b      	sbcs	r3, r3
    8936:	4640      	mov	r0, r8
    8938:	190a      	adds	r2, r1, r4
    893a:	44cc      	add	ip, r9
    893c:	42a2      	cmp	r2, r4
    893e:	4189      	sbcs	r1, r1
    8940:	44e3      	add	fp, ip
    8942:	45cc      	cmp	ip, r9
    8944:	41b6      	sbcs	r6, r6
    8946:	465c      	mov	r4, fp
    8948:	0c00      	lsrs	r0, r0, #16
    894a:	4680      	mov	r8, r0
    894c:	4249      	negs	r1, r1
    894e:	4276      	negs	r6, r6
    8950:	425b      	negs	r3, r3
    8952:	1864      	adds	r4, r4, r1
    8954:	4333      	orrs	r3, r6
    8956:	4498      	add	r8, r3
    8958:	428c      	cmp	r4, r1
    895a:	4189      	sbcs	r1, r1
    895c:	45ab      	cmp	fp, r5
    895e:	419b      	sbcs	r3, r3
    8960:	4249      	negs	r1, r1
    8962:	425b      	negs	r3, r3
    8964:	4319      	orrs	r1, r3
    8966:	1c0d      	adds	r5, r1, #0
    8968:	9b00      	ldr	r3, [sp, #0]
    896a:	4445      	add	r5, r8
    896c:	18ee      	adds	r6, r5, r3
    896e:	0276      	lsls	r6, r6, #9
    8970:	0de5      	lsrs	r5, r4, #23
    8972:	432e      	orrs	r6, r5
    8974:	46b3      	mov	fp, r6
    8976:	9b04      	ldr	r3, [sp, #16]
    8978:	0256      	lsls	r6, r2, #9
    897a:	431e      	orrs	r6, r3
    897c:	1e73      	subs	r3, r6, #1
    897e:	419e      	sbcs	r6, r3
    8980:	465b      	mov	r3, fp
    8982:	0dd2      	lsrs	r2, r2, #23
    8984:	4332      	orrs	r2, r6
    8986:	0266      	lsls	r6, r4, #9
    8988:	4316      	orrs	r6, r2
    898a:	01db      	lsls	r3, r3, #7
    898c:	d50a      	bpl.n	89a4 <__aeabi_dmul+0x384>
    898e:	2301      	movs	r3, #1
    8990:	4033      	ands	r3, r6
    8992:	0876      	lsrs	r6, r6, #1
    8994:	431e      	orrs	r6, r3
    8996:	465b      	mov	r3, fp
    8998:	07db      	lsls	r3, r3, #31
    899a:	431e      	orrs	r6, r3
    899c:	465b      	mov	r3, fp
    899e:	085b      	lsrs	r3, r3, #1
    89a0:	469b      	mov	fp, r3
    89a2:	4657      	mov	r7, sl
    89a4:	4b63      	ldr	r3, [pc, #396]	; (8b34 <__aeabi_dmul+0x514>)
    89a6:	18fb      	adds	r3, r7, r3
    89a8:	2b00      	cmp	r3, #0
    89aa:	dd5a      	ble.n	8a62 <__aeabi_dmul+0x442>
    89ac:	0772      	lsls	r2, r6, #29
    89ae:	d009      	beq.n	89c4 <__aeabi_dmul+0x3a4>
    89b0:	220f      	movs	r2, #15
    89b2:	4032      	ands	r2, r6
    89b4:	2a04      	cmp	r2, #4
    89b6:	d005      	beq.n	89c4 <__aeabi_dmul+0x3a4>
    89b8:	1d32      	adds	r2, r6, #4
    89ba:	42b2      	cmp	r2, r6
    89bc:	41b6      	sbcs	r6, r6
    89be:	4276      	negs	r6, r6
    89c0:	44b3      	add	fp, r6
    89c2:	1c16      	adds	r6, r2, #0
    89c4:	465a      	mov	r2, fp
    89c6:	01d2      	lsls	r2, r2, #7
    89c8:	d506      	bpl.n	89d8 <__aeabi_dmul+0x3b8>
    89ca:	465a      	mov	r2, fp
    89cc:	4b5a      	ldr	r3, [pc, #360]	; (8b38 <__aeabi_dmul+0x518>)
    89ce:	401a      	ands	r2, r3
    89d0:	2380      	movs	r3, #128	; 0x80
    89d2:	4693      	mov	fp, r2
    89d4:	00db      	lsls	r3, r3, #3
    89d6:	18fb      	adds	r3, r7, r3
    89d8:	4a58      	ldr	r2, [pc, #352]	; (8b3c <__aeabi_dmul+0x51c>)
    89da:	4293      	cmp	r3, r2
    89dc:	dd34      	ble.n	8a48 <__aeabi_dmul+0x428>
    89de:	2401      	movs	r4, #1
    89e0:	9b02      	ldr	r3, [sp, #8]
    89e2:	2500      	movs	r5, #0
    89e4:	401c      	ands	r4, r3
    89e6:	2600      	movs	r6, #0
    89e8:	4b55      	ldr	r3, [pc, #340]	; (8b40 <__aeabi_dmul+0x520>)
    89ea:	e67d      	b.n	86e8 <__aeabi_dmul+0xc8>
    89ec:	2080      	movs	r0, #128	; 0x80
    89ee:	465b      	mov	r3, fp
    89f0:	0300      	lsls	r0, r0, #12
    89f2:	4203      	tst	r3, r0
    89f4:	d008      	beq.n	8a08 <__aeabi_dmul+0x3e8>
    89f6:	4205      	tst	r5, r0
    89f8:	d106      	bne.n	8a08 <__aeabi_dmul+0x3e8>
    89fa:	4305      	orrs	r5, r0
    89fc:	032d      	lsls	r5, r5, #12
    89fe:	0b2d      	lsrs	r5, r5, #12
    8a00:	464c      	mov	r4, r9
    8a02:	1c16      	adds	r6, r2, #0
    8a04:	4b4e      	ldr	r3, [pc, #312]	; (8b40 <__aeabi_dmul+0x520>)
    8a06:	e66f      	b.n	86e8 <__aeabi_dmul+0xc8>
    8a08:	465d      	mov	r5, fp
    8a0a:	4305      	orrs	r5, r0
    8a0c:	032d      	lsls	r5, r5, #12
    8a0e:	0b2d      	lsrs	r5, r5, #12
    8a10:	4b4b      	ldr	r3, [pc, #300]	; (8b40 <__aeabi_dmul+0x520>)
    8a12:	e669      	b.n	86e8 <__aeabi_dmul+0xc8>
    8a14:	4650      	mov	r0, sl
    8a16:	f000 fd9f 	bl	9558 <__clzsi2>
    8a1a:	1c03      	adds	r3, r0, #0
    8a1c:	3320      	adds	r3, #32
    8a1e:	2b27      	cmp	r3, #39	; 0x27
    8a20:	dc00      	bgt.n	8a24 <__aeabi_dmul+0x404>
    8a22:	e6a6      	b.n	8772 <__aeabi_dmul+0x152>
    8a24:	4655      	mov	r5, sl
    8a26:	3808      	subs	r0, #8
    8a28:	4085      	lsls	r5, r0
    8a2a:	2200      	movs	r2, #0
    8a2c:	e6ac      	b.n	8788 <__aeabi_dmul+0x168>
    8a2e:	1c28      	adds	r0, r5, #0
    8a30:	f000 fd92 	bl	9558 <__clzsi2>
    8a34:	1c02      	adds	r2, r0, #0
    8a36:	3220      	adds	r2, #32
    8a38:	2a27      	cmp	r2, #39	; 0x27
    8a3a:	dc00      	bgt.n	8a3e <__aeabi_dmul+0x41e>
    8a3c:	e675      	b.n	872a <__aeabi_dmul+0x10a>
    8a3e:	3808      	subs	r0, #8
    8a40:	4085      	lsls	r5, r0
    8a42:	2600      	movs	r6, #0
    8a44:	46ab      	mov	fp, r5
    8a46:	e67d      	b.n	8744 <__aeabi_dmul+0x124>
    8a48:	465a      	mov	r2, fp
    8a4a:	08f6      	lsrs	r6, r6, #3
    8a4c:	0752      	lsls	r2, r2, #29
    8a4e:	4316      	orrs	r6, r2
    8a50:	465a      	mov	r2, fp
    8a52:	2401      	movs	r4, #1
    8a54:	0255      	lsls	r5, r2, #9
    8a56:	9a02      	ldr	r2, [sp, #8]
    8a58:	055b      	lsls	r3, r3, #21
    8a5a:	0b2d      	lsrs	r5, r5, #12
    8a5c:	0d5b      	lsrs	r3, r3, #21
    8a5e:	4014      	ands	r4, r2
    8a60:	e642      	b.n	86e8 <__aeabi_dmul+0xc8>
    8a62:	4d38      	ldr	r5, [pc, #224]	; (8b44 <__aeabi_dmul+0x524>)
    8a64:	1bed      	subs	r5, r5, r7
    8a66:	2d38      	cmp	r5, #56	; 0x38
    8a68:	dd0a      	ble.n	8a80 <__aeabi_dmul+0x460>
    8a6a:	2401      	movs	r4, #1
    8a6c:	9b02      	ldr	r3, [sp, #8]
    8a6e:	2500      	movs	r5, #0
    8a70:	401c      	ands	r4, r3
    8a72:	2600      	movs	r6, #0
    8a74:	2300      	movs	r3, #0
    8a76:	e637      	b.n	86e8 <__aeabi_dmul+0xc8>
    8a78:	9b01      	ldr	r3, [sp, #4]
    8a7a:	4657      	mov	r7, sl
    8a7c:	9302      	str	r3, [sp, #8]
    8a7e:	e791      	b.n	89a4 <__aeabi_dmul+0x384>
    8a80:	2d1f      	cmp	r5, #31
    8a82:	dc25      	bgt.n	8ad0 <__aeabi_dmul+0x4b0>
    8a84:	4b30      	ldr	r3, [pc, #192]	; (8b48 <__aeabi_dmul+0x528>)
    8a86:	1c32      	adds	r2, r6, #0
    8a88:	469c      	mov	ip, r3
    8a8a:	4467      	add	r7, ip
    8a8c:	40be      	lsls	r6, r7
    8a8e:	465b      	mov	r3, fp
    8a90:	40bb      	lsls	r3, r7
    8a92:	1c37      	adds	r7, r6, #0
    8a94:	40ea      	lsrs	r2, r5
    8a96:	1e7e      	subs	r6, r7, #1
    8a98:	41b7      	sbcs	r7, r6
    8a9a:	4313      	orrs	r3, r2
    8a9c:	433b      	orrs	r3, r7
    8a9e:	1c1e      	adds	r6, r3, #0
    8aa0:	465b      	mov	r3, fp
    8aa2:	40eb      	lsrs	r3, r5
    8aa4:	1c1d      	adds	r5, r3, #0
    8aa6:	0773      	lsls	r3, r6, #29
    8aa8:	d009      	beq.n	8abe <__aeabi_dmul+0x49e>
    8aaa:	230f      	movs	r3, #15
    8aac:	4033      	ands	r3, r6
    8aae:	2b04      	cmp	r3, #4
    8ab0:	d005      	beq.n	8abe <__aeabi_dmul+0x49e>
    8ab2:	1d33      	adds	r3, r6, #4
    8ab4:	42b3      	cmp	r3, r6
    8ab6:	41b6      	sbcs	r6, r6
    8ab8:	4276      	negs	r6, r6
    8aba:	19ad      	adds	r5, r5, r6
    8abc:	1c1e      	adds	r6, r3, #0
    8abe:	022b      	lsls	r3, r5, #8
    8ac0:	d520      	bpl.n	8b04 <__aeabi_dmul+0x4e4>
    8ac2:	2401      	movs	r4, #1
    8ac4:	9b02      	ldr	r3, [sp, #8]
    8ac6:	2500      	movs	r5, #0
    8ac8:	401c      	ands	r4, r3
    8aca:	2600      	movs	r6, #0
    8acc:	2301      	movs	r3, #1
    8ace:	e60b      	b.n	86e8 <__aeabi_dmul+0xc8>
    8ad0:	465a      	mov	r2, fp
    8ad2:	4b1e      	ldr	r3, [pc, #120]	; (8b4c <__aeabi_dmul+0x52c>)
    8ad4:	1bdb      	subs	r3, r3, r7
    8ad6:	40da      	lsrs	r2, r3
    8ad8:	1c13      	adds	r3, r2, #0
    8ada:	2d20      	cmp	r5, #32
    8adc:	d01c      	beq.n	8b18 <__aeabi_dmul+0x4f8>
    8ade:	4a1c      	ldr	r2, [pc, #112]	; (8b50 <__aeabi_dmul+0x530>)
    8ae0:	4694      	mov	ip, r2
    8ae2:	465a      	mov	r2, fp
    8ae4:	4467      	add	r7, ip
    8ae6:	40ba      	lsls	r2, r7
    8ae8:	1c17      	adds	r7, r2, #0
    8aea:	433e      	orrs	r6, r7
    8aec:	1e72      	subs	r2, r6, #1
    8aee:	4196      	sbcs	r6, r2
    8af0:	431e      	orrs	r6, r3
    8af2:	2307      	movs	r3, #7
    8af4:	2500      	movs	r5, #0
    8af6:	4033      	ands	r3, r6
    8af8:	d007      	beq.n	8b0a <__aeabi_dmul+0x4ea>
    8afa:	230f      	movs	r3, #15
    8afc:	2500      	movs	r5, #0
    8afe:	4033      	ands	r3, r6
    8b00:	2b04      	cmp	r3, #4
    8b02:	d1d6      	bne.n	8ab2 <__aeabi_dmul+0x492>
    8b04:	076b      	lsls	r3, r5, #29
    8b06:	026d      	lsls	r5, r5, #9
    8b08:	0b2d      	lsrs	r5, r5, #12
    8b0a:	2401      	movs	r4, #1
    8b0c:	08f6      	lsrs	r6, r6, #3
    8b0e:	431e      	orrs	r6, r3
    8b10:	9b02      	ldr	r3, [sp, #8]
    8b12:	401c      	ands	r4, r3
    8b14:	2300      	movs	r3, #0
    8b16:	e5e7      	b.n	86e8 <__aeabi_dmul+0xc8>
    8b18:	2700      	movs	r7, #0
    8b1a:	e7e6      	b.n	8aea <__aeabi_dmul+0x4ca>
    8b1c:	2580      	movs	r5, #128	; 0x80
    8b1e:	465b      	mov	r3, fp
    8b20:	2401      	movs	r4, #1
    8b22:	032d      	lsls	r5, r5, #12
    8b24:	431d      	orrs	r5, r3
    8b26:	9b01      	ldr	r3, [sp, #4]
    8b28:	032d      	lsls	r5, r5, #12
    8b2a:	4023      	ands	r3, r4
    8b2c:	1c1c      	adds	r4, r3, #0
    8b2e:	0b2d      	lsrs	r5, r5, #12
    8b30:	4b03      	ldr	r3, [pc, #12]	; (8b40 <__aeabi_dmul+0x520>)
    8b32:	e5d9      	b.n	86e8 <__aeabi_dmul+0xc8>
    8b34:	000003ff 	.word	0x000003ff
    8b38:	feffffff 	.word	0xfeffffff
    8b3c:	000007fe 	.word	0x000007fe
    8b40:	000007ff 	.word	0x000007ff
    8b44:	fffffc02 	.word	0xfffffc02
    8b48:	0000041e 	.word	0x0000041e
    8b4c:	fffffbe2 	.word	0xfffffbe2
    8b50:	0000043e 	.word	0x0000043e

00008b54 <__aeabi_dsub>:
    8b54:	b5f0      	push	{r4, r5, r6, r7, lr}
    8b56:	464d      	mov	r5, r9
    8b58:	4644      	mov	r4, r8
    8b5a:	465f      	mov	r7, fp
    8b5c:	4656      	mov	r6, sl
    8b5e:	b4f0      	push	{r4, r5, r6, r7}
    8b60:	1c0e      	adds	r6, r1, #0
    8b62:	1c11      	adds	r1, r2, #0
    8b64:	0332      	lsls	r2, r6, #12
    8b66:	0a52      	lsrs	r2, r2, #9
    8b68:	0f47      	lsrs	r7, r0, #29
    8b6a:	4317      	orrs	r7, r2
    8b6c:	00c5      	lsls	r5, r0, #3
    8b6e:	031a      	lsls	r2, r3, #12
    8b70:	0058      	lsls	r0, r3, #1
    8b72:	0fdb      	lsrs	r3, r3, #31
    8b74:	4699      	mov	r9, r3
    8b76:	0a52      	lsrs	r2, r2, #9
    8b78:	0f4b      	lsrs	r3, r1, #29
    8b7a:	b083      	sub	sp, #12
    8b7c:	431a      	orrs	r2, r3
    8b7e:	00cb      	lsls	r3, r1, #3
    8b80:	9301      	str	r3, [sp, #4]
    8b82:	4bcf      	ldr	r3, [pc, #828]	; (8ec0 <__aeabi_dsub+0x36c>)
    8b84:	0074      	lsls	r4, r6, #1
    8b86:	0ff6      	lsrs	r6, r6, #31
    8b88:	0d64      	lsrs	r4, r4, #21
    8b8a:	46b0      	mov	r8, r6
    8b8c:	0d40      	lsrs	r0, r0, #21
    8b8e:	4298      	cmp	r0, r3
    8b90:	d100      	bne.n	8b94 <__aeabi_dsub+0x40>
    8b92:	e0e8      	b.n	8d66 <__aeabi_dsub+0x212>
    8b94:	2301      	movs	r3, #1
    8b96:	4649      	mov	r1, r9
    8b98:	4059      	eors	r1, r3
    8b9a:	1c0b      	adds	r3, r1, #0
    8b9c:	429e      	cmp	r6, r3
    8b9e:	d100      	bne.n	8ba2 <__aeabi_dsub+0x4e>
    8ba0:	e0b1      	b.n	8d06 <__aeabi_dsub+0x1b2>
    8ba2:	1a26      	subs	r6, r4, r0
    8ba4:	2e00      	cmp	r6, #0
    8ba6:	dc00      	bgt.n	8baa <__aeabi_dsub+0x56>
    8ba8:	e11c      	b.n	8de4 <__aeabi_dsub+0x290>
    8baa:	2800      	cmp	r0, #0
    8bac:	d142      	bne.n	8c34 <__aeabi_dsub+0xe0>
    8bae:	1c13      	adds	r3, r2, #0
    8bb0:	9901      	ldr	r1, [sp, #4]
    8bb2:	430b      	orrs	r3, r1
    8bb4:	d000      	beq.n	8bb8 <__aeabi_dsub+0x64>
    8bb6:	e0e6      	b.n	8d86 <__aeabi_dsub+0x232>
    8bb8:	076b      	lsls	r3, r5, #29
    8bba:	d100      	bne.n	8bbe <__aeabi_dsub+0x6a>
    8bbc:	e08e      	b.n	8cdc <__aeabi_dsub+0x188>
    8bbe:	230f      	movs	r3, #15
    8bc0:	402b      	ands	r3, r5
    8bc2:	2b04      	cmp	r3, #4
    8bc4:	d100      	bne.n	8bc8 <__aeabi_dsub+0x74>
    8bc6:	e089      	b.n	8cdc <__aeabi_dsub+0x188>
    8bc8:	1d2a      	adds	r2, r5, #4
    8bca:	42aa      	cmp	r2, r5
    8bcc:	41ad      	sbcs	r5, r5
    8bce:	2380      	movs	r3, #128	; 0x80
    8bd0:	2601      	movs	r6, #1
    8bd2:	4641      	mov	r1, r8
    8bd4:	426d      	negs	r5, r5
    8bd6:	197f      	adds	r7, r7, r5
    8bd8:	041b      	lsls	r3, r3, #16
    8bda:	403b      	ands	r3, r7
    8bdc:	400e      	ands	r6, r1
    8bde:	1c15      	adds	r5, r2, #0
    8be0:	2b00      	cmp	r3, #0
    8be2:	d100      	bne.n	8be6 <__aeabi_dsub+0x92>
    8be4:	e083      	b.n	8cee <__aeabi_dsub+0x19a>
    8be6:	4bb6      	ldr	r3, [pc, #728]	; (8ec0 <__aeabi_dsub+0x36c>)
    8be8:	3401      	adds	r4, #1
    8bea:	429c      	cmp	r4, r3
    8bec:	d100      	bne.n	8bf0 <__aeabi_dsub+0x9c>
    8bee:	e116      	b.n	8e1e <__aeabi_dsub+0x2ca>
    8bf0:	1c3a      	adds	r2, r7, #0
    8bf2:	4bb4      	ldr	r3, [pc, #720]	; (8ec4 <__aeabi_dsub+0x370>)
    8bf4:	08ed      	lsrs	r5, r5, #3
    8bf6:	401a      	ands	r2, r3
    8bf8:	0750      	lsls	r0, r2, #29
    8bfa:	0564      	lsls	r4, r4, #21
    8bfc:	0252      	lsls	r2, r2, #9
    8bfe:	4305      	orrs	r5, r0
    8c00:	0b12      	lsrs	r2, r2, #12
    8c02:	0d64      	lsrs	r4, r4, #21
    8c04:	2100      	movs	r1, #0
    8c06:	0312      	lsls	r2, r2, #12
    8c08:	0d0b      	lsrs	r3, r1, #20
    8c0a:	051b      	lsls	r3, r3, #20
    8c0c:	0564      	lsls	r4, r4, #21
    8c0e:	0b12      	lsrs	r2, r2, #12
    8c10:	431a      	orrs	r2, r3
    8c12:	0863      	lsrs	r3, r4, #1
    8c14:	4cac      	ldr	r4, [pc, #688]	; (8ec8 <__aeabi_dsub+0x374>)
    8c16:	07f6      	lsls	r6, r6, #31
    8c18:	4014      	ands	r4, r2
    8c1a:	431c      	orrs	r4, r3
    8c1c:	0064      	lsls	r4, r4, #1
    8c1e:	0864      	lsrs	r4, r4, #1
    8c20:	4334      	orrs	r4, r6
    8c22:	1c28      	adds	r0, r5, #0
    8c24:	1c21      	adds	r1, r4, #0
    8c26:	b003      	add	sp, #12
    8c28:	bc3c      	pop	{r2, r3, r4, r5}
    8c2a:	4690      	mov	r8, r2
    8c2c:	4699      	mov	r9, r3
    8c2e:	46a2      	mov	sl, r4
    8c30:	46ab      	mov	fp, r5
    8c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8c34:	4ba2      	ldr	r3, [pc, #648]	; (8ec0 <__aeabi_dsub+0x36c>)
    8c36:	429c      	cmp	r4, r3
    8c38:	d0be      	beq.n	8bb8 <__aeabi_dsub+0x64>
    8c3a:	2380      	movs	r3, #128	; 0x80
    8c3c:	041b      	lsls	r3, r3, #16
    8c3e:	431a      	orrs	r2, r3
    8c40:	2e38      	cmp	r6, #56	; 0x38
    8c42:	dd00      	ble.n	8c46 <__aeabi_dsub+0xf2>
    8c44:	e103      	b.n	8e4e <__aeabi_dsub+0x2fa>
    8c46:	2e1f      	cmp	r6, #31
    8c48:	dd00      	ble.n	8c4c <__aeabi_dsub+0xf8>
    8c4a:	e13f      	b.n	8ecc <__aeabi_dsub+0x378>
    8c4c:	2020      	movs	r0, #32
    8c4e:	1b83      	subs	r3, r0, r6
    8c50:	4699      	mov	r9, r3
    8c52:	1c13      	adds	r3, r2, #0
    8c54:	4649      	mov	r1, r9
    8c56:	408b      	lsls	r3, r1
    8c58:	469c      	mov	ip, r3
    8c5a:	9b01      	ldr	r3, [sp, #4]
    8c5c:	4660      	mov	r0, ip
    8c5e:	40f3      	lsrs	r3, r6
    8c60:	4303      	orrs	r3, r0
    8c62:	9801      	ldr	r0, [sp, #4]
    8c64:	40f2      	lsrs	r2, r6
    8c66:	4088      	lsls	r0, r1
    8c68:	1c01      	adds	r1, r0, #0
    8c6a:	1e48      	subs	r0, r1, #1
    8c6c:	4181      	sbcs	r1, r0
    8c6e:	430b      	orrs	r3, r1
    8c70:	1aeb      	subs	r3, r5, r3
    8c72:	429d      	cmp	r5, r3
    8c74:	4180      	sbcs	r0, r0
    8c76:	1c1d      	adds	r5, r3, #0
    8c78:	1aba      	subs	r2, r7, r2
    8c7a:	4240      	negs	r0, r0
    8c7c:	1a17      	subs	r7, r2, r0
    8c7e:	023b      	lsls	r3, r7, #8
    8c80:	d400      	bmi.n	8c84 <__aeabi_dsub+0x130>
    8c82:	e0a8      	b.n	8dd6 <__aeabi_dsub+0x282>
    8c84:	027a      	lsls	r2, r7, #9
    8c86:	0a56      	lsrs	r6, r2, #9
    8c88:	2e00      	cmp	r6, #0
    8c8a:	d100      	bne.n	8c8e <__aeabi_dsub+0x13a>
    8c8c:	e0ca      	b.n	8e24 <__aeabi_dsub+0x2d0>
    8c8e:	1c30      	adds	r0, r6, #0
    8c90:	f000 fc62 	bl	9558 <__clzsi2>
    8c94:	1c03      	adds	r3, r0, #0
    8c96:	3b08      	subs	r3, #8
    8c98:	2b1f      	cmp	r3, #31
    8c9a:	dd00      	ble.n	8c9e <__aeabi_dsub+0x14a>
    8c9c:	e0cb      	b.n	8e36 <__aeabi_dsub+0x2e2>
    8c9e:	2228      	movs	r2, #40	; 0x28
    8ca0:	1c29      	adds	r1, r5, #0
    8ca2:	1a12      	subs	r2, r2, r0
    8ca4:	40d1      	lsrs	r1, r2
    8ca6:	409e      	lsls	r6, r3
    8ca8:	1c0a      	adds	r2, r1, #0
    8caa:	409d      	lsls	r5, r3
    8cac:	4332      	orrs	r2, r6
    8cae:	429c      	cmp	r4, r3
    8cb0:	dd00      	ble.n	8cb4 <__aeabi_dsub+0x160>
    8cb2:	e0c8      	b.n	8e46 <__aeabi_dsub+0x2f2>
    8cb4:	1b1c      	subs	r4, r3, r4
    8cb6:	1c67      	adds	r7, r4, #1
    8cb8:	2f1f      	cmp	r7, #31
    8cba:	dd00      	ble.n	8cbe <__aeabi_dsub+0x16a>
    8cbc:	e0ed      	b.n	8e9a <__aeabi_dsub+0x346>
    8cbe:	231f      	movs	r3, #31
    8cc0:	1c29      	adds	r1, r5, #0
    8cc2:	1b1c      	subs	r4, r3, r4
    8cc4:	1c13      	adds	r3, r2, #0
    8cc6:	40a5      	lsls	r5, r4
    8cc8:	40a3      	lsls	r3, r4
    8cca:	40f9      	lsrs	r1, r7
    8ccc:	1e6c      	subs	r4, r5, #1
    8cce:	41a5      	sbcs	r5, r4
    8cd0:	40fa      	lsrs	r2, r7
    8cd2:	4319      	orrs	r1, r3
    8cd4:	430d      	orrs	r5, r1
    8cd6:	1c17      	adds	r7, r2, #0
    8cd8:	2400      	movs	r4, #0
    8cda:	e76d      	b.n	8bb8 <__aeabi_dsub+0x64>
    8cdc:	2380      	movs	r3, #128	; 0x80
    8cde:	2601      	movs	r6, #1
    8ce0:	4642      	mov	r2, r8
    8ce2:	041b      	lsls	r3, r3, #16
    8ce4:	403b      	ands	r3, r7
    8ce6:	4016      	ands	r6, r2
    8ce8:	2b00      	cmp	r3, #0
    8cea:	d000      	beq.n	8cee <__aeabi_dsub+0x19a>
    8cec:	e77b      	b.n	8be6 <__aeabi_dsub+0x92>
    8cee:	4b74      	ldr	r3, [pc, #464]	; (8ec0 <__aeabi_dsub+0x36c>)
    8cf0:	08ed      	lsrs	r5, r5, #3
    8cf2:	0778      	lsls	r0, r7, #29
    8cf4:	4305      	orrs	r5, r0
    8cf6:	08fa      	lsrs	r2, r7, #3
    8cf8:	429c      	cmp	r4, r3
    8cfa:	d03b      	beq.n	8d74 <__aeabi_dsub+0x220>
    8cfc:	0312      	lsls	r2, r2, #12
    8cfe:	0564      	lsls	r4, r4, #21
    8d00:	0b12      	lsrs	r2, r2, #12
    8d02:	0d64      	lsrs	r4, r4, #21
    8d04:	e77e      	b.n	8c04 <__aeabi_dsub+0xb0>
    8d06:	1a23      	subs	r3, r4, r0
    8d08:	469a      	mov	sl, r3
    8d0a:	2b00      	cmp	r3, #0
    8d0c:	dc00      	bgt.n	8d10 <__aeabi_dsub+0x1bc>
    8d0e:	e0a5      	b.n	8e5c <__aeabi_dsub+0x308>
    8d10:	2800      	cmp	r0, #0
    8d12:	d044      	beq.n	8d9e <__aeabi_dsub+0x24a>
    8d14:	486a      	ldr	r0, [pc, #424]	; (8ec0 <__aeabi_dsub+0x36c>)
    8d16:	4284      	cmp	r4, r0
    8d18:	d100      	bne.n	8d1c <__aeabi_dsub+0x1c8>
    8d1a:	e74d      	b.n	8bb8 <__aeabi_dsub+0x64>
    8d1c:	2080      	movs	r0, #128	; 0x80
    8d1e:	0400      	lsls	r0, r0, #16
    8d20:	4302      	orrs	r2, r0
    8d22:	4653      	mov	r3, sl
    8d24:	2b38      	cmp	r3, #56	; 0x38
    8d26:	dc00      	bgt.n	8d2a <__aeabi_dsub+0x1d6>
    8d28:	e11c      	b.n	8f64 <__aeabi_dsub+0x410>
    8d2a:	9b01      	ldr	r3, [sp, #4]
    8d2c:	431a      	orrs	r2, r3
    8d2e:	1e51      	subs	r1, r2, #1
    8d30:	418a      	sbcs	r2, r1
    8d32:	b2d1      	uxtb	r1, r2
    8d34:	2200      	movs	r2, #0
    8d36:	1949      	adds	r1, r1, r5
    8d38:	42a9      	cmp	r1, r5
    8d3a:	4180      	sbcs	r0, r0
    8d3c:	1c0d      	adds	r5, r1, #0
    8d3e:	19d2      	adds	r2, r2, r7
    8d40:	4240      	negs	r0, r0
    8d42:	1817      	adds	r7, r2, r0
    8d44:	023b      	lsls	r3, r7, #8
    8d46:	d546      	bpl.n	8dd6 <__aeabi_dsub+0x282>
    8d48:	4b5d      	ldr	r3, [pc, #372]	; (8ec0 <__aeabi_dsub+0x36c>)
    8d4a:	3401      	adds	r4, #1
    8d4c:	429c      	cmp	r4, r3
    8d4e:	d100      	bne.n	8d52 <__aeabi_dsub+0x1fe>
    8d50:	e169      	b.n	9026 <__aeabi_dsub+0x4d2>
    8d52:	2001      	movs	r0, #1
    8d54:	4a5b      	ldr	r2, [pc, #364]	; (8ec4 <__aeabi_dsub+0x370>)
    8d56:	086b      	lsrs	r3, r5, #1
    8d58:	403a      	ands	r2, r7
    8d5a:	4028      	ands	r0, r5
    8d5c:	4318      	orrs	r0, r3
    8d5e:	07d5      	lsls	r5, r2, #31
    8d60:	4305      	orrs	r5, r0
    8d62:	0857      	lsrs	r7, r2, #1
    8d64:	e728      	b.n	8bb8 <__aeabi_dsub+0x64>
    8d66:	1c13      	adds	r3, r2, #0
    8d68:	9901      	ldr	r1, [sp, #4]
    8d6a:	430b      	orrs	r3, r1
    8d6c:	d100      	bne.n	8d70 <__aeabi_dsub+0x21c>
    8d6e:	e711      	b.n	8b94 <__aeabi_dsub+0x40>
    8d70:	464b      	mov	r3, r9
    8d72:	e713      	b.n	8b9c <__aeabi_dsub+0x48>
    8d74:	1c2b      	adds	r3, r5, #0
    8d76:	4313      	orrs	r3, r2
    8d78:	d051      	beq.n	8e1e <__aeabi_dsub+0x2ca>
    8d7a:	2380      	movs	r3, #128	; 0x80
    8d7c:	031b      	lsls	r3, r3, #12
    8d7e:	431a      	orrs	r2, r3
    8d80:	0312      	lsls	r2, r2, #12
    8d82:	0b12      	lsrs	r2, r2, #12
    8d84:	e73e      	b.n	8c04 <__aeabi_dsub+0xb0>
    8d86:	3e01      	subs	r6, #1
    8d88:	2e00      	cmp	r6, #0
    8d8a:	d000      	beq.n	8d8e <__aeabi_dsub+0x23a>
    8d8c:	e080      	b.n	8e90 <__aeabi_dsub+0x33c>
    8d8e:	1a69      	subs	r1, r5, r1
    8d90:	428d      	cmp	r5, r1
    8d92:	419b      	sbcs	r3, r3
    8d94:	1aba      	subs	r2, r7, r2
    8d96:	425b      	negs	r3, r3
    8d98:	1ad7      	subs	r7, r2, r3
    8d9a:	1c0d      	adds	r5, r1, #0
    8d9c:	e76f      	b.n	8c7e <__aeabi_dsub+0x12a>
    8d9e:	1c10      	adds	r0, r2, #0
    8da0:	9b01      	ldr	r3, [sp, #4]
    8da2:	4318      	orrs	r0, r3
    8da4:	d100      	bne.n	8da8 <__aeabi_dsub+0x254>
    8da6:	e707      	b.n	8bb8 <__aeabi_dsub+0x64>
    8da8:	2301      	movs	r3, #1
    8daa:	425b      	negs	r3, r3
    8dac:	469c      	mov	ip, r3
    8dae:	44e2      	add	sl, ip
    8db0:	4653      	mov	r3, sl
    8db2:	2b00      	cmp	r3, #0
    8db4:	d000      	beq.n	8db8 <__aeabi_dsub+0x264>
    8db6:	e102      	b.n	8fbe <__aeabi_dsub+0x46a>
    8db8:	9b01      	ldr	r3, [sp, #4]
    8dba:	19d2      	adds	r2, r2, r7
    8dbc:	1959      	adds	r1, r3, r5
    8dbe:	42a9      	cmp	r1, r5
    8dc0:	419b      	sbcs	r3, r3
    8dc2:	425b      	negs	r3, r3
    8dc4:	18d7      	adds	r7, r2, r3
    8dc6:	1c0d      	adds	r5, r1, #0
    8dc8:	e7bc      	b.n	8d44 <__aeabi_dsub+0x1f0>
    8dca:	4663      	mov	r3, ip
    8dcc:	4303      	orrs	r3, r0
    8dce:	d100      	bne.n	8dd2 <__aeabi_dsub+0x27e>
    8dd0:	e128      	b.n	9024 <__aeabi_dsub+0x4d0>
    8dd2:	1c07      	adds	r7, r0, #0
    8dd4:	4665      	mov	r5, ip
    8dd6:	076b      	lsls	r3, r5, #29
    8dd8:	d000      	beq.n	8ddc <__aeabi_dsub+0x288>
    8dda:	e6f0      	b.n	8bbe <__aeabi_dsub+0x6a>
    8ddc:	2601      	movs	r6, #1
    8dde:	4643      	mov	r3, r8
    8de0:	401e      	ands	r6, r3
    8de2:	e784      	b.n	8cee <__aeabi_dsub+0x19a>
    8de4:	2e00      	cmp	r6, #0
    8de6:	d000      	beq.n	8dea <__aeabi_dsub+0x296>
    8de8:	e081      	b.n	8eee <__aeabi_dsub+0x39a>
    8dea:	1c60      	adds	r0, r4, #1
    8dec:	0540      	lsls	r0, r0, #21
    8dee:	0d40      	lsrs	r0, r0, #21
    8df0:	2801      	cmp	r0, #1
    8df2:	dc00      	bgt.n	8df6 <__aeabi_dsub+0x2a2>
    8df4:	e107      	b.n	9006 <__aeabi_dsub+0x4b2>
    8df6:	9901      	ldr	r1, [sp, #4]
    8df8:	1a68      	subs	r0, r5, r1
    8dfa:	4684      	mov	ip, r0
    8dfc:	4565      	cmp	r5, ip
    8dfe:	41b6      	sbcs	r6, r6
    8e00:	1ab8      	subs	r0, r7, r2
    8e02:	4276      	negs	r6, r6
    8e04:	1b86      	subs	r6, r0, r6
    8e06:	0230      	lsls	r0, r6, #8
    8e08:	d400      	bmi.n	8e0c <__aeabi_dsub+0x2b8>
    8e0a:	e0a1      	b.n	8f50 <__aeabi_dsub+0x3fc>
    8e0c:	468c      	mov	ip, r1
    8e0e:	1b4d      	subs	r5, r1, r5
    8e10:	45ac      	cmp	ip, r5
    8e12:	4189      	sbcs	r1, r1
    8e14:	1bd2      	subs	r2, r2, r7
    8e16:	4249      	negs	r1, r1
    8e18:	1a56      	subs	r6, r2, r1
    8e1a:	4698      	mov	r8, r3
    8e1c:	e734      	b.n	8c88 <__aeabi_dsub+0x134>
    8e1e:	2200      	movs	r2, #0
    8e20:	2500      	movs	r5, #0
    8e22:	e6ef      	b.n	8c04 <__aeabi_dsub+0xb0>
    8e24:	1c28      	adds	r0, r5, #0
    8e26:	f000 fb97 	bl	9558 <__clzsi2>
    8e2a:	3020      	adds	r0, #32
    8e2c:	1c03      	adds	r3, r0, #0
    8e2e:	3b08      	subs	r3, #8
    8e30:	2b1f      	cmp	r3, #31
    8e32:	dc00      	bgt.n	8e36 <__aeabi_dsub+0x2e2>
    8e34:	e733      	b.n	8c9e <__aeabi_dsub+0x14a>
    8e36:	1c02      	adds	r2, r0, #0
    8e38:	3a28      	subs	r2, #40	; 0x28
    8e3a:	4095      	lsls	r5, r2
    8e3c:	1c2a      	adds	r2, r5, #0
    8e3e:	2500      	movs	r5, #0
    8e40:	429c      	cmp	r4, r3
    8e42:	dc00      	bgt.n	8e46 <__aeabi_dsub+0x2f2>
    8e44:	e736      	b.n	8cb4 <__aeabi_dsub+0x160>
    8e46:	4f1f      	ldr	r7, [pc, #124]	; (8ec4 <__aeabi_dsub+0x370>)
    8e48:	1ae4      	subs	r4, r4, r3
    8e4a:	4017      	ands	r7, r2
    8e4c:	e6b4      	b.n	8bb8 <__aeabi_dsub+0x64>
    8e4e:	9b01      	ldr	r3, [sp, #4]
    8e50:	431a      	orrs	r2, r3
    8e52:	1e51      	subs	r1, r2, #1
    8e54:	418a      	sbcs	r2, r1
    8e56:	b2d3      	uxtb	r3, r2
    8e58:	2200      	movs	r2, #0
    8e5a:	e709      	b.n	8c70 <__aeabi_dsub+0x11c>
    8e5c:	2b00      	cmp	r3, #0
    8e5e:	d000      	beq.n	8e62 <__aeabi_dsub+0x30e>
    8e60:	e101      	b.n	9066 <__aeabi_dsub+0x512>
    8e62:	1c60      	adds	r0, r4, #1
    8e64:	0543      	lsls	r3, r0, #21
    8e66:	0d5b      	lsrs	r3, r3, #21
    8e68:	2b01      	cmp	r3, #1
    8e6a:	dc00      	bgt.n	8e6e <__aeabi_dsub+0x31a>
    8e6c:	e0b0      	b.n	8fd0 <__aeabi_dsub+0x47c>
    8e6e:	4b14      	ldr	r3, [pc, #80]	; (8ec0 <__aeabi_dsub+0x36c>)
    8e70:	4298      	cmp	r0, r3
    8e72:	d100      	bne.n	8e76 <__aeabi_dsub+0x322>
    8e74:	e11e      	b.n	90b4 <__aeabi_dsub+0x560>
    8e76:	9b01      	ldr	r3, [sp, #4]
    8e78:	19d2      	adds	r2, r2, r7
    8e7a:	1959      	adds	r1, r3, r5
    8e7c:	42a9      	cmp	r1, r5
    8e7e:	419b      	sbcs	r3, r3
    8e80:	425b      	negs	r3, r3
    8e82:	18d2      	adds	r2, r2, r3
    8e84:	0849      	lsrs	r1, r1, #1
    8e86:	07d5      	lsls	r5, r2, #31
    8e88:	430d      	orrs	r5, r1
    8e8a:	0857      	lsrs	r7, r2, #1
    8e8c:	1c04      	adds	r4, r0, #0
    8e8e:	e693      	b.n	8bb8 <__aeabi_dsub+0x64>
    8e90:	4b0b      	ldr	r3, [pc, #44]	; (8ec0 <__aeabi_dsub+0x36c>)
    8e92:	429c      	cmp	r4, r3
    8e94:	d000      	beq.n	8e98 <__aeabi_dsub+0x344>
    8e96:	e6d3      	b.n	8c40 <__aeabi_dsub+0xec>
    8e98:	e68e      	b.n	8bb8 <__aeabi_dsub+0x64>
    8e9a:	1c21      	adds	r1, r4, #0
    8e9c:	1c13      	adds	r3, r2, #0
    8e9e:	391f      	subs	r1, #31
    8ea0:	40cb      	lsrs	r3, r1
    8ea2:	1c19      	adds	r1, r3, #0
    8ea4:	2f20      	cmp	r7, #32
    8ea6:	d100      	bne.n	8eaa <__aeabi_dsub+0x356>
    8ea8:	e08e      	b.n	8fc8 <__aeabi_dsub+0x474>
    8eaa:	233f      	movs	r3, #63	; 0x3f
    8eac:	1b1c      	subs	r4, r3, r4
    8eae:	40a2      	lsls	r2, r4
    8eb0:	4315      	orrs	r5, r2
    8eb2:	1e6a      	subs	r2, r5, #1
    8eb4:	4195      	sbcs	r5, r2
    8eb6:	2700      	movs	r7, #0
    8eb8:	430d      	orrs	r5, r1
    8eba:	2400      	movs	r4, #0
    8ebc:	e78b      	b.n	8dd6 <__aeabi_dsub+0x282>
    8ebe:	46c0      	nop			; (mov r8, r8)
    8ec0:	000007ff 	.word	0x000007ff
    8ec4:	ff7fffff 	.word	0xff7fffff
    8ec8:	800fffff 	.word	0x800fffff
    8ecc:	1c33      	adds	r3, r6, #0
    8ece:	1c10      	adds	r0, r2, #0
    8ed0:	3b20      	subs	r3, #32
    8ed2:	40d8      	lsrs	r0, r3
    8ed4:	2e20      	cmp	r6, #32
    8ed6:	d079      	beq.n	8fcc <__aeabi_dsub+0x478>
    8ed8:	2340      	movs	r3, #64	; 0x40
    8eda:	1b9b      	subs	r3, r3, r6
    8edc:	409a      	lsls	r2, r3
    8ede:	1c13      	adds	r3, r2, #0
    8ee0:	9a01      	ldr	r2, [sp, #4]
    8ee2:	4313      	orrs	r3, r2
    8ee4:	1e59      	subs	r1, r3, #1
    8ee6:	418b      	sbcs	r3, r1
    8ee8:	2200      	movs	r2, #0
    8eea:	4303      	orrs	r3, r0
    8eec:	e6c0      	b.n	8c70 <__aeabi_dsub+0x11c>
    8eee:	2c00      	cmp	r4, #0
    8ef0:	d053      	beq.n	8f9a <__aeabi_dsub+0x446>
    8ef2:	4cc7      	ldr	r4, [pc, #796]	; (9210 <__aeabi_dsub+0x6bc>)
    8ef4:	42a0      	cmp	r0, r4
    8ef6:	d100      	bne.n	8efa <__aeabi_dsub+0x3a6>
    8ef8:	e0b0      	b.n	905c <__aeabi_dsub+0x508>
    8efa:	2480      	movs	r4, #128	; 0x80
    8efc:	4271      	negs	r1, r6
    8efe:	4689      	mov	r9, r1
    8f00:	0424      	lsls	r4, r4, #16
    8f02:	4327      	orrs	r7, r4
    8f04:	4649      	mov	r1, r9
    8f06:	2938      	cmp	r1, #56	; 0x38
    8f08:	dd00      	ble.n	8f0c <__aeabi_dsub+0x3b8>
    8f0a:	e0cd      	b.n	90a8 <__aeabi_dsub+0x554>
    8f0c:	291f      	cmp	r1, #31
    8f0e:	dd00      	ble.n	8f12 <__aeabi_dsub+0x3be>
    8f10:	e159      	b.n	91c6 <__aeabi_dsub+0x672>
    8f12:	2420      	movs	r4, #32
    8f14:	1c3e      	adds	r6, r7, #0
    8f16:	1a61      	subs	r1, r4, r1
    8f18:	408e      	lsls	r6, r1
    8f1a:	468a      	mov	sl, r1
    8f1c:	46b0      	mov	r8, r6
    8f1e:	4649      	mov	r1, r9
    8f20:	1c2e      	adds	r6, r5, #0
    8f22:	40ce      	lsrs	r6, r1
    8f24:	4651      	mov	r1, sl
    8f26:	46b4      	mov	ip, r6
    8f28:	408d      	lsls	r5, r1
    8f2a:	4664      	mov	r4, ip
    8f2c:	4646      	mov	r6, r8
    8f2e:	4649      	mov	r1, r9
    8f30:	4326      	orrs	r6, r4
    8f32:	1e6c      	subs	r4, r5, #1
    8f34:	41a5      	sbcs	r5, r4
    8f36:	40cf      	lsrs	r7, r1
    8f38:	4335      	orrs	r5, r6
    8f3a:	9901      	ldr	r1, [sp, #4]
    8f3c:	1bd7      	subs	r7, r2, r7
    8f3e:	468c      	mov	ip, r1
    8f40:	1b4d      	subs	r5, r1, r5
    8f42:	45ac      	cmp	ip, r5
    8f44:	4192      	sbcs	r2, r2
    8f46:	4252      	negs	r2, r2
    8f48:	1abf      	subs	r7, r7, r2
    8f4a:	1c04      	adds	r4, r0, #0
    8f4c:	4698      	mov	r8, r3
    8f4e:	e696      	b.n	8c7e <__aeabi_dsub+0x12a>
    8f50:	4663      	mov	r3, ip
    8f52:	4665      	mov	r5, ip
    8f54:	4333      	orrs	r3, r6
    8f56:	d000      	beq.n	8f5a <__aeabi_dsub+0x406>
    8f58:	e696      	b.n	8c88 <__aeabi_dsub+0x134>
    8f5a:	2600      	movs	r6, #0
    8f5c:	2700      	movs	r7, #0
    8f5e:	2400      	movs	r4, #0
    8f60:	2500      	movs	r5, #0
    8f62:	e6c4      	b.n	8cee <__aeabi_dsub+0x19a>
    8f64:	2b1f      	cmp	r3, #31
    8f66:	dc61      	bgt.n	902c <__aeabi_dsub+0x4d8>
    8f68:	2020      	movs	r0, #32
    8f6a:	1ac3      	subs	r3, r0, r3
    8f6c:	469b      	mov	fp, r3
    8f6e:	1c13      	adds	r3, r2, #0
    8f70:	4659      	mov	r1, fp
    8f72:	408b      	lsls	r3, r1
    8f74:	4651      	mov	r1, sl
    8f76:	4699      	mov	r9, r3
    8f78:	9b01      	ldr	r3, [sp, #4]
    8f7a:	40cb      	lsrs	r3, r1
    8f7c:	469c      	mov	ip, r3
    8f7e:	464b      	mov	r3, r9
    8f80:	4660      	mov	r0, ip
    8f82:	4303      	orrs	r3, r0
    8f84:	469c      	mov	ip, r3
    8f86:	465b      	mov	r3, fp
    8f88:	9901      	ldr	r1, [sp, #4]
    8f8a:	4099      	lsls	r1, r3
    8f8c:	4663      	mov	r3, ip
    8f8e:	1e48      	subs	r0, r1, #1
    8f90:	4181      	sbcs	r1, r0
    8f92:	4319      	orrs	r1, r3
    8f94:	4653      	mov	r3, sl
    8f96:	40da      	lsrs	r2, r3
    8f98:	e6cd      	b.n	8d36 <__aeabi_dsub+0x1e2>
    8f9a:	1c3c      	adds	r4, r7, #0
    8f9c:	432c      	orrs	r4, r5
    8f9e:	d05d      	beq.n	905c <__aeabi_dsub+0x508>
    8fa0:	43f1      	mvns	r1, r6
    8fa2:	4689      	mov	r9, r1
    8fa4:	2900      	cmp	r1, #0
    8fa6:	d155      	bne.n	9054 <__aeabi_dsub+0x500>
    8fa8:	9901      	ldr	r1, [sp, #4]
    8faa:	1bd2      	subs	r2, r2, r7
    8fac:	468c      	mov	ip, r1
    8fae:	1b4d      	subs	r5, r1, r5
    8fb0:	45ac      	cmp	ip, r5
    8fb2:	4189      	sbcs	r1, r1
    8fb4:	4249      	negs	r1, r1
    8fb6:	1a57      	subs	r7, r2, r1
    8fb8:	1c04      	adds	r4, r0, #0
    8fba:	4698      	mov	r8, r3
    8fbc:	e65f      	b.n	8c7e <__aeabi_dsub+0x12a>
    8fbe:	4894      	ldr	r0, [pc, #592]	; (9210 <__aeabi_dsub+0x6bc>)
    8fc0:	4284      	cmp	r4, r0
    8fc2:	d000      	beq.n	8fc6 <__aeabi_dsub+0x472>
    8fc4:	e6ad      	b.n	8d22 <__aeabi_dsub+0x1ce>
    8fc6:	e5f7      	b.n	8bb8 <__aeabi_dsub+0x64>
    8fc8:	2200      	movs	r2, #0
    8fca:	e771      	b.n	8eb0 <__aeabi_dsub+0x35c>
    8fcc:	2300      	movs	r3, #0
    8fce:	e787      	b.n	8ee0 <__aeabi_dsub+0x38c>
    8fd0:	1c3b      	adds	r3, r7, #0
    8fd2:	432b      	orrs	r3, r5
    8fd4:	2c00      	cmp	r4, #0
    8fd6:	d000      	beq.n	8fda <__aeabi_dsub+0x486>
    8fd8:	e0da      	b.n	9190 <__aeabi_dsub+0x63c>
    8fda:	2b00      	cmp	r3, #0
    8fdc:	d100      	bne.n	8fe0 <__aeabi_dsub+0x48c>
    8fde:	e113      	b.n	9208 <__aeabi_dsub+0x6b4>
    8fe0:	1c13      	adds	r3, r2, #0
    8fe2:	9901      	ldr	r1, [sp, #4]
    8fe4:	430b      	orrs	r3, r1
    8fe6:	d100      	bne.n	8fea <__aeabi_dsub+0x496>
    8fe8:	e5e6      	b.n	8bb8 <__aeabi_dsub+0x64>
    8fea:	1949      	adds	r1, r1, r5
    8fec:	42a9      	cmp	r1, r5
    8fee:	419b      	sbcs	r3, r3
    8ff0:	19d2      	adds	r2, r2, r7
    8ff2:	425b      	negs	r3, r3
    8ff4:	18d7      	adds	r7, r2, r3
    8ff6:	023b      	lsls	r3, r7, #8
    8ff8:	d400      	bmi.n	8ffc <__aeabi_dsub+0x4a8>
    8ffa:	e121      	b.n	9240 <__aeabi_dsub+0x6ec>
    8ffc:	4b85      	ldr	r3, [pc, #532]	; (9214 <__aeabi_dsub+0x6c0>)
    8ffe:	1c0d      	adds	r5, r1, #0
    9000:	401f      	ands	r7, r3
    9002:	1c04      	adds	r4, r0, #0
    9004:	e5d8      	b.n	8bb8 <__aeabi_dsub+0x64>
    9006:	1c38      	adds	r0, r7, #0
    9008:	4328      	orrs	r0, r5
    900a:	2c00      	cmp	r4, #0
    900c:	d140      	bne.n	9090 <__aeabi_dsub+0x53c>
    900e:	2800      	cmp	r0, #0
    9010:	d000      	beq.n	9014 <__aeabi_dsub+0x4c0>
    9012:	e083      	b.n	911c <__aeabi_dsub+0x5c8>
    9014:	1c10      	adds	r0, r2, #0
    9016:	9901      	ldr	r1, [sp, #4]
    9018:	4308      	orrs	r0, r1
    901a:	d003      	beq.n	9024 <__aeabi_dsub+0x4d0>
    901c:	1c17      	adds	r7, r2, #0
    901e:	1c0d      	adds	r5, r1, #0
    9020:	4698      	mov	r8, r3
    9022:	e5c9      	b.n	8bb8 <__aeabi_dsub+0x64>
    9024:	2600      	movs	r6, #0
    9026:	2700      	movs	r7, #0
    9028:	2500      	movs	r5, #0
    902a:	e660      	b.n	8cee <__aeabi_dsub+0x19a>
    902c:	4650      	mov	r0, sl
    902e:	1c13      	adds	r3, r2, #0
    9030:	3820      	subs	r0, #32
    9032:	40c3      	lsrs	r3, r0
    9034:	1c18      	adds	r0, r3, #0
    9036:	4653      	mov	r3, sl
    9038:	2b20      	cmp	r3, #32
    903a:	d100      	bne.n	903e <__aeabi_dsub+0x4ea>
    903c:	e0c1      	b.n	91c2 <__aeabi_dsub+0x66e>
    903e:	2340      	movs	r3, #64	; 0x40
    9040:	4651      	mov	r1, sl
    9042:	1a5b      	subs	r3, r3, r1
    9044:	409a      	lsls	r2, r3
    9046:	9901      	ldr	r1, [sp, #4]
    9048:	4311      	orrs	r1, r2
    904a:	1e4a      	subs	r2, r1, #1
    904c:	4191      	sbcs	r1, r2
    904e:	2200      	movs	r2, #0
    9050:	4301      	orrs	r1, r0
    9052:	e670      	b.n	8d36 <__aeabi_dsub+0x1e2>
    9054:	4c6e      	ldr	r4, [pc, #440]	; (9210 <__aeabi_dsub+0x6bc>)
    9056:	42a0      	cmp	r0, r4
    9058:	d000      	beq.n	905c <__aeabi_dsub+0x508>
    905a:	e753      	b.n	8f04 <__aeabi_dsub+0x3b0>
    905c:	1c17      	adds	r7, r2, #0
    905e:	9d01      	ldr	r5, [sp, #4]
    9060:	1c04      	adds	r4, r0, #0
    9062:	4698      	mov	r8, r3
    9064:	e5a8      	b.n	8bb8 <__aeabi_dsub+0x64>
    9066:	2c00      	cmp	r4, #0
    9068:	d128      	bne.n	90bc <__aeabi_dsub+0x568>
    906a:	1c3c      	adds	r4, r7, #0
    906c:	432c      	orrs	r4, r5
    906e:	d100      	bne.n	9072 <__aeabi_dsub+0x51e>
    9070:	e08a      	b.n	9188 <__aeabi_dsub+0x634>
    9072:	43db      	mvns	r3, r3
    9074:	469a      	mov	sl, r3
    9076:	2b00      	cmp	r3, #0
    9078:	d000      	beq.n	907c <__aeabi_dsub+0x528>
    907a:	e082      	b.n	9182 <__aeabi_dsub+0x62e>
    907c:	9b01      	ldr	r3, [sp, #4]
    907e:	19d2      	adds	r2, r2, r7
    9080:	469c      	mov	ip, r3
    9082:	4465      	add	r5, ip
    9084:	429d      	cmp	r5, r3
    9086:	4189      	sbcs	r1, r1
    9088:	4249      	negs	r1, r1
    908a:	1857      	adds	r7, r2, r1
    908c:	1c04      	adds	r4, r0, #0
    908e:	e659      	b.n	8d44 <__aeabi_dsub+0x1f0>
    9090:	2800      	cmp	r0, #0
    9092:	d15b      	bne.n	914c <__aeabi_dsub+0x5f8>
    9094:	1c10      	adds	r0, r2, #0
    9096:	9901      	ldr	r1, [sp, #4]
    9098:	4308      	orrs	r0, r1
    909a:	d100      	bne.n	909e <__aeabi_dsub+0x54a>
    909c:	e0a4      	b.n	91e8 <__aeabi_dsub+0x694>
    909e:	1c17      	adds	r7, r2, #0
    90a0:	1c0d      	adds	r5, r1, #0
    90a2:	4698      	mov	r8, r3
    90a4:	4c5a      	ldr	r4, [pc, #360]	; (9210 <__aeabi_dsub+0x6bc>)
    90a6:	e587      	b.n	8bb8 <__aeabi_dsub+0x64>
    90a8:	433d      	orrs	r5, r7
    90aa:	1e6f      	subs	r7, r5, #1
    90ac:	41bd      	sbcs	r5, r7
    90ae:	2700      	movs	r7, #0
    90b0:	b2ed      	uxtb	r5, r5
    90b2:	e742      	b.n	8f3a <__aeabi_dsub+0x3e6>
    90b4:	1c04      	adds	r4, r0, #0
    90b6:	2700      	movs	r7, #0
    90b8:	2500      	movs	r5, #0
    90ba:	e618      	b.n	8cee <__aeabi_dsub+0x19a>
    90bc:	4c54      	ldr	r4, [pc, #336]	; (9210 <__aeabi_dsub+0x6bc>)
    90be:	42a0      	cmp	r0, r4
    90c0:	d062      	beq.n	9188 <__aeabi_dsub+0x634>
    90c2:	4653      	mov	r3, sl
    90c4:	2480      	movs	r4, #128	; 0x80
    90c6:	425b      	negs	r3, r3
    90c8:	469a      	mov	sl, r3
    90ca:	0424      	lsls	r4, r4, #16
    90cc:	4327      	orrs	r7, r4
    90ce:	4653      	mov	r3, sl
    90d0:	2b38      	cmp	r3, #56	; 0x38
    90d2:	dd00      	ble.n	90d6 <__aeabi_dsub+0x582>
    90d4:	e08e      	b.n	91f4 <__aeabi_dsub+0x6a0>
    90d6:	2b1f      	cmp	r3, #31
    90d8:	dd00      	ble.n	90dc <__aeabi_dsub+0x588>
    90da:	e09d      	b.n	9218 <__aeabi_dsub+0x6c4>
    90dc:	2420      	movs	r4, #32
    90de:	1ae3      	subs	r3, r4, r3
    90e0:	469b      	mov	fp, r3
    90e2:	1c3b      	adds	r3, r7, #0
    90e4:	4659      	mov	r1, fp
    90e6:	408b      	lsls	r3, r1
    90e8:	4651      	mov	r1, sl
    90ea:	4699      	mov	r9, r3
    90ec:	1c2b      	adds	r3, r5, #0
    90ee:	40cb      	lsrs	r3, r1
    90f0:	469c      	mov	ip, r3
    90f2:	464b      	mov	r3, r9
    90f4:	4664      	mov	r4, ip
    90f6:	4323      	orrs	r3, r4
    90f8:	469c      	mov	ip, r3
    90fa:	465b      	mov	r3, fp
    90fc:	409d      	lsls	r5, r3
    90fe:	4663      	mov	r3, ip
    9100:	1e6c      	subs	r4, r5, #1
    9102:	41a5      	sbcs	r5, r4
    9104:	40cf      	lsrs	r7, r1
    9106:	431d      	orrs	r5, r3
    9108:	9b01      	ldr	r3, [sp, #4]
    910a:	18bf      	adds	r7, r7, r2
    910c:	469c      	mov	ip, r3
    910e:	4465      	add	r5, ip
    9110:	429d      	cmp	r5, r3
    9112:	4192      	sbcs	r2, r2
    9114:	4252      	negs	r2, r2
    9116:	18bf      	adds	r7, r7, r2
    9118:	1c04      	adds	r4, r0, #0
    911a:	e613      	b.n	8d44 <__aeabi_dsub+0x1f0>
    911c:	1c10      	adds	r0, r2, #0
    911e:	9901      	ldr	r1, [sp, #4]
    9120:	4308      	orrs	r0, r1
    9122:	d100      	bne.n	9126 <__aeabi_dsub+0x5d2>
    9124:	e548      	b.n	8bb8 <__aeabi_dsub+0x64>
    9126:	1a68      	subs	r0, r5, r1
    9128:	4684      	mov	ip, r0
    912a:	4285      	cmp	r5, r0
    912c:	4180      	sbcs	r0, r0
    912e:	1abe      	subs	r6, r7, r2
    9130:	4240      	negs	r0, r0
    9132:	1a30      	subs	r0, r6, r0
    9134:	0206      	lsls	r6, r0, #8
    9136:	d400      	bmi.n	913a <__aeabi_dsub+0x5e6>
    9138:	e647      	b.n	8dca <__aeabi_dsub+0x276>
    913a:	468c      	mov	ip, r1
    913c:	1b4d      	subs	r5, r1, r5
    913e:	45ac      	cmp	ip, r5
    9140:	4189      	sbcs	r1, r1
    9142:	1bd2      	subs	r2, r2, r7
    9144:	4249      	negs	r1, r1
    9146:	1a57      	subs	r7, r2, r1
    9148:	4698      	mov	r8, r3
    914a:	e535      	b.n	8bb8 <__aeabi_dsub+0x64>
    914c:	1c10      	adds	r0, r2, #0
    914e:	9901      	ldr	r1, [sp, #4]
    9150:	4308      	orrs	r0, r1
    9152:	d034      	beq.n	91be <__aeabi_dsub+0x66a>
    9154:	2480      	movs	r4, #128	; 0x80
    9156:	0778      	lsls	r0, r7, #29
    9158:	08ed      	lsrs	r5, r5, #3
    915a:	08ff      	lsrs	r7, r7, #3
    915c:	0324      	lsls	r4, r4, #12
    915e:	4328      	orrs	r0, r5
    9160:	4227      	tst	r7, r4
    9162:	d008      	beq.n	9176 <__aeabi_dsub+0x622>
    9164:	08d6      	lsrs	r6, r2, #3
    9166:	4226      	tst	r6, r4
    9168:	d105      	bne.n	9176 <__aeabi_dsub+0x622>
    916a:	08c9      	lsrs	r1, r1, #3
    916c:	0752      	lsls	r2, r2, #29
    916e:	430a      	orrs	r2, r1
    9170:	1c10      	adds	r0, r2, #0
    9172:	1c37      	adds	r7, r6, #0
    9174:	4698      	mov	r8, r3
    9176:	00ff      	lsls	r7, r7, #3
    9178:	0f42      	lsrs	r2, r0, #29
    917a:	4317      	orrs	r7, r2
    917c:	00c5      	lsls	r5, r0, #3
    917e:	4c24      	ldr	r4, [pc, #144]	; (9210 <__aeabi_dsub+0x6bc>)
    9180:	e51a      	b.n	8bb8 <__aeabi_dsub+0x64>
    9182:	4c23      	ldr	r4, [pc, #140]	; (9210 <__aeabi_dsub+0x6bc>)
    9184:	42a0      	cmp	r0, r4
    9186:	d1a2      	bne.n	90ce <__aeabi_dsub+0x57a>
    9188:	1c17      	adds	r7, r2, #0
    918a:	9d01      	ldr	r5, [sp, #4]
    918c:	1c04      	adds	r4, r0, #0
    918e:	e513      	b.n	8bb8 <__aeabi_dsub+0x64>
    9190:	2b00      	cmp	r3, #0
    9192:	d035      	beq.n	9200 <__aeabi_dsub+0x6ac>
    9194:	1c13      	adds	r3, r2, #0
    9196:	9901      	ldr	r1, [sp, #4]
    9198:	430b      	orrs	r3, r1
    919a:	d010      	beq.n	91be <__aeabi_dsub+0x66a>
    919c:	2480      	movs	r4, #128	; 0x80
    919e:	0778      	lsls	r0, r7, #29
    91a0:	08ed      	lsrs	r5, r5, #3
    91a2:	08ff      	lsrs	r7, r7, #3
    91a4:	0324      	lsls	r4, r4, #12
    91a6:	4328      	orrs	r0, r5
    91a8:	4227      	tst	r7, r4
    91aa:	d0e4      	beq.n	9176 <__aeabi_dsub+0x622>
    91ac:	08d3      	lsrs	r3, r2, #3
    91ae:	4223      	tst	r3, r4
    91b0:	d1e1      	bne.n	9176 <__aeabi_dsub+0x622>
    91b2:	08c9      	lsrs	r1, r1, #3
    91b4:	0752      	lsls	r2, r2, #29
    91b6:	430a      	orrs	r2, r1
    91b8:	1c10      	adds	r0, r2, #0
    91ba:	1c1f      	adds	r7, r3, #0
    91bc:	e7db      	b.n	9176 <__aeabi_dsub+0x622>
    91be:	4c14      	ldr	r4, [pc, #80]	; (9210 <__aeabi_dsub+0x6bc>)
    91c0:	e4fa      	b.n	8bb8 <__aeabi_dsub+0x64>
    91c2:	2200      	movs	r2, #0
    91c4:	e73f      	b.n	9046 <__aeabi_dsub+0x4f2>
    91c6:	464c      	mov	r4, r9
    91c8:	1c3e      	adds	r6, r7, #0
    91ca:	3c20      	subs	r4, #32
    91cc:	40e6      	lsrs	r6, r4
    91ce:	4649      	mov	r1, r9
    91d0:	1c34      	adds	r4, r6, #0
    91d2:	2920      	cmp	r1, #32
    91d4:	d032      	beq.n	923c <__aeabi_dsub+0x6e8>
    91d6:	2640      	movs	r6, #64	; 0x40
    91d8:	1a76      	subs	r6, r6, r1
    91da:	40b7      	lsls	r7, r6
    91dc:	433d      	orrs	r5, r7
    91de:	1e6f      	subs	r7, r5, #1
    91e0:	41bd      	sbcs	r5, r7
    91e2:	2700      	movs	r7, #0
    91e4:	4325      	orrs	r5, r4
    91e6:	e6a8      	b.n	8f3a <__aeabi_dsub+0x3e6>
    91e8:	2780      	movs	r7, #128	; 0x80
    91ea:	2600      	movs	r6, #0
    91ec:	03ff      	lsls	r7, r7, #15
    91ee:	4c08      	ldr	r4, [pc, #32]	; (9210 <__aeabi_dsub+0x6bc>)
    91f0:	2500      	movs	r5, #0
    91f2:	e57c      	b.n	8cee <__aeabi_dsub+0x19a>
    91f4:	433d      	orrs	r5, r7
    91f6:	1e6f      	subs	r7, r5, #1
    91f8:	41bd      	sbcs	r5, r7
    91fa:	2700      	movs	r7, #0
    91fc:	b2ed      	uxtb	r5, r5
    91fe:	e783      	b.n	9108 <__aeabi_dsub+0x5b4>
    9200:	1c17      	adds	r7, r2, #0
    9202:	9d01      	ldr	r5, [sp, #4]
    9204:	4c02      	ldr	r4, [pc, #8]	; (9210 <__aeabi_dsub+0x6bc>)
    9206:	e4d7      	b.n	8bb8 <__aeabi_dsub+0x64>
    9208:	1c17      	adds	r7, r2, #0
    920a:	9d01      	ldr	r5, [sp, #4]
    920c:	e4d4      	b.n	8bb8 <__aeabi_dsub+0x64>
    920e:	46c0      	nop			; (mov r8, r8)
    9210:	000007ff 	.word	0x000007ff
    9214:	ff7fffff 	.word	0xff7fffff
    9218:	4654      	mov	r4, sl
    921a:	1c3b      	adds	r3, r7, #0
    921c:	3c20      	subs	r4, #32
    921e:	40e3      	lsrs	r3, r4
    9220:	1c1c      	adds	r4, r3, #0
    9222:	4653      	mov	r3, sl
    9224:	2b20      	cmp	r3, #32
    9226:	d00d      	beq.n	9244 <__aeabi_dsub+0x6f0>
    9228:	2340      	movs	r3, #64	; 0x40
    922a:	4651      	mov	r1, sl
    922c:	1a5b      	subs	r3, r3, r1
    922e:	409f      	lsls	r7, r3
    9230:	433d      	orrs	r5, r7
    9232:	1e6f      	subs	r7, r5, #1
    9234:	41bd      	sbcs	r5, r7
    9236:	2700      	movs	r7, #0
    9238:	4325      	orrs	r5, r4
    923a:	e765      	b.n	9108 <__aeabi_dsub+0x5b4>
    923c:	2700      	movs	r7, #0
    923e:	e7cd      	b.n	91dc <__aeabi_dsub+0x688>
    9240:	1c0d      	adds	r5, r1, #0
    9242:	e5c8      	b.n	8dd6 <__aeabi_dsub+0x282>
    9244:	2700      	movs	r7, #0
    9246:	e7f3      	b.n	9230 <__aeabi_dsub+0x6dc>

00009248 <__aeabi_d2iz>:
    9248:	030b      	lsls	r3, r1, #12
    924a:	b530      	push	{r4, r5, lr}
    924c:	4c13      	ldr	r4, [pc, #76]	; (929c <__aeabi_d2iz+0x54>)
    924e:	0b1a      	lsrs	r2, r3, #12
    9250:	004b      	lsls	r3, r1, #1
    9252:	1c05      	adds	r5, r0, #0
    9254:	0d5b      	lsrs	r3, r3, #21
    9256:	0fc9      	lsrs	r1, r1, #31
    9258:	2000      	movs	r0, #0
    925a:	42a3      	cmp	r3, r4
    925c:	dd10      	ble.n	9280 <__aeabi_d2iz+0x38>
    925e:	4810      	ldr	r0, [pc, #64]	; (92a0 <__aeabi_d2iz+0x58>)
    9260:	4283      	cmp	r3, r0
    9262:	dc0e      	bgt.n	9282 <__aeabi_d2iz+0x3a>
    9264:	2080      	movs	r0, #128	; 0x80
    9266:	4c0f      	ldr	r4, [pc, #60]	; (92a4 <__aeabi_d2iz+0x5c>)
    9268:	0340      	lsls	r0, r0, #13
    926a:	4302      	orrs	r2, r0
    926c:	1ae4      	subs	r4, r4, r3
    926e:	2c1f      	cmp	r4, #31
    9270:	dd0a      	ble.n	9288 <__aeabi_d2iz+0x40>
    9272:	480d      	ldr	r0, [pc, #52]	; (92a8 <__aeabi_d2iz+0x60>)
    9274:	1ac3      	subs	r3, r0, r3
    9276:	40da      	lsrs	r2, r3
    9278:	1c13      	adds	r3, r2, #0
    927a:	4248      	negs	r0, r1
    927c:	4043      	eors	r3, r0
    927e:	1858      	adds	r0, r3, r1
    9280:	bd30      	pop	{r4, r5, pc}
    9282:	4b0a      	ldr	r3, [pc, #40]	; (92ac <__aeabi_d2iz+0x64>)
    9284:	18c8      	adds	r0, r1, r3
    9286:	e7fb      	b.n	9280 <__aeabi_d2iz+0x38>
    9288:	1c28      	adds	r0, r5, #0
    928a:	40e0      	lsrs	r0, r4
    928c:	4c08      	ldr	r4, [pc, #32]	; (92b0 <__aeabi_d2iz+0x68>)
    928e:	46a4      	mov	ip, r4
    9290:	4463      	add	r3, ip
    9292:	409a      	lsls	r2, r3
    9294:	1c13      	adds	r3, r2, #0
    9296:	4303      	orrs	r3, r0
    9298:	e7ef      	b.n	927a <__aeabi_d2iz+0x32>
    929a:	46c0      	nop			; (mov r8, r8)
    929c:	000003fe 	.word	0x000003fe
    92a0:	0000041d 	.word	0x0000041d
    92a4:	00000433 	.word	0x00000433
    92a8:	00000413 	.word	0x00000413
    92ac:	7fffffff 	.word	0x7fffffff
    92b0:	fffffbed 	.word	0xfffffbed

000092b4 <__aeabi_i2d>:
    92b4:	b538      	push	{r3, r4, r5, lr}
    92b6:	1e04      	subs	r4, r0, #0
    92b8:	d016      	beq.n	92e8 <__aeabi_i2d+0x34>
    92ba:	0fc5      	lsrs	r5, r0, #31
    92bc:	d000      	beq.n	92c0 <__aeabi_i2d+0xc>
    92be:	4244      	negs	r4, r0
    92c0:	1c20      	adds	r0, r4, #0
    92c2:	f000 f949 	bl	9558 <__clzsi2>
    92c6:	4b17      	ldr	r3, [pc, #92]	; (9324 <__aeabi_i2d+0x70>)
    92c8:	1a1b      	subs	r3, r3, r0
    92ca:	280a      	cmp	r0, #10
    92cc:	dc21      	bgt.n	9312 <__aeabi_i2d+0x5e>
    92ce:	1c02      	adds	r2, r0, #0
    92d0:	1c21      	adds	r1, r4, #0
    92d2:	3215      	adds	r2, #21
    92d4:	4091      	lsls	r1, r2
    92d6:	1c0a      	adds	r2, r1, #0
    92d8:	210b      	movs	r1, #11
    92da:	1a08      	subs	r0, r1, r0
    92dc:	40c4      	lsrs	r4, r0
    92de:	055b      	lsls	r3, r3, #21
    92e0:	0324      	lsls	r4, r4, #12
    92e2:	0b24      	lsrs	r4, r4, #12
    92e4:	0d5b      	lsrs	r3, r3, #21
    92e6:	e003      	b.n	92f0 <__aeabi_i2d+0x3c>
    92e8:	2500      	movs	r5, #0
    92ea:	2300      	movs	r3, #0
    92ec:	2400      	movs	r4, #0
    92ee:	2200      	movs	r2, #0
    92f0:	2100      	movs	r1, #0
    92f2:	1c10      	adds	r0, r2, #0
    92f4:	0324      	lsls	r4, r4, #12
    92f6:	0d0a      	lsrs	r2, r1, #20
    92f8:	0512      	lsls	r2, r2, #20
    92fa:	0b24      	lsrs	r4, r4, #12
    92fc:	4314      	orrs	r4, r2
    92fe:	4a0a      	ldr	r2, [pc, #40]	; (9328 <__aeabi_i2d+0x74>)
    9300:	051b      	lsls	r3, r3, #20
    9302:	4014      	ands	r4, r2
    9304:	431c      	orrs	r4, r3
    9306:	0064      	lsls	r4, r4, #1
    9308:	07ed      	lsls	r5, r5, #31
    930a:	0864      	lsrs	r4, r4, #1
    930c:	432c      	orrs	r4, r5
    930e:	1c21      	adds	r1, r4, #0
    9310:	bd38      	pop	{r3, r4, r5, pc}
    9312:	380b      	subs	r0, #11
    9314:	4084      	lsls	r4, r0
    9316:	055b      	lsls	r3, r3, #21
    9318:	0324      	lsls	r4, r4, #12
    931a:	0b24      	lsrs	r4, r4, #12
    931c:	0d5b      	lsrs	r3, r3, #21
    931e:	2200      	movs	r2, #0
    9320:	e7e6      	b.n	92f0 <__aeabi_i2d+0x3c>
    9322:	46c0      	nop			; (mov r8, r8)
    9324:	0000041e 	.word	0x0000041e
    9328:	800fffff 	.word	0x800fffff

0000932c <__aeabi_ui2d>:
    932c:	b510      	push	{r4, lr}
    932e:	1e04      	subs	r4, r0, #0
    9330:	d010      	beq.n	9354 <__aeabi_ui2d+0x28>
    9332:	f000 f911 	bl	9558 <__clzsi2>
    9336:	4a14      	ldr	r2, [pc, #80]	; (9388 <__aeabi_ui2d+0x5c>)
    9338:	1a12      	subs	r2, r2, r0
    933a:	280a      	cmp	r0, #10
    933c:	dc1a      	bgt.n	9374 <__aeabi_ui2d+0x48>
    933e:	230b      	movs	r3, #11
    9340:	1c21      	adds	r1, r4, #0
    9342:	1a1b      	subs	r3, r3, r0
    9344:	40d9      	lsrs	r1, r3
    9346:	3015      	adds	r0, #21
    9348:	030b      	lsls	r3, r1, #12
    934a:	0552      	lsls	r2, r2, #21
    934c:	4084      	lsls	r4, r0
    934e:	0b1b      	lsrs	r3, r3, #12
    9350:	0d52      	lsrs	r2, r2, #21
    9352:	e001      	b.n	9358 <__aeabi_ui2d+0x2c>
    9354:	2200      	movs	r2, #0
    9356:	2300      	movs	r3, #0
    9358:	2100      	movs	r1, #0
    935a:	031b      	lsls	r3, r3, #12
    935c:	1c20      	adds	r0, r4, #0
    935e:	0b1c      	lsrs	r4, r3, #12
    9360:	0d0b      	lsrs	r3, r1, #20
    9362:	051b      	lsls	r3, r3, #20
    9364:	4323      	orrs	r3, r4
    9366:	4c09      	ldr	r4, [pc, #36]	; (938c <__aeabi_ui2d+0x60>)
    9368:	0512      	lsls	r2, r2, #20
    936a:	4023      	ands	r3, r4
    936c:	4313      	orrs	r3, r2
    936e:	005b      	lsls	r3, r3, #1
    9370:	0859      	lsrs	r1, r3, #1
    9372:	bd10      	pop	{r4, pc}
    9374:	1c03      	adds	r3, r0, #0
    9376:	3b0b      	subs	r3, #11
    9378:	409c      	lsls	r4, r3
    937a:	0552      	lsls	r2, r2, #21
    937c:	0323      	lsls	r3, r4, #12
    937e:	0b1b      	lsrs	r3, r3, #12
    9380:	0d52      	lsrs	r2, r2, #21
    9382:	2400      	movs	r4, #0
    9384:	e7e8      	b.n	9358 <__aeabi_ui2d+0x2c>
    9386:	46c0      	nop			; (mov r8, r8)
    9388:	0000041e 	.word	0x0000041e
    938c:	800fffff 	.word	0x800fffff

00009390 <__aeabi_f2d>:
    9390:	0042      	lsls	r2, r0, #1
    9392:	0e12      	lsrs	r2, r2, #24
    9394:	1c51      	adds	r1, r2, #1
    9396:	b538      	push	{r3, r4, r5, lr}
    9398:	b2c9      	uxtb	r1, r1
    939a:	0243      	lsls	r3, r0, #9
    939c:	0a5d      	lsrs	r5, r3, #9
    939e:	0fc4      	lsrs	r4, r0, #31
    93a0:	2901      	cmp	r1, #1
    93a2:	dd15      	ble.n	93d0 <__aeabi_f2d+0x40>
    93a4:	21e0      	movs	r1, #224	; 0xe0
    93a6:	0089      	lsls	r1, r1, #2
    93a8:	468c      	mov	ip, r1
    93aa:	076d      	lsls	r5, r5, #29
    93ac:	0b1b      	lsrs	r3, r3, #12
    93ae:	4462      	add	r2, ip
    93b0:	2100      	movs	r1, #0
    93b2:	1c28      	adds	r0, r5, #0
    93b4:	0d0d      	lsrs	r5, r1, #20
    93b6:	052d      	lsls	r5, r5, #20
    93b8:	432b      	orrs	r3, r5
    93ba:	4d1c      	ldr	r5, [pc, #112]	; (942c <__aeabi_f2d+0x9c>)
    93bc:	0552      	lsls	r2, r2, #21
    93be:	402b      	ands	r3, r5
    93c0:	0852      	lsrs	r2, r2, #1
    93c2:	4313      	orrs	r3, r2
    93c4:	005b      	lsls	r3, r3, #1
    93c6:	07e4      	lsls	r4, r4, #31
    93c8:	085b      	lsrs	r3, r3, #1
    93ca:	4323      	orrs	r3, r4
    93cc:	1c19      	adds	r1, r3, #0
    93ce:	bd38      	pop	{r3, r4, r5, pc}
    93d0:	2a00      	cmp	r2, #0
    93d2:	d115      	bne.n	9400 <__aeabi_f2d+0x70>
    93d4:	2d00      	cmp	r5, #0
    93d6:	d01f      	beq.n	9418 <__aeabi_f2d+0x88>
    93d8:	1c28      	adds	r0, r5, #0
    93da:	f000 f8bd 	bl	9558 <__clzsi2>
    93de:	280a      	cmp	r0, #10
    93e0:	dc1d      	bgt.n	941e <__aeabi_f2d+0x8e>
    93e2:	230b      	movs	r3, #11
    93e4:	1c2a      	adds	r2, r5, #0
    93e6:	1a1b      	subs	r3, r3, r0
    93e8:	40da      	lsrs	r2, r3
    93ea:	1c13      	adds	r3, r2, #0
    93ec:	1c02      	adds	r2, r0, #0
    93ee:	3215      	adds	r2, #21
    93f0:	4095      	lsls	r5, r2
    93f2:	4a0f      	ldr	r2, [pc, #60]	; (9430 <__aeabi_f2d+0xa0>)
    93f4:	031b      	lsls	r3, r3, #12
    93f6:	1a12      	subs	r2, r2, r0
    93f8:	0552      	lsls	r2, r2, #21
    93fa:	0b1b      	lsrs	r3, r3, #12
    93fc:	0d52      	lsrs	r2, r2, #21
    93fe:	e7d7      	b.n	93b0 <__aeabi_f2d+0x20>
    9400:	2d00      	cmp	r5, #0
    9402:	d006      	beq.n	9412 <__aeabi_f2d+0x82>
    9404:	2280      	movs	r2, #128	; 0x80
    9406:	0b1b      	lsrs	r3, r3, #12
    9408:	0312      	lsls	r2, r2, #12
    940a:	4313      	orrs	r3, r2
    940c:	076d      	lsls	r5, r5, #29
    940e:	4a09      	ldr	r2, [pc, #36]	; (9434 <__aeabi_f2d+0xa4>)
    9410:	e7ce      	b.n	93b0 <__aeabi_f2d+0x20>
    9412:	4a08      	ldr	r2, [pc, #32]	; (9434 <__aeabi_f2d+0xa4>)
    9414:	2300      	movs	r3, #0
    9416:	e7cb      	b.n	93b0 <__aeabi_f2d+0x20>
    9418:	2200      	movs	r2, #0
    941a:	2300      	movs	r3, #0
    941c:	e7c8      	b.n	93b0 <__aeabi_f2d+0x20>
    941e:	1c03      	adds	r3, r0, #0
    9420:	3b0b      	subs	r3, #11
    9422:	409d      	lsls	r5, r3
    9424:	1c2b      	adds	r3, r5, #0
    9426:	2500      	movs	r5, #0
    9428:	e7e3      	b.n	93f2 <__aeabi_f2d+0x62>
    942a:	46c0      	nop			; (mov r8, r8)
    942c:	800fffff 	.word	0x800fffff
    9430:	00000389 	.word	0x00000389
    9434:	000007ff 	.word	0x000007ff

00009438 <__aeabi_d2f>:
    9438:	b570      	push	{r4, r5, r6, lr}
    943a:	030b      	lsls	r3, r1, #12
    943c:	004d      	lsls	r5, r1, #1
    943e:	0f44      	lsrs	r4, r0, #29
    9440:	0d6d      	lsrs	r5, r5, #21
    9442:	0a5b      	lsrs	r3, r3, #9
    9444:	4323      	orrs	r3, r4
    9446:	1c6c      	adds	r4, r5, #1
    9448:	0564      	lsls	r4, r4, #21
    944a:	0fc9      	lsrs	r1, r1, #31
    944c:	00c2      	lsls	r2, r0, #3
    944e:	0d64      	lsrs	r4, r4, #21
    9450:	2c01      	cmp	r4, #1
    9452:	dd2a      	ble.n	94aa <__aeabi_d2f+0x72>
    9454:	4c3b      	ldr	r4, [pc, #236]	; (9544 <__aeabi_d2f+0x10c>)
    9456:	192c      	adds	r4, r5, r4
    9458:	2cfe      	cmp	r4, #254	; 0xfe
    945a:	dc1a      	bgt.n	9492 <__aeabi_d2f+0x5a>
    945c:	2c00      	cmp	r4, #0
    945e:	dd35      	ble.n	94cc <__aeabi_d2f+0x94>
    9460:	0180      	lsls	r0, r0, #6
    9462:	1e45      	subs	r5, r0, #1
    9464:	41a8      	sbcs	r0, r5
    9466:	00db      	lsls	r3, r3, #3
    9468:	4303      	orrs	r3, r0
    946a:	0f52      	lsrs	r2, r2, #29
    946c:	4313      	orrs	r3, r2
    946e:	075a      	lsls	r2, r3, #29
    9470:	d004      	beq.n	947c <__aeabi_d2f+0x44>
    9472:	220f      	movs	r2, #15
    9474:	401a      	ands	r2, r3
    9476:	2a04      	cmp	r2, #4
    9478:	d000      	beq.n	947c <__aeabi_d2f+0x44>
    947a:	3304      	adds	r3, #4
    947c:	2280      	movs	r2, #128	; 0x80
    947e:	04d2      	lsls	r2, r2, #19
    9480:	401a      	ands	r2, r3
    9482:	d027      	beq.n	94d4 <__aeabi_d2f+0x9c>
    9484:	3401      	adds	r4, #1
    9486:	2cff      	cmp	r4, #255	; 0xff
    9488:	d003      	beq.n	9492 <__aeabi_d2f+0x5a>
    948a:	019b      	lsls	r3, r3, #6
    948c:	0a5b      	lsrs	r3, r3, #9
    948e:	b2e4      	uxtb	r4, r4
    9490:	e001      	b.n	9496 <__aeabi_d2f+0x5e>
    9492:	24ff      	movs	r4, #255	; 0xff
    9494:	2300      	movs	r3, #0
    9496:	025b      	lsls	r3, r3, #9
    9498:	05e4      	lsls	r4, r4, #23
    949a:	0a5b      	lsrs	r3, r3, #9
    949c:	4323      	orrs	r3, r4
    949e:	005b      	lsls	r3, r3, #1
    94a0:	07c9      	lsls	r1, r1, #31
    94a2:	085b      	lsrs	r3, r3, #1
    94a4:	430b      	orrs	r3, r1
    94a6:	1c18      	adds	r0, r3, #0
    94a8:	bd70      	pop	{r4, r5, r6, pc}
    94aa:	2d00      	cmp	r5, #0
    94ac:	d106      	bne.n	94bc <__aeabi_d2f+0x84>
    94ae:	4313      	orrs	r3, r2
    94b0:	d10e      	bne.n	94d0 <__aeabi_d2f+0x98>
    94b2:	2400      	movs	r4, #0
    94b4:	025b      	lsls	r3, r3, #9
    94b6:	0a5b      	lsrs	r3, r3, #9
    94b8:	b2e4      	uxtb	r4, r4
    94ba:	e7ec      	b.n	9496 <__aeabi_d2f+0x5e>
    94bc:	431a      	orrs	r2, r3
    94be:	d0e8      	beq.n	9492 <__aeabi_d2f+0x5a>
    94c0:	2080      	movs	r0, #128	; 0x80
    94c2:	00db      	lsls	r3, r3, #3
    94c4:	0480      	lsls	r0, r0, #18
    94c6:	4303      	orrs	r3, r0
    94c8:	24ff      	movs	r4, #255	; 0xff
    94ca:	e7d0      	b.n	946e <__aeabi_d2f+0x36>
    94cc:	3417      	adds	r4, #23
    94ce:	da0c      	bge.n	94ea <__aeabi_d2f+0xb2>
    94d0:	2305      	movs	r3, #5
    94d2:	2400      	movs	r4, #0
    94d4:	08db      	lsrs	r3, r3, #3
    94d6:	2cff      	cmp	r4, #255	; 0xff
    94d8:	d1ec      	bne.n	94b4 <__aeabi_d2f+0x7c>
    94da:	2b00      	cmp	r3, #0
    94dc:	d02d      	beq.n	953a <__aeabi_d2f+0x102>
    94de:	2280      	movs	r2, #128	; 0x80
    94e0:	03d2      	lsls	r2, r2, #15
    94e2:	4313      	orrs	r3, r2
    94e4:	025b      	lsls	r3, r3, #9
    94e6:	0a5b      	lsrs	r3, r3, #9
    94e8:	e7d5      	b.n	9496 <__aeabi_d2f+0x5e>
    94ea:	2480      	movs	r4, #128	; 0x80
    94ec:	4816      	ldr	r0, [pc, #88]	; (9548 <__aeabi_d2f+0x110>)
    94ee:	0424      	lsls	r4, r4, #16
    94f0:	4323      	orrs	r3, r4
    94f2:	1b40      	subs	r0, r0, r5
    94f4:	281f      	cmp	r0, #31
    94f6:	dc0d      	bgt.n	9514 <__aeabi_d2f+0xdc>
    94f8:	4c14      	ldr	r4, [pc, #80]	; (954c <__aeabi_d2f+0x114>)
    94fa:	46a4      	mov	ip, r4
    94fc:	4465      	add	r5, ip
    94fe:	40ab      	lsls	r3, r5
    9500:	1c1c      	adds	r4, r3, #0
    9502:	1c13      	adds	r3, r2, #0
    9504:	40ab      	lsls	r3, r5
    9506:	1e5d      	subs	r5, r3, #1
    9508:	41ab      	sbcs	r3, r5
    950a:	40c2      	lsrs	r2, r0
    950c:	4323      	orrs	r3, r4
    950e:	4313      	orrs	r3, r2
    9510:	2400      	movs	r4, #0
    9512:	e7ac      	b.n	946e <__aeabi_d2f+0x36>
    9514:	1c1e      	adds	r6, r3, #0
    9516:	4c0e      	ldr	r4, [pc, #56]	; (9550 <__aeabi_d2f+0x118>)
    9518:	1b64      	subs	r4, r4, r5
    951a:	40e6      	lsrs	r6, r4
    951c:	1c34      	adds	r4, r6, #0
    951e:	2820      	cmp	r0, #32
    9520:	d00d      	beq.n	953e <__aeabi_d2f+0x106>
    9522:	480c      	ldr	r0, [pc, #48]	; (9554 <__aeabi_d2f+0x11c>)
    9524:	4684      	mov	ip, r0
    9526:	4465      	add	r5, ip
    9528:	40ab      	lsls	r3, r5
    952a:	1c1d      	adds	r5, r3, #0
    952c:	432a      	orrs	r2, r5
    952e:	1e53      	subs	r3, r2, #1
    9530:	419a      	sbcs	r2, r3
    9532:	1c13      	adds	r3, r2, #0
    9534:	4323      	orrs	r3, r4
    9536:	2400      	movs	r4, #0
    9538:	e799      	b.n	946e <__aeabi_d2f+0x36>
    953a:	2300      	movs	r3, #0
    953c:	e7ab      	b.n	9496 <__aeabi_d2f+0x5e>
    953e:	2500      	movs	r5, #0
    9540:	e7f4      	b.n	952c <__aeabi_d2f+0xf4>
    9542:	46c0      	nop			; (mov r8, r8)
    9544:	fffffc80 	.word	0xfffffc80
    9548:	0000039e 	.word	0x0000039e
    954c:	fffffc82 	.word	0xfffffc82
    9550:	0000037e 	.word	0x0000037e
    9554:	fffffca2 	.word	0xfffffca2

00009558 <__clzsi2>:
    9558:	211c      	movs	r1, #28
    955a:	2301      	movs	r3, #1
    955c:	041b      	lsls	r3, r3, #16
    955e:	4298      	cmp	r0, r3
    9560:	d301      	bcc.n	9566 <__clzsi2+0xe>
    9562:	0c00      	lsrs	r0, r0, #16
    9564:	3910      	subs	r1, #16
    9566:	0a1b      	lsrs	r3, r3, #8
    9568:	4298      	cmp	r0, r3
    956a:	d301      	bcc.n	9570 <__clzsi2+0x18>
    956c:	0a00      	lsrs	r0, r0, #8
    956e:	3908      	subs	r1, #8
    9570:	091b      	lsrs	r3, r3, #4
    9572:	4298      	cmp	r0, r3
    9574:	d301      	bcc.n	957a <__clzsi2+0x22>
    9576:	0900      	lsrs	r0, r0, #4
    9578:	3904      	subs	r1, #4
    957a:	a202      	add	r2, pc, #8	; (adr r2, 9584 <__clzsi2+0x2c>)
    957c:	5c10      	ldrb	r0, [r2, r0]
    957e:	1840      	adds	r0, r0, r1
    9580:	4770      	bx	lr
    9582:	46c0      	nop			; (mov r8, r8)
    9584:	02020304 	.word	0x02020304
    9588:	01010101 	.word	0x01010101
	...

00009594 <__cxa_atexit>:
    9594:	4b05      	ldr	r3, [pc, #20]	; (95ac <__cxa_atexit+0x18>)
    9596:	b510      	push	{r4, lr}
    9598:	1c04      	adds	r4, r0, #0
    959a:	1e18      	subs	r0, r3, #0
    959c:	d005      	beq.n	95aa <__cxa_atexit+0x16>
    959e:	1c13      	adds	r3, r2, #0
    95a0:	2002      	movs	r0, #2
    95a2:	1c0a      	adds	r2, r1, #0
    95a4:	1c21      	adds	r1, r4, #0
    95a6:	e000      	b.n	95aa <__cxa_atexit+0x16>
    95a8:	bf00      	nop
    95aa:	bd10      	pop	{r4, pc}
    95ac:	00000000 	.word	0x00000000

000095b0 <__errno>:
    95b0:	4b01      	ldr	r3, [pc, #4]	; (95b8 <__errno+0x8>)
    95b2:	6818      	ldr	r0, [r3, #0]
    95b4:	4770      	bx	lr
    95b6:	46c0      	nop			; (mov r8, r8)
    95b8:	20000134 	.word	0x20000134

000095bc <exit>:
    95bc:	4b08      	ldr	r3, [pc, #32]	; (95e0 <exit+0x24>)
    95be:	b510      	push	{r4, lr}
    95c0:	1c04      	adds	r4, r0, #0
    95c2:	2b00      	cmp	r3, #0
    95c4:	d002      	beq.n	95cc <exit+0x10>
    95c6:	2100      	movs	r1, #0
    95c8:	e000      	b.n	95cc <exit+0x10>
    95ca:	bf00      	nop
    95cc:	4b05      	ldr	r3, [pc, #20]	; (95e4 <exit+0x28>)
    95ce:	6818      	ldr	r0, [r3, #0]
    95d0:	6a83      	ldr	r3, [r0, #40]	; 0x28
    95d2:	2b00      	cmp	r3, #0
    95d4:	d000      	beq.n	95d8 <exit+0x1c>
    95d6:	4798      	blx	r3
    95d8:	1c20      	adds	r0, r4, #0
    95da:	f7fa fc5f 	bl	3e9c <_exit>
    95de:	46c0      	nop			; (mov r8, r8)
    95e0:	00000000 	.word	0x00000000
    95e4:	0000f8fc 	.word	0x0000f8fc

000095e8 <_fclose_r>:
    95e8:	b570      	push	{r4, r5, r6, lr}
    95ea:	1c05      	adds	r5, r0, #0
    95ec:	1e0c      	subs	r4, r1, #0
    95ee:	d101      	bne.n	95f4 <_fclose_r+0xc>
    95f0:	2000      	movs	r0, #0
    95f2:	e049      	b.n	9688 <_fclose_r+0xa0>
    95f4:	2800      	cmp	r0, #0
    95f6:	d004      	beq.n	9602 <_fclose_r+0x1a>
    95f8:	6983      	ldr	r3, [r0, #24]
    95fa:	2b00      	cmp	r3, #0
    95fc:	d101      	bne.n	9602 <_fclose_r+0x1a>
    95fe:	f000 f961 	bl	98c4 <__sinit>
    9602:	4b22      	ldr	r3, [pc, #136]	; (968c <_fclose_r+0xa4>)
    9604:	429c      	cmp	r4, r3
    9606:	d101      	bne.n	960c <_fclose_r+0x24>
    9608:	686c      	ldr	r4, [r5, #4]
    960a:	e008      	b.n	961e <_fclose_r+0x36>
    960c:	4b20      	ldr	r3, [pc, #128]	; (9690 <_fclose_r+0xa8>)
    960e:	429c      	cmp	r4, r3
    9610:	d101      	bne.n	9616 <_fclose_r+0x2e>
    9612:	68ac      	ldr	r4, [r5, #8]
    9614:	e003      	b.n	961e <_fclose_r+0x36>
    9616:	4b1f      	ldr	r3, [pc, #124]	; (9694 <_fclose_r+0xac>)
    9618:	429c      	cmp	r4, r3
    961a:	d100      	bne.n	961e <_fclose_r+0x36>
    961c:	68ec      	ldr	r4, [r5, #12]
    961e:	220c      	movs	r2, #12
    9620:	5ea3      	ldrsh	r3, [r4, r2]
    9622:	2b00      	cmp	r3, #0
    9624:	d0e4      	beq.n	95f0 <_fclose_r+0x8>
    9626:	1c28      	adds	r0, r5, #0
    9628:	1c21      	adds	r1, r4, #0
    962a:	f000 f83f 	bl	96ac <__sflush_r>
    962e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    9630:	1c06      	adds	r6, r0, #0
    9632:	2b00      	cmp	r3, #0
    9634:	d006      	beq.n	9644 <_fclose_r+0x5c>
    9636:	1c28      	adds	r0, r5, #0
    9638:	6a21      	ldr	r1, [r4, #32]
    963a:	4798      	blx	r3
    963c:	2800      	cmp	r0, #0
    963e:	da01      	bge.n	9644 <_fclose_r+0x5c>
    9640:	2601      	movs	r6, #1
    9642:	4276      	negs	r6, r6
    9644:	89a3      	ldrh	r3, [r4, #12]
    9646:	061b      	lsls	r3, r3, #24
    9648:	d503      	bpl.n	9652 <_fclose_r+0x6a>
    964a:	1c28      	adds	r0, r5, #0
    964c:	6921      	ldr	r1, [r4, #16]
    964e:	f000 fb93 	bl	9d78 <_free_r>
    9652:	6b61      	ldr	r1, [r4, #52]	; 0x34
    9654:	2900      	cmp	r1, #0
    9656:	d008      	beq.n	966a <_fclose_r+0x82>
    9658:	1c23      	adds	r3, r4, #0
    965a:	3344      	adds	r3, #68	; 0x44
    965c:	4299      	cmp	r1, r3
    965e:	d002      	beq.n	9666 <_fclose_r+0x7e>
    9660:	1c28      	adds	r0, r5, #0
    9662:	f000 fb89 	bl	9d78 <_free_r>
    9666:	2300      	movs	r3, #0
    9668:	6363      	str	r3, [r4, #52]	; 0x34
    966a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    966c:	2900      	cmp	r1, #0
    966e:	d004      	beq.n	967a <_fclose_r+0x92>
    9670:	1c28      	adds	r0, r5, #0
    9672:	f000 fb81 	bl	9d78 <_free_r>
    9676:	2300      	movs	r3, #0
    9678:	64a3      	str	r3, [r4, #72]	; 0x48
    967a:	f000 f993 	bl	99a4 <__sfp_lock_acquire>
    967e:	2300      	movs	r3, #0
    9680:	81a3      	strh	r3, [r4, #12]
    9682:	f000 f990 	bl	99a6 <__sfp_lock_release>
    9686:	1c30      	adds	r0, r6, #0
    9688:	bd70      	pop	{r4, r5, r6, pc}
    968a:	46c0      	nop			; (mov r8, r8)
    968c:	0000f898 	.word	0x0000f898
    9690:	0000f8b8 	.word	0x0000f8b8
    9694:	0000f8d8 	.word	0x0000f8d8

00009698 <fclose>:
    9698:	b508      	push	{r3, lr}
    969a:	4b03      	ldr	r3, [pc, #12]	; (96a8 <fclose+0x10>)
    969c:	1c01      	adds	r1, r0, #0
    969e:	6818      	ldr	r0, [r3, #0]
    96a0:	f7ff ffa2 	bl	95e8 <_fclose_r>
    96a4:	bd08      	pop	{r3, pc}
    96a6:	46c0      	nop			; (mov r8, r8)
    96a8:	20000134 	.word	0x20000134

000096ac <__sflush_r>:
    96ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    96ae:	898a      	ldrh	r2, [r1, #12]
    96b0:	1c05      	adds	r5, r0, #0
    96b2:	1c0c      	adds	r4, r1, #0
    96b4:	0713      	lsls	r3, r2, #28
    96b6:	d45e      	bmi.n	9776 <__sflush_r+0xca>
    96b8:	684b      	ldr	r3, [r1, #4]
    96ba:	2b00      	cmp	r3, #0
    96bc:	dc02      	bgt.n	96c4 <__sflush_r+0x18>
    96be:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    96c0:	2b00      	cmp	r3, #0
    96c2:	dd1a      	ble.n	96fa <__sflush_r+0x4e>
    96c4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    96c6:	2f00      	cmp	r7, #0
    96c8:	d017      	beq.n	96fa <__sflush_r+0x4e>
    96ca:	2300      	movs	r3, #0
    96cc:	682e      	ldr	r6, [r5, #0]
    96ce:	602b      	str	r3, [r5, #0]
    96d0:	2380      	movs	r3, #128	; 0x80
    96d2:	015b      	lsls	r3, r3, #5
    96d4:	401a      	ands	r2, r3
    96d6:	d001      	beq.n	96dc <__sflush_r+0x30>
    96d8:	6d62      	ldr	r2, [r4, #84]	; 0x54
    96da:	e015      	b.n	9708 <__sflush_r+0x5c>
    96dc:	1c28      	adds	r0, r5, #0
    96de:	6a21      	ldr	r1, [r4, #32]
    96e0:	2301      	movs	r3, #1
    96e2:	47b8      	blx	r7
    96e4:	1c02      	adds	r2, r0, #0
    96e6:	1c43      	adds	r3, r0, #1
    96e8:	d10e      	bne.n	9708 <__sflush_r+0x5c>
    96ea:	682b      	ldr	r3, [r5, #0]
    96ec:	2b00      	cmp	r3, #0
    96ee:	d00b      	beq.n	9708 <__sflush_r+0x5c>
    96f0:	2b1d      	cmp	r3, #29
    96f2:	d001      	beq.n	96f8 <__sflush_r+0x4c>
    96f4:	2b16      	cmp	r3, #22
    96f6:	d102      	bne.n	96fe <__sflush_r+0x52>
    96f8:	602e      	str	r6, [r5, #0]
    96fa:	2000      	movs	r0, #0
    96fc:	e05e      	b.n	97bc <__sflush_r+0x110>
    96fe:	2140      	movs	r1, #64	; 0x40
    9700:	89a3      	ldrh	r3, [r4, #12]
    9702:	430b      	orrs	r3, r1
    9704:	81a3      	strh	r3, [r4, #12]
    9706:	e059      	b.n	97bc <__sflush_r+0x110>
    9708:	89a3      	ldrh	r3, [r4, #12]
    970a:	075b      	lsls	r3, r3, #29
    970c:	d506      	bpl.n	971c <__sflush_r+0x70>
    970e:	6863      	ldr	r3, [r4, #4]
    9710:	1ad2      	subs	r2, r2, r3
    9712:	6b63      	ldr	r3, [r4, #52]	; 0x34
    9714:	2b00      	cmp	r3, #0
    9716:	d001      	beq.n	971c <__sflush_r+0x70>
    9718:	6c23      	ldr	r3, [r4, #64]	; 0x40
    971a:	1ad2      	subs	r2, r2, r3
    971c:	2300      	movs	r3, #0
    971e:	1c28      	adds	r0, r5, #0
    9720:	6a21      	ldr	r1, [r4, #32]
    9722:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    9724:	47b8      	blx	r7
    9726:	89a3      	ldrh	r3, [r4, #12]
    9728:	1c42      	adds	r2, r0, #1
    972a:	d106      	bne.n	973a <__sflush_r+0x8e>
    972c:	682a      	ldr	r2, [r5, #0]
    972e:	2a00      	cmp	r2, #0
    9730:	d003      	beq.n	973a <__sflush_r+0x8e>
    9732:	2a1d      	cmp	r2, #29
    9734:	d001      	beq.n	973a <__sflush_r+0x8e>
    9736:	2a16      	cmp	r2, #22
    9738:	d119      	bne.n	976e <__sflush_r+0xc2>
    973a:	2200      	movs	r2, #0
    973c:	6062      	str	r2, [r4, #4]
    973e:	6922      	ldr	r2, [r4, #16]
    9740:	6022      	str	r2, [r4, #0]
    9742:	04db      	lsls	r3, r3, #19
    9744:	d505      	bpl.n	9752 <__sflush_r+0xa6>
    9746:	1c43      	adds	r3, r0, #1
    9748:	d102      	bne.n	9750 <__sflush_r+0xa4>
    974a:	682b      	ldr	r3, [r5, #0]
    974c:	2b00      	cmp	r3, #0
    974e:	d100      	bne.n	9752 <__sflush_r+0xa6>
    9750:	6560      	str	r0, [r4, #84]	; 0x54
    9752:	6b61      	ldr	r1, [r4, #52]	; 0x34
    9754:	602e      	str	r6, [r5, #0]
    9756:	2900      	cmp	r1, #0
    9758:	d0cf      	beq.n	96fa <__sflush_r+0x4e>
    975a:	1c23      	adds	r3, r4, #0
    975c:	3344      	adds	r3, #68	; 0x44
    975e:	4299      	cmp	r1, r3
    9760:	d002      	beq.n	9768 <__sflush_r+0xbc>
    9762:	1c28      	adds	r0, r5, #0
    9764:	f000 fb08 	bl	9d78 <_free_r>
    9768:	2000      	movs	r0, #0
    976a:	6360      	str	r0, [r4, #52]	; 0x34
    976c:	e026      	b.n	97bc <__sflush_r+0x110>
    976e:	2240      	movs	r2, #64	; 0x40
    9770:	4313      	orrs	r3, r2
    9772:	81a3      	strh	r3, [r4, #12]
    9774:	e022      	b.n	97bc <__sflush_r+0x110>
    9776:	690f      	ldr	r7, [r1, #16]
    9778:	2f00      	cmp	r7, #0
    977a:	d0be      	beq.n	96fa <__sflush_r+0x4e>
    977c:	680b      	ldr	r3, [r1, #0]
    977e:	600f      	str	r7, [r1, #0]
    9780:	1bdb      	subs	r3, r3, r7
    9782:	9301      	str	r3, [sp, #4]
    9784:	2300      	movs	r3, #0
    9786:	0792      	lsls	r2, r2, #30
    9788:	d100      	bne.n	978c <__sflush_r+0xe0>
    978a:	694b      	ldr	r3, [r1, #20]
    978c:	60a3      	str	r3, [r4, #8]
    978e:	9b01      	ldr	r3, [sp, #4]
    9790:	2b00      	cmp	r3, #0
    9792:	ddb2      	ble.n	96fa <__sflush_r+0x4e>
    9794:	1c28      	adds	r0, r5, #0
    9796:	6a21      	ldr	r1, [r4, #32]
    9798:	1c3a      	adds	r2, r7, #0
    979a:	9b01      	ldr	r3, [sp, #4]
    979c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    979e:	47b0      	blx	r6
    97a0:	2800      	cmp	r0, #0
    97a2:	dc06      	bgt.n	97b2 <__sflush_r+0x106>
    97a4:	2240      	movs	r2, #64	; 0x40
    97a6:	2001      	movs	r0, #1
    97a8:	89a3      	ldrh	r3, [r4, #12]
    97aa:	4240      	negs	r0, r0
    97ac:	4313      	orrs	r3, r2
    97ae:	81a3      	strh	r3, [r4, #12]
    97b0:	e004      	b.n	97bc <__sflush_r+0x110>
    97b2:	9b01      	ldr	r3, [sp, #4]
    97b4:	183f      	adds	r7, r7, r0
    97b6:	1a1b      	subs	r3, r3, r0
    97b8:	9301      	str	r3, [sp, #4]
    97ba:	e7e8      	b.n	978e <__sflush_r+0xe2>
    97bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

000097c0 <_fflush_r>:
    97c0:	b538      	push	{r3, r4, r5, lr}
    97c2:	690b      	ldr	r3, [r1, #16]
    97c4:	1c05      	adds	r5, r0, #0
    97c6:	1c0c      	adds	r4, r1, #0
    97c8:	2b00      	cmp	r3, #0
    97ca:	d101      	bne.n	97d0 <_fflush_r+0x10>
    97cc:	2000      	movs	r0, #0
    97ce:	e01c      	b.n	980a <_fflush_r+0x4a>
    97d0:	2800      	cmp	r0, #0
    97d2:	d004      	beq.n	97de <_fflush_r+0x1e>
    97d4:	6983      	ldr	r3, [r0, #24]
    97d6:	2b00      	cmp	r3, #0
    97d8:	d101      	bne.n	97de <_fflush_r+0x1e>
    97da:	f000 f873 	bl	98c4 <__sinit>
    97de:	4b0b      	ldr	r3, [pc, #44]	; (980c <_fflush_r+0x4c>)
    97e0:	429c      	cmp	r4, r3
    97e2:	d101      	bne.n	97e8 <_fflush_r+0x28>
    97e4:	686c      	ldr	r4, [r5, #4]
    97e6:	e008      	b.n	97fa <_fflush_r+0x3a>
    97e8:	4b09      	ldr	r3, [pc, #36]	; (9810 <_fflush_r+0x50>)
    97ea:	429c      	cmp	r4, r3
    97ec:	d101      	bne.n	97f2 <_fflush_r+0x32>
    97ee:	68ac      	ldr	r4, [r5, #8]
    97f0:	e003      	b.n	97fa <_fflush_r+0x3a>
    97f2:	4b08      	ldr	r3, [pc, #32]	; (9814 <_fflush_r+0x54>)
    97f4:	429c      	cmp	r4, r3
    97f6:	d100      	bne.n	97fa <_fflush_r+0x3a>
    97f8:	68ec      	ldr	r4, [r5, #12]
    97fa:	220c      	movs	r2, #12
    97fc:	5ea3      	ldrsh	r3, [r4, r2]
    97fe:	2b00      	cmp	r3, #0
    9800:	d0e4      	beq.n	97cc <_fflush_r+0xc>
    9802:	1c28      	adds	r0, r5, #0
    9804:	1c21      	adds	r1, r4, #0
    9806:	f7ff ff51 	bl	96ac <__sflush_r>
    980a:	bd38      	pop	{r3, r4, r5, pc}
    980c:	0000f898 	.word	0x0000f898
    9810:	0000f8b8 	.word	0x0000f8b8
    9814:	0000f8d8 	.word	0x0000f8d8

00009818 <fflush>:
    9818:	b508      	push	{r3, lr}
    981a:	1e01      	subs	r1, r0, #0
    981c:	d105      	bne.n	982a <fflush+0x12>
    981e:	4b05      	ldr	r3, [pc, #20]	; (9834 <fflush+0x1c>)
    9820:	4905      	ldr	r1, [pc, #20]	; (9838 <fflush+0x20>)
    9822:	6818      	ldr	r0, [r3, #0]
    9824:	f000 f9d8 	bl	9bd8 <_fwalk_reent>
    9828:	e003      	b.n	9832 <fflush+0x1a>
    982a:	4b04      	ldr	r3, [pc, #16]	; (983c <fflush+0x24>)
    982c:	6818      	ldr	r0, [r3, #0]
    982e:	f7ff ffc7 	bl	97c0 <_fflush_r>
    9832:	bd08      	pop	{r3, pc}
    9834:	0000f8fc 	.word	0x0000f8fc
    9838:	000097c1 	.word	0x000097c1
    983c:	20000134 	.word	0x20000134

00009840 <_cleanup_r>:
    9840:	b508      	push	{r3, lr}
    9842:	4902      	ldr	r1, [pc, #8]	; (984c <_cleanup_r+0xc>)
    9844:	f000 f9c8 	bl	9bd8 <_fwalk_reent>
    9848:	bd08      	pop	{r3, pc}
    984a:	46c0      	nop			; (mov r8, r8)
    984c:	000097c1 	.word	0x000097c1

00009850 <std.isra.0>:
    9850:	2300      	movs	r3, #0
    9852:	b510      	push	{r4, lr}
    9854:	1c04      	adds	r4, r0, #0
    9856:	6003      	str	r3, [r0, #0]
    9858:	6043      	str	r3, [r0, #4]
    985a:	6083      	str	r3, [r0, #8]
    985c:	8181      	strh	r1, [r0, #12]
    985e:	6643      	str	r3, [r0, #100]	; 0x64
    9860:	81c2      	strh	r2, [r0, #14]
    9862:	6103      	str	r3, [r0, #16]
    9864:	6143      	str	r3, [r0, #20]
    9866:	6183      	str	r3, [r0, #24]
    9868:	1c19      	adds	r1, r3, #0
    986a:	2208      	movs	r2, #8
    986c:	305c      	adds	r0, #92	; 0x5c
    986e:	f000 fa7b 	bl	9d68 <memset>
    9872:	4b05      	ldr	r3, [pc, #20]	; (9888 <std.isra.0+0x38>)
    9874:	6224      	str	r4, [r4, #32]
    9876:	6263      	str	r3, [r4, #36]	; 0x24
    9878:	4b04      	ldr	r3, [pc, #16]	; (988c <std.isra.0+0x3c>)
    987a:	62a3      	str	r3, [r4, #40]	; 0x28
    987c:	4b04      	ldr	r3, [pc, #16]	; (9890 <std.isra.0+0x40>)
    987e:	62e3      	str	r3, [r4, #44]	; 0x2c
    9880:	4b04      	ldr	r3, [pc, #16]	; (9894 <std.isra.0+0x44>)
    9882:	6323      	str	r3, [r4, #48]	; 0x30
    9884:	bd10      	pop	{r4, pc}
    9886:	46c0      	nop			; (mov r8, r8)
    9888:	0000b3ad 	.word	0x0000b3ad
    988c:	0000b3d9 	.word	0x0000b3d9
    9890:	0000b411 	.word	0x0000b411
    9894:	0000b43d 	.word	0x0000b43d

00009898 <__sfmoreglue>:
    9898:	b570      	push	{r4, r5, r6, lr}
    989a:	2568      	movs	r5, #104	; 0x68
    989c:	1e4b      	subs	r3, r1, #1
    989e:	435d      	muls	r5, r3
    98a0:	1c0e      	adds	r6, r1, #0
    98a2:	1c29      	adds	r1, r5, #0
    98a4:	3174      	adds	r1, #116	; 0x74
    98a6:	f000 faad 	bl	9e04 <_malloc_r>
    98aa:	1e04      	subs	r4, r0, #0
    98ac:	d008      	beq.n	98c0 <__sfmoreglue+0x28>
    98ae:	2100      	movs	r1, #0
    98b0:	1c2a      	adds	r2, r5, #0
    98b2:	6001      	str	r1, [r0, #0]
    98b4:	6046      	str	r6, [r0, #4]
    98b6:	300c      	adds	r0, #12
    98b8:	60a0      	str	r0, [r4, #8]
    98ba:	3268      	adds	r2, #104	; 0x68
    98bc:	f000 fa54 	bl	9d68 <memset>
    98c0:	1c20      	adds	r0, r4, #0
    98c2:	bd70      	pop	{r4, r5, r6, pc}

000098c4 <__sinit>:
    98c4:	6983      	ldr	r3, [r0, #24]
    98c6:	b513      	push	{r0, r1, r4, lr}
    98c8:	2b00      	cmp	r3, #0
    98ca:	d128      	bne.n	991e <__sinit+0x5a>
    98cc:	6483      	str	r3, [r0, #72]	; 0x48
    98ce:	64c3      	str	r3, [r0, #76]	; 0x4c
    98d0:	6503      	str	r3, [r0, #80]	; 0x50
    98d2:	4b13      	ldr	r3, [pc, #76]	; (9920 <__sinit+0x5c>)
    98d4:	4a13      	ldr	r2, [pc, #76]	; (9924 <__sinit+0x60>)
    98d6:	681b      	ldr	r3, [r3, #0]
    98d8:	6282      	str	r2, [r0, #40]	; 0x28
    98da:	9301      	str	r3, [sp, #4]
    98dc:	4298      	cmp	r0, r3
    98de:	d101      	bne.n	98e4 <__sinit+0x20>
    98e0:	2301      	movs	r3, #1
    98e2:	6183      	str	r3, [r0, #24]
    98e4:	1c04      	adds	r4, r0, #0
    98e6:	f000 f81f 	bl	9928 <__sfp>
    98ea:	6060      	str	r0, [r4, #4]
    98ec:	1c20      	adds	r0, r4, #0
    98ee:	f000 f81b 	bl	9928 <__sfp>
    98f2:	60a0      	str	r0, [r4, #8]
    98f4:	1c20      	adds	r0, r4, #0
    98f6:	f000 f817 	bl	9928 <__sfp>
    98fa:	2104      	movs	r1, #4
    98fc:	60e0      	str	r0, [r4, #12]
    98fe:	2200      	movs	r2, #0
    9900:	6860      	ldr	r0, [r4, #4]
    9902:	f7ff ffa5 	bl	9850 <std.isra.0>
    9906:	68a0      	ldr	r0, [r4, #8]
    9908:	2109      	movs	r1, #9
    990a:	2201      	movs	r2, #1
    990c:	f7ff ffa0 	bl	9850 <std.isra.0>
    9910:	68e0      	ldr	r0, [r4, #12]
    9912:	2112      	movs	r1, #18
    9914:	2202      	movs	r2, #2
    9916:	f7ff ff9b 	bl	9850 <std.isra.0>
    991a:	2301      	movs	r3, #1
    991c:	61a3      	str	r3, [r4, #24]
    991e:	bd13      	pop	{r0, r1, r4, pc}
    9920:	0000f8fc 	.word	0x0000f8fc
    9924:	00009841 	.word	0x00009841

00009928 <__sfp>:
    9928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    992a:	4b1d      	ldr	r3, [pc, #116]	; (99a0 <__sfp+0x78>)
    992c:	1c06      	adds	r6, r0, #0
    992e:	681d      	ldr	r5, [r3, #0]
    9930:	69ab      	ldr	r3, [r5, #24]
    9932:	2b00      	cmp	r3, #0
    9934:	d102      	bne.n	993c <__sfp+0x14>
    9936:	1c28      	adds	r0, r5, #0
    9938:	f7ff ffc4 	bl	98c4 <__sinit>
    993c:	3548      	adds	r5, #72	; 0x48
    993e:	68ac      	ldr	r4, [r5, #8]
    9940:	686b      	ldr	r3, [r5, #4]
    9942:	3b01      	subs	r3, #1
    9944:	d405      	bmi.n	9952 <__sfp+0x2a>
    9946:	220c      	movs	r2, #12
    9948:	5ea7      	ldrsh	r7, [r4, r2]
    994a:	2f00      	cmp	r7, #0
    994c:	d010      	beq.n	9970 <__sfp+0x48>
    994e:	3468      	adds	r4, #104	; 0x68
    9950:	e7f7      	b.n	9942 <__sfp+0x1a>
    9952:	682b      	ldr	r3, [r5, #0]
    9954:	2b00      	cmp	r3, #0
    9956:	d106      	bne.n	9966 <__sfp+0x3e>
    9958:	1c30      	adds	r0, r6, #0
    995a:	2104      	movs	r1, #4
    995c:	f7ff ff9c 	bl	9898 <__sfmoreglue>
    9960:	6028      	str	r0, [r5, #0]
    9962:	2800      	cmp	r0, #0
    9964:	d001      	beq.n	996a <__sfp+0x42>
    9966:	682d      	ldr	r5, [r5, #0]
    9968:	e7e9      	b.n	993e <__sfp+0x16>
    996a:	230c      	movs	r3, #12
    996c:	6033      	str	r3, [r6, #0]
    996e:	e016      	b.n	999e <__sfp+0x76>
    9970:	2301      	movs	r3, #1
    9972:	1c20      	adds	r0, r4, #0
    9974:	425b      	negs	r3, r3
    9976:	81e3      	strh	r3, [r4, #14]
    9978:	3302      	adds	r3, #2
    997a:	81a3      	strh	r3, [r4, #12]
    997c:	6667      	str	r7, [r4, #100]	; 0x64
    997e:	6027      	str	r7, [r4, #0]
    9980:	60a7      	str	r7, [r4, #8]
    9982:	6067      	str	r7, [r4, #4]
    9984:	6127      	str	r7, [r4, #16]
    9986:	6167      	str	r7, [r4, #20]
    9988:	61a7      	str	r7, [r4, #24]
    998a:	305c      	adds	r0, #92	; 0x5c
    998c:	1c39      	adds	r1, r7, #0
    998e:	2208      	movs	r2, #8
    9990:	f000 f9ea 	bl	9d68 <memset>
    9994:	1c20      	adds	r0, r4, #0
    9996:	6367      	str	r7, [r4, #52]	; 0x34
    9998:	63a7      	str	r7, [r4, #56]	; 0x38
    999a:	64a7      	str	r7, [r4, #72]	; 0x48
    999c:	64e7      	str	r7, [r4, #76]	; 0x4c
    999e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    99a0:	0000f8fc 	.word	0x0000f8fc

000099a4 <__sfp_lock_acquire>:
    99a4:	4770      	bx	lr

000099a6 <__sfp_lock_release>:
    99a6:	4770      	bx	lr

000099a8 <_fopen_r>:
    99a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    99aa:	1c0f      	adds	r7, r1, #0
    99ac:	1c11      	adds	r1, r2, #0
    99ae:	aa01      	add	r2, sp, #4
    99b0:	1c05      	adds	r5, r0, #0
    99b2:	f003 fc91 	bl	d2d8 <__sflags>
    99b6:	1e06      	subs	r6, r0, #0
    99b8:	d101      	bne.n	99be <_fopen_r+0x16>
    99ba:	2400      	movs	r4, #0
    99bc:	e027      	b.n	9a0e <_fopen_r+0x66>
    99be:	1c28      	adds	r0, r5, #0
    99c0:	f7ff ffb2 	bl	9928 <__sfp>
    99c4:	1e04      	subs	r4, r0, #0
    99c6:	d0f8      	beq.n	99ba <_fopen_r+0x12>
    99c8:	23db      	movs	r3, #219	; 0xdb
    99ca:	1c28      	adds	r0, r5, #0
    99cc:	1c39      	adds	r1, r7, #0
    99ce:	9a01      	ldr	r2, [sp, #4]
    99d0:	005b      	lsls	r3, r3, #1
    99d2:	f001 fb51 	bl	b078 <_open_r>
    99d6:	2800      	cmp	r0, #0
    99d8:	da06      	bge.n	99e8 <_fopen_r+0x40>
    99da:	2500      	movs	r5, #0
    99dc:	f7ff ffe2 	bl	99a4 <__sfp_lock_acquire>
    99e0:	81a5      	strh	r5, [r4, #12]
    99e2:	f7ff ffe0 	bl	99a6 <__sfp_lock_release>
    99e6:	e7e8      	b.n	99ba <_fopen_r+0x12>
    99e8:	4b0a      	ldr	r3, [pc, #40]	; (9a14 <_fopen_r+0x6c>)
    99ea:	81e0      	strh	r0, [r4, #14]
    99ec:	6263      	str	r3, [r4, #36]	; 0x24
    99ee:	4b0a      	ldr	r3, [pc, #40]	; (9a18 <_fopen_r+0x70>)
    99f0:	81a6      	strh	r6, [r4, #12]
    99f2:	62a3      	str	r3, [r4, #40]	; 0x28
    99f4:	4b09      	ldr	r3, [pc, #36]	; (9a1c <_fopen_r+0x74>)
    99f6:	6224      	str	r4, [r4, #32]
    99f8:	62e3      	str	r3, [r4, #44]	; 0x2c
    99fa:	4b09      	ldr	r3, [pc, #36]	; (9a20 <_fopen_r+0x78>)
    99fc:	6323      	str	r3, [r4, #48]	; 0x30
    99fe:	05f3      	lsls	r3, r6, #23
    9a00:	d505      	bpl.n	9a0e <_fopen_r+0x66>
    9a02:	1c28      	adds	r0, r5, #0
    9a04:	1c21      	adds	r1, r4, #0
    9a06:	2200      	movs	r2, #0
    9a08:	2302      	movs	r3, #2
    9a0a:	f000 f849 	bl	9aa0 <_fseek_r>
    9a0e:	1c20      	adds	r0, r4, #0
    9a10:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    9a12:	46c0      	nop			; (mov r8, r8)
    9a14:	0000b3ad 	.word	0x0000b3ad
    9a18:	0000b3d9 	.word	0x0000b3d9
    9a1c:	0000b411 	.word	0x0000b411
    9a20:	0000b43d 	.word	0x0000b43d

00009a24 <fopen>:
    9a24:	b508      	push	{r3, lr}
    9a26:	1c03      	adds	r3, r0, #0
    9a28:	1c0a      	adds	r2, r1, #0
    9a2a:	4903      	ldr	r1, [pc, #12]	; (9a38 <fopen+0x14>)
    9a2c:	6808      	ldr	r0, [r1, #0]
    9a2e:	1c19      	adds	r1, r3, #0
    9a30:	f7ff ffba 	bl	99a8 <_fopen_r>
    9a34:	bd08      	pop	{r3, pc}
    9a36:	46c0      	nop			; (mov r8, r8)
    9a38:	20000134 	.word	0x20000134

00009a3c <_fputc_r>:
    9a3c:	b570      	push	{r4, r5, r6, lr}
    9a3e:	1c05      	adds	r5, r0, #0
    9a40:	1c0e      	adds	r6, r1, #0
    9a42:	1c14      	adds	r4, r2, #0
    9a44:	2800      	cmp	r0, #0
    9a46:	d004      	beq.n	9a52 <_fputc_r+0x16>
    9a48:	6983      	ldr	r3, [r0, #24]
    9a4a:	2b00      	cmp	r3, #0
    9a4c:	d101      	bne.n	9a52 <_fputc_r+0x16>
    9a4e:	f7ff ff39 	bl	98c4 <__sinit>
    9a52:	4b0a      	ldr	r3, [pc, #40]	; (9a7c <_fputc_r+0x40>)
    9a54:	429c      	cmp	r4, r3
    9a56:	d101      	bne.n	9a5c <_fputc_r+0x20>
    9a58:	686c      	ldr	r4, [r5, #4]
    9a5a:	e008      	b.n	9a6e <_fputc_r+0x32>
    9a5c:	4b08      	ldr	r3, [pc, #32]	; (9a80 <_fputc_r+0x44>)
    9a5e:	429c      	cmp	r4, r3
    9a60:	d101      	bne.n	9a66 <_fputc_r+0x2a>
    9a62:	68ac      	ldr	r4, [r5, #8]
    9a64:	e003      	b.n	9a6e <_fputc_r+0x32>
    9a66:	4b07      	ldr	r3, [pc, #28]	; (9a84 <_fputc_r+0x48>)
    9a68:	429c      	cmp	r4, r3
    9a6a:	d100      	bne.n	9a6e <_fputc_r+0x32>
    9a6c:	68ec      	ldr	r4, [r5, #12]
    9a6e:	1c28      	adds	r0, r5, #0
    9a70:	1c31      	adds	r1, r6, #0
    9a72:	1c22      	adds	r2, r4, #0
    9a74:	f001 fb14 	bl	b0a0 <_putc_r>
    9a78:	bd70      	pop	{r4, r5, r6, pc}
    9a7a:	46c0      	nop			; (mov r8, r8)
    9a7c:	0000f898 	.word	0x0000f898
    9a80:	0000f8b8 	.word	0x0000f8b8
    9a84:	0000f8d8 	.word	0x0000f8d8

00009a88 <fputc>:
    9a88:	b508      	push	{r3, lr}
    9a8a:	1c03      	adds	r3, r0, #0
    9a8c:	1c0a      	adds	r2, r1, #0
    9a8e:	4903      	ldr	r1, [pc, #12]	; (9a9c <fputc+0x14>)
    9a90:	6808      	ldr	r0, [r1, #0]
    9a92:	1c19      	adds	r1, r3, #0
    9a94:	f7ff ffd2 	bl	9a3c <_fputc_r>
    9a98:	bd08      	pop	{r3, pc}
    9a9a:	46c0      	nop			; (mov r8, r8)
    9a9c:	20000134 	.word	0x20000134

00009aa0 <_fseek_r>:
    9aa0:	b508      	push	{r3, lr}
    9aa2:	f000 f801 	bl	9aa8 <_fseeko_r>
    9aa6:	bd08      	pop	{r3, pc}

00009aa8 <_fseeko_r>:
    9aa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9aaa:	1c05      	adds	r5, r0, #0
    9aac:	1c0c      	adds	r4, r1, #0
    9aae:	9201      	str	r2, [sp, #4]
    9ab0:	1c1e      	adds	r6, r3, #0
    9ab2:	2800      	cmp	r0, #0
    9ab4:	d004      	beq.n	9ac0 <_fseeko_r+0x18>
    9ab6:	6983      	ldr	r3, [r0, #24]
    9ab8:	2b00      	cmp	r3, #0
    9aba:	d101      	bne.n	9ac0 <_fseeko_r+0x18>
    9abc:	f7ff ff02 	bl	98c4 <__sinit>
    9ac0:	4b41      	ldr	r3, [pc, #260]	; (9bc8 <_fseeko_r+0x120>)
    9ac2:	429c      	cmp	r4, r3
    9ac4:	d101      	bne.n	9aca <_fseeko_r+0x22>
    9ac6:	686c      	ldr	r4, [r5, #4]
    9ac8:	e008      	b.n	9adc <_fseeko_r+0x34>
    9aca:	4b40      	ldr	r3, [pc, #256]	; (9bcc <_fseeko_r+0x124>)
    9acc:	429c      	cmp	r4, r3
    9ace:	d101      	bne.n	9ad4 <_fseeko_r+0x2c>
    9ad0:	68ac      	ldr	r4, [r5, #8]
    9ad2:	e003      	b.n	9adc <_fseeko_r+0x34>
    9ad4:	4b3e      	ldr	r3, [pc, #248]	; (9bd0 <_fseeko_r+0x128>)
    9ad6:	429c      	cmp	r4, r3
    9ad8:	d100      	bne.n	9adc <_fseeko_r+0x34>
    9ada:	68ec      	ldr	r4, [r5, #12]
    9adc:	2284      	movs	r2, #132	; 0x84
    9ade:	89a3      	ldrh	r3, [r4, #12]
    9ae0:	0052      	lsls	r2, r2, #1
    9ae2:	4013      	ands	r3, r2
    9ae4:	4293      	cmp	r3, r2
    9ae6:	d103      	bne.n	9af0 <_fseeko_r+0x48>
    9ae8:	1c28      	adds	r0, r5, #0
    9aea:	1c21      	adds	r1, r4, #0
    9aec:	f7ff fe68 	bl	97c0 <_fflush_r>
    9af0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    9af2:	9300      	str	r3, [sp, #0]
    9af4:	2b00      	cmp	r3, #0
    9af6:	d101      	bne.n	9afc <_fseeko_r+0x54>
    9af8:	331d      	adds	r3, #29
    9afa:	e031      	b.n	9b60 <_fseeko_r+0xb8>
    9afc:	2e01      	cmp	r6, #1
    9afe:	d005      	beq.n	9b0c <_fseeko_r+0x64>
    9b00:	2e02      	cmp	r6, #2
    9b02:	d031      	beq.n	9b68 <_fseeko_r+0xc0>
    9b04:	2316      	movs	r3, #22
    9b06:	2e00      	cmp	r6, #0
    9b08:	d12a      	bne.n	9b60 <_fseeko_r+0xb8>
    9b0a:	e02d      	b.n	9b68 <_fseeko_r+0xc0>
    9b0c:	1c28      	adds	r0, r5, #0
    9b0e:	1c21      	adds	r1, r4, #0
    9b10:	f7ff fe56 	bl	97c0 <_fflush_r>
    9b14:	2380      	movs	r3, #128	; 0x80
    9b16:	89a2      	ldrh	r2, [r4, #12]
    9b18:	015b      	lsls	r3, r3, #5
    9b1a:	401a      	ands	r2, r3
    9b1c:	d001      	beq.n	9b22 <_fseeko_r+0x7a>
    9b1e:	6d60      	ldr	r0, [r4, #84]	; 0x54
    9b20:	e006      	b.n	9b30 <_fseeko_r+0x88>
    9b22:	1c33      	adds	r3, r6, #0
    9b24:	1c28      	adds	r0, r5, #0
    9b26:	6a21      	ldr	r1, [r4, #32]
    9b28:	9e00      	ldr	r6, [sp, #0]
    9b2a:	47b0      	blx	r6
    9b2c:	1c43      	adds	r3, r0, #1
    9b2e:	d018      	beq.n	9b62 <_fseeko_r+0xba>
    9b30:	89a3      	ldrh	r3, [r4, #12]
    9b32:	075a      	lsls	r2, r3, #29
    9b34:	d507      	bpl.n	9b46 <_fseeko_r+0x9e>
    9b36:	6863      	ldr	r3, [r4, #4]
    9b38:	1ac0      	subs	r0, r0, r3
    9b3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    9b3c:	2b00      	cmp	r3, #0
    9b3e:	d00a      	beq.n	9b56 <_fseeko_r+0xae>
    9b40:	6c23      	ldr	r3, [r4, #64]	; 0x40
    9b42:	1ac0      	subs	r0, r0, r3
    9b44:	e007      	b.n	9b56 <_fseeko_r+0xae>
    9b46:	071b      	lsls	r3, r3, #28
    9b48:	d505      	bpl.n	9b56 <_fseeko_r+0xae>
    9b4a:	6823      	ldr	r3, [r4, #0]
    9b4c:	2b00      	cmp	r3, #0
    9b4e:	d002      	beq.n	9b56 <_fseeko_r+0xae>
    9b50:	6922      	ldr	r2, [r4, #16]
    9b52:	1a9b      	subs	r3, r3, r2
    9b54:	18c0      	adds	r0, r0, r3
    9b56:	9b01      	ldr	r3, [sp, #4]
    9b58:	2600      	movs	r6, #0
    9b5a:	181b      	adds	r3, r3, r0
    9b5c:	9301      	str	r3, [sp, #4]
    9b5e:	e003      	b.n	9b68 <_fseeko_r+0xc0>
    9b60:	602b      	str	r3, [r5, #0]
    9b62:	2701      	movs	r7, #1
    9b64:	427f      	negs	r7, r7
    9b66:	e02d      	b.n	9bc4 <_fseeko_r+0x11c>
    9b68:	6923      	ldr	r3, [r4, #16]
    9b6a:	2b00      	cmp	r3, #0
    9b6c:	d103      	bne.n	9b76 <_fseeko_r+0xce>
    9b6e:	1c28      	adds	r0, r5, #0
    9b70:	1c21      	adds	r1, r4, #0
    9b72:	f000 f879 	bl	9c68 <__smakebuf_r>
    9b76:	1c28      	adds	r0, r5, #0
    9b78:	1c21      	adds	r1, r4, #0
    9b7a:	f7ff fe21 	bl	97c0 <_fflush_r>
    9b7e:	1e07      	subs	r7, r0, #0
    9b80:	d1ef      	bne.n	9b62 <_fseeko_r+0xba>
    9b82:	1c33      	adds	r3, r6, #0
    9b84:	1c28      	adds	r0, r5, #0
    9b86:	6a21      	ldr	r1, [r4, #32]
    9b88:	9a01      	ldr	r2, [sp, #4]
    9b8a:	9e00      	ldr	r6, [sp, #0]
    9b8c:	47b0      	blx	r6
    9b8e:	1c43      	adds	r3, r0, #1
    9b90:	d0e7      	beq.n	9b62 <_fseeko_r+0xba>
    9b92:	6b61      	ldr	r1, [r4, #52]	; 0x34
    9b94:	2900      	cmp	r1, #0
    9b96:	d008      	beq.n	9baa <_fseeko_r+0x102>
    9b98:	1c23      	adds	r3, r4, #0
    9b9a:	3344      	adds	r3, #68	; 0x44
    9b9c:	4299      	cmp	r1, r3
    9b9e:	d002      	beq.n	9ba6 <_fseeko_r+0xfe>
    9ba0:	1c28      	adds	r0, r5, #0
    9ba2:	f000 f8e9 	bl	9d78 <_free_r>
    9ba6:	2300      	movs	r3, #0
    9ba8:	6363      	str	r3, [r4, #52]	; 0x34
    9baa:	2100      	movs	r1, #0
    9bac:	1c20      	adds	r0, r4, #0
    9bae:	6923      	ldr	r3, [r4, #16]
    9bb0:	89a2      	ldrh	r2, [r4, #12]
    9bb2:	6023      	str	r3, [r4, #0]
    9bb4:	4b07      	ldr	r3, [pc, #28]	; (9bd4 <_fseeko_r+0x12c>)
    9bb6:	6061      	str	r1, [r4, #4]
    9bb8:	4013      	ands	r3, r2
    9bba:	81a3      	strh	r3, [r4, #12]
    9bbc:	305c      	adds	r0, #92	; 0x5c
    9bbe:	2208      	movs	r2, #8
    9bc0:	f000 f8d2 	bl	9d68 <memset>
    9bc4:	1c38      	adds	r0, r7, #0
    9bc6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    9bc8:	0000f898 	.word	0x0000f898
    9bcc:	0000f8b8 	.word	0x0000f8b8
    9bd0:	0000f8d8 	.word	0x0000f8d8
    9bd4:	fffff7df 	.word	0xfffff7df

00009bd8 <_fwalk_reent>:
    9bd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9bda:	1c04      	adds	r4, r0, #0
    9bdc:	1c07      	adds	r7, r0, #0
    9bde:	2600      	movs	r6, #0
    9be0:	9101      	str	r1, [sp, #4]
    9be2:	3448      	adds	r4, #72	; 0x48
    9be4:	2c00      	cmp	r4, #0
    9be6:	d016      	beq.n	9c16 <_fwalk_reent+0x3e>
    9be8:	6863      	ldr	r3, [r4, #4]
    9bea:	68a5      	ldr	r5, [r4, #8]
    9bec:	9300      	str	r3, [sp, #0]
    9bee:	9b00      	ldr	r3, [sp, #0]
    9bf0:	3b01      	subs	r3, #1
    9bf2:	9300      	str	r3, [sp, #0]
    9bf4:	d40d      	bmi.n	9c12 <_fwalk_reent+0x3a>
    9bf6:	89ab      	ldrh	r3, [r5, #12]
    9bf8:	2b01      	cmp	r3, #1
    9bfa:	d908      	bls.n	9c0e <_fwalk_reent+0x36>
    9bfc:	220e      	movs	r2, #14
    9bfe:	5eab      	ldrsh	r3, [r5, r2]
    9c00:	3301      	adds	r3, #1
    9c02:	d004      	beq.n	9c0e <_fwalk_reent+0x36>
    9c04:	1c38      	adds	r0, r7, #0
    9c06:	1c29      	adds	r1, r5, #0
    9c08:	9b01      	ldr	r3, [sp, #4]
    9c0a:	4798      	blx	r3
    9c0c:	4306      	orrs	r6, r0
    9c0e:	3568      	adds	r5, #104	; 0x68
    9c10:	e7ed      	b.n	9bee <_fwalk_reent+0x16>
    9c12:	6824      	ldr	r4, [r4, #0]
    9c14:	e7e6      	b.n	9be4 <_fwalk_reent+0xc>
    9c16:	1c30      	adds	r0, r6, #0
    9c18:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00009c1c <__libc_init_array>:
    9c1c:	4b0e      	ldr	r3, [pc, #56]	; (9c58 <__libc_init_array+0x3c>)
    9c1e:	b570      	push	{r4, r5, r6, lr}
    9c20:	2500      	movs	r5, #0
    9c22:	1c1e      	adds	r6, r3, #0
    9c24:	4c0d      	ldr	r4, [pc, #52]	; (9c5c <__libc_init_array+0x40>)
    9c26:	1ae4      	subs	r4, r4, r3
    9c28:	10a4      	asrs	r4, r4, #2
    9c2a:	42a5      	cmp	r5, r4
    9c2c:	d004      	beq.n	9c38 <__libc_init_array+0x1c>
    9c2e:	00ab      	lsls	r3, r5, #2
    9c30:	58f3      	ldr	r3, [r6, r3]
    9c32:	4798      	blx	r3
    9c34:	3501      	adds	r5, #1
    9c36:	e7f8      	b.n	9c2a <__libc_init_array+0xe>
    9c38:	f005 ffd0 	bl	fbdc <_init>
    9c3c:	4b08      	ldr	r3, [pc, #32]	; (9c60 <__libc_init_array+0x44>)
    9c3e:	2500      	movs	r5, #0
    9c40:	1c1e      	adds	r6, r3, #0
    9c42:	4c08      	ldr	r4, [pc, #32]	; (9c64 <__libc_init_array+0x48>)
    9c44:	1ae4      	subs	r4, r4, r3
    9c46:	10a4      	asrs	r4, r4, #2
    9c48:	42a5      	cmp	r5, r4
    9c4a:	d004      	beq.n	9c56 <__libc_init_array+0x3a>
    9c4c:	00ab      	lsls	r3, r5, #2
    9c4e:	58f3      	ldr	r3, [r6, r3]
    9c50:	4798      	blx	r3
    9c52:	3501      	adds	r5, #1
    9c54:	e7f8      	b.n	9c48 <__libc_init_array+0x2c>
    9c56:	bd70      	pop	{r4, r5, r6, pc}
    9c58:	0000fbe8 	.word	0x0000fbe8
    9c5c:	0000fbe8 	.word	0x0000fbe8
    9c60:	0000fbe8 	.word	0x0000fbe8
    9c64:	0000fbfc 	.word	0x0000fbfc

00009c68 <__smakebuf_r>:
    9c68:	b5f0      	push	{r4, r5, r6, r7, lr}
    9c6a:	898b      	ldrh	r3, [r1, #12]
    9c6c:	b091      	sub	sp, #68	; 0x44
    9c6e:	079b      	lsls	r3, r3, #30
    9c70:	d506      	bpl.n	9c80 <__smakebuf_r+0x18>
    9c72:	1c0b      	adds	r3, r1, #0
    9c74:	3347      	adds	r3, #71	; 0x47
    9c76:	600b      	str	r3, [r1, #0]
    9c78:	610b      	str	r3, [r1, #16]
    9c7a:	2301      	movs	r3, #1
    9c7c:	614b      	str	r3, [r1, #20]
    9c7e:	e045      	b.n	9d0c <__smakebuf_r+0xa4>
    9c80:	1c0c      	adds	r4, r1, #0
    9c82:	230e      	movs	r3, #14
    9c84:	5ec9      	ldrsh	r1, [r1, r3]
    9c86:	1c06      	adds	r6, r0, #0
    9c88:	2900      	cmp	r1, #0
    9c8a:	da04      	bge.n	9c96 <__smakebuf_r+0x2e>
    9c8c:	2380      	movs	r3, #128	; 0x80
    9c8e:	89a5      	ldrh	r5, [r4, #12]
    9c90:	401d      	ands	r5, r3
    9c92:	d110      	bne.n	9cb6 <__smakebuf_r+0x4e>
    9c94:	e00c      	b.n	9cb0 <__smakebuf_r+0x48>
    9c96:	aa01      	add	r2, sp, #4
    9c98:	f003 fb56 	bl	d348 <_fstat_r>
    9c9c:	2800      	cmp	r0, #0
    9c9e:	dbf5      	blt.n	9c8c <__smakebuf_r+0x24>
    9ca0:	23f0      	movs	r3, #240	; 0xf0
    9ca2:	9d02      	ldr	r5, [sp, #8]
    9ca4:	021b      	lsls	r3, r3, #8
    9ca6:	401d      	ands	r5, r3
    9ca8:	4b19      	ldr	r3, [pc, #100]	; (9d10 <__smakebuf_r+0xa8>)
    9caa:	18ed      	adds	r5, r5, r3
    9cac:	426b      	negs	r3, r5
    9cae:	415d      	adcs	r5, r3
    9cb0:	2780      	movs	r7, #128	; 0x80
    9cb2:	00ff      	lsls	r7, r7, #3
    9cb4:	e001      	b.n	9cba <__smakebuf_r+0x52>
    9cb6:	2500      	movs	r5, #0
    9cb8:	2740      	movs	r7, #64	; 0x40
    9cba:	1c30      	adds	r0, r6, #0
    9cbc:	1c39      	adds	r1, r7, #0
    9cbe:	f000 f8a1 	bl	9e04 <_malloc_r>
    9cc2:	2800      	cmp	r0, #0
    9cc4:	d10c      	bne.n	9ce0 <__smakebuf_r+0x78>
    9cc6:	89a3      	ldrh	r3, [r4, #12]
    9cc8:	059a      	lsls	r2, r3, #22
    9cca:	d41f      	bmi.n	9d0c <__smakebuf_r+0xa4>
    9ccc:	2202      	movs	r2, #2
    9cce:	4313      	orrs	r3, r2
    9cd0:	81a3      	strh	r3, [r4, #12]
    9cd2:	1c23      	adds	r3, r4, #0
    9cd4:	3347      	adds	r3, #71	; 0x47
    9cd6:	6023      	str	r3, [r4, #0]
    9cd8:	6123      	str	r3, [r4, #16]
    9cda:	2301      	movs	r3, #1
    9cdc:	6163      	str	r3, [r4, #20]
    9cde:	e015      	b.n	9d0c <__smakebuf_r+0xa4>
    9ce0:	2280      	movs	r2, #128	; 0x80
    9ce2:	4b0c      	ldr	r3, [pc, #48]	; (9d14 <__smakebuf_r+0xac>)
    9ce4:	62b3      	str	r3, [r6, #40]	; 0x28
    9ce6:	89a3      	ldrh	r3, [r4, #12]
    9ce8:	6020      	str	r0, [r4, #0]
    9cea:	4313      	orrs	r3, r2
    9cec:	81a3      	strh	r3, [r4, #12]
    9cee:	6120      	str	r0, [r4, #16]
    9cf0:	6167      	str	r7, [r4, #20]
    9cf2:	2d00      	cmp	r5, #0
    9cf4:	d00a      	beq.n	9d0c <__smakebuf_r+0xa4>
    9cf6:	230e      	movs	r3, #14
    9cf8:	5ee1      	ldrsh	r1, [r4, r3]
    9cfa:	1c30      	adds	r0, r6, #0
    9cfc:	f003 fe4e 	bl	d99c <_isatty_r>
    9d00:	2800      	cmp	r0, #0
    9d02:	d003      	beq.n	9d0c <__smakebuf_r+0xa4>
    9d04:	2201      	movs	r2, #1
    9d06:	89a3      	ldrh	r3, [r4, #12]
    9d08:	4313      	orrs	r3, r2
    9d0a:	81a3      	strh	r3, [r4, #12]
    9d0c:	b011      	add	sp, #68	; 0x44
    9d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9d10:	ffffe000 	.word	0xffffe000
    9d14:	00009841 	.word	0x00009841

00009d18 <malloc>:
    9d18:	b508      	push	{r3, lr}
    9d1a:	4b03      	ldr	r3, [pc, #12]	; (9d28 <malloc+0x10>)
    9d1c:	1c01      	adds	r1, r0, #0
    9d1e:	6818      	ldr	r0, [r3, #0]
    9d20:	f000 f870 	bl	9e04 <_malloc_r>
    9d24:	bd08      	pop	{r3, pc}
    9d26:	46c0      	nop			; (mov r8, r8)
    9d28:	20000134 	.word	0x20000134

00009d2c <free>:
    9d2c:	b508      	push	{r3, lr}
    9d2e:	4b03      	ldr	r3, [pc, #12]	; (9d3c <free+0x10>)
    9d30:	1c01      	adds	r1, r0, #0
    9d32:	6818      	ldr	r0, [r3, #0]
    9d34:	f000 f820 	bl	9d78 <_free_r>
    9d38:	bd08      	pop	{r3, pc}
    9d3a:	46c0      	nop			; (mov r8, r8)
    9d3c:	20000134 	.word	0x20000134

00009d40 <memchr>:
    9d40:	b2c9      	uxtb	r1, r1
    9d42:	1882      	adds	r2, r0, r2
    9d44:	4290      	cmp	r0, r2
    9d46:	d004      	beq.n	9d52 <memchr+0x12>
    9d48:	7803      	ldrb	r3, [r0, #0]
    9d4a:	428b      	cmp	r3, r1
    9d4c:	d002      	beq.n	9d54 <memchr+0x14>
    9d4e:	3001      	adds	r0, #1
    9d50:	e7f8      	b.n	9d44 <memchr+0x4>
    9d52:	2000      	movs	r0, #0
    9d54:	4770      	bx	lr

00009d56 <memcpy>:
    9d56:	2300      	movs	r3, #0
    9d58:	b510      	push	{r4, lr}
    9d5a:	4293      	cmp	r3, r2
    9d5c:	d003      	beq.n	9d66 <memcpy+0x10>
    9d5e:	5ccc      	ldrb	r4, [r1, r3]
    9d60:	54c4      	strb	r4, [r0, r3]
    9d62:	3301      	adds	r3, #1
    9d64:	e7f9      	b.n	9d5a <memcpy+0x4>
    9d66:	bd10      	pop	{r4, pc}

00009d68 <memset>:
    9d68:	1c03      	adds	r3, r0, #0
    9d6a:	1882      	adds	r2, r0, r2
    9d6c:	4293      	cmp	r3, r2
    9d6e:	d002      	beq.n	9d76 <memset+0xe>
    9d70:	7019      	strb	r1, [r3, #0]
    9d72:	3301      	adds	r3, #1
    9d74:	e7fa      	b.n	9d6c <memset+0x4>
    9d76:	4770      	bx	lr

00009d78 <_free_r>:
    9d78:	b530      	push	{r4, r5, lr}
    9d7a:	2900      	cmp	r1, #0
    9d7c:	d03e      	beq.n	9dfc <_free_r+0x84>
    9d7e:	3904      	subs	r1, #4
    9d80:	680b      	ldr	r3, [r1, #0]
    9d82:	2b00      	cmp	r3, #0
    9d84:	da00      	bge.n	9d88 <_free_r+0x10>
    9d86:	18c9      	adds	r1, r1, r3
    9d88:	4a1d      	ldr	r2, [pc, #116]	; (9e00 <_free_r+0x88>)
    9d8a:	6813      	ldr	r3, [r2, #0]
    9d8c:	1c14      	adds	r4, r2, #0
    9d8e:	2b00      	cmp	r3, #0
    9d90:	d102      	bne.n	9d98 <_free_r+0x20>
    9d92:	604b      	str	r3, [r1, #4]
    9d94:	6011      	str	r1, [r2, #0]
    9d96:	e031      	b.n	9dfc <_free_r+0x84>
    9d98:	4299      	cmp	r1, r3
    9d9a:	d20d      	bcs.n	9db8 <_free_r+0x40>
    9d9c:	6808      	ldr	r0, [r1, #0]
    9d9e:	180a      	adds	r2, r1, r0
    9da0:	429a      	cmp	r2, r3
    9da2:	d103      	bne.n	9dac <_free_r+0x34>
    9da4:	6813      	ldr	r3, [r2, #0]
    9da6:	18c3      	adds	r3, r0, r3
    9da8:	600b      	str	r3, [r1, #0]
    9daa:	6853      	ldr	r3, [r2, #4]
    9dac:	604b      	str	r3, [r1, #4]
    9dae:	6021      	str	r1, [r4, #0]
    9db0:	e024      	b.n	9dfc <_free_r+0x84>
    9db2:	428a      	cmp	r2, r1
    9db4:	d803      	bhi.n	9dbe <_free_r+0x46>
    9db6:	1c13      	adds	r3, r2, #0
    9db8:	685a      	ldr	r2, [r3, #4]
    9dba:	2a00      	cmp	r2, #0
    9dbc:	d1f9      	bne.n	9db2 <_free_r+0x3a>
    9dbe:	681d      	ldr	r5, [r3, #0]
    9dc0:	195c      	adds	r4, r3, r5
    9dc2:	428c      	cmp	r4, r1
    9dc4:	d10b      	bne.n	9dde <_free_r+0x66>
    9dc6:	6809      	ldr	r1, [r1, #0]
    9dc8:	1869      	adds	r1, r5, r1
    9dca:	1858      	adds	r0, r3, r1
    9dcc:	6019      	str	r1, [r3, #0]
    9dce:	4290      	cmp	r0, r2
    9dd0:	d114      	bne.n	9dfc <_free_r+0x84>
    9dd2:	6810      	ldr	r0, [r2, #0]
    9dd4:	6852      	ldr	r2, [r2, #4]
    9dd6:	1809      	adds	r1, r1, r0
    9dd8:	6019      	str	r1, [r3, #0]
    9dda:	605a      	str	r2, [r3, #4]
    9ddc:	e00e      	b.n	9dfc <_free_r+0x84>
    9dde:	428c      	cmp	r4, r1
    9de0:	d902      	bls.n	9de8 <_free_r+0x70>
    9de2:	230c      	movs	r3, #12
    9de4:	6003      	str	r3, [r0, #0]
    9de6:	e009      	b.n	9dfc <_free_r+0x84>
    9de8:	6808      	ldr	r0, [r1, #0]
    9dea:	180c      	adds	r4, r1, r0
    9dec:	4294      	cmp	r4, r2
    9dee:	d103      	bne.n	9df8 <_free_r+0x80>
    9df0:	6814      	ldr	r4, [r2, #0]
    9df2:	6852      	ldr	r2, [r2, #4]
    9df4:	1900      	adds	r0, r0, r4
    9df6:	6008      	str	r0, [r1, #0]
    9df8:	604a      	str	r2, [r1, #4]
    9dfa:	6059      	str	r1, [r3, #4]
    9dfc:	bd30      	pop	{r4, r5, pc}
    9dfe:	46c0      	nop			; (mov r8, r8)
    9e00:	20004710 	.word	0x20004710

00009e04 <_malloc_r>:
    9e04:	2303      	movs	r3, #3
    9e06:	b570      	push	{r4, r5, r6, lr}
    9e08:	1ccc      	adds	r4, r1, #3
    9e0a:	439c      	bics	r4, r3
    9e0c:	3408      	adds	r4, #8
    9e0e:	1c05      	adds	r5, r0, #0
    9e10:	2c0c      	cmp	r4, #12
    9e12:	d201      	bcs.n	9e18 <_malloc_r+0x14>
    9e14:	240c      	movs	r4, #12
    9e16:	e005      	b.n	9e24 <_malloc_r+0x20>
    9e18:	2c00      	cmp	r4, #0
    9e1a:	da03      	bge.n	9e24 <_malloc_r+0x20>
    9e1c:	230c      	movs	r3, #12
    9e1e:	2000      	movs	r0, #0
    9e20:	602b      	str	r3, [r5, #0]
    9e22:	e042      	b.n	9eaa <_malloc_r+0xa6>
    9e24:	428c      	cmp	r4, r1
    9e26:	d3f9      	bcc.n	9e1c <_malloc_r+0x18>
    9e28:	4a20      	ldr	r2, [pc, #128]	; (9eac <_malloc_r+0xa8>)
    9e2a:	6813      	ldr	r3, [r2, #0]
    9e2c:	1c10      	adds	r0, r2, #0
    9e2e:	1c19      	adds	r1, r3, #0
    9e30:	2900      	cmp	r1, #0
    9e32:	d013      	beq.n	9e5c <_malloc_r+0x58>
    9e34:	680a      	ldr	r2, [r1, #0]
    9e36:	1b12      	subs	r2, r2, r4
    9e38:	d40d      	bmi.n	9e56 <_malloc_r+0x52>
    9e3a:	2a0b      	cmp	r2, #11
    9e3c:	d902      	bls.n	9e44 <_malloc_r+0x40>
    9e3e:	600a      	str	r2, [r1, #0]
    9e40:	188b      	adds	r3, r1, r2
    9e42:	e01f      	b.n	9e84 <_malloc_r+0x80>
    9e44:	428b      	cmp	r3, r1
    9e46:	d102      	bne.n	9e4e <_malloc_r+0x4a>
    9e48:	685a      	ldr	r2, [r3, #4]
    9e4a:	6002      	str	r2, [r0, #0]
    9e4c:	e01b      	b.n	9e86 <_malloc_r+0x82>
    9e4e:	684a      	ldr	r2, [r1, #4]
    9e50:	605a      	str	r2, [r3, #4]
    9e52:	1c0b      	adds	r3, r1, #0
    9e54:	e017      	b.n	9e86 <_malloc_r+0x82>
    9e56:	1c0b      	adds	r3, r1, #0
    9e58:	6849      	ldr	r1, [r1, #4]
    9e5a:	e7e9      	b.n	9e30 <_malloc_r+0x2c>
    9e5c:	4e14      	ldr	r6, [pc, #80]	; (9eb0 <_malloc_r+0xac>)
    9e5e:	6833      	ldr	r3, [r6, #0]
    9e60:	2b00      	cmp	r3, #0
    9e62:	d103      	bne.n	9e6c <_malloc_r+0x68>
    9e64:	1c28      	adds	r0, r5, #0
    9e66:	f001 f97f 	bl	b168 <_sbrk_r>
    9e6a:	6030      	str	r0, [r6, #0]
    9e6c:	1c28      	adds	r0, r5, #0
    9e6e:	1c21      	adds	r1, r4, #0
    9e70:	f001 f97a 	bl	b168 <_sbrk_r>
    9e74:	1c03      	adds	r3, r0, #0
    9e76:	1c42      	adds	r2, r0, #1
    9e78:	d0d0      	beq.n	9e1c <_malloc_r+0x18>
    9e7a:	2203      	movs	r2, #3
    9e7c:	1cc6      	adds	r6, r0, #3
    9e7e:	4396      	bics	r6, r2
    9e80:	4286      	cmp	r6, r0
    9e82:	d10a      	bne.n	9e9a <_malloc_r+0x96>
    9e84:	601c      	str	r4, [r3, #0]
    9e86:	1c18      	adds	r0, r3, #0
    9e88:	2107      	movs	r1, #7
    9e8a:	300b      	adds	r0, #11
    9e8c:	1d1a      	adds	r2, r3, #4
    9e8e:	4388      	bics	r0, r1
    9e90:	1a82      	subs	r2, r0, r2
    9e92:	d00a      	beq.n	9eaa <_malloc_r+0xa6>
    9e94:	4251      	negs	r1, r2
    9e96:	5099      	str	r1, [r3, r2]
    9e98:	e007      	b.n	9eaa <_malloc_r+0xa6>
    9e9a:	1a31      	subs	r1, r6, r0
    9e9c:	1c28      	adds	r0, r5, #0
    9e9e:	f001 f963 	bl	b168 <_sbrk_r>
    9ea2:	1c43      	adds	r3, r0, #1
    9ea4:	d0ba      	beq.n	9e1c <_malloc_r+0x18>
    9ea6:	1c33      	adds	r3, r6, #0
    9ea8:	e7ec      	b.n	9e84 <_malloc_r+0x80>
    9eaa:	bd70      	pop	{r4, r5, r6, pc}
    9eac:	20004710 	.word	0x20004710
    9eb0:	2000470c 	.word	0x2000470c

00009eb4 <__sfputc_r>:
    9eb4:	6893      	ldr	r3, [r2, #8]
    9eb6:	b510      	push	{r4, lr}
    9eb8:	3b01      	subs	r3, #1
    9eba:	6093      	str	r3, [r2, #8]
    9ebc:	2b00      	cmp	r3, #0
    9ebe:	da05      	bge.n	9ecc <__sfputc_r+0x18>
    9ec0:	6994      	ldr	r4, [r2, #24]
    9ec2:	42a3      	cmp	r3, r4
    9ec4:	db08      	blt.n	9ed8 <__sfputc_r+0x24>
    9ec6:	b2cb      	uxtb	r3, r1
    9ec8:	2b0a      	cmp	r3, #10
    9eca:	d005      	beq.n	9ed8 <__sfputc_r+0x24>
    9ecc:	6813      	ldr	r3, [r2, #0]
    9ece:	1c58      	adds	r0, r3, #1
    9ed0:	6010      	str	r0, [r2, #0]
    9ed2:	7019      	strb	r1, [r3, #0]
    9ed4:	b2c8      	uxtb	r0, r1
    9ed6:	e001      	b.n	9edc <__sfputc_r+0x28>
    9ed8:	f002 fa84 	bl	c3e4 <__swbuf_r>
    9edc:	bd10      	pop	{r4, pc}

00009ede <__sfputs_r>:
    9ede:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9ee0:	1c06      	adds	r6, r0, #0
    9ee2:	1c0f      	adds	r7, r1, #0
    9ee4:	1c14      	adds	r4, r2, #0
    9ee6:	18d5      	adds	r5, r2, r3
    9ee8:	42ac      	cmp	r4, r5
    9eea:	d008      	beq.n	9efe <__sfputs_r+0x20>
    9eec:	7821      	ldrb	r1, [r4, #0]
    9eee:	1c30      	adds	r0, r6, #0
    9ef0:	1c3a      	adds	r2, r7, #0
    9ef2:	f7ff ffdf 	bl	9eb4 <__sfputc_r>
    9ef6:	3401      	adds	r4, #1
    9ef8:	1c43      	adds	r3, r0, #1
    9efa:	d1f5      	bne.n	9ee8 <__sfputs_r+0xa>
    9efc:	e000      	b.n	9f00 <__sfputs_r+0x22>
    9efe:	2000      	movs	r0, #0
    9f00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00009f04 <_vfiprintf_r>:
    9f04:	b5f0      	push	{r4, r5, r6, r7, lr}
    9f06:	b09f      	sub	sp, #124	; 0x7c
    9f08:	1c06      	adds	r6, r0, #0
    9f0a:	1c0f      	adds	r7, r1, #0
    9f0c:	9202      	str	r2, [sp, #8]
    9f0e:	9305      	str	r3, [sp, #20]
    9f10:	2800      	cmp	r0, #0
    9f12:	d004      	beq.n	9f1e <_vfiprintf_r+0x1a>
    9f14:	6983      	ldr	r3, [r0, #24]
    9f16:	2b00      	cmp	r3, #0
    9f18:	d101      	bne.n	9f1e <_vfiprintf_r+0x1a>
    9f1a:	f7ff fcd3 	bl	98c4 <__sinit>
    9f1e:	4b79      	ldr	r3, [pc, #484]	; (a104 <_vfiprintf_r+0x200>)
    9f20:	429f      	cmp	r7, r3
    9f22:	d101      	bne.n	9f28 <_vfiprintf_r+0x24>
    9f24:	6877      	ldr	r7, [r6, #4]
    9f26:	e008      	b.n	9f3a <_vfiprintf_r+0x36>
    9f28:	4b77      	ldr	r3, [pc, #476]	; (a108 <_vfiprintf_r+0x204>)
    9f2a:	429f      	cmp	r7, r3
    9f2c:	d101      	bne.n	9f32 <_vfiprintf_r+0x2e>
    9f2e:	68b7      	ldr	r7, [r6, #8]
    9f30:	e003      	b.n	9f3a <_vfiprintf_r+0x36>
    9f32:	4b76      	ldr	r3, [pc, #472]	; (a10c <_vfiprintf_r+0x208>)
    9f34:	429f      	cmp	r7, r3
    9f36:	d100      	bne.n	9f3a <_vfiprintf_r+0x36>
    9f38:	68f7      	ldr	r7, [r6, #12]
    9f3a:	89bb      	ldrh	r3, [r7, #12]
    9f3c:	071b      	lsls	r3, r3, #28
    9f3e:	d50a      	bpl.n	9f56 <_vfiprintf_r+0x52>
    9f40:	693b      	ldr	r3, [r7, #16]
    9f42:	2b00      	cmp	r3, #0
    9f44:	d007      	beq.n	9f56 <_vfiprintf_r+0x52>
    9f46:	2300      	movs	r3, #0
    9f48:	ad06      	add	r5, sp, #24
    9f4a:	616b      	str	r3, [r5, #20]
    9f4c:	3320      	adds	r3, #32
    9f4e:	766b      	strb	r3, [r5, #25]
    9f50:	3310      	adds	r3, #16
    9f52:	76ab      	strb	r3, [r5, #26]
    9f54:	e03d      	b.n	9fd2 <_vfiprintf_r+0xce>
    9f56:	1c30      	adds	r0, r6, #0
    9f58:	1c39      	adds	r1, r7, #0
    9f5a:	f002 faaf 	bl	c4bc <__swsetup_r>
    9f5e:	2800      	cmp	r0, #0
    9f60:	d0f1      	beq.n	9f46 <_vfiprintf_r+0x42>
    9f62:	2001      	movs	r0, #1
    9f64:	4240      	negs	r0, r0
    9f66:	e0ca      	b.n	a0fe <_vfiprintf_r+0x1fa>
    9f68:	9a05      	ldr	r2, [sp, #20]
    9f6a:	1d11      	adds	r1, r2, #4
    9f6c:	6812      	ldr	r2, [r2, #0]
    9f6e:	9105      	str	r1, [sp, #20]
    9f70:	2a00      	cmp	r2, #0
    9f72:	db7e      	blt.n	a072 <_vfiprintf_r+0x16e>
    9f74:	9209      	str	r2, [sp, #36]	; 0x24
    9f76:	3401      	adds	r4, #1
    9f78:	7823      	ldrb	r3, [r4, #0]
    9f7a:	2b2e      	cmp	r3, #46	; 0x2e
    9f7c:	d100      	bne.n	9f80 <_vfiprintf_r+0x7c>
    9f7e:	e089      	b.n	a094 <_vfiprintf_r+0x190>
    9f80:	7821      	ldrb	r1, [r4, #0]
    9f82:	4863      	ldr	r0, [pc, #396]	; (a110 <_vfiprintf_r+0x20c>)
    9f84:	2203      	movs	r2, #3
    9f86:	f7ff fedb 	bl	9d40 <memchr>
    9f8a:	2800      	cmp	r0, #0
    9f8c:	d008      	beq.n	9fa0 <_vfiprintf_r+0x9c>
    9f8e:	4b60      	ldr	r3, [pc, #384]	; (a110 <_vfiprintf_r+0x20c>)
    9f90:	3401      	adds	r4, #1
    9f92:	1ac0      	subs	r0, r0, r3
    9f94:	2340      	movs	r3, #64	; 0x40
    9f96:	4083      	lsls	r3, r0
    9f98:	1c18      	adds	r0, r3, #0
    9f9a:	682b      	ldr	r3, [r5, #0]
    9f9c:	4318      	orrs	r0, r3
    9f9e:	6028      	str	r0, [r5, #0]
    9fa0:	7821      	ldrb	r1, [r4, #0]
    9fa2:	1c63      	adds	r3, r4, #1
    9fa4:	485b      	ldr	r0, [pc, #364]	; (a114 <_vfiprintf_r+0x210>)
    9fa6:	2206      	movs	r2, #6
    9fa8:	9302      	str	r3, [sp, #8]
    9faa:	7629      	strb	r1, [r5, #24]
    9fac:	f7ff fec8 	bl	9d40 <memchr>
    9fb0:	2800      	cmp	r0, #0
    9fb2:	d100      	bne.n	9fb6 <_vfiprintf_r+0xb2>
    9fb4:	e091      	b.n	a0da <_vfiprintf_r+0x1d6>
    9fb6:	4b58      	ldr	r3, [pc, #352]	; (a118 <_vfiprintf_r+0x214>)
    9fb8:	2b00      	cmp	r3, #0
    9fba:	d000      	beq.n	9fbe <_vfiprintf_r+0xba>
    9fbc:	e084      	b.n	a0c8 <_vfiprintf_r+0x1c4>
    9fbe:	2207      	movs	r2, #7
    9fc0:	9b05      	ldr	r3, [sp, #20]
    9fc2:	3307      	adds	r3, #7
    9fc4:	4393      	bics	r3, r2
    9fc6:	3308      	adds	r3, #8
    9fc8:	9305      	str	r3, [sp, #20]
    9fca:	696b      	ldr	r3, [r5, #20]
    9fcc:	9a03      	ldr	r2, [sp, #12]
    9fce:	189b      	adds	r3, r3, r2
    9fd0:	616b      	str	r3, [r5, #20]
    9fd2:	9c02      	ldr	r4, [sp, #8]
    9fd4:	7823      	ldrb	r3, [r4, #0]
    9fd6:	2b00      	cmp	r3, #0
    9fd8:	d104      	bne.n	9fe4 <_vfiprintf_r+0xe0>
    9fda:	9b02      	ldr	r3, [sp, #8]
    9fdc:	1ae3      	subs	r3, r4, r3
    9fde:	9304      	str	r3, [sp, #16]
    9fe0:	d011      	beq.n	a006 <_vfiprintf_r+0x102>
    9fe2:	e003      	b.n	9fec <_vfiprintf_r+0xe8>
    9fe4:	2b25      	cmp	r3, #37	; 0x25
    9fe6:	d0f8      	beq.n	9fda <_vfiprintf_r+0xd6>
    9fe8:	3401      	adds	r4, #1
    9fea:	e7f3      	b.n	9fd4 <_vfiprintf_r+0xd0>
    9fec:	9b04      	ldr	r3, [sp, #16]
    9fee:	1c30      	adds	r0, r6, #0
    9ff0:	1c39      	adds	r1, r7, #0
    9ff2:	9a02      	ldr	r2, [sp, #8]
    9ff4:	f7ff ff73 	bl	9ede <__sfputs_r>
    9ff8:	1c43      	adds	r3, r0, #1
    9ffa:	d07b      	beq.n	a0f4 <_vfiprintf_r+0x1f0>
    9ffc:	696a      	ldr	r2, [r5, #20]
    9ffe:	9b04      	ldr	r3, [sp, #16]
    a000:	4694      	mov	ip, r2
    a002:	4463      	add	r3, ip
    a004:	616b      	str	r3, [r5, #20]
    a006:	7823      	ldrb	r3, [r4, #0]
    a008:	2b00      	cmp	r3, #0
    a00a:	d073      	beq.n	a0f4 <_vfiprintf_r+0x1f0>
    a00c:	2201      	movs	r2, #1
    a00e:	2300      	movs	r3, #0
    a010:	4252      	negs	r2, r2
    a012:	606a      	str	r2, [r5, #4]
    a014:	a902      	add	r1, sp, #8
    a016:	3254      	adds	r2, #84	; 0x54
    a018:	1852      	adds	r2, r2, r1
    a01a:	3401      	adds	r4, #1
    a01c:	602b      	str	r3, [r5, #0]
    a01e:	60eb      	str	r3, [r5, #12]
    a020:	60ab      	str	r3, [r5, #8]
    a022:	7013      	strb	r3, [r2, #0]
    a024:	65ab      	str	r3, [r5, #88]	; 0x58
    a026:	7821      	ldrb	r1, [r4, #0]
    a028:	483c      	ldr	r0, [pc, #240]	; (a11c <_vfiprintf_r+0x218>)
    a02a:	2205      	movs	r2, #5
    a02c:	f7ff fe88 	bl	9d40 <memchr>
    a030:	2800      	cmp	r0, #0
    a032:	d009      	beq.n	a048 <_vfiprintf_r+0x144>
    a034:	4b39      	ldr	r3, [pc, #228]	; (a11c <_vfiprintf_r+0x218>)
    a036:	3401      	adds	r4, #1
    a038:	1ac0      	subs	r0, r0, r3
    a03a:	2301      	movs	r3, #1
    a03c:	4083      	lsls	r3, r0
    a03e:	1c18      	adds	r0, r3, #0
    a040:	682b      	ldr	r3, [r5, #0]
    a042:	4318      	orrs	r0, r3
    a044:	6028      	str	r0, [r5, #0]
    a046:	e7ee      	b.n	a026 <_vfiprintf_r+0x122>
    a048:	682b      	ldr	r3, [r5, #0]
    a04a:	06da      	lsls	r2, r3, #27
    a04c:	d504      	bpl.n	a058 <_vfiprintf_r+0x154>
    a04e:	2253      	movs	r2, #83	; 0x53
    a050:	2120      	movs	r1, #32
    a052:	a802      	add	r0, sp, #8
    a054:	1812      	adds	r2, r2, r0
    a056:	7011      	strb	r1, [r2, #0]
    a058:	071a      	lsls	r2, r3, #28
    a05a:	d504      	bpl.n	a066 <_vfiprintf_r+0x162>
    a05c:	2253      	movs	r2, #83	; 0x53
    a05e:	212b      	movs	r1, #43	; 0x2b
    a060:	a802      	add	r0, sp, #8
    a062:	1812      	adds	r2, r2, r0
    a064:	7011      	strb	r1, [r2, #0]
    a066:	7822      	ldrb	r2, [r4, #0]
    a068:	2a2a      	cmp	r2, #42	; 0x2a
    a06a:	d100      	bne.n	a06e <_vfiprintf_r+0x16a>
    a06c:	e77c      	b.n	9f68 <_vfiprintf_r+0x64>
    a06e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a070:	e005      	b.n	a07e <_vfiprintf_r+0x17a>
    a072:	4252      	negs	r2, r2
    a074:	60ea      	str	r2, [r5, #12]
    a076:	2202      	movs	r2, #2
    a078:	4313      	orrs	r3, r2
    a07a:	602b      	str	r3, [r5, #0]
    a07c:	e77b      	b.n	9f76 <_vfiprintf_r+0x72>
    a07e:	7822      	ldrb	r2, [r4, #0]
    a080:	3a30      	subs	r2, #48	; 0x30
    a082:	2a09      	cmp	r2, #9
    a084:	d804      	bhi.n	a090 <_vfiprintf_r+0x18c>
    a086:	210a      	movs	r1, #10
    a088:	434b      	muls	r3, r1
    a08a:	3401      	adds	r4, #1
    a08c:	189b      	adds	r3, r3, r2
    a08e:	e7f6      	b.n	a07e <_vfiprintf_r+0x17a>
    a090:	9309      	str	r3, [sp, #36]	; 0x24
    a092:	e771      	b.n	9f78 <_vfiprintf_r+0x74>
    a094:	7863      	ldrb	r3, [r4, #1]
    a096:	2b2a      	cmp	r3, #42	; 0x2a
    a098:	d109      	bne.n	a0ae <_vfiprintf_r+0x1aa>
    a09a:	9b05      	ldr	r3, [sp, #20]
    a09c:	3402      	adds	r4, #2
    a09e:	1d1a      	adds	r2, r3, #4
    a0a0:	681b      	ldr	r3, [r3, #0]
    a0a2:	9205      	str	r2, [sp, #20]
    a0a4:	2b00      	cmp	r3, #0
    a0a6:	da0d      	bge.n	a0c4 <_vfiprintf_r+0x1c0>
    a0a8:	2301      	movs	r3, #1
    a0aa:	425b      	negs	r3, r3
    a0ac:	e00a      	b.n	a0c4 <_vfiprintf_r+0x1c0>
    a0ae:	2300      	movs	r3, #0
    a0b0:	3401      	adds	r4, #1
    a0b2:	7822      	ldrb	r2, [r4, #0]
    a0b4:	3a30      	subs	r2, #48	; 0x30
    a0b6:	2a09      	cmp	r2, #9
    a0b8:	d804      	bhi.n	a0c4 <_vfiprintf_r+0x1c0>
    a0ba:	210a      	movs	r1, #10
    a0bc:	434b      	muls	r3, r1
    a0be:	3401      	adds	r4, #1
    a0c0:	189b      	adds	r3, r3, r2
    a0c2:	e7f6      	b.n	a0b2 <_vfiprintf_r+0x1ae>
    a0c4:	9307      	str	r3, [sp, #28]
    a0c6:	e75b      	b.n	9f80 <_vfiprintf_r+0x7c>
    a0c8:	ab05      	add	r3, sp, #20
    a0ca:	9300      	str	r3, [sp, #0]
    a0cc:	1c30      	adds	r0, r6, #0
    a0ce:	1c29      	adds	r1, r5, #0
    a0d0:	1c3a      	adds	r2, r7, #0
    a0d2:	4b13      	ldr	r3, [pc, #76]	; (a120 <_vfiprintf_r+0x21c>)
    a0d4:	f000 f8ca 	bl	a26c <_printf_float>
    a0d8:	e007      	b.n	a0ea <_vfiprintf_r+0x1e6>
    a0da:	ab05      	add	r3, sp, #20
    a0dc:	9300      	str	r3, [sp, #0]
    a0de:	1c30      	adds	r0, r6, #0
    a0e0:	1c29      	adds	r1, r5, #0
    a0e2:	1c3a      	adds	r2, r7, #0
    a0e4:	4b0e      	ldr	r3, [pc, #56]	; (a120 <_vfiprintf_r+0x21c>)
    a0e6:	f000 fb6d 	bl	a7c4 <_printf_i>
    a0ea:	9003      	str	r0, [sp, #12]
    a0ec:	9b03      	ldr	r3, [sp, #12]
    a0ee:	3301      	adds	r3, #1
    a0f0:	d000      	beq.n	a0f4 <_vfiprintf_r+0x1f0>
    a0f2:	e76a      	b.n	9fca <_vfiprintf_r+0xc6>
    a0f4:	89bb      	ldrh	r3, [r7, #12]
    a0f6:	065b      	lsls	r3, r3, #25
    a0f8:	d500      	bpl.n	a0fc <_vfiprintf_r+0x1f8>
    a0fa:	e732      	b.n	9f62 <_vfiprintf_r+0x5e>
    a0fc:	980b      	ldr	r0, [sp, #44]	; 0x2c
    a0fe:	b01f      	add	sp, #124	; 0x7c
    a100:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a102:	46c0      	nop			; (mov r8, r8)
    a104:	0000f898 	.word	0x0000f898
    a108:	0000f8b8 	.word	0x0000f8b8
    a10c:	0000f8d8 	.word	0x0000f8d8
    a110:	0000f906 	.word	0x0000f906
    a114:	0000f90a 	.word	0x0000f90a
    a118:	0000a26d 	.word	0x0000a26d
    a11c:	0000f900 	.word	0x0000f900
    a120:	00009edf 	.word	0x00009edf

0000a124 <vfiprintf>:
    a124:	b538      	push	{r3, r4, r5, lr}
    a126:	1c05      	adds	r5, r0, #0
    a128:	1c0c      	adds	r4, r1, #0
    a12a:	1c13      	adds	r3, r2, #0
    a12c:	4a03      	ldr	r2, [pc, #12]	; (a13c <vfiprintf+0x18>)
    a12e:	1c29      	adds	r1, r5, #0
    a130:	6810      	ldr	r0, [r2, #0]
    a132:	1c22      	adds	r2, r4, #0
    a134:	f7ff fee6 	bl	9f04 <_vfiprintf_r>
    a138:	bd38      	pop	{r3, r4, r5, pc}
    a13a:	46c0      	nop			; (mov r8, r8)
    a13c:	20000134 	.word	0x20000134

0000a140 <__cvt>:
    a140:	b5f0      	push	{r4, r5, r6, r7, lr}
    a142:	b08b      	sub	sp, #44	; 0x2c
    a144:	1c14      	adds	r4, r2, #0
    a146:	1e1d      	subs	r5, r3, #0
    a148:	9912      	ldr	r1, [sp, #72]	; 0x48
    a14a:	da06      	bge.n	a15a <__cvt+0x1a>
    a14c:	2480      	movs	r4, #128	; 0x80
    a14e:	0624      	lsls	r4, r4, #24
    a150:	192b      	adds	r3, r5, r4
    a152:	1c1d      	adds	r5, r3, #0
    a154:	1c14      	adds	r4, r2, #0
    a156:	232d      	movs	r3, #45	; 0x2d
    a158:	e000      	b.n	a15c <__cvt+0x1c>
    a15a:	2300      	movs	r3, #0
    a15c:	700b      	strb	r3, [r1, #0]
    a15e:	2320      	movs	r3, #32
    a160:	9e14      	ldr	r6, [sp, #80]	; 0x50
    a162:	2203      	movs	r2, #3
    a164:	439e      	bics	r6, r3
    a166:	2e46      	cmp	r6, #70	; 0x46
    a168:	d007      	beq.n	a17a <__cvt+0x3a>
    a16a:	1c33      	adds	r3, r6, #0
    a16c:	3b45      	subs	r3, #69	; 0x45
    a16e:	4259      	negs	r1, r3
    a170:	414b      	adcs	r3, r1
    a172:	9910      	ldr	r1, [sp, #64]	; 0x40
    a174:	3a01      	subs	r2, #1
    a176:	18cb      	adds	r3, r1, r3
    a178:	9310      	str	r3, [sp, #64]	; 0x40
    a17a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a17c:	9200      	str	r2, [sp, #0]
    a17e:	9301      	str	r3, [sp, #4]
    a180:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    a182:	1c22      	adds	r2, r4, #0
    a184:	9302      	str	r3, [sp, #8]
    a186:	ab08      	add	r3, sp, #32
    a188:	9303      	str	r3, [sp, #12]
    a18a:	ab09      	add	r3, sp, #36	; 0x24
    a18c:	9304      	str	r3, [sp, #16]
    a18e:	1c2b      	adds	r3, r5, #0
    a190:	f002 faa2 	bl	c6d8 <_dtoa_r>
    a194:	1c07      	adds	r7, r0, #0
    a196:	2e47      	cmp	r6, #71	; 0x47
    a198:	d102      	bne.n	a1a0 <__cvt+0x60>
    a19a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a19c:	07db      	lsls	r3, r3, #31
    a19e:	d52c      	bpl.n	a1fa <__cvt+0xba>
    a1a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a1a2:	18fb      	adds	r3, r7, r3
    a1a4:	9307      	str	r3, [sp, #28]
    a1a6:	2e46      	cmp	r6, #70	; 0x46
    a1a8:	d114      	bne.n	a1d4 <__cvt+0x94>
    a1aa:	783b      	ldrb	r3, [r7, #0]
    a1ac:	2b30      	cmp	r3, #48	; 0x30
    a1ae:	d10c      	bne.n	a1ca <__cvt+0x8a>
    a1b0:	1c20      	adds	r0, r4, #0
    a1b2:	1c29      	adds	r1, r5, #0
    a1b4:	2200      	movs	r2, #0
    a1b6:	2300      	movs	r3, #0
    a1b8:	f7fc fb4e 	bl	6858 <__aeabi_dcmpeq>
    a1bc:	2800      	cmp	r0, #0
    a1be:	d104      	bne.n	a1ca <__cvt+0x8a>
    a1c0:	2301      	movs	r3, #1
    a1c2:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a1c4:	1a9b      	subs	r3, r3, r2
    a1c6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    a1c8:	6013      	str	r3, [r2, #0]
    a1ca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    a1cc:	9a07      	ldr	r2, [sp, #28]
    a1ce:	681b      	ldr	r3, [r3, #0]
    a1d0:	18d3      	adds	r3, r2, r3
    a1d2:	9307      	str	r3, [sp, #28]
    a1d4:	1c20      	adds	r0, r4, #0
    a1d6:	1c29      	adds	r1, r5, #0
    a1d8:	2200      	movs	r2, #0
    a1da:	2300      	movs	r3, #0
    a1dc:	f7fc fb3c 	bl	6858 <__aeabi_dcmpeq>
    a1e0:	2800      	cmp	r0, #0
    a1e2:	d001      	beq.n	a1e8 <__cvt+0xa8>
    a1e4:	9b07      	ldr	r3, [sp, #28]
    a1e6:	9309      	str	r3, [sp, #36]	; 0x24
    a1e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a1ea:	9a07      	ldr	r2, [sp, #28]
    a1ec:	4293      	cmp	r3, r2
    a1ee:	d204      	bcs.n	a1fa <__cvt+0xba>
    a1f0:	1c5a      	adds	r2, r3, #1
    a1f2:	9209      	str	r2, [sp, #36]	; 0x24
    a1f4:	2230      	movs	r2, #48	; 0x30
    a1f6:	701a      	strb	r2, [r3, #0]
    a1f8:	e7f6      	b.n	a1e8 <__cvt+0xa8>
    a1fa:	1c38      	adds	r0, r7, #0
    a1fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a1fe:	9a15      	ldr	r2, [sp, #84]	; 0x54
    a200:	1bdb      	subs	r3, r3, r7
    a202:	6013      	str	r3, [r2, #0]
    a204:	b00b      	add	sp, #44	; 0x2c
    a206:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000a208 <__exponent>:
    a208:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a20a:	232b      	movs	r3, #43	; 0x2b
    a20c:	1c07      	adds	r7, r0, #0
    a20e:	1c0c      	adds	r4, r1, #0
    a210:	7002      	strb	r2, [r0, #0]
    a212:	1c86      	adds	r6, r0, #2
    a214:	2900      	cmp	r1, #0
    a216:	da01      	bge.n	a21c <__exponent+0x14>
    a218:	232d      	movs	r3, #45	; 0x2d
    a21a:	424c      	negs	r4, r1
    a21c:	707b      	strb	r3, [r7, #1]
    a21e:	2c09      	cmp	r4, #9
    a220:	dd1c      	ble.n	a25c <__exponent+0x54>
    a222:	466b      	mov	r3, sp
    a224:	1ddd      	adds	r5, r3, #7
    a226:	1c20      	adds	r0, r4, #0
    a228:	210a      	movs	r1, #10
    a22a:	f7fc faf9 	bl	6820 <__aeabi_idivmod>
    a22e:	3d01      	subs	r5, #1
    a230:	3130      	adds	r1, #48	; 0x30
    a232:	7029      	strb	r1, [r5, #0]
    a234:	1c20      	adds	r0, r4, #0
    a236:	210a      	movs	r1, #10
    a238:	f7fc fa0c 	bl	6654 <__aeabi_idiv>
    a23c:	1e04      	subs	r4, r0, #0
    a23e:	2c09      	cmp	r4, #9
    a240:	dcf1      	bgt.n	a226 <__exponent+0x1e>
    a242:	3d01      	subs	r5, #1
    a244:	3430      	adds	r4, #48	; 0x30
    a246:	702c      	strb	r4, [r5, #0]
    a248:	466b      	mov	r3, sp
    a24a:	3307      	adds	r3, #7
    a24c:	1c30      	adds	r0, r6, #0
    a24e:	42ab      	cmp	r3, r5
    a250:	d909      	bls.n	a266 <__exponent+0x5e>
    a252:	782b      	ldrb	r3, [r5, #0]
    a254:	3501      	adds	r5, #1
    a256:	7033      	strb	r3, [r6, #0]
    a258:	3601      	adds	r6, #1
    a25a:	e7f5      	b.n	a248 <__exponent+0x40>
    a25c:	2330      	movs	r3, #48	; 0x30
    a25e:	18e4      	adds	r4, r4, r3
    a260:	7033      	strb	r3, [r6, #0]
    a262:	1cb0      	adds	r0, r6, #2
    a264:	7074      	strb	r4, [r6, #1]
    a266:	1bc0      	subs	r0, r0, r7
    a268:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

0000a26c <_printf_float>:
    a26c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a26e:	b093      	sub	sp, #76	; 0x4c
    a270:	1c0c      	adds	r4, r1, #0
    a272:	9208      	str	r2, [sp, #32]
    a274:	9309      	str	r3, [sp, #36]	; 0x24
    a276:	9e18      	ldr	r6, [sp, #96]	; 0x60
    a278:	1c05      	adds	r5, r0, #0
    a27a:	f003 fba1 	bl	d9c0 <_localeconv_r>
    a27e:	6803      	ldr	r3, [r0, #0]
    a280:	1c18      	adds	r0, r3, #0
    a282:	930b      	str	r3, [sp, #44]	; 0x2c
    a284:	f001 f8ea 	bl	b45c <strlen>
    a288:	2300      	movs	r3, #0
    a28a:	6821      	ldr	r1, [r4, #0]
    a28c:	9310      	str	r3, [sp, #64]	; 0x40
    a28e:	900c      	str	r0, [sp, #48]	; 0x30
    a290:	7e27      	ldrb	r7, [r4, #24]
    a292:	6833      	ldr	r3, [r6, #0]
    a294:	2207      	movs	r2, #7
    a296:	05c9      	lsls	r1, r1, #23
    a298:	d501      	bpl.n	a29e <_printf_float+0x32>
    a29a:	189b      	adds	r3, r3, r2
    a29c:	e000      	b.n	a2a0 <_printf_float+0x34>
    a29e:	3307      	adds	r3, #7
    a2a0:	4393      	bics	r3, r2
    a2a2:	1c1a      	adds	r2, r3, #0
    a2a4:	3208      	adds	r2, #8
    a2a6:	6032      	str	r2, [r6, #0]
    a2a8:	681a      	ldr	r2, [r3, #0]
    a2aa:	685b      	ldr	r3, [r3, #4]
    a2ac:	64a2      	str	r2, [r4, #72]	; 0x48
    a2ae:	64e3      	str	r3, [r4, #76]	; 0x4c
    a2b0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    a2b2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    a2b4:	f000 ff30 	bl	b118 <__fpclassifyd>
    a2b8:	2801      	cmp	r0, #1
    a2ba:	d118      	bne.n	a2ee <_printf_float+0x82>
    a2bc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    a2be:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    a2c0:	2200      	movs	r2, #0
    a2c2:	2300      	movs	r3, #0
    a2c4:	f7fc face 	bl	6864 <__aeabi_dcmplt>
    a2c8:	2800      	cmp	r0, #0
    a2ca:	d003      	beq.n	a2d4 <_printf_float+0x68>
    a2cc:	1c23      	adds	r3, r4, #0
    a2ce:	222d      	movs	r2, #45	; 0x2d
    a2d0:	3343      	adds	r3, #67	; 0x43
    a2d2:	701a      	strb	r2, [r3, #0]
    a2d4:	4bb6      	ldr	r3, [pc, #728]	; (a5b0 <_printf_float+0x344>)
    a2d6:	930a      	str	r3, [sp, #40]	; 0x28
    a2d8:	2f47      	cmp	r7, #71	; 0x47
    a2da:	d901      	bls.n	a2e0 <_printf_float+0x74>
    a2dc:	4bb5      	ldr	r3, [pc, #724]	; (a5b4 <_printf_float+0x348>)
    a2de:	930a      	str	r3, [sp, #40]	; 0x28
    a2e0:	2303      	movs	r3, #3
    a2e2:	6822      	ldr	r2, [r4, #0]
    a2e4:	6123      	str	r3, [r4, #16]
    a2e6:	3301      	adds	r3, #1
    a2e8:	439a      	bics	r2, r3
    a2ea:	6022      	str	r2, [r4, #0]
    a2ec:	e012      	b.n	a314 <_printf_float+0xa8>
    a2ee:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    a2f0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    a2f2:	f000 ff11 	bl	b118 <__fpclassifyd>
    a2f6:	6826      	ldr	r6, [r4, #0]
    a2f8:	2800      	cmp	r0, #0
    a2fa:	d10d      	bne.n	a318 <_printf_float+0xac>
    a2fc:	4bae      	ldr	r3, [pc, #696]	; (a5b8 <_printf_float+0x34c>)
    a2fe:	930a      	str	r3, [sp, #40]	; 0x28
    a300:	2f47      	cmp	r7, #71	; 0x47
    a302:	d901      	bls.n	a308 <_printf_float+0x9c>
    a304:	4bad      	ldr	r3, [pc, #692]	; (a5bc <_printf_float+0x350>)
    a306:	930a      	str	r3, [sp, #40]	; 0x28
    a308:	2303      	movs	r3, #3
    a30a:	1c31      	adds	r1, r6, #0
    a30c:	6123      	str	r3, [r4, #16]
    a30e:	3301      	adds	r3, #1
    a310:	4399      	bics	r1, r3
    a312:	6021      	str	r1, [r4, #0]
    a314:	2600      	movs	r6, #0
    a316:	e080      	b.n	a41a <_printf_float+0x1ae>
    a318:	2180      	movs	r1, #128	; 0x80
    a31a:	6860      	ldr	r0, [r4, #4]
    a31c:	00c9      	lsls	r1, r1, #3
    a31e:	1c43      	adds	r3, r0, #1
    a320:	d101      	bne.n	a326 <_printf_float+0xba>
    a322:	2306      	movs	r3, #6
    a324:	e009      	b.n	a33a <_printf_float+0xce>
    a326:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    a328:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    a32a:	2f67      	cmp	r7, #103	; 0x67
    a32c:	d001      	beq.n	a332 <_printf_float+0xc6>
    a32e:	2f47      	cmp	r7, #71	; 0x47
    a330:	d104      	bne.n	a33c <_printf_float+0xd0>
    a332:	2800      	cmp	r0, #0
    a334:	d000      	beq.n	a338 <_printf_float+0xcc>
    a336:	e1c0      	b.n	a6ba <_printf_float+0x44e>
    a338:	2301      	movs	r3, #1
    a33a:	6063      	str	r3, [r4, #4]
    a33c:	6863      	ldr	r3, [r4, #4]
    a33e:	4331      	orrs	r1, r6
    a340:	9300      	str	r3, [sp, #0]
    a342:	2323      	movs	r3, #35	; 0x23
    a344:	6021      	str	r1, [r4, #0]
    a346:	9101      	str	r1, [sp, #4]
    a348:	2100      	movs	r1, #0
    a34a:	aa06      	add	r2, sp, #24
    a34c:	189b      	adds	r3, r3, r2
    a34e:	9302      	str	r3, [sp, #8]
    a350:	ab0f      	add	r3, sp, #60	; 0x3c
    a352:	9303      	str	r3, [sp, #12]
    a354:	ab10      	add	r3, sp, #64	; 0x40
    a356:	9305      	str	r3, [sp, #20]
    a358:	9704      	str	r7, [sp, #16]
    a35a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    a35c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    a35e:	9106      	str	r1, [sp, #24]
    a360:	1c28      	adds	r0, r5, #0
    a362:	f7ff feed 	bl	a140 <__cvt>
    a366:	2320      	movs	r3, #32
    a368:	1c3a      	adds	r2, r7, #0
    a36a:	900a      	str	r0, [sp, #40]	; 0x28
    a36c:	439a      	bics	r2, r3
    a36e:	2a47      	cmp	r2, #71	; 0x47
    a370:	d107      	bne.n	a382 <_printf_float+0x116>
    a372:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a374:	1cda      	adds	r2, r3, #3
    a376:	db02      	blt.n	a37e <_printf_float+0x112>
    a378:	6862      	ldr	r2, [r4, #4]
    a37a:	4293      	cmp	r3, r2
    a37c:	dd2d      	ble.n	a3da <_printf_float+0x16e>
    a37e:	3f02      	subs	r7, #2
    a380:	b2ff      	uxtb	r7, r7
    a382:	990f      	ldr	r1, [sp, #60]	; 0x3c
    a384:	2f65      	cmp	r7, #101	; 0x65
    a386:	d812      	bhi.n	a3ae <_printf_float+0x142>
    a388:	1c20      	adds	r0, r4, #0
    a38a:	3901      	subs	r1, #1
    a38c:	1c3a      	adds	r2, r7, #0
    a38e:	3050      	adds	r0, #80	; 0x50
    a390:	910f      	str	r1, [sp, #60]	; 0x3c
    a392:	f7ff ff39 	bl	a208 <__exponent>
    a396:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a398:	1c06      	adds	r6, r0, #0
    a39a:	1883      	adds	r3, r0, r2
    a39c:	6123      	str	r3, [r4, #16]
    a39e:	2a01      	cmp	r2, #1
    a3a0:	dc02      	bgt.n	a3a8 <_printf_float+0x13c>
    a3a2:	6822      	ldr	r2, [r4, #0]
    a3a4:	07d2      	lsls	r2, r2, #31
    a3a6:	d52e      	bpl.n	a406 <_printf_float+0x19a>
    a3a8:	3301      	adds	r3, #1
    a3aa:	6123      	str	r3, [r4, #16]
    a3ac:	e02b      	b.n	a406 <_printf_float+0x19a>
    a3ae:	2f66      	cmp	r7, #102	; 0x66
    a3b0:	d114      	bne.n	a3dc <_printf_float+0x170>
    a3b2:	6863      	ldr	r3, [r4, #4]
    a3b4:	2900      	cmp	r1, #0
    a3b6:	dd08      	ble.n	a3ca <_printf_float+0x15e>
    a3b8:	6121      	str	r1, [r4, #16]
    a3ba:	2b00      	cmp	r3, #0
    a3bc:	d102      	bne.n	a3c4 <_printf_float+0x158>
    a3be:	6822      	ldr	r2, [r4, #0]
    a3c0:	07d2      	lsls	r2, r2, #31
    a3c2:	d51d      	bpl.n	a400 <_printf_float+0x194>
    a3c4:	3301      	adds	r3, #1
    a3c6:	18cb      	adds	r3, r1, r3
    a3c8:	e011      	b.n	a3ee <_printf_float+0x182>
    a3ca:	2b00      	cmp	r3, #0
    a3cc:	d103      	bne.n	a3d6 <_printf_float+0x16a>
    a3ce:	2201      	movs	r2, #1
    a3d0:	6821      	ldr	r1, [r4, #0]
    a3d2:	4211      	tst	r1, r2
    a3d4:	d013      	beq.n	a3fe <_printf_float+0x192>
    a3d6:	1c9a      	adds	r2, r3, #2
    a3d8:	e011      	b.n	a3fe <_printf_float+0x192>
    a3da:	2767      	movs	r7, #103	; 0x67
    a3dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a3de:	9810      	ldr	r0, [sp, #64]	; 0x40
    a3e0:	4283      	cmp	r3, r0
    a3e2:	db06      	blt.n	a3f2 <_printf_float+0x186>
    a3e4:	6822      	ldr	r2, [r4, #0]
    a3e6:	6123      	str	r3, [r4, #16]
    a3e8:	07d2      	lsls	r2, r2, #31
    a3ea:	d509      	bpl.n	a400 <_printf_float+0x194>
    a3ec:	3301      	adds	r3, #1
    a3ee:	6123      	str	r3, [r4, #16]
    a3f0:	e006      	b.n	a400 <_printf_float+0x194>
    a3f2:	2201      	movs	r2, #1
    a3f4:	2b00      	cmp	r3, #0
    a3f6:	dc01      	bgt.n	a3fc <_printf_float+0x190>
    a3f8:	2102      	movs	r1, #2
    a3fa:	1aca      	subs	r2, r1, r3
    a3fc:	1882      	adds	r2, r0, r2
    a3fe:	6122      	str	r2, [r4, #16]
    a400:	2600      	movs	r6, #0
    a402:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a404:	65a3      	str	r3, [r4, #88]	; 0x58
    a406:	2323      	movs	r3, #35	; 0x23
    a408:	aa06      	add	r2, sp, #24
    a40a:	189b      	adds	r3, r3, r2
    a40c:	781b      	ldrb	r3, [r3, #0]
    a40e:	2b00      	cmp	r3, #0
    a410:	d003      	beq.n	a41a <_printf_float+0x1ae>
    a412:	1c23      	adds	r3, r4, #0
    a414:	222d      	movs	r2, #45	; 0x2d
    a416:	3343      	adds	r3, #67	; 0x43
    a418:	701a      	strb	r2, [r3, #0]
    a41a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a41c:	1c28      	adds	r0, r5, #0
    a41e:	9300      	str	r3, [sp, #0]
    a420:	1c21      	adds	r1, r4, #0
    a422:	9b08      	ldr	r3, [sp, #32]
    a424:	aa11      	add	r2, sp, #68	; 0x44
    a426:	f000 f95f 	bl	a6e8 <_printf_common>
    a42a:	1c43      	adds	r3, r0, #1
    a42c:	d102      	bne.n	a434 <_printf_float+0x1c8>
    a42e:	2001      	movs	r0, #1
    a430:	4240      	negs	r0, r0
    a432:	e156      	b.n	a6e2 <_printf_float+0x476>
    a434:	6822      	ldr	r2, [r4, #0]
    a436:	0553      	lsls	r3, r2, #21
    a438:	d404      	bmi.n	a444 <_printf_float+0x1d8>
    a43a:	1c28      	adds	r0, r5, #0
    a43c:	9908      	ldr	r1, [sp, #32]
    a43e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a440:	6923      	ldr	r3, [r4, #16]
    a442:	e116      	b.n	a672 <_printf_float+0x406>
    a444:	2f65      	cmp	r7, #101	; 0x65
    a446:	d800      	bhi.n	a44a <_printf_float+0x1de>
    a448:	e0d4      	b.n	a5f4 <_printf_float+0x388>
    a44a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    a44c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    a44e:	2200      	movs	r2, #0
    a450:	2300      	movs	r3, #0
    a452:	f7fc fa01 	bl	6858 <__aeabi_dcmpeq>
    a456:	2800      	cmp	r0, #0
    a458:	d02b      	beq.n	a4b2 <_printf_float+0x246>
    a45a:	2301      	movs	r3, #1
    a45c:	1c28      	adds	r0, r5, #0
    a45e:	9908      	ldr	r1, [sp, #32]
    a460:	4a57      	ldr	r2, [pc, #348]	; (a5c0 <_printf_float+0x354>)
    a462:	9e09      	ldr	r6, [sp, #36]	; 0x24
    a464:	47b0      	blx	r6
    a466:	1c43      	adds	r3, r0, #1
    a468:	d0e1      	beq.n	a42e <_printf_float+0x1c2>
    a46a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a46c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a46e:	4293      	cmp	r3, r2
    a470:	db07      	blt.n	a482 <_printf_float+0x216>
    a472:	6823      	ldr	r3, [r4, #0]
    a474:	07db      	lsls	r3, r3, #31
    a476:	d404      	bmi.n	a482 <_printf_float+0x216>
    a478:	6823      	ldr	r3, [r4, #0]
    a47a:	079b      	lsls	r3, r3, #30
    a47c:	d500      	bpl.n	a480 <_printf_float+0x214>
    a47e:	e11a      	b.n	a6b6 <_printf_float+0x44a>
    a480:	e113      	b.n	a6aa <_printf_float+0x43e>
    a482:	9e09      	ldr	r6, [sp, #36]	; 0x24
    a484:	1c28      	adds	r0, r5, #0
    a486:	9908      	ldr	r1, [sp, #32]
    a488:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a48a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a48c:	47b0      	blx	r6
    a48e:	2600      	movs	r6, #0
    a490:	1c43      	adds	r3, r0, #1
    a492:	d0cc      	beq.n	a42e <_printf_float+0x1c2>
    a494:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a496:	3b01      	subs	r3, #1
    a498:	429e      	cmp	r6, r3
    a49a:	daed      	bge.n	a478 <_printf_float+0x20c>
    a49c:	1c22      	adds	r2, r4, #0
    a49e:	2301      	movs	r3, #1
    a4a0:	1c28      	adds	r0, r5, #0
    a4a2:	9908      	ldr	r1, [sp, #32]
    a4a4:	321a      	adds	r2, #26
    a4a6:	9f09      	ldr	r7, [sp, #36]	; 0x24
    a4a8:	47b8      	blx	r7
    a4aa:	1c43      	adds	r3, r0, #1
    a4ac:	d0bf      	beq.n	a42e <_printf_float+0x1c2>
    a4ae:	3601      	adds	r6, #1
    a4b0:	e7f0      	b.n	a494 <_printf_float+0x228>
    a4b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a4b4:	2b00      	cmp	r3, #0
    a4b6:	dc2b      	bgt.n	a510 <_printf_float+0x2a4>
    a4b8:	2301      	movs	r3, #1
    a4ba:	1c28      	adds	r0, r5, #0
    a4bc:	9908      	ldr	r1, [sp, #32]
    a4be:	4a40      	ldr	r2, [pc, #256]	; (a5c0 <_printf_float+0x354>)
    a4c0:	9e09      	ldr	r6, [sp, #36]	; 0x24
    a4c2:	47b0      	blx	r6
    a4c4:	1c43      	adds	r3, r0, #1
    a4c6:	d0b2      	beq.n	a42e <_printf_float+0x1c2>
    a4c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a4ca:	2b00      	cmp	r3, #0
    a4cc:	d105      	bne.n	a4da <_printf_float+0x26e>
    a4ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a4d0:	2b00      	cmp	r3, #0
    a4d2:	d102      	bne.n	a4da <_printf_float+0x26e>
    a4d4:	6823      	ldr	r3, [r4, #0]
    a4d6:	07db      	lsls	r3, r3, #31
    a4d8:	d5ce      	bpl.n	a478 <_printf_float+0x20c>
    a4da:	9e09      	ldr	r6, [sp, #36]	; 0x24
    a4dc:	1c28      	adds	r0, r5, #0
    a4de:	9908      	ldr	r1, [sp, #32]
    a4e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a4e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a4e4:	47b0      	blx	r6
    a4e6:	2600      	movs	r6, #0
    a4e8:	1c43      	adds	r3, r0, #1
    a4ea:	d0a0      	beq.n	a42e <_printf_float+0x1c2>
    a4ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a4ee:	1c28      	adds	r0, r5, #0
    a4f0:	425b      	negs	r3, r3
    a4f2:	9908      	ldr	r1, [sp, #32]
    a4f4:	429e      	cmp	r6, r3
    a4f6:	da08      	bge.n	a50a <_printf_float+0x29e>
    a4f8:	1c22      	adds	r2, r4, #0
    a4fa:	2301      	movs	r3, #1
    a4fc:	321a      	adds	r2, #26
    a4fe:	9f09      	ldr	r7, [sp, #36]	; 0x24
    a500:	47b8      	blx	r7
    a502:	1c43      	adds	r3, r0, #1
    a504:	d093      	beq.n	a42e <_printf_float+0x1c2>
    a506:	3601      	adds	r6, #1
    a508:	e7f0      	b.n	a4ec <_printf_float+0x280>
    a50a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a50c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a50e:	e0b0      	b.n	a672 <_printf_float+0x406>
    a510:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a512:	6da6      	ldr	r6, [r4, #88]	; 0x58
    a514:	429e      	cmp	r6, r3
    a516:	dd00      	ble.n	a51a <_printf_float+0x2ae>
    a518:	1c1e      	adds	r6, r3, #0
    a51a:	2e00      	cmp	r6, #0
    a51c:	dc01      	bgt.n	a522 <_printf_float+0x2b6>
    a51e:	2300      	movs	r3, #0
    a520:	e014      	b.n	a54c <_printf_float+0x2e0>
    a522:	1c33      	adds	r3, r6, #0
    a524:	1c28      	adds	r0, r5, #0
    a526:	9908      	ldr	r1, [sp, #32]
    a528:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a52a:	9f09      	ldr	r7, [sp, #36]	; 0x24
    a52c:	47b8      	blx	r7
    a52e:	1c43      	adds	r3, r0, #1
    a530:	d1f5      	bne.n	a51e <_printf_float+0x2b2>
    a532:	e77c      	b.n	a42e <_printf_float+0x1c2>
    a534:	1c22      	adds	r2, r4, #0
    a536:	2301      	movs	r3, #1
    a538:	1c28      	adds	r0, r5, #0
    a53a:	9908      	ldr	r1, [sp, #32]
    a53c:	321a      	adds	r2, #26
    a53e:	9f09      	ldr	r7, [sp, #36]	; 0x24
    a540:	47b8      	blx	r7
    a542:	1c43      	adds	r3, r0, #1
    a544:	d100      	bne.n	a548 <_printf_float+0x2dc>
    a546:	e772      	b.n	a42e <_printf_float+0x1c2>
    a548:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a54a:	3301      	adds	r3, #1
    a54c:	930d      	str	r3, [sp, #52]	; 0x34
    a54e:	43f3      	mvns	r3, r6
    a550:	6da2      	ldr	r2, [r4, #88]	; 0x58
    a552:	17db      	asrs	r3, r3, #31
    a554:	990d      	ldr	r1, [sp, #52]	; 0x34
    a556:	4033      	ands	r3, r6
    a558:	1ad3      	subs	r3, r2, r3
    a55a:	4299      	cmp	r1, r3
    a55c:	dbea      	blt.n	a534 <_printf_float+0x2c8>
    a55e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a560:	189e      	adds	r6, r3, r2
    a562:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a564:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a566:	4293      	cmp	r3, r2
    a568:	db0e      	blt.n	a588 <_printf_float+0x31c>
    a56a:	6823      	ldr	r3, [r4, #0]
    a56c:	07db      	lsls	r3, r3, #31
    a56e:	d40b      	bmi.n	a588 <_printf_float+0x31c>
    a570:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a572:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a574:	18d7      	adds	r7, r2, r3
    a576:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    a578:	1bbf      	subs	r7, r7, r6
    a57a:	1a9b      	subs	r3, r3, r2
    a57c:	429f      	cmp	r7, r3
    a57e:	dd00      	ble.n	a582 <_printf_float+0x316>
    a580:	1c1f      	adds	r7, r3, #0
    a582:	2f00      	cmp	r7, #0
    a584:	dc09      	bgt.n	a59a <_printf_float+0x32e>
    a586:	e011      	b.n	a5ac <_printf_float+0x340>
    a588:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a58a:	1c28      	adds	r0, r5, #0
    a58c:	9908      	ldr	r1, [sp, #32]
    a58e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a590:	9f09      	ldr	r7, [sp, #36]	; 0x24
    a592:	47b8      	blx	r7
    a594:	1c43      	adds	r3, r0, #1
    a596:	d1eb      	bne.n	a570 <_printf_float+0x304>
    a598:	e749      	b.n	a42e <_printf_float+0x1c2>
    a59a:	1c32      	adds	r2, r6, #0
    a59c:	1c3b      	adds	r3, r7, #0
    a59e:	1c28      	adds	r0, r5, #0
    a5a0:	9908      	ldr	r1, [sp, #32]
    a5a2:	9e09      	ldr	r6, [sp, #36]	; 0x24
    a5a4:	47b0      	blx	r6
    a5a6:	1c43      	adds	r3, r0, #1
    a5a8:	d100      	bne.n	a5ac <_printf_float+0x340>
    a5aa:	e740      	b.n	a42e <_printf_float+0x1c2>
    a5ac:	2300      	movs	r3, #0
    a5ae:	e015      	b.n	a5dc <_printf_float+0x370>
    a5b0:	0000f911 	.word	0x0000f911
    a5b4:	0000f915 	.word	0x0000f915
    a5b8:	0000f919 	.word	0x0000f919
    a5bc:	0000f91d 	.word	0x0000f91d
    a5c0:	0000f96a 	.word	0x0000f96a
    a5c4:	1c22      	adds	r2, r4, #0
    a5c6:	2301      	movs	r3, #1
    a5c8:	1c28      	adds	r0, r5, #0
    a5ca:	9908      	ldr	r1, [sp, #32]
    a5cc:	321a      	adds	r2, #26
    a5ce:	9e09      	ldr	r6, [sp, #36]	; 0x24
    a5d0:	47b0      	blx	r6
    a5d2:	1c43      	adds	r3, r0, #1
    a5d4:	d100      	bne.n	a5d8 <_printf_float+0x36c>
    a5d6:	e72a      	b.n	a42e <_printf_float+0x1c2>
    a5d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a5da:	3301      	adds	r3, #1
    a5dc:	930a      	str	r3, [sp, #40]	; 0x28
    a5de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    a5e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a5e2:	1a9a      	subs	r2, r3, r2
    a5e4:	43fb      	mvns	r3, r7
    a5e6:	17db      	asrs	r3, r3, #31
    a5e8:	403b      	ands	r3, r7
    a5ea:	1ad3      	subs	r3, r2, r3
    a5ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a5ee:	429a      	cmp	r2, r3
    a5f0:	dbe8      	blt.n	a5c4 <_printf_float+0x358>
    a5f2:	e741      	b.n	a478 <_printf_float+0x20c>
    a5f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a5f6:	1c28      	adds	r0, r5, #0
    a5f8:	9908      	ldr	r1, [sp, #32]
    a5fa:	2b01      	cmp	r3, #1
    a5fc:	dc02      	bgt.n	a604 <_printf_float+0x398>
    a5fe:	2301      	movs	r3, #1
    a600:	421a      	tst	r2, r3
    a602:	d03c      	beq.n	a67e <_printf_float+0x412>
    a604:	2301      	movs	r3, #1
    a606:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a608:	9f09      	ldr	r7, [sp, #36]	; 0x24
    a60a:	47b8      	blx	r7
    a60c:	1c43      	adds	r3, r0, #1
    a60e:	d100      	bne.n	a612 <_printf_float+0x3a6>
    a610:	e70d      	b.n	a42e <_printf_float+0x1c2>
    a612:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a614:	1c28      	adds	r0, r5, #0
    a616:	9908      	ldr	r1, [sp, #32]
    a618:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a61a:	9f09      	ldr	r7, [sp, #36]	; 0x24
    a61c:	47b8      	blx	r7
    a61e:	1c43      	adds	r3, r0, #1
    a620:	d100      	bne.n	a624 <_printf_float+0x3b8>
    a622:	e704      	b.n	a42e <_printf_float+0x1c2>
    a624:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    a626:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    a628:	2300      	movs	r3, #0
    a62a:	2200      	movs	r2, #0
    a62c:	f7fc f914 	bl	6858 <__aeabi_dcmpeq>
    a630:	2300      	movs	r3, #0
    a632:	2800      	cmp	r0, #0
    a634:	d112      	bne.n	a65c <_printf_float+0x3f0>
    a636:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a638:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a63a:	3201      	adds	r2, #1
    a63c:	3b01      	subs	r3, #1
    a63e:	1c28      	adds	r0, r5, #0
    a640:	9908      	ldr	r1, [sp, #32]
    a642:	e01d      	b.n	a680 <_printf_float+0x414>
    a644:	1c22      	adds	r2, r4, #0
    a646:	2301      	movs	r3, #1
    a648:	1c28      	adds	r0, r5, #0
    a64a:	9908      	ldr	r1, [sp, #32]
    a64c:	321a      	adds	r2, #26
    a64e:	9f09      	ldr	r7, [sp, #36]	; 0x24
    a650:	47b8      	blx	r7
    a652:	1c43      	adds	r3, r0, #1
    a654:	d100      	bne.n	a658 <_printf_float+0x3ec>
    a656:	e6ea      	b.n	a42e <_printf_float+0x1c2>
    a658:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a65a:	3301      	adds	r3, #1
    a65c:	930a      	str	r3, [sp, #40]	; 0x28
    a65e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a660:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a662:	3b01      	subs	r3, #1
    a664:	429a      	cmp	r2, r3
    a666:	dbed      	blt.n	a644 <_printf_float+0x3d8>
    a668:	1c22      	adds	r2, r4, #0
    a66a:	1c28      	adds	r0, r5, #0
    a66c:	1c33      	adds	r3, r6, #0
    a66e:	9908      	ldr	r1, [sp, #32]
    a670:	3250      	adds	r2, #80	; 0x50
    a672:	9e09      	ldr	r6, [sp, #36]	; 0x24
    a674:	47b0      	blx	r6
    a676:	1c43      	adds	r3, r0, #1
    a678:	d000      	beq.n	a67c <_printf_float+0x410>
    a67a:	e6fd      	b.n	a478 <_printf_float+0x20c>
    a67c:	e6d7      	b.n	a42e <_printf_float+0x1c2>
    a67e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a680:	9f09      	ldr	r7, [sp, #36]	; 0x24
    a682:	47b8      	blx	r7
    a684:	1c43      	adds	r3, r0, #1
    a686:	d1ef      	bne.n	a668 <_printf_float+0x3fc>
    a688:	e6d1      	b.n	a42e <_printf_float+0x1c2>
    a68a:	1c22      	adds	r2, r4, #0
    a68c:	2301      	movs	r3, #1
    a68e:	1c28      	adds	r0, r5, #0
    a690:	9908      	ldr	r1, [sp, #32]
    a692:	3219      	adds	r2, #25
    a694:	9f09      	ldr	r7, [sp, #36]	; 0x24
    a696:	47b8      	blx	r7
    a698:	1c43      	adds	r3, r0, #1
    a69a:	d100      	bne.n	a69e <_printf_float+0x432>
    a69c:	e6c7      	b.n	a42e <_printf_float+0x1c2>
    a69e:	3601      	adds	r6, #1
    a6a0:	68e3      	ldr	r3, [r4, #12]
    a6a2:	9a11      	ldr	r2, [sp, #68]	; 0x44
    a6a4:	1a9b      	subs	r3, r3, r2
    a6a6:	429e      	cmp	r6, r3
    a6a8:	dbef      	blt.n	a68a <_printf_float+0x41e>
    a6aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a6ac:	68e0      	ldr	r0, [r4, #12]
    a6ae:	4298      	cmp	r0, r3
    a6b0:	da17      	bge.n	a6e2 <_printf_float+0x476>
    a6b2:	1c18      	adds	r0, r3, #0
    a6b4:	e015      	b.n	a6e2 <_printf_float+0x476>
    a6b6:	2600      	movs	r6, #0
    a6b8:	e7f2      	b.n	a6a0 <_printf_float+0x434>
    a6ba:	4331      	orrs	r1, r6
    a6bc:	6021      	str	r1, [r4, #0]
    a6be:	9101      	str	r1, [sp, #4]
    a6c0:	2123      	movs	r1, #35	; 0x23
    a6c2:	9000      	str	r0, [sp, #0]
    a6c4:	a806      	add	r0, sp, #24
    a6c6:	1809      	adds	r1, r1, r0
    a6c8:	9102      	str	r1, [sp, #8]
    a6ca:	a90f      	add	r1, sp, #60	; 0x3c
    a6cc:	9103      	str	r1, [sp, #12]
    a6ce:	a910      	add	r1, sp, #64	; 0x40
    a6d0:	9105      	str	r1, [sp, #20]
    a6d2:	2100      	movs	r1, #0
    a6d4:	9704      	str	r7, [sp, #16]
    a6d6:	9106      	str	r1, [sp, #24]
    a6d8:	1c28      	adds	r0, r5, #0
    a6da:	f7ff fd31 	bl	a140 <__cvt>
    a6de:	900a      	str	r0, [sp, #40]	; 0x28
    a6e0:	e647      	b.n	a372 <_printf_float+0x106>
    a6e2:	b013      	add	sp, #76	; 0x4c
    a6e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a6e6:	46c0      	nop			; (mov r8, r8)

0000a6e8 <_printf_common>:
    a6e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a6ea:	1c17      	adds	r7, r2, #0
    a6ec:	9301      	str	r3, [sp, #4]
    a6ee:	690a      	ldr	r2, [r1, #16]
    a6f0:	688b      	ldr	r3, [r1, #8]
    a6f2:	9000      	str	r0, [sp, #0]
    a6f4:	1c0c      	adds	r4, r1, #0
    a6f6:	4293      	cmp	r3, r2
    a6f8:	da00      	bge.n	a6fc <_printf_common+0x14>
    a6fa:	1c13      	adds	r3, r2, #0
    a6fc:	1c22      	adds	r2, r4, #0
    a6fe:	603b      	str	r3, [r7, #0]
    a700:	3243      	adds	r2, #67	; 0x43
    a702:	7812      	ldrb	r2, [r2, #0]
    a704:	2a00      	cmp	r2, #0
    a706:	d001      	beq.n	a70c <_printf_common+0x24>
    a708:	3301      	adds	r3, #1
    a70a:	603b      	str	r3, [r7, #0]
    a70c:	6823      	ldr	r3, [r4, #0]
    a70e:	069b      	lsls	r3, r3, #26
    a710:	d502      	bpl.n	a718 <_printf_common+0x30>
    a712:	683b      	ldr	r3, [r7, #0]
    a714:	3302      	adds	r3, #2
    a716:	603b      	str	r3, [r7, #0]
    a718:	2506      	movs	r5, #6
    a71a:	6823      	ldr	r3, [r4, #0]
    a71c:	401d      	ands	r5, r3
    a71e:	d01e      	beq.n	a75e <_printf_common+0x76>
    a720:	1c23      	adds	r3, r4, #0
    a722:	3343      	adds	r3, #67	; 0x43
    a724:	781b      	ldrb	r3, [r3, #0]
    a726:	1e5a      	subs	r2, r3, #1
    a728:	4193      	sbcs	r3, r2
    a72a:	6822      	ldr	r2, [r4, #0]
    a72c:	0692      	lsls	r2, r2, #26
    a72e:	d51c      	bpl.n	a76a <_printf_common+0x82>
    a730:	2030      	movs	r0, #48	; 0x30
    a732:	18e1      	adds	r1, r4, r3
    a734:	3140      	adds	r1, #64	; 0x40
    a736:	70c8      	strb	r0, [r1, #3]
    a738:	1c21      	adds	r1, r4, #0
    a73a:	1c5a      	adds	r2, r3, #1
    a73c:	3145      	adds	r1, #69	; 0x45
    a73e:	7809      	ldrb	r1, [r1, #0]
    a740:	18a2      	adds	r2, r4, r2
    a742:	3240      	adds	r2, #64	; 0x40
    a744:	3302      	adds	r3, #2
    a746:	70d1      	strb	r1, [r2, #3]
    a748:	e00f      	b.n	a76a <_printf_common+0x82>
    a74a:	1c22      	adds	r2, r4, #0
    a74c:	2301      	movs	r3, #1
    a74e:	9800      	ldr	r0, [sp, #0]
    a750:	9901      	ldr	r1, [sp, #4]
    a752:	3219      	adds	r2, #25
    a754:	9e08      	ldr	r6, [sp, #32]
    a756:	47b0      	blx	r6
    a758:	1c43      	adds	r3, r0, #1
    a75a:	d00e      	beq.n	a77a <_printf_common+0x92>
    a75c:	3501      	adds	r5, #1
    a75e:	68e3      	ldr	r3, [r4, #12]
    a760:	683a      	ldr	r2, [r7, #0]
    a762:	1a9b      	subs	r3, r3, r2
    a764:	429d      	cmp	r5, r3
    a766:	dbf0      	blt.n	a74a <_printf_common+0x62>
    a768:	e7da      	b.n	a720 <_printf_common+0x38>
    a76a:	1c22      	adds	r2, r4, #0
    a76c:	9800      	ldr	r0, [sp, #0]
    a76e:	9901      	ldr	r1, [sp, #4]
    a770:	3243      	adds	r2, #67	; 0x43
    a772:	9d08      	ldr	r5, [sp, #32]
    a774:	47a8      	blx	r5
    a776:	1c43      	adds	r3, r0, #1
    a778:	d102      	bne.n	a780 <_printf_common+0x98>
    a77a:	2001      	movs	r0, #1
    a77c:	4240      	negs	r0, r0
    a77e:	e020      	b.n	a7c2 <_printf_common+0xda>
    a780:	2306      	movs	r3, #6
    a782:	6820      	ldr	r0, [r4, #0]
    a784:	68e1      	ldr	r1, [r4, #12]
    a786:	683a      	ldr	r2, [r7, #0]
    a788:	4003      	ands	r3, r0
    a78a:	2500      	movs	r5, #0
    a78c:	2b04      	cmp	r3, #4
    a78e:	d103      	bne.n	a798 <_printf_common+0xb0>
    a790:	1a8d      	subs	r5, r1, r2
    a792:	43eb      	mvns	r3, r5
    a794:	17db      	asrs	r3, r3, #31
    a796:	401d      	ands	r5, r3
    a798:	68a3      	ldr	r3, [r4, #8]
    a79a:	6922      	ldr	r2, [r4, #16]
    a79c:	4293      	cmp	r3, r2
    a79e:	dd01      	ble.n	a7a4 <_printf_common+0xbc>
    a7a0:	1a9b      	subs	r3, r3, r2
    a7a2:	18ed      	adds	r5, r5, r3
    a7a4:	2700      	movs	r7, #0
    a7a6:	42af      	cmp	r7, r5
    a7a8:	da0a      	bge.n	a7c0 <_printf_common+0xd8>
    a7aa:	1c22      	adds	r2, r4, #0
    a7ac:	2301      	movs	r3, #1
    a7ae:	9800      	ldr	r0, [sp, #0]
    a7b0:	9901      	ldr	r1, [sp, #4]
    a7b2:	321a      	adds	r2, #26
    a7b4:	9e08      	ldr	r6, [sp, #32]
    a7b6:	47b0      	blx	r6
    a7b8:	1c43      	adds	r3, r0, #1
    a7ba:	d0de      	beq.n	a77a <_printf_common+0x92>
    a7bc:	3701      	adds	r7, #1
    a7be:	e7f2      	b.n	a7a6 <_printf_common+0xbe>
    a7c0:	2000      	movs	r0, #0
    a7c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000a7c4 <_printf_i>:
    a7c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    a7c6:	b08b      	sub	sp, #44	; 0x2c
    a7c8:	9206      	str	r2, [sp, #24]
    a7ca:	1c0a      	adds	r2, r1, #0
    a7cc:	3243      	adds	r2, #67	; 0x43
    a7ce:	9307      	str	r3, [sp, #28]
    a7d0:	9005      	str	r0, [sp, #20]
    a7d2:	9204      	str	r2, [sp, #16]
    a7d4:	7e0a      	ldrb	r2, [r1, #24]
    a7d6:	1c0c      	adds	r4, r1, #0
    a7d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a7da:	2a6e      	cmp	r2, #110	; 0x6e
    a7dc:	d100      	bne.n	a7e0 <_printf_i+0x1c>
    a7de:	e0a8      	b.n	a932 <_printf_i+0x16e>
    a7e0:	d811      	bhi.n	a806 <_printf_i+0x42>
    a7e2:	2a63      	cmp	r2, #99	; 0x63
    a7e4:	d022      	beq.n	a82c <_printf_i+0x68>
    a7e6:	d809      	bhi.n	a7fc <_printf_i+0x38>
    a7e8:	2a00      	cmp	r2, #0
    a7ea:	d100      	bne.n	a7ee <_printf_i+0x2a>
    a7ec:	e0b2      	b.n	a954 <_printf_i+0x190>
    a7ee:	2a58      	cmp	r2, #88	; 0x58
    a7f0:	d000      	beq.n	a7f4 <_printf_i+0x30>
    a7f2:	e0c2      	b.n	a97a <_printf_i+0x1b6>
    a7f4:	3145      	adds	r1, #69	; 0x45
    a7f6:	700a      	strb	r2, [r1, #0]
    a7f8:	4a7c      	ldr	r2, [pc, #496]	; (a9ec <_printf_i+0x228>)
    a7fa:	e04f      	b.n	a89c <_printf_i+0xd8>
    a7fc:	2a64      	cmp	r2, #100	; 0x64
    a7fe:	d01d      	beq.n	a83c <_printf_i+0x78>
    a800:	2a69      	cmp	r2, #105	; 0x69
    a802:	d01b      	beq.n	a83c <_printf_i+0x78>
    a804:	e0b9      	b.n	a97a <_printf_i+0x1b6>
    a806:	2a73      	cmp	r2, #115	; 0x73
    a808:	d100      	bne.n	a80c <_printf_i+0x48>
    a80a:	e0a7      	b.n	a95c <_printf_i+0x198>
    a80c:	d809      	bhi.n	a822 <_printf_i+0x5e>
    a80e:	2a6f      	cmp	r2, #111	; 0x6f
    a810:	d029      	beq.n	a866 <_printf_i+0xa2>
    a812:	2a70      	cmp	r2, #112	; 0x70
    a814:	d000      	beq.n	a818 <_printf_i+0x54>
    a816:	e0b0      	b.n	a97a <_printf_i+0x1b6>
    a818:	2220      	movs	r2, #32
    a81a:	6809      	ldr	r1, [r1, #0]
    a81c:	430a      	orrs	r2, r1
    a81e:	6022      	str	r2, [r4, #0]
    a820:	e037      	b.n	a892 <_printf_i+0xce>
    a822:	2a75      	cmp	r2, #117	; 0x75
    a824:	d01f      	beq.n	a866 <_printf_i+0xa2>
    a826:	2a78      	cmp	r2, #120	; 0x78
    a828:	d033      	beq.n	a892 <_printf_i+0xce>
    a82a:	e0a6      	b.n	a97a <_printf_i+0x1b6>
    a82c:	1c0e      	adds	r6, r1, #0
    a82e:	681a      	ldr	r2, [r3, #0]
    a830:	3642      	adds	r6, #66	; 0x42
    a832:	1d11      	adds	r1, r2, #4
    a834:	6019      	str	r1, [r3, #0]
    a836:	6813      	ldr	r3, [r2, #0]
    a838:	7033      	strb	r3, [r6, #0]
    a83a:	e0a1      	b.n	a980 <_printf_i+0x1bc>
    a83c:	6821      	ldr	r1, [r4, #0]
    a83e:	681a      	ldr	r2, [r3, #0]
    a840:	0608      	lsls	r0, r1, #24
    a842:	d406      	bmi.n	a852 <_printf_i+0x8e>
    a844:	0649      	lsls	r1, r1, #25
    a846:	d504      	bpl.n	a852 <_printf_i+0x8e>
    a848:	1d11      	adds	r1, r2, #4
    a84a:	6019      	str	r1, [r3, #0]
    a84c:	2300      	movs	r3, #0
    a84e:	5ed5      	ldrsh	r5, [r2, r3]
    a850:	e002      	b.n	a858 <_printf_i+0x94>
    a852:	1d11      	adds	r1, r2, #4
    a854:	6019      	str	r1, [r3, #0]
    a856:	6815      	ldr	r5, [r2, #0]
    a858:	2d00      	cmp	r5, #0
    a85a:	da3b      	bge.n	a8d4 <_printf_i+0x110>
    a85c:	232d      	movs	r3, #45	; 0x2d
    a85e:	9a04      	ldr	r2, [sp, #16]
    a860:	426d      	negs	r5, r5
    a862:	7013      	strb	r3, [r2, #0]
    a864:	e036      	b.n	a8d4 <_printf_i+0x110>
    a866:	6821      	ldr	r1, [r4, #0]
    a868:	681a      	ldr	r2, [r3, #0]
    a86a:	0608      	lsls	r0, r1, #24
    a86c:	d406      	bmi.n	a87c <_printf_i+0xb8>
    a86e:	0649      	lsls	r1, r1, #25
    a870:	d504      	bpl.n	a87c <_printf_i+0xb8>
    a872:	6815      	ldr	r5, [r2, #0]
    a874:	1d11      	adds	r1, r2, #4
    a876:	6019      	str	r1, [r3, #0]
    a878:	b2ad      	uxth	r5, r5
    a87a:	e002      	b.n	a882 <_printf_i+0xbe>
    a87c:	1d11      	adds	r1, r2, #4
    a87e:	6019      	str	r1, [r3, #0]
    a880:	6815      	ldr	r5, [r2, #0]
    a882:	4b5a      	ldr	r3, [pc, #360]	; (a9ec <_printf_i+0x228>)
    a884:	7e22      	ldrb	r2, [r4, #24]
    a886:	9303      	str	r3, [sp, #12]
    a888:	270a      	movs	r7, #10
    a88a:	2a6f      	cmp	r2, #111	; 0x6f
    a88c:	d11d      	bne.n	a8ca <_printf_i+0x106>
    a88e:	2708      	movs	r7, #8
    a890:	e01b      	b.n	a8ca <_printf_i+0x106>
    a892:	1c22      	adds	r2, r4, #0
    a894:	2178      	movs	r1, #120	; 0x78
    a896:	3245      	adds	r2, #69	; 0x45
    a898:	7011      	strb	r1, [r2, #0]
    a89a:	4a55      	ldr	r2, [pc, #340]	; (a9f0 <_printf_i+0x22c>)
    a89c:	6819      	ldr	r1, [r3, #0]
    a89e:	9203      	str	r2, [sp, #12]
    a8a0:	1d08      	adds	r0, r1, #4
    a8a2:	6822      	ldr	r2, [r4, #0]
    a8a4:	6018      	str	r0, [r3, #0]
    a8a6:	680d      	ldr	r5, [r1, #0]
    a8a8:	0610      	lsls	r0, r2, #24
    a8aa:	d402      	bmi.n	a8b2 <_printf_i+0xee>
    a8ac:	0650      	lsls	r0, r2, #25
    a8ae:	d500      	bpl.n	a8b2 <_printf_i+0xee>
    a8b0:	b2ad      	uxth	r5, r5
    a8b2:	07d3      	lsls	r3, r2, #31
    a8b4:	d502      	bpl.n	a8bc <_printf_i+0xf8>
    a8b6:	2320      	movs	r3, #32
    a8b8:	431a      	orrs	r2, r3
    a8ba:	6022      	str	r2, [r4, #0]
    a8bc:	2710      	movs	r7, #16
    a8be:	2d00      	cmp	r5, #0
    a8c0:	d103      	bne.n	a8ca <_printf_i+0x106>
    a8c2:	2320      	movs	r3, #32
    a8c4:	6822      	ldr	r2, [r4, #0]
    a8c6:	439a      	bics	r2, r3
    a8c8:	6022      	str	r2, [r4, #0]
    a8ca:	1c23      	adds	r3, r4, #0
    a8cc:	2200      	movs	r2, #0
    a8ce:	3343      	adds	r3, #67	; 0x43
    a8d0:	701a      	strb	r2, [r3, #0]
    a8d2:	e002      	b.n	a8da <_printf_i+0x116>
    a8d4:	270a      	movs	r7, #10
    a8d6:	4b45      	ldr	r3, [pc, #276]	; (a9ec <_printf_i+0x228>)
    a8d8:	9303      	str	r3, [sp, #12]
    a8da:	6863      	ldr	r3, [r4, #4]
    a8dc:	60a3      	str	r3, [r4, #8]
    a8de:	2b00      	cmp	r3, #0
    a8e0:	db03      	blt.n	a8ea <_printf_i+0x126>
    a8e2:	2204      	movs	r2, #4
    a8e4:	6821      	ldr	r1, [r4, #0]
    a8e6:	4391      	bics	r1, r2
    a8e8:	6021      	str	r1, [r4, #0]
    a8ea:	2d00      	cmp	r5, #0
    a8ec:	d102      	bne.n	a8f4 <_printf_i+0x130>
    a8ee:	9e04      	ldr	r6, [sp, #16]
    a8f0:	2b00      	cmp	r3, #0
    a8f2:	d00e      	beq.n	a912 <_printf_i+0x14e>
    a8f4:	9e04      	ldr	r6, [sp, #16]
    a8f6:	1c28      	adds	r0, r5, #0
    a8f8:	1c39      	adds	r1, r7, #0
    a8fa:	f7fb fea1 	bl	6640 <__aeabi_uidivmod>
    a8fe:	9b03      	ldr	r3, [sp, #12]
    a900:	3e01      	subs	r6, #1
    a902:	5c5b      	ldrb	r3, [r3, r1]
    a904:	1c28      	adds	r0, r5, #0
    a906:	7033      	strb	r3, [r6, #0]
    a908:	1c39      	adds	r1, r7, #0
    a90a:	f7fb fe13 	bl	6534 <__aeabi_uidiv>
    a90e:	1e05      	subs	r5, r0, #0
    a910:	d1f1      	bne.n	a8f6 <_printf_i+0x132>
    a912:	2f08      	cmp	r7, #8
    a914:	d109      	bne.n	a92a <_printf_i+0x166>
    a916:	6823      	ldr	r3, [r4, #0]
    a918:	07db      	lsls	r3, r3, #31
    a91a:	d506      	bpl.n	a92a <_printf_i+0x166>
    a91c:	6863      	ldr	r3, [r4, #4]
    a91e:	6922      	ldr	r2, [r4, #16]
    a920:	4293      	cmp	r3, r2
    a922:	dc02      	bgt.n	a92a <_printf_i+0x166>
    a924:	2330      	movs	r3, #48	; 0x30
    a926:	3e01      	subs	r6, #1
    a928:	7033      	strb	r3, [r6, #0]
    a92a:	9b04      	ldr	r3, [sp, #16]
    a92c:	1b9b      	subs	r3, r3, r6
    a92e:	6123      	str	r3, [r4, #16]
    a930:	e02b      	b.n	a98a <_printf_i+0x1c6>
    a932:	6809      	ldr	r1, [r1, #0]
    a934:	681a      	ldr	r2, [r3, #0]
    a936:	0608      	lsls	r0, r1, #24
    a938:	d407      	bmi.n	a94a <_printf_i+0x186>
    a93a:	0649      	lsls	r1, r1, #25
    a93c:	d505      	bpl.n	a94a <_printf_i+0x186>
    a93e:	1d11      	adds	r1, r2, #4
    a940:	6019      	str	r1, [r3, #0]
    a942:	6813      	ldr	r3, [r2, #0]
    a944:	8aa2      	ldrh	r2, [r4, #20]
    a946:	801a      	strh	r2, [r3, #0]
    a948:	e004      	b.n	a954 <_printf_i+0x190>
    a94a:	1d11      	adds	r1, r2, #4
    a94c:	6019      	str	r1, [r3, #0]
    a94e:	6813      	ldr	r3, [r2, #0]
    a950:	6962      	ldr	r2, [r4, #20]
    a952:	601a      	str	r2, [r3, #0]
    a954:	2300      	movs	r3, #0
    a956:	9e04      	ldr	r6, [sp, #16]
    a958:	6123      	str	r3, [r4, #16]
    a95a:	e016      	b.n	a98a <_printf_i+0x1c6>
    a95c:	681a      	ldr	r2, [r3, #0]
    a95e:	1d11      	adds	r1, r2, #4
    a960:	6019      	str	r1, [r3, #0]
    a962:	6816      	ldr	r6, [r2, #0]
    a964:	2100      	movs	r1, #0
    a966:	1c30      	adds	r0, r6, #0
    a968:	6862      	ldr	r2, [r4, #4]
    a96a:	f7ff f9e9 	bl	9d40 <memchr>
    a96e:	2800      	cmp	r0, #0
    a970:	d001      	beq.n	a976 <_printf_i+0x1b2>
    a972:	1b80      	subs	r0, r0, r6
    a974:	6060      	str	r0, [r4, #4]
    a976:	6863      	ldr	r3, [r4, #4]
    a978:	e003      	b.n	a982 <_printf_i+0x1be>
    a97a:	1c26      	adds	r6, r4, #0
    a97c:	3642      	adds	r6, #66	; 0x42
    a97e:	7032      	strb	r2, [r6, #0]
    a980:	2301      	movs	r3, #1
    a982:	6123      	str	r3, [r4, #16]
    a984:	2300      	movs	r3, #0
    a986:	9a04      	ldr	r2, [sp, #16]
    a988:	7013      	strb	r3, [r2, #0]
    a98a:	9b07      	ldr	r3, [sp, #28]
    a98c:	9805      	ldr	r0, [sp, #20]
    a98e:	9300      	str	r3, [sp, #0]
    a990:	1c21      	adds	r1, r4, #0
    a992:	9b06      	ldr	r3, [sp, #24]
    a994:	aa09      	add	r2, sp, #36	; 0x24
    a996:	f7ff fea7 	bl	a6e8 <_printf_common>
    a99a:	1c43      	adds	r3, r0, #1
    a99c:	d102      	bne.n	a9a4 <_printf_i+0x1e0>
    a99e:	2001      	movs	r0, #1
    a9a0:	4240      	negs	r0, r0
    a9a2:	e021      	b.n	a9e8 <_printf_i+0x224>
    a9a4:	6923      	ldr	r3, [r4, #16]
    a9a6:	9805      	ldr	r0, [sp, #20]
    a9a8:	9906      	ldr	r1, [sp, #24]
    a9aa:	1c32      	adds	r2, r6, #0
    a9ac:	9d07      	ldr	r5, [sp, #28]
    a9ae:	47a8      	blx	r5
    a9b0:	1c43      	adds	r3, r0, #1
    a9b2:	d0f4      	beq.n	a99e <_printf_i+0x1da>
    a9b4:	6823      	ldr	r3, [r4, #0]
    a9b6:	079b      	lsls	r3, r3, #30
    a9b8:	d405      	bmi.n	a9c6 <_printf_i+0x202>
    a9ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a9bc:	68e0      	ldr	r0, [r4, #12]
    a9be:	4298      	cmp	r0, r3
    a9c0:	da12      	bge.n	a9e8 <_printf_i+0x224>
    a9c2:	1c18      	adds	r0, r3, #0
    a9c4:	e010      	b.n	a9e8 <_printf_i+0x224>
    a9c6:	2500      	movs	r5, #0
    a9c8:	68e3      	ldr	r3, [r4, #12]
    a9ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a9cc:	1a9b      	subs	r3, r3, r2
    a9ce:	429d      	cmp	r5, r3
    a9d0:	daf3      	bge.n	a9ba <_printf_i+0x1f6>
    a9d2:	1c22      	adds	r2, r4, #0
    a9d4:	2301      	movs	r3, #1
    a9d6:	9805      	ldr	r0, [sp, #20]
    a9d8:	9906      	ldr	r1, [sp, #24]
    a9da:	3219      	adds	r2, #25
    a9dc:	9e07      	ldr	r6, [sp, #28]
    a9de:	47b0      	blx	r6
    a9e0:	1c43      	adds	r3, r0, #1
    a9e2:	d0dc      	beq.n	a99e <_printf_i+0x1da>
    a9e4:	3501      	adds	r5, #1
    a9e6:	e7ef      	b.n	a9c8 <_printf_i+0x204>
    a9e8:	b00b      	add	sp, #44	; 0x2c
    a9ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a9ec:	0000f921 	.word	0x0000f921
    a9f0:	0000f932 	.word	0x0000f932

0000a9f4 <_scanf_float>:
    a9f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    a9f6:	1c15      	adds	r5, r2, #0
    a9f8:	2200      	movs	r2, #0
    a9fa:	b08b      	sub	sp, #44	; 0x2c
    a9fc:	9306      	str	r3, [sp, #24]
    a9fe:	688b      	ldr	r3, [r1, #8]
    aa00:	9205      	str	r2, [sp, #20]
    aa02:	325d      	adds	r2, #93	; 0x5d
    aa04:	1c0e      	adds	r6, r1, #0
    aa06:	32ff      	adds	r2, #255	; 0xff
    aa08:	1e59      	subs	r1, r3, #1
    aa0a:	9002      	str	r0, [sp, #8]
    aa0c:	4291      	cmp	r1, r2
    aa0e:	d905      	bls.n	aa1c <_scanf_float+0x28>
    aa10:	3b5e      	subs	r3, #94	; 0x5e
    aa12:	3bff      	subs	r3, #255	; 0xff
    aa14:	9305      	str	r3, [sp, #20]
    aa16:	235e      	movs	r3, #94	; 0x5e
    aa18:	33ff      	adds	r3, #255	; 0xff
    aa1a:	60b3      	str	r3, [r6, #8]
    aa1c:	23f0      	movs	r3, #240	; 0xf0
    aa1e:	6832      	ldr	r2, [r6, #0]
    aa20:	00db      	lsls	r3, r3, #3
    aa22:	4313      	orrs	r3, r2
    aa24:	6033      	str	r3, [r6, #0]
    aa26:	1c33      	adds	r3, r6, #0
    aa28:	2400      	movs	r4, #0
    aa2a:	331c      	adds	r3, #28
    aa2c:	1c1f      	adds	r7, r3, #0
    aa2e:	9304      	str	r3, [sp, #16]
    aa30:	9403      	str	r4, [sp, #12]
    aa32:	9409      	str	r4, [sp, #36]	; 0x24
    aa34:	9408      	str	r4, [sp, #32]
    aa36:	9400      	str	r4, [sp, #0]
    aa38:	9407      	str	r4, [sp, #28]
    aa3a:	68b2      	ldr	r2, [r6, #8]
    aa3c:	2a00      	cmp	r2, #0
    aa3e:	d100      	bne.n	aa42 <_scanf_float+0x4e>
    aa40:	e0e1      	b.n	ac06 <_scanf_float+0x212>
    aa42:	682b      	ldr	r3, [r5, #0]
    aa44:	781b      	ldrb	r3, [r3, #0]
    aa46:	2b49      	cmp	r3, #73	; 0x49
    aa48:	d077      	beq.n	ab3a <_scanf_float+0x146>
    aa4a:	d818      	bhi.n	aa7e <_scanf_float+0x8a>
    aa4c:	2b39      	cmp	r3, #57	; 0x39
    aa4e:	d80d      	bhi.n	aa6c <_scanf_float+0x78>
    aa50:	2b31      	cmp	r3, #49	; 0x31
    aa52:	d242      	bcs.n	aada <_scanf_float+0xe6>
    aa54:	2b2d      	cmp	r3, #45	; 0x2d
    aa56:	d049      	beq.n	aaec <_scanf_float+0xf8>
    aa58:	d802      	bhi.n	aa60 <_scanf_float+0x6c>
    aa5a:	2b2b      	cmp	r3, #43	; 0x2b
    aa5c:	d046      	beq.n	aaec <_scanf_float+0xf8>
    aa5e:	e0d2      	b.n	ac06 <_scanf_float+0x212>
    aa60:	2b2e      	cmp	r3, #46	; 0x2e
    aa62:	d100      	bne.n	aa66 <_scanf_float+0x72>
    aa64:	e08d      	b.n	ab82 <_scanf_float+0x18e>
    aa66:	2b30      	cmp	r3, #48	; 0x30
    aa68:	d025      	beq.n	aab6 <_scanf_float+0xc2>
    aa6a:	e0cc      	b.n	ac06 <_scanf_float+0x212>
    aa6c:	2b45      	cmp	r3, #69	; 0x45
    aa6e:	d100      	bne.n	aa72 <_scanf_float+0x7e>
    aa70:	e090      	b.n	ab94 <_scanf_float+0x1a0>
    aa72:	2b46      	cmp	r3, #70	; 0x46
    aa74:	d079      	beq.n	ab6a <_scanf_float+0x176>
    aa76:	2b41      	cmp	r3, #65	; 0x41
    aa78:	d000      	beq.n	aa7c <_scanf_float+0x88>
    aa7a:	e0c4      	b.n	ac06 <_scanf_float+0x212>
    aa7c:	e058      	b.n	ab30 <_scanf_float+0x13c>
    aa7e:	2b65      	cmp	r3, #101	; 0x65
    aa80:	d100      	bne.n	aa84 <_scanf_float+0x90>
    aa82:	e087      	b.n	ab94 <_scanf_float+0x1a0>
    aa84:	d80a      	bhi.n	aa9c <_scanf_float+0xa8>
    aa86:	2b54      	cmp	r3, #84	; 0x54
    aa88:	d073      	beq.n	ab72 <_scanf_float+0x17e>
    aa8a:	d802      	bhi.n	aa92 <_scanf_float+0x9e>
    aa8c:	2b4e      	cmp	r3, #78	; 0x4e
    aa8e:	d035      	beq.n	aafc <_scanf_float+0x108>
    aa90:	e0b9      	b.n	ac06 <_scanf_float+0x212>
    aa92:	2b59      	cmp	r3, #89	; 0x59
    aa94:	d071      	beq.n	ab7a <_scanf_float+0x186>
    aa96:	2b61      	cmp	r3, #97	; 0x61
    aa98:	d04a      	beq.n	ab30 <_scanf_float+0x13c>
    aa9a:	e0b4      	b.n	ac06 <_scanf_float+0x212>
    aa9c:	2b6e      	cmp	r3, #110	; 0x6e
    aa9e:	d02d      	beq.n	aafc <_scanf_float+0x108>
    aaa0:	d804      	bhi.n	aaac <_scanf_float+0xb8>
    aaa2:	2b66      	cmp	r3, #102	; 0x66
    aaa4:	d061      	beq.n	ab6a <_scanf_float+0x176>
    aaa6:	2b69      	cmp	r3, #105	; 0x69
    aaa8:	d047      	beq.n	ab3a <_scanf_float+0x146>
    aaaa:	e0ac      	b.n	ac06 <_scanf_float+0x212>
    aaac:	2b74      	cmp	r3, #116	; 0x74
    aaae:	d060      	beq.n	ab72 <_scanf_float+0x17e>
    aab0:	2b79      	cmp	r3, #121	; 0x79
    aab2:	d062      	beq.n	ab7a <_scanf_float+0x186>
    aab4:	e0a7      	b.n	ac06 <_scanf_float+0x212>
    aab6:	6831      	ldr	r1, [r6, #0]
    aab8:	05c8      	lsls	r0, r1, #23
    aaba:	d50e      	bpl.n	aada <_scanf_float+0xe6>
    aabc:	2380      	movs	r3, #128	; 0x80
    aabe:	4399      	bics	r1, r3
    aac0:	9b00      	ldr	r3, [sp, #0]
    aac2:	6031      	str	r1, [r6, #0]
    aac4:	3301      	adds	r3, #1
    aac6:	9300      	str	r3, [sp, #0]
    aac8:	9b05      	ldr	r3, [sp, #20]
    aaca:	2b00      	cmp	r3, #0
    aacc:	d100      	bne.n	aad0 <_scanf_float+0xdc>
    aace:	e082      	b.n	abd6 <_scanf_float+0x1e2>
    aad0:	3b01      	subs	r3, #1
    aad2:	3201      	adds	r2, #1
    aad4:	9305      	str	r3, [sp, #20]
    aad6:	60b2      	str	r2, [r6, #8]
    aad8:	e07d      	b.n	abd6 <_scanf_float+0x1e2>
    aada:	9a03      	ldr	r2, [sp, #12]
    aadc:	1912      	adds	r2, r2, r4
    aade:	2a00      	cmp	r2, #0
    aae0:	d000      	beq.n	aae4 <_scanf_float+0xf0>
    aae2:	e090      	b.n	ac06 <_scanf_float+0x212>
    aae4:	4ab3      	ldr	r2, [pc, #716]	; (adb4 <_scanf_float+0x3c0>)
    aae6:	6831      	ldr	r1, [r6, #0]
    aae8:	400a      	ands	r2, r1
    aaea:	e005      	b.n	aaf8 <_scanf_float+0x104>
    aaec:	2180      	movs	r1, #128	; 0x80
    aaee:	6832      	ldr	r2, [r6, #0]
    aaf0:	420a      	tst	r2, r1
    aaf2:	d100      	bne.n	aaf6 <_scanf_float+0x102>
    aaf4:	e087      	b.n	ac06 <_scanf_float+0x212>
    aaf6:	438a      	bics	r2, r1
    aaf8:	6032      	str	r2, [r6, #0]
    aafa:	e06a      	b.n	abd2 <_scanf_float+0x1de>
    aafc:	9a03      	ldr	r2, [sp, #12]
    aafe:	2a00      	cmp	r2, #0
    ab00:	d10e      	bne.n	ab20 <_scanf_float+0x12c>
    ab02:	9a00      	ldr	r2, [sp, #0]
    ab04:	2a00      	cmp	r2, #0
    ab06:	d10e      	bne.n	ab26 <_scanf_float+0x132>
    ab08:	6831      	ldr	r1, [r6, #0]
    ab0a:	22e0      	movs	r2, #224	; 0xe0
    ab0c:	1c08      	adds	r0, r1, #0
    ab0e:	00d2      	lsls	r2, r2, #3
    ab10:	4010      	ands	r0, r2
    ab12:	4290      	cmp	r0, r2
    ab14:	d107      	bne.n	ab26 <_scanf_float+0x132>
    ab16:	4aa8      	ldr	r2, [pc, #672]	; (adb8 <_scanf_float+0x3c4>)
    ab18:	400a      	ands	r2, r1
    ab1a:	6032      	str	r2, [r6, #0]
    ab1c:	2201      	movs	r2, #1
    ab1e:	e057      	b.n	abd0 <_scanf_float+0x1dc>
    ab20:	9a03      	ldr	r2, [sp, #12]
    ab22:	2a02      	cmp	r2, #2
    ab24:	d053      	beq.n	abce <_scanf_float+0x1da>
    ab26:	2c01      	cmp	r4, #1
    ab28:	d01c      	beq.n	ab64 <_scanf_float+0x170>
    ab2a:	2c04      	cmp	r4, #4
    ab2c:	d01a      	beq.n	ab64 <_scanf_float+0x170>
    ab2e:	e06a      	b.n	ac06 <_scanf_float+0x212>
    ab30:	9a03      	ldr	r2, [sp, #12]
    ab32:	2a01      	cmp	r2, #1
    ab34:	d167      	bne.n	ac06 <_scanf_float+0x212>
    ab36:	2202      	movs	r2, #2
    ab38:	e04a      	b.n	abd0 <_scanf_float+0x1dc>
    ab3a:	2c00      	cmp	r4, #0
    ab3c:	d10e      	bne.n	ab5c <_scanf_float+0x168>
    ab3e:	9a00      	ldr	r2, [sp, #0]
    ab40:	2a00      	cmp	r2, #0
    ab42:	d163      	bne.n	ac0c <_scanf_float+0x218>
    ab44:	6831      	ldr	r1, [r6, #0]
    ab46:	22e0      	movs	r2, #224	; 0xe0
    ab48:	1c08      	adds	r0, r1, #0
    ab4a:	00d2      	lsls	r2, r2, #3
    ab4c:	4010      	ands	r0, r2
    ab4e:	4290      	cmp	r0, r2
    ab50:	d160      	bne.n	ac14 <_scanf_float+0x220>
    ab52:	4a99      	ldr	r2, [pc, #612]	; (adb8 <_scanf_float+0x3c4>)
    ab54:	3401      	adds	r4, #1
    ab56:	400a      	ands	r2, r1
    ab58:	6032      	str	r2, [r6, #0]
    ab5a:	e03a      	b.n	abd2 <_scanf_float+0x1de>
    ab5c:	21fd      	movs	r1, #253	; 0xfd
    ab5e:	1ee2      	subs	r2, r4, #3
    ab60:	420a      	tst	r2, r1
    ab62:	d150      	bne.n	ac06 <_scanf_float+0x212>
    ab64:	3401      	adds	r4, #1
    ab66:	b2e4      	uxtb	r4, r4
    ab68:	e033      	b.n	abd2 <_scanf_float+0x1de>
    ab6a:	2c02      	cmp	r4, #2
    ab6c:	d14b      	bne.n	ac06 <_scanf_float+0x212>
    ab6e:	2403      	movs	r4, #3
    ab70:	e02f      	b.n	abd2 <_scanf_float+0x1de>
    ab72:	2c06      	cmp	r4, #6
    ab74:	d147      	bne.n	ac06 <_scanf_float+0x212>
    ab76:	2407      	movs	r4, #7
    ab78:	e02b      	b.n	abd2 <_scanf_float+0x1de>
    ab7a:	2c07      	cmp	r4, #7
    ab7c:	d143      	bne.n	ac06 <_scanf_float+0x212>
    ab7e:	2408      	movs	r4, #8
    ab80:	e027      	b.n	abd2 <_scanf_float+0x1de>
    ab82:	6831      	ldr	r1, [r6, #0]
    ab84:	058a      	lsls	r2, r1, #22
    ab86:	d53e      	bpl.n	ac06 <_scanf_float+0x212>
    ab88:	4a8c      	ldr	r2, [pc, #560]	; (adbc <_scanf_float+0x3c8>)
    ab8a:	400a      	ands	r2, r1
    ab8c:	6032      	str	r2, [r6, #0]
    ab8e:	9a00      	ldr	r2, [sp, #0]
    ab90:	9207      	str	r2, [sp, #28]
    ab92:	e01e      	b.n	abd2 <_scanf_float+0x1de>
    ab94:	22a0      	movs	r2, #160	; 0xa0
    ab96:	2080      	movs	r0, #128	; 0x80
    ab98:	6831      	ldr	r1, [r6, #0]
    ab9a:	00d2      	lsls	r2, r2, #3
    ab9c:	400a      	ands	r2, r1
    ab9e:	00c0      	lsls	r0, r0, #3
    aba0:	4282      	cmp	r2, r0
    aba2:	d004      	beq.n	abae <_scanf_float+0x1ba>
    aba4:	4201      	tst	r1, r0
    aba6:	d02e      	beq.n	ac06 <_scanf_float+0x212>
    aba8:	9a00      	ldr	r2, [sp, #0]
    abaa:	2a00      	cmp	r2, #0
    abac:	d032      	beq.n	ac14 <_scanf_float+0x220>
    abae:	058a      	lsls	r2, r1, #22
    abb0:	d404      	bmi.n	abbc <_scanf_float+0x1c8>
    abb2:	9a00      	ldr	r2, [sp, #0]
    abb4:	9807      	ldr	r0, [sp, #28]
    abb6:	9709      	str	r7, [sp, #36]	; 0x24
    abb8:	1a12      	subs	r2, r2, r0
    abba:	9208      	str	r2, [sp, #32]
    abbc:	4a7e      	ldr	r2, [pc, #504]	; (adb8 <_scanf_float+0x3c4>)
    abbe:	400a      	ands	r2, r1
    abc0:	21c0      	movs	r1, #192	; 0xc0
    abc2:	0049      	lsls	r1, r1, #1
    abc4:	430a      	orrs	r2, r1
    abc6:	6032      	str	r2, [r6, #0]
    abc8:	2200      	movs	r2, #0
    abca:	9200      	str	r2, [sp, #0]
    abcc:	e001      	b.n	abd2 <_scanf_float+0x1de>
    abce:	2203      	movs	r2, #3
    abd0:	9203      	str	r2, [sp, #12]
    abd2:	703b      	strb	r3, [r7, #0]
    abd4:	3701      	adds	r7, #1
    abd6:	68b3      	ldr	r3, [r6, #8]
    abd8:	3b01      	subs	r3, #1
    abda:	60b3      	str	r3, [r6, #8]
    abdc:	6933      	ldr	r3, [r6, #16]
    abde:	3301      	adds	r3, #1
    abe0:	6133      	str	r3, [r6, #16]
    abe2:	686b      	ldr	r3, [r5, #4]
    abe4:	3b01      	subs	r3, #1
    abe6:	606b      	str	r3, [r5, #4]
    abe8:	2b00      	cmp	r3, #0
    abea:	dd03      	ble.n	abf4 <_scanf_float+0x200>
    abec:	682b      	ldr	r3, [r5, #0]
    abee:	3301      	adds	r3, #1
    abf0:	602b      	str	r3, [r5, #0]
    abf2:	e722      	b.n	aa3a <_scanf_float+0x46>
    abf4:	23c0      	movs	r3, #192	; 0xc0
    abf6:	005b      	lsls	r3, r3, #1
    abf8:	58f3      	ldr	r3, [r6, r3]
    abfa:	9802      	ldr	r0, [sp, #8]
    abfc:	1c29      	adds	r1, r5, #0
    abfe:	4798      	blx	r3
    ac00:	2800      	cmp	r0, #0
    ac02:	d100      	bne.n	ac06 <_scanf_float+0x212>
    ac04:	e719      	b.n	aa3a <_scanf_float+0x46>
    ac06:	9b00      	ldr	r3, [sp, #0]
    ac08:	2b00      	cmp	r3, #0
    ac0a:	d003      	beq.n	ac14 <_scanf_float+0x220>
    ac0c:	6832      	ldr	r2, [r6, #0]
    ac0e:	4b6c      	ldr	r3, [pc, #432]	; (adc0 <_scanf_float+0x3cc>)
    ac10:	4013      	ands	r3, r2
    ac12:	6033      	str	r3, [r6, #0]
    ac14:	9b03      	ldr	r3, [sp, #12]
    ac16:	3b01      	subs	r3, #1
    ac18:	2b01      	cmp	r3, #1
    ac1a:	d810      	bhi.n	ac3e <_scanf_float+0x24a>
    ac1c:	9b04      	ldr	r3, [sp, #16]
    ac1e:	429f      	cmp	r7, r3
    ac20:	d90b      	bls.n	ac3a <_scanf_float+0x246>
    ac22:	23be      	movs	r3, #190	; 0xbe
    ac24:	3f01      	subs	r7, #1
    ac26:	005b      	lsls	r3, r3, #1
    ac28:	58f3      	ldr	r3, [r6, r3]
    ac2a:	7839      	ldrb	r1, [r7, #0]
    ac2c:	9802      	ldr	r0, [sp, #8]
    ac2e:	1c2a      	adds	r2, r5, #0
    ac30:	4798      	blx	r3
    ac32:	6933      	ldr	r3, [r6, #16]
    ac34:	3b01      	subs	r3, #1
    ac36:	6133      	str	r3, [r6, #16]
    ac38:	e7f0      	b.n	ac1c <_scanf_float+0x228>
    ac3a:	2401      	movs	r4, #1
    ac3c:	e0b7      	b.n	adae <_scanf_float+0x3ba>
    ac3e:	1e63      	subs	r3, r4, #1
    ac40:	2b06      	cmp	r3, #6
    ac42:	d82a      	bhi.n	ac9a <_scanf_float+0x2a6>
    ac44:	2c02      	cmp	r4, #2
    ac46:	d919      	bls.n	ac7c <_scanf_float+0x288>
    ac48:	9405      	str	r4, [sp, #20]
    ac4a:	9703      	str	r7, [sp, #12]
    ac4c:	9b05      	ldr	r3, [sp, #20]
    ac4e:	3b01      	subs	r3, #1
    ac50:	b2db      	uxtb	r3, r3
    ac52:	9305      	str	r3, [sp, #20]
    ac54:	2b02      	cmp	r3, #2
    ac56:	d00d      	beq.n	ac74 <_scanf_float+0x280>
    ac58:	9b03      	ldr	r3, [sp, #12]
    ac5a:	9802      	ldr	r0, [sp, #8]
    ac5c:	3b01      	subs	r3, #1
    ac5e:	9303      	str	r3, [sp, #12]
    ac60:	7819      	ldrb	r1, [r3, #0]
    ac62:	23be      	movs	r3, #190	; 0xbe
    ac64:	005b      	lsls	r3, r3, #1
    ac66:	58f3      	ldr	r3, [r6, r3]
    ac68:	1c2a      	adds	r2, r5, #0
    ac6a:	4798      	blx	r3
    ac6c:	6933      	ldr	r3, [r6, #16]
    ac6e:	3b01      	subs	r3, #1
    ac70:	6133      	str	r3, [r6, #16]
    ac72:	e7eb      	b.n	ac4c <_scanf_float+0x258>
    ac74:	3c03      	subs	r4, #3
    ac76:	b2e4      	uxtb	r4, r4
    ac78:	1b3f      	subs	r7, r7, r4
    ac7a:	e00e      	b.n	ac9a <_scanf_float+0x2a6>
    ac7c:	9b04      	ldr	r3, [sp, #16]
    ac7e:	429f      	cmp	r7, r3
    ac80:	d9db      	bls.n	ac3a <_scanf_float+0x246>
    ac82:	23be      	movs	r3, #190	; 0xbe
    ac84:	3f01      	subs	r7, #1
    ac86:	005b      	lsls	r3, r3, #1
    ac88:	58f3      	ldr	r3, [r6, r3]
    ac8a:	7839      	ldrb	r1, [r7, #0]
    ac8c:	9802      	ldr	r0, [sp, #8]
    ac8e:	1c2a      	adds	r2, r5, #0
    ac90:	4798      	blx	r3
    ac92:	6933      	ldr	r3, [r6, #16]
    ac94:	3b01      	subs	r3, #1
    ac96:	6133      	str	r3, [r6, #16]
    ac98:	e7f0      	b.n	ac7c <_scanf_float+0x288>
    ac9a:	6833      	ldr	r3, [r6, #0]
    ac9c:	05da      	lsls	r2, r3, #23
    ac9e:	d52b      	bpl.n	acf8 <_scanf_float+0x304>
    aca0:	055b      	lsls	r3, r3, #21
    aca2:	d50e      	bpl.n	acc2 <_scanf_float+0x2ce>
    aca4:	9b04      	ldr	r3, [sp, #16]
    aca6:	429f      	cmp	r7, r3
    aca8:	d9c7      	bls.n	ac3a <_scanf_float+0x246>
    acaa:	23be      	movs	r3, #190	; 0xbe
    acac:	3f01      	subs	r7, #1
    acae:	005b      	lsls	r3, r3, #1
    acb0:	58f3      	ldr	r3, [r6, r3]
    acb2:	7839      	ldrb	r1, [r7, #0]
    acb4:	9802      	ldr	r0, [sp, #8]
    acb6:	1c2a      	adds	r2, r5, #0
    acb8:	4798      	blx	r3
    acba:	6933      	ldr	r3, [r6, #16]
    acbc:	3b01      	subs	r3, #1
    acbe:	6133      	str	r3, [r6, #16]
    acc0:	e7f0      	b.n	aca4 <_scanf_float+0x2b0>
    acc2:	6933      	ldr	r3, [r6, #16]
    acc4:	1e7c      	subs	r4, r7, #1
    acc6:	7821      	ldrb	r1, [r4, #0]
    acc8:	3b01      	subs	r3, #1
    acca:	6133      	str	r3, [r6, #16]
    accc:	2965      	cmp	r1, #101	; 0x65
    acce:	d00c      	beq.n	acea <_scanf_float+0x2f6>
    acd0:	2945      	cmp	r1, #69	; 0x45
    acd2:	d00a      	beq.n	acea <_scanf_float+0x2f6>
    acd4:	23be      	movs	r3, #190	; 0xbe
    acd6:	005b      	lsls	r3, r3, #1
    acd8:	58f3      	ldr	r3, [r6, r3]
    acda:	9802      	ldr	r0, [sp, #8]
    acdc:	1c2a      	adds	r2, r5, #0
    acde:	4798      	blx	r3
    ace0:	6933      	ldr	r3, [r6, #16]
    ace2:	1ebc      	subs	r4, r7, #2
    ace4:	3b01      	subs	r3, #1
    ace6:	7821      	ldrb	r1, [r4, #0]
    ace8:	6133      	str	r3, [r6, #16]
    acea:	23be      	movs	r3, #190	; 0xbe
    acec:	005b      	lsls	r3, r3, #1
    acee:	58f3      	ldr	r3, [r6, r3]
    acf0:	9802      	ldr	r0, [sp, #8]
    acf2:	1c2a      	adds	r2, r5, #0
    acf4:	4798      	blx	r3
    acf6:	1c27      	adds	r7, r4, #0
    acf8:	2410      	movs	r4, #16
    acfa:	6833      	ldr	r3, [r6, #0]
    acfc:	401c      	ands	r4, r3
    acfe:	d155      	bne.n	adac <_scanf_float+0x3b8>
    ad00:	23c0      	movs	r3, #192	; 0xc0
    ad02:	703c      	strb	r4, [r7, #0]
    ad04:	6832      	ldr	r2, [r6, #0]
    ad06:	00db      	lsls	r3, r3, #3
    ad08:	4013      	ands	r3, r2
    ad0a:	2280      	movs	r2, #128	; 0x80
    ad0c:	00d2      	lsls	r2, r2, #3
    ad0e:	4293      	cmp	r3, r2
    ad10:	d106      	bne.n	ad20 <_scanf_float+0x32c>
    ad12:	9a07      	ldr	r2, [sp, #28]
    ad14:	9b00      	ldr	r3, [sp, #0]
    ad16:	1a9b      	subs	r3, r3, r2
    ad18:	425a      	negs	r2, r3
    ad1a:	2b00      	cmp	r3, #0
    ad1c:	d10d      	bne.n	ad3a <_scanf_float+0x346>
    ad1e:	e018      	b.n	ad52 <_scanf_float+0x35e>
    ad20:	9b08      	ldr	r3, [sp, #32]
    ad22:	2b00      	cmp	r3, #0
    ad24:	d015      	beq.n	ad52 <_scanf_float+0x35e>
    ad26:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ad28:	1c22      	adds	r2, r4, #0
    ad2a:	1c59      	adds	r1, r3, #1
    ad2c:	9802      	ldr	r0, [sp, #8]
    ad2e:	230a      	movs	r3, #10
    ad30:	f001 fa08 	bl	c144 <_strtol_r>
    ad34:	9b08      	ldr	r3, [sp, #32]
    ad36:	9f09      	ldr	r7, [sp, #36]	; 0x24
    ad38:	1ac2      	subs	r2, r0, r3
    ad3a:	1c33      	adds	r3, r6, #0
    ad3c:	3370      	adds	r3, #112	; 0x70
    ad3e:	33ff      	adds	r3, #255	; 0xff
    ad40:	429f      	cmp	r7, r3
    ad42:	d302      	bcc.n	ad4a <_scanf_float+0x356>
    ad44:	1c37      	adds	r7, r6, #0
    ad46:	376f      	adds	r7, #111	; 0x6f
    ad48:	37ff      	adds	r7, #255	; 0xff
    ad4a:	1c38      	adds	r0, r7, #0
    ad4c:	491d      	ldr	r1, [pc, #116]	; (adc4 <_scanf_float+0x3d0>)
    ad4e:	f000 fae3 	bl	b318 <siprintf>
    ad52:	2200      	movs	r2, #0
    ad54:	9802      	ldr	r0, [sp, #8]
    ad56:	9904      	ldr	r1, [sp, #16]
    ad58:	f000 fbda 	bl	b510 <_strtod_r>
    ad5c:	9b06      	ldr	r3, [sp, #24]
    ad5e:	6832      	ldr	r2, [r6, #0]
    ad60:	9000      	str	r0, [sp, #0]
    ad62:	9101      	str	r1, [sp, #4]
    ad64:	681b      	ldr	r3, [r3, #0]
    ad66:	0791      	lsls	r1, r2, #30
    ad68:	d401      	bmi.n	ad6e <_scanf_float+0x37a>
    ad6a:	0752      	lsls	r2, r2, #29
    ad6c:	d508      	bpl.n	ad80 <_scanf_float+0x38c>
    ad6e:	9906      	ldr	r1, [sp, #24]
    ad70:	1d1a      	adds	r2, r3, #4
    ad72:	600a      	str	r2, [r1, #0]
    ad74:	681b      	ldr	r3, [r3, #0]
    ad76:	9900      	ldr	r1, [sp, #0]
    ad78:	9a01      	ldr	r2, [sp, #4]
    ad7a:	6019      	str	r1, [r3, #0]
    ad7c:	605a      	str	r2, [r3, #4]
    ad7e:	e011      	b.n	ada4 <_scanf_float+0x3b0>
    ad80:	9906      	ldr	r1, [sp, #24]
    ad82:	1d1a      	adds	r2, r3, #4
    ad84:	600a      	str	r2, [r1, #0]
    ad86:	9800      	ldr	r0, [sp, #0]
    ad88:	9901      	ldr	r1, [sp, #4]
    ad8a:	681d      	ldr	r5, [r3, #0]
    ad8c:	f000 f9c4 	bl	b118 <__fpclassifyd>
    ad90:	2800      	cmp	r0, #0
    ad92:	d102      	bne.n	ad9a <_scanf_float+0x3a6>
    ad94:	f000 fabc 	bl	b310 <nanf>
    ad98:	e003      	b.n	ada2 <_scanf_float+0x3ae>
    ad9a:	9800      	ldr	r0, [sp, #0]
    ad9c:	9901      	ldr	r1, [sp, #4]
    ad9e:	f7fe fb4b 	bl	9438 <__aeabi_d2f>
    ada2:	6028      	str	r0, [r5, #0]
    ada4:	68f3      	ldr	r3, [r6, #12]
    ada6:	3301      	adds	r3, #1
    ada8:	60f3      	str	r3, [r6, #12]
    adaa:	e000      	b.n	adae <_scanf_float+0x3ba>
    adac:	2400      	movs	r4, #0
    adae:	1c20      	adds	r0, r4, #0
    adb0:	b00b      	add	sp, #44	; 0x2c
    adb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    adb4:	fffffe7f 	.word	0xfffffe7f
    adb8:	fffff87f 	.word	0xfffff87f
    adbc:	fffffd7f 	.word	0xfffffd7f
    adc0:	fffffeff 	.word	0xfffffeff
    adc4:	0000f943 	.word	0x0000f943

0000adc8 <_scanf_chars>:
    adc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    adca:	1c15      	adds	r5, r2, #0
    adcc:	688a      	ldr	r2, [r1, #8]
    adce:	9001      	str	r0, [sp, #4]
    add0:	1c0c      	adds	r4, r1, #0
    add2:	2a00      	cmp	r2, #0
    add4:	d106      	bne.n	ade4 <_scanf_chars+0x1c>
    add6:	698a      	ldr	r2, [r1, #24]
    add8:	1e51      	subs	r1, r2, #1
    adda:	418a      	sbcs	r2, r1
    addc:	2101      	movs	r1, #1
    adde:	4252      	negs	r2, r2
    ade0:	430a      	orrs	r2, r1
    ade2:	60a2      	str	r2, [r4, #8]
    ade4:	6822      	ldr	r2, [r4, #0]
    ade6:	06d2      	lsls	r2, r2, #27
    ade8:	d403      	bmi.n	adf2 <_scanf_chars+0x2a>
    adea:	681a      	ldr	r2, [r3, #0]
    adec:	1d11      	adds	r1, r2, #4
    adee:	6019      	str	r1, [r3, #0]
    adf0:	6817      	ldr	r7, [r2, #0]
    adf2:	2600      	movs	r6, #0
    adf4:	69a0      	ldr	r0, [r4, #24]
    adf6:	2800      	cmp	r0, #0
    adf8:	d11d      	bne.n	ae36 <_scanf_chars+0x6e>
    adfa:	6823      	ldr	r3, [r4, #0]
    adfc:	3601      	adds	r6, #1
    adfe:	06db      	lsls	r3, r3, #27
    ae00:	d403      	bmi.n	ae0a <_scanf_chars+0x42>
    ae02:	682b      	ldr	r3, [r5, #0]
    ae04:	781b      	ldrb	r3, [r3, #0]
    ae06:	703b      	strb	r3, [r7, #0]
    ae08:	3701      	adds	r7, #1
    ae0a:	682a      	ldr	r2, [r5, #0]
    ae0c:	686b      	ldr	r3, [r5, #4]
    ae0e:	3201      	adds	r2, #1
    ae10:	602a      	str	r2, [r5, #0]
    ae12:	68a2      	ldr	r2, [r4, #8]
    ae14:	3b01      	subs	r3, #1
    ae16:	3a01      	subs	r2, #1
    ae18:	606b      	str	r3, [r5, #4]
    ae1a:	60a2      	str	r2, [r4, #8]
    ae1c:	2a00      	cmp	r2, #0
    ae1e:	d01f      	beq.n	ae60 <_scanf_chars+0x98>
    ae20:	2b00      	cmp	r3, #0
    ae22:	dce7      	bgt.n	adf4 <_scanf_chars+0x2c>
    ae24:	23c0      	movs	r3, #192	; 0xc0
    ae26:	005b      	lsls	r3, r3, #1
    ae28:	58e3      	ldr	r3, [r4, r3]
    ae2a:	9801      	ldr	r0, [sp, #4]
    ae2c:	1c29      	adds	r1, r5, #0
    ae2e:	4798      	blx	r3
    ae30:	2800      	cmp	r0, #0
    ae32:	d0df      	beq.n	adf4 <_scanf_chars+0x2c>
    ae34:	e014      	b.n	ae60 <_scanf_chars+0x98>
    ae36:	2801      	cmp	r0, #1
    ae38:	d108      	bne.n	ae4c <_scanf_chars+0x84>
    ae3a:	682b      	ldr	r3, [r5, #0]
    ae3c:	6962      	ldr	r2, [r4, #20]
    ae3e:	781b      	ldrb	r3, [r3, #0]
    ae40:	5cd3      	ldrb	r3, [r2, r3]
    ae42:	2b00      	cmp	r3, #0
    ae44:	d1d9      	bne.n	adfa <_scanf_chars+0x32>
    ae46:	2e00      	cmp	r6, #0
    ae48:	d019      	beq.n	ae7e <_scanf_chars+0xb6>
    ae4a:	e009      	b.n	ae60 <_scanf_chars+0x98>
    ae4c:	2802      	cmp	r0, #2
    ae4e:	d107      	bne.n	ae60 <_scanf_chars+0x98>
    ae50:	682b      	ldr	r3, [r5, #0]
    ae52:	4a0b      	ldr	r2, [pc, #44]	; (ae80 <_scanf_chars+0xb8>)
    ae54:	781b      	ldrb	r3, [r3, #0]
    ae56:	6812      	ldr	r2, [r2, #0]
    ae58:	18d3      	adds	r3, r2, r3
    ae5a:	785b      	ldrb	r3, [r3, #1]
    ae5c:	071b      	lsls	r3, r3, #28
    ae5e:	d5cc      	bpl.n	adfa <_scanf_chars+0x32>
    ae60:	2310      	movs	r3, #16
    ae62:	6822      	ldr	r2, [r4, #0]
    ae64:	4013      	ands	r3, r2
    ae66:	d106      	bne.n	ae76 <_scanf_chars+0xae>
    ae68:	68e2      	ldr	r2, [r4, #12]
    ae6a:	3201      	adds	r2, #1
    ae6c:	60e2      	str	r2, [r4, #12]
    ae6e:	69a2      	ldr	r2, [r4, #24]
    ae70:	2a00      	cmp	r2, #0
    ae72:	d000      	beq.n	ae76 <_scanf_chars+0xae>
    ae74:	703b      	strb	r3, [r7, #0]
    ae76:	2000      	movs	r0, #0
    ae78:	6923      	ldr	r3, [r4, #16]
    ae7a:	199e      	adds	r6, r3, r6
    ae7c:	6126      	str	r6, [r4, #16]
    ae7e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    ae80:	20000138 	.word	0x20000138

0000ae84 <_scanf_i>:
    ae84:	b5f0      	push	{r4, r5, r6, r7, lr}
    ae86:	1c0c      	adds	r4, r1, #0
    ae88:	b08b      	sub	sp, #44	; 0x2c
    ae8a:	9301      	str	r3, [sp, #4]
    ae8c:	4b74      	ldr	r3, [pc, #464]	; (b060 <_scanf_i+0x1dc>)
    ae8e:	9004      	str	r0, [sp, #16]
    ae90:	1c16      	adds	r6, r2, #0
    ae92:	aa07      	add	r2, sp, #28
    ae94:	cb23      	ldmia	r3!, {r0, r1, r5}
    ae96:	c223      	stmia	r2!, {r0, r1, r5}
    ae98:	4b72      	ldr	r3, [pc, #456]	; (b064 <_scanf_i+0x1e0>)
    ae9a:	9305      	str	r3, [sp, #20]
    ae9c:	69a3      	ldr	r3, [r4, #24]
    ae9e:	2b03      	cmp	r3, #3
    aea0:	d001      	beq.n	aea6 <_scanf_i+0x22>
    aea2:	4b71      	ldr	r3, [pc, #452]	; (b068 <_scanf_i+0x1e4>)
    aea4:	9305      	str	r3, [sp, #20]
    aea6:	2200      	movs	r2, #0
    aea8:	68a3      	ldr	r3, [r4, #8]
    aeaa:	9203      	str	r2, [sp, #12]
    aeac:	325d      	adds	r2, #93	; 0x5d
    aeae:	1e59      	subs	r1, r3, #1
    aeb0:	32ff      	adds	r2, #255	; 0xff
    aeb2:	4291      	cmp	r1, r2
    aeb4:	d905      	bls.n	aec2 <_scanf_i+0x3e>
    aeb6:	3b5e      	subs	r3, #94	; 0x5e
    aeb8:	3bff      	subs	r3, #255	; 0xff
    aeba:	9303      	str	r3, [sp, #12]
    aebc:	235e      	movs	r3, #94	; 0x5e
    aebe:	33ff      	adds	r3, #255	; 0xff
    aec0:	60a3      	str	r3, [r4, #8]
    aec2:	1c23      	adds	r3, r4, #0
    aec4:	331c      	adds	r3, #28
    aec6:	9300      	str	r3, [sp, #0]
    aec8:	23d0      	movs	r3, #208	; 0xd0
    aeca:	2700      	movs	r7, #0
    aecc:	6822      	ldr	r2, [r4, #0]
    aece:	011b      	lsls	r3, r3, #4
    aed0:	4313      	orrs	r3, r2
    aed2:	6023      	str	r3, [r4, #0]
    aed4:	9b00      	ldr	r3, [sp, #0]
    aed6:	9302      	str	r3, [sp, #8]
    aed8:	6832      	ldr	r2, [r6, #0]
    aeda:	00bb      	lsls	r3, r7, #2
    aedc:	7811      	ldrb	r1, [r2, #0]
    aede:	aa07      	add	r2, sp, #28
    aee0:	5898      	ldr	r0, [r3, r2]
    aee2:	2202      	movs	r2, #2
    aee4:	f7fe ff2c 	bl	9d40 <memchr>
    aee8:	2800      	cmp	r0, #0
    aeea:	d039      	beq.n	af60 <_scanf_i+0xdc>
    aeec:	2f01      	cmp	r7, #1
    aeee:	d10d      	bne.n	af0c <_scanf_i+0x88>
    aef0:	6863      	ldr	r3, [r4, #4]
    aef2:	2b00      	cmp	r3, #0
    aef4:	d106      	bne.n	af04 <_scanf_i+0x80>
    aef6:	3308      	adds	r3, #8
    aef8:	6822      	ldr	r2, [r4, #0]
    aefa:	6063      	str	r3, [r4, #4]
    aefc:	33f9      	adds	r3, #249	; 0xf9
    aefe:	33ff      	adds	r3, #255	; 0xff
    af00:	4313      	orrs	r3, r2
    af02:	6023      	str	r3, [r4, #0]
    af04:	4b59      	ldr	r3, [pc, #356]	; (b06c <_scanf_i+0x1e8>)
    af06:	6822      	ldr	r2, [r4, #0]
    af08:	4013      	ands	r3, r2
    af0a:	e00d      	b.n	af28 <_scanf_i+0xa4>
    af0c:	2f02      	cmp	r7, #2
    af0e:	d10c      	bne.n	af2a <_scanf_i+0xa6>
    af10:	22c0      	movs	r2, #192	; 0xc0
    af12:	2180      	movs	r1, #128	; 0x80
    af14:	6823      	ldr	r3, [r4, #0]
    af16:	00d2      	lsls	r2, r2, #3
    af18:	401a      	ands	r2, r3
    af1a:	0089      	lsls	r1, r1, #2
    af1c:	428a      	cmp	r2, r1
    af1e:	d122      	bne.n	af66 <_scanf_i+0xe2>
    af20:	2210      	movs	r2, #16
    af22:	6062      	str	r2, [r4, #4]
    af24:	32f0      	adds	r2, #240	; 0xf0
    af26:	4313      	orrs	r3, r2
    af28:	6023      	str	r3, [r4, #0]
    af2a:	68a3      	ldr	r3, [r4, #8]
    af2c:	1e5a      	subs	r2, r3, #1
    af2e:	60a2      	str	r2, [r4, #8]
    af30:	2b00      	cmp	r3, #0
    af32:	d015      	beq.n	af60 <_scanf_i+0xdc>
    af34:	9b02      	ldr	r3, [sp, #8]
    af36:	1c5d      	adds	r5, r3, #1
    af38:	6833      	ldr	r3, [r6, #0]
    af3a:	1c5a      	adds	r2, r3, #1
    af3c:	6032      	str	r2, [r6, #0]
    af3e:	781b      	ldrb	r3, [r3, #0]
    af40:	9a02      	ldr	r2, [sp, #8]
    af42:	9502      	str	r5, [sp, #8]
    af44:	7013      	strb	r3, [r2, #0]
    af46:	6873      	ldr	r3, [r6, #4]
    af48:	3b01      	subs	r3, #1
    af4a:	6073      	str	r3, [r6, #4]
    af4c:	2b00      	cmp	r3, #0
    af4e:	dc07      	bgt.n	af60 <_scanf_i+0xdc>
    af50:	23c0      	movs	r3, #192	; 0xc0
    af52:	005b      	lsls	r3, r3, #1
    af54:	58e3      	ldr	r3, [r4, r3]
    af56:	9804      	ldr	r0, [sp, #16]
    af58:	1c31      	adds	r1, r6, #0
    af5a:	4798      	blx	r3
    af5c:	2800      	cmp	r0, #0
    af5e:	d144      	bne.n	afea <_scanf_i+0x166>
    af60:	3701      	adds	r7, #1
    af62:	2f03      	cmp	r7, #3
    af64:	d1b8      	bne.n	aed8 <_scanf_i+0x54>
    af66:	6863      	ldr	r3, [r4, #4]
    af68:	2b00      	cmp	r3, #0
    af6a:	d101      	bne.n	af70 <_scanf_i+0xec>
    af6c:	330a      	adds	r3, #10
    af6e:	6063      	str	r3, [r4, #4]
    af70:	2110      	movs	r1, #16
    af72:	2700      	movs	r7, #0
    af74:	6863      	ldr	r3, [r4, #4]
    af76:	6960      	ldr	r0, [r4, #20]
    af78:	1ac9      	subs	r1, r1, r3
    af7a:	4b3d      	ldr	r3, [pc, #244]	; (b070 <_scanf_i+0x1ec>)
    af7c:	18c9      	adds	r1, r1, r3
    af7e:	f000 f905 	bl	b18c <__sccl>
    af82:	9d02      	ldr	r5, [sp, #8]
    af84:	68a3      	ldr	r3, [r4, #8]
    af86:	2b00      	cmp	r3, #0
    af88:	d030      	beq.n	afec <_scanf_i+0x168>
    af8a:	6832      	ldr	r2, [r6, #0]
    af8c:	6960      	ldr	r0, [r4, #20]
    af8e:	7811      	ldrb	r1, [r2, #0]
    af90:	5c40      	ldrb	r0, [r0, r1]
    af92:	2800      	cmp	r0, #0
    af94:	d02a      	beq.n	afec <_scanf_i+0x168>
    af96:	2930      	cmp	r1, #48	; 0x30
    af98:	d10b      	bne.n	afb2 <_scanf_i+0x12e>
    af9a:	6821      	ldr	r1, [r4, #0]
    af9c:	0509      	lsls	r1, r1, #20
    af9e:	d508      	bpl.n	afb2 <_scanf_i+0x12e>
    afa0:	9a03      	ldr	r2, [sp, #12]
    afa2:	3701      	adds	r7, #1
    afa4:	2a00      	cmp	r2, #0
    afa6:	d00b      	beq.n	afc0 <_scanf_i+0x13c>
    afa8:	3a01      	subs	r2, #1
    afaa:	3301      	adds	r3, #1
    afac:	9203      	str	r2, [sp, #12]
    afae:	60a3      	str	r3, [r4, #8]
    afb0:	e006      	b.n	afc0 <_scanf_i+0x13c>
    afb2:	6821      	ldr	r1, [r4, #0]
    afb4:	4b2f      	ldr	r3, [pc, #188]	; (b074 <_scanf_i+0x1f0>)
    afb6:	400b      	ands	r3, r1
    afb8:	6023      	str	r3, [r4, #0]
    afba:	7813      	ldrb	r3, [r2, #0]
    afbc:	702b      	strb	r3, [r5, #0]
    afbe:	3501      	adds	r5, #1
    afc0:	6873      	ldr	r3, [r6, #4]
    afc2:	3b01      	subs	r3, #1
    afc4:	6073      	str	r3, [r6, #4]
    afc6:	2b00      	cmp	r3, #0
    afc8:	dd03      	ble.n	afd2 <_scanf_i+0x14e>
    afca:	6833      	ldr	r3, [r6, #0]
    afcc:	3301      	adds	r3, #1
    afce:	6033      	str	r3, [r6, #0]
    afd0:	e007      	b.n	afe2 <_scanf_i+0x15e>
    afd2:	23c0      	movs	r3, #192	; 0xc0
    afd4:	005b      	lsls	r3, r3, #1
    afd6:	58e3      	ldr	r3, [r4, r3]
    afd8:	9804      	ldr	r0, [sp, #16]
    afda:	1c31      	adds	r1, r6, #0
    afdc:	4798      	blx	r3
    afde:	2800      	cmp	r0, #0
    afe0:	d104      	bne.n	afec <_scanf_i+0x168>
    afe2:	68a3      	ldr	r3, [r4, #8]
    afe4:	3b01      	subs	r3, #1
    afe6:	60a3      	str	r3, [r4, #8]
    afe8:	e7cc      	b.n	af84 <_scanf_i+0x100>
    afea:	2700      	movs	r7, #0
    afec:	6823      	ldr	r3, [r4, #0]
    afee:	05db      	lsls	r3, r3, #23
    aff0:	d50e      	bpl.n	b010 <_scanf_i+0x18c>
    aff2:	9b00      	ldr	r3, [sp, #0]
    aff4:	429d      	cmp	r5, r3
    aff6:	d907      	bls.n	b008 <_scanf_i+0x184>
    aff8:	23be      	movs	r3, #190	; 0xbe
    affa:	3d01      	subs	r5, #1
    affc:	005b      	lsls	r3, r3, #1
    affe:	7829      	ldrb	r1, [r5, #0]
    b000:	58e3      	ldr	r3, [r4, r3]
    b002:	9804      	ldr	r0, [sp, #16]
    b004:	1c32      	adds	r2, r6, #0
    b006:	4798      	blx	r3
    b008:	9b00      	ldr	r3, [sp, #0]
    b00a:	2001      	movs	r0, #1
    b00c:	429d      	cmp	r5, r3
    b00e:	d025      	beq.n	b05c <_scanf_i+0x1d8>
    b010:	2210      	movs	r2, #16
    b012:	6823      	ldr	r3, [r4, #0]
    b014:	401a      	ands	r2, r3
    b016:	d11a      	bne.n	b04e <_scanf_i+0x1ca>
    b018:	702a      	strb	r2, [r5, #0]
    b01a:	6863      	ldr	r3, [r4, #4]
    b01c:	9804      	ldr	r0, [sp, #16]
    b01e:	9900      	ldr	r1, [sp, #0]
    b020:	9e05      	ldr	r6, [sp, #20]
    b022:	47b0      	blx	r6
    b024:	9b01      	ldr	r3, [sp, #4]
    b026:	6822      	ldr	r2, [r4, #0]
    b028:	681b      	ldr	r3, [r3, #0]
    b02a:	0691      	lsls	r1, r2, #26
    b02c:	d407      	bmi.n	b03e <_scanf_i+0x1ba>
    b02e:	07d1      	lsls	r1, r2, #31
    b030:	d505      	bpl.n	b03e <_scanf_i+0x1ba>
    b032:	9901      	ldr	r1, [sp, #4]
    b034:	1d1a      	adds	r2, r3, #4
    b036:	600a      	str	r2, [r1, #0]
    b038:	681b      	ldr	r3, [r3, #0]
    b03a:	8018      	strh	r0, [r3, #0]
    b03c:	e004      	b.n	b048 <_scanf_i+0x1c4>
    b03e:	9901      	ldr	r1, [sp, #4]
    b040:	1d1a      	adds	r2, r3, #4
    b042:	600a      	str	r2, [r1, #0]
    b044:	681b      	ldr	r3, [r3, #0]
    b046:	6018      	str	r0, [r3, #0]
    b048:	68e3      	ldr	r3, [r4, #12]
    b04a:	3301      	adds	r3, #1
    b04c:	60e3      	str	r3, [r4, #12]
    b04e:	2000      	movs	r0, #0
    b050:	9b00      	ldr	r3, [sp, #0]
    b052:	1aed      	subs	r5, r5, r3
    b054:	6923      	ldr	r3, [r4, #16]
    b056:	19ed      	adds	r5, r5, r7
    b058:	195d      	adds	r5, r3, r5
    b05a:	6125      	str	r5, [r4, #16]
    b05c:	b00b      	add	sp, #44	; 0x2c
    b05e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b060:	0000f948 	.word	0x0000f948
    b064:	0000c145 	.word	0x0000c145
    b068:	0000c265 	.word	0x0000c265
    b06c:	fffffaff 	.word	0xfffffaff
    b070:	0000f954 	.word	0x0000f954
    b074:	fffff6ff 	.word	0xfffff6ff

0000b078 <_open_r>:
    b078:	b538      	push	{r3, r4, r5, lr}
    b07a:	1c05      	adds	r5, r0, #0
    b07c:	2000      	movs	r0, #0
    b07e:	4c07      	ldr	r4, [pc, #28]	; (b09c <_open_r+0x24>)
    b080:	6020      	str	r0, [r4, #0]
    b082:	1c08      	adds	r0, r1, #0
    b084:	1c11      	adds	r1, r2, #0
    b086:	1c1a      	adds	r2, r3, #0
    b088:	f7f8 fdcc 	bl	3c24 <_open>
    b08c:	1c43      	adds	r3, r0, #1
    b08e:	d103      	bne.n	b098 <_open_r+0x20>
    b090:	6823      	ldr	r3, [r4, #0]
    b092:	2b00      	cmp	r3, #0
    b094:	d000      	beq.n	b098 <_open_r+0x20>
    b096:	602b      	str	r3, [r5, #0]
    b098:	bd38      	pop	{r3, r4, r5, pc}
    b09a:	46c0      	nop			; (mov r8, r8)
    b09c:	200047c8 	.word	0x200047c8

0000b0a0 <_putc_r>:
    b0a0:	b570      	push	{r4, r5, r6, lr}
    b0a2:	1c05      	adds	r5, r0, #0
    b0a4:	1c0e      	adds	r6, r1, #0
    b0a6:	1c14      	adds	r4, r2, #0
    b0a8:	2800      	cmp	r0, #0
    b0aa:	d004      	beq.n	b0b6 <_putc_r+0x16>
    b0ac:	6983      	ldr	r3, [r0, #24]
    b0ae:	2b00      	cmp	r3, #0
    b0b0:	d101      	bne.n	b0b6 <_putc_r+0x16>
    b0b2:	f7fe fc07 	bl	98c4 <__sinit>
    b0b6:	4b15      	ldr	r3, [pc, #84]	; (b10c <_putc_r+0x6c>)
    b0b8:	429c      	cmp	r4, r3
    b0ba:	d101      	bne.n	b0c0 <_putc_r+0x20>
    b0bc:	686c      	ldr	r4, [r5, #4]
    b0be:	e008      	b.n	b0d2 <_putc_r+0x32>
    b0c0:	4b13      	ldr	r3, [pc, #76]	; (b110 <_putc_r+0x70>)
    b0c2:	429c      	cmp	r4, r3
    b0c4:	d101      	bne.n	b0ca <_putc_r+0x2a>
    b0c6:	68ac      	ldr	r4, [r5, #8]
    b0c8:	e003      	b.n	b0d2 <_putc_r+0x32>
    b0ca:	4b12      	ldr	r3, [pc, #72]	; (b114 <_putc_r+0x74>)
    b0cc:	429c      	cmp	r4, r3
    b0ce:	d100      	bne.n	b0d2 <_putc_r+0x32>
    b0d0:	68ec      	ldr	r4, [r5, #12]
    b0d2:	68a3      	ldr	r3, [r4, #8]
    b0d4:	3b01      	subs	r3, #1
    b0d6:	60a3      	str	r3, [r4, #8]
    b0d8:	2b00      	cmp	r3, #0
    b0da:	da10      	bge.n	b0fe <_putc_r+0x5e>
    b0dc:	69a2      	ldr	r2, [r4, #24]
    b0de:	4293      	cmp	r3, r2
    b0e0:	db07      	blt.n	b0f2 <_putc_r+0x52>
    b0e2:	6823      	ldr	r3, [r4, #0]
    b0e4:	701e      	strb	r6, [r3, #0]
    b0e6:	6823      	ldr	r3, [r4, #0]
    b0e8:	7819      	ldrb	r1, [r3, #0]
    b0ea:	290a      	cmp	r1, #10
    b0ec:	d10a      	bne.n	b104 <_putc_r+0x64>
    b0ee:	1c28      	adds	r0, r5, #0
    b0f0:	e001      	b.n	b0f6 <_putc_r+0x56>
    b0f2:	1c28      	adds	r0, r5, #0
    b0f4:	1c31      	adds	r1, r6, #0
    b0f6:	1c22      	adds	r2, r4, #0
    b0f8:	f001 f974 	bl	c3e4 <__swbuf_r>
    b0fc:	e005      	b.n	b10a <_putc_r+0x6a>
    b0fe:	6823      	ldr	r3, [r4, #0]
    b100:	701e      	strb	r6, [r3, #0]
    b102:	6823      	ldr	r3, [r4, #0]
    b104:	1c5a      	adds	r2, r3, #1
    b106:	6022      	str	r2, [r4, #0]
    b108:	7818      	ldrb	r0, [r3, #0]
    b10a:	bd70      	pop	{r4, r5, r6, pc}
    b10c:	0000f898 	.word	0x0000f898
    b110:	0000f8b8 	.word	0x0000f8b8
    b114:	0000f8d8 	.word	0x0000f8d8

0000b118 <__fpclassifyd>:
    b118:	b530      	push	{r4, r5, lr}
    b11a:	1c0c      	adds	r4, r1, #0
    b11c:	2302      	movs	r3, #2
    b11e:	4304      	orrs	r4, r0
    b120:	d017      	beq.n	b152 <__fpclassifyd+0x3a>
    b122:	2480      	movs	r4, #128	; 0x80
    b124:	0624      	lsls	r4, r4, #24
    b126:	42a1      	cmp	r1, r4
    b128:	d101      	bne.n	b12e <__fpclassifyd+0x16>
    b12a:	2800      	cmp	r0, #0
    b12c:	d011      	beq.n	b152 <__fpclassifyd+0x3a>
    b12e:	4b0a      	ldr	r3, [pc, #40]	; (b158 <__fpclassifyd+0x40>)
    b130:	0049      	lsls	r1, r1, #1
    b132:	0849      	lsrs	r1, r1, #1
    b134:	4a09      	ldr	r2, [pc, #36]	; (b15c <__fpclassifyd+0x44>)
    b136:	18cc      	adds	r4, r1, r3
    b138:	2304      	movs	r3, #4
    b13a:	4294      	cmp	r4, r2
    b13c:	d909      	bls.n	b152 <__fpclassifyd+0x3a>
    b13e:	4a08      	ldr	r2, [pc, #32]	; (b160 <__fpclassifyd+0x48>)
    b140:	3b01      	subs	r3, #1
    b142:	4291      	cmp	r1, r2
    b144:	d905      	bls.n	b152 <__fpclassifyd+0x3a>
    b146:	4a07      	ldr	r2, [pc, #28]	; (b164 <__fpclassifyd+0x4c>)
    b148:	2300      	movs	r3, #0
    b14a:	4291      	cmp	r1, r2
    b14c:	d101      	bne.n	b152 <__fpclassifyd+0x3a>
    b14e:	4243      	negs	r3, r0
    b150:	4143      	adcs	r3, r0
    b152:	1c18      	adds	r0, r3, #0
    b154:	bd30      	pop	{r4, r5, pc}
    b156:	46c0      	nop			; (mov r8, r8)
    b158:	fff00000 	.word	0xfff00000
    b15c:	7fdfffff 	.word	0x7fdfffff
    b160:	000fffff 	.word	0x000fffff
    b164:	7ff00000 	.word	0x7ff00000

0000b168 <_sbrk_r>:
    b168:	b538      	push	{r3, r4, r5, lr}
    b16a:	2300      	movs	r3, #0
    b16c:	4c06      	ldr	r4, [pc, #24]	; (b188 <_sbrk_r+0x20>)
    b16e:	1c05      	adds	r5, r0, #0
    b170:	1c08      	adds	r0, r1, #0
    b172:	6023      	str	r3, [r4, #0]
    b174:	f7f8 fe7e 	bl	3e74 <_sbrk>
    b178:	1c43      	adds	r3, r0, #1
    b17a:	d103      	bne.n	b184 <_sbrk_r+0x1c>
    b17c:	6823      	ldr	r3, [r4, #0]
    b17e:	2b00      	cmp	r3, #0
    b180:	d000      	beq.n	b184 <_sbrk_r+0x1c>
    b182:	602b      	str	r3, [r5, #0]
    b184:	bd38      	pop	{r3, r4, r5, pc}
    b186:	46c0      	nop			; (mov r8, r8)
    b188:	200047c8 	.word	0x200047c8

0000b18c <__sccl>:
    b18c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b18e:	780a      	ldrb	r2, [r1, #0]
    b190:	2a5e      	cmp	r2, #94	; 0x5e
    b192:	d002      	beq.n	b19a <__sccl+0xe>
    b194:	1c4b      	adds	r3, r1, #1
    b196:	2400      	movs	r4, #0
    b198:	e002      	b.n	b1a0 <__sccl+0x14>
    b19a:	2401      	movs	r4, #1
    b19c:	784a      	ldrb	r2, [r1, #1]
    b19e:	1c8b      	adds	r3, r1, #2
    b1a0:	1c01      	adds	r1, r0, #0
    b1a2:	1c45      	adds	r5, r0, #1
    b1a4:	35ff      	adds	r5, #255	; 0xff
    b1a6:	700c      	strb	r4, [r1, #0]
    b1a8:	3101      	adds	r1, #1
    b1aa:	42a9      	cmp	r1, r5
    b1ac:	d1fb      	bne.n	b1a6 <__sccl+0x1a>
    b1ae:	2a00      	cmp	r2, #0
    b1b0:	d101      	bne.n	b1b6 <__sccl+0x2a>
    b1b2:	1e58      	subs	r0, r3, #1
    b1b4:	e01c      	b.n	b1f0 <__sccl+0x64>
    b1b6:	2101      	movs	r1, #1
    b1b8:	1b0c      	subs	r4, r1, r4
    b1ba:	b2e7      	uxtb	r7, r4
    b1bc:	5487      	strb	r7, [r0, r2]
    b1be:	7819      	ldrb	r1, [r3, #0]
    b1c0:	1c5e      	adds	r6, r3, #1
    b1c2:	292d      	cmp	r1, #45	; 0x2d
    b1c4:	d006      	beq.n	b1d4 <__sccl+0x48>
    b1c6:	295d      	cmp	r1, #93	; 0x5d
    b1c8:	d00f      	beq.n	b1ea <__sccl+0x5e>
    b1ca:	2900      	cmp	r1, #0
    b1cc:	d00f      	beq.n	b1ee <__sccl+0x62>
    b1ce:	1c0a      	adds	r2, r1, #0
    b1d0:	1c33      	adds	r3, r6, #0
    b1d2:	e7f2      	b.n	b1ba <__sccl+0x2e>
    b1d4:	785d      	ldrb	r5, [r3, #1]
    b1d6:	2d5d      	cmp	r5, #93	; 0x5d
    b1d8:	d0f9      	beq.n	b1ce <__sccl+0x42>
    b1da:	4295      	cmp	r5, r2
    b1dc:	dbf7      	blt.n	b1ce <__sccl+0x42>
    b1de:	3302      	adds	r3, #2
    b1e0:	3201      	adds	r2, #1
    b1e2:	5487      	strb	r7, [r0, r2]
    b1e4:	42aa      	cmp	r2, r5
    b1e6:	dbfb      	blt.n	b1e0 <__sccl+0x54>
    b1e8:	e7e9      	b.n	b1be <__sccl+0x32>
    b1ea:	1c30      	adds	r0, r6, #0
    b1ec:	e000      	b.n	b1f0 <__sccl+0x64>
    b1ee:	1c18      	adds	r0, r3, #0
    b1f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000b1f2 <setbuf>:
    b1f2:	b508      	push	{r3, lr}
    b1f4:	424a      	negs	r2, r1
    b1f6:	414a      	adcs	r2, r1
    b1f8:	2380      	movs	r3, #128	; 0x80
    b1fa:	0052      	lsls	r2, r2, #1
    b1fc:	00db      	lsls	r3, r3, #3
    b1fe:	f000 f801 	bl	b204 <setvbuf>
    b202:	bd08      	pop	{r3, pc}

0000b204 <setvbuf>:
    b204:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    b206:	1c1e      	adds	r6, r3, #0
    b208:	4b3c      	ldr	r3, [pc, #240]	; (b2fc <setvbuf+0xf8>)
    b20a:	1c04      	adds	r4, r0, #0
    b20c:	681d      	ldr	r5, [r3, #0]
    b20e:	1c0f      	adds	r7, r1, #0
    b210:	9201      	str	r2, [sp, #4]
    b212:	2d00      	cmp	r5, #0
    b214:	d005      	beq.n	b222 <setvbuf+0x1e>
    b216:	69ab      	ldr	r3, [r5, #24]
    b218:	2b00      	cmp	r3, #0
    b21a:	d102      	bne.n	b222 <setvbuf+0x1e>
    b21c:	1c28      	adds	r0, r5, #0
    b21e:	f7fe fb51 	bl	98c4 <__sinit>
    b222:	4b37      	ldr	r3, [pc, #220]	; (b300 <setvbuf+0xfc>)
    b224:	429c      	cmp	r4, r3
    b226:	d101      	bne.n	b22c <setvbuf+0x28>
    b228:	686c      	ldr	r4, [r5, #4]
    b22a:	e008      	b.n	b23e <setvbuf+0x3a>
    b22c:	4b35      	ldr	r3, [pc, #212]	; (b304 <setvbuf+0x100>)
    b22e:	429c      	cmp	r4, r3
    b230:	d101      	bne.n	b236 <setvbuf+0x32>
    b232:	68ac      	ldr	r4, [r5, #8]
    b234:	e003      	b.n	b23e <setvbuf+0x3a>
    b236:	4b34      	ldr	r3, [pc, #208]	; (b308 <setvbuf+0x104>)
    b238:	429c      	cmp	r4, r3
    b23a:	d100      	bne.n	b23e <setvbuf+0x3a>
    b23c:	68ec      	ldr	r4, [r5, #12]
    b23e:	9b01      	ldr	r3, [sp, #4]
    b240:	2b02      	cmp	r3, #2
    b242:	d858      	bhi.n	b2f6 <setvbuf+0xf2>
    b244:	2e00      	cmp	r6, #0
    b246:	db56      	blt.n	b2f6 <setvbuf+0xf2>
    b248:	1c28      	adds	r0, r5, #0
    b24a:	1c21      	adds	r1, r4, #0
    b24c:	f7fe fab8 	bl	97c0 <_fflush_r>
    b250:	2300      	movs	r3, #0
    b252:	6063      	str	r3, [r4, #4]
    b254:	61a3      	str	r3, [r4, #24]
    b256:	89a3      	ldrh	r3, [r4, #12]
    b258:	061b      	lsls	r3, r3, #24
    b25a:	d503      	bpl.n	b264 <setvbuf+0x60>
    b25c:	1c28      	adds	r0, r5, #0
    b25e:	6921      	ldr	r1, [r4, #16]
    b260:	f7fe fd8a 	bl	9d78 <_free_r>
    b264:	2283      	movs	r2, #131	; 0x83
    b266:	89a3      	ldrh	r3, [r4, #12]
    b268:	4393      	bics	r3, r2
    b26a:	81a3      	strh	r3, [r4, #12]
    b26c:	9b01      	ldr	r3, [sp, #4]
    b26e:	2b02      	cmp	r3, #2
    b270:	d013      	beq.n	b29a <setvbuf+0x96>
    b272:	2f00      	cmp	r7, #0
    b274:	d125      	bne.n	b2c2 <setvbuf+0xbe>
    b276:	2e00      	cmp	r6, #0
    b278:	d101      	bne.n	b27e <setvbuf+0x7a>
    b27a:	2680      	movs	r6, #128	; 0x80
    b27c:	00f6      	lsls	r6, r6, #3
    b27e:	1c30      	adds	r0, r6, #0
    b280:	f7fe fd4a 	bl	9d18 <malloc>
    b284:	1e07      	subs	r7, r0, #0
    b286:	d118      	bne.n	b2ba <setvbuf+0xb6>
    b288:	2080      	movs	r0, #128	; 0x80
    b28a:	00c0      	lsls	r0, r0, #3
    b28c:	f7fe fd44 	bl	9d18 <malloc>
    b290:	1e07      	subs	r7, r0, #0
    b292:	d110      	bne.n	b2b6 <setvbuf+0xb2>
    b294:	2001      	movs	r0, #1
    b296:	4240      	negs	r0, r0
    b298:	e000      	b.n	b29c <setvbuf+0x98>
    b29a:	2000      	movs	r0, #0
    b29c:	2202      	movs	r2, #2
    b29e:	89a3      	ldrh	r3, [r4, #12]
    b2a0:	4313      	orrs	r3, r2
    b2a2:	81a3      	strh	r3, [r4, #12]
    b2a4:	2300      	movs	r3, #0
    b2a6:	60a3      	str	r3, [r4, #8]
    b2a8:	1c23      	adds	r3, r4, #0
    b2aa:	3347      	adds	r3, #71	; 0x47
    b2ac:	6023      	str	r3, [r4, #0]
    b2ae:	6123      	str	r3, [r4, #16]
    b2b0:	2301      	movs	r3, #1
    b2b2:	6163      	str	r3, [r4, #20]
    b2b4:	e021      	b.n	b2fa <setvbuf+0xf6>
    b2b6:	2680      	movs	r6, #128	; 0x80
    b2b8:	00f6      	lsls	r6, r6, #3
    b2ba:	2280      	movs	r2, #128	; 0x80
    b2bc:	89a3      	ldrh	r3, [r4, #12]
    b2be:	4313      	orrs	r3, r2
    b2c0:	81a3      	strh	r3, [r4, #12]
    b2c2:	9b01      	ldr	r3, [sp, #4]
    b2c4:	2b01      	cmp	r3, #1
    b2c6:	d105      	bne.n	b2d4 <setvbuf+0xd0>
    b2c8:	89a3      	ldrh	r3, [r4, #12]
    b2ca:	9a01      	ldr	r2, [sp, #4]
    b2cc:	431a      	orrs	r2, r3
    b2ce:	4273      	negs	r3, r6
    b2d0:	81a2      	strh	r2, [r4, #12]
    b2d2:	61a3      	str	r3, [r4, #24]
    b2d4:	4b0d      	ldr	r3, [pc, #52]	; (b30c <setvbuf+0x108>)
    b2d6:	2000      	movs	r0, #0
    b2d8:	62ab      	str	r3, [r5, #40]	; 0x28
    b2da:	89a2      	ldrh	r2, [r4, #12]
    b2dc:	6027      	str	r7, [r4, #0]
    b2de:	6127      	str	r7, [r4, #16]
    b2e0:	6166      	str	r6, [r4, #20]
    b2e2:	0713      	lsls	r3, r2, #28
    b2e4:	d509      	bpl.n	b2fa <setvbuf+0xf6>
    b2e6:	2303      	movs	r3, #3
    b2e8:	401a      	ands	r2, r3
    b2ea:	4253      	negs	r3, r2
    b2ec:	4153      	adcs	r3, r2
    b2ee:	425b      	negs	r3, r3
    b2f0:	401e      	ands	r6, r3
    b2f2:	60a6      	str	r6, [r4, #8]
    b2f4:	e001      	b.n	b2fa <setvbuf+0xf6>
    b2f6:	2001      	movs	r0, #1
    b2f8:	4240      	negs	r0, r0
    b2fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    b2fc:	20000134 	.word	0x20000134
    b300:	0000f898 	.word	0x0000f898
    b304:	0000f8b8 	.word	0x0000f8b8
    b308:	0000f8d8 	.word	0x0000f8d8
    b30c:	00009841 	.word	0x00009841

0000b310 <nanf>:
    b310:	4800      	ldr	r0, [pc, #0]	; (b314 <nanf+0x4>)
    b312:	4770      	bx	lr
    b314:	7fc00000 	.word	0x7fc00000

0000b318 <siprintf>:
    b318:	b40e      	push	{r1, r2, r3}
    b31a:	b510      	push	{r4, lr}
    b31c:	b09d      	sub	sp, #116	; 0x74
    b31e:	a902      	add	r1, sp, #8
    b320:	9002      	str	r0, [sp, #8]
    b322:	6108      	str	r0, [r1, #16]
    b324:	480b      	ldr	r0, [pc, #44]	; (b354 <siprintf+0x3c>)
    b326:	2482      	movs	r4, #130	; 0x82
    b328:	6088      	str	r0, [r1, #8]
    b32a:	6148      	str	r0, [r1, #20]
    b32c:	2001      	movs	r0, #1
    b32e:	4240      	negs	r0, r0
    b330:	ab1f      	add	r3, sp, #124	; 0x7c
    b332:	81c8      	strh	r0, [r1, #14]
    b334:	4808      	ldr	r0, [pc, #32]	; (b358 <siprintf+0x40>)
    b336:	cb04      	ldmia	r3!, {r2}
    b338:	00a4      	lsls	r4, r4, #2
    b33a:	6800      	ldr	r0, [r0, #0]
    b33c:	9301      	str	r3, [sp, #4]
    b33e:	818c      	strh	r4, [r1, #12]
    b340:	f003 f802 	bl	e348 <_svfiprintf_r>
    b344:	2300      	movs	r3, #0
    b346:	9a02      	ldr	r2, [sp, #8]
    b348:	7013      	strb	r3, [r2, #0]
    b34a:	b01d      	add	sp, #116	; 0x74
    b34c:	bc10      	pop	{r4}
    b34e:	bc08      	pop	{r3}
    b350:	b003      	add	sp, #12
    b352:	4718      	bx	r3
    b354:	7fffffff 	.word	0x7fffffff
    b358:	20000134 	.word	0x20000134

0000b35c <siscanf>:
    b35c:	b40e      	push	{r1, r2, r3}
    b35e:	2381      	movs	r3, #129	; 0x81
    b360:	b570      	push	{r4, r5, r6, lr}
    b362:	b09d      	sub	sp, #116	; 0x74
    b364:	ac02      	add	r4, sp, #8
    b366:	ad21      	add	r5, sp, #132	; 0x84
    b368:	009b      	lsls	r3, r3, #2
    b36a:	cd40      	ldmia	r5!, {r6}
    b36c:	81a3      	strh	r3, [r4, #12]
    b36e:	9002      	str	r0, [sp, #8]
    b370:	9006      	str	r0, [sp, #24]
    b372:	f000 f873 	bl	b45c <strlen>
    b376:	4b0b      	ldr	r3, [pc, #44]	; (b3a4 <siscanf+0x48>)
    b378:	6060      	str	r0, [r4, #4]
    b37a:	6263      	str	r3, [r4, #36]	; 0x24
    b37c:	2300      	movs	r3, #0
    b37e:	6363      	str	r3, [r4, #52]	; 0x34
    b380:	64a3      	str	r3, [r4, #72]	; 0x48
    b382:	3b01      	subs	r3, #1
    b384:	81e3      	strh	r3, [r4, #14]
    b386:	4b08      	ldr	r3, [pc, #32]	; (b3a8 <siscanf+0x4c>)
    b388:	6160      	str	r0, [r4, #20]
    b38a:	1c21      	adds	r1, r4, #0
    b38c:	6818      	ldr	r0, [r3, #0]
    b38e:	1c32      	adds	r2, r6, #0
    b390:	1c2b      	adds	r3, r5, #0
    b392:	9501      	str	r5, [sp, #4]
    b394:	f003 f92a 	bl	e5ec <__ssvfiscanf_r>
    b398:	b01d      	add	sp, #116	; 0x74
    b39a:	bc70      	pop	{r4, r5, r6}
    b39c:	bc08      	pop	{r3}
    b39e:	b003      	add	sp, #12
    b3a0:	4718      	bx	r3
    b3a2:	46c0      	nop			; (mov r8, r8)
    b3a4:	0000b3d5 	.word	0x0000b3d5
    b3a8:	20000134 	.word	0x20000134

0000b3ac <__sread>:
    b3ac:	b538      	push	{r3, r4, r5, lr}
    b3ae:	1c0c      	adds	r4, r1, #0
    b3b0:	250e      	movs	r5, #14
    b3b2:	5f49      	ldrsh	r1, [r1, r5]
    b3b4:	f003 fa92 	bl	e8dc <_read_r>
    b3b8:	2800      	cmp	r0, #0
    b3ba:	db03      	blt.n	b3c4 <__sread+0x18>
    b3bc:	6d63      	ldr	r3, [r4, #84]	; 0x54
    b3be:	181b      	adds	r3, r3, r0
    b3c0:	6563      	str	r3, [r4, #84]	; 0x54
    b3c2:	e003      	b.n	b3cc <__sread+0x20>
    b3c4:	89a2      	ldrh	r2, [r4, #12]
    b3c6:	4b02      	ldr	r3, [pc, #8]	; (b3d0 <__sread+0x24>)
    b3c8:	4013      	ands	r3, r2
    b3ca:	81a3      	strh	r3, [r4, #12]
    b3cc:	bd38      	pop	{r3, r4, r5, pc}
    b3ce:	46c0      	nop			; (mov r8, r8)
    b3d0:	ffffefff 	.word	0xffffefff

0000b3d4 <__seofread>:
    b3d4:	2000      	movs	r0, #0
    b3d6:	4770      	bx	lr

0000b3d8 <__swrite>:
    b3d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b3da:	1c1e      	adds	r6, r3, #0
    b3dc:	898b      	ldrh	r3, [r1, #12]
    b3de:	1c05      	adds	r5, r0, #0
    b3e0:	1c0c      	adds	r4, r1, #0
    b3e2:	1c17      	adds	r7, r2, #0
    b3e4:	05db      	lsls	r3, r3, #23
    b3e6:	d505      	bpl.n	b3f4 <__swrite+0x1c>
    b3e8:	230e      	movs	r3, #14
    b3ea:	5ec9      	ldrsh	r1, [r1, r3]
    b3ec:	2200      	movs	r2, #0
    b3ee:	2302      	movs	r3, #2
    b3f0:	f002 faea 	bl	d9c8 <_lseek_r>
    b3f4:	89a2      	ldrh	r2, [r4, #12]
    b3f6:	4b05      	ldr	r3, [pc, #20]	; (b40c <__swrite+0x34>)
    b3f8:	1c28      	adds	r0, r5, #0
    b3fa:	4013      	ands	r3, r2
    b3fc:	81a3      	strh	r3, [r4, #12]
    b3fe:	1c3a      	adds	r2, r7, #0
    b400:	230e      	movs	r3, #14
    b402:	5ee1      	ldrsh	r1, [r4, r3]
    b404:	1c33      	adds	r3, r6, #0
    b406:	f001 f845 	bl	c494 <_write_r>
    b40a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b40c:	ffffefff 	.word	0xffffefff

0000b410 <__sseek>:
    b410:	b538      	push	{r3, r4, r5, lr}
    b412:	1c0c      	adds	r4, r1, #0
    b414:	250e      	movs	r5, #14
    b416:	5f49      	ldrsh	r1, [r1, r5]
    b418:	f002 fad6 	bl	d9c8 <_lseek_r>
    b41c:	89a3      	ldrh	r3, [r4, #12]
    b41e:	1c42      	adds	r2, r0, #1
    b420:	d103      	bne.n	b42a <__sseek+0x1a>
    b422:	4a05      	ldr	r2, [pc, #20]	; (b438 <__sseek+0x28>)
    b424:	4013      	ands	r3, r2
    b426:	81a3      	strh	r3, [r4, #12]
    b428:	e004      	b.n	b434 <__sseek+0x24>
    b42a:	2280      	movs	r2, #128	; 0x80
    b42c:	0152      	lsls	r2, r2, #5
    b42e:	4313      	orrs	r3, r2
    b430:	81a3      	strh	r3, [r4, #12]
    b432:	6560      	str	r0, [r4, #84]	; 0x54
    b434:	bd38      	pop	{r3, r4, r5, pc}
    b436:	46c0      	nop			; (mov r8, r8)
    b438:	ffffefff 	.word	0xffffefff

0000b43c <__sclose>:
    b43c:	b508      	push	{r3, lr}
    b43e:	230e      	movs	r3, #14
    b440:	5ec9      	ldrsh	r1, [r1, r3]
    b442:	f001 f8af 	bl	c5a4 <_close_r>
    b446:	bd08      	pop	{r3, pc}

0000b448 <strcmp>:
    b448:	7802      	ldrb	r2, [r0, #0]
    b44a:	780b      	ldrb	r3, [r1, #0]
    b44c:	2a00      	cmp	r2, #0
    b44e:	d003      	beq.n	b458 <strcmp+0x10>
    b450:	3001      	adds	r0, #1
    b452:	3101      	adds	r1, #1
    b454:	429a      	cmp	r2, r3
    b456:	d0f7      	beq.n	b448 <strcmp>
    b458:	1ad0      	subs	r0, r2, r3
    b45a:	4770      	bx	lr

0000b45c <strlen>:
    b45c:	2300      	movs	r3, #0
    b45e:	5cc2      	ldrb	r2, [r0, r3]
    b460:	3301      	adds	r3, #1
    b462:	2a00      	cmp	r2, #0
    b464:	d1fb      	bne.n	b45e <strlen+0x2>
    b466:	1e58      	subs	r0, r3, #1
    b468:	4770      	bx	lr

0000b46a <strncmp>:
    b46a:	2300      	movs	r3, #0
    b46c:	b530      	push	{r4, r5, lr}
    b46e:	429a      	cmp	r2, r3
    b470:	d00d      	beq.n	b48e <strncmp+0x24>
    b472:	3a01      	subs	r2, #1
    b474:	5cc4      	ldrb	r4, [r0, r3]
    b476:	5ccd      	ldrb	r5, [r1, r3]
    b478:	42ac      	cmp	r4, r5
    b47a:	d102      	bne.n	b482 <strncmp+0x18>
    b47c:	4293      	cmp	r3, r2
    b47e:	d102      	bne.n	b486 <strncmp+0x1c>
    b480:	1c25      	adds	r5, r4, #0
    b482:	1b63      	subs	r3, r4, r5
    b484:	e003      	b.n	b48e <strncmp+0x24>
    b486:	3301      	adds	r3, #1
    b488:	2c00      	cmp	r4, #0
    b48a:	d1f3      	bne.n	b474 <strncmp+0xa>
    b48c:	e7f8      	b.n	b480 <strncmp+0x16>
    b48e:	1c18      	adds	r0, r3, #0
    b490:	bd30      	pop	{r4, r5, pc}

0000b492 <strncpy>:
    b492:	1c03      	adds	r3, r0, #0
    b494:	b530      	push	{r4, r5, lr}
    b496:	2a00      	cmp	r2, #0
    b498:	d007      	beq.n	b4aa <strncpy+0x18>
    b49a:	780c      	ldrb	r4, [r1, #0]
    b49c:	3301      	adds	r3, #1
    b49e:	1e5d      	subs	r5, r3, #1
    b4a0:	3a01      	subs	r2, #1
    b4a2:	702c      	strb	r4, [r5, #0]
    b4a4:	3101      	adds	r1, #1
    b4a6:	2c00      	cmp	r4, #0
    b4a8:	d1f5      	bne.n	b496 <strncpy+0x4>
    b4aa:	189a      	adds	r2, r3, r2
    b4ac:	4293      	cmp	r3, r2
    b4ae:	d003      	beq.n	b4b8 <strncpy+0x26>
    b4b0:	2100      	movs	r1, #0
    b4b2:	7019      	strb	r1, [r3, #0]
    b4b4:	3301      	adds	r3, #1
    b4b6:	e7f9      	b.n	b4ac <strncpy+0x1a>
    b4b8:	bd30      	pop	{r4, r5, pc}

0000b4ba <match>:
    b4ba:	b530      	push	{r4, r5, lr}
    b4bc:	6803      	ldr	r3, [r0, #0]
    b4be:	780c      	ldrb	r4, [r1, #0]
    b4c0:	3301      	adds	r3, #1
    b4c2:	2c00      	cmp	r4, #0
    b4c4:	d00a      	beq.n	b4dc <match+0x22>
    b4c6:	781a      	ldrb	r2, [r3, #0]
    b4c8:	1c15      	adds	r5, r2, #0
    b4ca:	3d41      	subs	r5, #65	; 0x41
    b4cc:	2d19      	cmp	r5, #25
    b4ce:	d800      	bhi.n	b4d2 <match+0x18>
    b4d0:	3220      	adds	r2, #32
    b4d2:	3101      	adds	r1, #1
    b4d4:	42a2      	cmp	r2, r4
    b4d6:	d0f2      	beq.n	b4be <match+0x4>
    b4d8:	2000      	movs	r0, #0
    b4da:	e001      	b.n	b4e0 <match+0x26>
    b4dc:	6003      	str	r3, [r0, #0]
    b4de:	2001      	movs	r0, #1
    b4e0:	bd30      	pop	{r4, r5, pc}
	...

0000b4e4 <sulp>:
    b4e4:	b570      	push	{r4, r5, r6, lr}
    b4e6:	1c16      	adds	r6, r2, #0
    b4e8:	1c0d      	adds	r5, r1, #0
    b4ea:	f002 fd6d 	bl	dfc8 <__ulp>
    b4ee:	2e00      	cmp	r6, #0
    b4f0:	d00b      	beq.n	b50a <sulp+0x26>
    b4f2:	226b      	movs	r2, #107	; 0x6b
    b4f4:	006b      	lsls	r3, r5, #1
    b4f6:	0d5b      	lsrs	r3, r3, #21
    b4f8:	1ad3      	subs	r3, r2, r3
    b4fa:	2b00      	cmp	r3, #0
    b4fc:	dd05      	ble.n	b50a <sulp+0x26>
    b4fe:	4d03      	ldr	r5, [pc, #12]	; (b50c <sulp+0x28>)
    b500:	051c      	lsls	r4, r3, #20
    b502:	2200      	movs	r2, #0
    b504:	1963      	adds	r3, r4, r5
    b506:	f7fd f88b 	bl	8620 <__aeabi_dmul>
    b50a:	bd70      	pop	{r4, r5, r6, pc}
    b50c:	3ff00000 	.word	0x3ff00000

0000b510 <_strtod_r>:
    b510:	2300      	movs	r3, #0
    b512:	b5f0      	push	{r4, r5, r6, r7, lr}
    b514:	b0a3      	sub	sp, #140	; 0x8c
    b516:	931e      	str	r3, [sp, #120]	; 0x78
    b518:	2600      	movs	r6, #0
    b51a:	2700      	movs	r7, #0
    b51c:	1c0b      	adds	r3, r1, #0
    b51e:	9003      	str	r0, [sp, #12]
    b520:	9106      	str	r1, [sp, #24]
    b522:	9219      	str	r2, [sp, #100]	; 0x64
    b524:	931d      	str	r3, [sp, #116]	; 0x74
    b526:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b528:	781a      	ldrb	r2, [r3, #0]
    b52a:	2a0d      	cmp	r2, #13
    b52c:	d805      	bhi.n	b53a <_strtod_r+0x2a>
    b52e:	2a09      	cmp	r2, #9
    b530:	d214      	bcs.n	b55c <_strtod_r+0x4c>
    b532:	2a00      	cmp	r2, #0
    b534:	d100      	bne.n	b538 <_strtod_r+0x28>
    b536:	e1c3      	b.n	b8c0 <_strtod_r+0x3b0>
    b538:	e012      	b.n	b560 <_strtod_r+0x50>
    b53a:	2a2b      	cmp	r2, #43	; 0x2b
    b53c:	d006      	beq.n	b54c <_strtod_r+0x3c>
    b53e:	2a2d      	cmp	r2, #45	; 0x2d
    b540:	d002      	beq.n	b548 <_strtod_r+0x38>
    b542:	2a20      	cmp	r2, #32
    b544:	d10c      	bne.n	b560 <_strtod_r+0x50>
    b546:	e009      	b.n	b55c <_strtod_r+0x4c>
    b548:	2201      	movs	r2, #1
    b54a:	e000      	b.n	b54e <_strtod_r+0x3e>
    b54c:	2200      	movs	r2, #0
    b54e:	920d      	str	r2, [sp, #52]	; 0x34
    b550:	1c5a      	adds	r2, r3, #1
    b552:	921d      	str	r2, [sp, #116]	; 0x74
    b554:	785b      	ldrb	r3, [r3, #1]
    b556:	2b00      	cmp	r3, #0
    b558:	d104      	bne.n	b564 <_strtod_r+0x54>
    b55a:	e1b1      	b.n	b8c0 <_strtod_r+0x3b0>
    b55c:	3301      	adds	r3, #1
    b55e:	e7e1      	b.n	b524 <_strtod_r+0x14>
    b560:	2300      	movs	r3, #0
    b562:	930d      	str	r3, [sp, #52]	; 0x34
    b564:	2200      	movs	r2, #0
    b566:	9d1d      	ldr	r5, [sp, #116]	; 0x74
    b568:	920a      	str	r2, [sp, #40]	; 0x28
    b56a:	782b      	ldrb	r3, [r5, #0]
    b56c:	2b30      	cmp	r3, #48	; 0x30
    b56e:	d15d      	bne.n	b62c <_strtod_r+0x11c>
    b570:	786b      	ldrb	r3, [r5, #1]
    b572:	2b58      	cmp	r3, #88	; 0x58
    b574:	d001      	beq.n	b57a <_strtod_r+0x6a>
    b576:	2b78      	cmp	r3, #120	; 0x78
    b578:	d14c      	bne.n	b614 <_strtod_r+0x104>
    b57a:	ab1e      	add	r3, sp, #120	; 0x78
    b57c:	9300      	str	r3, [sp, #0]
    b57e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b580:	9803      	ldr	r0, [sp, #12]
    b582:	9301      	str	r3, [sp, #4]
    b584:	a91d      	add	r1, sp, #116	; 0x74
    b586:	4ac2      	ldr	r2, [pc, #776]	; (b890 <_strtod_r+0x380>)
    b588:	ab1f      	add	r3, sp, #124	; 0x7c
    b58a:	f001 ff38 	bl	d3fe <__gethex>
    b58e:	2407      	movs	r4, #7
    b590:	9004      	str	r0, [sp, #16]
    b592:	4004      	ands	r4, r0
    b594:	d101      	bne.n	b59a <_strtod_r+0x8a>
    b596:	f000 fda7 	bl	c0e8 <_strtod_r+0xbd8>
    b59a:	2c06      	cmp	r4, #6
    b59c:	d105      	bne.n	b5aa <_strtod_r+0x9a>
    b59e:	2300      	movs	r3, #0
    b5a0:	3501      	adds	r5, #1
    b5a2:	951d      	str	r5, [sp, #116]	; 0x74
    b5a4:	930d      	str	r3, [sp, #52]	; 0x34
    b5a6:	f000 fd9f 	bl	c0e8 <_strtod_r+0xbd8>
    b5aa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    b5ac:	2a00      	cmp	r2, #0
    b5ae:	d007      	beq.n	b5c0 <_strtod_r+0xb0>
    b5b0:	a820      	add	r0, sp, #128	; 0x80
    b5b2:	2135      	movs	r1, #53	; 0x35
    b5b4:	f002 fdfc 	bl	e1b0 <__copybits>
    b5b8:	9803      	ldr	r0, [sp, #12]
    b5ba:	991e      	ldr	r1, [sp, #120]	; 0x78
    b5bc:	f002 fa64 	bl	da88 <_Bfree>
    b5c0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    b5c2:	2c06      	cmp	r4, #6
    b5c4:	d81c      	bhi.n	b600 <_strtod_r+0xf0>
    b5c6:	1c20      	adds	r0, r4, #0
    b5c8:	f003 f9a8 	bl	e91c <__gnu_thumb1_case_uqi>
    b5cc:	14070a04 	.word	0x14070a04
    b5d0:	0a17      	.short	0x0a17
    b5d2:	04          	.byte	0x04
    b5d3:	00          	.byte	0x00
    b5d4:	2700      	movs	r7, #0
    b5d6:	1c3e      	adds	r6, r7, #0
    b5d8:	e012      	b.n	b600 <_strtod_r+0xf0>
    b5da:	9e20      	ldr	r6, [sp, #128]	; 0x80
    b5dc:	9f21      	ldr	r7, [sp, #132]	; 0x84
    b5de:	e00f      	b.n	b600 <_strtod_r+0xf0>
    b5e0:	4aac      	ldr	r2, [pc, #688]	; (b894 <_strtod_r+0x384>)
    b5e2:	9921      	ldr	r1, [sp, #132]	; 0x84
    b5e4:	189b      	adds	r3, r3, r2
    b5e6:	4aac      	ldr	r2, [pc, #688]	; (b898 <_strtod_r+0x388>)
    b5e8:	051b      	lsls	r3, r3, #20
    b5ea:	400a      	ands	r2, r1
    b5ec:	4313      	orrs	r3, r2
    b5ee:	9e20      	ldr	r6, [sp, #128]	; 0x80
    b5f0:	1c1f      	adds	r7, r3, #0
    b5f2:	e005      	b.n	b600 <_strtod_r+0xf0>
    b5f4:	4fa9      	ldr	r7, [pc, #676]	; (b89c <_strtod_r+0x38c>)
    b5f6:	2600      	movs	r6, #0
    b5f8:	e002      	b.n	b600 <_strtod_r+0xf0>
    b5fa:	2601      	movs	r6, #1
    b5fc:	4fa8      	ldr	r7, [pc, #672]	; (b8a0 <_strtod_r+0x390>)
    b5fe:	4276      	negs	r6, r6
    b600:	9b04      	ldr	r3, [sp, #16]
    b602:	071b      	lsls	r3, r3, #28
    b604:	d401      	bmi.n	b60a <_strtod_r+0xfa>
    b606:	f000 fd6f 	bl	c0e8 <_strtod_r+0xbd8>
    b60a:	2380      	movs	r3, #128	; 0x80
    b60c:	061b      	lsls	r3, r3, #24
    b60e:	431f      	orrs	r7, r3
    b610:	f000 fd6a 	bl	c0e8 <_strtod_r+0xbd8>
    b614:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b616:	1c5a      	adds	r2, r3, #1
    b618:	921d      	str	r2, [sp, #116]	; 0x74
    b61a:	785b      	ldrb	r3, [r3, #1]
    b61c:	2b30      	cmp	r3, #48	; 0x30
    b61e:	d0f9      	beq.n	b614 <_strtod_r+0x104>
    b620:	2b00      	cmp	r3, #0
    b622:	d101      	bne.n	b628 <_strtod_r+0x118>
    b624:	f000 fd60 	bl	c0e8 <_strtod_r+0xbd8>
    b628:	2301      	movs	r3, #1
    b62a:	930a      	str	r3, [sp, #40]	; 0x28
    b62c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b62e:	930c      	str	r3, [sp, #48]	; 0x30
    b630:	2300      	movs	r3, #0
    b632:	9305      	str	r3, [sp, #20]
    b634:	9307      	str	r3, [sp, #28]
    b636:	9304      	str	r3, [sp, #16]
    b638:	9c1d      	ldr	r4, [sp, #116]	; 0x74
    b63a:	7823      	ldrb	r3, [r4, #0]
    b63c:	1c1a      	adds	r2, r3, #0
    b63e:	3a30      	subs	r2, #48	; 0x30
    b640:	9308      	str	r3, [sp, #32]
    b642:	b2d3      	uxtb	r3, r2
    b644:	2b09      	cmp	r3, #9
    b646:	d812      	bhi.n	b66e <_strtod_r+0x15e>
    b648:	9904      	ldr	r1, [sp, #16]
    b64a:	230a      	movs	r3, #10
    b64c:	2908      	cmp	r1, #8
    b64e:	dc04      	bgt.n	b65a <_strtod_r+0x14a>
    b650:	9907      	ldr	r1, [sp, #28]
    b652:	434b      	muls	r3, r1
    b654:	18d3      	adds	r3, r2, r3
    b656:	9307      	str	r3, [sp, #28]
    b658:	e003      	b.n	b662 <_strtod_r+0x152>
    b65a:	9905      	ldr	r1, [sp, #20]
    b65c:	434b      	muls	r3, r1
    b65e:	18d3      	adds	r3, r2, r3
    b660:	9305      	str	r3, [sp, #20]
    b662:	9b04      	ldr	r3, [sp, #16]
    b664:	3401      	adds	r4, #1
    b666:	3301      	adds	r3, #1
    b668:	9304      	str	r3, [sp, #16]
    b66a:	941d      	str	r4, [sp, #116]	; 0x74
    b66c:	e7e4      	b.n	b638 <_strtod_r+0x128>
    b66e:	9803      	ldr	r0, [sp, #12]
    b670:	f002 f9a6 	bl	d9c0 <_localeconv_r>
    b674:	6805      	ldr	r5, [r0, #0]
    b676:	9803      	ldr	r0, [sp, #12]
    b678:	f002 f9a2 	bl	d9c0 <_localeconv_r>
    b67c:	6800      	ldr	r0, [r0, #0]
    b67e:	f7ff feed 	bl	b45c <strlen>
    b682:	1c29      	adds	r1, r5, #0
    b684:	1c02      	adds	r2, r0, #0
    b686:	1c20      	adds	r0, r4, #0
    b688:	f7ff feef 	bl	b46a <strncmp>
    b68c:	1e05      	subs	r5, r0, #0
    b68e:	d005      	beq.n	b69c <_strtod_r+0x18c>
    b690:	2000      	movs	r0, #0
    b692:	9b08      	ldr	r3, [sp, #32]
    b694:	9c04      	ldr	r4, [sp, #16]
    b696:	1c01      	adds	r1, r0, #0
    b698:	9008      	str	r0, [sp, #32]
    b69a:	e05a      	b.n	b752 <_strtod_r+0x242>
    b69c:	9803      	ldr	r0, [sp, #12]
    b69e:	f002 f98f 	bl	d9c0 <_localeconv_r>
    b6a2:	6800      	ldr	r0, [r0, #0]
    b6a4:	f7ff feda 	bl	b45c <strlen>
    b6a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b6aa:	9a04      	ldr	r2, [sp, #16]
    b6ac:	1818      	adds	r0, r3, r0
    b6ae:	901d      	str	r0, [sp, #116]	; 0x74
    b6b0:	7803      	ldrb	r3, [r0, #0]
    b6b2:	1e10      	subs	r0, r2, #0
    b6b4:	d141      	bne.n	b73a <_strtod_r+0x22a>
    b6b6:	2b30      	cmp	r3, #48	; 0x30
    b6b8:	d105      	bne.n	b6c6 <_strtod_r+0x1b6>
    b6ba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b6bc:	3001      	adds	r0, #1
    b6be:	1c5a      	adds	r2, r3, #1
    b6c0:	921d      	str	r2, [sp, #116]	; 0x74
    b6c2:	785b      	ldrb	r3, [r3, #1]
    b6c4:	e7f7      	b.n	b6b6 <_strtod_r+0x1a6>
    b6c6:	1c1a      	adds	r2, r3, #0
    b6c8:	3a31      	subs	r2, #49	; 0x31
    b6ca:	2a08      	cmp	r2, #8
    b6cc:	d83d      	bhi.n	b74a <_strtod_r+0x23a>
    b6ce:	1c01      	adds	r1, r0, #0
    b6d0:	2000      	movs	r0, #0
    b6d2:	1c04      	adds	r4, r0, #0
    b6d4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    b6d6:	920c      	str	r2, [sp, #48]	; 0x30
    b6d8:	3b30      	subs	r3, #48	; 0x30
    b6da:	1c42      	adds	r2, r0, #1
    b6dc:	2b00      	cmp	r3, #0
    b6de:	d026      	beq.n	b72e <_strtod_r+0x21e>
    b6e0:	1889      	adds	r1, r1, r2
    b6e2:	1c22      	adds	r2, r4, #0
    b6e4:	1900      	adds	r0, r0, r4
    b6e6:	4282      	cmp	r2, r0
    b6e8:	d00f      	beq.n	b70a <_strtod_r+0x1fa>
    b6ea:	3201      	adds	r2, #1
    b6ec:	1e54      	subs	r4, r2, #1
    b6ee:	2c08      	cmp	r4, #8
    b6f0:	dc04      	bgt.n	b6fc <_strtod_r+0x1ec>
    b6f2:	240a      	movs	r4, #10
    b6f4:	9d07      	ldr	r5, [sp, #28]
    b6f6:	4365      	muls	r5, r4
    b6f8:	9507      	str	r5, [sp, #28]
    b6fa:	e7f4      	b.n	b6e6 <_strtod_r+0x1d6>
    b6fc:	2a10      	cmp	r2, #16
    b6fe:	dcf2      	bgt.n	b6e6 <_strtod_r+0x1d6>
    b700:	240a      	movs	r4, #10
    b702:	9d05      	ldr	r5, [sp, #20]
    b704:	4365      	muls	r5, r4
    b706:	9505      	str	r5, [sp, #20]
    b708:	e7ed      	b.n	b6e6 <_strtod_r+0x1d6>
    b70a:	1c54      	adds	r4, r2, #1
    b70c:	2a08      	cmp	r2, #8
    b70e:	dc06      	bgt.n	b71e <_strtod_r+0x20e>
    b710:	220a      	movs	r2, #10
    b712:	9807      	ldr	r0, [sp, #28]
    b714:	4342      	muls	r2, r0
    b716:	18d3      	adds	r3, r2, r3
    b718:	9307      	str	r3, [sp, #28]
    b71a:	2200      	movs	r2, #0
    b71c:	e007      	b.n	b72e <_strtod_r+0x21e>
    b71e:	2200      	movs	r2, #0
    b720:	2c10      	cmp	r4, #16
    b722:	dc04      	bgt.n	b72e <_strtod_r+0x21e>
    b724:	200a      	movs	r0, #10
    b726:	9d05      	ldr	r5, [sp, #20]
    b728:	4368      	muls	r0, r5
    b72a:	18c3      	adds	r3, r0, r3
    b72c:	9305      	str	r3, [sp, #20]
    b72e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b730:	1c58      	adds	r0, r3, #1
    b732:	901d      	str	r0, [sp, #116]	; 0x74
    b734:	785b      	ldrb	r3, [r3, #1]
    b736:	1c10      	adds	r0, r2, #0
    b738:	e002      	b.n	b740 <_strtod_r+0x230>
    b73a:	1c28      	adds	r0, r5, #0
    b73c:	1c29      	adds	r1, r5, #0
    b73e:	9c04      	ldr	r4, [sp, #16]
    b740:	1c1a      	adds	r2, r3, #0
    b742:	3a30      	subs	r2, #48	; 0x30
    b744:	2a09      	cmp	r2, #9
    b746:	d9c7      	bls.n	b6d8 <_strtod_r+0x1c8>
    b748:	e001      	b.n	b74e <_strtod_r+0x23e>
    b74a:	2400      	movs	r4, #0
    b74c:	1c21      	adds	r1, r4, #0
    b74e:	2201      	movs	r2, #1
    b750:	9208      	str	r2, [sp, #32]
    b752:	2220      	movs	r2, #32
    b754:	1c1d      	adds	r5, r3, #0
    b756:	4395      	bics	r5, r2
    b758:	2200      	movs	r2, #0
    b75a:	2d45      	cmp	r5, #69	; 0x45
    b75c:	d157      	bne.n	b80e <_strtod_r+0x2fe>
    b75e:	1c23      	adds	r3, r4, #0
    b760:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    b762:	4303      	orrs	r3, r0
    b764:	432b      	orrs	r3, r5
    b766:	4293      	cmp	r3, r2
    b768:	d100      	bne.n	b76c <_strtod_r+0x25c>
    b76a:	e0a9      	b.n	b8c0 <_strtod_r+0x3b0>
    b76c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b76e:	9306      	str	r3, [sp, #24]
    b770:	3301      	adds	r3, #1
    b772:	931d      	str	r3, [sp, #116]	; 0x74
    b774:	9b06      	ldr	r3, [sp, #24]
    b776:	785b      	ldrb	r3, [r3, #1]
    b778:	2b2b      	cmp	r3, #43	; 0x2b
    b77a:	d006      	beq.n	b78a <_strtod_r+0x27a>
    b77c:	2b2d      	cmp	r3, #45	; 0x2d
    b77e:	d001      	beq.n	b784 <_strtod_r+0x274>
    b780:	9209      	str	r2, [sp, #36]	; 0x24
    b782:	e008      	b.n	b796 <_strtod_r+0x286>
    b784:	2301      	movs	r3, #1
    b786:	9309      	str	r3, [sp, #36]	; 0x24
    b788:	e000      	b.n	b78c <_strtod_r+0x27c>
    b78a:	9209      	str	r2, [sp, #36]	; 0x24
    b78c:	9b06      	ldr	r3, [sp, #24]
    b78e:	3302      	adds	r3, #2
    b790:	931d      	str	r3, [sp, #116]	; 0x74
    b792:	9b06      	ldr	r3, [sp, #24]
    b794:	789b      	ldrb	r3, [r3, #2]
    b796:	1c1a      	adds	r2, r3, #0
    b798:	3a30      	subs	r2, #48	; 0x30
    b79a:	2a09      	cmp	r2, #9
    b79c:	d834      	bhi.n	b808 <_strtod_r+0x2f8>
    b79e:	2b30      	cmp	r3, #48	; 0x30
    b7a0:	d104      	bne.n	b7ac <_strtod_r+0x29c>
    b7a2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b7a4:	1c5a      	adds	r2, r3, #1
    b7a6:	921d      	str	r2, [sp, #116]	; 0x74
    b7a8:	785b      	ldrb	r3, [r3, #1]
    b7aa:	e7f8      	b.n	b79e <_strtod_r+0x28e>
    b7ac:	2531      	movs	r5, #49	; 0x31
    b7ae:	426d      	negs	r5, r5
    b7b0:	46ac      	mov	ip, r5
    b7b2:	449c      	add	ip, r3
    b7b4:	4665      	mov	r5, ip
    b7b6:	2200      	movs	r2, #0
    b7b8:	2d08      	cmp	r5, #8
    b7ba:	d828      	bhi.n	b80e <_strtod_r+0x2fe>
    b7bc:	3b30      	subs	r3, #48	; 0x30
    b7be:	930b      	str	r3, [sp, #44]	; 0x2c
    b7c0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b7c2:	930e      	str	r3, [sp, #56]	; 0x38
    b7c4:	2530      	movs	r5, #48	; 0x30
    b7c6:	426d      	negs	r5, r5
    b7c8:	46ac      	mov	ip, r5
    b7ca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b7cc:	1c5a      	adds	r2, r3, #1
    b7ce:	921d      	str	r2, [sp, #116]	; 0x74
    b7d0:	785b      	ldrb	r3, [r3, #1]
    b7d2:	449c      	add	ip, r3
    b7d4:	4665      	mov	r5, ip
    b7d6:	2d09      	cmp	r5, #9
    b7d8:	d806      	bhi.n	b7e8 <_strtod_r+0x2d8>
    b7da:	220a      	movs	r2, #10
    b7dc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    b7de:	436a      	muls	r2, r5
    b7e0:	18d3      	adds	r3, r2, r3
    b7e2:	3b30      	subs	r3, #48	; 0x30
    b7e4:	930b      	str	r3, [sp, #44]	; 0x2c
    b7e6:	e7ed      	b.n	b7c4 <_strtod_r+0x2b4>
    b7e8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    b7ea:	1b52      	subs	r2, r2, r5
    b7ec:	1e15      	subs	r5, r2, #0
    b7ee:	4a2d      	ldr	r2, [pc, #180]	; (b8a4 <_strtod_r+0x394>)
    b7f0:	4694      	mov	ip, r2
    b7f2:	2d08      	cmp	r5, #8
    b7f4:	dc03      	bgt.n	b7fe <_strtod_r+0x2ee>
    b7f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b7f8:	4562      	cmp	r2, ip
    b7fa:	dd00      	ble.n	b7fe <_strtod_r+0x2ee>
    b7fc:	4662      	mov	r2, ip
    b7fe:	9d09      	ldr	r5, [sp, #36]	; 0x24
    b800:	2d00      	cmp	r5, #0
    b802:	d004      	beq.n	b80e <_strtod_r+0x2fe>
    b804:	4252      	negs	r2, r2
    b806:	e002      	b.n	b80e <_strtod_r+0x2fe>
    b808:	9a06      	ldr	r2, [sp, #24]
    b80a:	921d      	str	r2, [sp, #116]	; 0x74
    b80c:	2200      	movs	r2, #0
    b80e:	2c00      	cmp	r4, #0
    b810:	d161      	bne.n	b8d6 <_strtod_r+0x3c6>
    b812:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b814:	4310      	orrs	r0, r2
    b816:	d001      	beq.n	b81c <_strtod_r+0x30c>
    b818:	f000 fc66 	bl	c0e8 <_strtod_r+0xbd8>
    b81c:	9a08      	ldr	r2, [sp, #32]
    b81e:	2a00      	cmp	r2, #0
    b820:	d14e      	bne.n	b8c0 <_strtod_r+0x3b0>
    b822:	2b4e      	cmp	r3, #78	; 0x4e
    b824:	d01c      	beq.n	b860 <_strtod_r+0x350>
    b826:	dc02      	bgt.n	b82e <_strtod_r+0x31e>
    b828:	2b49      	cmp	r3, #73	; 0x49
    b82a:	d005      	beq.n	b838 <_strtod_r+0x328>
    b82c:	e048      	b.n	b8c0 <_strtod_r+0x3b0>
    b82e:	2b69      	cmp	r3, #105	; 0x69
    b830:	d002      	beq.n	b838 <_strtod_r+0x328>
    b832:	2b6e      	cmp	r3, #110	; 0x6e
    b834:	d014      	beq.n	b860 <_strtod_r+0x350>
    b836:	e043      	b.n	b8c0 <_strtod_r+0x3b0>
    b838:	a81d      	add	r0, sp, #116	; 0x74
    b83a:	491b      	ldr	r1, [pc, #108]	; (b8a8 <_strtod_r+0x398>)
    b83c:	f7ff fe3d 	bl	b4ba <match>
    b840:	2800      	cmp	r0, #0
    b842:	d03d      	beq.n	b8c0 <_strtod_r+0x3b0>
    b844:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b846:	a81d      	add	r0, sp, #116	; 0x74
    b848:	3b01      	subs	r3, #1
    b84a:	4918      	ldr	r1, [pc, #96]	; (b8ac <_strtod_r+0x39c>)
    b84c:	931d      	str	r3, [sp, #116]	; 0x74
    b84e:	f7ff fe34 	bl	b4ba <match>
    b852:	2800      	cmp	r0, #0
    b854:	d102      	bne.n	b85c <_strtod_r+0x34c>
    b856:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b858:	3301      	adds	r3, #1
    b85a:	931d      	str	r3, [sp, #116]	; 0x74
    b85c:	4f0f      	ldr	r7, [pc, #60]	; (b89c <_strtod_r+0x38c>)
    b85e:	e02c      	b.n	b8ba <_strtod_r+0x3aa>
    b860:	a81d      	add	r0, sp, #116	; 0x74
    b862:	4913      	ldr	r1, [pc, #76]	; (b8b0 <_strtod_r+0x3a0>)
    b864:	f7ff fe29 	bl	b4ba <match>
    b868:	2800      	cmp	r0, #0
    b86a:	d029      	beq.n	b8c0 <_strtod_r+0x3b0>
    b86c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b86e:	781b      	ldrb	r3, [r3, #0]
    b870:	2b28      	cmp	r3, #40	; 0x28
    b872:	d121      	bne.n	b8b8 <_strtod_r+0x3a8>
    b874:	a81d      	add	r0, sp, #116	; 0x74
    b876:	490f      	ldr	r1, [pc, #60]	; (b8b4 <_strtod_r+0x3a4>)
    b878:	aa20      	add	r2, sp, #128	; 0x80
    b87a:	f001 fff6 	bl	d86a <__hexnan>
    b87e:	2805      	cmp	r0, #5
    b880:	d11a      	bne.n	b8b8 <_strtod_r+0x3a8>
    b882:	9b21      	ldr	r3, [sp, #132]	; 0x84
    b884:	4a05      	ldr	r2, [pc, #20]	; (b89c <_strtod_r+0x38c>)
    b886:	9e20      	ldr	r6, [sp, #128]	; 0x80
    b888:	431a      	orrs	r2, r3
    b88a:	1c17      	adds	r7, r2, #0
    b88c:	f000 fc2c 	bl	c0e8 <_strtod_r+0xbd8>
    b890:	0000f9b0 	.word	0x0000f9b0
    b894:	00000433 	.word	0x00000433
    b898:	ffefffff 	.word	0xffefffff
    b89c:	7ff00000 	.word	0x7ff00000
    b8a0:	7fffffff 	.word	0x7fffffff
    b8a4:	00004e1f 	.word	0x00004e1f
    b8a8:	0000f916 	.word	0x0000f916
    b8ac:	0000fac8 	.word	0x0000fac8
    b8b0:	0000f91e 	.word	0x0000f91e
    b8b4:	0000f970 	.word	0x0000f970
    b8b8:	4f92      	ldr	r7, [pc, #584]	; (bb04 <_strtod_r+0x5f4>)
    b8ba:	2600      	movs	r6, #0
    b8bc:	f000 fc14 	bl	c0e8 <_strtod_r+0xbd8>
    b8c0:	9b06      	ldr	r3, [sp, #24]
    b8c2:	931d      	str	r3, [sp, #116]	; 0x74
    b8c4:	2300      	movs	r3, #0
    b8c6:	930d      	str	r3, [sp, #52]	; 0x34
    b8c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
    b8ca:	2b00      	cmp	r3, #0
    b8cc:	d001      	beq.n	b8d2 <_strtod_r+0x3c2>
    b8ce:	f000 fc0e 	bl	c0ee <_strtod_r+0xbde>
    b8d2:	f000 fc17 	bl	c104 <_strtod_r+0xbf4>
    b8d6:	1a53      	subs	r3, r2, r1
    b8d8:	9309      	str	r3, [sp, #36]	; 0x24
    b8da:	9b04      	ldr	r3, [sp, #16]
    b8dc:	2b00      	cmp	r3, #0
    b8de:	d100      	bne.n	b8e2 <_strtod_r+0x3d2>
    b8e0:	9404      	str	r4, [sp, #16]
    b8e2:	1e25      	subs	r5, r4, #0
    b8e4:	2d10      	cmp	r5, #16
    b8e6:	dd00      	ble.n	b8ea <_strtod_r+0x3da>
    b8e8:	2510      	movs	r5, #16
    b8ea:	9807      	ldr	r0, [sp, #28]
    b8ec:	f7fd fd1e 	bl	932c <__aeabi_ui2d>
    b8f0:	1c06      	adds	r6, r0, #0
    b8f2:	1c0f      	adds	r7, r1, #0
    b8f4:	2d09      	cmp	r5, #9
    b8f6:	dd15      	ble.n	b924 <_strtod_r+0x414>
    b8f8:	1c2b      	adds	r3, r5, #0
    b8fa:	4a83      	ldr	r2, [pc, #524]	; (bb08 <_strtod_r+0x5f8>)
    b8fc:	3b09      	subs	r3, #9
    b8fe:	00db      	lsls	r3, r3, #3
    b900:	18d3      	adds	r3, r2, r3
    b902:	681a      	ldr	r2, [r3, #0]
    b904:	685b      	ldr	r3, [r3, #4]
    b906:	f7fc fe8b 	bl	8620 <__aeabi_dmul>
    b90a:	1c06      	adds	r6, r0, #0
    b90c:	9805      	ldr	r0, [sp, #20]
    b90e:	1c0f      	adds	r7, r1, #0
    b910:	f7fd fd0c 	bl	932c <__aeabi_ui2d>
    b914:	1c02      	adds	r2, r0, #0
    b916:	1c0b      	adds	r3, r1, #0
    b918:	1c30      	adds	r0, r6, #0
    b91a:	1c39      	adds	r1, r7, #0
    b91c:	f7fb ff1a 	bl	7754 <__aeabi_dadd>
    b920:	1c06      	adds	r6, r0, #0
    b922:	1c0f      	adds	r7, r1, #0
    b924:	2c0f      	cmp	r4, #15
    b926:	dc37      	bgt.n	b998 <_strtod_r+0x488>
    b928:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b92a:	2b00      	cmp	r3, #0
    b92c:	d100      	bne.n	b930 <_strtod_r+0x420>
    b92e:	e3db      	b.n	c0e8 <_strtod_r+0xbd8>
    b930:	dd24      	ble.n	b97c <_strtod_r+0x46c>
    b932:	2b16      	cmp	r3, #22
    b934:	dc07      	bgt.n	b946 <_strtod_r+0x436>
    b936:	4974      	ldr	r1, [pc, #464]	; (bb08 <_strtod_r+0x5f8>)
    b938:	00da      	lsls	r2, r3, #3
    b93a:	188a      	adds	r2, r1, r2
    b93c:	6810      	ldr	r0, [r2, #0]
    b93e:	6851      	ldr	r1, [r2, #4]
    b940:	1c3b      	adds	r3, r7, #0
    b942:	1c32      	adds	r2, r6, #0
    b944:	e015      	b.n	b972 <_strtod_r+0x462>
    b946:	2325      	movs	r3, #37	; 0x25
    b948:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b94a:	1b1b      	subs	r3, r3, r4
    b94c:	429a      	cmp	r2, r3
    b94e:	dc23      	bgt.n	b998 <_strtod_r+0x488>
    b950:	220f      	movs	r2, #15
    b952:	4d6d      	ldr	r5, [pc, #436]	; (bb08 <_strtod_r+0x5f8>)
    b954:	1b14      	subs	r4, r2, r4
    b956:	00e3      	lsls	r3, r4, #3
    b958:	18eb      	adds	r3, r5, r3
    b95a:	6818      	ldr	r0, [r3, #0]
    b95c:	6859      	ldr	r1, [r3, #4]
    b95e:	1c32      	adds	r2, r6, #0
    b960:	1c3b      	adds	r3, r7, #0
    b962:	f7fc fe5d 	bl	8620 <__aeabi_dmul>
    b966:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b968:	1b1c      	subs	r4, r3, r4
    b96a:	00e4      	lsls	r4, r4, #3
    b96c:	192d      	adds	r5, r5, r4
    b96e:	682a      	ldr	r2, [r5, #0]
    b970:	686b      	ldr	r3, [r5, #4]
    b972:	f7fc fe55 	bl	8620 <__aeabi_dmul>
    b976:	1c06      	adds	r6, r0, #0
    b978:	1c0f      	adds	r7, r1, #0
    b97a:	e3b5      	b.n	c0e8 <_strtod_r+0xbd8>
    b97c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b97e:	3316      	adds	r3, #22
    b980:	db0a      	blt.n	b998 <_strtod_r+0x488>
    b982:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b984:	1c30      	adds	r0, r6, #0
    b986:	00da      	lsls	r2, r3, #3
    b988:	4b5f      	ldr	r3, [pc, #380]	; (bb08 <_strtod_r+0x5f8>)
    b98a:	1c39      	adds	r1, r7, #0
    b98c:	1a9a      	subs	r2, r3, r2
    b98e:	6853      	ldr	r3, [r2, #4]
    b990:	6812      	ldr	r2, [r2, #0]
    b992:	f7fc fa07 	bl	7da4 <__aeabi_ddiv>
    b996:	e7ee      	b.n	b976 <_strtod_r+0x466>
    b998:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b99a:	1b65      	subs	r5, r4, r5
    b99c:	195d      	adds	r5, r3, r5
    b99e:	2d00      	cmp	r5, #0
    b9a0:	dd59      	ble.n	ba56 <_strtod_r+0x546>
    b9a2:	230f      	movs	r3, #15
    b9a4:	402b      	ands	r3, r5
    b9a6:	d00a      	beq.n	b9be <_strtod_r+0x4ae>
    b9a8:	4a57      	ldr	r2, [pc, #348]	; (bb08 <_strtod_r+0x5f8>)
    b9aa:	00db      	lsls	r3, r3, #3
    b9ac:	18d3      	adds	r3, r2, r3
    b9ae:	6818      	ldr	r0, [r3, #0]
    b9b0:	6859      	ldr	r1, [r3, #4]
    b9b2:	1c32      	adds	r2, r6, #0
    b9b4:	1c3b      	adds	r3, r7, #0
    b9b6:	f7fc fe33 	bl	8620 <__aeabi_dmul>
    b9ba:	1c06      	adds	r6, r0, #0
    b9bc:	1c0f      	adds	r7, r1, #0
    b9be:	230f      	movs	r3, #15
    b9c0:	439d      	bics	r5, r3
    b9c2:	d100      	bne.n	b9c6 <_strtod_r+0x4b6>
    b9c4:	e0b0      	b.n	bb28 <_strtod_r+0x618>
    b9c6:	3326      	adds	r3, #38	; 0x26
    b9c8:	33ff      	adds	r3, #255	; 0xff
    b9ca:	429d      	cmp	r5, r3
    b9cc:	dd0e      	ble.n	b9ec <_strtod_r+0x4dc>
    b9ce:	2300      	movs	r3, #0
    b9d0:	9304      	str	r3, [sp, #16]
    b9d2:	9305      	str	r3, [sp, #20]
    b9d4:	930b      	str	r3, [sp, #44]	; 0x2c
    b9d6:	9308      	str	r3, [sp, #32]
    b9d8:	2322      	movs	r3, #34	; 0x22
    b9da:	2600      	movs	r6, #0
    b9dc:	9a03      	ldr	r2, [sp, #12]
    b9de:	4f4b      	ldr	r7, [pc, #300]	; (bb0c <_strtod_r+0x5fc>)
    b9e0:	6013      	str	r3, [r2, #0]
    b9e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b9e4:	42b3      	cmp	r3, r6
    b9e6:	d000      	beq.n	b9ea <_strtod_r+0x4da>
    b9e8:	e36a      	b.n	c0c0 <_strtod_r+0xbb0>
    b9ea:	e37d      	b.n	c0e8 <_strtod_r+0xbd8>
    b9ec:	2300      	movs	r3, #0
    b9ee:	1c30      	adds	r0, r6, #0
    b9f0:	1c39      	adds	r1, r7, #0
    b9f2:	112d      	asrs	r5, r5, #4
    b9f4:	9305      	str	r3, [sp, #20]
    b9f6:	2d01      	cmp	r5, #1
    b9f8:	dd0e      	ble.n	ba18 <_strtod_r+0x508>
    b9fa:	07eb      	lsls	r3, r5, #31
    b9fc:	d507      	bpl.n	ba0e <_strtod_r+0x4fe>
    b9fe:	9b05      	ldr	r3, [sp, #20]
    ba00:	00da      	lsls	r2, r3, #3
    ba02:	4b43      	ldr	r3, [pc, #268]	; (bb10 <_strtod_r+0x600>)
    ba04:	18d3      	adds	r3, r2, r3
    ba06:	681a      	ldr	r2, [r3, #0]
    ba08:	685b      	ldr	r3, [r3, #4]
    ba0a:	f7fc fe09 	bl	8620 <__aeabi_dmul>
    ba0e:	9b05      	ldr	r3, [sp, #20]
    ba10:	106d      	asrs	r5, r5, #1
    ba12:	3301      	adds	r3, #1
    ba14:	9305      	str	r3, [sp, #20]
    ba16:	e7ee      	b.n	b9f6 <_strtod_r+0x4e6>
    ba18:	1c06      	adds	r6, r0, #0
    ba1a:	4b3e      	ldr	r3, [pc, #248]	; (bb14 <_strtod_r+0x604>)
    ba1c:	18cf      	adds	r7, r1, r3
    ba1e:	9b05      	ldr	r3, [sp, #20]
    ba20:	00da      	lsls	r2, r3, #3
    ba22:	4b3b      	ldr	r3, [pc, #236]	; (bb10 <_strtod_r+0x600>)
    ba24:	189b      	adds	r3, r3, r2
    ba26:	6818      	ldr	r0, [r3, #0]
    ba28:	6859      	ldr	r1, [r3, #4]
    ba2a:	1c32      	adds	r2, r6, #0
    ba2c:	1c3b      	adds	r3, r7, #0
    ba2e:	f7fc fdf7 	bl	8620 <__aeabi_dmul>
    ba32:	4b36      	ldr	r3, [pc, #216]	; (bb0c <_strtod_r+0x5fc>)
    ba34:	1c0f      	adds	r7, r1, #0
    ba36:	400b      	ands	r3, r1
    ba38:	4937      	ldr	r1, [pc, #220]	; (bb18 <_strtod_r+0x608>)
    ba3a:	1c06      	adds	r6, r0, #0
    ba3c:	428b      	cmp	r3, r1
    ba3e:	d8c6      	bhi.n	b9ce <_strtod_r+0x4be>
    ba40:	4936      	ldr	r1, [pc, #216]	; (bb1c <_strtod_r+0x60c>)
    ba42:	428b      	cmp	r3, r1
    ba44:	d903      	bls.n	ba4e <_strtod_r+0x53e>
    ba46:	2601      	movs	r6, #1
    ba48:	4f35      	ldr	r7, [pc, #212]	; (bb20 <_strtod_r+0x610>)
    ba4a:	4276      	negs	r6, r6
    ba4c:	e06c      	b.n	bb28 <_strtod_r+0x618>
    ba4e:	23d4      	movs	r3, #212	; 0xd4
    ba50:	049b      	lsls	r3, r3, #18
    ba52:	18ff      	adds	r7, r7, r3
    ba54:	e068      	b.n	bb28 <_strtod_r+0x618>
    ba56:	2d00      	cmp	r5, #0
    ba58:	d066      	beq.n	bb28 <_strtod_r+0x618>
    ba5a:	230f      	movs	r3, #15
    ba5c:	426d      	negs	r5, r5
    ba5e:	402b      	ands	r3, r5
    ba60:	d00a      	beq.n	ba78 <_strtod_r+0x568>
    ba62:	4a29      	ldr	r2, [pc, #164]	; (bb08 <_strtod_r+0x5f8>)
    ba64:	00db      	lsls	r3, r3, #3
    ba66:	18d3      	adds	r3, r2, r3
    ba68:	1c30      	adds	r0, r6, #0
    ba6a:	681a      	ldr	r2, [r3, #0]
    ba6c:	685b      	ldr	r3, [r3, #4]
    ba6e:	1c39      	adds	r1, r7, #0
    ba70:	f7fc f998 	bl	7da4 <__aeabi_ddiv>
    ba74:	1c06      	adds	r6, r0, #0
    ba76:	1c0f      	adds	r7, r1, #0
    ba78:	112d      	asrs	r5, r5, #4
    ba7a:	d055      	beq.n	bb28 <_strtod_r+0x618>
    ba7c:	2d1f      	cmp	r5, #31
    ba7e:	dd05      	ble.n	ba8c <_strtod_r+0x57c>
    ba80:	2300      	movs	r3, #0
    ba82:	9304      	str	r3, [sp, #16]
    ba84:	9305      	str	r3, [sp, #20]
    ba86:	930b      	str	r3, [sp, #44]	; 0x2c
    ba88:	9308      	str	r3, [sp, #32]
    ba8a:	e118      	b.n	bcbe <_strtod_r+0x7ae>
    ba8c:	2300      	movs	r3, #0
    ba8e:	9306      	str	r3, [sp, #24]
    ba90:	06eb      	lsls	r3, r5, #27
    ba92:	d501      	bpl.n	ba98 <_strtod_r+0x588>
    ba94:	236a      	movs	r3, #106	; 0x6a
    ba96:	9306      	str	r3, [sp, #24]
    ba98:	1c39      	adds	r1, r7, #0
    ba9a:	1c30      	adds	r0, r6, #0
    ba9c:	4e21      	ldr	r6, [pc, #132]	; (bb24 <_strtod_r+0x614>)
    ba9e:	2d00      	cmp	r5, #0
    baa0:	dd08      	ble.n	bab4 <_strtod_r+0x5a4>
    baa2:	07eb      	lsls	r3, r5, #31
    baa4:	d503      	bpl.n	baae <_strtod_r+0x59e>
    baa6:	6832      	ldr	r2, [r6, #0]
    baa8:	6873      	ldr	r3, [r6, #4]
    baaa:	f7fc fdb9 	bl	8620 <__aeabi_dmul>
    baae:	106d      	asrs	r5, r5, #1
    bab0:	3608      	adds	r6, #8
    bab2:	e7f4      	b.n	ba9e <_strtod_r+0x58e>
    bab4:	9b06      	ldr	r3, [sp, #24]
    bab6:	1c06      	adds	r6, r0, #0
    bab8:	1c0f      	adds	r7, r1, #0
    baba:	2b00      	cmp	r3, #0
    babc:	d019      	beq.n	baf2 <_strtod_r+0x5e2>
    babe:	226b      	movs	r2, #107	; 0x6b
    bac0:	004b      	lsls	r3, r1, #1
    bac2:	0d5b      	lsrs	r3, r3, #21
    bac4:	1c08      	adds	r0, r1, #0
    bac6:	1ad3      	subs	r3, r2, r3
    bac8:	2b00      	cmp	r3, #0
    baca:	dd12      	ble.n	baf2 <_strtod_r+0x5e2>
    bacc:	2b1f      	cmp	r3, #31
    bace:	dd0c      	ble.n	baea <_strtod_r+0x5da>
    bad0:	2600      	movs	r6, #0
    bad2:	2b34      	cmp	r3, #52	; 0x34
    bad4:	dd02      	ble.n	badc <_strtod_r+0x5cc>
    bad6:	27dc      	movs	r7, #220	; 0xdc
    bad8:	04bf      	lsls	r7, r7, #18
    bada:	e00a      	b.n	baf2 <_strtod_r+0x5e2>
    badc:	2201      	movs	r2, #1
    bade:	3b20      	subs	r3, #32
    bae0:	4252      	negs	r2, r2
    bae2:	409a      	lsls	r2, r3
    bae4:	4010      	ands	r0, r2
    bae6:	1c07      	adds	r7, r0, #0
    bae8:	e003      	b.n	baf2 <_strtod_r+0x5e2>
    baea:	2201      	movs	r2, #1
    baec:	4252      	negs	r2, r2
    baee:	409a      	lsls	r2, r3
    baf0:	4016      	ands	r6, r2
    baf2:	1c30      	adds	r0, r6, #0
    baf4:	1c39      	adds	r1, r7, #0
    baf6:	2200      	movs	r2, #0
    baf8:	2300      	movs	r3, #0
    bafa:	f7fa fead 	bl	6858 <__aeabi_dcmpeq>
    bafe:	2800      	cmp	r0, #0
    bb00:	d1be      	bne.n	ba80 <_strtod_r+0x570>
    bb02:	e013      	b.n	bb2c <_strtod_r+0x61c>
    bb04:	fff80000 	.word	0xfff80000
    bb08:	0000fae0 	.word	0x0000fae0
    bb0c:	7ff00000 	.word	0x7ff00000
    bb10:	0000fba8 	.word	0x0000fba8
    bb14:	fcb00000 	.word	0xfcb00000
    bb18:	7ca00000 	.word	0x7ca00000
    bb1c:	7c900000 	.word	0x7c900000
    bb20:	7fefffff 	.word	0x7fefffff
    bb24:	0000f988 	.word	0x0000f988
    bb28:	2300      	movs	r3, #0
    bb2a:	9306      	str	r3, [sp, #24]
    bb2c:	9b07      	ldr	r3, [sp, #28]
    bb2e:	9803      	ldr	r0, [sp, #12]
    bb30:	9300      	str	r3, [sp, #0]
    bb32:	990c      	ldr	r1, [sp, #48]	; 0x30
    bb34:	9a04      	ldr	r2, [sp, #16]
    bb36:	1c23      	adds	r3, r4, #0
    bb38:	f001 fffb 	bl	db32 <__s2b>
    bb3c:	900b      	str	r0, [sp, #44]	; 0x2c
    bb3e:	2800      	cmp	r0, #0
    bb40:	d100      	bne.n	bb44 <_strtod_r+0x634>
    bb42:	e744      	b.n	b9ce <_strtod_r+0x4be>
    bb44:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bb46:	9a09      	ldr	r2, [sp, #36]	; 0x24
    bb48:	425b      	negs	r3, r3
    bb4a:	17d2      	asrs	r2, r2, #31
    bb4c:	4013      	ands	r3, r2
    bb4e:	9313      	str	r3, [sp, #76]	; 0x4c
    bb50:	2300      	movs	r3, #0
    bb52:	9304      	str	r3, [sp, #16]
    bb54:	9305      	str	r3, [sp, #20]
    bb56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    bb58:	9803      	ldr	r0, [sp, #12]
    bb5a:	6859      	ldr	r1, [r3, #4]
    bb5c:	f001 ff5c 	bl	da18 <_Balloc>
    bb60:	9008      	str	r0, [sp, #32]
    bb62:	2800      	cmp	r0, #0
    bb64:	d100      	bne.n	bb68 <_strtod_r+0x658>
    bb66:	e737      	b.n	b9d8 <_strtod_r+0x4c8>
    bb68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    bb6a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    bb6c:	691b      	ldr	r3, [r3, #16]
    bb6e:	310c      	adds	r1, #12
    bb70:	1c9a      	adds	r2, r3, #2
    bb72:	0092      	lsls	r2, r2, #2
    bb74:	300c      	adds	r0, #12
    bb76:	9307      	str	r3, [sp, #28]
    bb78:	f7fe f8ed 	bl	9d56 <memcpy>
    bb7c:	ab1f      	add	r3, sp, #124	; 0x7c
    bb7e:	9300      	str	r3, [sp, #0]
    bb80:	ab20      	add	r3, sp, #128	; 0x80
    bb82:	9301      	str	r3, [sp, #4]
    bb84:	9803      	ldr	r0, [sp, #12]
    bb86:	1c32      	adds	r2, r6, #0
    bb88:	1c3b      	adds	r3, r7, #0
    bb8a:	960e      	str	r6, [sp, #56]	; 0x38
    bb8c:	970f      	str	r7, [sp, #60]	; 0x3c
    bb8e:	f002 fa91 	bl	e0b4 <__d2b>
    bb92:	901e      	str	r0, [sp, #120]	; 0x78
    bb94:	2800      	cmp	r0, #0
    bb96:	d100      	bne.n	bb9a <_strtod_r+0x68a>
    bb98:	e71e      	b.n	b9d8 <_strtod_r+0x4c8>
    bb9a:	9803      	ldr	r0, [sp, #12]
    bb9c:	2101      	movs	r1, #1
    bb9e:	f002 f852 	bl	dc46 <__i2b>
    bba2:	9005      	str	r0, [sp, #20]
    bba4:	2800      	cmp	r0, #0
    bba6:	d100      	bne.n	bbaa <_strtod_r+0x69a>
    bba8:	e716      	b.n	b9d8 <_strtod_r+0x4c8>
    bbaa:	2300      	movs	r3, #0
    bbac:	9a09      	ldr	r2, [sp, #36]	; 0x24
    bbae:	930a      	str	r3, [sp, #40]	; 0x28
    bbb0:	4293      	cmp	r3, r2
    bbb2:	da00      	bge.n	bbb6 <_strtod_r+0x6a6>
    bbb4:	920a      	str	r2, [sp, #40]	; 0x28
    bbb6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    bbb8:	2b00      	cmp	r3, #0
    bbba:	da00      	bge.n	bbbe <_strtod_r+0x6ae>
    bbbc:	e089      	b.n	bcd2 <_strtod_r+0x7c2>
    bbbe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    bbc0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    bbc2:	18d5      	adds	r5, r2, r3
    bbc4:	9a06      	ldr	r2, [sp, #24]
    bbc6:	9920      	ldr	r1, [sp, #128]	; 0x80
    bbc8:	1a9b      	subs	r3, r3, r2
    bbca:	2236      	movs	r2, #54	; 0x36
    bbcc:	185b      	adds	r3, r3, r1
    bbce:	1a52      	subs	r2, r2, r1
    bbd0:	49c8      	ldr	r1, [pc, #800]	; (bef4 <_strtod_r+0x9e4>)
    bbd2:	2001      	movs	r0, #1
    bbd4:	428b      	cmp	r3, r1
    bbd6:	db00      	blt.n	bbda <_strtod_r+0x6ca>
    bbd8:	e085      	b.n	bce6 <_strtod_r+0x7d6>
    bbda:	1ac9      	subs	r1, r1, r3
    bbdc:	1a52      	subs	r2, r2, r1
    bbde:	291f      	cmp	r1, #31
    bbe0:	dc7b      	bgt.n	bcda <_strtod_r+0x7ca>
    bbe2:	4088      	lsls	r0, r1
    bbe4:	2300      	movs	r3, #0
    bbe6:	9018      	str	r0, [sp, #96]	; 0x60
    bbe8:	9312      	str	r3, [sp, #72]	; 0x48
    bbea:	18ab      	adds	r3, r5, r2
    bbec:	9307      	str	r3, [sp, #28]
    bbee:	9b06      	ldr	r3, [sp, #24]
    bbf0:	18a4      	adds	r4, r4, r2
    bbf2:	18e4      	adds	r4, r4, r3
    bbf4:	9b07      	ldr	r3, [sp, #28]
    bbf6:	42ab      	cmp	r3, r5
    bbf8:	dd00      	ble.n	bbfc <_strtod_r+0x6ec>
    bbfa:	1c2b      	adds	r3, r5, #0
    bbfc:	42a3      	cmp	r3, r4
    bbfe:	dd00      	ble.n	bc02 <_strtod_r+0x6f2>
    bc00:	1c23      	adds	r3, r4, #0
    bc02:	2b00      	cmp	r3, #0
    bc04:	dd04      	ble.n	bc10 <_strtod_r+0x700>
    bc06:	9a07      	ldr	r2, [sp, #28]
    bc08:	1ae4      	subs	r4, r4, r3
    bc0a:	1ad2      	subs	r2, r2, r3
    bc0c:	9207      	str	r2, [sp, #28]
    bc0e:	1aed      	subs	r5, r5, r3
    bc10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    bc12:	2b00      	cmp	r3, #0
    bc14:	d16b      	bne.n	bcee <_strtod_r+0x7de>
    bc16:	9b07      	ldr	r3, [sp, #28]
    bc18:	2b00      	cmp	r3, #0
    bc1a:	dd00      	ble.n	bc1e <_strtod_r+0x70e>
    bc1c:	e080      	b.n	bd20 <_strtod_r+0x810>
    bc1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bc20:	2b00      	cmp	r3, #0
    bc22:	d000      	beq.n	bc26 <_strtod_r+0x716>
    bc24:	e086      	b.n	bd34 <_strtod_r+0x824>
    bc26:	2c00      	cmp	r4, #0
    bc28:	dd00      	ble.n	bc2c <_strtod_r+0x71c>
    bc2a:	e08d      	b.n	bd48 <_strtod_r+0x838>
    bc2c:	2d00      	cmp	r5, #0
    bc2e:	dd00      	ble.n	bc32 <_strtod_r+0x722>
    bc30:	e094      	b.n	bd5c <_strtod_r+0x84c>
    bc32:	9803      	ldr	r0, [sp, #12]
    bc34:	991e      	ldr	r1, [sp, #120]	; 0x78
    bc36:	9a08      	ldr	r2, [sp, #32]
    bc38:	f002 f95b 	bl	def2 <__mdiff>
    bc3c:	9004      	str	r0, [sp, #16]
    bc3e:	2800      	cmp	r0, #0
    bc40:	d100      	bne.n	bc44 <_strtod_r+0x734>
    bc42:	e6c9      	b.n	b9d8 <_strtod_r+0x4c8>
    bc44:	2200      	movs	r2, #0
    bc46:	68c3      	ldr	r3, [r0, #12]
    bc48:	9905      	ldr	r1, [sp, #20]
    bc4a:	60c2      	str	r2, [r0, #12]
    bc4c:	930c      	str	r3, [sp, #48]	; 0x30
    bc4e:	f002 f935 	bl	debc <__mcmp>
    bc52:	2800      	cmp	r0, #0
    bc54:	db00      	blt.n	bc58 <_strtod_r+0x748>
    bc56:	e091      	b.n	bd7c <_strtod_r+0x86c>
    bc58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    bc5a:	2b00      	cmp	r3, #0
    bc5c:	d000      	beq.n	bc60 <_strtod_r+0x750>
    bc5e:	e21a      	b.n	c096 <_strtod_r+0xb86>
    bc60:	2e00      	cmp	r6, #0
    bc62:	d000      	beq.n	bc66 <_strtod_r+0x756>
    bc64:	e217      	b.n	c096 <_strtod_r+0xb86>
    bc66:	033b      	lsls	r3, r7, #12
    bc68:	d000      	beq.n	bc6c <_strtod_r+0x75c>
    bc6a:	e214      	b.n	c096 <_strtod_r+0xb86>
    bc6c:	22d6      	movs	r2, #214	; 0xd6
    bc6e:	4ba2      	ldr	r3, [pc, #648]	; (bef8 <_strtod_r+0x9e8>)
    bc70:	04d2      	lsls	r2, r2, #19
    bc72:	403b      	ands	r3, r7
    bc74:	4293      	cmp	r3, r2
    bc76:	d800      	bhi.n	bc7a <_strtod_r+0x76a>
    bc78:	e20d      	b.n	c096 <_strtod_r+0xb86>
    bc7a:	9b04      	ldr	r3, [sp, #16]
    bc7c:	695b      	ldr	r3, [r3, #20]
    bc7e:	9307      	str	r3, [sp, #28]
    bc80:	2b00      	cmp	r3, #0
    bc82:	d075      	beq.n	bd70 <_strtod_r+0x860>
    bc84:	9904      	ldr	r1, [sp, #16]
    bc86:	9803      	ldr	r0, [sp, #12]
    bc88:	2201      	movs	r2, #1
    bc8a:	f002 f8c5 	bl	de18 <__lshift>
    bc8e:	9905      	ldr	r1, [sp, #20]
    bc90:	9004      	str	r0, [sp, #16]
    bc92:	f002 f913 	bl	debc <__mcmp>
    bc96:	2800      	cmp	r0, #0
    bc98:	dc00      	bgt.n	bc9c <_strtod_r+0x78c>
    bc9a:	e1fc      	b.n	c096 <_strtod_r+0xb86>
    bc9c:	9a06      	ldr	r2, [sp, #24]
    bc9e:	4b96      	ldr	r3, [pc, #600]	; (bef8 <_strtod_r+0x9e8>)
    bca0:	2a00      	cmp	r2, #0
    bca2:	d100      	bne.n	bca6 <_strtod_r+0x796>
    bca4:	e09a      	b.n	bddc <_strtod_r+0x8cc>
    bca6:	1c1a      	adds	r2, r3, #0
    bca8:	21d6      	movs	r1, #214	; 0xd6
    bcaa:	403a      	ands	r2, r7
    bcac:	04c9      	lsls	r1, r1, #19
    bcae:	428a      	cmp	r2, r1
    bcb0:	dd00      	ble.n	bcb4 <_strtod_r+0x7a4>
    bcb2:	e093      	b.n	bddc <_strtod_r+0x8cc>
    bcb4:	23dc      	movs	r3, #220	; 0xdc
    bcb6:	049b      	lsls	r3, r3, #18
    bcb8:	429a      	cmp	r2, r3
    bcba:	dd00      	ble.n	bcbe <_strtod_r+0x7ae>
    bcbc:	e1ee      	b.n	c09c <_strtod_r+0xb8c>
    bcbe:	2322      	movs	r3, #34	; 0x22
    bcc0:	9a03      	ldr	r2, [sp, #12]
    bcc2:	2600      	movs	r6, #0
    bcc4:	6013      	str	r3, [r2, #0]
    bcc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    bcc8:	2700      	movs	r7, #0
    bcca:	2b00      	cmp	r3, #0
    bccc:	d000      	beq.n	bcd0 <_strtod_r+0x7c0>
    bcce:	e1f7      	b.n	c0c0 <_strtod_r+0xbb0>
    bcd0:	e20a      	b.n	c0e8 <_strtod_r+0xbd8>
    bcd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    bcd4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    bcd6:	1ad4      	subs	r4, r2, r3
    bcd8:	e774      	b.n	bbc4 <_strtod_r+0x6b4>
    bcda:	4988      	ldr	r1, [pc, #544]	; (befc <_strtod_r+0x9ec>)
    bcdc:	1acb      	subs	r3, r1, r3
    bcde:	1c01      	adds	r1, r0, #0
    bce0:	4099      	lsls	r1, r3
    bce2:	9112      	str	r1, [sp, #72]	; 0x48
    bce4:	e001      	b.n	bcea <_strtod_r+0x7da>
    bce6:	2300      	movs	r3, #0
    bce8:	9312      	str	r3, [sp, #72]	; 0x48
    bcea:	9018      	str	r0, [sp, #96]	; 0x60
    bcec:	e77d      	b.n	bbea <_strtod_r+0x6da>
    bcee:	1c1a      	adds	r2, r3, #0
    bcf0:	9803      	ldr	r0, [sp, #12]
    bcf2:	9905      	ldr	r1, [sp, #20]
    bcf4:	f002 f83e 	bl	dd74 <__pow5mult>
    bcf8:	9005      	str	r0, [sp, #20]
    bcfa:	1e03      	subs	r3, r0, #0
    bcfc:	d100      	bne.n	bd00 <_strtod_r+0x7f0>
    bcfe:	e66b      	b.n	b9d8 <_strtod_r+0x4c8>
    bd00:	9803      	ldr	r0, [sp, #12]
    bd02:	1c19      	adds	r1, r3, #0
    bd04:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    bd06:	f001 ffa7 	bl	dc58 <__multiply>
    bd0a:	900c      	str	r0, [sp, #48]	; 0x30
    bd0c:	2800      	cmp	r0, #0
    bd0e:	d100      	bne.n	bd12 <_strtod_r+0x802>
    bd10:	e662      	b.n	b9d8 <_strtod_r+0x4c8>
    bd12:	9803      	ldr	r0, [sp, #12]
    bd14:	991e      	ldr	r1, [sp, #120]	; 0x78
    bd16:	f001 feb7 	bl	da88 <_Bfree>
    bd1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    bd1c:	931e      	str	r3, [sp, #120]	; 0x78
    bd1e:	e77a      	b.n	bc16 <_strtod_r+0x706>
    bd20:	9803      	ldr	r0, [sp, #12]
    bd22:	991e      	ldr	r1, [sp, #120]	; 0x78
    bd24:	9a07      	ldr	r2, [sp, #28]
    bd26:	f002 f877 	bl	de18 <__lshift>
    bd2a:	901e      	str	r0, [sp, #120]	; 0x78
    bd2c:	2800      	cmp	r0, #0
    bd2e:	d000      	beq.n	bd32 <_strtod_r+0x822>
    bd30:	e775      	b.n	bc1e <_strtod_r+0x70e>
    bd32:	e651      	b.n	b9d8 <_strtod_r+0x4c8>
    bd34:	9803      	ldr	r0, [sp, #12]
    bd36:	9908      	ldr	r1, [sp, #32]
    bd38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    bd3a:	f002 f81b 	bl	dd74 <__pow5mult>
    bd3e:	9008      	str	r0, [sp, #32]
    bd40:	2800      	cmp	r0, #0
    bd42:	d000      	beq.n	bd46 <_strtod_r+0x836>
    bd44:	e76f      	b.n	bc26 <_strtod_r+0x716>
    bd46:	e647      	b.n	b9d8 <_strtod_r+0x4c8>
    bd48:	9803      	ldr	r0, [sp, #12]
    bd4a:	9908      	ldr	r1, [sp, #32]
    bd4c:	1c22      	adds	r2, r4, #0
    bd4e:	f002 f863 	bl	de18 <__lshift>
    bd52:	9008      	str	r0, [sp, #32]
    bd54:	2800      	cmp	r0, #0
    bd56:	d000      	beq.n	bd5a <_strtod_r+0x84a>
    bd58:	e768      	b.n	bc2c <_strtod_r+0x71c>
    bd5a:	e63d      	b.n	b9d8 <_strtod_r+0x4c8>
    bd5c:	9803      	ldr	r0, [sp, #12]
    bd5e:	9905      	ldr	r1, [sp, #20]
    bd60:	1c2a      	adds	r2, r5, #0
    bd62:	f002 f859 	bl	de18 <__lshift>
    bd66:	9005      	str	r0, [sp, #20]
    bd68:	2800      	cmp	r0, #0
    bd6a:	d000      	beq.n	bd6e <_strtod_r+0x85e>
    bd6c:	e761      	b.n	bc32 <_strtod_r+0x722>
    bd6e:	e633      	b.n	b9d8 <_strtod_r+0x4c8>
    bd70:	9b04      	ldr	r3, [sp, #16]
    bd72:	691b      	ldr	r3, [r3, #16]
    bd74:	9307      	str	r3, [sp, #28]
    bd76:	2b01      	cmp	r3, #1
    bd78:	dc84      	bgt.n	bc84 <_strtod_r+0x774>
    bd7a:	e18c      	b.n	c096 <_strtod_r+0xb86>
    bd7c:	2800      	cmp	r0, #0
    bd7e:	d164      	bne.n	be4a <_strtod_r+0x93a>
    bd80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    bd82:	033b      	lsls	r3, r7, #12
    bd84:	2a00      	cmp	r2, #0
    bd86:	d024      	beq.n	bdd2 <_strtod_r+0x8c2>
    bd88:	4a5d      	ldr	r2, [pc, #372]	; (bf00 <_strtod_r+0x9f0>)
    bd8a:	1c39      	adds	r1, r7, #0
    bd8c:	0b1b      	lsrs	r3, r3, #12
    bd8e:	4293      	cmp	r3, r2
    bd90:	d12d      	bne.n	bdee <_strtod_r+0x8de>
    bd92:	9a06      	ldr	r2, [sp, #24]
    bd94:	3801      	subs	r0, #1
    bd96:	1c34      	adds	r4, r6, #0
    bd98:	1c03      	adds	r3, r0, #0
    bd9a:	2a00      	cmp	r2, #0
    bd9c:	d00a      	beq.n	bdb4 <_strtod_r+0x8a4>
    bd9e:	25d4      	movs	r5, #212	; 0xd4
    bda0:	4a55      	ldr	r2, [pc, #340]	; (bef8 <_strtod_r+0x9e8>)
    bda2:	04ed      	lsls	r5, r5, #19
    bda4:	403a      	ands	r2, r7
    bda6:	42aa      	cmp	r2, r5
    bda8:	d804      	bhi.n	bdb4 <_strtod_r+0x8a4>
    bdaa:	336c      	adds	r3, #108	; 0x6c
    bdac:	0d12      	lsrs	r2, r2, #20
    bdae:	1a9a      	subs	r2, r3, r2
    bdb0:	1c03      	adds	r3, r0, #0
    bdb2:	4093      	lsls	r3, r2
    bdb4:	429c      	cmp	r4, r3
    bdb6:	d11a      	bne.n	bdee <_strtod_r+0x8de>
    bdb8:	4b52      	ldr	r3, [pc, #328]	; (bf04 <_strtod_r+0x9f4>)
    bdba:	4299      	cmp	r1, r3
    bdbc:	d102      	bne.n	bdc4 <_strtod_r+0x8b4>
    bdbe:	1c63      	adds	r3, r4, #1
    bdc0:	d100      	bne.n	bdc4 <_strtod_r+0x8b4>
    bdc2:	e609      	b.n	b9d8 <_strtod_r+0x4c8>
    bdc4:	4b4c      	ldr	r3, [pc, #304]	; (bef8 <_strtod_r+0x9e8>)
    bdc6:	2600      	movs	r6, #0
    bdc8:	4019      	ands	r1, r3
    bdca:	2380      	movs	r3, #128	; 0x80
    bdcc:	035b      	lsls	r3, r3, #13
    bdce:	18cf      	adds	r7, r1, r3
    bdd0:	e161      	b.n	c096 <_strtod_r+0xb86>
    bdd2:	2b00      	cmp	r3, #0
    bdd4:	d10b      	bne.n	bdee <_strtod_r+0x8de>
    bdd6:	2e00      	cmp	r6, #0
    bdd8:	d109      	bne.n	bdee <_strtod_r+0x8de>
    bdda:	e75f      	b.n	bc9c <_strtod_r+0x78c>
    bddc:	2601      	movs	r6, #1
    bdde:	4a4a      	ldr	r2, [pc, #296]	; (bf08 <_strtod_r+0x9f8>)
    bde0:	403b      	ands	r3, r7
    bde2:	189b      	adds	r3, r3, r2
    bde4:	4a46      	ldr	r2, [pc, #280]	; (bf00 <_strtod_r+0x9f0>)
    bde6:	4276      	negs	r6, r6
    bde8:	431a      	orrs	r2, r3
    bdea:	1c17      	adds	r7, r2, #0
    bdec:	e153      	b.n	c096 <_strtod_r+0xb86>
    bdee:	9b12      	ldr	r3, [sp, #72]	; 0x48
    bdf0:	2b00      	cmp	r3, #0
    bdf2:	d003      	beq.n	bdfc <_strtod_r+0x8ec>
    bdf4:	423b      	tst	r3, r7
    bdf6:	d100      	bne.n	bdfa <_strtod_r+0x8ea>
    bdf8:	e14d      	b.n	c096 <_strtod_r+0xb86>
    bdfa:	e003      	b.n	be04 <_strtod_r+0x8f4>
    bdfc:	9b18      	ldr	r3, [sp, #96]	; 0x60
    bdfe:	4233      	tst	r3, r6
    be00:	d100      	bne.n	be04 <_strtod_r+0x8f4>
    be02:	e148      	b.n	c096 <_strtod_r+0xb86>
    be04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    be06:	1c30      	adds	r0, r6, #0
    be08:	1c39      	adds	r1, r7, #0
    be0a:	9a06      	ldr	r2, [sp, #24]
    be0c:	2b00      	cmp	r3, #0
    be0e:	d00a      	beq.n	be26 <_strtod_r+0x916>
    be10:	f7ff fb68 	bl	b4e4 <sulp>
    be14:	1c02      	adds	r2, r0, #0
    be16:	1c0b      	adds	r3, r1, #0
    be18:	980e      	ldr	r0, [sp, #56]	; 0x38
    be1a:	990f      	ldr	r1, [sp, #60]	; 0x3c
    be1c:	f7fb fc9a 	bl	7754 <__aeabi_dadd>
    be20:	1c06      	adds	r6, r0, #0
    be22:	1c0f      	adds	r7, r1, #0
    be24:	e137      	b.n	c096 <_strtod_r+0xb86>
    be26:	f7ff fb5d 	bl	b4e4 <sulp>
    be2a:	1c02      	adds	r2, r0, #0
    be2c:	1c0b      	adds	r3, r1, #0
    be2e:	980e      	ldr	r0, [sp, #56]	; 0x38
    be30:	990f      	ldr	r1, [sp, #60]	; 0x3c
    be32:	f7fc fe8f 	bl	8b54 <__aeabi_dsub>
    be36:	2200      	movs	r2, #0
    be38:	2300      	movs	r3, #0
    be3a:	1c06      	adds	r6, r0, #0
    be3c:	1c0f      	adds	r7, r1, #0
    be3e:	f7fa fd0b 	bl	6858 <__aeabi_dcmpeq>
    be42:	2800      	cmp	r0, #0
    be44:	d000      	beq.n	be48 <_strtod_r+0x938>
    be46:	e73a      	b.n	bcbe <_strtod_r+0x7ae>
    be48:	e125      	b.n	c096 <_strtod_r+0xb86>
    be4a:	9804      	ldr	r0, [sp, #16]
    be4c:	9905      	ldr	r1, [sp, #20]
    be4e:	f002 f985 	bl	e15c <__ratio>
    be52:	2380      	movs	r3, #128	; 0x80
    be54:	2200      	movs	r2, #0
    be56:	05db      	lsls	r3, r3, #23
    be58:	1c04      	adds	r4, r0, #0
    be5a:	1c0d      	adds	r5, r1, #0
    be5c:	f7fa fd0c 	bl	6878 <__aeabi_dcmple>
    be60:	2800      	cmp	r0, #0
    be62:	d036      	beq.n	bed2 <_strtod_r+0x9c2>
    be64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    be66:	2b00      	cmp	r3, #0
    be68:	d002      	beq.n	be70 <_strtod_r+0x960>
    be6a:	2400      	movs	r4, #0
    be6c:	4d27      	ldr	r5, [pc, #156]	; (bf0c <_strtod_r+0x9fc>)
    be6e:	e00b      	b.n	be88 <_strtod_r+0x978>
    be70:	2e00      	cmp	r6, #0
    be72:	d102      	bne.n	be7a <_strtod_r+0x96a>
    be74:	033b      	lsls	r3, r7, #12
    be76:	d105      	bne.n	be84 <_strtod_r+0x974>
    be78:	e00b      	b.n	be92 <_strtod_r+0x982>
    be7a:	2e01      	cmp	r6, #1
    be7c:	d102      	bne.n	be84 <_strtod_r+0x974>
    be7e:	2f00      	cmp	r7, #0
    be80:	d100      	bne.n	be84 <_strtod_r+0x974>
    be82:	e71c      	b.n	bcbe <_strtod_r+0x7ae>
    be84:	2400      	movs	r4, #0
    be86:	4d22      	ldr	r5, [pc, #136]	; (bf10 <_strtod_r+0xa00>)
    be88:	2300      	movs	r3, #0
    be8a:	9307      	str	r3, [sp, #28]
    be8c:	4b1f      	ldr	r3, [pc, #124]	; (bf0c <_strtod_r+0x9fc>)
    be8e:	930a      	str	r3, [sp, #40]	; 0x28
    be90:	e048      	b.n	bf24 <_strtod_r+0xa14>
    be92:	1c20      	adds	r0, r4, #0
    be94:	1c29      	adds	r1, r5, #0
    be96:	2200      	movs	r2, #0
    be98:	4b1c      	ldr	r3, [pc, #112]	; (bf0c <_strtod_r+0x9fc>)
    be9a:	f7fa fce3 	bl	6864 <__aeabi_dcmplt>
    be9e:	2800      	cmp	r0, #0
    bea0:	d108      	bne.n	beb4 <_strtod_r+0x9a4>
    bea2:	1c20      	adds	r0, r4, #0
    bea4:	1c29      	adds	r1, r5, #0
    bea6:	2200      	movs	r2, #0
    bea8:	4b1a      	ldr	r3, [pc, #104]	; (bf14 <_strtod_r+0xa04>)
    beaa:	f7fc fbb9 	bl	8620 <__aeabi_dmul>
    beae:	9007      	str	r0, [sp, #28]
    beb0:	910a      	str	r1, [sp, #40]	; 0x28
    beb2:	e003      	b.n	bebc <_strtod_r+0x9ac>
    beb4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    beb6:	9307      	str	r3, [sp, #28]
    beb8:	4b16      	ldr	r3, [pc, #88]	; (bf14 <_strtod_r+0xa04>)
    beba:	930a      	str	r3, [sp, #40]	; 0x28
    bebc:	2280      	movs	r2, #128	; 0x80
    bebe:	0612      	lsls	r2, r2, #24
    bec0:	4694      	mov	ip, r2
    bec2:	9b07      	ldr	r3, [sp, #28]
    bec4:	931a      	str	r3, [sp, #104]	; 0x68
    bec6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bec8:	4463      	add	r3, ip
    beca:	931b      	str	r3, [sp, #108]	; 0x6c
    becc:	9c1a      	ldr	r4, [sp, #104]	; 0x68
    bece:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
    bed0:	e028      	b.n	bf24 <_strtod_r+0xa14>
    bed2:	4b10      	ldr	r3, [pc, #64]	; (bf14 <_strtod_r+0xa04>)
    bed4:	1c20      	adds	r0, r4, #0
    bed6:	1c29      	adds	r1, r5, #0
    bed8:	2200      	movs	r2, #0
    beda:	f7fc fba1 	bl	8620 <__aeabi_dmul>
    bede:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    bee0:	9007      	str	r0, [sp, #28]
    bee2:	910a      	str	r1, [sp, #40]	; 0x28
    bee4:	2b00      	cmp	r3, #0
    bee6:	d117      	bne.n	bf18 <_strtod_r+0xa08>
    bee8:	2380      	movs	r3, #128	; 0x80
    beea:	061b      	lsls	r3, r3, #24
    beec:	18cb      	adds	r3, r1, r3
    beee:	9014      	str	r0, [sp, #80]	; 0x50
    bef0:	9315      	str	r3, [sp, #84]	; 0x54
    bef2:	e015      	b.n	bf20 <_strtod_r+0xa10>
    bef4:	fffffc03 	.word	0xfffffc03
    bef8:	7ff00000 	.word	0x7ff00000
    befc:	fffffbe3 	.word	0xfffffbe3
    bf00:	000fffff 	.word	0x000fffff
    bf04:	7fefffff 	.word	0x7fefffff
    bf08:	fff00000 	.word	0xfff00000
    bf0c:	3ff00000 	.word	0x3ff00000
    bf10:	bff00000 	.word	0xbff00000
    bf14:	3fe00000 	.word	0x3fe00000
    bf18:	9a07      	ldr	r2, [sp, #28]
    bf1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bf1c:	9214      	str	r2, [sp, #80]	; 0x50
    bf1e:	9315      	str	r3, [sp, #84]	; 0x54
    bf20:	9c14      	ldr	r4, [sp, #80]	; 0x50
    bf22:	9d15      	ldr	r5, [sp, #84]	; 0x54
    bf24:	4b7a      	ldr	r3, [pc, #488]	; (c110 <_strtod_r+0xc00>)
    bf26:	403b      	ands	r3, r7
    bf28:	9312      	str	r3, [sp, #72]	; 0x48
    bf2a:	9a12      	ldr	r2, [sp, #72]	; 0x48
    bf2c:	4b79      	ldr	r3, [pc, #484]	; (c114 <_strtod_r+0xc04>)
    bf2e:	429a      	cmp	r2, r3
    bf30:	d12b      	bne.n	bf8a <_strtod_r+0xa7a>
    bf32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    bf34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    bf36:	9210      	str	r2, [sp, #64]	; 0x40
    bf38:	9311      	str	r3, [sp, #68]	; 0x44
    bf3a:	4b77      	ldr	r3, [pc, #476]	; (c118 <_strtod_r+0xc08>)
    bf3c:	1c30      	adds	r0, r6, #0
    bf3e:	18ff      	adds	r7, r7, r3
    bf40:	1c39      	adds	r1, r7, #0
    bf42:	f002 f841 	bl	dfc8 <__ulp>
    bf46:	1c02      	adds	r2, r0, #0
    bf48:	1c0b      	adds	r3, r1, #0
    bf4a:	1c20      	adds	r0, r4, #0
    bf4c:	1c29      	adds	r1, r5, #0
    bf4e:	f7fc fb67 	bl	8620 <__aeabi_dmul>
    bf52:	1c02      	adds	r2, r0, #0
    bf54:	1c0b      	adds	r3, r1, #0
    bf56:	1c30      	adds	r0, r6, #0
    bf58:	1c39      	adds	r1, r7, #0
    bf5a:	f7fb fbfb 	bl	7754 <__aeabi_dadd>
    bf5e:	4b6c      	ldr	r3, [pc, #432]	; (c110 <_strtod_r+0xc00>)
    bf60:	4a6e      	ldr	r2, [pc, #440]	; (c11c <_strtod_r+0xc0c>)
    bf62:	1c06      	adds	r6, r0, #0
    bf64:	400b      	ands	r3, r1
    bf66:	4293      	cmp	r3, r2
    bf68:	d90b      	bls.n	bf82 <_strtod_r+0xa72>
    bf6a:	4b6d      	ldr	r3, [pc, #436]	; (c120 <_strtod_r+0xc10>)
    bf6c:	9a11      	ldr	r2, [sp, #68]	; 0x44
    bf6e:	429a      	cmp	r2, r3
    bf70:	d103      	bne.n	bf7a <_strtod_r+0xa6a>
    bf72:	9b10      	ldr	r3, [sp, #64]	; 0x40
    bf74:	3301      	adds	r3, #1
    bf76:	d100      	bne.n	bf7a <_strtod_r+0xa6a>
    bf78:	e52e      	b.n	b9d8 <_strtod_r+0x4c8>
    bf7a:	2601      	movs	r6, #1
    bf7c:	4f68      	ldr	r7, [pc, #416]	; (c120 <_strtod_r+0xc10>)
    bf7e:	4276      	negs	r6, r6
    bf80:	e078      	b.n	c074 <_strtod_r+0xb64>
    bf82:	23d4      	movs	r3, #212	; 0xd4
    bf84:	049b      	lsls	r3, r3, #18
    bf86:	18cf      	adds	r7, r1, r3
    bf88:	e040      	b.n	c00c <_strtod_r+0xafc>
    bf8a:	9b06      	ldr	r3, [sp, #24]
    bf8c:	2b00      	cmp	r3, #0
    bf8e:	d02b      	beq.n	bfe8 <_strtod_r+0xad8>
    bf90:	23d4      	movs	r3, #212	; 0xd4
    bf92:	9a12      	ldr	r2, [sp, #72]	; 0x48
    bf94:	04db      	lsls	r3, r3, #19
    bf96:	429a      	cmp	r2, r3
    bf98:	d826      	bhi.n	bfe8 <_strtod_r+0xad8>
    bf9a:	9807      	ldr	r0, [sp, #28]
    bf9c:	990a      	ldr	r1, [sp, #40]	; 0x28
    bf9e:	4a61      	ldr	r2, [pc, #388]	; (c124 <_strtod_r+0xc14>)
    bfa0:	4b61      	ldr	r3, [pc, #388]	; (c128 <_strtod_r+0xc18>)
    bfa2:	f7fa fc69 	bl	6878 <__aeabi_dcmple>
    bfa6:	2800      	cmp	r0, #0
    bfa8:	d019      	beq.n	bfde <_strtod_r+0xace>
    bfaa:	9807      	ldr	r0, [sp, #28]
    bfac:	990a      	ldr	r1, [sp, #40]	; 0x28
    bfae:	f7fa fce5 	bl	697c <__aeabi_d2uiz>
    bfb2:	2800      	cmp	r0, #0
    bfb4:	d100      	bne.n	bfb8 <_strtod_r+0xaa8>
    bfb6:	3001      	adds	r0, #1
    bfb8:	f7fd f9b8 	bl	932c <__aeabi_ui2d>
    bfbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    bfbe:	9007      	str	r0, [sp, #28]
    bfc0:	910a      	str	r1, [sp, #40]	; 0x28
    bfc2:	2b00      	cmp	r3, #0
    bfc4:	d105      	bne.n	bfd2 <_strtod_r+0xac2>
    bfc6:	2380      	movs	r3, #128	; 0x80
    bfc8:	061b      	lsls	r3, r3, #24
    bfca:	18cb      	adds	r3, r1, r3
    bfcc:	9016      	str	r0, [sp, #88]	; 0x58
    bfce:	9317      	str	r3, [sp, #92]	; 0x5c
    bfd0:	e003      	b.n	bfda <_strtod_r+0xaca>
    bfd2:	9a07      	ldr	r2, [sp, #28]
    bfd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bfd6:	9216      	str	r2, [sp, #88]	; 0x58
    bfd8:	9317      	str	r3, [sp, #92]	; 0x5c
    bfda:	9c16      	ldr	r4, [sp, #88]	; 0x58
    bfdc:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    bfde:	23d6      	movs	r3, #214	; 0xd6
    bfe0:	9a12      	ldr	r2, [sp, #72]	; 0x48
    bfe2:	04db      	lsls	r3, r3, #19
    bfe4:	18eb      	adds	r3, r5, r3
    bfe6:	1a9d      	subs	r5, r3, r2
    bfe8:	980e      	ldr	r0, [sp, #56]	; 0x38
    bfea:	990f      	ldr	r1, [sp, #60]	; 0x3c
    bfec:	f001 ffec 	bl	dfc8 <__ulp>
    bff0:	1c02      	adds	r2, r0, #0
    bff2:	1c0b      	adds	r3, r1, #0
    bff4:	1c20      	adds	r0, r4, #0
    bff6:	1c29      	adds	r1, r5, #0
    bff8:	f7fc fb12 	bl	8620 <__aeabi_dmul>
    bffc:	1c02      	adds	r2, r0, #0
    bffe:	1c0b      	adds	r3, r1, #0
    c000:	980e      	ldr	r0, [sp, #56]	; 0x38
    c002:	990f      	ldr	r1, [sp, #60]	; 0x3c
    c004:	f7fb fba6 	bl	7754 <__aeabi_dadd>
    c008:	1c06      	adds	r6, r0, #0
    c00a:	1c0f      	adds	r7, r1, #0
    c00c:	9b06      	ldr	r3, [sp, #24]
    c00e:	970e      	str	r7, [sp, #56]	; 0x38
    c010:	2b00      	cmp	r3, #0
    c012:	d12f      	bne.n	c074 <_strtod_r+0xb64>
    c014:	4b3e      	ldr	r3, [pc, #248]	; (c110 <_strtod_r+0xc00>)
    c016:	9a12      	ldr	r2, [sp, #72]	; 0x48
    c018:	403b      	ands	r3, r7
    c01a:	429a      	cmp	r2, r3
    c01c:	d12a      	bne.n	c074 <_strtod_r+0xb64>
    c01e:	990a      	ldr	r1, [sp, #40]	; 0x28
    c020:	9807      	ldr	r0, [sp, #28]
    c022:	f7fd f911 	bl	9248 <__aeabi_d2iz>
    c026:	f7fd f945 	bl	92b4 <__aeabi_i2d>
    c02a:	1c0b      	adds	r3, r1, #0
    c02c:	1c02      	adds	r2, r0, #0
    c02e:	990a      	ldr	r1, [sp, #40]	; 0x28
    c030:	9807      	ldr	r0, [sp, #28]
    c032:	f7fc fd8f 	bl	8b54 <__aeabi_dsub>
    c036:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c038:	1c04      	adds	r4, r0, #0
    c03a:	1c0d      	adds	r5, r1, #0
    c03c:	2b00      	cmp	r3, #0
    c03e:	d104      	bne.n	c04a <_strtod_r+0xb3a>
    c040:	2e00      	cmp	r6, #0
    c042:	d102      	bne.n	c04a <_strtod_r+0xb3a>
    c044:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c046:	031b      	lsls	r3, r3, #12
    c048:	d00e      	beq.n	c068 <_strtod_r+0xb58>
    c04a:	1c20      	adds	r0, r4, #0
    c04c:	1c29      	adds	r1, r5, #0
    c04e:	4a37      	ldr	r2, [pc, #220]	; (c12c <_strtod_r+0xc1c>)
    c050:	4b37      	ldr	r3, [pc, #220]	; (c130 <_strtod_r+0xc20>)
    c052:	f7fa fc07 	bl	6864 <__aeabi_dcmplt>
    c056:	2800      	cmp	r0, #0
    c058:	d132      	bne.n	c0c0 <_strtod_r+0xbb0>
    c05a:	1c20      	adds	r0, r4, #0
    c05c:	1c29      	adds	r1, r5, #0
    c05e:	4a35      	ldr	r2, [pc, #212]	; (c134 <_strtod_r+0xc24>)
    c060:	4b35      	ldr	r3, [pc, #212]	; (c138 <_strtod_r+0xc28>)
    c062:	f7fa fc13 	bl	688c <__aeabi_dcmpgt>
    c066:	e003      	b.n	c070 <_strtod_r+0xb60>
    c068:	4a30      	ldr	r2, [pc, #192]	; (c12c <_strtod_r+0xc1c>)
    c06a:	4b34      	ldr	r3, [pc, #208]	; (c13c <_strtod_r+0xc2c>)
    c06c:	f7fa fbfa 	bl	6864 <__aeabi_dcmplt>
    c070:	2800      	cmp	r0, #0
    c072:	d125      	bne.n	c0c0 <_strtod_r+0xbb0>
    c074:	9803      	ldr	r0, [sp, #12]
    c076:	991e      	ldr	r1, [sp, #120]	; 0x78
    c078:	f001 fd06 	bl	da88 <_Bfree>
    c07c:	9803      	ldr	r0, [sp, #12]
    c07e:	9908      	ldr	r1, [sp, #32]
    c080:	f001 fd02 	bl	da88 <_Bfree>
    c084:	9803      	ldr	r0, [sp, #12]
    c086:	9905      	ldr	r1, [sp, #20]
    c088:	f001 fcfe 	bl	da88 <_Bfree>
    c08c:	9803      	ldr	r0, [sp, #12]
    c08e:	9904      	ldr	r1, [sp, #16]
    c090:	f001 fcfa 	bl	da88 <_Bfree>
    c094:	e55f      	b.n	bb56 <_strtod_r+0x646>
    c096:	9b06      	ldr	r3, [sp, #24]
    c098:	2b00      	cmp	r3, #0
    c09a:	d011      	beq.n	c0c0 <_strtod_r+0xbb0>
    c09c:	4b28      	ldr	r3, [pc, #160]	; (c140 <_strtod_r+0xc30>)
    c09e:	1c30      	adds	r0, r6, #0
    c0a0:	9311      	str	r3, [sp, #68]	; 0x44
    c0a2:	2300      	movs	r3, #0
    c0a4:	9310      	str	r3, [sp, #64]	; 0x40
    c0a6:	1c39      	adds	r1, r7, #0
    c0a8:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c0aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c0ac:	f7fc fab8 	bl	8620 <__aeabi_dmul>
    c0b0:	1c06      	adds	r6, r0, #0
    c0b2:	1e0f      	subs	r7, r1, #0
    c0b4:	d104      	bne.n	c0c0 <_strtod_r+0xbb0>
    c0b6:	2800      	cmp	r0, #0
    c0b8:	d102      	bne.n	c0c0 <_strtod_r+0xbb0>
    c0ba:	2322      	movs	r3, #34	; 0x22
    c0bc:	9a03      	ldr	r2, [sp, #12]
    c0be:	6013      	str	r3, [r2, #0]
    c0c0:	9803      	ldr	r0, [sp, #12]
    c0c2:	991e      	ldr	r1, [sp, #120]	; 0x78
    c0c4:	f001 fce0 	bl	da88 <_Bfree>
    c0c8:	9803      	ldr	r0, [sp, #12]
    c0ca:	9908      	ldr	r1, [sp, #32]
    c0cc:	f001 fcdc 	bl	da88 <_Bfree>
    c0d0:	9803      	ldr	r0, [sp, #12]
    c0d2:	9905      	ldr	r1, [sp, #20]
    c0d4:	f001 fcd8 	bl	da88 <_Bfree>
    c0d8:	9803      	ldr	r0, [sp, #12]
    c0da:	990b      	ldr	r1, [sp, #44]	; 0x2c
    c0dc:	f001 fcd4 	bl	da88 <_Bfree>
    c0e0:	9803      	ldr	r0, [sp, #12]
    c0e2:	9904      	ldr	r1, [sp, #16]
    c0e4:	f001 fcd0 	bl	da88 <_Bfree>
    c0e8:	9b19      	ldr	r3, [sp, #100]	; 0x64
    c0ea:	2b00      	cmp	r3, #0
    c0ec:	d002      	beq.n	c0f4 <_strtod_r+0xbe4>
    c0ee:	9b19      	ldr	r3, [sp, #100]	; 0x64
    c0f0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    c0f2:	601a      	str	r2, [r3, #0]
    c0f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c0f6:	2b00      	cmp	r3, #0
    c0f8:	d004      	beq.n	c104 <_strtod_r+0xbf4>
    c0fa:	2380      	movs	r3, #128	; 0x80
    c0fc:	061b      	lsls	r3, r3, #24
    c0fe:	1c32      	adds	r2, r6, #0
    c100:	18fb      	adds	r3, r7, r3
    c102:	e001      	b.n	c108 <_strtod_r+0xbf8>
    c104:	1c32      	adds	r2, r6, #0
    c106:	1c3b      	adds	r3, r7, #0
    c108:	1c10      	adds	r0, r2, #0
    c10a:	1c19      	adds	r1, r3, #0
    c10c:	b023      	add	sp, #140	; 0x8c
    c10e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c110:	7ff00000 	.word	0x7ff00000
    c114:	7fe00000 	.word	0x7fe00000
    c118:	fcb00000 	.word	0xfcb00000
    c11c:	7c9fffff 	.word	0x7c9fffff
    c120:	7fefffff 	.word	0x7fefffff
    c124:	ffc00000 	.word	0xffc00000
    c128:	41dfffff 	.word	0x41dfffff
    c12c:	94a03595 	.word	0x94a03595
    c130:	3fdfffff 	.word	0x3fdfffff
    c134:	35afe535 	.word	0x35afe535
    c138:	3fe00000 	.word	0x3fe00000
    c13c:	3fcfffff 	.word	0x3fcfffff
    c140:	39500000 	.word	0x39500000

0000c144 <_strtol_r>:
    c144:	b5f0      	push	{r4, r5, r6, r7, lr}
    c146:	1c1e      	adds	r6, r3, #0
    c148:	4b44      	ldr	r3, [pc, #272]	; (c25c <_strtol_r+0x118>)
    c14a:	b087      	sub	sp, #28
    c14c:	681b      	ldr	r3, [r3, #0]
    c14e:	9005      	str	r0, [sp, #20]
    c150:	9302      	str	r3, [sp, #8]
    c152:	1c0b      	adds	r3, r1, #0
    c154:	9103      	str	r1, [sp, #12]
    c156:	9201      	str	r2, [sp, #4]
    c158:	781c      	ldrb	r4, [r3, #0]
    c15a:	9a02      	ldr	r2, [sp, #8]
    c15c:	1c5d      	adds	r5, r3, #1
    c15e:	1912      	adds	r2, r2, r4
    c160:	7850      	ldrb	r0, [r2, #1]
    c162:	2208      	movs	r2, #8
    c164:	4010      	ands	r0, r2
    c166:	d001      	beq.n	c16c <_strtol_r+0x28>
    c168:	1c2b      	adds	r3, r5, #0
    c16a:	e7f5      	b.n	c158 <_strtol_r+0x14>
    c16c:	2c2d      	cmp	r4, #45	; 0x2d
    c16e:	d104      	bne.n	c17a <_strtol_r+0x36>
    c170:	1c9d      	adds	r5, r3, #2
    c172:	785c      	ldrb	r4, [r3, #1]
    c174:	2301      	movs	r3, #1
    c176:	9300      	str	r3, [sp, #0]
    c178:	e004      	b.n	c184 <_strtol_r+0x40>
    c17a:	9000      	str	r0, [sp, #0]
    c17c:	2c2b      	cmp	r4, #43	; 0x2b
    c17e:	d101      	bne.n	c184 <_strtol_r+0x40>
    c180:	785c      	ldrb	r4, [r3, #1]
    c182:	1c9d      	adds	r5, r3, #2
    c184:	2e00      	cmp	r6, #0
    c186:	d002      	beq.n	c18e <_strtol_r+0x4a>
    c188:	2e10      	cmp	r6, #16
    c18a:	d10a      	bne.n	c1a2 <_strtol_r+0x5e>
    c18c:	e060      	b.n	c250 <_strtol_r+0x10c>
    c18e:	2c30      	cmp	r4, #48	; 0x30
    c190:	d15c      	bne.n	c24c <_strtol_r+0x108>
    c192:	2220      	movs	r2, #32
    c194:	782b      	ldrb	r3, [r5, #0]
    c196:	4393      	bics	r3, r2
    c198:	2b58      	cmp	r3, #88	; 0x58
    c19a:	d152      	bne.n	c242 <_strtol_r+0xfe>
    c19c:	2610      	movs	r6, #16
    c19e:	786c      	ldrb	r4, [r5, #1]
    c1a0:	3502      	adds	r5, #2
    c1a2:	9f00      	ldr	r7, [sp, #0]
    c1a4:	1c31      	adds	r1, r6, #0
    c1a6:	1e7b      	subs	r3, r7, #1
    c1a8:	419f      	sbcs	r7, r3
    c1aa:	4b2d      	ldr	r3, [pc, #180]	; (c260 <_strtol_r+0x11c>)
    c1ac:	18ff      	adds	r7, r7, r3
    c1ae:	1c38      	adds	r0, r7, #0
    c1b0:	f7fa fa46 	bl	6640 <__aeabi_uidivmod>
    c1b4:	1c38      	adds	r0, r7, #0
    c1b6:	9104      	str	r1, [sp, #16]
    c1b8:	1c31      	adds	r1, r6, #0
    c1ba:	f7fa f9bb 	bl	6534 <__aeabi_uidiv>
    c1be:	2200      	movs	r2, #0
    c1c0:	1c07      	adds	r7, r0, #0
    c1c2:	1c13      	adds	r3, r2, #0
    c1c4:	9902      	ldr	r1, [sp, #8]
    c1c6:	1909      	adds	r1, r1, r4
    c1c8:	7849      	ldrb	r1, [r1, #1]
    c1ca:	0748      	lsls	r0, r1, #29
    c1cc:	d501      	bpl.n	c1d2 <_strtol_r+0x8e>
    c1ce:	3c30      	subs	r4, #48	; 0x30
    c1d0:	e007      	b.n	c1e2 <_strtol_r+0x9e>
    c1d2:	2003      	movs	r0, #3
    c1d4:	4008      	ands	r0, r1
    c1d6:	d017      	beq.n	c208 <_strtol_r+0xc4>
    c1d8:	2137      	movs	r1, #55	; 0x37
    c1da:	2801      	cmp	r0, #1
    c1dc:	d000      	beq.n	c1e0 <_strtol_r+0x9c>
    c1de:	3120      	adds	r1, #32
    c1e0:	1a64      	subs	r4, r4, r1
    c1e2:	42b4      	cmp	r4, r6
    c1e4:	da10      	bge.n	c208 <_strtol_r+0xc4>
    c1e6:	1c51      	adds	r1, r2, #1
    c1e8:	d00b      	beq.n	c202 <_strtol_r+0xbe>
    c1ea:	42bb      	cmp	r3, r7
    c1ec:	d807      	bhi.n	c1fe <_strtol_r+0xba>
    c1ee:	d102      	bne.n	c1f6 <_strtol_r+0xb2>
    c1f0:	9a04      	ldr	r2, [sp, #16]
    c1f2:	4294      	cmp	r4, r2
    c1f4:	dc03      	bgt.n	c1fe <_strtol_r+0xba>
    c1f6:	4373      	muls	r3, r6
    c1f8:	2201      	movs	r2, #1
    c1fa:	18e3      	adds	r3, r4, r3
    c1fc:	e001      	b.n	c202 <_strtol_r+0xbe>
    c1fe:	2201      	movs	r2, #1
    c200:	4252      	negs	r2, r2
    c202:	782c      	ldrb	r4, [r5, #0]
    c204:	3501      	adds	r5, #1
    c206:	e7dd      	b.n	c1c4 <_strtol_r+0x80>
    c208:	1c18      	adds	r0, r3, #0
    c20a:	1c51      	adds	r1, r2, #1
    c20c:	d10b      	bne.n	c226 <_strtol_r+0xe2>
    c20e:	9800      	ldr	r0, [sp, #0]
    c210:	9a05      	ldr	r2, [sp, #20]
    c212:	1e43      	subs	r3, r0, #1
    c214:	4198      	sbcs	r0, r3
    c216:	4b12      	ldr	r3, [pc, #72]	; (c260 <_strtol_r+0x11c>)
    c218:	18c0      	adds	r0, r0, r3
    c21a:	2322      	movs	r3, #34	; 0x22
    c21c:	6013      	str	r3, [r2, #0]
    c21e:	9b01      	ldr	r3, [sp, #4]
    c220:	2b00      	cmp	r3, #0
    c222:	d10a      	bne.n	c23a <_strtol_r+0xf6>
    c224:	e017      	b.n	c256 <_strtol_r+0x112>
    c226:	9900      	ldr	r1, [sp, #0]
    c228:	2900      	cmp	r1, #0
    c22a:	d000      	beq.n	c22e <_strtol_r+0xea>
    c22c:	4258      	negs	r0, r3
    c22e:	9b01      	ldr	r3, [sp, #4]
    c230:	2b00      	cmp	r3, #0
    c232:	d010      	beq.n	c256 <_strtol_r+0x112>
    c234:	9b03      	ldr	r3, [sp, #12]
    c236:	2a00      	cmp	r2, #0
    c238:	d000      	beq.n	c23c <_strtol_r+0xf8>
    c23a:	1e6b      	subs	r3, r5, #1
    c23c:	9a01      	ldr	r2, [sp, #4]
    c23e:	6013      	str	r3, [r2, #0]
    c240:	e009      	b.n	c256 <_strtol_r+0x112>
    c242:	2430      	movs	r4, #48	; 0x30
    c244:	2e00      	cmp	r6, #0
    c246:	d1ac      	bne.n	c1a2 <_strtol_r+0x5e>
    c248:	2608      	movs	r6, #8
    c24a:	e7aa      	b.n	c1a2 <_strtol_r+0x5e>
    c24c:	260a      	movs	r6, #10
    c24e:	e7a8      	b.n	c1a2 <_strtol_r+0x5e>
    c250:	2c30      	cmp	r4, #48	; 0x30
    c252:	d1a6      	bne.n	c1a2 <_strtol_r+0x5e>
    c254:	e79d      	b.n	c192 <_strtol_r+0x4e>
    c256:	b007      	add	sp, #28
    c258:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c25a:	46c0      	nop			; (mov r8, r8)
    c25c:	20000138 	.word	0x20000138
    c260:	7fffffff 	.word	0x7fffffff

0000c264 <_strtoul_r>:
    c264:	b5f0      	push	{r4, r5, r6, r7, lr}
    c266:	1c1e      	adds	r6, r3, #0
    c268:	4b3e      	ldr	r3, [pc, #248]	; (c364 <_strtoul_r+0x100>)
    c26a:	b087      	sub	sp, #28
    c26c:	681b      	ldr	r3, [r3, #0]
    c26e:	1c17      	adds	r7, r2, #0
    c270:	9302      	str	r3, [sp, #8]
    c272:	1c0b      	adds	r3, r1, #0
    c274:	9005      	str	r0, [sp, #20]
    c276:	9104      	str	r1, [sp, #16]
    c278:	781c      	ldrb	r4, [r3, #0]
    c27a:	9a02      	ldr	r2, [sp, #8]
    c27c:	1c5d      	adds	r5, r3, #1
    c27e:	1912      	adds	r2, r2, r4
    c280:	7851      	ldrb	r1, [r2, #1]
    c282:	2208      	movs	r2, #8
    c284:	400a      	ands	r2, r1
    c286:	d001      	beq.n	c28c <_strtoul_r+0x28>
    c288:	1c2b      	adds	r3, r5, #0
    c28a:	e7f5      	b.n	c278 <_strtoul_r+0x14>
    c28c:	2c2d      	cmp	r4, #45	; 0x2d
    c28e:	d104      	bne.n	c29a <_strtoul_r+0x36>
    c290:	1c9d      	adds	r5, r3, #2
    c292:	785c      	ldrb	r4, [r3, #1]
    c294:	2301      	movs	r3, #1
    c296:	9301      	str	r3, [sp, #4]
    c298:	e004      	b.n	c2a4 <_strtoul_r+0x40>
    c29a:	9201      	str	r2, [sp, #4]
    c29c:	2c2b      	cmp	r4, #43	; 0x2b
    c29e:	d101      	bne.n	c2a4 <_strtoul_r+0x40>
    c2a0:	785c      	ldrb	r4, [r3, #1]
    c2a2:	1c9d      	adds	r5, r3, #2
    c2a4:	2e00      	cmp	r6, #0
    c2a6:	d002      	beq.n	c2ae <_strtoul_r+0x4a>
    c2a8:	2e10      	cmp	r6, #16
    c2aa:	d10a      	bne.n	c2c2 <_strtoul_r+0x5e>
    c2ac:	e054      	b.n	c358 <_strtoul_r+0xf4>
    c2ae:	2c30      	cmp	r4, #48	; 0x30
    c2b0:	d150      	bne.n	c354 <_strtoul_r+0xf0>
    c2b2:	2220      	movs	r2, #32
    c2b4:	782b      	ldrb	r3, [r5, #0]
    c2b6:	4393      	bics	r3, r2
    c2b8:	2b58      	cmp	r3, #88	; 0x58
    c2ba:	d146      	bne.n	c34a <_strtoul_r+0xe6>
    c2bc:	2610      	movs	r6, #16
    c2be:	786c      	ldrb	r4, [r5, #1]
    c2c0:	3502      	adds	r5, #2
    c2c2:	2001      	movs	r0, #1
    c2c4:	1c31      	adds	r1, r6, #0
    c2c6:	4240      	negs	r0, r0
    c2c8:	f7fa f934 	bl	6534 <__aeabi_uidiv>
    c2cc:	9003      	str	r0, [sp, #12]
    c2ce:	2001      	movs	r0, #1
    c2d0:	1c31      	adds	r1, r6, #0
    c2d2:	4240      	negs	r0, r0
    c2d4:	f7fa f9b4 	bl	6640 <__aeabi_uidivmod>
    c2d8:	2200      	movs	r2, #0
    c2da:	468c      	mov	ip, r1
    c2dc:	1c13      	adds	r3, r2, #0
    c2de:	9902      	ldr	r1, [sp, #8]
    c2e0:	1909      	adds	r1, r1, r4
    c2e2:	7849      	ldrb	r1, [r1, #1]
    c2e4:	0748      	lsls	r0, r1, #29
    c2e6:	d501      	bpl.n	c2ec <_strtoul_r+0x88>
    c2e8:	3c30      	subs	r4, #48	; 0x30
    c2ea:	e007      	b.n	c2fc <_strtoul_r+0x98>
    c2ec:	2003      	movs	r0, #3
    c2ee:	4008      	ands	r0, r1
    c2f0:	d017      	beq.n	c322 <_strtoul_r+0xbe>
    c2f2:	2137      	movs	r1, #55	; 0x37
    c2f4:	2801      	cmp	r0, #1
    c2f6:	d000      	beq.n	c2fa <_strtoul_r+0x96>
    c2f8:	3120      	adds	r1, #32
    c2fa:	1a64      	subs	r4, r4, r1
    c2fc:	42b4      	cmp	r4, r6
    c2fe:	da10      	bge.n	c322 <_strtoul_r+0xbe>
    c300:	1c51      	adds	r1, r2, #1
    c302:	d00b      	beq.n	c31c <_strtoul_r+0xb8>
    c304:	9a03      	ldr	r2, [sp, #12]
    c306:	4293      	cmp	r3, r2
    c308:	d806      	bhi.n	c318 <_strtoul_r+0xb4>
    c30a:	d101      	bne.n	c310 <_strtoul_r+0xac>
    c30c:	4564      	cmp	r4, ip
    c30e:	dc03      	bgt.n	c318 <_strtoul_r+0xb4>
    c310:	4373      	muls	r3, r6
    c312:	2201      	movs	r2, #1
    c314:	18e3      	adds	r3, r4, r3
    c316:	e001      	b.n	c31c <_strtoul_r+0xb8>
    c318:	2201      	movs	r2, #1
    c31a:	4252      	negs	r2, r2
    c31c:	782c      	ldrb	r4, [r5, #0]
    c31e:	3501      	adds	r5, #1
    c320:	e7dd      	b.n	c2de <_strtoul_r+0x7a>
    c322:	1c18      	adds	r0, r3, #0
    c324:	1c51      	adds	r1, r2, #1
    c326:	d104      	bne.n	c332 <_strtoul_r+0xce>
    c328:	2322      	movs	r3, #34	; 0x22
    c32a:	9905      	ldr	r1, [sp, #20]
    c32c:	1c10      	adds	r0, r2, #0
    c32e:	600b      	str	r3, [r1, #0]
    c330:	e003      	b.n	c33a <_strtoul_r+0xd6>
    c332:	9901      	ldr	r1, [sp, #4]
    c334:	2900      	cmp	r1, #0
    c336:	d000      	beq.n	c33a <_strtoul_r+0xd6>
    c338:	4258      	negs	r0, r3
    c33a:	2f00      	cmp	r7, #0
    c33c:	d00f      	beq.n	c35e <_strtoul_r+0xfa>
    c33e:	9b04      	ldr	r3, [sp, #16]
    c340:	2a00      	cmp	r2, #0
    c342:	d000      	beq.n	c346 <_strtoul_r+0xe2>
    c344:	1e6b      	subs	r3, r5, #1
    c346:	603b      	str	r3, [r7, #0]
    c348:	e009      	b.n	c35e <_strtoul_r+0xfa>
    c34a:	2430      	movs	r4, #48	; 0x30
    c34c:	2e00      	cmp	r6, #0
    c34e:	d1b8      	bne.n	c2c2 <_strtoul_r+0x5e>
    c350:	2608      	movs	r6, #8
    c352:	e7b6      	b.n	c2c2 <_strtoul_r+0x5e>
    c354:	260a      	movs	r6, #10
    c356:	e7b4      	b.n	c2c2 <_strtoul_r+0x5e>
    c358:	2c30      	cmp	r4, #48	; 0x30
    c35a:	d1b2      	bne.n	c2c2 <_strtoul_r+0x5e>
    c35c:	e7a9      	b.n	c2b2 <_strtoul_r+0x4e>
    c35e:	b007      	add	sp, #28
    c360:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c362:	46c0      	nop			; (mov r8, r8)
    c364:	20000138 	.word	0x20000138

0000c368 <__submore>:
    c368:	1c0b      	adds	r3, r1, #0
    c36a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    c36c:	6b4d      	ldr	r5, [r1, #52]	; 0x34
    c36e:	3344      	adds	r3, #68	; 0x44
    c370:	1c0c      	adds	r4, r1, #0
    c372:	429d      	cmp	r5, r3
    c374:	d11b      	bne.n	c3ae <__submore+0x46>
    c376:	2680      	movs	r6, #128	; 0x80
    c378:	00f6      	lsls	r6, r6, #3
    c37a:	1c31      	adds	r1, r6, #0
    c37c:	f7fd fd42 	bl	9e04 <_malloc_r>
    c380:	2800      	cmp	r0, #0
    c382:	d102      	bne.n	c38a <__submore+0x22>
    c384:	2001      	movs	r0, #1
    c386:	4240      	negs	r0, r0
    c388:	e025      	b.n	c3d6 <__submore+0x6e>
    c38a:	1c23      	adds	r3, r4, #0
    c38c:	6360      	str	r0, [r4, #52]	; 0x34
    c38e:	63a6      	str	r6, [r4, #56]	; 0x38
    c390:	3346      	adds	r3, #70	; 0x46
    c392:	781a      	ldrb	r2, [r3, #0]
    c394:	4b10      	ldr	r3, [pc, #64]	; (c3d8 <__submore+0x70>)
    c396:	54c2      	strb	r2, [r0, r3]
    c398:	1c23      	adds	r3, r4, #0
    c39a:	3345      	adds	r3, #69	; 0x45
    c39c:	781a      	ldrb	r2, [r3, #0]
    c39e:	4b0f      	ldr	r3, [pc, #60]	; (c3dc <__submore+0x74>)
    c3a0:	54c2      	strb	r2, [r0, r3]
    c3a2:	782a      	ldrb	r2, [r5, #0]
    c3a4:	4b0e      	ldr	r3, [pc, #56]	; (c3e0 <__submore+0x78>)
    c3a6:	54c2      	strb	r2, [r0, r3]
    c3a8:	18c0      	adds	r0, r0, r3
    c3aa:	6020      	str	r0, [r4, #0]
    c3ac:	e012      	b.n	c3d4 <__submore+0x6c>
    c3ae:	6b8e      	ldr	r6, [r1, #56]	; 0x38
    c3b0:	1c29      	adds	r1, r5, #0
    c3b2:	0073      	lsls	r3, r6, #1
    c3b4:	1c1a      	adds	r2, r3, #0
    c3b6:	9301      	str	r3, [sp, #4]
    c3b8:	f001 ff3f 	bl	e23a <_realloc_r>
    c3bc:	1e05      	subs	r5, r0, #0
    c3be:	d0e1      	beq.n	c384 <__submore+0x1c>
    c3c0:	1987      	adds	r7, r0, r6
    c3c2:	1c38      	adds	r0, r7, #0
    c3c4:	1c29      	adds	r1, r5, #0
    c3c6:	1c32      	adds	r2, r6, #0
    c3c8:	f7fd fcc5 	bl	9d56 <memcpy>
    c3cc:	9b01      	ldr	r3, [sp, #4]
    c3ce:	6027      	str	r7, [r4, #0]
    c3d0:	6365      	str	r5, [r4, #52]	; 0x34
    c3d2:	63a3      	str	r3, [r4, #56]	; 0x38
    c3d4:	2000      	movs	r0, #0
    c3d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    c3d8:	000003ff 	.word	0x000003ff
    c3dc:	000003fe 	.word	0x000003fe
    c3e0:	000003fd 	.word	0x000003fd

0000c3e4 <__swbuf_r>:
    c3e4:	b570      	push	{r4, r5, r6, lr}
    c3e6:	1c05      	adds	r5, r0, #0
    c3e8:	1c0e      	adds	r6, r1, #0
    c3ea:	1c14      	adds	r4, r2, #0
    c3ec:	2800      	cmp	r0, #0
    c3ee:	d004      	beq.n	c3fa <__swbuf_r+0x16>
    c3f0:	6983      	ldr	r3, [r0, #24]
    c3f2:	2b00      	cmp	r3, #0
    c3f4:	d101      	bne.n	c3fa <__swbuf_r+0x16>
    c3f6:	f7fd fa65 	bl	98c4 <__sinit>
    c3fa:	4b23      	ldr	r3, [pc, #140]	; (c488 <__swbuf_r+0xa4>)
    c3fc:	429c      	cmp	r4, r3
    c3fe:	d101      	bne.n	c404 <__swbuf_r+0x20>
    c400:	686c      	ldr	r4, [r5, #4]
    c402:	e008      	b.n	c416 <__swbuf_r+0x32>
    c404:	4b21      	ldr	r3, [pc, #132]	; (c48c <__swbuf_r+0xa8>)
    c406:	429c      	cmp	r4, r3
    c408:	d101      	bne.n	c40e <__swbuf_r+0x2a>
    c40a:	68ac      	ldr	r4, [r5, #8]
    c40c:	e003      	b.n	c416 <__swbuf_r+0x32>
    c40e:	4b20      	ldr	r3, [pc, #128]	; (c490 <__swbuf_r+0xac>)
    c410:	429c      	cmp	r4, r3
    c412:	d100      	bne.n	c416 <__swbuf_r+0x32>
    c414:	68ec      	ldr	r4, [r5, #12]
    c416:	69a3      	ldr	r3, [r4, #24]
    c418:	60a3      	str	r3, [r4, #8]
    c41a:	89a3      	ldrh	r3, [r4, #12]
    c41c:	071b      	lsls	r3, r3, #28
    c41e:	d50a      	bpl.n	c436 <__swbuf_r+0x52>
    c420:	6923      	ldr	r3, [r4, #16]
    c422:	2b00      	cmp	r3, #0
    c424:	d007      	beq.n	c436 <__swbuf_r+0x52>
    c426:	6823      	ldr	r3, [r4, #0]
    c428:	6922      	ldr	r2, [r4, #16]
    c42a:	b2f6      	uxtb	r6, r6
    c42c:	1a98      	subs	r0, r3, r2
    c42e:	6963      	ldr	r3, [r4, #20]
    c430:	4298      	cmp	r0, r3
    c432:	db0f      	blt.n	c454 <__swbuf_r+0x70>
    c434:	e008      	b.n	c448 <__swbuf_r+0x64>
    c436:	1c28      	adds	r0, r5, #0
    c438:	1c21      	adds	r1, r4, #0
    c43a:	f000 f83f 	bl	c4bc <__swsetup_r>
    c43e:	2800      	cmp	r0, #0
    c440:	d0f1      	beq.n	c426 <__swbuf_r+0x42>
    c442:	2001      	movs	r0, #1
    c444:	4240      	negs	r0, r0
    c446:	e01d      	b.n	c484 <__swbuf_r+0xa0>
    c448:	1c28      	adds	r0, r5, #0
    c44a:	1c21      	adds	r1, r4, #0
    c44c:	f7fd f9b8 	bl	97c0 <_fflush_r>
    c450:	2800      	cmp	r0, #0
    c452:	d1f6      	bne.n	c442 <__swbuf_r+0x5e>
    c454:	68a3      	ldr	r3, [r4, #8]
    c456:	3001      	adds	r0, #1
    c458:	3b01      	subs	r3, #1
    c45a:	60a3      	str	r3, [r4, #8]
    c45c:	6823      	ldr	r3, [r4, #0]
    c45e:	1c5a      	adds	r2, r3, #1
    c460:	6022      	str	r2, [r4, #0]
    c462:	701e      	strb	r6, [r3, #0]
    c464:	6963      	ldr	r3, [r4, #20]
    c466:	4298      	cmp	r0, r3
    c468:	d005      	beq.n	c476 <__swbuf_r+0x92>
    c46a:	89a3      	ldrh	r3, [r4, #12]
    c46c:	1c30      	adds	r0, r6, #0
    c46e:	07db      	lsls	r3, r3, #31
    c470:	d508      	bpl.n	c484 <__swbuf_r+0xa0>
    c472:	2e0a      	cmp	r6, #10
    c474:	d106      	bne.n	c484 <__swbuf_r+0xa0>
    c476:	1c28      	adds	r0, r5, #0
    c478:	1c21      	adds	r1, r4, #0
    c47a:	f7fd f9a1 	bl	97c0 <_fflush_r>
    c47e:	2800      	cmp	r0, #0
    c480:	d1df      	bne.n	c442 <__swbuf_r+0x5e>
    c482:	1c30      	adds	r0, r6, #0
    c484:	bd70      	pop	{r4, r5, r6, pc}
    c486:	46c0      	nop			; (mov r8, r8)
    c488:	0000f898 	.word	0x0000f898
    c48c:	0000f8b8 	.word	0x0000f8b8
    c490:	0000f8d8 	.word	0x0000f8d8

0000c494 <_write_r>:
    c494:	b538      	push	{r3, r4, r5, lr}
    c496:	1c05      	adds	r5, r0, #0
    c498:	2000      	movs	r0, #0
    c49a:	4c07      	ldr	r4, [pc, #28]	; (c4b8 <_write_r+0x24>)
    c49c:	6020      	str	r0, [r4, #0]
    c49e:	1c08      	adds	r0, r1, #0
    c4a0:	1c11      	adds	r1, r2, #0
    c4a2:	1c1a      	adds	r2, r3, #0
    c4a4:	f7f7 fc50 	bl	3d48 <_write>
    c4a8:	1c43      	adds	r3, r0, #1
    c4aa:	d103      	bne.n	c4b4 <_write_r+0x20>
    c4ac:	6823      	ldr	r3, [r4, #0]
    c4ae:	2b00      	cmp	r3, #0
    c4b0:	d000      	beq.n	c4b4 <_write_r+0x20>
    c4b2:	602b      	str	r3, [r5, #0]
    c4b4:	bd38      	pop	{r3, r4, r5, pc}
    c4b6:	46c0      	nop			; (mov r8, r8)
    c4b8:	200047c8 	.word	0x200047c8

0000c4bc <__swsetup_r>:
    c4bc:	4b35      	ldr	r3, [pc, #212]	; (c594 <__swsetup_r+0xd8>)
    c4be:	b570      	push	{r4, r5, r6, lr}
    c4c0:	681d      	ldr	r5, [r3, #0]
    c4c2:	1c06      	adds	r6, r0, #0
    c4c4:	1c0c      	adds	r4, r1, #0
    c4c6:	2d00      	cmp	r5, #0
    c4c8:	d005      	beq.n	c4d6 <__swsetup_r+0x1a>
    c4ca:	69ab      	ldr	r3, [r5, #24]
    c4cc:	2b00      	cmp	r3, #0
    c4ce:	d102      	bne.n	c4d6 <__swsetup_r+0x1a>
    c4d0:	1c28      	adds	r0, r5, #0
    c4d2:	f7fd f9f7 	bl	98c4 <__sinit>
    c4d6:	4b30      	ldr	r3, [pc, #192]	; (c598 <__swsetup_r+0xdc>)
    c4d8:	429c      	cmp	r4, r3
    c4da:	d101      	bne.n	c4e0 <__swsetup_r+0x24>
    c4dc:	686c      	ldr	r4, [r5, #4]
    c4de:	e008      	b.n	c4f2 <__swsetup_r+0x36>
    c4e0:	4b2e      	ldr	r3, [pc, #184]	; (c59c <__swsetup_r+0xe0>)
    c4e2:	429c      	cmp	r4, r3
    c4e4:	d101      	bne.n	c4ea <__swsetup_r+0x2e>
    c4e6:	68ac      	ldr	r4, [r5, #8]
    c4e8:	e003      	b.n	c4f2 <__swsetup_r+0x36>
    c4ea:	4b2d      	ldr	r3, [pc, #180]	; (c5a0 <__swsetup_r+0xe4>)
    c4ec:	429c      	cmp	r4, r3
    c4ee:	d100      	bne.n	c4f2 <__swsetup_r+0x36>
    c4f0:	68ec      	ldr	r4, [r5, #12]
    c4f2:	89a3      	ldrh	r3, [r4, #12]
    c4f4:	b29a      	uxth	r2, r3
    c4f6:	0711      	lsls	r1, r2, #28
    c4f8:	d423      	bmi.n	c542 <__swsetup_r+0x86>
    c4fa:	06d1      	lsls	r1, r2, #27
    c4fc:	d407      	bmi.n	c50e <__swsetup_r+0x52>
    c4fe:	2209      	movs	r2, #9
    c500:	2001      	movs	r0, #1
    c502:	6032      	str	r2, [r6, #0]
    c504:	3237      	adds	r2, #55	; 0x37
    c506:	4313      	orrs	r3, r2
    c508:	81a3      	strh	r3, [r4, #12]
    c50a:	4240      	negs	r0, r0
    c50c:	e040      	b.n	c590 <__swsetup_r+0xd4>
    c50e:	0753      	lsls	r3, r2, #29
    c510:	d513      	bpl.n	c53a <__swsetup_r+0x7e>
    c512:	6b61      	ldr	r1, [r4, #52]	; 0x34
    c514:	2900      	cmp	r1, #0
    c516:	d008      	beq.n	c52a <__swsetup_r+0x6e>
    c518:	1c23      	adds	r3, r4, #0
    c51a:	3344      	adds	r3, #68	; 0x44
    c51c:	4299      	cmp	r1, r3
    c51e:	d002      	beq.n	c526 <__swsetup_r+0x6a>
    c520:	1c30      	adds	r0, r6, #0
    c522:	f7fd fc29 	bl	9d78 <_free_r>
    c526:	2300      	movs	r3, #0
    c528:	6363      	str	r3, [r4, #52]	; 0x34
    c52a:	2224      	movs	r2, #36	; 0x24
    c52c:	89a3      	ldrh	r3, [r4, #12]
    c52e:	4393      	bics	r3, r2
    c530:	81a3      	strh	r3, [r4, #12]
    c532:	2300      	movs	r3, #0
    c534:	6063      	str	r3, [r4, #4]
    c536:	6923      	ldr	r3, [r4, #16]
    c538:	6023      	str	r3, [r4, #0]
    c53a:	2208      	movs	r2, #8
    c53c:	89a3      	ldrh	r3, [r4, #12]
    c53e:	4313      	orrs	r3, r2
    c540:	81a3      	strh	r3, [r4, #12]
    c542:	6923      	ldr	r3, [r4, #16]
    c544:	2b00      	cmp	r3, #0
    c546:	d10b      	bne.n	c560 <__swsetup_r+0xa4>
    c548:	23a0      	movs	r3, #160	; 0xa0
    c54a:	89a2      	ldrh	r2, [r4, #12]
    c54c:	009b      	lsls	r3, r3, #2
    c54e:	4013      	ands	r3, r2
    c550:	2280      	movs	r2, #128	; 0x80
    c552:	0092      	lsls	r2, r2, #2
    c554:	4293      	cmp	r3, r2
    c556:	d003      	beq.n	c560 <__swsetup_r+0xa4>
    c558:	1c30      	adds	r0, r6, #0
    c55a:	1c21      	adds	r1, r4, #0
    c55c:	f7fd fb84 	bl	9c68 <__smakebuf_r>
    c560:	2301      	movs	r3, #1
    c562:	89a2      	ldrh	r2, [r4, #12]
    c564:	4013      	ands	r3, r2
    c566:	d005      	beq.n	c574 <__swsetup_r+0xb8>
    c568:	2300      	movs	r3, #0
    c56a:	60a3      	str	r3, [r4, #8]
    c56c:	6963      	ldr	r3, [r4, #20]
    c56e:	425b      	negs	r3, r3
    c570:	61a3      	str	r3, [r4, #24]
    c572:	e003      	b.n	c57c <__swsetup_r+0xc0>
    c574:	0791      	lsls	r1, r2, #30
    c576:	d400      	bmi.n	c57a <__swsetup_r+0xbe>
    c578:	6963      	ldr	r3, [r4, #20]
    c57a:	60a3      	str	r3, [r4, #8]
    c57c:	2000      	movs	r0, #0
    c57e:	6923      	ldr	r3, [r4, #16]
    c580:	4283      	cmp	r3, r0
    c582:	d105      	bne.n	c590 <__swsetup_r+0xd4>
    c584:	0613      	lsls	r3, r2, #24
    c586:	d503      	bpl.n	c590 <__swsetup_r+0xd4>
    c588:	2340      	movs	r3, #64	; 0x40
    c58a:	431a      	orrs	r2, r3
    c58c:	81a2      	strh	r2, [r4, #12]
    c58e:	3801      	subs	r0, #1
    c590:	bd70      	pop	{r4, r5, r6, pc}
    c592:	46c0      	nop			; (mov r8, r8)
    c594:	20000134 	.word	0x20000134
    c598:	0000f898 	.word	0x0000f898
    c59c:	0000f8b8 	.word	0x0000f8b8
    c5a0:	0000f8d8 	.word	0x0000f8d8

0000c5a4 <_close_r>:
    c5a4:	b538      	push	{r3, r4, r5, lr}
    c5a6:	2300      	movs	r3, #0
    c5a8:	4c06      	ldr	r4, [pc, #24]	; (c5c4 <_close_r+0x20>)
    c5aa:	1c05      	adds	r5, r0, #0
    c5ac:	1c08      	adds	r0, r1, #0
    c5ae:	6023      	str	r3, [r4, #0]
    c5b0:	f7f7 fbb4 	bl	3d1c <_close>
    c5b4:	1c43      	adds	r3, r0, #1
    c5b6:	d103      	bne.n	c5c0 <_close_r+0x1c>
    c5b8:	6823      	ldr	r3, [r4, #0]
    c5ba:	2b00      	cmp	r3, #0
    c5bc:	d000      	beq.n	c5c0 <_close_r+0x1c>
    c5be:	602b      	str	r3, [r5, #0]
    c5c0:	bd38      	pop	{r3, r4, r5, pc}
    c5c2:	46c0      	nop			; (mov r8, r8)
    c5c4:	200047c8 	.word	0x200047c8

0000c5c8 <quorem>:
    c5c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    c5ca:	6903      	ldr	r3, [r0, #16]
    c5cc:	690c      	ldr	r4, [r1, #16]
    c5ce:	b089      	sub	sp, #36	; 0x24
    c5d0:	2600      	movs	r6, #0
    c5d2:	42a3      	cmp	r3, r4
    c5d4:	db7c      	blt.n	c6d0 <quorem+0x108>
    c5d6:	1c0b      	adds	r3, r1, #0
    c5d8:	3c01      	subs	r4, #1
    c5da:	3314      	adds	r3, #20
    c5dc:	00a5      	lsls	r5, r4, #2
    c5de:	9303      	str	r3, [sp, #12]
    c5e0:	195b      	adds	r3, r3, r5
    c5e2:	9304      	str	r3, [sp, #16]
    c5e4:	1c03      	adds	r3, r0, #0
    c5e6:	3314      	adds	r3, #20
    c5e8:	9301      	str	r3, [sp, #4]
    c5ea:	195d      	adds	r5, r3, r5
    c5ec:	9b04      	ldr	r3, [sp, #16]
    c5ee:	9107      	str	r1, [sp, #28]
    c5f0:	681b      	ldr	r3, [r3, #0]
    c5f2:	9002      	str	r0, [sp, #8]
    c5f4:	1c59      	adds	r1, r3, #1
    c5f6:	6828      	ldr	r0, [r5, #0]
    c5f8:	9305      	str	r3, [sp, #20]
    c5fa:	f7f9 ff9b 	bl	6534 <__aeabi_uidiv>
    c5fe:	1e07      	subs	r7, r0, #0
    c600:	42b7      	cmp	r7, r6
    c602:	d035      	beq.n	c670 <quorem+0xa8>
    c604:	9b03      	ldr	r3, [sp, #12]
    c606:	9801      	ldr	r0, [sp, #4]
    c608:	469c      	mov	ip, r3
    c60a:	9605      	str	r6, [sp, #20]
    c60c:	4663      	mov	r3, ip
    c60e:	cb04      	ldmia	r3!, {r2}
    c610:	b291      	uxth	r1, r2
    c612:	4379      	muls	r1, r7
    c614:	0c12      	lsrs	r2, r2, #16
    c616:	437a      	muls	r2, r7
    c618:	1871      	adds	r1, r6, r1
    c61a:	0c0e      	lsrs	r6, r1, #16
    c61c:	469c      	mov	ip, r3
    c61e:	18b3      	adds	r3, r6, r2
    c620:	9306      	str	r3, [sp, #24]
    c622:	8802      	ldrh	r2, [r0, #0]
    c624:	0c1e      	lsrs	r6, r3, #16
    c626:	9b05      	ldr	r3, [sp, #20]
    c628:	b289      	uxth	r1, r1
    c62a:	18d2      	adds	r2, r2, r3
    c62c:	6803      	ldr	r3, [r0, #0]
    c62e:	1a52      	subs	r2, r2, r1
    c630:	0c19      	lsrs	r1, r3, #16
    c632:	466b      	mov	r3, sp
    c634:	8b1b      	ldrh	r3, [r3, #24]
    c636:	1acb      	subs	r3, r1, r3
    c638:	1411      	asrs	r1, r2, #16
    c63a:	185b      	adds	r3, r3, r1
    c63c:	1419      	asrs	r1, r3, #16
    c63e:	b292      	uxth	r2, r2
    c640:	041b      	lsls	r3, r3, #16
    c642:	431a      	orrs	r2, r3
    c644:	9b04      	ldr	r3, [sp, #16]
    c646:	9105      	str	r1, [sp, #20]
    c648:	c004      	stmia	r0!, {r2}
    c64a:	4563      	cmp	r3, ip
    c64c:	d2de      	bcs.n	c60c <quorem+0x44>
    c64e:	682b      	ldr	r3, [r5, #0]
    c650:	2b00      	cmp	r3, #0
    c652:	d10d      	bne.n	c670 <quorem+0xa8>
    c654:	1c23      	adds	r3, r4, #0
    c656:	9a01      	ldr	r2, [sp, #4]
    c658:	3d04      	subs	r5, #4
    c65a:	4295      	cmp	r5, r2
    c65c:	d803      	bhi.n	c666 <quorem+0x9e>
    c65e:	9a02      	ldr	r2, [sp, #8]
    c660:	1c1c      	adds	r4, r3, #0
    c662:	6113      	str	r3, [r2, #16]
    c664:	e004      	b.n	c670 <quorem+0xa8>
    c666:	682a      	ldr	r2, [r5, #0]
    c668:	2a00      	cmp	r2, #0
    c66a:	d1f8      	bne.n	c65e <quorem+0x96>
    c66c:	3b01      	subs	r3, #1
    c66e:	e7f2      	b.n	c656 <quorem+0x8e>
    c670:	9802      	ldr	r0, [sp, #8]
    c672:	9907      	ldr	r1, [sp, #28]
    c674:	f001 fc22 	bl	debc <__mcmp>
    c678:	2800      	cmp	r0, #0
    c67a:	db28      	blt.n	c6ce <quorem+0x106>
    c67c:	2000      	movs	r0, #0
    c67e:	9901      	ldr	r1, [sp, #4]
    c680:	9a03      	ldr	r2, [sp, #12]
    c682:	3701      	adds	r7, #1
    c684:	ca20      	ldmia	r2!, {r5}
    c686:	880b      	ldrh	r3, [r1, #0]
    c688:	1818      	adds	r0, r3, r0
    c68a:	b2ab      	uxth	r3, r5
    c68c:	1ac3      	subs	r3, r0, r3
    c68e:	6808      	ldr	r0, [r1, #0]
    c690:	0c2d      	lsrs	r5, r5, #16
    c692:	0c00      	lsrs	r0, r0, #16
    c694:	1b45      	subs	r5, r0, r5
    c696:	141e      	asrs	r6, r3, #16
    c698:	19ad      	adds	r5, r5, r6
    c69a:	1428      	asrs	r0, r5, #16
    c69c:	b29b      	uxth	r3, r3
    c69e:	042d      	lsls	r5, r5, #16
    c6a0:	432b      	orrs	r3, r5
    c6a2:	c108      	stmia	r1!, {r3}
    c6a4:	9b04      	ldr	r3, [sp, #16]
    c6a6:	4293      	cmp	r3, r2
    c6a8:	d2ec      	bcs.n	c684 <quorem+0xbc>
    c6aa:	9a01      	ldr	r2, [sp, #4]
    c6ac:	00a3      	lsls	r3, r4, #2
    c6ae:	18d3      	adds	r3, r2, r3
    c6b0:	681a      	ldr	r2, [r3, #0]
    c6b2:	2a00      	cmp	r2, #0
    c6b4:	d10b      	bne.n	c6ce <quorem+0x106>
    c6b6:	9a01      	ldr	r2, [sp, #4]
    c6b8:	3b04      	subs	r3, #4
    c6ba:	4293      	cmp	r3, r2
    c6bc:	d802      	bhi.n	c6c4 <quorem+0xfc>
    c6be:	9b02      	ldr	r3, [sp, #8]
    c6c0:	611c      	str	r4, [r3, #16]
    c6c2:	e004      	b.n	c6ce <quorem+0x106>
    c6c4:	681a      	ldr	r2, [r3, #0]
    c6c6:	2a00      	cmp	r2, #0
    c6c8:	d1f9      	bne.n	c6be <quorem+0xf6>
    c6ca:	3c01      	subs	r4, #1
    c6cc:	e7f3      	b.n	c6b6 <quorem+0xee>
    c6ce:	1c3e      	adds	r6, r7, #0
    c6d0:	1c30      	adds	r0, r6, #0
    c6d2:	b009      	add	sp, #36	; 0x24
    c6d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0000c6d8 <_dtoa_r>:
    c6d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    c6da:	1c16      	adds	r6, r2, #0
    c6dc:	1c1f      	adds	r7, r3, #0
    c6de:	6a44      	ldr	r4, [r0, #36]	; 0x24
    c6e0:	b09b      	sub	sp, #108	; 0x6c
    c6e2:	9008      	str	r0, [sp, #32]
    c6e4:	9d23      	ldr	r5, [sp, #140]	; 0x8c
    c6e6:	9606      	str	r6, [sp, #24]
    c6e8:	9707      	str	r7, [sp, #28]
    c6ea:	2c00      	cmp	r4, #0
    c6ec:	d108      	bne.n	c700 <_dtoa_r+0x28>
    c6ee:	2010      	movs	r0, #16
    c6f0:	f7fd fb12 	bl	9d18 <malloc>
    c6f4:	9b08      	ldr	r3, [sp, #32]
    c6f6:	6258      	str	r0, [r3, #36]	; 0x24
    c6f8:	6044      	str	r4, [r0, #4]
    c6fa:	6084      	str	r4, [r0, #8]
    c6fc:	6004      	str	r4, [r0, #0]
    c6fe:	60c4      	str	r4, [r0, #12]
    c700:	9b08      	ldr	r3, [sp, #32]
    c702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c704:	6819      	ldr	r1, [r3, #0]
    c706:	2900      	cmp	r1, #0
    c708:	d00b      	beq.n	c722 <_dtoa_r+0x4a>
    c70a:	685a      	ldr	r2, [r3, #4]
    c70c:	2301      	movs	r3, #1
    c70e:	4093      	lsls	r3, r2
    c710:	604a      	str	r2, [r1, #4]
    c712:	608b      	str	r3, [r1, #8]
    c714:	9808      	ldr	r0, [sp, #32]
    c716:	f001 f9b7 	bl	da88 <_Bfree>
    c71a:	2200      	movs	r2, #0
    c71c:	9b08      	ldr	r3, [sp, #32]
    c71e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c720:	601a      	str	r2, [r3, #0]
    c722:	9b07      	ldr	r3, [sp, #28]
    c724:	2b00      	cmp	r3, #0
    c726:	da05      	bge.n	c734 <_dtoa_r+0x5c>
    c728:	2301      	movs	r3, #1
    c72a:	602b      	str	r3, [r5, #0]
    c72c:	007b      	lsls	r3, r7, #1
    c72e:	085b      	lsrs	r3, r3, #1
    c730:	9307      	str	r3, [sp, #28]
    c732:	e001      	b.n	c738 <_dtoa_r+0x60>
    c734:	2300      	movs	r3, #0
    c736:	602b      	str	r3, [r5, #0]
    c738:	9c07      	ldr	r4, [sp, #28]
    c73a:	4bc6      	ldr	r3, [pc, #792]	; (ca54 <_dtoa_r+0x37c>)
    c73c:	1c22      	adds	r2, r4, #0
    c73e:	9317      	str	r3, [sp, #92]	; 0x5c
    c740:	401a      	ands	r2, r3
    c742:	429a      	cmp	r2, r3
    c744:	d119      	bne.n	c77a <_dtoa_r+0xa2>
    c746:	4bc4      	ldr	r3, [pc, #784]	; (ca58 <_dtoa_r+0x380>)
    c748:	9a22      	ldr	r2, [sp, #136]	; 0x88
    c74a:	6013      	str	r3, [r2, #0]
    c74c:	9a06      	ldr	r2, [sp, #24]
    c74e:	4bc3      	ldr	r3, [pc, #780]	; (ca5c <_dtoa_r+0x384>)
    c750:	2a00      	cmp	r2, #0
    c752:	d102      	bne.n	c75a <_dtoa_r+0x82>
    c754:	0324      	lsls	r4, r4, #12
    c756:	d100      	bne.n	c75a <_dtoa_r+0x82>
    c758:	4bc1      	ldr	r3, [pc, #772]	; (ca60 <_dtoa_r+0x388>)
    c75a:	9a24      	ldr	r2, [sp, #144]	; 0x90
    c75c:	1c18      	adds	r0, r3, #0
    c75e:	2a00      	cmp	r2, #0
    c760:	d101      	bne.n	c766 <_dtoa_r+0x8e>
    c762:	f000 fdb6 	bl	d2d2 <_dtoa_r+0xbfa>
    c766:	78d9      	ldrb	r1, [r3, #3]
    c768:	1cda      	adds	r2, r3, #3
    c76a:	2900      	cmp	r1, #0
    c76c:	d000      	beq.n	c770 <_dtoa_r+0x98>
    c76e:	3205      	adds	r2, #5
    c770:	9924      	ldr	r1, [sp, #144]	; 0x90
    c772:	1c18      	adds	r0, r3, #0
    c774:	600a      	str	r2, [r1, #0]
    c776:	f000 fdac 	bl	d2d2 <_dtoa_r+0xbfa>
    c77a:	9e06      	ldr	r6, [sp, #24]
    c77c:	9f07      	ldr	r7, [sp, #28]
    c77e:	2200      	movs	r2, #0
    c780:	1c30      	adds	r0, r6, #0
    c782:	1c39      	adds	r1, r7, #0
    c784:	2300      	movs	r3, #0
    c786:	f7fa f867 	bl	6858 <__aeabi_dcmpeq>
    c78a:	1e05      	subs	r5, r0, #0
    c78c:	d00e      	beq.n	c7ac <_dtoa_r+0xd4>
    c78e:	2301      	movs	r3, #1
    c790:	9a22      	ldr	r2, [sp, #136]	; 0x88
    c792:	6013      	str	r3, [r2, #0]
    c794:	4bb3      	ldr	r3, [pc, #716]	; (ca64 <_dtoa_r+0x38c>)
    c796:	9a24      	ldr	r2, [sp, #144]	; 0x90
    c798:	1c18      	adds	r0, r3, #0
    c79a:	2a00      	cmp	r2, #0
    c79c:	d101      	bne.n	c7a2 <_dtoa_r+0xca>
    c79e:	f000 fd98 	bl	d2d2 <_dtoa_r+0xbfa>
    c7a2:	4ab1      	ldr	r2, [pc, #708]	; (ca68 <_dtoa_r+0x390>)
    c7a4:	9924      	ldr	r1, [sp, #144]	; 0x90
    c7a6:	600a      	str	r2, [r1, #0]
    c7a8:	f000 fd93 	bl	d2d2 <_dtoa_r+0xbfa>
    c7ac:	ab19      	add	r3, sp, #100	; 0x64
    c7ae:	9300      	str	r3, [sp, #0]
    c7b0:	ab18      	add	r3, sp, #96	; 0x60
    c7b2:	9301      	str	r3, [sp, #4]
    c7b4:	9808      	ldr	r0, [sp, #32]
    c7b6:	1c32      	adds	r2, r6, #0
    c7b8:	1c3b      	adds	r3, r7, #0
    c7ba:	f001 fc7b 	bl	e0b4 <__d2b>
    c7be:	0061      	lsls	r1, r4, #1
    c7c0:	900a      	str	r0, [sp, #40]	; 0x28
    c7c2:	0d49      	lsrs	r1, r1, #21
    c7c4:	d009      	beq.n	c7da <_dtoa_r+0x102>
    c7c6:	0338      	lsls	r0, r7, #12
    c7c8:	4ca8      	ldr	r4, [pc, #672]	; (ca6c <_dtoa_r+0x394>)
    c7ca:	0b00      	lsrs	r0, r0, #12
    c7cc:	4304      	orrs	r4, r0
    c7ce:	48a8      	ldr	r0, [pc, #672]	; (ca70 <_dtoa_r+0x398>)
    c7d0:	1c32      	adds	r2, r6, #0
    c7d2:	1c23      	adds	r3, r4, #0
    c7d4:	180e      	adds	r6, r1, r0
    c7d6:	9516      	str	r5, [sp, #88]	; 0x58
    c7d8:	e01c      	b.n	c814 <_dtoa_r+0x13c>
    c7da:	9b18      	ldr	r3, [sp, #96]	; 0x60
    c7dc:	9a19      	ldr	r2, [sp, #100]	; 0x64
    c7de:	189e      	adds	r6, r3, r2
    c7e0:	4ba4      	ldr	r3, [pc, #656]	; (ca74 <_dtoa_r+0x39c>)
    c7e2:	429e      	cmp	r6, r3
    c7e4:	db09      	blt.n	c7fa <_dtoa_r+0x122>
    c7e6:	4ba4      	ldr	r3, [pc, #656]	; (ca78 <_dtoa_r+0x3a0>)
    c7e8:	18f0      	adds	r0, r6, r3
    c7ea:	9b06      	ldr	r3, [sp, #24]
    c7ec:	40c3      	lsrs	r3, r0
    c7ee:	1c18      	adds	r0, r3, #0
    c7f0:	4ba2      	ldr	r3, [pc, #648]	; (ca7c <_dtoa_r+0x3a4>)
    c7f2:	1b9b      	subs	r3, r3, r6
    c7f4:	409c      	lsls	r4, r3
    c7f6:	4320      	orrs	r0, r4
    c7f8:	e004      	b.n	c804 <_dtoa_r+0x12c>
    c7fa:	48a1      	ldr	r0, [pc, #644]	; (ca80 <_dtoa_r+0x3a8>)
    c7fc:	9b06      	ldr	r3, [sp, #24]
    c7fe:	1b80      	subs	r0, r0, r6
    c800:	4083      	lsls	r3, r0
    c802:	1c18      	adds	r0, r3, #0
    c804:	f7fc fd92 	bl	932c <__aeabi_ui2d>
    c808:	4c9e      	ldr	r4, [pc, #632]	; (ca84 <_dtoa_r+0x3ac>)
    c80a:	1c02      	adds	r2, r0, #0
    c80c:	190b      	adds	r3, r1, r4
    c80e:	2101      	movs	r1, #1
    c810:	3e01      	subs	r6, #1
    c812:	9116      	str	r1, [sp, #88]	; 0x58
    c814:	1c10      	adds	r0, r2, #0
    c816:	1c19      	adds	r1, r3, #0
    c818:	2200      	movs	r2, #0
    c81a:	4b9b      	ldr	r3, [pc, #620]	; (ca88 <_dtoa_r+0x3b0>)
    c81c:	f7fc f99a 	bl	8b54 <__aeabi_dsub>
    c820:	4a9a      	ldr	r2, [pc, #616]	; (ca8c <_dtoa_r+0x3b4>)
    c822:	4b9b      	ldr	r3, [pc, #620]	; (ca90 <_dtoa_r+0x3b8>)
    c824:	f7fb fefc 	bl	8620 <__aeabi_dmul>
    c828:	4a9a      	ldr	r2, [pc, #616]	; (ca94 <_dtoa_r+0x3bc>)
    c82a:	4b9b      	ldr	r3, [pc, #620]	; (ca98 <_dtoa_r+0x3c0>)
    c82c:	f7fa ff92 	bl	7754 <__aeabi_dadd>
    c830:	1c04      	adds	r4, r0, #0
    c832:	1c30      	adds	r0, r6, #0
    c834:	1c0d      	adds	r5, r1, #0
    c836:	f7fc fd3d 	bl	92b4 <__aeabi_i2d>
    c83a:	4a98      	ldr	r2, [pc, #608]	; (ca9c <_dtoa_r+0x3c4>)
    c83c:	4b98      	ldr	r3, [pc, #608]	; (caa0 <_dtoa_r+0x3c8>)
    c83e:	f7fb feef 	bl	8620 <__aeabi_dmul>
    c842:	1c02      	adds	r2, r0, #0
    c844:	1c0b      	adds	r3, r1, #0
    c846:	1c20      	adds	r0, r4, #0
    c848:	1c29      	adds	r1, r5, #0
    c84a:	f7fa ff83 	bl	7754 <__aeabi_dadd>
    c84e:	1c04      	adds	r4, r0, #0
    c850:	1c0d      	adds	r5, r1, #0
    c852:	f7fc fcf9 	bl	9248 <__aeabi_d2iz>
    c856:	1c29      	adds	r1, r5, #0
    c858:	9003      	str	r0, [sp, #12]
    c85a:	2200      	movs	r2, #0
    c85c:	1c20      	adds	r0, r4, #0
    c85e:	2300      	movs	r3, #0
    c860:	f7fa f800 	bl	6864 <__aeabi_dcmplt>
    c864:	2800      	cmp	r0, #0
    c866:	d00d      	beq.n	c884 <_dtoa_r+0x1ac>
    c868:	9803      	ldr	r0, [sp, #12]
    c86a:	f7fc fd23 	bl	92b4 <__aeabi_i2d>
    c86e:	1c02      	adds	r2, r0, #0
    c870:	1c0b      	adds	r3, r1, #0
    c872:	1c20      	adds	r0, r4, #0
    c874:	1c29      	adds	r1, r5, #0
    c876:	f7f9 ffef 	bl	6858 <__aeabi_dcmpeq>
    c87a:	4243      	negs	r3, r0
    c87c:	4143      	adcs	r3, r0
    c87e:	9a03      	ldr	r2, [sp, #12]
    c880:	1ad3      	subs	r3, r2, r3
    c882:	9303      	str	r3, [sp, #12]
    c884:	2301      	movs	r3, #1
    c886:	9313      	str	r3, [sp, #76]	; 0x4c
    c888:	9b03      	ldr	r3, [sp, #12]
    c88a:	2b16      	cmp	r3, #22
    c88c:	d811      	bhi.n	c8b2 <_dtoa_r+0x1da>
    c88e:	4a85      	ldr	r2, [pc, #532]	; (caa4 <_dtoa_r+0x3cc>)
    c890:	00db      	lsls	r3, r3, #3
    c892:	18d3      	adds	r3, r2, r3
    c894:	6818      	ldr	r0, [r3, #0]
    c896:	6859      	ldr	r1, [r3, #4]
    c898:	9a06      	ldr	r2, [sp, #24]
    c89a:	9b07      	ldr	r3, [sp, #28]
    c89c:	f7f9 fff6 	bl	688c <__aeabi_dcmpgt>
    c8a0:	2800      	cmp	r0, #0
    c8a2:	d005      	beq.n	c8b0 <_dtoa_r+0x1d8>
    c8a4:	9b03      	ldr	r3, [sp, #12]
    c8a6:	3b01      	subs	r3, #1
    c8a8:	9303      	str	r3, [sp, #12]
    c8aa:	2300      	movs	r3, #0
    c8ac:	9313      	str	r3, [sp, #76]	; 0x4c
    c8ae:	e000      	b.n	c8b2 <_dtoa_r+0x1da>
    c8b0:	9013      	str	r0, [sp, #76]	; 0x4c
    c8b2:	9b18      	ldr	r3, [sp, #96]	; 0x60
    c8b4:	1b9e      	subs	r6, r3, r6
    c8b6:	2300      	movs	r3, #0
    c8b8:	930d      	str	r3, [sp, #52]	; 0x34
    c8ba:	3e01      	subs	r6, #1
    c8bc:	960e      	str	r6, [sp, #56]	; 0x38
    c8be:	d504      	bpl.n	c8ca <_dtoa_r+0x1f2>
    c8c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c8c2:	425b      	negs	r3, r3
    c8c4:	930d      	str	r3, [sp, #52]	; 0x34
    c8c6:	2300      	movs	r3, #0
    c8c8:	930e      	str	r3, [sp, #56]	; 0x38
    c8ca:	9b03      	ldr	r3, [sp, #12]
    c8cc:	2b00      	cmp	r3, #0
    c8ce:	db08      	blt.n	c8e2 <_dtoa_r+0x20a>
    c8d0:	9a03      	ldr	r2, [sp, #12]
    c8d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c8d4:	4694      	mov	ip, r2
    c8d6:	4463      	add	r3, ip
    c8d8:	930e      	str	r3, [sp, #56]	; 0x38
    c8da:	2300      	movs	r3, #0
    c8dc:	9212      	str	r2, [sp, #72]	; 0x48
    c8de:	930f      	str	r3, [sp, #60]	; 0x3c
    c8e0:	e007      	b.n	c8f2 <_dtoa_r+0x21a>
    c8e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c8e4:	9a03      	ldr	r2, [sp, #12]
    c8e6:	1a9b      	subs	r3, r3, r2
    c8e8:	930d      	str	r3, [sp, #52]	; 0x34
    c8ea:	4253      	negs	r3, r2
    c8ec:	930f      	str	r3, [sp, #60]	; 0x3c
    c8ee:	2300      	movs	r3, #0
    c8f0:	9312      	str	r3, [sp, #72]	; 0x48
    c8f2:	9b20      	ldr	r3, [sp, #128]	; 0x80
    c8f4:	2501      	movs	r5, #1
    c8f6:	2b09      	cmp	r3, #9
    c8f8:	d827      	bhi.n	c94a <_dtoa_r+0x272>
    c8fa:	2b05      	cmp	r3, #5
    c8fc:	dd02      	ble.n	c904 <_dtoa_r+0x22c>
    c8fe:	2500      	movs	r5, #0
    c900:	3b04      	subs	r3, #4
    c902:	9320      	str	r3, [sp, #128]	; 0x80
    c904:	9b20      	ldr	r3, [sp, #128]	; 0x80
    c906:	1e98      	subs	r0, r3, #2
    c908:	2803      	cmp	r0, #3
    c90a:	d823      	bhi.n	c954 <_dtoa_r+0x27c>
    c90c:	f002 f806 	bl	e91c <__gnu_thumb1_case_uqi>
    c910:	10040e02 	.word	0x10040e02
    c914:	2300      	movs	r3, #0
    c916:	e000      	b.n	c91a <_dtoa_r+0x242>
    c918:	2301      	movs	r3, #1
    c91a:	9310      	str	r3, [sp, #64]	; 0x40
    c91c:	9b21      	ldr	r3, [sp, #132]	; 0x84
    c91e:	2b00      	cmp	r3, #0
    c920:	dc21      	bgt.n	c966 <_dtoa_r+0x28e>
    c922:	2301      	movs	r3, #1
    c924:	930b      	str	r3, [sp, #44]	; 0x2c
    c926:	9309      	str	r3, [sp, #36]	; 0x24
    c928:	1c1a      	adds	r2, r3, #0
    c92a:	e01a      	b.n	c962 <_dtoa_r+0x28a>
    c92c:	2300      	movs	r3, #0
    c92e:	e000      	b.n	c932 <_dtoa_r+0x25a>
    c930:	2301      	movs	r3, #1
    c932:	9a03      	ldr	r2, [sp, #12]
    c934:	9310      	str	r3, [sp, #64]	; 0x40
    c936:	4694      	mov	ip, r2
    c938:	9b21      	ldr	r3, [sp, #132]	; 0x84
    c93a:	4463      	add	r3, ip
    c93c:	930b      	str	r3, [sp, #44]	; 0x2c
    c93e:	3301      	adds	r3, #1
    c940:	9309      	str	r3, [sp, #36]	; 0x24
    c942:	2b00      	cmp	r3, #0
    c944:	dc12      	bgt.n	c96c <_dtoa_r+0x294>
    c946:	2301      	movs	r3, #1
    c948:	e010      	b.n	c96c <_dtoa_r+0x294>
    c94a:	2300      	movs	r3, #0
    c94c:	9510      	str	r5, [sp, #64]	; 0x40
    c94e:	9320      	str	r3, [sp, #128]	; 0x80
    c950:	3b01      	subs	r3, #1
    c952:	e002      	b.n	c95a <_dtoa_r+0x282>
    c954:	2301      	movs	r3, #1
    c956:	9310      	str	r3, [sp, #64]	; 0x40
    c958:	3b02      	subs	r3, #2
    c95a:	2200      	movs	r2, #0
    c95c:	930b      	str	r3, [sp, #44]	; 0x2c
    c95e:	9309      	str	r3, [sp, #36]	; 0x24
    c960:	3313      	adds	r3, #19
    c962:	9221      	str	r2, [sp, #132]	; 0x84
    c964:	e002      	b.n	c96c <_dtoa_r+0x294>
    c966:	9b21      	ldr	r3, [sp, #132]	; 0x84
    c968:	930b      	str	r3, [sp, #44]	; 0x2c
    c96a:	9309      	str	r3, [sp, #36]	; 0x24
    c96c:	9a08      	ldr	r2, [sp, #32]
    c96e:	6a54      	ldr	r4, [r2, #36]	; 0x24
    c970:	2200      	movs	r2, #0
    c972:	6062      	str	r2, [r4, #4]
    c974:	3204      	adds	r2, #4
    c976:	1c11      	adds	r1, r2, #0
    c978:	3114      	adds	r1, #20
    c97a:	4299      	cmp	r1, r3
    c97c:	d804      	bhi.n	c988 <_dtoa_r+0x2b0>
    c97e:	6861      	ldr	r1, [r4, #4]
    c980:	0052      	lsls	r2, r2, #1
    c982:	3101      	adds	r1, #1
    c984:	6061      	str	r1, [r4, #4]
    c986:	e7f6      	b.n	c976 <_dtoa_r+0x29e>
    c988:	9808      	ldr	r0, [sp, #32]
    c98a:	6861      	ldr	r1, [r4, #4]
    c98c:	f001 f844 	bl	da18 <_Balloc>
    c990:	9b08      	ldr	r3, [sp, #32]
    c992:	6020      	str	r0, [r4, #0]
    c994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c996:	681b      	ldr	r3, [r3, #0]
    c998:	930c      	str	r3, [sp, #48]	; 0x30
    c99a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c99c:	2b0e      	cmp	r3, #14
    c99e:	d900      	bls.n	c9a2 <_dtoa_r+0x2ca>
    c9a0:	e188      	b.n	ccb4 <_dtoa_r+0x5dc>
    c9a2:	2d00      	cmp	r5, #0
    c9a4:	d100      	bne.n	c9a8 <_dtoa_r+0x2d0>
    c9a6:	e185      	b.n	ccb4 <_dtoa_r+0x5dc>
    c9a8:	9b06      	ldr	r3, [sp, #24]
    c9aa:	9c07      	ldr	r4, [sp, #28]
    c9ac:	9314      	str	r3, [sp, #80]	; 0x50
    c9ae:	9415      	str	r4, [sp, #84]	; 0x54
    c9b0:	9b03      	ldr	r3, [sp, #12]
    c9b2:	2b00      	cmp	r3, #0
    c9b4:	dd30      	ble.n	ca18 <_dtoa_r+0x340>
    c9b6:	220f      	movs	r2, #15
    c9b8:	493a      	ldr	r1, [pc, #232]	; (caa4 <_dtoa_r+0x3cc>)
    c9ba:	4013      	ands	r3, r2
    c9bc:	00db      	lsls	r3, r3, #3
    c9be:	18cb      	adds	r3, r1, r3
    c9c0:	685c      	ldr	r4, [r3, #4]
    c9c2:	681b      	ldr	r3, [r3, #0]
    c9c4:	9304      	str	r3, [sp, #16]
    c9c6:	9405      	str	r4, [sp, #20]
    c9c8:	9b03      	ldr	r3, [sp, #12]
    c9ca:	2702      	movs	r7, #2
    c9cc:	111d      	asrs	r5, r3, #4
    c9ce:	06eb      	lsls	r3, r5, #27
    c9d0:	d50a      	bpl.n	c9e8 <_dtoa_r+0x310>
    c9d2:	9814      	ldr	r0, [sp, #80]	; 0x50
    c9d4:	9915      	ldr	r1, [sp, #84]	; 0x54
    c9d6:	4b34      	ldr	r3, [pc, #208]	; (caa8 <_dtoa_r+0x3d0>)
    c9d8:	4015      	ands	r5, r2
    c9da:	6a1a      	ldr	r2, [r3, #32]
    c9dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c9de:	f7fb f9e1 	bl	7da4 <__aeabi_ddiv>
    c9e2:	9006      	str	r0, [sp, #24]
    c9e4:	9107      	str	r1, [sp, #28]
    c9e6:	3701      	adds	r7, #1
    c9e8:	4c2f      	ldr	r4, [pc, #188]	; (caa8 <_dtoa_r+0x3d0>)
    c9ea:	2d00      	cmp	r5, #0
    c9ec:	d00d      	beq.n	ca0a <_dtoa_r+0x332>
    c9ee:	07eb      	lsls	r3, r5, #31
    c9f0:	d508      	bpl.n	ca04 <_dtoa_r+0x32c>
    c9f2:	9804      	ldr	r0, [sp, #16]
    c9f4:	9905      	ldr	r1, [sp, #20]
    c9f6:	6822      	ldr	r2, [r4, #0]
    c9f8:	6863      	ldr	r3, [r4, #4]
    c9fa:	f7fb fe11 	bl	8620 <__aeabi_dmul>
    c9fe:	9004      	str	r0, [sp, #16]
    ca00:	9105      	str	r1, [sp, #20]
    ca02:	3701      	adds	r7, #1
    ca04:	106d      	asrs	r5, r5, #1
    ca06:	3408      	adds	r4, #8
    ca08:	e7ef      	b.n	c9ea <_dtoa_r+0x312>
    ca0a:	9806      	ldr	r0, [sp, #24]
    ca0c:	9907      	ldr	r1, [sp, #28]
    ca0e:	9a04      	ldr	r2, [sp, #16]
    ca10:	9b05      	ldr	r3, [sp, #20]
    ca12:	f7fb f9c7 	bl	7da4 <__aeabi_ddiv>
    ca16:	e049      	b.n	caac <_dtoa_r+0x3d4>
    ca18:	9b03      	ldr	r3, [sp, #12]
    ca1a:	2702      	movs	r7, #2
    ca1c:	425d      	negs	r5, r3
    ca1e:	2d00      	cmp	r5, #0
    ca20:	d046      	beq.n	cab0 <_dtoa_r+0x3d8>
    ca22:	9814      	ldr	r0, [sp, #80]	; 0x50
    ca24:	9915      	ldr	r1, [sp, #84]	; 0x54
    ca26:	230f      	movs	r3, #15
    ca28:	4a1e      	ldr	r2, [pc, #120]	; (caa4 <_dtoa_r+0x3cc>)
    ca2a:	402b      	ands	r3, r5
    ca2c:	00db      	lsls	r3, r3, #3
    ca2e:	18d3      	adds	r3, r2, r3
    ca30:	681a      	ldr	r2, [r3, #0]
    ca32:	685b      	ldr	r3, [r3, #4]
    ca34:	f7fb fdf4 	bl	8620 <__aeabi_dmul>
    ca38:	4c1b      	ldr	r4, [pc, #108]	; (caa8 <_dtoa_r+0x3d0>)
    ca3a:	112d      	asrs	r5, r5, #4
    ca3c:	2d00      	cmp	r5, #0
    ca3e:	d035      	beq.n	caac <_dtoa_r+0x3d4>
    ca40:	07eb      	lsls	r3, r5, #31
    ca42:	d504      	bpl.n	ca4e <_dtoa_r+0x376>
    ca44:	6822      	ldr	r2, [r4, #0]
    ca46:	6863      	ldr	r3, [r4, #4]
    ca48:	3701      	adds	r7, #1
    ca4a:	f7fb fde9 	bl	8620 <__aeabi_dmul>
    ca4e:	106d      	asrs	r5, r5, #1
    ca50:	3408      	adds	r4, #8
    ca52:	e7f3      	b.n	ca3c <_dtoa_r+0x364>
    ca54:	7ff00000 	.word	0x7ff00000
    ca58:	0000270f 	.word	0x0000270f
    ca5c:	0000face 	.word	0x0000face
    ca60:	0000fac5 	.word	0x0000fac5
    ca64:	0000f96a 	.word	0x0000f96a
    ca68:	0000f96b 	.word	0x0000f96b
    ca6c:	3ff00000 	.word	0x3ff00000
    ca70:	fffffc01 	.word	0xfffffc01
    ca74:	fffffbef 	.word	0xfffffbef
    ca78:	00000412 	.word	0x00000412
    ca7c:	fffffc0e 	.word	0xfffffc0e
    ca80:	fffffbee 	.word	0xfffffbee
    ca84:	fe100000 	.word	0xfe100000
    ca88:	3ff80000 	.word	0x3ff80000
    ca8c:	636f4361 	.word	0x636f4361
    ca90:	3fd287a7 	.word	0x3fd287a7
    ca94:	8b60c8b3 	.word	0x8b60c8b3
    ca98:	3fc68a28 	.word	0x3fc68a28
    ca9c:	509f79fb 	.word	0x509f79fb
    caa0:	3fd34413 	.word	0x3fd34413
    caa4:	0000fae0 	.word	0x0000fae0
    caa8:	0000fba8 	.word	0x0000fba8
    caac:	9006      	str	r0, [sp, #24]
    caae:	9107      	str	r1, [sp, #28]
    cab0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    cab2:	2b00      	cmp	r3, #0
    cab4:	d01e      	beq.n	caf4 <_dtoa_r+0x41c>
    cab6:	9c06      	ldr	r4, [sp, #24]
    cab8:	9d07      	ldr	r5, [sp, #28]
    caba:	2200      	movs	r2, #0
    cabc:	1c20      	adds	r0, r4, #0
    cabe:	1c29      	adds	r1, r5, #0
    cac0:	4bce      	ldr	r3, [pc, #824]	; (cdfc <_dtoa_r+0x724>)
    cac2:	f7f9 fecf 	bl	6864 <__aeabi_dcmplt>
    cac6:	2800      	cmp	r0, #0
    cac8:	d014      	beq.n	caf4 <_dtoa_r+0x41c>
    caca:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cacc:	2b00      	cmp	r3, #0
    cace:	d011      	beq.n	caf4 <_dtoa_r+0x41c>
    cad0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cad2:	2b00      	cmp	r3, #0
    cad4:	dc00      	bgt.n	cad8 <_dtoa_r+0x400>
    cad6:	e0e9      	b.n	ccac <_dtoa_r+0x5d4>
    cad8:	9b03      	ldr	r3, [sp, #12]
    cada:	1c29      	adds	r1, r5, #0
    cadc:	3b01      	subs	r3, #1
    cade:	9311      	str	r3, [sp, #68]	; 0x44
    cae0:	1c20      	adds	r0, r4, #0
    cae2:	2200      	movs	r2, #0
    cae4:	4bc6      	ldr	r3, [pc, #792]	; (ce00 <_dtoa_r+0x728>)
    cae6:	f7fb fd9b 	bl	8620 <__aeabi_dmul>
    caea:	3701      	adds	r7, #1
    caec:	9006      	str	r0, [sp, #24]
    caee:	9107      	str	r1, [sp, #28]
    caf0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    caf2:	e002      	b.n	cafa <_dtoa_r+0x422>
    caf4:	9b03      	ldr	r3, [sp, #12]
    caf6:	9d09      	ldr	r5, [sp, #36]	; 0x24
    caf8:	9311      	str	r3, [sp, #68]	; 0x44
    cafa:	1c38      	adds	r0, r7, #0
    cafc:	9b06      	ldr	r3, [sp, #24]
    cafe:	9c07      	ldr	r4, [sp, #28]
    cb00:	9304      	str	r3, [sp, #16]
    cb02:	9405      	str	r4, [sp, #20]
    cb04:	f7fc fbd6 	bl	92b4 <__aeabi_i2d>
    cb08:	9a04      	ldr	r2, [sp, #16]
    cb0a:	9b05      	ldr	r3, [sp, #20]
    cb0c:	f7fb fd88 	bl	8620 <__aeabi_dmul>
    cb10:	2200      	movs	r2, #0
    cb12:	4bbc      	ldr	r3, [pc, #752]	; (ce04 <_dtoa_r+0x72c>)
    cb14:	f7fa fe1e 	bl	7754 <__aeabi_dadd>
    cb18:	9006      	str	r0, [sp, #24]
    cb1a:	9107      	str	r1, [sp, #28]
    cb1c:	9e06      	ldr	r6, [sp, #24]
    cb1e:	9f07      	ldr	r7, [sp, #28]
    cb20:	9b07      	ldr	r3, [sp, #28]
    cb22:	4ab9      	ldr	r2, [pc, #740]	; (ce08 <_dtoa_r+0x730>)
    cb24:	189c      	adds	r4, r3, r2
    cb26:	2d00      	cmp	r5, #0
    cb28:	d11c      	bne.n	cb64 <_dtoa_r+0x48c>
    cb2a:	9804      	ldr	r0, [sp, #16]
    cb2c:	9905      	ldr	r1, [sp, #20]
    cb2e:	2200      	movs	r2, #0
    cb30:	4bb6      	ldr	r3, [pc, #728]	; (ce0c <_dtoa_r+0x734>)
    cb32:	f7fc f80f 	bl	8b54 <__aeabi_dsub>
    cb36:	1c32      	adds	r2, r6, #0
    cb38:	1c23      	adds	r3, r4, #0
    cb3a:	9004      	str	r0, [sp, #16]
    cb3c:	9105      	str	r1, [sp, #20]
    cb3e:	f7f9 fea5 	bl	688c <__aeabi_dcmpgt>
    cb42:	2800      	cmp	r0, #0
    cb44:	d000      	beq.n	cb48 <_dtoa_r+0x470>
    cb46:	e263      	b.n	d010 <_dtoa_r+0x938>
    cb48:	9804      	ldr	r0, [sp, #16]
    cb4a:	9905      	ldr	r1, [sp, #20]
    cb4c:	1c32      	adds	r2, r6, #0
    cb4e:	4eb0      	ldr	r6, [pc, #704]	; (ce10 <_dtoa_r+0x738>)
    cb50:	9c07      	ldr	r4, [sp, #28]
    cb52:	46b4      	mov	ip, r6
    cb54:	4464      	add	r4, ip
    cb56:	1c23      	adds	r3, r4, #0
    cb58:	f7f9 fe84 	bl	6864 <__aeabi_dcmplt>
    cb5c:	2800      	cmp	r0, #0
    cb5e:	d000      	beq.n	cb62 <_dtoa_r+0x48a>
    cb60:	e24c      	b.n	cffc <_dtoa_r+0x924>
    cb62:	e0a3      	b.n	ccac <_dtoa_r+0x5d4>
    cb64:	4aab      	ldr	r2, [pc, #684]	; (ce14 <_dtoa_r+0x73c>)
    cb66:	1e6b      	subs	r3, r5, #1
    cb68:	9910      	ldr	r1, [sp, #64]	; 0x40
    cb6a:	00db      	lsls	r3, r3, #3
    cb6c:	18d3      	adds	r3, r2, r3
    cb6e:	2900      	cmp	r1, #0
    cb70:	d04e      	beq.n	cc10 <_dtoa_r+0x538>
    cb72:	681a      	ldr	r2, [r3, #0]
    cb74:	685b      	ldr	r3, [r3, #4]
    cb76:	2000      	movs	r0, #0
    cb78:	49a7      	ldr	r1, [pc, #668]	; (ce18 <_dtoa_r+0x740>)
    cb7a:	f7fb f913 	bl	7da4 <__aeabi_ddiv>
    cb7e:	1c32      	adds	r2, r6, #0
    cb80:	1c23      	adds	r3, r4, #0
    cb82:	f7fb ffe7 	bl	8b54 <__aeabi_dsub>
    cb86:	9e04      	ldr	r6, [sp, #16]
    cb88:	9f05      	ldr	r7, [sp, #20]
    cb8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cb8c:	9006      	str	r0, [sp, #24]
    cb8e:	9107      	str	r1, [sp, #28]
    cb90:	9304      	str	r3, [sp, #16]
    cb92:	1c39      	adds	r1, r7, #0
    cb94:	1c30      	adds	r0, r6, #0
    cb96:	f7fc fb57 	bl	9248 <__aeabi_d2iz>
    cb9a:	1c04      	adds	r4, r0, #0
    cb9c:	f7fc fb8a 	bl	92b4 <__aeabi_i2d>
    cba0:	1c02      	adds	r2, r0, #0
    cba2:	1c0b      	adds	r3, r1, #0
    cba4:	1c30      	adds	r0, r6, #0
    cba6:	1c39      	adds	r1, r7, #0
    cba8:	f7fb ffd4 	bl	8b54 <__aeabi_dsub>
    cbac:	9b04      	ldr	r3, [sp, #16]
    cbae:	3430      	adds	r4, #48	; 0x30
    cbb0:	3301      	adds	r3, #1
    cbb2:	9304      	str	r3, [sp, #16]
    cbb4:	3b01      	subs	r3, #1
    cbb6:	701c      	strb	r4, [r3, #0]
    cbb8:	9a06      	ldr	r2, [sp, #24]
    cbba:	9b07      	ldr	r3, [sp, #28]
    cbbc:	1c06      	adds	r6, r0, #0
    cbbe:	1c0f      	adds	r7, r1, #0
    cbc0:	f7f9 fe50 	bl	6864 <__aeabi_dcmplt>
    cbc4:	2800      	cmp	r0, #0
    cbc6:	d000      	beq.n	cbca <_dtoa_r+0x4f2>
    cbc8:	e361      	b.n	d28e <_dtoa_r+0xbb6>
    cbca:	1c32      	adds	r2, r6, #0
    cbcc:	1c3b      	adds	r3, r7, #0
    cbce:	2000      	movs	r0, #0
    cbd0:	498a      	ldr	r1, [pc, #552]	; (cdfc <_dtoa_r+0x724>)
    cbd2:	f7fb ffbf 	bl	8b54 <__aeabi_dsub>
    cbd6:	9a06      	ldr	r2, [sp, #24]
    cbd8:	9b07      	ldr	r3, [sp, #28]
    cbda:	f7f9 fe43 	bl	6864 <__aeabi_dcmplt>
    cbde:	2800      	cmp	r0, #0
    cbe0:	d000      	beq.n	cbe4 <_dtoa_r+0x50c>
    cbe2:	e0cd      	b.n	cd80 <_dtoa_r+0x6a8>
    cbe4:	9b04      	ldr	r3, [sp, #16]
    cbe6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    cbe8:	1a9b      	subs	r3, r3, r2
    cbea:	42ab      	cmp	r3, r5
    cbec:	da5e      	bge.n	ccac <_dtoa_r+0x5d4>
    cbee:	9806      	ldr	r0, [sp, #24]
    cbf0:	9907      	ldr	r1, [sp, #28]
    cbf2:	2200      	movs	r2, #0
    cbf4:	4b82      	ldr	r3, [pc, #520]	; (ce00 <_dtoa_r+0x728>)
    cbf6:	f7fb fd13 	bl	8620 <__aeabi_dmul>
    cbfa:	2200      	movs	r2, #0
    cbfc:	9006      	str	r0, [sp, #24]
    cbfe:	9107      	str	r1, [sp, #28]
    cc00:	4b7f      	ldr	r3, [pc, #508]	; (ce00 <_dtoa_r+0x728>)
    cc02:	1c30      	adds	r0, r6, #0
    cc04:	1c39      	adds	r1, r7, #0
    cc06:	f7fb fd0b 	bl	8620 <__aeabi_dmul>
    cc0a:	1c06      	adds	r6, r0, #0
    cc0c:	1c0f      	adds	r7, r1, #0
    cc0e:	e7c0      	b.n	cb92 <_dtoa_r+0x4ba>
    cc10:	6818      	ldr	r0, [r3, #0]
    cc12:	6859      	ldr	r1, [r3, #4]
    cc14:	1c32      	adds	r2, r6, #0
    cc16:	1c23      	adds	r3, r4, #0
    cc18:	f7fb fd02 	bl	8620 <__aeabi_dmul>
    cc1c:	9e04      	ldr	r6, [sp, #16]
    cc1e:	9f05      	ldr	r7, [sp, #20]
    cc20:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    cc22:	9006      	str	r0, [sp, #24]
    cc24:	9107      	str	r1, [sp, #28]
    cc26:	1963      	adds	r3, r4, r5
    cc28:	9304      	str	r3, [sp, #16]
    cc2a:	1c39      	adds	r1, r7, #0
    cc2c:	1c30      	adds	r0, r6, #0
    cc2e:	f7fc fb0b 	bl	9248 <__aeabi_d2iz>
    cc32:	1c05      	adds	r5, r0, #0
    cc34:	f7fc fb3e 	bl	92b4 <__aeabi_i2d>
    cc38:	1c0b      	adds	r3, r1, #0
    cc3a:	1c02      	adds	r2, r0, #0
    cc3c:	1c39      	adds	r1, r7, #0
    cc3e:	1c30      	adds	r0, r6, #0
    cc40:	f7fb ff88 	bl	8b54 <__aeabi_dsub>
    cc44:	3530      	adds	r5, #48	; 0x30
    cc46:	9b04      	ldr	r3, [sp, #16]
    cc48:	7025      	strb	r5, [r4, #0]
    cc4a:	3401      	adds	r4, #1
    cc4c:	1c06      	adds	r6, r0, #0
    cc4e:	1c0f      	adds	r7, r1, #0
    cc50:	42a3      	cmp	r3, r4
    cc52:	d124      	bne.n	cc9e <_dtoa_r+0x5c6>
    cc54:	2200      	movs	r2, #0
    cc56:	9806      	ldr	r0, [sp, #24]
    cc58:	9907      	ldr	r1, [sp, #28]
    cc5a:	4b6f      	ldr	r3, [pc, #444]	; (ce18 <_dtoa_r+0x740>)
    cc5c:	f7fa fd7a 	bl	7754 <__aeabi_dadd>
    cc60:	1c02      	adds	r2, r0, #0
    cc62:	1c0b      	adds	r3, r1, #0
    cc64:	1c30      	adds	r0, r6, #0
    cc66:	1c39      	adds	r1, r7, #0
    cc68:	f7f9 fe10 	bl	688c <__aeabi_dcmpgt>
    cc6c:	2800      	cmp	r0, #0
    cc6e:	d000      	beq.n	cc72 <_dtoa_r+0x59a>
    cc70:	e086      	b.n	cd80 <_dtoa_r+0x6a8>
    cc72:	9a06      	ldr	r2, [sp, #24]
    cc74:	9b07      	ldr	r3, [sp, #28]
    cc76:	2000      	movs	r0, #0
    cc78:	4967      	ldr	r1, [pc, #412]	; (ce18 <_dtoa_r+0x740>)
    cc7a:	f7fb ff6b 	bl	8b54 <__aeabi_dsub>
    cc7e:	1c02      	adds	r2, r0, #0
    cc80:	1c0b      	adds	r3, r1, #0
    cc82:	1c30      	adds	r0, r6, #0
    cc84:	1c39      	adds	r1, r7, #0
    cc86:	f7f9 fded 	bl	6864 <__aeabi_dcmplt>
    cc8a:	2800      	cmp	r0, #0
    cc8c:	d00e      	beq.n	ccac <_dtoa_r+0x5d4>
    cc8e:	9b04      	ldr	r3, [sp, #16]
    cc90:	3b01      	subs	r3, #1
    cc92:	781a      	ldrb	r2, [r3, #0]
    cc94:	2a30      	cmp	r2, #48	; 0x30
    cc96:	d000      	beq.n	cc9a <_dtoa_r+0x5c2>
    cc98:	e2f9      	b.n	d28e <_dtoa_r+0xbb6>
    cc9a:	9304      	str	r3, [sp, #16]
    cc9c:	e7f7      	b.n	cc8e <_dtoa_r+0x5b6>
    cc9e:	2200      	movs	r2, #0
    cca0:	4b57      	ldr	r3, [pc, #348]	; (ce00 <_dtoa_r+0x728>)
    cca2:	f7fb fcbd 	bl	8620 <__aeabi_dmul>
    cca6:	1c06      	adds	r6, r0, #0
    cca8:	1c0f      	adds	r7, r1, #0
    ccaa:	e7be      	b.n	cc2a <_dtoa_r+0x552>
    ccac:	9b14      	ldr	r3, [sp, #80]	; 0x50
    ccae:	9c15      	ldr	r4, [sp, #84]	; 0x54
    ccb0:	9306      	str	r3, [sp, #24]
    ccb2:	9407      	str	r4, [sp, #28]
    ccb4:	9b19      	ldr	r3, [sp, #100]	; 0x64
    ccb6:	2b00      	cmp	r3, #0
    ccb8:	da00      	bge.n	ccbc <_dtoa_r+0x5e4>
    ccba:	e086      	b.n	cdca <_dtoa_r+0x6f2>
    ccbc:	9a03      	ldr	r2, [sp, #12]
    ccbe:	2a0e      	cmp	r2, #14
    ccc0:	dd00      	ble.n	ccc4 <_dtoa_r+0x5ec>
    ccc2:	e082      	b.n	cdca <_dtoa_r+0x6f2>
    ccc4:	00d3      	lsls	r3, r2, #3
    ccc6:	4a53      	ldr	r2, [pc, #332]	; (ce14 <_dtoa_r+0x73c>)
    ccc8:	18d3      	adds	r3, r2, r3
    ccca:	681e      	ldr	r6, [r3, #0]
    cccc:	685f      	ldr	r7, [r3, #4]
    ccce:	9b21      	ldr	r3, [sp, #132]	; 0x84
    ccd0:	2b00      	cmp	r3, #0
    ccd2:	da14      	bge.n	ccfe <_dtoa_r+0x626>
    ccd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ccd6:	2b00      	cmp	r3, #0
    ccd8:	dc11      	bgt.n	ccfe <_dtoa_r+0x626>
    ccda:	d000      	beq.n	ccde <_dtoa_r+0x606>
    ccdc:	e190      	b.n	d000 <_dtoa_r+0x928>
    ccde:	1c30      	adds	r0, r6, #0
    cce0:	1c39      	adds	r1, r7, #0
    cce2:	2200      	movs	r2, #0
    cce4:	4b49      	ldr	r3, [pc, #292]	; (ce0c <_dtoa_r+0x734>)
    cce6:	f7fb fc9b 	bl	8620 <__aeabi_dmul>
    ccea:	9a06      	ldr	r2, [sp, #24]
    ccec:	9b07      	ldr	r3, [sp, #28]
    ccee:	f7f9 fdd7 	bl	68a0 <__aeabi_dcmpge>
    ccf2:	9f09      	ldr	r7, [sp, #36]	; 0x24
    ccf4:	1c3e      	adds	r6, r7, #0
    ccf6:	2800      	cmp	r0, #0
    ccf8:	d000      	beq.n	ccfc <_dtoa_r+0x624>
    ccfa:	e183      	b.n	d004 <_dtoa_r+0x92c>
    ccfc:	e18c      	b.n	d018 <_dtoa_r+0x940>
    ccfe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cd00:	9c06      	ldr	r4, [sp, #24]
    cd02:	9d07      	ldr	r5, [sp, #28]
    cd04:	9304      	str	r3, [sp, #16]
    cd06:	1c32      	adds	r2, r6, #0
    cd08:	1c3b      	adds	r3, r7, #0
    cd0a:	1c20      	adds	r0, r4, #0
    cd0c:	1c29      	adds	r1, r5, #0
    cd0e:	f7fb f849 	bl	7da4 <__aeabi_ddiv>
    cd12:	f7fc fa99 	bl	9248 <__aeabi_d2iz>
    cd16:	9006      	str	r0, [sp, #24]
    cd18:	f7fc facc 	bl	92b4 <__aeabi_i2d>
    cd1c:	1c32      	adds	r2, r6, #0
    cd1e:	1c3b      	adds	r3, r7, #0
    cd20:	f7fb fc7e 	bl	8620 <__aeabi_dmul>
    cd24:	1c02      	adds	r2, r0, #0
    cd26:	1c0b      	adds	r3, r1, #0
    cd28:	1c20      	adds	r0, r4, #0
    cd2a:	1c29      	adds	r1, r5, #0
    cd2c:	f7fb ff12 	bl	8b54 <__aeabi_dsub>
    cd30:	1c0b      	adds	r3, r1, #0
    cd32:	9904      	ldr	r1, [sp, #16]
    cd34:	1c02      	adds	r2, r0, #0
    cd36:	9806      	ldr	r0, [sp, #24]
    cd38:	3101      	adds	r1, #1
    cd3a:	9104      	str	r1, [sp, #16]
    cd3c:	3030      	adds	r0, #48	; 0x30
    cd3e:	3901      	subs	r1, #1
    cd40:	7008      	strb	r0, [r1, #0]
    cd42:	980c      	ldr	r0, [sp, #48]	; 0x30
    cd44:	9904      	ldr	r1, [sp, #16]
    cd46:	1a09      	subs	r1, r1, r0
    cd48:	9809      	ldr	r0, [sp, #36]	; 0x24
    cd4a:	4281      	cmp	r1, r0
    cd4c:	d12e      	bne.n	cdac <_dtoa_r+0x6d4>
    cd4e:	1c10      	adds	r0, r2, #0
    cd50:	1c19      	adds	r1, r3, #0
    cd52:	f7fa fcff 	bl	7754 <__aeabi_dadd>
    cd56:	1c32      	adds	r2, r6, #0
    cd58:	1c3b      	adds	r3, r7, #0
    cd5a:	1c04      	adds	r4, r0, #0
    cd5c:	1c0d      	adds	r5, r1, #0
    cd5e:	f7f9 fd95 	bl	688c <__aeabi_dcmpgt>
    cd62:	2800      	cmp	r0, #0
    cd64:	d110      	bne.n	cd88 <_dtoa_r+0x6b0>
    cd66:	1c20      	adds	r0, r4, #0
    cd68:	1c29      	adds	r1, r5, #0
    cd6a:	1c32      	adds	r2, r6, #0
    cd6c:	1c3b      	adds	r3, r7, #0
    cd6e:	f7f9 fd73 	bl	6858 <__aeabi_dcmpeq>
    cd72:	2800      	cmp	r0, #0
    cd74:	d100      	bne.n	cd78 <_dtoa_r+0x6a0>
    cd76:	e28c      	b.n	d292 <_dtoa_r+0xbba>
    cd78:	9b06      	ldr	r3, [sp, #24]
    cd7a:	07db      	lsls	r3, r3, #31
    cd7c:	d404      	bmi.n	cd88 <_dtoa_r+0x6b0>
    cd7e:	e288      	b.n	d292 <_dtoa_r+0xbba>
    cd80:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cd82:	9303      	str	r3, [sp, #12]
    cd84:	e000      	b.n	cd88 <_dtoa_r+0x6b0>
    cd86:	9304      	str	r3, [sp, #16]
    cd88:	9b04      	ldr	r3, [sp, #16]
    cd8a:	3b01      	subs	r3, #1
    cd8c:	781a      	ldrb	r2, [r3, #0]
    cd8e:	2a39      	cmp	r2, #57	; 0x39
    cd90:	d108      	bne.n	cda4 <_dtoa_r+0x6cc>
    cd92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    cd94:	4293      	cmp	r3, r2
    cd96:	d1f6      	bne.n	cd86 <_dtoa_r+0x6ae>
    cd98:	9b03      	ldr	r3, [sp, #12]
    cd9a:	3301      	adds	r3, #1
    cd9c:	9303      	str	r3, [sp, #12]
    cd9e:	2330      	movs	r3, #48	; 0x30
    cda0:	7013      	strb	r3, [r2, #0]
    cda2:	1c13      	adds	r3, r2, #0
    cda4:	781a      	ldrb	r2, [r3, #0]
    cda6:	3201      	adds	r2, #1
    cda8:	701a      	strb	r2, [r3, #0]
    cdaa:	e272      	b.n	d292 <_dtoa_r+0xbba>
    cdac:	1c10      	adds	r0, r2, #0
    cdae:	1c19      	adds	r1, r3, #0
    cdb0:	2200      	movs	r2, #0
    cdb2:	4b13      	ldr	r3, [pc, #76]	; (ce00 <_dtoa_r+0x728>)
    cdb4:	f7fb fc34 	bl	8620 <__aeabi_dmul>
    cdb8:	2200      	movs	r2, #0
    cdba:	2300      	movs	r3, #0
    cdbc:	1c04      	adds	r4, r0, #0
    cdbe:	1c0d      	adds	r5, r1, #0
    cdc0:	f7f9 fd4a 	bl	6858 <__aeabi_dcmpeq>
    cdc4:	2800      	cmp	r0, #0
    cdc6:	d09e      	beq.n	cd06 <_dtoa_r+0x62e>
    cdc8:	e263      	b.n	d292 <_dtoa_r+0xbba>
    cdca:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cdcc:	2a00      	cmp	r2, #0
    cdce:	d044      	beq.n	ce5a <_dtoa_r+0x782>
    cdd0:	9a20      	ldr	r2, [sp, #128]	; 0x80
    cdd2:	2a01      	cmp	r2, #1
    cdd4:	dc0b      	bgt.n	cdee <_dtoa_r+0x716>
    cdd6:	9a16      	ldr	r2, [sp, #88]	; 0x58
    cdd8:	2a00      	cmp	r2, #0
    cdda:	d002      	beq.n	cde2 <_dtoa_r+0x70a>
    cddc:	4a0f      	ldr	r2, [pc, #60]	; (ce1c <_dtoa_r+0x744>)
    cdde:	189b      	adds	r3, r3, r2
    cde0:	e002      	b.n	cde8 <_dtoa_r+0x710>
    cde2:	2336      	movs	r3, #54	; 0x36
    cde4:	9a18      	ldr	r2, [sp, #96]	; 0x60
    cde6:	1a9b      	subs	r3, r3, r2
    cde8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    cdea:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    cdec:	e029      	b.n	ce42 <_dtoa_r+0x76a>
    cdee:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cdf0:	1e5d      	subs	r5, r3, #1
    cdf2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cdf4:	42ab      	cmp	r3, r5
    cdf6:	db13      	blt.n	ce20 <_dtoa_r+0x748>
    cdf8:	1b5d      	subs	r5, r3, r5
    cdfa:	e018      	b.n	ce2e <_dtoa_r+0x756>
    cdfc:	3ff00000 	.word	0x3ff00000
    ce00:	40240000 	.word	0x40240000
    ce04:	401c0000 	.word	0x401c0000
    ce08:	fcc00000 	.word	0xfcc00000
    ce0c:	40140000 	.word	0x40140000
    ce10:	7cc00000 	.word	0x7cc00000
    ce14:	0000fae0 	.word	0x0000fae0
    ce18:	3fe00000 	.word	0x3fe00000
    ce1c:	00000433 	.word	0x00000433
    ce20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ce22:	950f      	str	r5, [sp, #60]	; 0x3c
    ce24:	1aea      	subs	r2, r5, r3
    ce26:	2500      	movs	r5, #0
    ce28:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ce2a:	189b      	adds	r3, r3, r2
    ce2c:	9312      	str	r3, [sp, #72]	; 0x48
    ce2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ce30:	2b00      	cmp	r3, #0
    ce32:	da04      	bge.n	ce3e <_dtoa_r+0x766>
    ce34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ce36:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ce38:	1a9c      	subs	r4, r3, r2
    ce3a:	2300      	movs	r3, #0
    ce3c:	e001      	b.n	ce42 <_dtoa_r+0x76a>
    ce3e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    ce40:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ce42:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    ce44:	9808      	ldr	r0, [sp, #32]
    ce46:	18d2      	adds	r2, r2, r3
    ce48:	920d      	str	r2, [sp, #52]	; 0x34
    ce4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    ce4c:	2101      	movs	r1, #1
    ce4e:	18d3      	adds	r3, r2, r3
    ce50:	930e      	str	r3, [sp, #56]	; 0x38
    ce52:	f000 fef8 	bl	dc46 <__i2b>
    ce56:	1c06      	adds	r6, r0, #0
    ce58:	e002      	b.n	ce60 <_dtoa_r+0x788>
    ce5a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    ce5c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    ce5e:	9e10      	ldr	r6, [sp, #64]	; 0x40
    ce60:	2c00      	cmp	r4, #0
    ce62:	d00c      	beq.n	ce7e <_dtoa_r+0x7a6>
    ce64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ce66:	2b00      	cmp	r3, #0
    ce68:	dd09      	ble.n	ce7e <_dtoa_r+0x7a6>
    ce6a:	42a3      	cmp	r3, r4
    ce6c:	dd00      	ble.n	ce70 <_dtoa_r+0x798>
    ce6e:	1c23      	adds	r3, r4, #0
    ce70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    ce72:	1ae4      	subs	r4, r4, r3
    ce74:	1ad2      	subs	r2, r2, r3
    ce76:	920d      	str	r2, [sp, #52]	; 0x34
    ce78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    ce7a:	1ad3      	subs	r3, r2, r3
    ce7c:	930e      	str	r3, [sp, #56]	; 0x38
    ce7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ce80:	2b00      	cmp	r3, #0
    ce82:	dd21      	ble.n	cec8 <_dtoa_r+0x7f0>
    ce84:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ce86:	2b00      	cmp	r3, #0
    ce88:	d018      	beq.n	cebc <_dtoa_r+0x7e4>
    ce8a:	2d00      	cmp	r5, #0
    ce8c:	dd10      	ble.n	ceb0 <_dtoa_r+0x7d8>
    ce8e:	1c31      	adds	r1, r6, #0
    ce90:	1c2a      	adds	r2, r5, #0
    ce92:	9808      	ldr	r0, [sp, #32]
    ce94:	f000 ff6e 	bl	dd74 <__pow5mult>
    ce98:	1c06      	adds	r6, r0, #0
    ce9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ce9c:	1c31      	adds	r1, r6, #0
    ce9e:	9808      	ldr	r0, [sp, #32]
    cea0:	f000 feda 	bl	dc58 <__multiply>
    cea4:	1c07      	adds	r7, r0, #0
    cea6:	990a      	ldr	r1, [sp, #40]	; 0x28
    cea8:	9808      	ldr	r0, [sp, #32]
    ceaa:	f000 fded 	bl	da88 <_Bfree>
    ceae:	970a      	str	r7, [sp, #40]	; 0x28
    ceb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ceb2:	1b5a      	subs	r2, r3, r5
    ceb4:	d008      	beq.n	cec8 <_dtoa_r+0x7f0>
    ceb6:	9808      	ldr	r0, [sp, #32]
    ceb8:	990a      	ldr	r1, [sp, #40]	; 0x28
    ceba:	e002      	b.n	cec2 <_dtoa_r+0x7ea>
    cebc:	9808      	ldr	r0, [sp, #32]
    cebe:	990a      	ldr	r1, [sp, #40]	; 0x28
    cec0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    cec2:	f000 ff57 	bl	dd74 <__pow5mult>
    cec6:	900a      	str	r0, [sp, #40]	; 0x28
    cec8:	9808      	ldr	r0, [sp, #32]
    ceca:	2101      	movs	r1, #1
    cecc:	f000 febb 	bl	dc46 <__i2b>
    ced0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ced2:	1c07      	adds	r7, r0, #0
    ced4:	2b00      	cmp	r3, #0
    ced6:	dd0a      	ble.n	ceee <_dtoa_r+0x816>
    ced8:	1c39      	adds	r1, r7, #0
    ceda:	1c1a      	adds	r2, r3, #0
    cedc:	9808      	ldr	r0, [sp, #32]
    cede:	f000 ff49 	bl	dd74 <__pow5mult>
    cee2:	9b20      	ldr	r3, [sp, #128]	; 0x80
    cee4:	1c07      	adds	r7, r0, #0
    cee6:	2500      	movs	r5, #0
    cee8:	2b01      	cmp	r3, #1
    ceea:	dc1b      	bgt.n	cf24 <_dtoa_r+0x84c>
    ceec:	e003      	b.n	cef6 <_dtoa_r+0x81e>
    ceee:	9b20      	ldr	r3, [sp, #128]	; 0x80
    cef0:	2500      	movs	r5, #0
    cef2:	2b01      	cmp	r3, #1
    cef4:	dc12      	bgt.n	cf1c <_dtoa_r+0x844>
    cef6:	2500      	movs	r5, #0
    cef8:	9b06      	ldr	r3, [sp, #24]
    cefa:	42ab      	cmp	r3, r5
    cefc:	d10e      	bne.n	cf1c <_dtoa_r+0x844>
    cefe:	9b07      	ldr	r3, [sp, #28]
    cf00:	031b      	lsls	r3, r3, #12
    cf02:	42ab      	cmp	r3, r5
    cf04:	d10a      	bne.n	cf1c <_dtoa_r+0x844>
    cf06:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    cf08:	9a07      	ldr	r2, [sp, #28]
    cf0a:	4213      	tst	r3, r2
    cf0c:	d006      	beq.n	cf1c <_dtoa_r+0x844>
    cf0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cf10:	3501      	adds	r5, #1
    cf12:	3301      	adds	r3, #1
    cf14:	930d      	str	r3, [sp, #52]	; 0x34
    cf16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    cf18:	3301      	adds	r3, #1
    cf1a:	930e      	str	r3, [sp, #56]	; 0x38
    cf1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    cf1e:	2001      	movs	r0, #1
    cf20:	2b00      	cmp	r3, #0
    cf22:	d008      	beq.n	cf36 <_dtoa_r+0x85e>
    cf24:	693b      	ldr	r3, [r7, #16]
    cf26:	3303      	adds	r3, #3
    cf28:	009b      	lsls	r3, r3, #2
    cf2a:	18fb      	adds	r3, r7, r3
    cf2c:	6858      	ldr	r0, [r3, #4]
    cf2e:	f000 fe40 	bl	dbb2 <__hi0bits>
    cf32:	2320      	movs	r3, #32
    cf34:	1a18      	subs	r0, r3, r0
    cf36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    cf38:	18c0      	adds	r0, r0, r3
    cf3a:	231f      	movs	r3, #31
    cf3c:	4018      	ands	r0, r3
    cf3e:	d009      	beq.n	cf54 <_dtoa_r+0x87c>
    cf40:	3301      	adds	r3, #1
    cf42:	1a1b      	subs	r3, r3, r0
    cf44:	2b04      	cmp	r3, #4
    cf46:	dd02      	ble.n	cf4e <_dtoa_r+0x876>
    cf48:	231c      	movs	r3, #28
    cf4a:	1a18      	subs	r0, r3, r0
    cf4c:	e003      	b.n	cf56 <_dtoa_r+0x87e>
    cf4e:	2b04      	cmp	r3, #4
    cf50:	d008      	beq.n	cf64 <_dtoa_r+0x88c>
    cf52:	1c18      	adds	r0, r3, #0
    cf54:	301c      	adds	r0, #28
    cf56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cf58:	1824      	adds	r4, r4, r0
    cf5a:	181b      	adds	r3, r3, r0
    cf5c:	930d      	str	r3, [sp, #52]	; 0x34
    cf5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    cf60:	181b      	adds	r3, r3, r0
    cf62:	930e      	str	r3, [sp, #56]	; 0x38
    cf64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cf66:	2b00      	cmp	r3, #0
    cf68:	dd05      	ble.n	cf76 <_dtoa_r+0x89e>
    cf6a:	9808      	ldr	r0, [sp, #32]
    cf6c:	990a      	ldr	r1, [sp, #40]	; 0x28
    cf6e:	1c1a      	adds	r2, r3, #0
    cf70:	f000 ff52 	bl	de18 <__lshift>
    cf74:	900a      	str	r0, [sp, #40]	; 0x28
    cf76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    cf78:	2b00      	cmp	r3, #0
    cf7a:	dd05      	ble.n	cf88 <_dtoa_r+0x8b0>
    cf7c:	1c39      	adds	r1, r7, #0
    cf7e:	9808      	ldr	r0, [sp, #32]
    cf80:	1c1a      	adds	r2, r3, #0
    cf82:	f000 ff49 	bl	de18 <__lshift>
    cf86:	1c07      	adds	r7, r0, #0
    cf88:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    cf8a:	2b00      	cmp	r3, #0
    cf8c:	d01e      	beq.n	cfcc <_dtoa_r+0x8f4>
    cf8e:	980a      	ldr	r0, [sp, #40]	; 0x28
    cf90:	1c39      	adds	r1, r7, #0
    cf92:	f000 ff93 	bl	debc <__mcmp>
    cf96:	2800      	cmp	r0, #0
    cf98:	da18      	bge.n	cfcc <_dtoa_r+0x8f4>
    cf9a:	9b03      	ldr	r3, [sp, #12]
    cf9c:	9808      	ldr	r0, [sp, #32]
    cf9e:	3b01      	subs	r3, #1
    cfa0:	9303      	str	r3, [sp, #12]
    cfa2:	990a      	ldr	r1, [sp, #40]	; 0x28
    cfa4:	2300      	movs	r3, #0
    cfa6:	220a      	movs	r2, #10
    cfa8:	f000 fd87 	bl	daba <__multadd>
    cfac:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cfae:	900a      	str	r0, [sp, #40]	; 0x28
    cfb0:	2b00      	cmp	r3, #0
    cfb2:	d100      	bne.n	cfb6 <_dtoa_r+0x8de>
    cfb4:	e17f      	b.n	d2b6 <_dtoa_r+0xbde>
    cfb6:	1c31      	adds	r1, r6, #0
    cfb8:	2300      	movs	r3, #0
    cfba:	9808      	ldr	r0, [sp, #32]
    cfbc:	220a      	movs	r2, #10
    cfbe:	f000 fd7c 	bl	daba <__multadd>
    cfc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cfc4:	1c06      	adds	r6, r0, #0
    cfc6:	2b00      	cmp	r3, #0
    cfc8:	dc3c      	bgt.n	d044 <_dtoa_r+0x96c>
    cfca:	e17d      	b.n	d2c8 <_dtoa_r+0xbf0>
    cfcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cfce:	2b00      	cmp	r3, #0
    cfd0:	dc2e      	bgt.n	d030 <_dtoa_r+0x958>
    cfd2:	9b20      	ldr	r3, [sp, #128]	; 0x80
    cfd4:	2b02      	cmp	r3, #2
    cfd6:	dd2b      	ble.n	d030 <_dtoa_r+0x958>
    cfd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cfda:	930b      	str	r3, [sp, #44]	; 0x2c
    cfdc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cfde:	2b00      	cmp	r3, #0
    cfe0:	d110      	bne.n	d004 <_dtoa_r+0x92c>
    cfe2:	1c39      	adds	r1, r7, #0
    cfe4:	9808      	ldr	r0, [sp, #32]
    cfe6:	2205      	movs	r2, #5
    cfe8:	f000 fd67 	bl	daba <__multadd>
    cfec:	1c07      	adds	r7, r0, #0
    cfee:	980a      	ldr	r0, [sp, #40]	; 0x28
    cff0:	1c39      	adds	r1, r7, #0
    cff2:	f000 ff63 	bl	debc <__mcmp>
    cff6:	2800      	cmp	r0, #0
    cff8:	dc0e      	bgt.n	d018 <_dtoa_r+0x940>
    cffa:	e003      	b.n	d004 <_dtoa_r+0x92c>
    cffc:	1c2f      	adds	r7, r5, #0
    cffe:	e000      	b.n	d002 <_dtoa_r+0x92a>
    d000:	2700      	movs	r7, #0
    d002:	1c3e      	adds	r6, r7, #0
    d004:	9b21      	ldr	r3, [sp, #132]	; 0x84
    d006:	43db      	mvns	r3, r3
    d008:	9303      	str	r3, [sp, #12]
    d00a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d00c:	9304      	str	r3, [sp, #16]
    d00e:	e00c      	b.n	d02a <_dtoa_r+0x952>
    d010:	1c2f      	adds	r7, r5, #0
    d012:	1c2e      	adds	r6, r5, #0
    d014:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d016:	9303      	str	r3, [sp, #12]
    d018:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d01a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d01c:	3301      	adds	r3, #1
    d01e:	9304      	str	r3, [sp, #16]
    d020:	2331      	movs	r3, #49	; 0x31
    d022:	7013      	strb	r3, [r2, #0]
    d024:	9b03      	ldr	r3, [sp, #12]
    d026:	3301      	adds	r3, #1
    d028:	9303      	str	r3, [sp, #12]
    d02a:	9609      	str	r6, [sp, #36]	; 0x24
    d02c:	2600      	movs	r6, #0
    d02e:	e11a      	b.n	d266 <_dtoa_r+0xb8e>
    d030:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d032:	2b00      	cmp	r3, #0
    d034:	d104      	bne.n	d040 <_dtoa_r+0x968>
    d036:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d038:	930b      	str	r3, [sp, #44]	; 0x2c
    d03a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    d03c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    d03e:	e0d0      	b.n	d1e2 <_dtoa_r+0xb0a>
    d040:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d042:	930b      	str	r3, [sp, #44]	; 0x2c
    d044:	2c00      	cmp	r4, #0
    d046:	dd05      	ble.n	d054 <_dtoa_r+0x97c>
    d048:	1c31      	adds	r1, r6, #0
    d04a:	9808      	ldr	r0, [sp, #32]
    d04c:	1c22      	adds	r2, r4, #0
    d04e:	f000 fee3 	bl	de18 <__lshift>
    d052:	1c06      	adds	r6, r0, #0
    d054:	9609      	str	r6, [sp, #36]	; 0x24
    d056:	2d00      	cmp	r5, #0
    d058:	d012      	beq.n	d080 <_dtoa_r+0x9a8>
    d05a:	6871      	ldr	r1, [r6, #4]
    d05c:	9808      	ldr	r0, [sp, #32]
    d05e:	f000 fcdb 	bl	da18 <_Balloc>
    d062:	1c31      	adds	r1, r6, #0
    d064:	1c04      	adds	r4, r0, #0
    d066:	6933      	ldr	r3, [r6, #16]
    d068:	310c      	adds	r1, #12
    d06a:	1c9a      	adds	r2, r3, #2
    d06c:	0092      	lsls	r2, r2, #2
    d06e:	300c      	adds	r0, #12
    d070:	f7fc fe71 	bl	9d56 <memcpy>
    d074:	9808      	ldr	r0, [sp, #32]
    d076:	1c21      	adds	r1, r4, #0
    d078:	2201      	movs	r2, #1
    d07a:	f000 fecd 	bl	de18 <__lshift>
    d07e:	9009      	str	r0, [sp, #36]	; 0x24
    d080:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d082:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d084:	930e      	str	r3, [sp, #56]	; 0x38
    d086:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d088:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    d08a:	3b01      	subs	r3, #1
    d08c:	18d3      	adds	r3, r2, r3
    d08e:	9310      	str	r3, [sp, #64]	; 0x40
    d090:	1c39      	adds	r1, r7, #0
    d092:	1c20      	adds	r0, r4, #0
    d094:	f7ff fa98 	bl	c5c8 <quorem>
    d098:	1c03      	adds	r3, r0, #0
    d09a:	900f      	str	r0, [sp, #60]	; 0x3c
    d09c:	3330      	adds	r3, #48	; 0x30
    d09e:	1c31      	adds	r1, r6, #0
    d0a0:	1c20      	adds	r0, r4, #0
    d0a2:	930d      	str	r3, [sp, #52]	; 0x34
    d0a4:	f000 ff0a 	bl	debc <__mcmp>
    d0a8:	1c39      	adds	r1, r7, #0
    d0aa:	900b      	str	r0, [sp, #44]	; 0x2c
    d0ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d0ae:	9808      	ldr	r0, [sp, #32]
    d0b0:	f000 ff1f 	bl	def2 <__mdiff>
    d0b4:	2301      	movs	r3, #1
    d0b6:	9304      	str	r3, [sp, #16]
    d0b8:	68c3      	ldr	r3, [r0, #12]
    d0ba:	1c05      	adds	r5, r0, #0
    d0bc:	2b00      	cmp	r3, #0
    d0be:	d104      	bne.n	d0ca <_dtoa_r+0x9f2>
    d0c0:	1c20      	adds	r0, r4, #0
    d0c2:	1c29      	adds	r1, r5, #0
    d0c4:	f000 fefa 	bl	debc <__mcmp>
    d0c8:	9004      	str	r0, [sp, #16]
    d0ca:	9808      	ldr	r0, [sp, #32]
    d0cc:	1c29      	adds	r1, r5, #0
    d0ce:	f000 fcdb 	bl	da88 <_Bfree>
    d0d2:	9b04      	ldr	r3, [sp, #16]
    d0d4:	9a20      	ldr	r2, [sp, #128]	; 0x80
    d0d6:	4313      	orrs	r3, r2
    d0d8:	d110      	bne.n	d0fc <_dtoa_r+0xa24>
    d0da:	9a06      	ldr	r2, [sp, #24]
    d0dc:	3301      	adds	r3, #1
    d0de:	4213      	tst	r3, r2
    d0e0:	d10c      	bne.n	d0fc <_dtoa_r+0xa24>
    d0e2:	980d      	ldr	r0, [sp, #52]	; 0x34
    d0e4:	940a      	str	r4, [sp, #40]	; 0x28
    d0e6:	2839      	cmp	r0, #57	; 0x39
    d0e8:	d03d      	beq.n	d166 <_dtoa_r+0xa8e>
    d0ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d0ec:	2b00      	cmp	r3, #0
    d0ee:	dd01      	ble.n	d0f4 <_dtoa_r+0xa1c>
    d0f0:	980f      	ldr	r0, [sp, #60]	; 0x3c
    d0f2:	3031      	adds	r0, #49	; 0x31
    d0f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d0f6:	3301      	adds	r3, #1
    d0f8:	9304      	str	r3, [sp, #16]
    d0fa:	e03e      	b.n	d17a <_dtoa_r+0xaa2>
    d0fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d0fe:	2b00      	cmp	r3, #0
    d100:	da05      	bge.n	d10e <_dtoa_r+0xa36>
    d102:	9b04      	ldr	r3, [sp, #16]
    d104:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    d106:	940a      	str	r4, [sp, #40]	; 0x28
    d108:	2b00      	cmp	r3, #0
    d10a:	dc09      	bgt.n	d120 <_dtoa_r+0xa48>
    d10c:	e01c      	b.n	d148 <_dtoa_r+0xa70>
    d10e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    d110:	9b20      	ldr	r3, [sp, #128]	; 0x80
    d112:	431d      	orrs	r5, r3
    d114:	d11e      	bne.n	d154 <_dtoa_r+0xa7c>
    d116:	2301      	movs	r3, #1
    d118:	9a06      	ldr	r2, [sp, #24]
    d11a:	4213      	tst	r3, r2
    d11c:	d11a      	bne.n	d154 <_dtoa_r+0xa7c>
    d11e:	e7f0      	b.n	d102 <_dtoa_r+0xa2a>
    d120:	1c21      	adds	r1, r4, #0
    d122:	9808      	ldr	r0, [sp, #32]
    d124:	2201      	movs	r2, #1
    d126:	f000 fe77 	bl	de18 <__lshift>
    d12a:	1c39      	adds	r1, r7, #0
    d12c:	900a      	str	r0, [sp, #40]	; 0x28
    d12e:	f000 fec5 	bl	debc <__mcmp>
    d132:	2800      	cmp	r0, #0
    d134:	dc03      	bgt.n	d13e <_dtoa_r+0xa66>
    d136:	d107      	bne.n	d148 <_dtoa_r+0xa70>
    d138:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d13a:	07db      	lsls	r3, r3, #31
    d13c:	d504      	bpl.n	d148 <_dtoa_r+0xa70>
    d13e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d140:	2b39      	cmp	r3, #57	; 0x39
    d142:	d010      	beq.n	d166 <_dtoa_r+0xa8e>
    d144:	1c1d      	adds	r5, r3, #0
    d146:	3501      	adds	r5, #1
    d148:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d14a:	3301      	adds	r3, #1
    d14c:	9304      	str	r3, [sp, #16]
    d14e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d150:	701d      	strb	r5, [r3, #0]
    d152:	e088      	b.n	d266 <_dtoa_r+0xb8e>
    d154:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d156:	1c5d      	adds	r5, r3, #1
    d158:	9b04      	ldr	r3, [sp, #16]
    d15a:	2b00      	cmp	r3, #0
    d15c:	dd10      	ble.n	d180 <_dtoa_r+0xaa8>
    d15e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d160:	940a      	str	r4, [sp, #40]	; 0x28
    d162:	2b39      	cmp	r3, #57	; 0x39
    d164:	d106      	bne.n	d174 <_dtoa_r+0xa9c>
    d166:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d168:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    d16a:	3301      	adds	r3, #1
    d16c:	9304      	str	r3, [sp, #16]
    d16e:	2339      	movs	r3, #57	; 0x39
    d170:	7013      	strb	r3, [r2, #0]
    d172:	e060      	b.n	d236 <_dtoa_r+0xb5e>
    d174:	980d      	ldr	r0, [sp, #52]	; 0x34
    d176:	9504      	str	r5, [sp, #16]
    d178:	3001      	adds	r0, #1
    d17a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d17c:	7018      	strb	r0, [r3, #0]
    d17e:	e072      	b.n	d266 <_dtoa_r+0xb8e>
    d180:	466a      	mov	r2, sp
    d182:	2134      	movs	r1, #52	; 0x34
    d184:	1852      	adds	r2, r2, r1
    d186:	7812      	ldrb	r2, [r2, #0]
    d188:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d18a:	9504      	str	r5, [sp, #16]
    d18c:	701a      	strb	r2, [r3, #0]
    d18e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d190:	4293      	cmp	r3, r2
    d192:	d03f      	beq.n	d214 <_dtoa_r+0xb3c>
    d194:	1c21      	adds	r1, r4, #0
    d196:	220a      	movs	r2, #10
    d198:	2300      	movs	r3, #0
    d19a:	9808      	ldr	r0, [sp, #32]
    d19c:	f000 fc8d 	bl	daba <__multadd>
    d1a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d1a2:	1c04      	adds	r4, r0, #0
    d1a4:	1c31      	adds	r1, r6, #0
    d1a6:	9808      	ldr	r0, [sp, #32]
    d1a8:	220a      	movs	r2, #10
    d1aa:	429e      	cmp	r6, r3
    d1ac:	d105      	bne.n	d1ba <_dtoa_r+0xae2>
    d1ae:	2300      	movs	r3, #0
    d1b0:	f000 fc83 	bl	daba <__multadd>
    d1b4:	1c06      	adds	r6, r0, #0
    d1b6:	9009      	str	r0, [sp, #36]	; 0x24
    d1b8:	e00a      	b.n	d1d0 <_dtoa_r+0xaf8>
    d1ba:	2300      	movs	r3, #0
    d1bc:	f000 fc7d 	bl	daba <__multadd>
    d1c0:	9909      	ldr	r1, [sp, #36]	; 0x24
    d1c2:	1c06      	adds	r6, r0, #0
    d1c4:	220a      	movs	r2, #10
    d1c6:	9808      	ldr	r0, [sp, #32]
    d1c8:	2300      	movs	r3, #0
    d1ca:	f000 fc76 	bl	daba <__multadd>
    d1ce:	9009      	str	r0, [sp, #36]	; 0x24
    d1d0:	950e      	str	r5, [sp, #56]	; 0x38
    d1d2:	e75d      	b.n	d090 <_dtoa_r+0x9b8>
    d1d4:	1c21      	adds	r1, r4, #0
    d1d6:	9808      	ldr	r0, [sp, #32]
    d1d8:	220a      	movs	r2, #10
    d1da:	2300      	movs	r3, #0
    d1dc:	f000 fc6d 	bl	daba <__multadd>
    d1e0:	1c04      	adds	r4, r0, #0
    d1e2:	1c20      	adds	r0, r4, #0
    d1e4:	1c39      	adds	r1, r7, #0
    d1e6:	f7ff f9ef 	bl	c5c8 <quorem>
    d1ea:	2234      	movs	r2, #52	; 0x34
    d1ec:	466b      	mov	r3, sp
    d1ee:	3030      	adds	r0, #48	; 0x30
    d1f0:	189b      	adds	r3, r3, r2
    d1f2:	900d      	str	r0, [sp, #52]	; 0x34
    d1f4:	781b      	ldrb	r3, [r3, #0]
    d1f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d1f8:	702b      	strb	r3, [r5, #0]
    d1fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d1fc:	3501      	adds	r5, #1
    d1fe:	1aeb      	subs	r3, r5, r3
    d200:	4293      	cmp	r3, r2
    d202:	dbe7      	blt.n	d1d4 <_dtoa_r+0xafc>
    d204:	1e13      	subs	r3, r2, #0
    d206:	dc00      	bgt.n	d20a <_dtoa_r+0xb32>
    d208:	2301      	movs	r3, #1
    d20a:	9609      	str	r6, [sp, #36]	; 0x24
    d20c:	2600      	movs	r6, #0
    d20e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d210:	18d3      	adds	r3, r2, r3
    d212:	9304      	str	r3, [sp, #16]
    d214:	1c21      	adds	r1, r4, #0
    d216:	9808      	ldr	r0, [sp, #32]
    d218:	2201      	movs	r2, #1
    d21a:	f000 fdfd 	bl	de18 <__lshift>
    d21e:	1c39      	adds	r1, r7, #0
    d220:	900a      	str	r0, [sp, #40]	; 0x28
    d222:	f000 fe4b 	bl	debc <__mcmp>
    d226:	2800      	cmp	r0, #0
    d228:	dc05      	bgt.n	d236 <_dtoa_r+0xb5e>
    d22a:	d115      	bne.n	d258 <_dtoa_r+0xb80>
    d22c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d22e:	07db      	lsls	r3, r3, #31
    d230:	d401      	bmi.n	d236 <_dtoa_r+0xb5e>
    d232:	e011      	b.n	d258 <_dtoa_r+0xb80>
    d234:	9304      	str	r3, [sp, #16]
    d236:	9b04      	ldr	r3, [sp, #16]
    d238:	3b01      	subs	r3, #1
    d23a:	781a      	ldrb	r2, [r3, #0]
    d23c:	2a39      	cmp	r2, #57	; 0x39
    d23e:	d108      	bne.n	d252 <_dtoa_r+0xb7a>
    d240:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d242:	4293      	cmp	r3, r2
    d244:	d1f6      	bne.n	d234 <_dtoa_r+0xb5c>
    d246:	9b03      	ldr	r3, [sp, #12]
    d248:	3301      	adds	r3, #1
    d24a:	9303      	str	r3, [sp, #12]
    d24c:	2331      	movs	r3, #49	; 0x31
    d24e:	7013      	strb	r3, [r2, #0]
    d250:	e009      	b.n	d266 <_dtoa_r+0xb8e>
    d252:	3201      	adds	r2, #1
    d254:	701a      	strb	r2, [r3, #0]
    d256:	e006      	b.n	d266 <_dtoa_r+0xb8e>
    d258:	9b04      	ldr	r3, [sp, #16]
    d25a:	3b01      	subs	r3, #1
    d25c:	781a      	ldrb	r2, [r3, #0]
    d25e:	2a30      	cmp	r2, #48	; 0x30
    d260:	d101      	bne.n	d266 <_dtoa_r+0xb8e>
    d262:	9304      	str	r3, [sp, #16]
    d264:	e7f8      	b.n	d258 <_dtoa_r+0xb80>
    d266:	9808      	ldr	r0, [sp, #32]
    d268:	1c39      	adds	r1, r7, #0
    d26a:	f000 fc0d 	bl	da88 <_Bfree>
    d26e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d270:	2b00      	cmp	r3, #0
    d272:	d00e      	beq.n	d292 <_dtoa_r+0xbba>
    d274:	2e00      	cmp	r6, #0
    d276:	d005      	beq.n	d284 <_dtoa_r+0xbac>
    d278:	429e      	cmp	r6, r3
    d27a:	d003      	beq.n	d284 <_dtoa_r+0xbac>
    d27c:	9808      	ldr	r0, [sp, #32]
    d27e:	1c31      	adds	r1, r6, #0
    d280:	f000 fc02 	bl	da88 <_Bfree>
    d284:	9808      	ldr	r0, [sp, #32]
    d286:	9909      	ldr	r1, [sp, #36]	; 0x24
    d288:	f000 fbfe 	bl	da88 <_Bfree>
    d28c:	e001      	b.n	d292 <_dtoa_r+0xbba>
    d28e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d290:	9303      	str	r3, [sp, #12]
    d292:	9808      	ldr	r0, [sp, #32]
    d294:	990a      	ldr	r1, [sp, #40]	; 0x28
    d296:	f000 fbf7 	bl	da88 <_Bfree>
    d29a:	2300      	movs	r3, #0
    d29c:	9a04      	ldr	r2, [sp, #16]
    d29e:	980c      	ldr	r0, [sp, #48]	; 0x30
    d2a0:	7013      	strb	r3, [r2, #0]
    d2a2:	9b03      	ldr	r3, [sp, #12]
    d2a4:	9a22      	ldr	r2, [sp, #136]	; 0x88
    d2a6:	3301      	adds	r3, #1
    d2a8:	6013      	str	r3, [r2, #0]
    d2aa:	9b24      	ldr	r3, [sp, #144]	; 0x90
    d2ac:	2b00      	cmp	r3, #0
    d2ae:	d010      	beq.n	d2d2 <_dtoa_r+0xbfa>
    d2b0:	9a04      	ldr	r2, [sp, #16]
    d2b2:	601a      	str	r2, [r3, #0]
    d2b4:	e00d      	b.n	d2d2 <_dtoa_r+0xbfa>
    d2b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d2b8:	2b00      	cmp	r3, #0
    d2ba:	dd00      	ble.n	d2be <_dtoa_r+0xbe6>
    d2bc:	e6bd      	b.n	d03a <_dtoa_r+0x962>
    d2be:	9b20      	ldr	r3, [sp, #128]	; 0x80
    d2c0:	2b02      	cmp	r3, #2
    d2c2:	dd00      	ble.n	d2c6 <_dtoa_r+0xbee>
    d2c4:	e68a      	b.n	cfdc <_dtoa_r+0x904>
    d2c6:	e6b8      	b.n	d03a <_dtoa_r+0x962>
    d2c8:	9b20      	ldr	r3, [sp, #128]	; 0x80
    d2ca:	2b02      	cmp	r3, #2
    d2cc:	dd00      	ble.n	d2d0 <_dtoa_r+0xbf8>
    d2ce:	e685      	b.n	cfdc <_dtoa_r+0x904>
    d2d0:	e6b8      	b.n	d044 <_dtoa_r+0x96c>
    d2d2:	b01b      	add	sp, #108	; 0x6c
    d2d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d2d6:	46c0      	nop			; (mov r8, r8)

0000d2d8 <__sflags>:
    d2d8:	780b      	ldrb	r3, [r1, #0]
    d2da:	b530      	push	{r4, r5, lr}
    d2dc:	2b72      	cmp	r3, #114	; 0x72
    d2de:	d00e      	beq.n	d2fe <__sflags+0x26>
    d2e0:	2b77      	cmp	r3, #119	; 0x77
    d2e2:	d007      	beq.n	d2f4 <__sflags+0x1c>
    d2e4:	2b61      	cmp	r3, #97	; 0x61
    d2e6:	d10e      	bne.n	d306 <__sflags+0x2e>
    d2e8:	2582      	movs	r5, #130	; 0x82
    d2ea:	2084      	movs	r0, #132	; 0x84
    d2ec:	00ad      	lsls	r5, r5, #2
    d2ee:	2301      	movs	r3, #1
    d2f0:	0040      	lsls	r0, r0, #1
    d2f2:	e01b      	b.n	d32c <__sflags+0x54>
    d2f4:	25c0      	movs	r5, #192	; 0xc0
    d2f6:	2301      	movs	r3, #1
    d2f8:	00ed      	lsls	r5, r5, #3
    d2fa:	2008      	movs	r0, #8
    d2fc:	e016      	b.n	d32c <__sflags+0x54>
    d2fe:	2500      	movs	r5, #0
    d300:	2004      	movs	r0, #4
    d302:	1c2b      	adds	r3, r5, #0
    d304:	e012      	b.n	d32c <__sflags+0x54>
    d306:	2316      	movs	r3, #22
    d308:	6003      	str	r3, [r0, #0]
    d30a:	2000      	movs	r0, #0
    d30c:	e01b      	b.n	d346 <__sflags+0x6e>
    d30e:	2c62      	cmp	r4, #98	; 0x62
    d310:	d011      	beq.n	d336 <__sflags+0x5e>
    d312:	2c78      	cmp	r4, #120	; 0x78
    d314:	d012      	beq.n	d33c <__sflags+0x64>
    d316:	2c2b      	cmp	r4, #43	; 0x2b
    d318:	d108      	bne.n	d32c <__sflags+0x54>
    d31a:	3c0f      	subs	r4, #15
    d31c:	43a0      	bics	r0, r4
    d31e:	3c0c      	subs	r4, #12
    d320:	4320      	orrs	r0, r4
    d322:	3c0d      	subs	r4, #13
    d324:	43a3      	bics	r3, r4
    d326:	1c1c      	adds	r4, r3, #0
    d328:	2302      	movs	r3, #2
    d32a:	4323      	orrs	r3, r4
    d32c:	3101      	adds	r1, #1
    d32e:	780c      	ldrb	r4, [r1, #0]
    d330:	2c00      	cmp	r4, #0
    d332:	d1ec      	bne.n	d30e <__sflags+0x36>
    d334:	e005      	b.n	d342 <__sflags+0x6a>
    d336:	2480      	movs	r4, #128	; 0x80
    d338:	0264      	lsls	r4, r4, #9
    d33a:	e7f6      	b.n	d32a <__sflags+0x52>
    d33c:	2480      	movs	r4, #128	; 0x80
    d33e:	0124      	lsls	r4, r4, #4
    d340:	e7f3      	b.n	d32a <__sflags+0x52>
    d342:	432b      	orrs	r3, r5
    d344:	6013      	str	r3, [r2, #0]
    d346:	bd30      	pop	{r4, r5, pc}

0000d348 <_fstat_r>:
    d348:	b538      	push	{r3, r4, r5, lr}
    d34a:	2300      	movs	r3, #0
    d34c:	4c06      	ldr	r4, [pc, #24]	; (d368 <_fstat_r+0x20>)
    d34e:	1c05      	adds	r5, r0, #0
    d350:	1c08      	adds	r0, r1, #0
    d352:	1c11      	adds	r1, r2, #0
    d354:	6023      	str	r3, [r4, #0]
    d356:	f7f6 fd6f 	bl	3e38 <_fstat>
    d35a:	1c43      	adds	r3, r0, #1
    d35c:	d103      	bne.n	d366 <_fstat_r+0x1e>
    d35e:	6823      	ldr	r3, [r4, #0]
    d360:	2b00      	cmp	r3, #0
    d362:	d000      	beq.n	d366 <_fstat_r+0x1e>
    d364:	602b      	str	r3, [r5, #0]
    d366:	bd38      	pop	{r3, r4, r5, pc}
    d368:	200047c8 	.word	0x200047c8

0000d36c <rshift>:
    d36c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d36e:	1c06      	adds	r6, r0, #0
    d370:	6905      	ldr	r5, [r0, #16]
    d372:	3614      	adds	r6, #20
    d374:	114a      	asrs	r2, r1, #5
    d376:	1c34      	adds	r4, r6, #0
    d378:	42aa      	cmp	r2, r5
    d37a:	da25      	bge.n	d3c8 <rshift+0x5c>
    d37c:	231f      	movs	r3, #31
    d37e:	00ad      	lsls	r5, r5, #2
    d380:	0092      	lsls	r2, r2, #2
    d382:	4019      	ands	r1, r3
    d384:	1975      	adds	r5, r6, r5
    d386:	18b2      	adds	r2, r6, r2
    d388:	1c33      	adds	r3, r6, #0
    d38a:	2900      	cmp	r1, #0
    d38c:	d016      	beq.n	d3bc <rshift+0x50>
    d38e:	1c13      	adds	r3, r2, #0
    d390:	cb04      	ldmia	r3!, {r2}
    d392:	2720      	movs	r7, #32
    d394:	40ca      	lsrs	r2, r1
    d396:	46b4      	mov	ip, r6
    d398:	1a7f      	subs	r7, r7, r1
    d39a:	4664      	mov	r4, ip
    d39c:	42ab      	cmp	r3, r5
    d39e:	d208      	bcs.n	d3b2 <rshift+0x46>
    d3a0:	681c      	ldr	r4, [r3, #0]
    d3a2:	40bc      	lsls	r4, r7
    d3a4:	4322      	orrs	r2, r4
    d3a6:	4664      	mov	r4, ip
    d3a8:	c404      	stmia	r4!, {r2}
    d3aa:	cb04      	ldmia	r3!, {r2}
    d3ac:	46a4      	mov	ip, r4
    d3ae:	40ca      	lsrs	r2, r1
    d3b0:	e7f3      	b.n	d39a <rshift+0x2e>
    d3b2:	6022      	str	r2, [r4, #0]
    d3b4:	2a00      	cmp	r2, #0
    d3b6:	d007      	beq.n	d3c8 <rshift+0x5c>
    d3b8:	3404      	adds	r4, #4
    d3ba:	e005      	b.n	d3c8 <rshift+0x5c>
    d3bc:	1c1c      	adds	r4, r3, #0
    d3be:	42aa      	cmp	r2, r5
    d3c0:	d202      	bcs.n	d3c8 <rshift+0x5c>
    d3c2:	ca02      	ldmia	r2!, {r1}
    d3c4:	c302      	stmia	r3!, {r1}
    d3c6:	e7f9      	b.n	d3bc <rshift+0x50>
    d3c8:	1ba3      	subs	r3, r4, r6
    d3ca:	109b      	asrs	r3, r3, #2
    d3cc:	6103      	str	r3, [r0, #16]
    d3ce:	d100      	bne.n	d3d2 <rshift+0x66>
    d3d0:	6143      	str	r3, [r0, #20]
    d3d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000d3d4 <__hexdig_fun>:
    d3d4:	1c03      	adds	r3, r0, #0
    d3d6:	3b30      	subs	r3, #48	; 0x30
    d3d8:	2b09      	cmp	r3, #9
    d3da:	d801      	bhi.n	d3e0 <__hexdig_fun+0xc>
    d3dc:	3820      	subs	r0, #32
    d3de:	e00b      	b.n	d3f8 <__hexdig_fun+0x24>
    d3e0:	1c03      	adds	r3, r0, #0
    d3e2:	3b61      	subs	r3, #97	; 0x61
    d3e4:	2b05      	cmp	r3, #5
    d3e6:	d801      	bhi.n	d3ec <__hexdig_fun+0x18>
    d3e8:	3847      	subs	r0, #71	; 0x47
    d3ea:	e005      	b.n	d3f8 <__hexdig_fun+0x24>
    d3ec:	1c02      	adds	r2, r0, #0
    d3ee:	3a41      	subs	r2, #65	; 0x41
    d3f0:	2300      	movs	r3, #0
    d3f2:	2a05      	cmp	r2, #5
    d3f4:	d801      	bhi.n	d3fa <__hexdig_fun+0x26>
    d3f6:	3827      	subs	r0, #39	; 0x27
    d3f8:	b2c3      	uxtb	r3, r0
    d3fa:	1c18      	adds	r0, r3, #0
    d3fc:	4770      	bx	lr

0000d3fe <__gethex>:
    d3fe:	b5f0      	push	{r4, r5, r6, r7, lr}
    d400:	b08d      	sub	sp, #52	; 0x34
    d402:	9109      	str	r1, [sp, #36]	; 0x24
    d404:	9202      	str	r2, [sp, #8]
    d406:	930a      	str	r3, [sp, #40]	; 0x28
    d408:	9005      	str	r0, [sp, #20]
    d40a:	f000 fad9 	bl	d9c0 <_localeconv_r>
    d40e:	6803      	ldr	r3, [r0, #0]
    d410:	1c18      	adds	r0, r3, #0
    d412:	9307      	str	r3, [sp, #28]
    d414:	f7fe f822 	bl	b45c <strlen>
    d418:	9b07      	ldr	r3, [sp, #28]
    d41a:	9004      	str	r0, [sp, #16]
    d41c:	181b      	adds	r3, r3, r0
    d41e:	3b01      	subs	r3, #1
    d420:	781b      	ldrb	r3, [r3, #0]
    d422:	930b      	str	r3, [sp, #44]	; 0x2c
    d424:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d426:	6819      	ldr	r1, [r3, #0]
    d428:	1c8a      	adds	r2, r1, #2
    d42a:	9201      	str	r2, [sp, #4]
    d42c:	9801      	ldr	r0, [sp, #4]
    d42e:	1a53      	subs	r3, r2, r1
    d430:	7800      	ldrb	r0, [r0, #0]
    d432:	3b02      	subs	r3, #2
    d434:	3201      	adds	r2, #1
    d436:	2830      	cmp	r0, #48	; 0x30
    d438:	d0f7      	beq.n	d42a <__gethex+0x2c>
    d43a:	9308      	str	r3, [sp, #32]
    d43c:	f7ff ffca 	bl	d3d4 <__hexdig_fun>
    d440:	1e06      	subs	r6, r0, #0
    d442:	d120      	bne.n	d486 <__gethex+0x88>
    d444:	9801      	ldr	r0, [sp, #4]
    d446:	9907      	ldr	r1, [sp, #28]
    d448:	9a04      	ldr	r2, [sp, #16]
    d44a:	f7fe f80e 	bl	b46a <strncmp>
    d44e:	2800      	cmp	r0, #0
    d450:	d13c      	bne.n	d4cc <__gethex+0xce>
    d452:	9b01      	ldr	r3, [sp, #4]
    d454:	9a04      	ldr	r2, [sp, #16]
    d456:	189c      	adds	r4, r3, r2
    d458:	7820      	ldrb	r0, [r4, #0]
    d45a:	f7ff ffbb 	bl	d3d4 <__hexdig_fun>
    d45e:	2800      	cmp	r0, #0
    d460:	d037      	beq.n	d4d2 <__gethex+0xd4>
    d462:	9401      	str	r4, [sp, #4]
    d464:	9b01      	ldr	r3, [sp, #4]
    d466:	7818      	ldrb	r0, [r3, #0]
    d468:	2830      	cmp	r0, #48	; 0x30
    d46a:	d103      	bne.n	d474 <__gethex+0x76>
    d46c:	9b01      	ldr	r3, [sp, #4]
    d46e:	3301      	adds	r3, #1
    d470:	9301      	str	r3, [sp, #4]
    d472:	e7f7      	b.n	d464 <__gethex+0x66>
    d474:	f7ff ffae 	bl	d3d4 <__hexdig_fun>
    d478:	4243      	negs	r3, r0
    d47a:	4143      	adcs	r3, r0
    d47c:	9303      	str	r3, [sp, #12]
    d47e:	2301      	movs	r3, #1
    d480:	1c26      	adds	r6, r4, #0
    d482:	9308      	str	r3, [sp, #32]
    d484:	e002      	b.n	d48c <__gethex+0x8e>
    d486:	2300      	movs	r3, #0
    d488:	1c1e      	adds	r6, r3, #0
    d48a:	9303      	str	r3, [sp, #12]
    d48c:	9c01      	ldr	r4, [sp, #4]
    d48e:	7820      	ldrb	r0, [r4, #0]
    d490:	f7ff ffa0 	bl	d3d4 <__hexdig_fun>
    d494:	2800      	cmp	r0, #0
    d496:	d001      	beq.n	d49c <__gethex+0x9e>
    d498:	3401      	adds	r4, #1
    d49a:	e7f8      	b.n	d48e <__gethex+0x90>
    d49c:	1c20      	adds	r0, r4, #0
    d49e:	9907      	ldr	r1, [sp, #28]
    d4a0:	9a04      	ldr	r2, [sp, #16]
    d4a2:	f7fd ffe2 	bl	b46a <strncmp>
    d4a6:	2800      	cmp	r0, #0
    d4a8:	d10b      	bne.n	d4c2 <__gethex+0xc4>
    d4aa:	2e00      	cmp	r6, #0
    d4ac:	d10b      	bne.n	d4c6 <__gethex+0xc8>
    d4ae:	9b04      	ldr	r3, [sp, #16]
    d4b0:	18e6      	adds	r6, r4, r3
    d4b2:	1c34      	adds	r4, r6, #0
    d4b4:	7820      	ldrb	r0, [r4, #0]
    d4b6:	f7ff ff8d 	bl	d3d4 <__hexdig_fun>
    d4ba:	2800      	cmp	r0, #0
    d4bc:	d001      	beq.n	d4c2 <__gethex+0xc4>
    d4be:	3401      	adds	r4, #1
    d4c0:	e7f8      	b.n	d4b4 <__gethex+0xb6>
    d4c2:	1e37      	subs	r7, r6, #0
    d4c4:	d008      	beq.n	d4d8 <__gethex+0xda>
    d4c6:	1b36      	subs	r6, r6, r4
    d4c8:	00b7      	lsls	r7, r6, #2
    d4ca:	e005      	b.n	d4d8 <__gethex+0xda>
    d4cc:	9c01      	ldr	r4, [sp, #4]
    d4ce:	1c37      	adds	r7, r6, #0
    d4d0:	e000      	b.n	d4d4 <__gethex+0xd6>
    d4d2:	1c07      	adds	r7, r0, #0
    d4d4:	2301      	movs	r3, #1
    d4d6:	9303      	str	r3, [sp, #12]
    d4d8:	7823      	ldrb	r3, [r4, #0]
    d4da:	2b50      	cmp	r3, #80	; 0x50
    d4dc:	d001      	beq.n	d4e2 <__gethex+0xe4>
    d4de:	2b70      	cmp	r3, #112	; 0x70
    d4e0:	d128      	bne.n	d534 <__gethex+0x136>
    d4e2:	7863      	ldrb	r3, [r4, #1]
    d4e4:	2b2b      	cmp	r3, #43	; 0x2b
    d4e6:	d007      	beq.n	d4f8 <__gethex+0xfa>
    d4e8:	2b2d      	cmp	r3, #45	; 0x2d
    d4ea:	d003      	beq.n	d4f4 <__gethex+0xf6>
    d4ec:	2300      	movs	r3, #0
    d4ee:	1c65      	adds	r5, r4, #1
    d4f0:	9306      	str	r3, [sp, #24]
    d4f2:	e004      	b.n	d4fe <__gethex+0x100>
    d4f4:	2301      	movs	r3, #1
    d4f6:	e000      	b.n	d4fa <__gethex+0xfc>
    d4f8:	2300      	movs	r3, #0
    d4fa:	9306      	str	r3, [sp, #24]
    d4fc:	1ca5      	adds	r5, r4, #2
    d4fe:	7828      	ldrb	r0, [r5, #0]
    d500:	f7ff ff68 	bl	d3d4 <__hexdig_fun>
    d504:	1e43      	subs	r3, r0, #1
    d506:	b2db      	uxtb	r3, r3
    d508:	2b18      	cmp	r3, #24
    d50a:	d813      	bhi.n	d534 <__gethex+0x136>
    d50c:	3810      	subs	r0, #16
    d50e:	3501      	adds	r5, #1
    d510:	1c06      	adds	r6, r0, #0
    d512:	7828      	ldrb	r0, [r5, #0]
    d514:	f7ff ff5e 	bl	d3d4 <__hexdig_fun>
    d518:	1e43      	subs	r3, r0, #1
    d51a:	b2db      	uxtb	r3, r3
    d51c:	2b18      	cmp	r3, #24
    d51e:	d803      	bhi.n	d528 <__gethex+0x12a>
    d520:	230a      	movs	r3, #10
    d522:	435e      	muls	r6, r3
    d524:	1830      	adds	r0, r6, r0
    d526:	e7f1      	b.n	d50c <__gethex+0x10e>
    d528:	9b06      	ldr	r3, [sp, #24]
    d52a:	2b00      	cmp	r3, #0
    d52c:	d000      	beq.n	d530 <__gethex+0x132>
    d52e:	4276      	negs	r6, r6
    d530:	19bf      	adds	r7, r7, r6
    d532:	e000      	b.n	d536 <__gethex+0x138>
    d534:	1c25      	adds	r5, r4, #0
    d536:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d538:	601d      	str	r5, [r3, #0]
    d53a:	9b03      	ldr	r3, [sp, #12]
    d53c:	2b00      	cmp	r3, #0
    d53e:	d006      	beq.n	d54e <__gethex+0x150>
    d540:	2000      	movs	r0, #0
    d542:	9b08      	ldr	r3, [sp, #32]
    d544:	4283      	cmp	r3, r0
    d546:	d000      	beq.n	d54a <__gethex+0x14c>
    d548:	e17b      	b.n	d842 <__gethex+0x444>
    d54a:	3006      	adds	r0, #6
    d54c:	e179      	b.n	d842 <__gethex+0x444>
    d54e:	9b01      	ldr	r3, [sp, #4]
    d550:	9903      	ldr	r1, [sp, #12]
    d552:	1ae3      	subs	r3, r4, r3
    d554:	3b01      	subs	r3, #1
    d556:	2b07      	cmp	r3, #7
    d558:	dd02      	ble.n	d560 <__gethex+0x162>
    d55a:	3101      	adds	r1, #1
    d55c:	105b      	asrs	r3, r3, #1
    d55e:	e7fa      	b.n	d556 <__gethex+0x158>
    d560:	9805      	ldr	r0, [sp, #20]
    d562:	f000 fa59 	bl	da18 <_Balloc>
    d566:	1c03      	adds	r3, r0, #0
    d568:	2600      	movs	r6, #0
    d56a:	1c05      	adds	r5, r0, #0
    d56c:	3314      	adds	r3, #20
    d56e:	9303      	str	r3, [sp, #12]
    d570:	9308      	str	r3, [sp, #32]
    d572:	9606      	str	r6, [sp, #24]
    d574:	9b01      	ldr	r3, [sp, #4]
    d576:	429c      	cmp	r4, r3
    d578:	d92a      	bls.n	d5d0 <__gethex+0x1d2>
    d57a:	1e63      	subs	r3, r4, #1
    d57c:	9309      	str	r3, [sp, #36]	; 0x24
    d57e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d580:	781b      	ldrb	r3, [r3, #0]
    d582:	4293      	cmp	r3, r2
    d584:	d009      	beq.n	d59a <__gethex+0x19c>
    d586:	9b06      	ldr	r3, [sp, #24]
    d588:	2b20      	cmp	r3, #32
    d58a:	d114      	bne.n	d5b6 <__gethex+0x1b8>
    d58c:	9b08      	ldr	r3, [sp, #32]
    d58e:	601e      	str	r6, [r3, #0]
    d590:	2600      	movs	r6, #0
    d592:	3304      	adds	r3, #4
    d594:	9308      	str	r3, [sp, #32]
    d596:	9606      	str	r6, [sp, #24]
    d598:	e00d      	b.n	d5b6 <__gethex+0x1b8>
    d59a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d59c:	9a04      	ldr	r2, [sp, #16]
    d59e:	1a9c      	subs	r4, r3, r2
    d5a0:	9b01      	ldr	r3, [sp, #4]
    d5a2:	3401      	adds	r4, #1
    d5a4:	429c      	cmp	r4, r3
    d5a6:	d3ee      	bcc.n	d586 <__gethex+0x188>
    d5a8:	1c20      	adds	r0, r4, #0
    d5aa:	9907      	ldr	r1, [sp, #28]
    d5ac:	f7fd ff5d 	bl	b46a <strncmp>
    d5b0:	2800      	cmp	r0, #0
    d5b2:	d0df      	beq.n	d574 <__gethex+0x176>
    d5b4:	e7e7      	b.n	d586 <__gethex+0x188>
    d5b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d5b8:	7818      	ldrb	r0, [r3, #0]
    d5ba:	f7ff ff0b 	bl	d3d4 <__hexdig_fun>
    d5be:	230f      	movs	r3, #15
    d5c0:	4018      	ands	r0, r3
    d5c2:	9b06      	ldr	r3, [sp, #24]
    d5c4:	9c09      	ldr	r4, [sp, #36]	; 0x24
    d5c6:	4098      	lsls	r0, r3
    d5c8:	3304      	adds	r3, #4
    d5ca:	4306      	orrs	r6, r0
    d5cc:	9306      	str	r3, [sp, #24]
    d5ce:	e7d1      	b.n	d574 <__gethex+0x176>
    d5d0:	9c08      	ldr	r4, [sp, #32]
    d5d2:	9b03      	ldr	r3, [sp, #12]
    d5d4:	c440      	stmia	r4!, {r6}
    d5d6:	1ae4      	subs	r4, r4, r3
    d5d8:	10a4      	asrs	r4, r4, #2
    d5da:	612c      	str	r4, [r5, #16]
    d5dc:	1c30      	adds	r0, r6, #0
    d5de:	f000 fae8 	bl	dbb2 <__hi0bits>
    d5e2:	9b02      	ldr	r3, [sp, #8]
    d5e4:	0164      	lsls	r4, r4, #5
    d5e6:	681b      	ldr	r3, [r3, #0]
    d5e8:	1a26      	subs	r6, r4, r0
    d5ea:	9301      	str	r3, [sp, #4]
    d5ec:	429e      	cmp	r6, r3
    d5ee:	dd25      	ble.n	d63c <__gethex+0x23e>
    d5f0:	1af6      	subs	r6, r6, r3
    d5f2:	1c28      	adds	r0, r5, #0
    d5f4:	1c31      	adds	r1, r6, #0
    d5f6:	f000 fdf1 	bl	e1dc <__any_on>
    d5fa:	2400      	movs	r4, #0
    d5fc:	42a0      	cmp	r0, r4
    d5fe:	d017      	beq.n	d630 <__gethex+0x232>
    d600:	231f      	movs	r3, #31
    d602:	3401      	adds	r4, #1
    d604:	1c20      	adds	r0, r4, #0
    d606:	1e72      	subs	r2, r6, #1
    d608:	4013      	ands	r3, r2
    d60a:	4098      	lsls	r0, r3
    d60c:	1c03      	adds	r3, r0, #0
    d60e:	1151      	asrs	r1, r2, #5
    d610:	9803      	ldr	r0, [sp, #12]
    d612:	0089      	lsls	r1, r1, #2
    d614:	5809      	ldr	r1, [r1, r0]
    d616:	4219      	tst	r1, r3
    d618:	d00a      	beq.n	d630 <__gethex+0x232>
    d61a:	42a2      	cmp	r2, r4
    d61c:	dc01      	bgt.n	d622 <__gethex+0x224>
    d61e:	2402      	movs	r4, #2
    d620:	e006      	b.n	d630 <__gethex+0x232>
    d622:	1eb1      	subs	r1, r6, #2
    d624:	1c28      	adds	r0, r5, #0
    d626:	f000 fdd9 	bl	e1dc <__any_on>
    d62a:	2800      	cmp	r0, #0
    d62c:	d0f7      	beq.n	d61e <__gethex+0x220>
    d62e:	2403      	movs	r4, #3
    d630:	1c28      	adds	r0, r5, #0
    d632:	1c31      	adds	r1, r6, #0
    d634:	f7ff fe9a 	bl	d36c <rshift>
    d638:	19bf      	adds	r7, r7, r6
    d63a:	e00e      	b.n	d65a <__gethex+0x25c>
    d63c:	9b01      	ldr	r3, [sp, #4]
    d63e:	2400      	movs	r4, #0
    d640:	429e      	cmp	r6, r3
    d642:	da0a      	bge.n	d65a <__gethex+0x25c>
    d644:	1b9e      	subs	r6, r3, r6
    d646:	1c29      	adds	r1, r5, #0
    d648:	9805      	ldr	r0, [sp, #20]
    d64a:	1c32      	adds	r2, r6, #0
    d64c:	f000 fbe4 	bl	de18 <__lshift>
    d650:	1c03      	adds	r3, r0, #0
    d652:	1c05      	adds	r5, r0, #0
    d654:	3314      	adds	r3, #20
    d656:	1bbf      	subs	r7, r7, r6
    d658:	9303      	str	r3, [sp, #12]
    d65a:	9b02      	ldr	r3, [sp, #8]
    d65c:	689b      	ldr	r3, [r3, #8]
    d65e:	9304      	str	r3, [sp, #16]
    d660:	429f      	cmp	r7, r3
    d662:	dd08      	ble.n	d676 <__gethex+0x278>
    d664:	9805      	ldr	r0, [sp, #20]
    d666:	1c29      	adds	r1, r5, #0
    d668:	f000 fa0e 	bl	da88 <_Bfree>
    d66c:	2300      	movs	r3, #0
    d66e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    d670:	20a3      	movs	r0, #163	; 0xa3
    d672:	6013      	str	r3, [r2, #0]
    d674:	e0e5      	b.n	d842 <__gethex+0x444>
    d676:	9b02      	ldr	r3, [sp, #8]
    d678:	685e      	ldr	r6, [r3, #4]
    d67a:	42b7      	cmp	r7, r6
    d67c:	da5a      	bge.n	d734 <__gethex+0x336>
    d67e:	9b01      	ldr	r3, [sp, #4]
    d680:	1bf6      	subs	r6, r6, r7
    d682:	429e      	cmp	r6, r3
    d684:	db32      	blt.n	d6ec <__gethex+0x2ee>
    d686:	9b02      	ldr	r3, [sp, #8]
    d688:	68db      	ldr	r3, [r3, #12]
    d68a:	2b02      	cmp	r3, #2
    d68c:	d01e      	beq.n	d6cc <__gethex+0x2ce>
    d68e:	2b03      	cmp	r3, #3
    d690:	d020      	beq.n	d6d4 <__gethex+0x2d6>
    d692:	2b01      	cmp	r3, #1
    d694:	d121      	bne.n	d6da <__gethex+0x2dc>
    d696:	9b01      	ldr	r3, [sp, #4]
    d698:	429e      	cmp	r6, r3
    d69a:	d11e      	bne.n	d6da <__gethex+0x2dc>
    d69c:	2b01      	cmp	r3, #1
    d69e:	dc0d      	bgt.n	d6bc <__gethex+0x2be>
    d6a0:	9b02      	ldr	r3, [sp, #8]
    d6a2:	2062      	movs	r0, #98	; 0x62
    d6a4:	685b      	ldr	r3, [r3, #4]
    d6a6:	9301      	str	r3, [sp, #4]
    d6a8:	9a01      	ldr	r2, [sp, #4]
    d6aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d6ac:	601a      	str	r2, [r3, #0]
    d6ae:	2301      	movs	r3, #1
    d6b0:	9a03      	ldr	r2, [sp, #12]
    d6b2:	612b      	str	r3, [r5, #16]
    d6b4:	6013      	str	r3, [r2, #0]
    d6b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d6b8:	601d      	str	r5, [r3, #0]
    d6ba:	e0c2      	b.n	d842 <__gethex+0x444>
    d6bc:	9901      	ldr	r1, [sp, #4]
    d6be:	1c28      	adds	r0, r5, #0
    d6c0:	3901      	subs	r1, #1
    d6c2:	f000 fd8b 	bl	e1dc <__any_on>
    d6c6:	2800      	cmp	r0, #0
    d6c8:	d1ea      	bne.n	d6a0 <__gethex+0x2a2>
    d6ca:	e006      	b.n	d6da <__gethex+0x2dc>
    d6cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    d6ce:	2b00      	cmp	r3, #0
    d6d0:	d0e6      	beq.n	d6a0 <__gethex+0x2a2>
    d6d2:	e002      	b.n	d6da <__gethex+0x2dc>
    d6d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    d6d6:	2b00      	cmp	r3, #0
    d6d8:	d1e2      	bne.n	d6a0 <__gethex+0x2a2>
    d6da:	9805      	ldr	r0, [sp, #20]
    d6dc:	1c29      	adds	r1, r5, #0
    d6de:	f000 f9d3 	bl	da88 <_Bfree>
    d6e2:	2300      	movs	r3, #0
    d6e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
    d6e6:	2050      	movs	r0, #80	; 0x50
    d6e8:	6013      	str	r3, [r2, #0]
    d6ea:	e0aa      	b.n	d842 <__gethex+0x444>
    d6ec:	1e77      	subs	r7, r6, #1
    d6ee:	2c00      	cmp	r4, #0
    d6f0:	d107      	bne.n	d702 <__gethex+0x304>
    d6f2:	2f00      	cmp	r7, #0
    d6f4:	dd06      	ble.n	d704 <__gethex+0x306>
    d6f6:	1c28      	adds	r0, r5, #0
    d6f8:	1c39      	adds	r1, r7, #0
    d6fa:	f000 fd6f 	bl	e1dc <__any_on>
    d6fe:	1c04      	adds	r4, r0, #0
    d700:	e000      	b.n	d704 <__gethex+0x306>
    d702:	2401      	movs	r4, #1
    d704:	231f      	movs	r3, #31
    d706:	117a      	asrs	r2, r7, #5
    d708:	401f      	ands	r7, r3
    d70a:	3b1e      	subs	r3, #30
    d70c:	40bb      	lsls	r3, r7
    d70e:	1c1f      	adds	r7, r3, #0
    d710:	9b03      	ldr	r3, [sp, #12]
    d712:	0092      	lsls	r2, r2, #2
    d714:	58d3      	ldr	r3, [r2, r3]
    d716:	423b      	tst	r3, r7
    d718:	d001      	beq.n	d71e <__gethex+0x320>
    d71a:	2302      	movs	r3, #2
    d71c:	431c      	orrs	r4, r3
    d71e:	9b01      	ldr	r3, [sp, #4]
    d720:	1c31      	adds	r1, r6, #0
    d722:	1b9b      	subs	r3, r3, r6
    d724:	1c28      	adds	r0, r5, #0
    d726:	9301      	str	r3, [sp, #4]
    d728:	f7ff fe20 	bl	d36c <rshift>
    d72c:	9b02      	ldr	r3, [sp, #8]
    d72e:	2602      	movs	r6, #2
    d730:	685f      	ldr	r7, [r3, #4]
    d732:	e000      	b.n	d736 <__gethex+0x338>
    d734:	2601      	movs	r6, #1
    d736:	2c00      	cmp	r4, #0
    d738:	d07e      	beq.n	d838 <__gethex+0x43a>
    d73a:	9b02      	ldr	r3, [sp, #8]
    d73c:	68db      	ldr	r3, [r3, #12]
    d73e:	2b02      	cmp	r3, #2
    d740:	d00b      	beq.n	d75a <__gethex+0x35c>
    d742:	2b03      	cmp	r3, #3
    d744:	d00d      	beq.n	d762 <__gethex+0x364>
    d746:	2b01      	cmp	r3, #1
    d748:	d174      	bne.n	d834 <__gethex+0x436>
    d74a:	07a2      	lsls	r2, r4, #30
    d74c:	d572      	bpl.n	d834 <__gethex+0x436>
    d74e:	9a03      	ldr	r2, [sp, #12]
    d750:	6812      	ldr	r2, [r2, #0]
    d752:	4314      	orrs	r4, r2
    d754:	421c      	tst	r4, r3
    d756:	d107      	bne.n	d768 <__gethex+0x36a>
    d758:	e06c      	b.n	d834 <__gethex+0x436>
    d75a:	2301      	movs	r3, #1
    d75c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    d75e:	1a9b      	subs	r3, r3, r2
    d760:	9313      	str	r3, [sp, #76]	; 0x4c
    d762:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    d764:	2b00      	cmp	r3, #0
    d766:	d065      	beq.n	d834 <__gethex+0x436>
    d768:	692c      	ldr	r4, [r5, #16]
    d76a:	00a3      	lsls	r3, r4, #2
    d76c:	9303      	str	r3, [sp, #12]
    d76e:	1c2b      	adds	r3, r5, #0
    d770:	9a03      	ldr	r2, [sp, #12]
    d772:	3314      	adds	r3, #20
    d774:	1899      	adds	r1, r3, r2
    d776:	681a      	ldr	r2, [r3, #0]
    d778:	1c50      	adds	r0, r2, #1
    d77a:	d002      	beq.n	d782 <__gethex+0x384>
    d77c:	3201      	adds	r2, #1
    d77e:	601a      	str	r2, [r3, #0]
    d780:	e021      	b.n	d7c6 <__gethex+0x3c8>
    d782:	2200      	movs	r2, #0
    d784:	c304      	stmia	r3!, {r2}
    d786:	4299      	cmp	r1, r3
    d788:	d8f5      	bhi.n	d776 <__gethex+0x378>
    d78a:	68ab      	ldr	r3, [r5, #8]
    d78c:	429c      	cmp	r4, r3
    d78e:	db12      	blt.n	d7b6 <__gethex+0x3b8>
    d790:	686b      	ldr	r3, [r5, #4]
    d792:	9805      	ldr	r0, [sp, #20]
    d794:	1c59      	adds	r1, r3, #1
    d796:	f000 f93f 	bl	da18 <_Balloc>
    d79a:	1c29      	adds	r1, r5, #0
    d79c:	692b      	ldr	r3, [r5, #16]
    d79e:	9004      	str	r0, [sp, #16]
    d7a0:	1c9a      	adds	r2, r3, #2
    d7a2:	310c      	adds	r1, #12
    d7a4:	0092      	lsls	r2, r2, #2
    d7a6:	300c      	adds	r0, #12
    d7a8:	f7fc fad5 	bl	9d56 <memcpy>
    d7ac:	1c29      	adds	r1, r5, #0
    d7ae:	9805      	ldr	r0, [sp, #20]
    d7b0:	f000 f96a 	bl	da88 <_Bfree>
    d7b4:	9d04      	ldr	r5, [sp, #16]
    d7b6:	692b      	ldr	r3, [r5, #16]
    d7b8:	1c5a      	adds	r2, r3, #1
    d7ba:	612a      	str	r2, [r5, #16]
    d7bc:	2201      	movs	r2, #1
    d7be:	3304      	adds	r3, #4
    d7c0:	009b      	lsls	r3, r3, #2
    d7c2:	18eb      	adds	r3, r5, r3
    d7c4:	605a      	str	r2, [r3, #4]
    d7c6:	1c2b      	adds	r3, r5, #0
    d7c8:	3314      	adds	r3, #20
    d7ca:	2e02      	cmp	r6, #2
    d7cc:	d111      	bne.n	d7f2 <__gethex+0x3f4>
    d7ce:	9a02      	ldr	r2, [sp, #8]
    d7d0:	9901      	ldr	r1, [sp, #4]
    d7d2:	6812      	ldr	r2, [r2, #0]
    d7d4:	3a01      	subs	r2, #1
    d7d6:	4291      	cmp	r1, r2
    d7d8:	d12a      	bne.n	d830 <__gethex+0x432>
    d7da:	114a      	asrs	r2, r1, #5
    d7dc:	211f      	movs	r1, #31
    d7de:	9801      	ldr	r0, [sp, #4]
    d7e0:	0092      	lsls	r2, r2, #2
    d7e2:	4001      	ands	r1, r0
    d7e4:	2001      	movs	r0, #1
    d7e6:	1c04      	adds	r4, r0, #0
    d7e8:	408c      	lsls	r4, r1
    d7ea:	58d3      	ldr	r3, [r2, r3]
    d7ec:	4223      	tst	r3, r4
    d7ee:	d01f      	beq.n	d830 <__gethex+0x432>
    d7f0:	e00c      	b.n	d80c <__gethex+0x40e>
    d7f2:	692a      	ldr	r2, [r5, #16]
    d7f4:	42a2      	cmp	r2, r4
    d7f6:	dd0b      	ble.n	d810 <__gethex+0x412>
    d7f8:	1c28      	adds	r0, r5, #0
    d7fa:	2101      	movs	r1, #1
    d7fc:	f7ff fdb6 	bl	d36c <rshift>
    d800:	9b02      	ldr	r3, [sp, #8]
    d802:	3701      	adds	r7, #1
    d804:	689b      	ldr	r3, [r3, #8]
    d806:	429f      	cmp	r7, r3
    d808:	dd00      	ble.n	d80c <__gethex+0x40e>
    d80a:	e72b      	b.n	d664 <__gethex+0x266>
    d80c:	2601      	movs	r6, #1
    d80e:	e00f      	b.n	d830 <__gethex+0x432>
    d810:	241f      	movs	r4, #31
    d812:	9a01      	ldr	r2, [sp, #4]
    d814:	2601      	movs	r6, #1
    d816:	4022      	ands	r2, r4
    d818:	1e14      	subs	r4, r2, #0
    d81a:	d009      	beq.n	d830 <__gethex+0x432>
    d81c:	9a03      	ldr	r2, [sp, #12]
    d81e:	189b      	adds	r3, r3, r2
    d820:	3b04      	subs	r3, #4
    d822:	6818      	ldr	r0, [r3, #0]
    d824:	f000 f9c5 	bl	dbb2 <__hi0bits>
    d828:	2120      	movs	r1, #32
    d82a:	1b0c      	subs	r4, r1, r4
    d82c:	42a0      	cmp	r0, r4
    d82e:	dbe3      	blt.n	d7f8 <__gethex+0x3fa>
    d830:	2320      	movs	r3, #32
    d832:	e000      	b.n	d836 <__gethex+0x438>
    d834:	2310      	movs	r3, #16
    d836:	431e      	orrs	r6, r3
    d838:	1c30      	adds	r0, r6, #0
    d83a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d83c:	601d      	str	r5, [r3, #0]
    d83e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d840:	601f      	str	r7, [r3, #0]
    d842:	b00d      	add	sp, #52	; 0x34
    d844:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000d846 <L_shift>:
    d846:	2308      	movs	r3, #8
    d848:	b570      	push	{r4, r5, r6, lr}
    d84a:	2520      	movs	r5, #32
    d84c:	1a9a      	subs	r2, r3, r2
    d84e:	0092      	lsls	r2, r2, #2
    d850:	1aad      	subs	r5, r5, r2
    d852:	6843      	ldr	r3, [r0, #4]
    d854:	6806      	ldr	r6, [r0, #0]
    d856:	1c1c      	adds	r4, r3, #0
    d858:	40ac      	lsls	r4, r5
    d85a:	40d3      	lsrs	r3, r2
    d85c:	4334      	orrs	r4, r6
    d85e:	6004      	str	r4, [r0, #0]
    d860:	6043      	str	r3, [r0, #4]
    d862:	3004      	adds	r0, #4
    d864:	4288      	cmp	r0, r1
    d866:	d3f4      	bcc.n	d852 <L_shift+0xc>
    d868:	bd70      	pop	{r4, r5, r6, pc}

0000d86a <__hexnan>:
    d86a:	b5f0      	push	{r4, r5, r6, r7, lr}
    d86c:	b089      	sub	sp, #36	; 0x24
    d86e:	9200      	str	r2, [sp, #0]
    d870:	680a      	ldr	r2, [r1, #0]
    d872:	9900      	ldr	r1, [sp, #0]
    d874:	1153      	asrs	r3, r2, #5
    d876:	009b      	lsls	r3, r3, #2
    d878:	18cb      	adds	r3, r1, r3
    d87a:	9302      	str	r3, [sp, #8]
    d87c:	231f      	movs	r3, #31
    d87e:	401a      	ands	r2, r3
    d880:	9007      	str	r0, [sp, #28]
    d882:	9205      	str	r2, [sp, #20]
    d884:	d002      	beq.n	d88c <__hexnan+0x22>
    d886:	9b02      	ldr	r3, [sp, #8]
    d888:	3304      	adds	r3, #4
    d88a:	9302      	str	r3, [sp, #8]
    d88c:	9b02      	ldr	r3, [sp, #8]
    d88e:	2500      	movs	r5, #0
    d890:	1f1e      	subs	r6, r3, #4
    d892:	1c37      	adds	r7, r6, #0
    d894:	1c34      	adds	r4, r6, #0
    d896:	9b07      	ldr	r3, [sp, #28]
    d898:	6035      	str	r5, [r6, #0]
    d89a:	681b      	ldr	r3, [r3, #0]
    d89c:	9506      	str	r5, [sp, #24]
    d89e:	9303      	str	r3, [sp, #12]
    d8a0:	9501      	str	r5, [sp, #4]
    d8a2:	9b03      	ldr	r3, [sp, #12]
    d8a4:	3301      	adds	r3, #1
    d8a6:	9303      	str	r3, [sp, #12]
    d8a8:	781b      	ldrb	r3, [r3, #0]
    d8aa:	9304      	str	r3, [sp, #16]
    d8ac:	2b00      	cmp	r3, #0
    d8ae:	d03b      	beq.n	d928 <__hexnan+0xbe>
    d8b0:	9804      	ldr	r0, [sp, #16]
    d8b2:	f7ff fd8f 	bl	d3d4 <__hexdig_fun>
    d8b6:	2800      	cmp	r0, #0
    d8b8:	d122      	bne.n	d900 <__hexnan+0x96>
    d8ba:	9b04      	ldr	r3, [sp, #16]
    d8bc:	2b20      	cmp	r3, #32
    d8be:	d817      	bhi.n	d8f0 <__hexnan+0x86>
    d8c0:	9b06      	ldr	r3, [sp, #24]
    d8c2:	9a01      	ldr	r2, [sp, #4]
    d8c4:	4293      	cmp	r3, r2
    d8c6:	daec      	bge.n	d8a2 <__hexnan+0x38>
    d8c8:	42bc      	cmp	r4, r7
    d8ca:	d206      	bcs.n	d8da <__hexnan+0x70>
    d8cc:	2d07      	cmp	r5, #7
    d8ce:	dc04      	bgt.n	d8da <__hexnan+0x70>
    d8d0:	1c20      	adds	r0, r4, #0
    d8d2:	1c39      	adds	r1, r7, #0
    d8d4:	1c2a      	adds	r2, r5, #0
    d8d6:	f7ff ffb6 	bl	d846 <L_shift>
    d8da:	9b00      	ldr	r3, [sp, #0]
    d8dc:	2508      	movs	r5, #8
    d8de:	429c      	cmp	r4, r3
    d8e0:	d9df      	bls.n	d8a2 <__hexnan+0x38>
    d8e2:	2500      	movs	r5, #0
    d8e4:	9b01      	ldr	r3, [sp, #4]
    d8e6:	1f27      	subs	r7, r4, #4
    d8e8:	603d      	str	r5, [r7, #0]
    d8ea:	9306      	str	r3, [sp, #24]
    d8ec:	1c3c      	adds	r4, r7, #0
    d8ee:	e7d8      	b.n	d8a2 <__hexnan+0x38>
    d8f0:	9b04      	ldr	r3, [sp, #16]
    d8f2:	2b29      	cmp	r3, #41	; 0x29
    d8f4:	d14c      	bne.n	d990 <__hexnan+0x126>
    d8f6:	9b03      	ldr	r3, [sp, #12]
    d8f8:	9a07      	ldr	r2, [sp, #28]
    d8fa:	3301      	adds	r3, #1
    d8fc:	6013      	str	r3, [r2, #0]
    d8fe:	e013      	b.n	d928 <__hexnan+0xbe>
    d900:	9b01      	ldr	r3, [sp, #4]
    d902:	3501      	adds	r5, #1
    d904:	3301      	adds	r3, #1
    d906:	9301      	str	r3, [sp, #4]
    d908:	2d08      	cmp	r5, #8
    d90a:	dd06      	ble.n	d91a <__hexnan+0xb0>
    d90c:	9b00      	ldr	r3, [sp, #0]
    d90e:	429c      	cmp	r4, r3
    d910:	d9c7      	bls.n	d8a2 <__hexnan+0x38>
    d912:	2300      	movs	r3, #0
    d914:	2501      	movs	r5, #1
    d916:	3c04      	subs	r4, #4
    d918:	6023      	str	r3, [r4, #0]
    d91a:	6823      	ldr	r3, [r4, #0]
    d91c:	011a      	lsls	r2, r3, #4
    d91e:	230f      	movs	r3, #15
    d920:	4018      	ands	r0, r3
    d922:	4310      	orrs	r0, r2
    d924:	6020      	str	r0, [r4, #0]
    d926:	e7bc      	b.n	d8a2 <__hexnan+0x38>
    d928:	9b01      	ldr	r3, [sp, #4]
    d92a:	2b00      	cmp	r3, #0
    d92c:	d030      	beq.n	d990 <__hexnan+0x126>
    d92e:	42bc      	cmp	r4, r7
    d930:	d206      	bcs.n	d940 <__hexnan+0xd6>
    d932:	2d07      	cmp	r5, #7
    d934:	dc04      	bgt.n	d940 <__hexnan+0xd6>
    d936:	1c20      	adds	r0, r4, #0
    d938:	1c39      	adds	r1, r7, #0
    d93a:	1c2a      	adds	r2, r5, #0
    d93c:	f7ff ff83 	bl	d846 <L_shift>
    d940:	9b00      	ldr	r3, [sp, #0]
    d942:	429c      	cmp	r4, r3
    d944:	d90a      	bls.n	d95c <__hexnan+0xf2>
    d946:	3304      	adds	r3, #4
    d948:	cc02      	ldmia	r4!, {r1}
    d94a:	1f1a      	subs	r2, r3, #4
    d94c:	6011      	str	r1, [r2, #0]
    d94e:	42a6      	cmp	r6, r4
    d950:	d2f9      	bcs.n	d946 <__hexnan+0xdc>
    d952:	2200      	movs	r2, #0
    d954:	c304      	stmia	r3!, {r2}
    d956:	429e      	cmp	r6, r3
    d958:	d2fb      	bcs.n	d952 <__hexnan+0xe8>
    d95a:	e00e      	b.n	d97a <__hexnan+0x110>
    d95c:	9b05      	ldr	r3, [sp, #20]
    d95e:	2b00      	cmp	r3, #0
    d960:	d00b      	beq.n	d97a <__hexnan+0x110>
    d962:	2220      	movs	r2, #32
    d964:	9905      	ldr	r1, [sp, #20]
    d966:	9b02      	ldr	r3, [sp, #8]
    d968:	1a52      	subs	r2, r2, r1
    d96a:	2101      	movs	r1, #1
    d96c:	4249      	negs	r1, r1
    d96e:	40d1      	lsrs	r1, r2
    d970:	1c0a      	adds	r2, r1, #0
    d972:	3b04      	subs	r3, #4
    d974:	6819      	ldr	r1, [r3, #0]
    d976:	400a      	ands	r2, r1
    d978:	601a      	str	r2, [r3, #0]
    d97a:	6833      	ldr	r3, [r6, #0]
    d97c:	2b00      	cmp	r3, #0
    d97e:	d109      	bne.n	d994 <__hexnan+0x12a>
    d980:	9b00      	ldr	r3, [sp, #0]
    d982:	429e      	cmp	r6, r3
    d984:	d102      	bne.n	d98c <__hexnan+0x122>
    d986:	2301      	movs	r3, #1
    d988:	6033      	str	r3, [r6, #0]
    d98a:	e003      	b.n	d994 <__hexnan+0x12a>
    d98c:	3e04      	subs	r6, #4
    d98e:	e7f4      	b.n	d97a <__hexnan+0x110>
    d990:	2004      	movs	r0, #4
    d992:	e000      	b.n	d996 <__hexnan+0x12c>
    d994:	2005      	movs	r0, #5
    d996:	b009      	add	sp, #36	; 0x24
    d998:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0000d99c <_isatty_r>:
    d99c:	b538      	push	{r3, r4, r5, lr}
    d99e:	2300      	movs	r3, #0
    d9a0:	4c06      	ldr	r4, [pc, #24]	; (d9bc <_isatty_r+0x20>)
    d9a2:	1c05      	adds	r5, r0, #0
    d9a4:	1c08      	adds	r0, r1, #0
    d9a6:	6023      	str	r3, [r4, #0]
    d9a8:	f7f6 fa1e 	bl	3de8 <_isatty>
    d9ac:	1c43      	adds	r3, r0, #1
    d9ae:	d103      	bne.n	d9b8 <_isatty_r+0x1c>
    d9b0:	6823      	ldr	r3, [r4, #0]
    d9b2:	2b00      	cmp	r3, #0
    d9b4:	d000      	beq.n	d9b8 <_isatty_r+0x1c>
    d9b6:	602b      	str	r3, [r5, #0]
    d9b8:	bd38      	pop	{r3, r4, r5, pc}
    d9ba:	46c0      	nop			; (mov r8, r8)
    d9bc:	200047c8 	.word	0x200047c8

0000d9c0 <_localeconv_r>:
    d9c0:	4800      	ldr	r0, [pc, #0]	; (d9c4 <_localeconv_r+0x4>)
    d9c2:	4770      	bx	lr
    d9c4:	2000013c 	.word	0x2000013c

0000d9c8 <_lseek_r>:
    d9c8:	b538      	push	{r3, r4, r5, lr}
    d9ca:	1c05      	adds	r5, r0, #0
    d9cc:	2000      	movs	r0, #0
    d9ce:	4c07      	ldr	r4, [pc, #28]	; (d9ec <_lseek_r+0x24>)
    d9d0:	6020      	str	r0, [r4, #0]
    d9d2:	1c08      	adds	r0, r1, #0
    d9d4:	1c11      	adds	r1, r2, #0
    d9d6:	1c1a      	adds	r2, r3, #0
    d9d8:	f7f6 fa1a 	bl	3e10 <_lseek>
    d9dc:	1c43      	adds	r3, r0, #1
    d9de:	d103      	bne.n	d9e8 <_lseek_r+0x20>
    d9e0:	6823      	ldr	r3, [r4, #0]
    d9e2:	2b00      	cmp	r3, #0
    d9e4:	d000      	beq.n	d9e8 <_lseek_r+0x20>
    d9e6:	602b      	str	r3, [r5, #0]
    d9e8:	bd38      	pop	{r3, r4, r5, pc}
    d9ea:	46c0      	nop			; (mov r8, r8)
    d9ec:	200047c8 	.word	0x200047c8

0000d9f0 <memmove>:
    d9f0:	b510      	push	{r4, lr}
    d9f2:	4281      	cmp	r1, r0
    d9f4:	d208      	bcs.n	da08 <memmove+0x18>
    d9f6:	188b      	adds	r3, r1, r2
    d9f8:	4298      	cmp	r0, r3
    d9fa:	d205      	bcs.n	da08 <memmove+0x18>
    d9fc:	1a9b      	subs	r3, r3, r2
    d9fe:	3a01      	subs	r2, #1
    da00:	d309      	bcc.n	da16 <memmove+0x26>
    da02:	5c99      	ldrb	r1, [r3, r2]
    da04:	5481      	strb	r1, [r0, r2]
    da06:	e7fa      	b.n	d9fe <memmove+0xe>
    da08:	2300      	movs	r3, #0
    da0a:	4293      	cmp	r3, r2
    da0c:	d003      	beq.n	da16 <memmove+0x26>
    da0e:	5ccc      	ldrb	r4, [r1, r3]
    da10:	54c4      	strb	r4, [r0, r3]
    da12:	3301      	adds	r3, #1
    da14:	e7f9      	b.n	da0a <memmove+0x1a>
    da16:	bd10      	pop	{r4, pc}

0000da18 <_Balloc>:
    da18:	b570      	push	{r4, r5, r6, lr}
    da1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
    da1c:	1c04      	adds	r4, r0, #0
    da1e:	1c0d      	adds	r5, r1, #0
    da20:	2e00      	cmp	r6, #0
    da22:	d107      	bne.n	da34 <_Balloc+0x1c>
    da24:	2010      	movs	r0, #16
    da26:	f7fc f977 	bl	9d18 <malloc>
    da2a:	6260      	str	r0, [r4, #36]	; 0x24
    da2c:	6046      	str	r6, [r0, #4]
    da2e:	6086      	str	r6, [r0, #8]
    da30:	6006      	str	r6, [r0, #0]
    da32:	60c6      	str	r6, [r0, #12]
    da34:	6a66      	ldr	r6, [r4, #36]	; 0x24
    da36:	68f3      	ldr	r3, [r6, #12]
    da38:	2b00      	cmp	r3, #0
    da3a:	d009      	beq.n	da50 <_Balloc+0x38>
    da3c:	6a62      	ldr	r2, [r4, #36]	; 0x24
    da3e:	00ab      	lsls	r3, r5, #2
    da40:	68d2      	ldr	r2, [r2, #12]
    da42:	18d3      	adds	r3, r2, r3
    da44:	6818      	ldr	r0, [r3, #0]
    da46:	2800      	cmp	r0, #0
    da48:	d00e      	beq.n	da68 <_Balloc+0x50>
    da4a:	6802      	ldr	r2, [r0, #0]
    da4c:	601a      	str	r2, [r3, #0]
    da4e:	e017      	b.n	da80 <_Balloc+0x68>
    da50:	1c20      	adds	r0, r4, #0
    da52:	2104      	movs	r1, #4
    da54:	2221      	movs	r2, #33	; 0x21
    da56:	f000 fbe2 	bl	e21e <_calloc_r>
    da5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    da5c:	60f0      	str	r0, [r6, #12]
    da5e:	68db      	ldr	r3, [r3, #12]
    da60:	2b00      	cmp	r3, #0
    da62:	d1eb      	bne.n	da3c <_Balloc+0x24>
    da64:	2000      	movs	r0, #0
    da66:	e00e      	b.n	da86 <_Balloc+0x6e>
    da68:	2101      	movs	r1, #1
    da6a:	1c0e      	adds	r6, r1, #0
    da6c:	40ae      	lsls	r6, r5
    da6e:	1d72      	adds	r2, r6, #5
    da70:	0092      	lsls	r2, r2, #2
    da72:	1c20      	adds	r0, r4, #0
    da74:	f000 fbd3 	bl	e21e <_calloc_r>
    da78:	2800      	cmp	r0, #0
    da7a:	d0f3      	beq.n	da64 <_Balloc+0x4c>
    da7c:	6045      	str	r5, [r0, #4]
    da7e:	6086      	str	r6, [r0, #8]
    da80:	2300      	movs	r3, #0
    da82:	6103      	str	r3, [r0, #16]
    da84:	60c3      	str	r3, [r0, #12]
    da86:	bd70      	pop	{r4, r5, r6, pc}

0000da88 <_Bfree>:
    da88:	b570      	push	{r4, r5, r6, lr}
    da8a:	6a45      	ldr	r5, [r0, #36]	; 0x24
    da8c:	1c06      	adds	r6, r0, #0
    da8e:	1c0c      	adds	r4, r1, #0
    da90:	2d00      	cmp	r5, #0
    da92:	d107      	bne.n	daa4 <_Bfree+0x1c>
    da94:	2010      	movs	r0, #16
    da96:	f7fc f93f 	bl	9d18 <malloc>
    da9a:	6270      	str	r0, [r6, #36]	; 0x24
    da9c:	6045      	str	r5, [r0, #4]
    da9e:	6085      	str	r5, [r0, #8]
    daa0:	6005      	str	r5, [r0, #0]
    daa2:	60c5      	str	r5, [r0, #12]
    daa4:	2c00      	cmp	r4, #0
    daa6:	d007      	beq.n	dab8 <_Bfree+0x30>
    daa8:	6a72      	ldr	r2, [r6, #36]	; 0x24
    daaa:	6863      	ldr	r3, [r4, #4]
    daac:	68d2      	ldr	r2, [r2, #12]
    daae:	009b      	lsls	r3, r3, #2
    dab0:	18d3      	adds	r3, r2, r3
    dab2:	681a      	ldr	r2, [r3, #0]
    dab4:	6022      	str	r2, [r4, #0]
    dab6:	601c      	str	r4, [r3, #0]
    dab8:	bd70      	pop	{r4, r5, r6, pc}

0000daba <__multadd>:
    daba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    dabc:	1c1e      	adds	r6, r3, #0
    dabe:	2314      	movs	r3, #20
    dac0:	469c      	mov	ip, r3
    dac2:	1c07      	adds	r7, r0, #0
    dac4:	1c0c      	adds	r4, r1, #0
    dac6:	2000      	movs	r0, #0
    dac8:	690d      	ldr	r5, [r1, #16]
    daca:	448c      	add	ip, r1
    dacc:	4663      	mov	r3, ip
    dace:	8819      	ldrh	r1, [r3, #0]
    dad0:	681b      	ldr	r3, [r3, #0]
    dad2:	4351      	muls	r1, r2
    dad4:	0c1b      	lsrs	r3, r3, #16
    dad6:	4353      	muls	r3, r2
    dad8:	1989      	adds	r1, r1, r6
    dada:	0c0e      	lsrs	r6, r1, #16
    dadc:	18f3      	adds	r3, r6, r3
    dade:	b289      	uxth	r1, r1
    dae0:	0c1e      	lsrs	r6, r3, #16
    dae2:	041b      	lsls	r3, r3, #16
    dae4:	185b      	adds	r3, r3, r1
    dae6:	4661      	mov	r1, ip
    dae8:	3001      	adds	r0, #1
    daea:	c108      	stmia	r1!, {r3}
    daec:	468c      	mov	ip, r1
    daee:	42a8      	cmp	r0, r5
    daf0:	dbec      	blt.n	dacc <__multadd+0x12>
    daf2:	2e00      	cmp	r6, #0
    daf4:	d01b      	beq.n	db2e <__multadd+0x74>
    daf6:	68a3      	ldr	r3, [r4, #8]
    daf8:	429d      	cmp	r5, r3
    dafa:	db12      	blt.n	db22 <__multadd+0x68>
    dafc:	6863      	ldr	r3, [r4, #4]
    dafe:	1c38      	adds	r0, r7, #0
    db00:	1c59      	adds	r1, r3, #1
    db02:	f7ff ff89 	bl	da18 <_Balloc>
    db06:	1c21      	adds	r1, r4, #0
    db08:	6923      	ldr	r3, [r4, #16]
    db0a:	9001      	str	r0, [sp, #4]
    db0c:	1c9a      	adds	r2, r3, #2
    db0e:	310c      	adds	r1, #12
    db10:	0092      	lsls	r2, r2, #2
    db12:	300c      	adds	r0, #12
    db14:	f7fc f91f 	bl	9d56 <memcpy>
    db18:	1c21      	adds	r1, r4, #0
    db1a:	1c38      	adds	r0, r7, #0
    db1c:	f7ff ffb4 	bl	da88 <_Bfree>
    db20:	9c01      	ldr	r4, [sp, #4]
    db22:	1d2b      	adds	r3, r5, #4
    db24:	009b      	lsls	r3, r3, #2
    db26:	18e3      	adds	r3, r4, r3
    db28:	3501      	adds	r5, #1
    db2a:	605e      	str	r6, [r3, #4]
    db2c:	6125      	str	r5, [r4, #16]
    db2e:	1c20      	adds	r0, r4, #0
    db30:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000db32 <__s2b>:
    db32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    db34:	1c06      	adds	r6, r0, #0
    db36:	1c18      	adds	r0, r3, #0
    db38:	1c0c      	adds	r4, r1, #0
    db3a:	3008      	adds	r0, #8
    db3c:	2109      	movs	r1, #9
    db3e:	9301      	str	r3, [sp, #4]
    db40:	1c15      	adds	r5, r2, #0
    db42:	f7f8 fd87 	bl	6654 <__aeabi_idiv>
    db46:	2301      	movs	r3, #1
    db48:	2100      	movs	r1, #0
    db4a:	4298      	cmp	r0, r3
    db4c:	dd02      	ble.n	db54 <__s2b+0x22>
    db4e:	005b      	lsls	r3, r3, #1
    db50:	3101      	adds	r1, #1
    db52:	e7fa      	b.n	db4a <__s2b+0x18>
    db54:	1c30      	adds	r0, r6, #0
    db56:	f7ff ff5f 	bl	da18 <_Balloc>
    db5a:	9b08      	ldr	r3, [sp, #32]
    db5c:	1c01      	adds	r1, r0, #0
    db5e:	6143      	str	r3, [r0, #20]
    db60:	2301      	movs	r3, #1
    db62:	6103      	str	r3, [r0, #16]
    db64:	2d09      	cmp	r5, #9
    db66:	dd12      	ble.n	db8e <__s2b+0x5c>
    db68:	1c23      	adds	r3, r4, #0
    db6a:	3309      	adds	r3, #9
    db6c:	1c1f      	adds	r7, r3, #0
    db6e:	9300      	str	r3, [sp, #0]
    db70:	1964      	adds	r4, r4, r5
    db72:	783b      	ldrb	r3, [r7, #0]
    db74:	1c30      	adds	r0, r6, #0
    db76:	3b30      	subs	r3, #48	; 0x30
    db78:	220a      	movs	r2, #10
    db7a:	f7ff ff9e 	bl	daba <__multadd>
    db7e:	3701      	adds	r7, #1
    db80:	1c01      	adds	r1, r0, #0
    db82:	42a7      	cmp	r7, r4
    db84:	d1f5      	bne.n	db72 <__s2b+0x40>
    db86:	9b00      	ldr	r3, [sp, #0]
    db88:	195c      	adds	r4, r3, r5
    db8a:	3c08      	subs	r4, #8
    db8c:	e001      	b.n	db92 <__s2b+0x60>
    db8e:	2509      	movs	r5, #9
    db90:	340a      	adds	r4, #10
    db92:	1c2f      	adds	r7, r5, #0
    db94:	9b01      	ldr	r3, [sp, #4]
    db96:	429f      	cmp	r7, r3
    db98:	da09      	bge.n	dbae <__s2b+0x7c>
    db9a:	1b63      	subs	r3, r4, r5
    db9c:	5ddb      	ldrb	r3, [r3, r7]
    db9e:	1c30      	adds	r0, r6, #0
    dba0:	3b30      	subs	r3, #48	; 0x30
    dba2:	220a      	movs	r2, #10
    dba4:	f7ff ff89 	bl	daba <__multadd>
    dba8:	3701      	adds	r7, #1
    dbaa:	1c01      	adds	r1, r0, #0
    dbac:	e7f2      	b.n	db94 <__s2b+0x62>
    dbae:	1c08      	adds	r0, r1, #0
    dbb0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000dbb2 <__hi0bits>:
    dbb2:	2200      	movs	r2, #0
    dbb4:	1c03      	adds	r3, r0, #0
    dbb6:	0c01      	lsrs	r1, r0, #16
    dbb8:	4291      	cmp	r1, r2
    dbba:	d101      	bne.n	dbc0 <__hi0bits+0xe>
    dbbc:	0403      	lsls	r3, r0, #16
    dbbe:	3210      	adds	r2, #16
    dbc0:	0e19      	lsrs	r1, r3, #24
    dbc2:	d101      	bne.n	dbc8 <__hi0bits+0x16>
    dbc4:	3208      	adds	r2, #8
    dbc6:	021b      	lsls	r3, r3, #8
    dbc8:	0f19      	lsrs	r1, r3, #28
    dbca:	d101      	bne.n	dbd0 <__hi0bits+0x1e>
    dbcc:	3204      	adds	r2, #4
    dbce:	011b      	lsls	r3, r3, #4
    dbd0:	0f99      	lsrs	r1, r3, #30
    dbd2:	d101      	bne.n	dbd8 <__hi0bits+0x26>
    dbd4:	3202      	adds	r2, #2
    dbd6:	009b      	lsls	r3, r3, #2
    dbd8:	1c10      	adds	r0, r2, #0
    dbda:	2b00      	cmp	r3, #0
    dbdc:	db03      	blt.n	dbe6 <__hi0bits+0x34>
    dbde:	2020      	movs	r0, #32
    dbe0:	005b      	lsls	r3, r3, #1
    dbe2:	d500      	bpl.n	dbe6 <__hi0bits+0x34>
    dbe4:	1c50      	adds	r0, r2, #1
    dbe6:	4770      	bx	lr

0000dbe8 <__lo0bits>:
    dbe8:	2207      	movs	r2, #7
    dbea:	6803      	ldr	r3, [r0, #0]
    dbec:	b510      	push	{r4, lr}
    dbee:	1c01      	adds	r1, r0, #0
    dbf0:	401a      	ands	r2, r3
    dbf2:	d00c      	beq.n	dc0e <__lo0bits+0x26>
    dbf4:	2401      	movs	r4, #1
    dbf6:	2000      	movs	r0, #0
    dbf8:	4223      	tst	r3, r4
    dbfa:	d123      	bne.n	dc44 <__lo0bits+0x5c>
    dbfc:	2202      	movs	r2, #2
    dbfe:	4213      	tst	r3, r2
    dc00:	d003      	beq.n	dc0a <__lo0bits+0x22>
    dc02:	40e3      	lsrs	r3, r4
    dc04:	1c20      	adds	r0, r4, #0
    dc06:	600b      	str	r3, [r1, #0]
    dc08:	e01c      	b.n	dc44 <__lo0bits+0x5c>
    dc0a:	089b      	lsrs	r3, r3, #2
    dc0c:	e018      	b.n	dc40 <__lo0bits+0x58>
    dc0e:	b298      	uxth	r0, r3
    dc10:	2800      	cmp	r0, #0
    dc12:	d101      	bne.n	dc18 <__lo0bits+0x30>
    dc14:	2210      	movs	r2, #16
    dc16:	0c1b      	lsrs	r3, r3, #16
    dc18:	b2d8      	uxtb	r0, r3
    dc1a:	2800      	cmp	r0, #0
    dc1c:	d101      	bne.n	dc22 <__lo0bits+0x3a>
    dc1e:	3208      	adds	r2, #8
    dc20:	0a1b      	lsrs	r3, r3, #8
    dc22:	0718      	lsls	r0, r3, #28
    dc24:	d101      	bne.n	dc2a <__lo0bits+0x42>
    dc26:	3204      	adds	r2, #4
    dc28:	091b      	lsrs	r3, r3, #4
    dc2a:	0798      	lsls	r0, r3, #30
    dc2c:	d101      	bne.n	dc32 <__lo0bits+0x4a>
    dc2e:	3202      	adds	r2, #2
    dc30:	089b      	lsrs	r3, r3, #2
    dc32:	07d8      	lsls	r0, r3, #31
    dc34:	d404      	bmi.n	dc40 <__lo0bits+0x58>
    dc36:	085b      	lsrs	r3, r3, #1
    dc38:	2020      	movs	r0, #32
    dc3a:	2b00      	cmp	r3, #0
    dc3c:	d002      	beq.n	dc44 <__lo0bits+0x5c>
    dc3e:	3201      	adds	r2, #1
    dc40:	1c10      	adds	r0, r2, #0
    dc42:	600b      	str	r3, [r1, #0]
    dc44:	bd10      	pop	{r4, pc}

0000dc46 <__i2b>:
    dc46:	b510      	push	{r4, lr}
    dc48:	1c0c      	adds	r4, r1, #0
    dc4a:	2101      	movs	r1, #1
    dc4c:	f7ff fee4 	bl	da18 <_Balloc>
    dc50:	2301      	movs	r3, #1
    dc52:	6144      	str	r4, [r0, #20]
    dc54:	6103      	str	r3, [r0, #16]
    dc56:	bd10      	pop	{r4, pc}

0000dc58 <__multiply>:
    dc58:	b5f0      	push	{r4, r5, r6, r7, lr}
    dc5a:	690b      	ldr	r3, [r1, #16]
    dc5c:	1c14      	adds	r4, r2, #0
    dc5e:	6912      	ldr	r2, [r2, #16]
    dc60:	b089      	sub	sp, #36	; 0x24
    dc62:	1c0d      	adds	r5, r1, #0
    dc64:	4293      	cmp	r3, r2
    dc66:	da01      	bge.n	dc6c <__multiply+0x14>
    dc68:	1c25      	adds	r5, r4, #0
    dc6a:	1c0c      	adds	r4, r1, #0
    dc6c:	692f      	ldr	r7, [r5, #16]
    dc6e:	6926      	ldr	r6, [r4, #16]
    dc70:	68aa      	ldr	r2, [r5, #8]
    dc72:	19bb      	adds	r3, r7, r6
    dc74:	6869      	ldr	r1, [r5, #4]
    dc76:	9300      	str	r3, [sp, #0]
    dc78:	4293      	cmp	r3, r2
    dc7a:	dd00      	ble.n	dc7e <__multiply+0x26>
    dc7c:	3101      	adds	r1, #1
    dc7e:	f7ff fecb 	bl	da18 <_Balloc>
    dc82:	1c01      	adds	r1, r0, #0
    dc84:	9b00      	ldr	r3, [sp, #0]
    dc86:	3114      	adds	r1, #20
    dc88:	4684      	mov	ip, r0
    dc8a:	0098      	lsls	r0, r3, #2
    dc8c:	1c0b      	adds	r3, r1, #0
    dc8e:	1808      	adds	r0, r1, r0
    dc90:	4283      	cmp	r3, r0
    dc92:	d202      	bcs.n	dc9a <__multiply+0x42>
    dc94:	2200      	movs	r2, #0
    dc96:	c304      	stmia	r3!, {r2}
    dc98:	e7fa      	b.n	dc90 <__multiply+0x38>
    dc9a:	3514      	adds	r5, #20
    dc9c:	00bf      	lsls	r7, r7, #2
    dc9e:	19eb      	adds	r3, r5, r7
    dca0:	3414      	adds	r4, #20
    dca2:	00b6      	lsls	r6, r6, #2
    dca4:	9304      	str	r3, [sp, #16]
    dca6:	19a3      	adds	r3, r4, r6
    dca8:	9502      	str	r5, [sp, #8]
    dcaa:	9306      	str	r3, [sp, #24]
    dcac:	9b06      	ldr	r3, [sp, #24]
    dcae:	429c      	cmp	r4, r3
    dcb0:	d256      	bcs.n	dd60 <__multiply+0x108>
    dcb2:	8823      	ldrh	r3, [r4, #0]
    dcb4:	9303      	str	r3, [sp, #12]
    dcb6:	2b00      	cmp	r3, #0
    dcb8:	d022      	beq.n	dd00 <__multiply+0xa8>
    dcba:	1c0e      	adds	r6, r1, #0
    dcbc:	2700      	movs	r7, #0
    dcbe:	9b02      	ldr	r3, [sp, #8]
    dcc0:	9301      	str	r3, [sp, #4]
    dcc2:	9b01      	ldr	r3, [sp, #4]
    dcc4:	9d03      	ldr	r5, [sp, #12]
    dcc6:	cb04      	ldmia	r3!, {r2}
    dcc8:	9605      	str	r6, [sp, #20]
    dcca:	9301      	str	r3, [sp, #4]
    dccc:	8833      	ldrh	r3, [r6, #0]
    dcce:	9307      	str	r3, [sp, #28]
    dcd0:	b293      	uxth	r3, r2
    dcd2:	436b      	muls	r3, r5
    dcd4:	9d07      	ldr	r5, [sp, #28]
    dcd6:	0c12      	lsrs	r2, r2, #16
    dcd8:	18eb      	adds	r3, r5, r3
    dcda:	6835      	ldr	r5, [r6, #0]
    dcdc:	19db      	adds	r3, r3, r7
    dcde:	0c2f      	lsrs	r7, r5, #16
    dce0:	9d03      	ldr	r5, [sp, #12]
    dce2:	436a      	muls	r2, r5
    dce4:	18ba      	adds	r2, r7, r2
    dce6:	0c1f      	lsrs	r7, r3, #16
    dce8:	19d2      	adds	r2, r2, r7
    dcea:	0c17      	lsrs	r7, r2, #16
    dcec:	b29b      	uxth	r3, r3
    dcee:	0412      	lsls	r2, r2, #16
    dcf0:	4313      	orrs	r3, r2
    dcf2:	c608      	stmia	r6!, {r3}
    dcf4:	9a01      	ldr	r2, [sp, #4]
    dcf6:	9b04      	ldr	r3, [sp, #16]
    dcf8:	429a      	cmp	r2, r3
    dcfa:	d3e2      	bcc.n	dcc2 <__multiply+0x6a>
    dcfc:	9b05      	ldr	r3, [sp, #20]
    dcfe:	605f      	str	r7, [r3, #4]
    dd00:	6823      	ldr	r3, [r4, #0]
    dd02:	0c1b      	lsrs	r3, r3, #16
    dd04:	9301      	str	r3, [sp, #4]
    dd06:	d021      	beq.n	dd4c <__multiply+0xf4>
    dd08:	2200      	movs	r2, #0
    dd0a:	1c0d      	adds	r5, r1, #0
    dd0c:	680b      	ldr	r3, [r1, #0]
    dd0e:	9f02      	ldr	r7, [sp, #8]
    dd10:	9203      	str	r2, [sp, #12]
    dd12:	883e      	ldrh	r6, [r7, #0]
    dd14:	9a01      	ldr	r2, [sp, #4]
    dd16:	b29b      	uxth	r3, r3
    dd18:	4356      	muls	r6, r2
    dd1a:	682a      	ldr	r2, [r5, #0]
    dd1c:	9505      	str	r5, [sp, #20]
    dd1e:	0c12      	lsrs	r2, r2, #16
    dd20:	18b2      	adds	r2, r6, r2
    dd22:	9e03      	ldr	r6, [sp, #12]
    dd24:	1992      	adds	r2, r2, r6
    dd26:	0416      	lsls	r6, r2, #16
    dd28:	4333      	orrs	r3, r6
    dd2a:	602b      	str	r3, [r5, #0]
    dd2c:	cf08      	ldmia	r7!, {r3}
    dd2e:	9e01      	ldr	r6, [sp, #4]
    dd30:	0c1b      	lsrs	r3, r3, #16
    dd32:	4373      	muls	r3, r6
    dd34:	88ae      	ldrh	r6, [r5, #4]
    dd36:	0c12      	lsrs	r2, r2, #16
    dd38:	199b      	adds	r3, r3, r6
    dd3a:	189b      	adds	r3, r3, r2
    dd3c:	0c1a      	lsrs	r2, r3, #16
    dd3e:	9203      	str	r2, [sp, #12]
    dd40:	9a04      	ldr	r2, [sp, #16]
    dd42:	3504      	adds	r5, #4
    dd44:	42ba      	cmp	r2, r7
    dd46:	d8e4      	bhi.n	dd12 <__multiply+0xba>
    dd48:	9a05      	ldr	r2, [sp, #20]
    dd4a:	6053      	str	r3, [r2, #4]
    dd4c:	3404      	adds	r4, #4
    dd4e:	3104      	adds	r1, #4
    dd50:	e7ac      	b.n	dcac <__multiply+0x54>
    dd52:	3804      	subs	r0, #4
    dd54:	6803      	ldr	r3, [r0, #0]
    dd56:	2b00      	cmp	r3, #0
    dd58:	d105      	bne.n	dd66 <__multiply+0x10e>
    dd5a:	9b00      	ldr	r3, [sp, #0]
    dd5c:	3b01      	subs	r3, #1
    dd5e:	9300      	str	r3, [sp, #0]
    dd60:	9b00      	ldr	r3, [sp, #0]
    dd62:	2b00      	cmp	r3, #0
    dd64:	dcf5      	bgt.n	dd52 <__multiply+0xfa>
    dd66:	4663      	mov	r3, ip
    dd68:	4660      	mov	r0, ip
    dd6a:	9a00      	ldr	r2, [sp, #0]
    dd6c:	611a      	str	r2, [r3, #16]
    dd6e:	b009      	add	sp, #36	; 0x24
    dd70:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0000dd74 <__pow5mult>:
    dd74:	2303      	movs	r3, #3
    dd76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    dd78:	4013      	ands	r3, r2
    dd7a:	1c05      	adds	r5, r0, #0
    dd7c:	1c0e      	adds	r6, r1, #0
    dd7e:	1c14      	adds	r4, r2, #0
    dd80:	2b00      	cmp	r3, #0
    dd82:	d007      	beq.n	dd94 <__pow5mult+0x20>
    dd84:	4a22      	ldr	r2, [pc, #136]	; (de10 <__pow5mult+0x9c>)
    dd86:	3b01      	subs	r3, #1
    dd88:	009b      	lsls	r3, r3, #2
    dd8a:	589a      	ldr	r2, [r3, r2]
    dd8c:	2300      	movs	r3, #0
    dd8e:	f7ff fe94 	bl	daba <__multadd>
    dd92:	1c06      	adds	r6, r0, #0
    dd94:	10a3      	asrs	r3, r4, #2
    dd96:	9301      	str	r3, [sp, #4]
    dd98:	d037      	beq.n	de0a <__pow5mult+0x96>
    dd9a:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    dd9c:	2c00      	cmp	r4, #0
    dd9e:	d107      	bne.n	ddb0 <__pow5mult+0x3c>
    dda0:	2010      	movs	r0, #16
    dda2:	f7fb ffb9 	bl	9d18 <malloc>
    dda6:	6268      	str	r0, [r5, #36]	; 0x24
    dda8:	6044      	str	r4, [r0, #4]
    ddaa:	6084      	str	r4, [r0, #8]
    ddac:	6004      	str	r4, [r0, #0]
    ddae:	60c4      	str	r4, [r0, #12]
    ddb0:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    ddb2:	68bc      	ldr	r4, [r7, #8]
    ddb4:	2c00      	cmp	r4, #0
    ddb6:	d110      	bne.n	ddda <__pow5mult+0x66>
    ddb8:	1c28      	adds	r0, r5, #0
    ddba:	4916      	ldr	r1, [pc, #88]	; (de14 <__pow5mult+0xa0>)
    ddbc:	f7ff ff43 	bl	dc46 <__i2b>
    ddc0:	2300      	movs	r3, #0
    ddc2:	60b8      	str	r0, [r7, #8]
    ddc4:	1c04      	adds	r4, r0, #0
    ddc6:	6003      	str	r3, [r0, #0]
    ddc8:	e007      	b.n	ddda <__pow5mult+0x66>
    ddca:	9b01      	ldr	r3, [sp, #4]
    ddcc:	105b      	asrs	r3, r3, #1
    ddce:	9301      	str	r3, [sp, #4]
    ddd0:	d01b      	beq.n	de0a <__pow5mult+0x96>
    ddd2:	6820      	ldr	r0, [r4, #0]
    ddd4:	2800      	cmp	r0, #0
    ddd6:	d00f      	beq.n	ddf8 <__pow5mult+0x84>
    ddd8:	1c04      	adds	r4, r0, #0
    ddda:	9b01      	ldr	r3, [sp, #4]
    dddc:	07db      	lsls	r3, r3, #31
    ddde:	d5f4      	bpl.n	ddca <__pow5mult+0x56>
    dde0:	1c31      	adds	r1, r6, #0
    dde2:	1c22      	adds	r2, r4, #0
    dde4:	1c28      	adds	r0, r5, #0
    dde6:	f7ff ff37 	bl	dc58 <__multiply>
    ddea:	1c07      	adds	r7, r0, #0
    ddec:	1c31      	adds	r1, r6, #0
    ddee:	1c28      	adds	r0, r5, #0
    ddf0:	f7ff fe4a 	bl	da88 <_Bfree>
    ddf4:	1c3e      	adds	r6, r7, #0
    ddf6:	e7e8      	b.n	ddca <__pow5mult+0x56>
    ddf8:	1c28      	adds	r0, r5, #0
    ddfa:	1c21      	adds	r1, r4, #0
    ddfc:	1c22      	adds	r2, r4, #0
    ddfe:	f7ff ff2b 	bl	dc58 <__multiply>
    de02:	2300      	movs	r3, #0
    de04:	6020      	str	r0, [r4, #0]
    de06:	6003      	str	r3, [r0, #0]
    de08:	e7e6      	b.n	ddd8 <__pow5mult+0x64>
    de0a:	1c30      	adds	r0, r6, #0
    de0c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    de0e:	46c0      	nop			; (mov r8, r8)
    de10:	0000fbd0 	.word	0x0000fbd0
    de14:	00000271 	.word	0x00000271

0000de18 <__lshift>:
    de18:	b5f0      	push	{r4, r5, r6, r7, lr}
    de1a:	1c0c      	adds	r4, r1, #0
    de1c:	1c17      	adds	r7, r2, #0
    de1e:	6923      	ldr	r3, [r4, #16]
    de20:	1155      	asrs	r5, r2, #5
    de22:	b085      	sub	sp, #20
    de24:	18eb      	adds	r3, r5, r3
    de26:	9301      	str	r3, [sp, #4]
    de28:	3301      	adds	r3, #1
    de2a:	9300      	str	r3, [sp, #0]
    de2c:	6849      	ldr	r1, [r1, #4]
    de2e:	68a3      	ldr	r3, [r4, #8]
    de30:	9002      	str	r0, [sp, #8]
    de32:	9a00      	ldr	r2, [sp, #0]
    de34:	429a      	cmp	r2, r3
    de36:	dd02      	ble.n	de3e <__lshift+0x26>
    de38:	3101      	adds	r1, #1
    de3a:	005b      	lsls	r3, r3, #1
    de3c:	e7f9      	b.n	de32 <__lshift+0x1a>
    de3e:	9802      	ldr	r0, [sp, #8]
    de40:	f7ff fdea 	bl	da18 <_Balloc>
    de44:	1c02      	adds	r2, r0, #0
    de46:	1c06      	adds	r6, r0, #0
    de48:	2300      	movs	r3, #0
    de4a:	3214      	adds	r2, #20
    de4c:	42ab      	cmp	r3, r5
    de4e:	da04      	bge.n	de5a <__lshift+0x42>
    de50:	2000      	movs	r0, #0
    de52:	0099      	lsls	r1, r3, #2
    de54:	5050      	str	r0, [r2, r1]
    de56:	3301      	adds	r3, #1
    de58:	e7f8      	b.n	de4c <__lshift+0x34>
    de5a:	43eb      	mvns	r3, r5
    de5c:	17db      	asrs	r3, r3, #31
    de5e:	401d      	ands	r5, r3
    de60:	1c23      	adds	r3, r4, #0
    de62:	00ad      	lsls	r5, r5, #2
    de64:	1955      	adds	r5, r2, r5
    de66:	6922      	ldr	r2, [r4, #16]
    de68:	3314      	adds	r3, #20
    de6a:	0092      	lsls	r2, r2, #2
    de6c:	189a      	adds	r2, r3, r2
    de6e:	4694      	mov	ip, r2
    de70:	221f      	movs	r2, #31
    de72:	4017      	ands	r7, r2
    de74:	d014      	beq.n	dea0 <__lshift+0x88>
    de76:	3201      	adds	r2, #1
    de78:	1bd2      	subs	r2, r2, r7
    de7a:	9203      	str	r2, [sp, #12]
    de7c:	2200      	movs	r2, #0
    de7e:	6819      	ldr	r1, [r3, #0]
    de80:	1c28      	adds	r0, r5, #0
    de82:	40b9      	lsls	r1, r7
    de84:	430a      	orrs	r2, r1
    de86:	c504      	stmia	r5!, {r2}
    de88:	cb04      	ldmia	r3!, {r2}
    de8a:	9903      	ldr	r1, [sp, #12]
    de8c:	40ca      	lsrs	r2, r1
    de8e:	459c      	cmp	ip, r3
    de90:	d8f5      	bhi.n	de7e <__lshift+0x66>
    de92:	6042      	str	r2, [r0, #4]
    de94:	2a00      	cmp	r2, #0
    de96:	d007      	beq.n	dea8 <__lshift+0x90>
    de98:	9b01      	ldr	r3, [sp, #4]
    de9a:	3302      	adds	r3, #2
    de9c:	9300      	str	r3, [sp, #0]
    de9e:	e003      	b.n	dea8 <__lshift+0x90>
    dea0:	cb04      	ldmia	r3!, {r2}
    dea2:	c504      	stmia	r5!, {r2}
    dea4:	459c      	cmp	ip, r3
    dea6:	d8fb      	bhi.n	dea0 <__lshift+0x88>
    dea8:	9b00      	ldr	r3, [sp, #0]
    deaa:	9802      	ldr	r0, [sp, #8]
    deac:	3b01      	subs	r3, #1
    deae:	6133      	str	r3, [r6, #16]
    deb0:	1c21      	adds	r1, r4, #0
    deb2:	f7ff fde9 	bl	da88 <_Bfree>
    deb6:	1c30      	adds	r0, r6, #0
    deb8:	b005      	add	sp, #20
    deba:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000debc <__mcmp>:
    debc:	6903      	ldr	r3, [r0, #16]
    debe:	690a      	ldr	r2, [r1, #16]
    dec0:	b510      	push	{r4, lr}
    dec2:	1a9b      	subs	r3, r3, r2
    dec4:	1c04      	adds	r4, r0, #0
    dec6:	1e18      	subs	r0, r3, #0
    dec8:	d112      	bne.n	def0 <__mcmp+0x34>
    deca:	0093      	lsls	r3, r2, #2
    decc:	3414      	adds	r4, #20
    dece:	3114      	adds	r1, #20
    ded0:	18e2      	adds	r2, r4, r3
    ded2:	18c9      	adds	r1, r1, r3
    ded4:	3a04      	subs	r2, #4
    ded6:	3904      	subs	r1, #4
    ded8:	6813      	ldr	r3, [r2, #0]
    deda:	6808      	ldr	r0, [r1, #0]
    dedc:	4283      	cmp	r3, r0
    dede:	d004      	beq.n	deea <__mcmp+0x2e>
    dee0:	4283      	cmp	r3, r0
    dee2:	419b      	sbcs	r3, r3
    dee4:	2001      	movs	r0, #1
    dee6:	4318      	orrs	r0, r3
    dee8:	e002      	b.n	def0 <__mcmp+0x34>
    deea:	42a2      	cmp	r2, r4
    deec:	d8f2      	bhi.n	ded4 <__mcmp+0x18>
    deee:	2000      	movs	r0, #0
    def0:	bd10      	pop	{r4, pc}

0000def2 <__mdiff>:
    def2:	b5f0      	push	{r4, r5, r6, r7, lr}
    def4:	1c07      	adds	r7, r0, #0
    def6:	b085      	sub	sp, #20
    def8:	1c08      	adds	r0, r1, #0
    defa:	1c0c      	adds	r4, r1, #0
    defc:	1c11      	adds	r1, r2, #0
    defe:	1c15      	adds	r5, r2, #0
    df00:	f7ff ffdc 	bl	debc <__mcmp>
    df04:	1e06      	subs	r6, r0, #0
    df06:	d107      	bne.n	df18 <__mdiff+0x26>
    df08:	1c38      	adds	r0, r7, #0
    df0a:	1c31      	adds	r1, r6, #0
    df0c:	f7ff fd84 	bl	da18 <_Balloc>
    df10:	2301      	movs	r3, #1
    df12:	6146      	str	r6, [r0, #20]
    df14:	6103      	str	r3, [r0, #16]
    df16:	e055      	b.n	dfc4 <__mdiff+0xd2>
    df18:	2300      	movs	r3, #0
    df1a:	9301      	str	r3, [sp, #4]
    df1c:	4298      	cmp	r0, r3
    df1e:	da04      	bge.n	df2a <__mdiff+0x38>
    df20:	1c23      	adds	r3, r4, #0
    df22:	1c2c      	adds	r4, r5, #0
    df24:	1c1d      	adds	r5, r3, #0
    df26:	2301      	movs	r3, #1
    df28:	9301      	str	r3, [sp, #4]
    df2a:	1c38      	adds	r0, r7, #0
    df2c:	6861      	ldr	r1, [r4, #4]
    df2e:	f7ff fd73 	bl	da18 <_Balloc>
    df32:	9b01      	ldr	r3, [sp, #4]
    df34:	6926      	ldr	r6, [r4, #16]
    df36:	1c2f      	adds	r7, r5, #0
    df38:	60c3      	str	r3, [r0, #12]
    df3a:	3414      	adds	r4, #20
    df3c:	00b3      	lsls	r3, r6, #2
    df3e:	18e3      	adds	r3, r4, r3
    df40:	1c02      	adds	r2, r0, #0
    df42:	9302      	str	r3, [sp, #8]
    df44:	692b      	ldr	r3, [r5, #16]
    df46:	2500      	movs	r5, #0
    df48:	3714      	adds	r7, #20
    df4a:	009b      	lsls	r3, r3, #2
    df4c:	18fb      	adds	r3, r7, r3
    df4e:	9303      	str	r3, [sp, #12]
    df50:	3214      	adds	r2, #20
    df52:	cc08      	ldmia	r4!, {r3}
    df54:	4669      	mov	r1, sp
    df56:	469c      	mov	ip, r3
    df58:	cf08      	ldmia	r7!, {r3}
    df5a:	3204      	adds	r2, #4
    df5c:	9300      	str	r3, [sp, #0]
    df5e:	4663      	mov	r3, ip
    df60:	808b      	strh	r3, [r1, #4]
    df62:	888b      	ldrh	r3, [r1, #4]
    df64:	195d      	adds	r5, r3, r5
    df66:	9b00      	ldr	r3, [sp, #0]
    df68:	b29b      	uxth	r3, r3
    df6a:	1aeb      	subs	r3, r5, r3
    df6c:	4665      	mov	r5, ip
    df6e:	9301      	str	r3, [sp, #4]
    df70:	9b00      	ldr	r3, [sp, #0]
    df72:	0c2d      	lsrs	r5, r5, #16
    df74:	0c19      	lsrs	r1, r3, #16
    df76:	9b01      	ldr	r3, [sp, #4]
    df78:	1a69      	subs	r1, r5, r1
    df7a:	141d      	asrs	r5, r3, #16
    df7c:	1f13      	subs	r3, r2, #4
    df7e:	469c      	mov	ip, r3
    df80:	466b      	mov	r3, sp
    df82:	1949      	adds	r1, r1, r5
    df84:	889b      	ldrh	r3, [r3, #4]
    df86:	140d      	asrs	r5, r1, #16
    df88:	0409      	lsls	r1, r1, #16
    df8a:	430b      	orrs	r3, r1
    df8c:	4661      	mov	r1, ip
    df8e:	600b      	str	r3, [r1, #0]
    df90:	9b03      	ldr	r3, [sp, #12]
    df92:	429f      	cmp	r7, r3
    df94:	d3dd      	bcc.n	df52 <__mdiff+0x60>
    df96:	9902      	ldr	r1, [sp, #8]
    df98:	1c13      	adds	r3, r2, #0
    df9a:	428c      	cmp	r4, r1
    df9c:	d20b      	bcs.n	dfb6 <__mdiff+0xc4>
    df9e:	cc08      	ldmia	r4!, {r3}
    dfa0:	b299      	uxth	r1, r3
    dfa2:	1949      	adds	r1, r1, r5
    dfa4:	140d      	asrs	r5, r1, #16
    dfa6:	0c1b      	lsrs	r3, r3, #16
    dfa8:	18eb      	adds	r3, r5, r3
    dfaa:	141d      	asrs	r5, r3, #16
    dfac:	b289      	uxth	r1, r1
    dfae:	041b      	lsls	r3, r3, #16
    dfb0:	430b      	orrs	r3, r1
    dfb2:	c208      	stmia	r2!, {r3}
    dfb4:	e7ef      	b.n	df96 <__mdiff+0xa4>
    dfb6:	3b04      	subs	r3, #4
    dfb8:	681a      	ldr	r2, [r3, #0]
    dfba:	2a00      	cmp	r2, #0
    dfbc:	d101      	bne.n	dfc2 <__mdiff+0xd0>
    dfbe:	3e01      	subs	r6, #1
    dfc0:	e7f9      	b.n	dfb6 <__mdiff+0xc4>
    dfc2:	6106      	str	r6, [r0, #16]
    dfc4:	b005      	add	sp, #20
    dfc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000dfc8 <__ulp>:
    dfc8:	4b0f      	ldr	r3, [pc, #60]	; (e008 <__ulp+0x40>)
    dfca:	b510      	push	{r4, lr}
    dfcc:	4019      	ands	r1, r3
    dfce:	4b0f      	ldr	r3, [pc, #60]	; (e00c <__ulp+0x44>)
    dfd0:	18c9      	adds	r1, r1, r3
    dfd2:	2900      	cmp	r1, #0
    dfd4:	dd02      	ble.n	dfdc <__ulp+0x14>
    dfd6:	2200      	movs	r2, #0
    dfd8:	1c0b      	adds	r3, r1, #0
    dfda:	e011      	b.n	e000 <__ulp+0x38>
    dfdc:	4249      	negs	r1, r1
    dfde:	1509      	asrs	r1, r1, #20
    dfe0:	2200      	movs	r2, #0
    dfe2:	2300      	movs	r3, #0
    dfe4:	2913      	cmp	r1, #19
    dfe6:	dc04      	bgt.n	dff2 <__ulp+0x2a>
    dfe8:	2080      	movs	r0, #128	; 0x80
    dfea:	0300      	lsls	r0, r0, #12
    dfec:	4108      	asrs	r0, r1
    dfee:	1c03      	adds	r3, r0, #0
    dff0:	e006      	b.n	e000 <__ulp+0x38>
    dff2:	2001      	movs	r0, #1
    dff4:	2932      	cmp	r1, #50	; 0x32
    dff6:	dc02      	bgt.n	dffe <__ulp+0x36>
    dff8:	2433      	movs	r4, #51	; 0x33
    dffa:	1a61      	subs	r1, r4, r1
    dffc:	4088      	lsls	r0, r1
    dffe:	1c02      	adds	r2, r0, #0
    e000:	1c10      	adds	r0, r2, #0
    e002:	1c19      	adds	r1, r3, #0
    e004:	bd10      	pop	{r4, pc}
    e006:	46c0      	nop			; (mov r8, r8)
    e008:	7ff00000 	.word	0x7ff00000
    e00c:	fcc00000 	.word	0xfcc00000

0000e010 <__b2d>:
    e010:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e012:	1c06      	adds	r6, r0, #0
    e014:	6903      	ldr	r3, [r0, #16]
    e016:	3614      	adds	r6, #20
    e018:	009b      	lsls	r3, r3, #2
    e01a:	18f3      	adds	r3, r6, r3
    e01c:	1f1d      	subs	r5, r3, #4
    e01e:	682c      	ldr	r4, [r5, #0]
    e020:	1c0f      	adds	r7, r1, #0
    e022:	1c20      	adds	r0, r4, #0
    e024:	9301      	str	r3, [sp, #4]
    e026:	f7ff fdc4 	bl	dbb2 <__hi0bits>
    e02a:	2320      	movs	r3, #32
    e02c:	1a1b      	subs	r3, r3, r0
    e02e:	603b      	str	r3, [r7, #0]
    e030:	491f      	ldr	r1, [pc, #124]	; (e0b0 <__b2d+0xa0>)
    e032:	280a      	cmp	r0, #10
    e034:	dc13      	bgt.n	e05e <__b2d+0x4e>
    e036:	230b      	movs	r3, #11
    e038:	1c27      	adds	r7, r4, #0
    e03a:	1a1b      	subs	r3, r3, r0
    e03c:	40df      	lsrs	r7, r3
    e03e:	4339      	orrs	r1, r7
    e040:	469c      	mov	ip, r3
    e042:	1c0b      	adds	r3, r1, #0
    e044:	2100      	movs	r1, #0
    e046:	42b5      	cmp	r5, r6
    e048:	d902      	bls.n	e050 <__b2d+0x40>
    e04a:	9901      	ldr	r1, [sp, #4]
    e04c:	3908      	subs	r1, #8
    e04e:	6809      	ldr	r1, [r1, #0]
    e050:	4665      	mov	r5, ip
    e052:	3015      	adds	r0, #21
    e054:	40e9      	lsrs	r1, r5
    e056:	4084      	lsls	r4, r0
    e058:	4321      	orrs	r1, r4
    e05a:	1c0a      	adds	r2, r1, #0
    e05c:	e024      	b.n	e0a8 <__b2d+0x98>
    e05e:	2700      	movs	r7, #0
    e060:	42b5      	cmp	r5, r6
    e062:	d902      	bls.n	e06a <__b2d+0x5a>
    e064:	9d01      	ldr	r5, [sp, #4]
    e066:	3d08      	subs	r5, #8
    e068:	682f      	ldr	r7, [r5, #0]
    e06a:	230b      	movs	r3, #11
    e06c:	425b      	negs	r3, r3
    e06e:	469c      	mov	ip, r3
    e070:	4484      	add	ip, r0
    e072:	4663      	mov	r3, ip
    e074:	2b00      	cmp	r3, #0
    e076:	d014      	beq.n	e0a2 <__b2d+0x92>
    e078:	232b      	movs	r3, #43	; 0x2b
    e07a:	1a18      	subs	r0, r3, r0
    e07c:	4663      	mov	r3, ip
    e07e:	409c      	lsls	r4, r3
    e080:	4321      	orrs	r1, r4
    e082:	1c3c      	adds	r4, r7, #0
    e084:	40c4      	lsrs	r4, r0
    e086:	4321      	orrs	r1, r4
    e088:	1c0b      	adds	r3, r1, #0
    e08a:	2400      	movs	r4, #0
    e08c:	42b5      	cmp	r5, r6
    e08e:	d901      	bls.n	e094 <__b2d+0x84>
    e090:	3d04      	subs	r5, #4
    e092:	682c      	ldr	r4, [r5, #0]
    e094:	40c4      	lsrs	r4, r0
    e096:	4661      	mov	r1, ip
    e098:	1c20      	adds	r0, r4, #0
    e09a:	408f      	lsls	r7, r1
    e09c:	4338      	orrs	r0, r7
    e09e:	1c02      	adds	r2, r0, #0
    e0a0:	e002      	b.n	e0a8 <__b2d+0x98>
    e0a2:	4321      	orrs	r1, r4
    e0a4:	1c0b      	adds	r3, r1, #0
    e0a6:	1c3a      	adds	r2, r7, #0
    e0a8:	1c10      	adds	r0, r2, #0
    e0aa:	1c19      	adds	r1, r3, #0
    e0ac:	b003      	add	sp, #12
    e0ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e0b0:	3ff00000 	.word	0x3ff00000

0000e0b4 <__d2b>:
    e0b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e0b6:	1c1d      	adds	r5, r3, #0
    e0b8:	2101      	movs	r1, #1
    e0ba:	9f08      	ldr	r7, [sp, #32]
    e0bc:	1c14      	adds	r4, r2, #0
    e0be:	f7ff fcab 	bl	da18 <_Balloc>
    e0c2:	032b      	lsls	r3, r5, #12
    e0c4:	006d      	lsls	r5, r5, #1
    e0c6:	1c06      	adds	r6, r0, #0
    e0c8:	0b1b      	lsrs	r3, r3, #12
    e0ca:	0d6d      	lsrs	r5, r5, #21
    e0cc:	d002      	beq.n	e0d4 <__d2b+0x20>
    e0ce:	2280      	movs	r2, #128	; 0x80
    e0d0:	0352      	lsls	r2, r2, #13
    e0d2:	4313      	orrs	r3, r2
    e0d4:	9301      	str	r3, [sp, #4]
    e0d6:	2c00      	cmp	r4, #0
    e0d8:	d018      	beq.n	e10c <__d2b+0x58>
    e0da:	4668      	mov	r0, sp
    e0dc:	9400      	str	r4, [sp, #0]
    e0de:	f7ff fd83 	bl	dbe8 <__lo0bits>
    e0e2:	9c00      	ldr	r4, [sp, #0]
    e0e4:	2800      	cmp	r0, #0
    e0e6:	d009      	beq.n	e0fc <__d2b+0x48>
    e0e8:	2320      	movs	r3, #32
    e0ea:	9a01      	ldr	r2, [sp, #4]
    e0ec:	1a19      	subs	r1, r3, r0
    e0ee:	1c13      	adds	r3, r2, #0
    e0f0:	408b      	lsls	r3, r1
    e0f2:	40c2      	lsrs	r2, r0
    e0f4:	4323      	orrs	r3, r4
    e0f6:	6173      	str	r3, [r6, #20]
    e0f8:	9201      	str	r2, [sp, #4]
    e0fa:	e000      	b.n	e0fe <__d2b+0x4a>
    e0fc:	6174      	str	r4, [r6, #20]
    e0fe:	9c01      	ldr	r4, [sp, #4]
    e100:	61b4      	str	r4, [r6, #24]
    e102:	1e63      	subs	r3, r4, #1
    e104:	419c      	sbcs	r4, r3
    e106:	3401      	adds	r4, #1
    e108:	6134      	str	r4, [r6, #16]
    e10a:	e007      	b.n	e11c <__d2b+0x68>
    e10c:	a801      	add	r0, sp, #4
    e10e:	f7ff fd6b 	bl	dbe8 <__lo0bits>
    e112:	2401      	movs	r4, #1
    e114:	9b01      	ldr	r3, [sp, #4]
    e116:	6134      	str	r4, [r6, #16]
    e118:	6173      	str	r3, [r6, #20]
    e11a:	3020      	adds	r0, #32
    e11c:	2d00      	cmp	r5, #0
    e11e:	d006      	beq.n	e12e <__d2b+0x7a>
    e120:	4b0b      	ldr	r3, [pc, #44]	; (e150 <__d2b+0x9c>)
    e122:	18ed      	adds	r5, r5, r3
    e124:	2335      	movs	r3, #53	; 0x35
    e126:	182d      	adds	r5, r5, r0
    e128:	603d      	str	r5, [r7, #0]
    e12a:	1a18      	subs	r0, r3, r0
    e12c:	e00b      	b.n	e146 <__d2b+0x92>
    e12e:	4b09      	ldr	r3, [pc, #36]	; (e154 <__d2b+0xa0>)
    e130:	18c0      	adds	r0, r0, r3
    e132:	4b09      	ldr	r3, [pc, #36]	; (e158 <__d2b+0xa4>)
    e134:	6038      	str	r0, [r7, #0]
    e136:	18e3      	adds	r3, r4, r3
    e138:	009b      	lsls	r3, r3, #2
    e13a:	18f3      	adds	r3, r6, r3
    e13c:	6958      	ldr	r0, [r3, #20]
    e13e:	f7ff fd38 	bl	dbb2 <__hi0bits>
    e142:	0164      	lsls	r4, r4, #5
    e144:	1a20      	subs	r0, r4, r0
    e146:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e148:	6018      	str	r0, [r3, #0]
    e14a:	1c30      	adds	r0, r6, #0
    e14c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    e14e:	46c0      	nop			; (mov r8, r8)
    e150:	fffffbcd 	.word	0xfffffbcd
    e154:	fffffbce 	.word	0xfffffbce
    e158:	3fffffff 	.word	0x3fffffff

0000e15c <__ratio>:
    e15c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e15e:	b087      	sub	sp, #28
    e160:	1c0e      	adds	r6, r1, #0
    e162:	a904      	add	r1, sp, #16
    e164:	1c07      	adds	r7, r0, #0
    e166:	f7ff ff53 	bl	e010 <__b2d>
    e16a:	1c04      	adds	r4, r0, #0
    e16c:	1c0d      	adds	r5, r1, #0
    e16e:	1c30      	adds	r0, r6, #0
    e170:	a905      	add	r1, sp, #20
    e172:	9400      	str	r4, [sp, #0]
    e174:	9501      	str	r5, [sp, #4]
    e176:	f7ff ff4b 	bl	e010 <__b2d>
    e17a:	9b04      	ldr	r3, [sp, #16]
    e17c:	9a05      	ldr	r2, [sp, #20]
    e17e:	693f      	ldr	r7, [r7, #16]
    e180:	1a9a      	subs	r2, r3, r2
    e182:	6933      	ldr	r3, [r6, #16]
    e184:	9002      	str	r0, [sp, #8]
    e186:	9103      	str	r1, [sp, #12]
    e188:	1afb      	subs	r3, r7, r3
    e18a:	015b      	lsls	r3, r3, #5
    e18c:	18d3      	adds	r3, r2, r3
    e18e:	2b00      	cmp	r3, #0
    e190:	dd03      	ble.n	e19a <__ratio+0x3e>
    e192:	051b      	lsls	r3, r3, #20
    e194:	195b      	adds	r3, r3, r5
    e196:	9301      	str	r3, [sp, #4]
    e198:	e002      	b.n	e1a0 <__ratio+0x44>
    e19a:	051b      	lsls	r3, r3, #20
    e19c:	1acb      	subs	r3, r1, r3
    e19e:	9303      	str	r3, [sp, #12]
    e1a0:	9800      	ldr	r0, [sp, #0]
    e1a2:	9901      	ldr	r1, [sp, #4]
    e1a4:	9a02      	ldr	r2, [sp, #8]
    e1a6:	9b03      	ldr	r3, [sp, #12]
    e1a8:	f7f9 fdfc 	bl	7da4 <__aeabi_ddiv>
    e1ac:	b007      	add	sp, #28
    e1ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000e1b0 <__copybits>:
    e1b0:	1c13      	adds	r3, r2, #0
    e1b2:	3901      	subs	r1, #1
    e1b4:	b510      	push	{r4, lr}
    e1b6:	1149      	asrs	r1, r1, #5
    e1b8:	6912      	ldr	r2, [r2, #16]
    e1ba:	3101      	adds	r1, #1
    e1bc:	0089      	lsls	r1, r1, #2
    e1be:	3314      	adds	r3, #20
    e1c0:	0092      	lsls	r2, r2, #2
    e1c2:	1841      	adds	r1, r0, r1
    e1c4:	189a      	adds	r2, r3, r2
    e1c6:	4293      	cmp	r3, r2
    e1c8:	d202      	bcs.n	e1d0 <__copybits+0x20>
    e1ca:	cb10      	ldmia	r3!, {r4}
    e1cc:	c010      	stmia	r0!, {r4}
    e1ce:	e7fa      	b.n	e1c6 <__copybits+0x16>
    e1d0:	4288      	cmp	r0, r1
    e1d2:	d202      	bcs.n	e1da <__copybits+0x2a>
    e1d4:	2300      	movs	r3, #0
    e1d6:	c008      	stmia	r0!, {r3}
    e1d8:	e7fa      	b.n	e1d0 <__copybits+0x20>
    e1da:	bd10      	pop	{r4, pc}

0000e1dc <__any_on>:
    e1dc:	b530      	push	{r4, r5, lr}
    e1de:	1c04      	adds	r4, r0, #0
    e1e0:	6902      	ldr	r2, [r0, #16]
    e1e2:	3414      	adds	r4, #20
    e1e4:	114b      	asrs	r3, r1, #5
    e1e6:	4293      	cmp	r3, r2
    e1e8:	dc0c      	bgt.n	e204 <__any_on+0x28>
    e1ea:	da0c      	bge.n	e206 <__any_on+0x2a>
    e1ec:	221f      	movs	r2, #31
    e1ee:	4011      	ands	r1, r2
    e1f0:	d009      	beq.n	e206 <__any_on+0x2a>
    e1f2:	009a      	lsls	r2, r3, #2
    e1f4:	5915      	ldr	r5, [r2, r4]
    e1f6:	2001      	movs	r0, #1
    e1f8:	1c2a      	adds	r2, r5, #0
    e1fa:	40ca      	lsrs	r2, r1
    e1fc:	408a      	lsls	r2, r1
    e1fe:	42aa      	cmp	r2, r5
    e200:	d10c      	bne.n	e21c <__any_on+0x40>
    e202:	e000      	b.n	e206 <__any_on+0x2a>
    e204:	1c13      	adds	r3, r2, #0
    e206:	009b      	lsls	r3, r3, #2
    e208:	18e3      	adds	r3, r4, r3
    e20a:	42a3      	cmp	r3, r4
    e20c:	d905      	bls.n	e21a <__any_on+0x3e>
    e20e:	3b04      	subs	r3, #4
    e210:	681a      	ldr	r2, [r3, #0]
    e212:	2a00      	cmp	r2, #0
    e214:	d0f9      	beq.n	e20a <__any_on+0x2e>
    e216:	2001      	movs	r0, #1
    e218:	e000      	b.n	e21c <__any_on+0x40>
    e21a:	2000      	movs	r0, #0
    e21c:	bd30      	pop	{r4, r5, pc}

0000e21e <_calloc_r>:
    e21e:	434a      	muls	r2, r1
    e220:	b538      	push	{r3, r4, r5, lr}
    e222:	1c11      	adds	r1, r2, #0
    e224:	1c14      	adds	r4, r2, #0
    e226:	f7fb fded 	bl	9e04 <_malloc_r>
    e22a:	1e05      	subs	r5, r0, #0
    e22c:	d003      	beq.n	e236 <_calloc_r+0x18>
    e22e:	2100      	movs	r1, #0
    e230:	1c22      	adds	r2, r4, #0
    e232:	f7fb fd99 	bl	9d68 <memset>
    e236:	1c28      	adds	r0, r5, #0
    e238:	bd38      	pop	{r3, r4, r5, pc}

0000e23a <_realloc_r>:
    e23a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e23c:	1c06      	adds	r6, r0, #0
    e23e:	1c0c      	adds	r4, r1, #0
    e240:	1c15      	adds	r5, r2, #0
    e242:	2900      	cmp	r1, #0
    e244:	d104      	bne.n	e250 <_realloc_r+0x16>
    e246:	1c11      	adds	r1, r2, #0
    e248:	f7fb fddc 	bl	9e04 <_malloc_r>
    e24c:	1c04      	adds	r4, r0, #0
    e24e:	e018      	b.n	e282 <_realloc_r+0x48>
    e250:	2a00      	cmp	r2, #0
    e252:	d103      	bne.n	e25c <_realloc_r+0x22>
    e254:	f7fb fd90 	bl	9d78 <_free_r>
    e258:	1c2c      	adds	r4, r5, #0
    e25a:	e012      	b.n	e282 <_realloc_r+0x48>
    e25c:	f000 fb52 	bl	e904 <_malloc_usable_size_r>
    e260:	42a8      	cmp	r0, r5
    e262:	d20e      	bcs.n	e282 <_realloc_r+0x48>
    e264:	1c30      	adds	r0, r6, #0
    e266:	1c29      	adds	r1, r5, #0
    e268:	f7fb fdcc 	bl	9e04 <_malloc_r>
    e26c:	1e07      	subs	r7, r0, #0
    e26e:	d007      	beq.n	e280 <_realloc_r+0x46>
    e270:	1c21      	adds	r1, r4, #0
    e272:	1c2a      	adds	r2, r5, #0
    e274:	f7fb fd6f 	bl	9d56 <memcpy>
    e278:	1c30      	adds	r0, r6, #0
    e27a:	1c21      	adds	r1, r4, #0
    e27c:	f7fb fd7c 	bl	9d78 <_free_r>
    e280:	1c3c      	adds	r4, r7, #0
    e282:	1c20      	adds	r0, r4, #0
    e284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000e288 <__ssputs_r>:
    e288:	b5f0      	push	{r4, r5, r6, r7, lr}
    e28a:	688e      	ldr	r6, [r1, #8]
    e28c:	b085      	sub	sp, #20
    e28e:	1c07      	adds	r7, r0, #0
    e290:	1c0c      	adds	r4, r1, #0
    e292:	9203      	str	r2, [sp, #12]
    e294:	9301      	str	r3, [sp, #4]
    e296:	42b3      	cmp	r3, r6
    e298:	d345      	bcc.n	e326 <__ssputs_r+0x9e>
    e29a:	2390      	movs	r3, #144	; 0x90
    e29c:	898a      	ldrh	r2, [r1, #12]
    e29e:	00db      	lsls	r3, r3, #3
    e2a0:	421a      	tst	r2, r3
    e2a2:	d03d      	beq.n	e320 <__ssputs_r+0x98>
    e2a4:	2503      	movs	r5, #3
    e2a6:	6909      	ldr	r1, [r1, #16]
    e2a8:	6823      	ldr	r3, [r4, #0]
    e2aa:	9801      	ldr	r0, [sp, #4]
    e2ac:	1a5b      	subs	r3, r3, r1
    e2ae:	9302      	str	r3, [sp, #8]
    e2b0:	6963      	ldr	r3, [r4, #20]
    e2b2:	435d      	muls	r5, r3
    e2b4:	0feb      	lsrs	r3, r5, #31
    e2b6:	195d      	adds	r5, r3, r5
    e2b8:	9b02      	ldr	r3, [sp, #8]
    e2ba:	106d      	asrs	r5, r5, #1
    e2bc:	3301      	adds	r3, #1
    e2be:	181b      	adds	r3, r3, r0
    e2c0:	429d      	cmp	r5, r3
    e2c2:	d200      	bcs.n	e2c6 <__ssputs_r+0x3e>
    e2c4:	1c1d      	adds	r5, r3, #0
    e2c6:	1c38      	adds	r0, r7, #0
    e2c8:	0553      	lsls	r3, r2, #21
    e2ca:	d50f      	bpl.n	e2ec <__ssputs_r+0x64>
    e2cc:	1c29      	adds	r1, r5, #0
    e2ce:	f7fb fd99 	bl	9e04 <_malloc_r>
    e2d2:	1e06      	subs	r6, r0, #0
    e2d4:	d013      	beq.n	e2fe <__ssputs_r+0x76>
    e2d6:	9a02      	ldr	r2, [sp, #8]
    e2d8:	6921      	ldr	r1, [r4, #16]
    e2da:	f7fb fd3c 	bl	9d56 <memcpy>
    e2de:	89a2      	ldrh	r2, [r4, #12]
    e2e0:	4b18      	ldr	r3, [pc, #96]	; (e344 <__ssputs_r+0xbc>)
    e2e2:	4013      	ands	r3, r2
    e2e4:	2280      	movs	r2, #128	; 0x80
    e2e6:	4313      	orrs	r3, r2
    e2e8:	81a3      	strh	r3, [r4, #12]
    e2ea:	e011      	b.n	e310 <__ssputs_r+0x88>
    e2ec:	1c2a      	adds	r2, r5, #0
    e2ee:	f7ff ffa4 	bl	e23a <_realloc_r>
    e2f2:	1e06      	subs	r6, r0, #0
    e2f4:	d10c      	bne.n	e310 <__ssputs_r+0x88>
    e2f6:	1c38      	adds	r0, r7, #0
    e2f8:	6921      	ldr	r1, [r4, #16]
    e2fa:	f7fb fd3d 	bl	9d78 <_free_r>
    e2fe:	230c      	movs	r3, #12
    e300:	2240      	movs	r2, #64	; 0x40
    e302:	2001      	movs	r0, #1
    e304:	603b      	str	r3, [r7, #0]
    e306:	89a3      	ldrh	r3, [r4, #12]
    e308:	4240      	negs	r0, r0
    e30a:	4313      	orrs	r3, r2
    e30c:	81a3      	strh	r3, [r4, #12]
    e30e:	e017      	b.n	e340 <__ssputs_r+0xb8>
    e310:	9b02      	ldr	r3, [sp, #8]
    e312:	6126      	str	r6, [r4, #16]
    e314:	18f6      	adds	r6, r6, r3
    e316:	6026      	str	r6, [r4, #0]
    e318:	6165      	str	r5, [r4, #20]
    e31a:	9e01      	ldr	r6, [sp, #4]
    e31c:	1aed      	subs	r5, r5, r3
    e31e:	60a5      	str	r5, [r4, #8]
    e320:	9b01      	ldr	r3, [sp, #4]
    e322:	42b3      	cmp	r3, r6
    e324:	d200      	bcs.n	e328 <__ssputs_r+0xa0>
    e326:	9e01      	ldr	r6, [sp, #4]
    e328:	1c32      	adds	r2, r6, #0
    e32a:	6820      	ldr	r0, [r4, #0]
    e32c:	9903      	ldr	r1, [sp, #12]
    e32e:	f7ff fb5f 	bl	d9f0 <memmove>
    e332:	2000      	movs	r0, #0
    e334:	68a3      	ldr	r3, [r4, #8]
    e336:	1b9b      	subs	r3, r3, r6
    e338:	60a3      	str	r3, [r4, #8]
    e33a:	6823      	ldr	r3, [r4, #0]
    e33c:	199e      	adds	r6, r3, r6
    e33e:	6026      	str	r6, [r4, #0]
    e340:	b005      	add	sp, #20
    e342:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e344:	fffffb7f 	.word	0xfffffb7f

0000e348 <_svfiprintf_r>:
    e348:	b5f0      	push	{r4, r5, r6, r7, lr}
    e34a:	b09f      	sub	sp, #124	; 0x7c
    e34c:	9002      	str	r0, [sp, #8]
    e34e:	9305      	str	r3, [sp, #20]
    e350:	898b      	ldrh	r3, [r1, #12]
    e352:	1c0e      	adds	r6, r1, #0
    e354:	1c17      	adds	r7, r2, #0
    e356:	061b      	lsls	r3, r3, #24
    e358:	d510      	bpl.n	e37c <_svfiprintf_r+0x34>
    e35a:	690b      	ldr	r3, [r1, #16]
    e35c:	2b00      	cmp	r3, #0
    e35e:	d10d      	bne.n	e37c <_svfiprintf_r+0x34>
    e360:	2140      	movs	r1, #64	; 0x40
    e362:	f7fb fd4f 	bl	9e04 <_malloc_r>
    e366:	6030      	str	r0, [r6, #0]
    e368:	6130      	str	r0, [r6, #16]
    e36a:	2800      	cmp	r0, #0
    e36c:	d104      	bne.n	e378 <_svfiprintf_r+0x30>
    e36e:	230c      	movs	r3, #12
    e370:	9a02      	ldr	r2, [sp, #8]
    e372:	3801      	subs	r0, #1
    e374:	6013      	str	r3, [r2, #0]
    e376:	e0d0      	b.n	e51a <_svfiprintf_r+0x1d2>
    e378:	2340      	movs	r3, #64	; 0x40
    e37a:	6173      	str	r3, [r6, #20]
    e37c:	2300      	movs	r3, #0
    e37e:	ad06      	add	r5, sp, #24
    e380:	616b      	str	r3, [r5, #20]
    e382:	3320      	adds	r3, #32
    e384:	766b      	strb	r3, [r5, #25]
    e386:	3310      	adds	r3, #16
    e388:	76ab      	strb	r3, [r5, #26]
    e38a:	1c3c      	adds	r4, r7, #0
    e38c:	7823      	ldrb	r3, [r4, #0]
    e38e:	2b00      	cmp	r3, #0
    e390:	d103      	bne.n	e39a <_svfiprintf_r+0x52>
    e392:	1be3      	subs	r3, r4, r7
    e394:	9304      	str	r3, [sp, #16]
    e396:	d012      	beq.n	e3be <_svfiprintf_r+0x76>
    e398:	e003      	b.n	e3a2 <_svfiprintf_r+0x5a>
    e39a:	2b25      	cmp	r3, #37	; 0x25
    e39c:	d0f9      	beq.n	e392 <_svfiprintf_r+0x4a>
    e39e:	3401      	adds	r4, #1
    e3a0:	e7f4      	b.n	e38c <_svfiprintf_r+0x44>
    e3a2:	9b04      	ldr	r3, [sp, #16]
    e3a4:	9802      	ldr	r0, [sp, #8]
    e3a6:	1c31      	adds	r1, r6, #0
    e3a8:	1c3a      	adds	r2, r7, #0
    e3aa:	f7ff ff6d 	bl	e288 <__ssputs_r>
    e3ae:	1c43      	adds	r3, r0, #1
    e3b0:	d100      	bne.n	e3b4 <_svfiprintf_r+0x6c>
    e3b2:	e0ac      	b.n	e50e <_svfiprintf_r+0x1c6>
    e3b4:	696a      	ldr	r2, [r5, #20]
    e3b6:	9b04      	ldr	r3, [sp, #16]
    e3b8:	4694      	mov	ip, r2
    e3ba:	4463      	add	r3, ip
    e3bc:	616b      	str	r3, [r5, #20]
    e3be:	7823      	ldrb	r3, [r4, #0]
    e3c0:	2b00      	cmp	r3, #0
    e3c2:	d100      	bne.n	e3c6 <_svfiprintf_r+0x7e>
    e3c4:	e0a3      	b.n	e50e <_svfiprintf_r+0x1c6>
    e3c6:	2201      	movs	r2, #1
    e3c8:	2300      	movs	r3, #0
    e3ca:	4252      	negs	r2, r2
    e3cc:	606a      	str	r2, [r5, #4]
    e3ce:	a902      	add	r1, sp, #8
    e3d0:	3254      	adds	r2, #84	; 0x54
    e3d2:	1852      	adds	r2, r2, r1
    e3d4:	3401      	adds	r4, #1
    e3d6:	602b      	str	r3, [r5, #0]
    e3d8:	60eb      	str	r3, [r5, #12]
    e3da:	60ab      	str	r3, [r5, #8]
    e3dc:	7013      	strb	r3, [r2, #0]
    e3de:	65ab      	str	r3, [r5, #88]	; 0x58
    e3e0:	4f4f      	ldr	r7, [pc, #316]	; (e520 <_svfiprintf_r+0x1d8>)
    e3e2:	7821      	ldrb	r1, [r4, #0]
    e3e4:	1c38      	adds	r0, r7, #0
    e3e6:	2205      	movs	r2, #5
    e3e8:	f7fb fcaa 	bl	9d40 <memchr>
    e3ec:	2800      	cmp	r0, #0
    e3ee:	d008      	beq.n	e402 <_svfiprintf_r+0xba>
    e3f0:	1bc0      	subs	r0, r0, r7
    e3f2:	2701      	movs	r7, #1
    e3f4:	4087      	lsls	r7, r0
    e3f6:	1c38      	adds	r0, r7, #0
    e3f8:	682b      	ldr	r3, [r5, #0]
    e3fa:	3401      	adds	r4, #1
    e3fc:	4318      	orrs	r0, r3
    e3fe:	6028      	str	r0, [r5, #0]
    e400:	e7ee      	b.n	e3e0 <_svfiprintf_r+0x98>
    e402:	682b      	ldr	r3, [r5, #0]
    e404:	06da      	lsls	r2, r3, #27
    e406:	d504      	bpl.n	e412 <_svfiprintf_r+0xca>
    e408:	2253      	movs	r2, #83	; 0x53
    e40a:	2120      	movs	r1, #32
    e40c:	a802      	add	r0, sp, #8
    e40e:	1812      	adds	r2, r2, r0
    e410:	7011      	strb	r1, [r2, #0]
    e412:	071a      	lsls	r2, r3, #28
    e414:	d504      	bpl.n	e420 <_svfiprintf_r+0xd8>
    e416:	2253      	movs	r2, #83	; 0x53
    e418:	212b      	movs	r1, #43	; 0x2b
    e41a:	a802      	add	r0, sp, #8
    e41c:	1812      	adds	r2, r2, r0
    e41e:	7011      	strb	r1, [r2, #0]
    e420:	7822      	ldrb	r2, [r4, #0]
    e422:	2a2a      	cmp	r2, #42	; 0x2a
    e424:	d001      	beq.n	e42a <_svfiprintf_r+0xe2>
    e426:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e428:	e00e      	b.n	e448 <_svfiprintf_r+0x100>
    e42a:	9a05      	ldr	r2, [sp, #20]
    e42c:	1d11      	adds	r1, r2, #4
    e42e:	6812      	ldr	r2, [r2, #0]
    e430:	9105      	str	r1, [sp, #20]
    e432:	2a00      	cmp	r2, #0
    e434:	db01      	blt.n	e43a <_svfiprintf_r+0xf2>
    e436:	9209      	str	r2, [sp, #36]	; 0x24
    e438:	e004      	b.n	e444 <_svfiprintf_r+0xfc>
    e43a:	4252      	negs	r2, r2
    e43c:	60ea      	str	r2, [r5, #12]
    e43e:	2202      	movs	r2, #2
    e440:	4313      	orrs	r3, r2
    e442:	602b      	str	r3, [r5, #0]
    e444:	3401      	adds	r4, #1
    e446:	e009      	b.n	e45c <_svfiprintf_r+0x114>
    e448:	7822      	ldrb	r2, [r4, #0]
    e44a:	3a30      	subs	r2, #48	; 0x30
    e44c:	2a09      	cmp	r2, #9
    e44e:	d804      	bhi.n	e45a <_svfiprintf_r+0x112>
    e450:	210a      	movs	r1, #10
    e452:	434b      	muls	r3, r1
    e454:	3401      	adds	r4, #1
    e456:	189b      	adds	r3, r3, r2
    e458:	e7f6      	b.n	e448 <_svfiprintf_r+0x100>
    e45a:	9309      	str	r3, [sp, #36]	; 0x24
    e45c:	7823      	ldrb	r3, [r4, #0]
    e45e:	2b2e      	cmp	r3, #46	; 0x2e
    e460:	d118      	bne.n	e494 <_svfiprintf_r+0x14c>
    e462:	7863      	ldrb	r3, [r4, #1]
    e464:	2b2a      	cmp	r3, #42	; 0x2a
    e466:	d109      	bne.n	e47c <_svfiprintf_r+0x134>
    e468:	9b05      	ldr	r3, [sp, #20]
    e46a:	3402      	adds	r4, #2
    e46c:	1d1a      	adds	r2, r3, #4
    e46e:	681b      	ldr	r3, [r3, #0]
    e470:	9205      	str	r2, [sp, #20]
    e472:	2b00      	cmp	r3, #0
    e474:	da0d      	bge.n	e492 <_svfiprintf_r+0x14a>
    e476:	2301      	movs	r3, #1
    e478:	425b      	negs	r3, r3
    e47a:	e00a      	b.n	e492 <_svfiprintf_r+0x14a>
    e47c:	2300      	movs	r3, #0
    e47e:	3401      	adds	r4, #1
    e480:	7822      	ldrb	r2, [r4, #0]
    e482:	3a30      	subs	r2, #48	; 0x30
    e484:	2a09      	cmp	r2, #9
    e486:	d804      	bhi.n	e492 <_svfiprintf_r+0x14a>
    e488:	210a      	movs	r1, #10
    e48a:	434b      	muls	r3, r1
    e48c:	3401      	adds	r4, #1
    e48e:	189b      	adds	r3, r3, r2
    e490:	e7f6      	b.n	e480 <_svfiprintf_r+0x138>
    e492:	9307      	str	r3, [sp, #28]
    e494:	4f23      	ldr	r7, [pc, #140]	; (e524 <_svfiprintf_r+0x1dc>)
    e496:	7821      	ldrb	r1, [r4, #0]
    e498:	1c38      	adds	r0, r7, #0
    e49a:	2203      	movs	r2, #3
    e49c:	f7fb fc50 	bl	9d40 <memchr>
    e4a0:	2800      	cmp	r0, #0
    e4a2:	d007      	beq.n	e4b4 <_svfiprintf_r+0x16c>
    e4a4:	1bc0      	subs	r0, r0, r7
    e4a6:	2740      	movs	r7, #64	; 0x40
    e4a8:	4087      	lsls	r7, r0
    e4aa:	1c38      	adds	r0, r7, #0
    e4ac:	682b      	ldr	r3, [r5, #0]
    e4ae:	3401      	adds	r4, #1
    e4b0:	4318      	orrs	r0, r3
    e4b2:	6028      	str	r0, [r5, #0]
    e4b4:	7821      	ldrb	r1, [r4, #0]
    e4b6:	481c      	ldr	r0, [pc, #112]	; (e528 <_svfiprintf_r+0x1e0>)
    e4b8:	2206      	movs	r2, #6
    e4ba:	1c67      	adds	r7, r4, #1
    e4bc:	7629      	strb	r1, [r5, #24]
    e4be:	f7fb fc3f 	bl	9d40 <memchr>
    e4c2:	2800      	cmp	r0, #0
    e4c4:	d012      	beq.n	e4ec <_svfiprintf_r+0x1a4>
    e4c6:	4b19      	ldr	r3, [pc, #100]	; (e52c <_svfiprintf_r+0x1e4>)
    e4c8:	2b00      	cmp	r3, #0
    e4ca:	d106      	bne.n	e4da <_svfiprintf_r+0x192>
    e4cc:	2207      	movs	r2, #7
    e4ce:	9b05      	ldr	r3, [sp, #20]
    e4d0:	3307      	adds	r3, #7
    e4d2:	4393      	bics	r3, r2
    e4d4:	3308      	adds	r3, #8
    e4d6:	9305      	str	r3, [sp, #20]
    e4d8:	e014      	b.n	e504 <_svfiprintf_r+0x1bc>
    e4da:	ab05      	add	r3, sp, #20
    e4dc:	9300      	str	r3, [sp, #0]
    e4de:	9802      	ldr	r0, [sp, #8]
    e4e0:	1c29      	adds	r1, r5, #0
    e4e2:	1c32      	adds	r2, r6, #0
    e4e4:	4b12      	ldr	r3, [pc, #72]	; (e530 <_svfiprintf_r+0x1e8>)
    e4e6:	f7fb fec1 	bl	a26c <_printf_float>
    e4ea:	e007      	b.n	e4fc <_svfiprintf_r+0x1b4>
    e4ec:	ab05      	add	r3, sp, #20
    e4ee:	9300      	str	r3, [sp, #0]
    e4f0:	9802      	ldr	r0, [sp, #8]
    e4f2:	1c29      	adds	r1, r5, #0
    e4f4:	1c32      	adds	r2, r6, #0
    e4f6:	4b0e      	ldr	r3, [pc, #56]	; (e530 <_svfiprintf_r+0x1e8>)
    e4f8:	f7fc f964 	bl	a7c4 <_printf_i>
    e4fc:	9003      	str	r0, [sp, #12]
    e4fe:	9b03      	ldr	r3, [sp, #12]
    e500:	3301      	adds	r3, #1
    e502:	d004      	beq.n	e50e <_svfiprintf_r+0x1c6>
    e504:	696b      	ldr	r3, [r5, #20]
    e506:	9a03      	ldr	r2, [sp, #12]
    e508:	189b      	adds	r3, r3, r2
    e50a:	616b      	str	r3, [r5, #20]
    e50c:	e73d      	b.n	e38a <_svfiprintf_r+0x42>
    e50e:	89b3      	ldrh	r3, [r6, #12]
    e510:	980b      	ldr	r0, [sp, #44]	; 0x2c
    e512:	065b      	lsls	r3, r3, #25
    e514:	d501      	bpl.n	e51a <_svfiprintf_r+0x1d2>
    e516:	2001      	movs	r0, #1
    e518:	4240      	negs	r0, r0
    e51a:	b01f      	add	sp, #124	; 0x7c
    e51c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e51e:	46c0      	nop			; (mov r8, r8)
    e520:	0000f900 	.word	0x0000f900
    e524:	0000f906 	.word	0x0000f906
    e528:	0000f90a 	.word	0x0000f90a
    e52c:	0000a26d 	.word	0x0000a26d
    e530:	0000e289 	.word	0x0000e289

0000e534 <_sungetc_r>:
    e534:	b538      	push	{r3, r4, r5, lr}
    e536:	1c14      	adds	r4, r2, #0
    e538:	1c4b      	adds	r3, r1, #1
    e53a:	d102      	bne.n	e542 <_sungetc_r+0xe>
    e53c:	2001      	movs	r0, #1
    e53e:	4240      	negs	r0, r0
    e540:	e034      	b.n	e5ac <_sungetc_r+0x78>
    e542:	8993      	ldrh	r3, [r2, #12]
    e544:	2220      	movs	r2, #32
    e546:	4393      	bics	r3, r2
    e548:	6b62      	ldr	r2, [r4, #52]	; 0x34
    e54a:	81a3      	strh	r3, [r4, #12]
    e54c:	b2cd      	uxtb	r5, r1
    e54e:	6863      	ldr	r3, [r4, #4]
    e550:	2a00      	cmp	r2, #0
    e552:	d00f      	beq.n	e574 <_sungetc_r+0x40>
    e554:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e556:	4293      	cmp	r3, r2
    e558:	da06      	bge.n	e568 <_sungetc_r+0x34>
    e55a:	6823      	ldr	r3, [r4, #0]
    e55c:	3b01      	subs	r3, #1
    e55e:	6023      	str	r3, [r4, #0]
    e560:	701d      	strb	r5, [r3, #0]
    e562:	6863      	ldr	r3, [r4, #4]
    e564:	3301      	adds	r3, #1
    e566:	e01f      	b.n	e5a8 <_sungetc_r+0x74>
    e568:	1c21      	adds	r1, r4, #0
    e56a:	f7fd fefd 	bl	c368 <__submore>
    e56e:	2800      	cmp	r0, #0
    e570:	d0f3      	beq.n	e55a <_sungetc_r+0x26>
    e572:	e7e3      	b.n	e53c <_sungetc_r+0x8>
    e574:	6921      	ldr	r1, [r4, #16]
    e576:	6822      	ldr	r2, [r4, #0]
    e578:	2900      	cmp	r1, #0
    e57a:	d009      	beq.n	e590 <_sungetc_r+0x5c>
    e57c:	428a      	cmp	r2, r1
    e57e:	d907      	bls.n	e590 <_sungetc_r+0x5c>
    e580:	1e51      	subs	r1, r2, #1
    e582:	7808      	ldrb	r0, [r1, #0]
    e584:	42a8      	cmp	r0, r5
    e586:	d103      	bne.n	e590 <_sungetc_r+0x5c>
    e588:	3301      	adds	r3, #1
    e58a:	6021      	str	r1, [r4, #0]
    e58c:	6063      	str	r3, [r4, #4]
    e58e:	e00d      	b.n	e5ac <_sungetc_r+0x78>
    e590:	6423      	str	r3, [r4, #64]	; 0x40
    e592:	1c23      	adds	r3, r4, #0
    e594:	3344      	adds	r3, #68	; 0x44
    e596:	6363      	str	r3, [r4, #52]	; 0x34
    e598:	2303      	movs	r3, #3
    e59a:	63a3      	str	r3, [r4, #56]	; 0x38
    e59c:	1c23      	adds	r3, r4, #0
    e59e:	3346      	adds	r3, #70	; 0x46
    e5a0:	63e2      	str	r2, [r4, #60]	; 0x3c
    e5a2:	701d      	strb	r5, [r3, #0]
    e5a4:	6023      	str	r3, [r4, #0]
    e5a6:	2301      	movs	r3, #1
    e5a8:	1c28      	adds	r0, r5, #0
    e5aa:	6063      	str	r3, [r4, #4]
    e5ac:	bd38      	pop	{r3, r4, r5, pc}

0000e5ae <__ssrefill_r>:
    e5ae:	b510      	push	{r4, lr}
    e5b0:	1c0c      	adds	r4, r1, #0
    e5b2:	6b49      	ldr	r1, [r1, #52]	; 0x34
    e5b4:	2900      	cmp	r1, #0
    e5b6:	d00e      	beq.n	e5d6 <__ssrefill_r+0x28>
    e5b8:	1c23      	adds	r3, r4, #0
    e5ba:	3344      	adds	r3, #68	; 0x44
    e5bc:	4299      	cmp	r1, r3
    e5be:	d001      	beq.n	e5c4 <__ssrefill_r+0x16>
    e5c0:	f7fb fbda 	bl	9d78 <_free_r>
    e5c4:	2000      	movs	r0, #0
    e5c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
    e5c8:	6360      	str	r0, [r4, #52]	; 0x34
    e5ca:	6063      	str	r3, [r4, #4]
    e5cc:	4283      	cmp	r3, r0
    e5ce:	d002      	beq.n	e5d6 <__ssrefill_r+0x28>
    e5d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    e5d2:	6023      	str	r3, [r4, #0]
    e5d4:	e009      	b.n	e5ea <__ssrefill_r+0x3c>
    e5d6:	6923      	ldr	r3, [r4, #16]
    e5d8:	2220      	movs	r2, #32
    e5da:	6023      	str	r3, [r4, #0]
    e5dc:	2300      	movs	r3, #0
    e5de:	2001      	movs	r0, #1
    e5e0:	6063      	str	r3, [r4, #4]
    e5e2:	89a3      	ldrh	r3, [r4, #12]
    e5e4:	4240      	negs	r0, r0
    e5e6:	4313      	orrs	r3, r2
    e5e8:	81a3      	strh	r3, [r4, #12]
    e5ea:	bd10      	pop	{r4, pc}

0000e5ec <__ssvfiscanf_r>:
    e5ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    e5ee:	4cb5      	ldr	r4, [pc, #724]	; (e8c4 <__ssvfiscanf_r+0x2d8>)
    e5f0:	1c07      	adds	r7, r0, #0
    e5f2:	44a5      	add	sp, r4
    e5f4:	9303      	str	r3, [sp, #12]
    e5f6:	2300      	movs	r3, #0
    e5f8:	2086      	movs	r0, #134	; 0x86
    e5fa:	9348      	str	r3, [sp, #288]	; 0x120
    e5fc:	9349      	str	r3, [sp, #292]	; 0x124
    e5fe:	ab05      	add	r3, sp, #20
    e600:	934a      	str	r3, [sp, #296]	; 0x128
    e602:	23be      	movs	r3, #190	; 0xbe
    e604:	0040      	lsls	r0, r0, #1
    e606:	1c0d      	adds	r5, r1, #0
    e608:	9201      	str	r2, [sp, #4]
    e60a:	a902      	add	r1, sp, #8
    e60c:	4aae      	ldr	r2, [pc, #696]	; (e8c8 <__ssvfiscanf_r+0x2dc>)
    e60e:	005b      	lsls	r3, r3, #1
    e610:	1809      	adds	r1, r1, r0
    e612:	50ca      	str	r2, [r1, r3]
    e614:	4aad      	ldr	r2, [pc, #692]	; (e8cc <__ssvfiscanf_r+0x2e0>)
    e616:	a902      	add	r1, sp, #8
    e618:	3304      	adds	r3, #4
    e61a:	1809      	adds	r1, r1, r0
    e61c:	50ca      	str	r2, [r1, r3]
    e61e:	9b01      	ldr	r3, [sp, #4]
    e620:	781c      	ldrb	r4, [r3, #0]
    e622:	2c00      	cmp	r4, #0
    e624:	d100      	bne.n	e628 <__ssvfiscanf_r+0x3c>
    e626:	e144      	b.n	e8b2 <__ssvfiscanf_r+0x2c6>
    e628:	4ea9      	ldr	r6, [pc, #676]	; (e8d0 <__ssvfiscanf_r+0x2e4>)
    e62a:	6833      	ldr	r3, [r6, #0]
    e62c:	191b      	adds	r3, r3, r4
    e62e:	785a      	ldrb	r2, [r3, #1]
    e630:	2308      	movs	r3, #8
    e632:	4013      	ands	r3, r2
    e634:	d023      	beq.n	e67e <__ssvfiscanf_r+0x92>
    e636:	686b      	ldr	r3, [r5, #4]
    e638:	2b00      	cmp	r3, #0
    e63a:	dd10      	ble.n	e65e <__ssvfiscanf_r+0x72>
    e63c:	682b      	ldr	r3, [r5, #0]
    e63e:	6831      	ldr	r1, [r6, #0]
    e640:	781a      	ldrb	r2, [r3, #0]
    e642:	188a      	adds	r2, r1, r2
    e644:	7852      	ldrb	r2, [r2, #1]
    e646:	0712      	lsls	r2, r2, #28
    e648:	d515      	bpl.n	e676 <__ssvfiscanf_r+0x8a>
    e64a:	9a49      	ldr	r2, [sp, #292]	; 0x124
    e64c:	3301      	adds	r3, #1
    e64e:	9202      	str	r2, [sp, #8]
    e650:	3201      	adds	r2, #1
    e652:	9249      	str	r2, [sp, #292]	; 0x124
    e654:	686a      	ldr	r2, [r5, #4]
    e656:	602b      	str	r3, [r5, #0]
    e658:	3a01      	subs	r2, #1
    e65a:	606a      	str	r2, [r5, #4]
    e65c:	e7eb      	b.n	e636 <__ssvfiscanf_r+0x4a>
    e65e:	2186      	movs	r1, #134	; 0x86
    e660:	23c0      	movs	r3, #192	; 0xc0
    e662:	0049      	lsls	r1, r1, #1
    e664:	aa02      	add	r2, sp, #8
    e666:	1852      	adds	r2, r2, r1
    e668:	005b      	lsls	r3, r3, #1
    e66a:	58d3      	ldr	r3, [r2, r3]
    e66c:	1c38      	adds	r0, r7, #0
    e66e:	1c29      	adds	r1, r5, #0
    e670:	4798      	blx	r3
    e672:	2800      	cmp	r0, #0
    e674:	d0e2      	beq.n	e63c <__ssvfiscanf_r+0x50>
    e676:	9e01      	ldr	r6, [sp, #4]
    e678:	3601      	adds	r6, #1
    e67a:	9601      	str	r6, [sp, #4]
    e67c:	e7cf      	b.n	e61e <__ssvfiscanf_r+0x32>
    e67e:	9a01      	ldr	r2, [sp, #4]
    e680:	1c56      	adds	r6, r2, #1
    e682:	2c25      	cmp	r4, #37	; 0x25
    e684:	d14f      	bne.n	e726 <__ssvfiscanf_r+0x13a>
    e686:	9347      	str	r3, [sp, #284]	; 0x11c
    e688:	9345      	str	r3, [sp, #276]	; 0x114
    e68a:	7853      	ldrb	r3, [r2, #1]
    e68c:	2b2a      	cmp	r3, #42	; 0x2a
    e68e:	d102      	bne.n	e696 <__ssvfiscanf_r+0xaa>
    e690:	3b1a      	subs	r3, #26
    e692:	9345      	str	r3, [sp, #276]	; 0x114
    e694:	3601      	adds	r6, #1
    e696:	1c34      	adds	r4, r6, #0
    e698:	7821      	ldrb	r1, [r4, #0]
    e69a:	1c0b      	adds	r3, r1, #0
    e69c:	3b30      	subs	r3, #48	; 0x30
    e69e:	2b09      	cmp	r3, #9
    e6a0:	d809      	bhi.n	e6b6 <__ssvfiscanf_r+0xca>
    e6a2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    e6a4:	3401      	adds	r4, #1
    e6a6:	9301      	str	r3, [sp, #4]
    e6a8:	230a      	movs	r3, #10
    e6aa:	9a01      	ldr	r2, [sp, #4]
    e6ac:	4353      	muls	r3, r2
    e6ae:	3b30      	subs	r3, #48	; 0x30
    e6b0:	1859      	adds	r1, r3, r1
    e6b2:	9147      	str	r1, [sp, #284]	; 0x11c
    e6b4:	e7f0      	b.n	e698 <__ssvfiscanf_r+0xac>
    e6b6:	4e87      	ldr	r6, [pc, #540]	; (e8d4 <__ssvfiscanf_r+0x2e8>)
    e6b8:	2203      	movs	r2, #3
    e6ba:	1c30      	adds	r0, r6, #0
    e6bc:	f7fb fb40 	bl	9d40 <memchr>
    e6c0:	2800      	cmp	r0, #0
    e6c2:	d008      	beq.n	e6d6 <__ssvfiscanf_r+0xea>
    e6c4:	1b80      	subs	r0, r0, r6
    e6c6:	2601      	movs	r6, #1
    e6c8:	4086      	lsls	r6, r0
    e6ca:	1c30      	adds	r0, r6, #0
    e6cc:	9b45      	ldr	r3, [sp, #276]	; 0x114
    e6ce:	3401      	adds	r4, #1
    e6d0:	4318      	orrs	r0, r3
    e6d2:	9301      	str	r3, [sp, #4]
    e6d4:	9045      	str	r0, [sp, #276]	; 0x114
    e6d6:	1c66      	adds	r6, r4, #1
    e6d8:	7824      	ldrb	r4, [r4, #0]
    e6da:	2c67      	cmp	r4, #103	; 0x67
    e6dc:	d810      	bhi.n	e700 <__ssvfiscanf_r+0x114>
    e6de:	2c65      	cmp	r4, #101	; 0x65
    e6e0:	d300      	bcc.n	e6e4 <__ssvfiscanf_r+0xf8>
    e6e2:	e084      	b.n	e7ee <__ssvfiscanf_r+0x202>
    e6e4:	2c5b      	cmp	r4, #91	; 0x5b
    e6e6:	d05a      	beq.n	e79e <__ssvfiscanf_r+0x1b2>
    e6e8:	d805      	bhi.n	e6f6 <__ssvfiscanf_r+0x10a>
    e6ea:	2c00      	cmp	r4, #0
    e6ec:	d100      	bne.n	e6f0 <__ssvfiscanf_r+0x104>
    e6ee:	e0e2      	b.n	e8b6 <__ssvfiscanf_r+0x2ca>
    e6f0:	2c25      	cmp	r4, #37	; 0x25
    e6f2:	d018      	beq.n	e726 <__ssvfiscanf_r+0x13a>
    e6f4:	e07d      	b.n	e7f2 <__ssvfiscanf_r+0x206>
    e6f6:	2c63      	cmp	r4, #99	; 0x63
    e6f8:	d05f      	beq.n	e7ba <__ssvfiscanf_r+0x1ce>
    e6fa:	2c64      	cmp	r4, #100	; 0x64
    e6fc:	d046      	beq.n	e78c <__ssvfiscanf_r+0x1a0>
    e6fe:	e078      	b.n	e7f2 <__ssvfiscanf_r+0x206>
    e700:	2c70      	cmp	r4, #112	; 0x70
    e702:	d034      	beq.n	e76e <__ssvfiscanf_r+0x182>
    e704:	d807      	bhi.n	e716 <__ssvfiscanf_r+0x12a>
    e706:	2c6e      	cmp	r4, #110	; 0x6e
    e708:	d05f      	beq.n	e7ca <__ssvfiscanf_r+0x1de>
    e70a:	d841      	bhi.n	e790 <__ssvfiscanf_r+0x1a4>
    e70c:	2c69      	cmp	r4, #105	; 0x69
    e70e:	d170      	bne.n	e7f2 <__ssvfiscanf_r+0x206>
    e710:	2300      	movs	r3, #0
    e712:	9346      	str	r3, [sp, #280]	; 0x118
    e714:	e041      	b.n	e79a <__ssvfiscanf_r+0x1ae>
    e716:	2c75      	cmp	r4, #117	; 0x75
    e718:	d038      	beq.n	e78c <__ssvfiscanf_r+0x1a0>
    e71a:	2c78      	cmp	r4, #120	; 0x78
    e71c:	d02d      	beq.n	e77a <__ssvfiscanf_r+0x18e>
    e71e:	2c73      	cmp	r4, #115	; 0x73
    e720:	d167      	bne.n	e7f2 <__ssvfiscanf_r+0x206>
    e722:	2302      	movs	r3, #2
    e724:	e047      	b.n	e7b6 <__ssvfiscanf_r+0x1ca>
    e726:	686b      	ldr	r3, [r5, #4]
    e728:	2b00      	cmp	r3, #0
    e72a:	dd0e      	ble.n	e74a <__ssvfiscanf_r+0x15e>
    e72c:	682b      	ldr	r3, [r5, #0]
    e72e:	781a      	ldrb	r2, [r3, #0]
    e730:	42a2      	cmp	r2, r4
    e732:	d000      	beq.n	e736 <__ssvfiscanf_r+0x14a>
    e734:	e0bd      	b.n	e8b2 <__ssvfiscanf_r+0x2c6>
    e736:	3301      	adds	r3, #1
    e738:	686a      	ldr	r2, [r5, #4]
    e73a:	602b      	str	r3, [r5, #0]
    e73c:	9b49      	ldr	r3, [sp, #292]	; 0x124
    e73e:	3a01      	subs	r2, #1
    e740:	9301      	str	r3, [sp, #4]
    e742:	3301      	adds	r3, #1
    e744:	606a      	str	r2, [r5, #4]
    e746:	9349      	str	r3, [sp, #292]	; 0x124
    e748:	e797      	b.n	e67a <__ssvfiscanf_r+0x8e>
    e74a:	2186      	movs	r1, #134	; 0x86
    e74c:	23c0      	movs	r3, #192	; 0xc0
    e74e:	0049      	lsls	r1, r1, #1
    e750:	aa02      	add	r2, sp, #8
    e752:	1852      	adds	r2, r2, r1
    e754:	005b      	lsls	r3, r3, #1
    e756:	58d3      	ldr	r3, [r2, r3]
    e758:	1c38      	adds	r0, r7, #0
    e75a:	1c29      	adds	r1, r5, #0
    e75c:	4798      	blx	r3
    e75e:	2800      	cmp	r0, #0
    e760:	d0e4      	beq.n	e72c <__ssvfiscanf_r+0x140>
    e762:	9848      	ldr	r0, [sp, #288]	; 0x120
    e764:	2800      	cmp	r0, #0
    e766:	d000      	beq.n	e76a <__ssvfiscanf_r+0x17e>
    e768:	e09f      	b.n	e8aa <__ssvfiscanf_r+0x2be>
    e76a:	3801      	subs	r0, #1
    e76c:	e0a5      	b.n	e8ba <__ssvfiscanf_r+0x2ce>
    e76e:	9b45      	ldr	r3, [sp, #276]	; 0x114
    e770:	9301      	str	r3, [sp, #4]
    e772:	2320      	movs	r3, #32
    e774:	9a01      	ldr	r2, [sp, #4]
    e776:	4313      	orrs	r3, r2
    e778:	9345      	str	r3, [sp, #276]	; 0x114
    e77a:	9b45      	ldr	r3, [sp, #276]	; 0x114
    e77c:	9301      	str	r3, [sp, #4]
    e77e:	2380      	movs	r3, #128	; 0x80
    e780:	9a01      	ldr	r2, [sp, #4]
    e782:	009b      	lsls	r3, r3, #2
    e784:	4313      	orrs	r3, r2
    e786:	9345      	str	r3, [sp, #276]	; 0x114
    e788:	2310      	movs	r3, #16
    e78a:	e002      	b.n	e792 <__ssvfiscanf_r+0x1a6>
    e78c:	230a      	movs	r3, #10
    e78e:	e000      	b.n	e792 <__ssvfiscanf_r+0x1a6>
    e790:	2308      	movs	r3, #8
    e792:	9346      	str	r3, [sp, #280]	; 0x118
    e794:	2304      	movs	r3, #4
    e796:	2c6e      	cmp	r4, #110	; 0x6e
    e798:	dc0d      	bgt.n	e7b6 <__ssvfiscanf_r+0x1ca>
    e79a:	2303      	movs	r3, #3
    e79c:	e00b      	b.n	e7b6 <__ssvfiscanf_r+0x1ca>
    e79e:	1c31      	adds	r1, r6, #0
    e7a0:	a805      	add	r0, sp, #20
    e7a2:	f7fc fcf3 	bl	b18c <__sccl>
    e7a6:	9b45      	ldr	r3, [sp, #276]	; 0x114
    e7a8:	1c06      	adds	r6, r0, #0
    e7aa:	9301      	str	r3, [sp, #4]
    e7ac:	2340      	movs	r3, #64	; 0x40
    e7ae:	9a01      	ldr	r2, [sp, #4]
    e7b0:	4313      	orrs	r3, r2
    e7b2:	9345      	str	r3, [sp, #276]	; 0x114
    e7b4:	2301      	movs	r3, #1
    e7b6:	934b      	str	r3, [sp, #300]	; 0x12c
    e7b8:	e01f      	b.n	e7fa <__ssvfiscanf_r+0x20e>
    e7ba:	9b45      	ldr	r3, [sp, #276]	; 0x114
    e7bc:	9301      	str	r3, [sp, #4]
    e7be:	2340      	movs	r3, #64	; 0x40
    e7c0:	9a01      	ldr	r2, [sp, #4]
    e7c2:	4313      	orrs	r3, r2
    e7c4:	9345      	str	r3, [sp, #276]	; 0x114
    e7c6:	2300      	movs	r3, #0
    e7c8:	e7f5      	b.n	e7b6 <__ssvfiscanf_r+0x1ca>
    e7ca:	9945      	ldr	r1, [sp, #276]	; 0x114
    e7cc:	06cb      	lsls	r3, r1, #27
    e7ce:	d500      	bpl.n	e7d2 <__ssvfiscanf_r+0x1e6>
    e7d0:	e753      	b.n	e67a <__ssvfiscanf_r+0x8e>
    e7d2:	9b03      	ldr	r3, [sp, #12]
    e7d4:	9a49      	ldr	r2, [sp, #292]	; 0x124
    e7d6:	07c8      	lsls	r0, r1, #31
    e7d8:	d504      	bpl.n	e7e4 <__ssvfiscanf_r+0x1f8>
    e7da:	1d19      	adds	r1, r3, #4
    e7dc:	9103      	str	r1, [sp, #12]
    e7de:	681b      	ldr	r3, [r3, #0]
    e7e0:	801a      	strh	r2, [r3, #0]
    e7e2:	e74a      	b.n	e67a <__ssvfiscanf_r+0x8e>
    e7e4:	1d19      	adds	r1, r3, #4
    e7e6:	9103      	str	r1, [sp, #12]
    e7e8:	681b      	ldr	r3, [r3, #0]
    e7ea:	601a      	str	r2, [r3, #0]
    e7ec:	e745      	b.n	e67a <__ssvfiscanf_r+0x8e>
    e7ee:	2305      	movs	r3, #5
    e7f0:	e7e1      	b.n	e7b6 <__ssvfiscanf_r+0x1ca>
    e7f2:	2303      	movs	r3, #3
    e7f4:	934b      	str	r3, [sp, #300]	; 0x12c
    e7f6:	3307      	adds	r3, #7
    e7f8:	9346      	str	r3, [sp, #280]	; 0x118
    e7fa:	686b      	ldr	r3, [r5, #4]
    e7fc:	2b00      	cmp	r3, #0
    e7fe:	dd04      	ble.n	e80a <__ssvfiscanf_r+0x21e>
    e800:	9b45      	ldr	r3, [sp, #276]	; 0x114
    e802:	9301      	str	r3, [sp, #4]
    e804:	065b      	lsls	r3, r3, #25
    e806:	d518      	bpl.n	e83a <__ssvfiscanf_r+0x24e>
    e808:	e01f      	b.n	e84a <__ssvfiscanf_r+0x25e>
    e80a:	2186      	movs	r1, #134	; 0x86
    e80c:	23c0      	movs	r3, #192	; 0xc0
    e80e:	0049      	lsls	r1, r1, #1
    e810:	aa02      	add	r2, sp, #8
    e812:	1852      	adds	r2, r2, r1
    e814:	005b      	lsls	r3, r3, #1
    e816:	58d3      	ldr	r3, [r2, r3]
    e818:	1c38      	adds	r0, r7, #0
    e81a:	1c29      	adds	r1, r5, #0
    e81c:	4798      	blx	r3
    e81e:	2800      	cmp	r0, #0
    e820:	d0ee      	beq.n	e800 <__ssvfiscanf_r+0x214>
    e822:	e79e      	b.n	e762 <__ssvfiscanf_r+0x176>
    e824:	9a49      	ldr	r2, [sp, #292]	; 0x124
    e826:	9201      	str	r2, [sp, #4]
    e828:	3201      	adds	r2, #1
    e82a:	9249      	str	r2, [sp, #292]	; 0x124
    e82c:	686a      	ldr	r2, [r5, #4]
    e82e:	3a01      	subs	r2, #1
    e830:	606a      	str	r2, [r5, #4]
    e832:	2a00      	cmp	r2, #0
    e834:	dd13      	ble.n	e85e <__ssvfiscanf_r+0x272>
    e836:	3301      	adds	r3, #1
    e838:	602b      	str	r3, [r5, #0]
    e83a:	682b      	ldr	r3, [r5, #0]
    e83c:	4924      	ldr	r1, [pc, #144]	; (e8d0 <__ssvfiscanf_r+0x2e4>)
    e83e:	781a      	ldrb	r2, [r3, #0]
    e840:	6809      	ldr	r1, [r1, #0]
    e842:	188a      	adds	r2, r1, r2
    e844:	7852      	ldrb	r2, [r2, #1]
    e846:	0712      	lsls	r2, r2, #28
    e848:	d4ec      	bmi.n	e824 <__ssvfiscanf_r+0x238>
    e84a:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    e84c:	2b02      	cmp	r3, #2
    e84e:	dc13      	bgt.n	e878 <__ssvfiscanf_r+0x28c>
    e850:	1c38      	adds	r0, r7, #0
    e852:	a945      	add	r1, sp, #276	; 0x114
    e854:	1c2a      	adds	r2, r5, #0
    e856:	ab03      	add	r3, sp, #12
    e858:	f7fc fab6 	bl	adc8 <_scanf_chars>
    e85c:	e01f      	b.n	e89e <__ssvfiscanf_r+0x2b2>
    e85e:	2186      	movs	r1, #134	; 0x86
    e860:	23c0      	movs	r3, #192	; 0xc0
    e862:	0049      	lsls	r1, r1, #1
    e864:	aa02      	add	r2, sp, #8
    e866:	1852      	adds	r2, r2, r1
    e868:	005b      	lsls	r3, r3, #1
    e86a:	58d3      	ldr	r3, [r2, r3]
    e86c:	1c38      	adds	r0, r7, #0
    e86e:	1c29      	adds	r1, r5, #0
    e870:	4798      	blx	r3
    e872:	2800      	cmp	r0, #0
    e874:	d0e1      	beq.n	e83a <__ssvfiscanf_r+0x24e>
    e876:	e774      	b.n	e762 <__ssvfiscanf_r+0x176>
    e878:	2b04      	cmp	r3, #4
    e87a:	dc06      	bgt.n	e88a <__ssvfiscanf_r+0x29e>
    e87c:	1c38      	adds	r0, r7, #0
    e87e:	a945      	add	r1, sp, #276	; 0x114
    e880:	1c2a      	adds	r2, r5, #0
    e882:	ab03      	add	r3, sp, #12
    e884:	f7fc fafe 	bl	ae84 <_scanf_i>
    e888:	e009      	b.n	e89e <__ssvfiscanf_r+0x2b2>
    e88a:	4b13      	ldr	r3, [pc, #76]	; (e8d8 <__ssvfiscanf_r+0x2ec>)
    e88c:	2b00      	cmp	r3, #0
    e88e:	d100      	bne.n	e892 <__ssvfiscanf_r+0x2a6>
    e890:	e6f3      	b.n	e67a <__ssvfiscanf_r+0x8e>
    e892:	1c38      	adds	r0, r7, #0
    e894:	a945      	add	r1, sp, #276	; 0x114
    e896:	1c2a      	adds	r2, r5, #0
    e898:	ab03      	add	r3, sp, #12
    e89a:	f7fc f8ab 	bl	a9f4 <_scanf_float>
    e89e:	2801      	cmp	r0, #1
    e8a0:	d007      	beq.n	e8b2 <__ssvfiscanf_r+0x2c6>
    e8a2:	2802      	cmp	r0, #2
    e8a4:	d000      	beq.n	e8a8 <__ssvfiscanf_r+0x2bc>
    e8a6:	e6e8      	b.n	e67a <__ssvfiscanf_r+0x8e>
    e8a8:	e75b      	b.n	e762 <__ssvfiscanf_r+0x176>
    e8aa:	89ab      	ldrh	r3, [r5, #12]
    e8ac:	065b      	lsls	r3, r3, #25
    e8ae:	d504      	bpl.n	e8ba <__ssvfiscanf_r+0x2ce>
    e8b0:	e001      	b.n	e8b6 <__ssvfiscanf_r+0x2ca>
    e8b2:	9848      	ldr	r0, [sp, #288]	; 0x120
    e8b4:	e001      	b.n	e8ba <__ssvfiscanf_r+0x2ce>
    e8b6:	2001      	movs	r0, #1
    e8b8:	4240      	negs	r0, r0
    e8ba:	23a7      	movs	r3, #167	; 0xa7
    e8bc:	009b      	lsls	r3, r3, #2
    e8be:	449d      	add	sp, r3
    e8c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e8c2:	46c0      	nop			; (mov r8, r8)
    e8c4:	fffffd64 	.word	0xfffffd64
    e8c8:	0000e535 	.word	0x0000e535
    e8cc:	0000e5af 	.word	0x0000e5af
    e8d0:	20000138 	.word	0x20000138
    e8d4:	0000f906 	.word	0x0000f906
    e8d8:	0000a9f5 	.word	0x0000a9f5

0000e8dc <_read_r>:
    e8dc:	b538      	push	{r3, r4, r5, lr}
    e8de:	1c05      	adds	r5, r0, #0
    e8e0:	2000      	movs	r0, #0
    e8e2:	4c07      	ldr	r4, [pc, #28]	; (e900 <_read_r+0x24>)
    e8e4:	6020      	str	r0, [r4, #0]
    e8e6:	1c08      	adds	r0, r1, #0
    e8e8:	1c11      	adds	r1, r2, #0
    e8ea:	1c1a      	adds	r2, r3, #0
    e8ec:	f7f5 fa58 	bl	3da0 <_read>
    e8f0:	1c43      	adds	r3, r0, #1
    e8f2:	d103      	bne.n	e8fc <_read_r+0x20>
    e8f4:	6823      	ldr	r3, [r4, #0]
    e8f6:	2b00      	cmp	r3, #0
    e8f8:	d000      	beq.n	e8fc <_read_r+0x20>
    e8fa:	602b      	str	r3, [r5, #0]
    e8fc:	bd38      	pop	{r3, r4, r5, pc}
    e8fe:	46c0      	nop			; (mov r8, r8)
    e900:	200047c8 	.word	0x200047c8

0000e904 <_malloc_usable_size_r>:
    e904:	1f0b      	subs	r3, r1, #4
    e906:	681a      	ldr	r2, [r3, #0]
    e908:	1f10      	subs	r0, r2, #4
    e90a:	2a00      	cmp	r2, #0
    e90c:	da04      	bge.n	e918 <_malloc_usable_size_r+0x14>
    e90e:	1889      	adds	r1, r1, r2
    e910:	3904      	subs	r1, #4
    e912:	680b      	ldr	r3, [r1, #0]
    e914:	18d0      	adds	r0, r2, r3
    e916:	3804      	subs	r0, #4
    e918:	4770      	bx	lr
	...

0000e91c <__gnu_thumb1_case_uqi>:
    e91c:	b402      	push	{r1}
    e91e:	4671      	mov	r1, lr
    e920:	0849      	lsrs	r1, r1, #1
    e922:	0049      	lsls	r1, r1, #1
    e924:	5c09      	ldrb	r1, [r1, r0]
    e926:	0049      	lsls	r1, r1, #1
    e928:	448e      	add	lr, r1
    e92a:	bc02      	pop	{r1}
    e92c:	4770      	bx	lr
    e92e:	46c0      	nop			; (mov r8, r8)
    e930:	00000152 	.word	0x00000152
    e934:	00000152 	.word	0x00000152
    e938:	00000140 	.word	0x00000140
    e93c:	00000140 	.word	0x00000140
    e940:	00000152 	.word	0x00000152
    e944:	00000152 	.word	0x00000152
    e948:	00000152 	.word	0x00000152
    e94c:	00000152 	.word	0x00000152
    e950:	00000152 	.word	0x00000152
    e954:	00000152 	.word	0x00000152
    e958:	00000152 	.word	0x00000152
    e95c:	00000152 	.word	0x00000152
    e960:	00000152 	.word	0x00000152
    e964:	00000152 	.word	0x00000152
    e968:	00000152 	.word	0x00000152
    e96c:	00000152 	.word	0x00000152
    e970:	00000140 	.word	0x00000140
    e974:	00000140 	.word	0x00000140
    e978:	00000152 	.word	0x00000152
    e97c:	00000140 	.word	0x00000140
    e980:	454c4449 	.word	0x454c4449
    e984:	00000000 	.word	0x00000000
    e988:	2d6a626f 	.word	0x2d6a626f
    e98c:	6e69703e 	.word	0x6e69703e
    e990:	203d2120 	.word	0x203d2120
    e994:	6e695028 	.word	0x6e695028
    e998:	656d614e 	.word	0x656d614e
    e99c:	00434e29 	.word	0x00434e29
    e9a0:	2e2f2e2e 	.word	0x2e2f2e2e
    e9a4:	65626d2f 	.word	0x65626d2f
    e9a8:	41542f64 	.word	0x41542f64
    e9ac:	54454752 	.word	0x54454752
    e9b0:	4d41535f 	.word	0x4d41535f
    e9b4:	47313252 	.word	0x47313252
    e9b8:	2f413831 	.word	0x2f413831
    e9bc:	47524154 	.word	0x47524154
    e9c0:	415f5445 	.word	0x415f5445
    e9c4:	6c656d74 	.word	0x6c656d74
    e9c8:	5241542f 	.word	0x5241542f
    e9cc:	5f544547 	.word	0x5f544547
    e9d0:	5f4d4153 	.word	0x5f4d4153
    e9d4:	74726f43 	.word	0x74726f43
    e9d8:	304d7865 	.word	0x304d7865
    e9dc:	70672f50 	.word	0x70672f50
    e9e0:	6f5f6f69 	.word	0x6f5f6f69
    e9e4:	63656a62 	.word	0x63656a62
    e9e8:	00682e74 	.word	0x00682e74
    e9ec:	65746e69 	.word	0x65746e69
    e9f0:	6c616e72 	.word	0x6c616e72
    e9f4:	6f6c6320 	.word	0x6f6c6320
    e9f8:	63206b63 	.word	0x63206b63
    e9fc:	69666e6f 	.word	0x69666e6f
    ea00:	000a0d67 	.word	0x000a0d67
    ea04:	7774656e 	.word	0x7774656e
    ea08:	206b726f 	.word	0x206b726f
    ea0c:	666e6f63 	.word	0x666e6f63
    ea10:	0a0d6769 	.word	0x0a0d6769
    ea14:	00000000 	.word	0x00000000
    ea18:	0a0d0a0d 	.word	0x0a0d0a0d
    ea1c:	2a2a2a2a 	.word	0x2a2a2a2a
    ea20:	2a2a2a2a 	.word	0x2a2a2a2a
    ea24:	2a2a2a2a 	.word	0x2a2a2a2a
    ea28:	2a2a2a2a 	.word	0x2a2a2a2a
    ea2c:	2a2a2a2a 	.word	0x2a2a2a2a
    ea30:	2a2a2a2a 	.word	0x2a2a2a2a
    ea34:	2a2a2a2a 	.word	0x2a2a2a2a
    ea38:	2a2a2a2a 	.word	0x2a2a2a2a
    ea3c:	2a2a2a2a 	.word	0x2a2a2a2a
    ea40:	2a2a2a2a 	.word	0x2a2a2a2a
    ea44:	2a2a2a2a 	.word	0x2a2a2a2a
    ea48:	2a2a2a2a 	.word	0x2a2a2a2a
    ea4c:	2a2a2a2a 	.word	0x2a2a2a2a
    ea50:	2a2a2a2a 	.word	0x2a2a2a2a
    ea54:	2a2a2a2a 	.word	0x2a2a2a2a
    ea58:	2a2a2a2a 	.word	0x2a2a2a2a
    ea5c:	2a2a2a2a 	.word	0x2a2a2a2a
    ea60:	0a0d2a2a 	.word	0x0a0d2a2a
    ea64:	00000000 	.word	0x00000000
    ea68:	6b636974 	.word	0x6b636974
    ea6c:	6d697420 	.word	0x6d697420
    ea70:	25203a65 	.word	0x25203a65
    ea74:	6d20756c 	.word	0x6d20756c
    ea78:	000a0d73 	.word	0x000a0d73
    ea7c:	7473614d 	.word	0x7473614d
    ea80:	63207265 	.word	0x63207265
    ea84:	6b636f6c 	.word	0x6b636f6c
    ea88:	00000a0d 	.word	0x00000a0d
    ea8c:	20646e65 	.word	0x20646e65
    ea90:	666e6f63 	.word	0x666e6f63
    ea94:	61206769 	.word	0x61206769
    ea98:	696c7070 	.word	0x696c7070
    ea9c:	69746163 	.word	0x69746163
    eaa0:	62206e6f 	.word	0x62206e6f
    eaa4:	6e696765 	.word	0x6e696765
    eaa8:	00000a0d 	.word	0x00000a0d
    eaac:	2a2a0a0d 	.word	0x2a2a0a0d
    eab0:	2a2a2a2a 	.word	0x2a2a2a2a
    eab4:	2a2a2a2a 	.word	0x2a2a2a2a
    eab8:	2a2a2a2a 	.word	0x2a2a2a2a
    eabc:	2a2a2a2a 	.word	0x2a2a2a2a
    eac0:	2a2a2a2a 	.word	0x2a2a2a2a
    eac4:	2a2a2a2a 	.word	0x2a2a2a2a
    eac8:	2a2a2a2a 	.word	0x2a2a2a2a
    eacc:	2a2a2a2a 	.word	0x2a2a2a2a
    ead0:	2a2a2a2a 	.word	0x2a2a2a2a
    ead4:	2a2a2a2a 	.word	0x2a2a2a2a
    ead8:	2a2a2a2a 	.word	0x2a2a2a2a
    eadc:	2a2a2a2a 	.word	0x2a2a2a2a
    eae0:	2a2a2a2a 	.word	0x2a2a2a2a
    eae4:	2a2a2a2a 	.word	0x2a2a2a2a
    eae8:	2a2a2a2a 	.word	0x2a2a2a2a
    eaec:	2a2a2a2a 	.word	0x2a2a2a2a
    eaf0:	2a2a2a2a 	.word	0x2a2a2a2a
    eaf4:	0a0d0a0d 	.word	0x0a0d0a0d
    eaf8:	00000000 	.word	0x00000000
    eafc:	70617274 	.word	0x70617274
    eb00:	21212121 	.word	0x21212121
    eb04:	21212121 	.word	0x21212121
    eb08:	21212121 	.word	0x21212121
    eb0c:	21212121 	.word	0x21212121
    eb10:	21212121 	.word	0x21212121
    eb14:	21212121 	.word	0x21212121
    eb18:	21212121 	.word	0x21212121
    eb1c:	21212121 	.word	0x21212121
    eb20:	21212121 	.word	0x21212121
    eb24:	21212121 	.word	0x21212121
    eb28:	0a0d2121 	.word	0x0a0d2121
    eb2c:	00000000 	.word	0x00000000
    eb30:	000023e8 	.word	0x000023e8
    eb34:	00002408 	.word	0x00002408
    eb38:	000023f8 	.word	0x000023f8
    eb3c:	00002428 	.word	0x00002428
    eb40:	00002418 	.word	0x00002418
    eb44:	00002438 	.word	0x00002438
    eb48:	0000262e 	.word	0x0000262e
    eb4c:	000026f6 	.word	0x000026f6
    eb50:	00002650 	.word	0x00002650
    eb54:	00002696 	.word	0x00002696
    eb58:	00002678 	.word	0x00002678
    eb5c:	000026a0 	.word	0x000026a0
    eb60:	000026b4 	.word	0x000026b4
    eb64:	000026c8 	.word	0x000026c8
    eb68:	000026e8 	.word	0x000026e8

0000eb6c <_ZZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_tE8pwrtable>:
    eb6c:	0f0f0f0f 0e0e0e0f 0c0c0d0d 08090a0b     ................
    eb7c:	02040607 00000000 6e72656b 63206c65     ........kernel c
    eb8c:	69666e6f 000a0d67 00494d48 656d6974     onfig...HMI.time
    eb9c:	00000000 666e6f63 70206669 0a0d7370     ....confif pps..
    ebac:	00000000 666f5309 72617774 6f432065     .....Software Co
    ebbc:	63657272 6e6f6974 00000020 70750909     rrection .....up
    ebcc:	65746164 6d697420 6f632065 203a7272     date time corr: 
    ebdc:	25286425 73202964 206e6769 6425203a     %d(%d) sign : %d
    ebec:	74697720 64252068 6d617320 00656c70      with %d sample.
    ebfc:	646e6509 666f5320 72617774 6f632065     .end Software co
    ec0c:	63657272 6e6f6974 00000000 72614809     rrection.....Har
    ec1c:	72617764 6f632065 63657272 6e6f6974     dware correction
    ec2c:	00000000 62460909 3a747365 20752520     ......Fbest: %u 
    ec3c:	202c7a48 65737546 7525203d 207a4820     Hz, Fuse= %u Hz 
    ec4c:	6e756f63 64253d74 00000000 646e6509     count=%d.....end
    ec5c:	726f6320 74636572 006e6f69 70750909      correction...up
    ec6c:	65746164 6f6c6320 6f206b63 65736666     date clock offse
    ec7c:	2b203a74 73756c25 646c252c 6c252b5b     t: +%lus,%ld[+%l
    ec8c:	252c7375 6d20756c 257e2c73 7520756c     us,%lu ms,~%lu u
    ec9c:	74095d73 6c25203a 6c252c75 00000075     s].t: %lu,%lu...
    ecac:	70750909 65746164 6f6c6320 6f206b63     ..update clock o
    ecbc:	65736666 2d203a74 73756c25 646c252c     ffset: -%lus,%ld
    eccc:	6c252d5b 252c7375 736d756c 6c257e2c     [-%lus,%lums,~%l
    ecdc:	73752075 3a74095d 756c2520 756c252c     u us].t: %lu,%lu
    ecec:	00000000 6e797309 65732063 0000646e     .....sync send..
    ecfc:	6c656409 72207961 6f707365 2065736e     .delay response 
    ed0c:	646e6573 64692820 6425203a 00000029     send (id: %d)...
    ed1c:	72724509 20727565 00637263 6c656409     .Erreur crc..del
    ed2c:	72207961 65757165 72207473 69656365     ay request recei
    ed3c:	00006576 70657209 2074726f 65636572     ve...report rece
    ed4c:	00657669 65727265 63207275 00006372     ive.erreur crc..
    ed5c:	72724509 20727565 65707974 6b6e7520     .Erreur type unk
    ed6c:	00776f6e 666e6f63 48206769 0d20494d     now.config HMI .
    ed7c:	0000000a                                ....

0000ed80 <__stdin_name>:
    ed80:	6474732f 00006e69                       /stdin..

0000ed88 <__stderr_name>:
    ed88:	6474732f 00727265                       /stderr.

0000ed90 <__stdout_name>:
    ed90:	6474732f 0074756f                       /stdout.

0000ed98 <_ZTVN4mbed10FileHandleE>:
	...
    eda0:	00003e59 00003e59 00003e59 00003e59     Y>..Y>..Y>..Y>..
    edb0:	00003e59 00003e59 00003bad 00000000     Y>..Y>...;......
    edc0:	00000000 0070253a 65637845 6f697470     ....:%p.Exceptio
    edd0:	0000006e                                n...

0000edd4 <CSWTCH.41>:
    edd4:	00100000 00200000 00300000 006a626f     ...... ...0.obj.
    ede4:	4a5c3a43 696b6e65 775c736e 736b726f     C:\Jenkins\works
    edf4:	65636170 65626d5c 2d322d64 6c697562     pace\mbed-2-buil
    ee04:	696c2d64 72617262 61685c79 61745c6c     d-library\hal\ta
    ee14:	74656772 61685c73 41545c6c 54454752     rgets\hal\TARGET
    ee24:	6d74415f 545c6c65 45475241 41535f54     _Atmel\TARGET_SA
    ee34:	6f435f4d 78657472 5c50304d 69726573     M_CortexM0P\seri
    ee44:	615f6c61 632e6970 00000000 75616228     al_api.c....(bau
    ee54:	74617264 3d3d2065 30313120 7c7c2029     drate == 110) ||
    ee64:	61622820 61726475 3d206574 3531203d      (baudrate == 15
    ee74:	7c202930 6228207c 72647561 20657461     0) || (baudrate 
    ee84:	33203d3d 20293030 28207c7c 64756162     == 300) || (baud
    ee94:	65746172 203d3d20 30303231 7c7c2029     rate == 1200) ||
    eea4:	61622820 61726475 3d206574 3432203d      (baudrate == 24
    eeb4:	20293030 28207c7c 64756162 65746172     00) || (baudrate
    eec4:	203d3d20 30303834 7c7c2029 61622820      == 4800) || (ba
    eed4:	61726475 3d206574 3639203d 20293030     udrate == 9600) 
    eee4:	28207c7c 64756162 65746172 203d3d20     || (baudrate == 
    eef4:	30323931 7c202930 6228207c 72647561     19200) || (baudr
    ef04:	20657461 33203d3d 30303438 7c7c2029     ate == 38400) ||
    ef14:	61622820 61726475 3d206574 3735203d      (baudrate == 57
    ef24:	29303036 207c7c20 75616228 74617264     600) || (baudrat
    ef34:	3d3d2065 35313120 29303032 207c7c20     e == 115200) || 
    ef44:	75616228 74617264 3d3d2065 30333220     (baudrate == 230
    ef54:	29303034 207c7c20 75616228 74617264     400) || (baudrat
    ef64:	3d3d2065 30363420 29303038 207c7c20     e == 460800) || 
    ef74:	75616228 74617264 3d3d2065 31323920     (baudrate == 921
    ef84:	29303036 00000000 6f747328 69625f70     600)....(stop_bi
    ef94:	3d207374 2931203d 207c7c20 6f747328     ts == 1) || (sto
    efa4:	69625f70 3d207374 2932203d 00000000     p_bits == 2)....
    efb4:	72617028 20797469 50203d3d 74697261     (parity == Parit
    efc4:	6e6f4e79 7c202965 7028207c 74697261     yNone) || (parit
    efd4:	3d3d2079 72615020 4f797469 20296464     y == ParityOdd) 
    efe4:	28207c7c 69726170 3d207974 6150203d     || (parity == Pa
    eff4:	79746972 6e657645 00000029 74616428     rityEven)...(dat
    f004:	69625f61 3d207374 2935203d 207c7c20     a_bits == 5) || 
    f014:	74616428 69625f61 3d207374 2936203d     (data_bits == 6)
    f024:	207c7c20 74616428 69625f61 3d207374      || (data_bits =
    f034:	2937203d 207c7c20 74616428 69625f61     = 7) || (data_bi
    f044:	3d207374 2938203d 00000000 21207874     ts == 8)....tx !
    f054:	7628203d 2a64696f 00003029 74646977     = (void*)0..widt
    f064:	3d3d2068 00003820 21207872 7628203d     h == 8..rx != (v
    f074:	2a64696f 00003029 00000000              oid*)0......

0000f080 <_ZTVN4mbed3SPIE>:
	...
    f088:	00004b85 00004a15 00004a45 00000000     .K...J..EJ......

0000f098 <_ZTVN4mbed6SerialE>:
	...
    f0a0:	00002c8d 000039e5 00004b99 00004bb1     .,...9...K...K..
    f0b0:	ffffff24 00000000 00004d29 00004d25     $.......)M..%M..
    f0c0:	00004d55 00004d85 00004d81 00004d89     UM...M...M...M..
    f0d0:	00004d8d 00002cb5 00003a19 00004bb9     .M...,...:...K..
    f0e0:	00004ba1 ffffff20 00000000 00002cc5     .K.. ........,..
    f0f0:	00003a29 00000000                       ):......

0000f0f8 <_ZTVN4mbed10SerialBaseE>:
	...
    f100:	00002c89 00002cd5                       .,...,..

0000f108 <_ZTVN4mbed6StreamE>:
	...
    f110:	00004d29 00004d25 00004d55 00004d85     )M..%M..UM...M..
    f120:	00004d81 00004d89 00004d8d 00000000     .M...M...M......
    f130:	00000000 00003e59 00003e59 fffffffc     ....Y>..Y>......
	...
    f14c:	00002b77 6465626d 73736120 61747265     w+..mbed asserta
    f15c:	6e6f6974 69616620 3a64656c 2c732520     tion failed: %s,
    f16c:	6c696620 25203a65 6c202c73 20656e69      file: %s, line 
    f17c:	0a206425 00000000 4a5c3a43 696b6e65     %d .....C:\Jenki
    f18c:	775c736e 736b726f 65636170 65626d5c     ns\workspace\mbe
    f19c:	2d322d64 6c697562 696c2d64 72617262     d-2-build-librar
    f1ac:	622e5c79 646c6975 65626d5c 41545c64     y\.build\mbed\TA
    f1bc:	54454752 4d41535f 47313252 5c413831     RGET_SAMR21G18A\
    f1cc:	47524154 415f5445 6c656d74 5241545c     TARGET_Atmel\TAR
    f1dc:	5f544547 5f4d4153 74726f43 304d7865     GET_SAM_CortexM0
    f1ec:	70672f50 6f5f6f69 63656a62 00682e74     P/gpio_object.h.
    f1fc:	6c756f63 6f6e2064 69702074 74756f6e     could not pinout
    f20c:	00000000 6d6e6970 6d207061 6d2d7369     ....pinmap mis-m
    f21c:	68637461 00000000 6d6e6970 6e207061     atch....pinmap n
    f22c:	6620746f 646e756f 726f6620 72657020     ot found for per
    f23c:	65687069 006c6172 6d6e6970 6e207061     ipheral.pinmap n
    f24c:	6620746f 646e756f 726f6620 6e756620     ot found for fun
    f25c:	6f697463 0000006e                       ction...

0000f264 <PinMap_SERCOM_PADEx>:
    f264:	00000008 00000002 00000003 00000009     ................
    f274:	00000012 00000003 00000010 00000003     ................
    f284:	00000003 00000011 00000013 00000003     ................
    f294:	00000012 00000023 00000003 00000013     ....#...........
    f2a4:	00000033 00000003 00000016 00000005     3...............
    f2b4:	00000003 00000017 00000015 00000003     ................
    f2c4:	00000018 00000025 00000003 00000019     ....%...........
    f2d4:	00000035 00000003 000000ff ffffffff     5...............
    f2e4:	ffffffff                                ....

0000f2e8 <PinMap_SERCOM_PAD>:
    f2e8:	00000000 00000001 00000003 00000001     ................
    f2f8:	00000011 00000003 00000004 00000000     ................
    f308:	00000003 00000005 00000010 00000003     ................
    f318:	00000006 00000020 00000003 00000007     .... ...........
    f328:	00000030 00000003 00000008 00000000     0...............
    f338:	00000002 00000009 00000010 00000002     ................
    f348:	0000000c 00000002 00000002 0000000d     ................
    f358:	00000012 00000002 0000000e 00000022     ............"...
    f368:	00000002 0000000f 00000032 00000002     ........2.......
    f378:	00000010 00000001 00000002 00000011     ................
    f388:	00000011 00000002 00000012 00000021     ............!...
    f398:	00000002 00000013 00000031 00000002     ........1.......
    f3a8:	00000016 00000003 00000002 00000017     ................
    f3b8:	00000013 00000002 00000018 00000023     ............#...
    f3c8:	00000002 00000019 00000033 00000002     ........3.......
    f3d8:	0000001b 00000003 00000005 0000001c     ................
    f3e8:	00000013 00000005 0000001e 00000021     ............!...
    f3f8:	00000003 0000001f 00000031 00000003     ........1.......
    f408:	00000022 00000005 00000003 00000023     "...........#...
    f418:	00000015 00000003 00000036 00000025     ........6...%...
    f428:	00000003 00000037 00000035 00000003     ....7...5.......
    f438:	0000003e 00000024 00000005 0000003f     >...$.......?...
    f448:	00000014 00000005 00000052 00000034     ........R...4...
    f458:	00000005 00000053 00000004 00000005     ....S...........
    f468:	000000ff ffffffff ffffffff 42000800     ...............B
    f478:	42000c00 42001000 42001400 42001800     ...B...B...B...B
    f488:	42001c00 000051b0 000051c8 000051c8     ...B.Q...Q...Q..
    f498:	00005176 00005176 0000517c 00005182     vQ..vQ..|Q...Q..
    f4a8:	00005192 000051b6 0000526c 0000527a     .Q...Q..lR..zR..
    f4b8:	0000527a 000051fe 00005202 00005210     zR...Q...R...R..
    f4c8:	0000521e 0000522c 0000525c 206e6970     .R..,R..\R..pin 
    f4d8:	28203d21 4e6e6950 29656d61 0000434e     != (PinName)NC..
    f4e8:	4a5c3a43 696b6e65 775c736e 736b726f     C:\Jenkins\works
    f4f8:	65636170 65626d5c 2d322d64 6c697562     pace\mbed-2-buil
    f508:	696c2d64 72617262 61685c79 61745c6c     d-library\hal\ta
    f518:	74656772 61685c73 41545c6c 54454752     rgets\hal\TARGET
    f528:	6d74415f 545c6c65 45475241 41535f54     _Atmel\TARGET_SA
    f538:	6f435f4d 78657472 5c50304d 6f697067     M_CortexM0P\gpio
    f548:	6970615f 0000632e 4a5c3a43 696b6e65     _api.c..C:\Jenki
    f558:	775c736e 736b726f 65636170 65626d5c     ns\workspace\mbe
    f568:	2d322d64 6c697562 696c2d64 72617262     d-2-build-librar
    f578:	61685c79 61745c6c 74656772 61685c73     y\hal\targets\ha
    f588:	41545c6c 54454752 6d74415f 545c6c65     l\TARGET_Atmel\T
    f598:	45475241 41535f54 6f435f4d 78657472     ARGET_SAM_Cortex
    f5a8:	5c50304d 6d6e6970 632e7061 00000000     M0P\pinmap.c....
    f5b8:	74726f70 00000000 42000800 42000c00     port.......B...B
    f5c8:	42001000 42001400 42001800 42001c00     ...B...B...B...B
    f5d8:	6c637963 705f7365 755f7265 203e2073     cycles_per_us > 
    f5e8:	00000030 4a5c3a43 696b6e65 775c736e     0...C:\Jenkins\w
    f5f8:	736b726f 65636170 65626d5c 2d322d64     orkspace\mbed-2-
    f608:	6c697562 696c2d64 72617262 61685c79     build-library\ha
    f618:	61745c6c 74656772 61685c73 41545c6c     l\targets\hal\TA
    f628:	54454752 6d74415f 545c6c65 45475241     RGET_Atmel\TARGE
    f638:	41535f54 6f435f4d 78657472 5c50304d     T_SAM_CortexM0P\
    f648:	745f7375 656b6369 00632e72 75646f6d     us_ticker.c.modu
    f658:	0000656c                                le..

0000f65c <tc_interrupt_vectors.12802>:
    f65c:	00141312 4a5c3a43 696b6e65 775c736e     ....C:\Jenkins\w
    f66c:	736b726f 65636170 65626d5c 2d322d64     orkspace\mbed-2-
    f67c:	6c697562 696c2d64 72617262 61685c79     build-library\ha
    f68c:	61745c6c 74656772 61685c73 41545c6c     l\targets\hal\TA
    f69c:	54454752 6d74415f 545c6c65 45475241     RGET_Atmel\TARGE
    f6ac:	41535f54 6f435f4d 78657472 5c50304d     T_SAM_CortexM0P\
    f6bc:	5f697073 2e697061 00000063 6b6c6373     spi_api.c...sclk
    f6cc:	203d2120 0000434e 00000000               != NC......

0000f6d8 <_ZTVN4mbed8FileBaseE>:
	...
    f6e0:	00005f61 00005f95                       a_..._..

0000f6e8 <_ZTVN4mbed8FileLikeE>:
	...
    f6f0:	00003e59 00003e59 00003e59 00003e59     Y>..Y>..Y>..Y>..
    f700:	00003e59 00003e59 00003bad 00000000     Y>..Y>...;......
    f710:	00000000 fffffffc 00000000 00000000     ................
    f720:	00000000                                ....

0000f724 <us_interface>:
    f724:	00005885 00005899 00005921 00005945     .X...X..!Y..EY..
    f734:	000058b9                                .X..

0000f738 <us_data>:
    f738:	0000f724 20004704 42002c00 42003000     $....G. .,.B.0.B
    f748:	42003400 001c1c1b 10000800 00002000     .4.B......... ..
    f758:	00006e06 00006dce 00006dea 00006dc2     .n...m...m...m..
    f768:	00006dea 00006d2e 00006dea 00006dc2     .m...m...m...m..
    f778:	00006dce 00006dce 00006d2e 00006dc2     .m...m...m...m..
    f788:	00006e6c 00006e6c 00006e6c 00006df0     ln..ln..ln...m..
    f798:	00006dce 00006dce 00006eb6 00006dc0     .m...m...n...m..
    f7a8:	00006eb6 00006d2e 00006eb6 00006dc0     .n...m...n...m..
    f7b8:	00006dce 00006dce 00006d2e 00006dc0     .m...m...m...m..
    f7c8:	00006e6c 00006e6c 00006e6c 00006e9a     ln..ln..ln...n..
    f7d8:	000071ce 000071c6 000071c6 000071be     .q...q...q...q..
    f7e8:	00007110 00007110 000071b4 000071be     .q...q...q...q..
    f7f8:	00007110 000071b4 00007110 000071be     .q...q...q...q..
    f808:	00007112 00007112 00007112 00007258     .q...q...q..Xr..
    f818:	00007f78 00007e66 00007f4c 00007e52     x...f~..L...R~..
    f828:	00007f4c 00007f56 00007f4c 00007e52     L...V...L...R~..
    f838:	00007e66 00007e66 00007f56 00007e52     f~..f~..V...R~..
    f848:	00007e5c 00007e5c 00007e5c 000081be     \~..\~..\~......
    f858:	0000880c 000087ea 000087ea 000087de     ................
    f868:	000086d2 000086d2 000087d2 000087de     ................
    f878:	000086d2 000087d2 000086d2 000087de     ................
    f888:	000086d6 000086d6 000086d6 000089ec     ................

0000f898 <__sf_fake_stdin>:
	...

0000f8b8 <__sf_fake_stdout>:
	...

0000f8d8 <__sf_fake_stderr>:
	...
    f8f8:	00000043                                C...

0000f8fc <_global_impure_ptr>:
    f8fc:	200000d4 2b302d23 6c680020 6665004c     ... #-0+ .hlL.ef
    f90c:	47464567 464e4900 666e6900 4e414e00     gEFG.INF.inf.NAN
    f91c:	6e616e00 32313000 36353433 41393837     .nan.0123456789A
    f92c:	45444342 31300046 35343332 39383736     BCDEF.0123456789
    f93c:	64636261 65006665 00646c25 0000f966     abcdef.e%ld.f...
    f94c:	0000f969 0000f96c 61462d41 3938662d     i...l...A-Fa-f89
    f95c:	33323130 37363534 2d2b005d 00303000     01234567].+-.00.
    f96c:	00005878                                xX..

0000f970 <fpinan.5315>:
    f970:	00000034 fffffbce 000003cb 00000001     4...............
	...

0000f988 <tinytens>:
    f988:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
    f998:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
    f9a8:	64ac6f43 11680628                       Co.d(.h.

0000f9b0 <fpi.5279>:
    f9b0:	00000035 fffffbce 000003cb 00000001     5...............
    f9c0:	00000000                                ....

0000f9c4 <_ctype_>:
    f9c4:	20202000 20202020 28282020 20282828     .         ((((( 
    f9d4:	20202020 20202020 20202020 20202020                     
    f9e4:	10108820 10101010 10101010 10101010      ...............
    f9f4:	04040410 04040404 10040404 10101010     ................
    fa04:	41411010 41414141 01010101 01010101     ..AAAAAA........
    fa14:	01010101 01010101 01010101 10101010     ................
    fa24:	42421010 42424242 02020202 02020202     ..BBBBBB........
    fa34:	02020202 02020202 02020202 10101010     ................
    fa44:	00000020 00000000 00000000 00000000      ...............
	...
    fac4:	666e4900 74696e69 614e0079 4f50004e     .Infinity.NaN.PO
    fad4:	00584953 0000002e 00000000              SIX.........

0000fae0 <__mprec_tens>:
    fae0:	00000000 3ff00000 00000000 40240000     .......?......$@
    faf0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
    fb00:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
    fb10:	00000000 412e8480 00000000 416312d0     .......A......cA
    fb20:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
    fb30:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
    fb40:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
    fb50:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
    fb60:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
    fb70:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
    fb80:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
    fb90:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
    fba0:	79d99db4 44ea7843                       ...yCx.D

0000fba8 <__mprec_bigtens>:
    fba8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
    fbb8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
    fbc8:	7f73bf3c 75154fdd                       <.s..O.u

0000fbd0 <p05.5314>:
    fbd0:	00000005 00000019 0000007d              ........}...

0000fbdc <_init>:
    fbdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fbde:	46c0      	nop			; (mov r8, r8)
    fbe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    fbe2:	bc08      	pop	{r3}
    fbe4:	469e      	mov	lr, r3
    fbe6:	4770      	bx	lr

0000fbe8 <__init_array_start>:
    fbe8:	000000dd 	.word	0x000000dd
    fbec:	00001901 	.word	0x00001901
    fbf0:	00001b35 	.word	0x00001b35
    fbf4:	00003a39 	.word	0x00003a39
    fbf8:	00003b1d 	.word	0x00003b1d

0000fbfc <_fini>:
    fbfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fbfe:	46c0      	nop			; (mov r8, r8)
    fc00:	bcf8      	pop	{r3, r4, r5, r6, r7}
    fc02:	bc08      	pop	{r3}
    fc04:	469e      	mov	lr, r3
    fc06:	4770      	bx	lr

0000fc08 <__fini_array_start>:
    fc08:	000000b5 	.word	0x000000b5
