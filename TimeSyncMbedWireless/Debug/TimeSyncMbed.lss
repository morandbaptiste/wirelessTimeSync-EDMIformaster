
TimeSyncMbed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000fd5c  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000c4  200000b0  0000fd5c  000180b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00004658  20000174  0000fe20  00018174  2**2
                  ALLOC
  3 .heap         00001834  200047cc  00014478  00018174  2**0
                  ALLOC
  4 .stack        00002000  20006000  00015cac  00018174  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00018174  2**0
                  CONTENTS, READONLY
  6 .comment      000000cb  00000000  00000000  0001819c  2**0
                  CONTENTS, READONLY
  7 .debug_info   000427a7  00000000  00000000  00018267  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00006c2c  00000000  00000000  0005aa0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00008a7b  00000000  00000000  0006163a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000ac0  00000000  00000000  0006a0b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000a08  00000000  00000000  0006ab75  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000103e3  00000000  00000000  0006b57d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001df85  00000000  00000000  0007b960  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00089ca6  00000000  00000000  000998e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000033dc  00000000  00000000  0012358c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .stabstr      00000076  00000000  00000000  00126968  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20008000 	.word	0x20008000
       4:	00003fe5 	.word	0x00003fe5
       8:	00003fe1 	.word	0x00003fe1
       c:	00003fe1 	.word	0x00003fe1
	...
      2c:	000011d9 	.word	0x000011d9
	...
      38:	00001245 	.word	0x00001245
      3c:	00001289 	.word	0x00001289
      40:	00003fe1 	.word	0x00003fe1
      44:	00003fe1 	.word	0x00003fe1
      48:	00003fe1 	.word	0x00003fe1
      4c:	00001955 	.word	0x00001955
      50:	000040a5 	.word	0x000040a5
      54:	00003fe1 	.word	0x00003fe1
      58:	00003fe1 	.word	0x00003fe1
      5c:	00000000 	.word	0x00000000
      60:	00003fe1 	.word	0x00003fe1
      64:	00003fe1 	.word	0x00003fe1
      68:	00003fe1 	.word	0x00003fe1
      6c:	00003fe1 	.word	0x00003fe1
      70:	00003fe1 	.word	0x00003fe1
	...
      7c:	00003fe1 	.word	0x00003fe1
      80:	00003fe1 	.word	0x00003fe1
      84:	00003fe1 	.word	0x00003fe1
      88:	0000629d 	.word	0x0000629d
      8c:	000062a9 	.word	0x000062a9
      90:	000062b5 	.word	0x000062b5
	...
      ac:	00003fe1 	.word	0x00003fe1
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000174 	.word	0x20000174
      d4:	00000000 	.word	0x00000000
      d8:	0000fd5c 	.word	0x0000fd5c

000000dc <frame_dummy>:
      dc:	b508      	push	{r3, lr}
      de:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4807      	ldr	r0, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4908      	ldr	r1, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd08      	pop	{r3, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	0000fd5c 	.word	0x0000fd5c
     108:	20000178 	.word	0x20000178
     10c:	0000fd5c 	.word	0x0000fd5c
     110:	00000000 	.word	0x00000000

00000114 <CLP_GenerateEscape>:
  pos += 3;
  memcpy(data.relay_hardware, buffer + pos, 3);
  pos += 3;
  memcpy(data.lcd_map, buffer + pos, 20);
  pos += 20;
  memcpy(data.output_state, buffer + pos, 16);
     114:	b5f0      	push	{r4, r5, r6, r7, lr}
     116:	b0cd      	sub	sp, #308	; 0x134
  pos += 16;
}
     118:	2800      	cmp	r0, #0
     11a:	d004      	beq.n	126 <CLP_GenerateEscape+0x12>
     11c:	2300      	movs	r3, #0
     11e:	2200      	movs	r2, #0
     120:	2900      	cmp	r1, #0
     122:	d105      	bne.n	130 <CLP_GenerateEscape+0x1c>
     124:	e01b      	b.n	15e <CLP_GenerateEscape+0x4a>
     126:	2201      	movs	r2, #1

size_t CLP_GenerateEscape(uint8_t* buffer, size_t length)
{
  if(!buffer)
  {
    CLP_G_ERROR_VAL = CLP_LIB_ERROR_BUFFER_NOT_GIVEN;
     128:	4b11      	ldr	r3, [pc, #68]	; (170 <CLP_GenerateEscape+0x5c>)
     12a:	601a      	str	r2, [r3, #0]
    return 0;
     12c:	2400      	movs	r4, #0
     12e:	e01b      	b.n	168 <CLP_GenerateEscape+0x54>
//  uint8_t* temp = new uint8_t[length + count];
//  count = 0;

  for(size_t i = 0; i < length; ++i)
  {
    switch(buffer[i])
     130:	4e10      	ldr	r6, [pc, #64]	; (174 <CLP_GenerateEscape+0x60>)
      case CLP_ESCAPE_ETX:
      case CLP_ESCAPE_XON:
      case CLP_ESCAPE_XOFF:
      case CLP_ESCAPE_DLE:
      {
        temp[i + count] = CLP_ESCAPE_DLE;
     132:	2710      	movs	r7, #16
//  uint8_t* temp = new uint8_t[length + count];
//  count = 0;

  for(size_t i = 0; i < length; ++i)
  {
    switch(buffer[i])
     134:	5cc4      	ldrb	r4, [r0, r3]
     136:	2c13      	cmp	r4, #19
     138:	d80b      	bhi.n	152 <CLP_GenerateEscape+0x3e>
     13a:	00a5      	lsls	r5, r4, #2
     13c:	5975      	ldr	r5, [r6, r5]
     13e:	46af      	mov	pc, r5
      case CLP_ESCAPE_ETX:
      case CLP_ESCAPE_XON:
      case CLP_ESCAPE_XOFF:
      case CLP_ESCAPE_DLE:
      {
        temp[i + count] = CLP_ESCAPE_DLE;
     140:	ad01      	add	r5, sp, #4
     142:	18ad      	adds	r5, r5, r2
     144:	54ef      	strb	r7, [r5, r3]
        ++count;
     146:	3201      	adds	r2, #1
        temp[i + count] = buffer[i] + 0x40;
     148:	ad01      	add	r5, sp, #4
     14a:	18ad      	adds	r5, r5, r2
     14c:	3440      	adds	r4, #64	; 0x40
     14e:	54ec      	strb	r4, [r5, r3]
      }
      break;
     150:	e002      	b.n	158 <CLP_GenerateEscape+0x44>
      default: temp[i + count] = buffer[i];
     152:	ad01      	add	r5, sp, #4
     154:	18ad      	adds	r5, r5, r2
     156:	54ec      	strb	r4, [r5, r3]

  uint8_t temp[CLP_UTILITY_MAX_PACKET_SIZE];
//  uint8_t* temp = new uint8_t[length + count];
//  count = 0;

  for(size_t i = 0; i < length; ++i)
     158:	3301      	adds	r3, #1
     15a:	428b      	cmp	r3, r1
     15c:	d1ea      	bne.n	134 <CLP_GenerateEscape+0x20>
      break;
      default: temp[i + count] = buffer[i];
    }
  }

  memcpy(buffer, temp, length + count);
     15e:	1854      	adds	r4, r2, r1
     160:	a901      	add	r1, sp, #4
     162:	1c22      	adds	r2, r4, #0
     164:	4b04      	ldr	r3, [pc, #16]	; (178 <CLP_GenerateEscape+0x64>)
     166:	4798      	blx	r3
//  delete[] temp;

  return length + count;
}
     168:	1c20      	adds	r0, r4, #0
     16a:	b04d      	add	sp, #308	; 0x134
     16c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     16e:	46c0      	nop			; (mov r8, r8)
     170:	20000190 	.word	0x20000190
     174:	0000ea80 	.word	0x0000ea80
     178:	00009ea7 	.word	0x00009ea7

0000017c <CLP_GeneratePacket>:

  return length + count;
}

size_t CLP_GeneratePacket(uint8_t* buffer, const uint8_t* data, size_t datalength)
{
     17c:	b570      	push	{r4, r5, r6, lr}
     17e:	1c04      	adds	r4, r0, #0
     180:	1c15      	adds	r5, r2, #0
  if(!buffer)
     182:	2800      	cmp	r0, #0
     184:	d104      	bne.n	190 <CLP_GeneratePacket+0x14>
  {
    CLP_G_ERROR_VAL = CLP_LIB_ERROR_BUFFER_NOT_GIVEN;
     186:	2201      	movs	r2, #1
     188:	4b12      	ldr	r3, [pc, #72]	; (1d4 <CLP_GeneratePacket+0x58>)
     18a:	601a      	str	r2, [r3, #0]
    return 0;
     18c:	2000      	movs	r0, #0
     18e:	e020      	b.n	1d2 <CLP_GeneratePacket+0x56>
  }

  if(!data)
     190:	2900      	cmp	r1, #0
     192:	d118      	bne.n	1c6 <CLP_GeneratePacket+0x4a>
  {
    CLP_G_ERROR_VAL = CLP_LIB_ERROR_PARAM_NOT_GIVEN;
     194:	2203      	movs	r2, #3
     196:	4b0f      	ldr	r3, [pc, #60]	; (1d4 <CLP_GeneratePacket+0x58>)
     198:	601a      	str	r2, [r3, #0]
    datalength = 0;
  }

  buffer[0] = CLP_ESCAPE_STX;
     19a:	2302      	movs	r3, #2
     19c:	7003      	strb	r3, [r0, #0]
  }

  if(!data)
  {
    CLP_G_ERROR_VAL = CLP_LIB_ERROR_PARAM_NOT_GIVEN;
    datalength = 0;
     19e:	2500      	movs	r5, #0
  size_t length = 1;
  if(data)
  {
    memcpy(buffer + length, data, datalength);
  }
  length += datalength;
     1a0:	1c6e      	adds	r6, r5, #1
  uint16_t crc = CalculateBufferCRC16(buffer, length, 0x0000);
     1a2:	1c20      	adds	r0, r4, #0
     1a4:	1c31      	adds	r1, r6, #0
     1a6:	2200      	movs	r2, #0
     1a8:	4b0b      	ldr	r3, [pc, #44]	; (1d8 <CLP_GeneratePacket+0x5c>)
     1aa:	4798      	blx	r3
     1ac:	1c05      	adds	r5, r0, #0
  length = CLP_GenerateEscape(buffer + 1, length);
     1ae:	1c60      	adds	r0, r4, #1
     1b0:	1c31      	adds	r1, r6, #0
     1b2:	4b0a      	ldr	r3, [pc, #40]	; (1dc <CLP_GeneratePacket+0x60>)
     1b4:	4798      	blx	r3

  buffer[length + 2] = CLP_ESCAPE_ETX;
     1b6:	1823      	adds	r3, r4, r0
     1b8:	2203      	movs	r2, #3
     1ba:	709a      	strb	r2, [r3, #2]
  buffer[length] = crc & 255;
     1bc:	5425      	strb	r5, [r4, r0]
  buffer[length+1] = (crc >> 8) & 255;
     1be:	0a2d      	lsrs	r5, r5, #8
     1c0:	705d      	strb	r5, [r3, #1]
 //(*(uint16_t*)&buffer[length]) = _byteswap_ushort(crc);
  length += 3;
     1c2:	3003      	adds	r0, #3

  return length;
     1c4:	e005      	b.n	1d2 <CLP_GeneratePacket+0x56>
  {
    CLP_G_ERROR_VAL = CLP_LIB_ERROR_PARAM_NOT_GIVEN;
    datalength = 0;
  }

  buffer[0] = CLP_ESCAPE_STX;
     1c6:	2302      	movs	r3, #2
     1c8:	7003      	strb	r3, [r0, #0]
  size_t length = 1;
  if(data)
  {
    memcpy(buffer + length, data, datalength);
     1ca:	3001      	adds	r0, #1
     1cc:	4b04      	ldr	r3, [pc, #16]	; (1e0 <CLP_GeneratePacket+0x64>)
     1ce:	4798      	blx	r3
     1d0:	e7e6      	b.n	1a0 <CLP_GeneratePacket+0x24>
  buffer[length+1] = (crc >> 8) & 255;
 //(*(uint16_t*)&buffer[length]) = _byteswap_ushort(crc);
  length += 3;

  return length;
}
     1d2:	bd70      	pop	{r4, r5, r6, pc}
     1d4:	20000190 	.word	0x20000190
     1d8:	00000231 	.word	0x00000231
     1dc:	00000115 	.word	0x00000115
     1e0:	00009ea7 	.word	0x00009ea7

000001e4 <_Z9gencrc_16t>:
// Purpose: Functions to generate CRC16-CCITT parity values.

#include "crc.h"

uint16_t gencrc_16(uint16_t i)
{
     1e4:	b510      	push	{r4, lr}
  uint16_t j;
  uint16_t k;
  uint16_t crc;

  k = i<<8;
     1e6:	0200      	lsls	r0, r0, #8
     1e8:	b283      	uxth	r3, r0
     1ea:	2208      	movs	r2, #8
  crc = 0;
     1ec:	2000      	movs	r0, #0

  for(j = 0; j < 8; j++)
  {
    if((crc ^ k)&0x8000)
    {
      crc = (crc<<1)^0x1021;
     1ee:	4c09      	ldr	r4, [pc, #36]	; (214 <_Z9gencrc_16t+0x30>)
  k = i<<8;
  crc = 0;

  for(j = 0; j < 8; j++)
  {
    if((crc ^ k)&0x8000)
     1f0:	1c01      	adds	r1, r0, #0
     1f2:	4059      	eors	r1, r3
     1f4:	b209      	sxth	r1, r1
     1f6:	2900      	cmp	r1, #0
     1f8:	da03      	bge.n	202 <_Z9gencrc_16t+0x1e>
    {
      crc = (crc<<1)^0x1021;
     1fa:	0040      	lsls	r0, r0, #1
     1fc:	4060      	eors	r0, r4
     1fe:	b280      	uxth	r0, r0
     200:	e001      	b.n	206 <_Z9gencrc_16t+0x22>
    }
    else
    {
      crc <<= 1;
     202:	0040      	lsls	r0, r0, #1
     204:	b280      	uxth	r0, r0
    }
    k <<= 1;
     206:	005b      	lsls	r3, r3, #1
     208:	b29b      	uxth	r3, r3
     20a:	3a01      	subs	r2, #1
     20c:	b292      	uxth	r2, r2
  uint16_t crc;

  k = i<<8;
  crc = 0;

  for(j = 0; j < 8; j++)
     20e:	2a00      	cmp	r2, #0
     210:	d1ee      	bne.n	1f0 <_Z9gencrc_16t+0xc>
    }
    k <<= 1;
  }

  return(crc);
}
     212:	bd10      	pop	{r4, pc}
     214:	00001021 	.word	0x00001021

00000218 <_Z23CalculateCharacterCRC16th>:

uint16_t CalculateCharacterCRC16(uint16_t crc, uint8_t c)
{
     218:	b510      	push	{r4, lr}
     21a:	1c04      	adds	r4, r0, #0
  return ((crc<<8)^gencrc_16((crc>>8)^c));
     21c:	1200      	asrs	r0, r0, #8
     21e:	4048      	eors	r0, r1
     220:	4b02      	ldr	r3, [pc, #8]	; (22c <_Z23CalculateCharacterCRC16th+0x14>)
     222:	4798      	blx	r3
     224:	0224      	lsls	r4, r4, #8
     226:	4060      	eors	r0, r4
     228:	b280      	uxth	r0, r0
}
     22a:	bd10      	pop	{r4, pc}
     22c:	000001e5 	.word	0x000001e5

00000230 <_Z20CalculateBufferCRC16PKhjt>:

uint16_t CalculateBufferCRC16(const uint8_t* buffer, size_t length, uint16_t start = 0x1D0F)
{
     230:	b570      	push	{r4, r5, r6, lr}
     232:	1c05      	adds	r5, r0, #0
     234:	1c10      	adds	r0, r2, #0
  uint16_t crc = start;
//  uint16_t crc = 0xFFFF;

  for(size_t i = 0; i < length; ++i)
     236:	2900      	cmp	r1, #0
     238:	d007      	beq.n	24a <_Z20CalculateBufferCRC16PKhjt+0x1a>
     23a:	1c2c      	adds	r4, r5, #0
     23c:	186d      	adds	r5, r5, r1
  {
    crc = CalculateCharacterCRC16(crc, buffer[i]);
     23e:	4e03      	ldr	r6, [pc, #12]	; (24c <_Z20CalculateBufferCRC16PKhjt+0x1c>)
     240:	7821      	ldrb	r1, [r4, #0]
     242:	47b0      	blx	r6
     244:	3401      	adds	r4, #1
uint16_t CalculateBufferCRC16(const uint8_t* buffer, size_t length, uint16_t start = 0x1D0F)
{
  uint16_t crc = start;
//  uint16_t crc = 0xFFFF;

  for(size_t i = 0; i < length; ++i)
     246:	42ac      	cmp	r4, r5
     248:	d1fa      	bne.n	240 <_Z20CalculateBufferCRC16PKhjt+0x10>
  {
    crc = CalculateCharacterCRC16(crc, buffer[i]);
  }
  return crc;
}
     24a:	bd70      	pop	{r4, r5, r6, pc}
     24c:	00000219 	.word	0x00000219

00000250 <vApplicationIdleHook>:
#include <conf_timeProtocol.h>



portTickType saveTimeRCrash=0;
void vApplicationIdleHook( void ){
     250:	b508      	push	{r3, lr}
	
		if(xTaskGetTickCount()-saveTimeRCrash>(TIME_CRASH_RX/portTICK_RATE_MS)){
     252:	4b0f      	ldr	r3, [pc, #60]	; (290 <vApplicationIdleHook+0x40>)
     254:	4798      	blx	r3
     256:	4b0f      	ldr	r3, [pc, #60]	; (294 <vApplicationIdleHook+0x44>)
     258:	681b      	ldr	r3, [r3, #0]
     25a:	1ac0      	subs	r0, r0, r3
     25c:	4b0e      	ldr	r3, [pc, #56]	; (298 <vApplicationIdleHook+0x48>)
     25e:	4298      	cmp	r0, r3
     260:	d913      	bls.n	28a <vApplicationIdleHook+0x3a>
			saveTimeRCrash=xTaskGetTickCount();
     262:	4b0b      	ldr	r3, [pc, #44]	; (290 <vApplicationIdleHook+0x40>)
     264:	4798      	blx	r3
     266:	4b0b      	ldr	r3, [pc, #44]	; (294 <vApplicationIdleHook+0x44>)
     268:	6018      	str	r0, [r3, #0]
			if(clearRCrash==true){
     26a:	4b0c      	ldr	r3, [pc, #48]	; (29c <vApplicationIdleHook+0x4c>)
     26c:	781b      	ldrb	r3, [r3, #0]
     26e:	2b01      	cmp	r3, #1
     270:	d108      	bne.n	284 <vApplicationIdleHook+0x34>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     272:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
     276:	4a0a      	ldr	r2, [pc, #40]	; (2a0 <vApplicationIdleHook+0x50>)
     278:	4b0a      	ldr	r3, [pc, #40]	; (2a4 <vApplicationIdleHook+0x54>)
     27a:	60da      	str	r2, [r3, #12]
     27c:	f3bf 8f4f 	dsb	sy

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
     280:	46c0      	nop			; (mov r8, r8)
     282:	e7fd      	b.n	280 <vApplicationIdleHook+0x30>
				NVIC_SystemReset();
			}
			else{
				clearRCrash=true;
     284:	2201      	movs	r2, #1
     286:	4b05      	ldr	r3, [pc, #20]	; (29c <vApplicationIdleHook+0x4c>)
     288:	701a      	strb	r2, [r3, #0]
			}
		}
		
			wdt_clear();
     28a:	4b07      	ldr	r3, [pc, #28]	; (2a8 <vApplicationIdleHook+0x58>)
     28c:	4798      	blx	r3
     28e:	bd08      	pop	{r3, pc}
     290:	00000c49 	.word	0x00000c49
     294:	20000194 	.word	0x20000194
     298:	0000c350 	.word	0x0000c350
     29c:	20000198 	.word	0x20000198
     2a0:	05fa0004 	.word	0x05fa0004
     2a4:	e000ed00 	.word	0xe000ed00
     2a8:	000003ed 	.word	0x000003ed

000002ac <wdt_set_config>:
	return STATUS_OK;
}
#else
enum status_code wdt_set_config(
		const struct wdt_conf *const config)
{
     2ac:	b510      	push	{r4, lr}
     2ae:	b082      	sub	sp, #8
    const enum system_clock_apb_bus bus,
    const uint32_t mask)
{
    switch (bus) {
        case SYSTEM_CLOCK_APB_APBA:
                    PM->APBAMASK.reg |= mask;
     2b0:	4a38      	ldr	r2, [pc, #224]	; (394 <wdt_set_config+0xe8>)
     2b2:	6991      	ldr	r1, [r2, #24]
     2b4:	2310      	movs	r3, #16
     2b6:	430b      	orrs	r3, r1
     2b8:	6193      	str	r3, [r2, #24]
	Wdt *const WDT_module = WDT;

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (WDT_module->CTRLA.reg & WDT_CTRLA_ALWAYSON);
#else
	return (WDT_module->CTRL.reg & WDT_CTRL_ALWAYSON);
     2ba:	4b37      	ldr	r3, [pc, #220]	; (398 <wdt_set_config+0xec>)
     2bc:	781b      	ldrb	r3, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_WDT);

	/* Check of the Watchdog has been locked to be always on, if so, abort */
	if (wdt_is_locked()) {
     2be:	09db      	lsrs	r3, r3, #7
		return STATUS_ERR_IO;
     2c0:	2210      	movs	r2, #16

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_WDT);

	/* Check of the Watchdog has been locked to be always on, if so, abort */
	if (wdt_is_locked()) {
     2c2:	2b00      	cmp	r3, #0
     2c4:	d162      	bne.n	38c <wdt_set_config+0xe0>
		return STATUS_ERR_IO;
	}

	/* Check for an invalid timeout period, abort if found */
	if (config->timeout_period == WDT_PERIOD_NONE) {
     2c6:	78c3      	ldrb	r3, [r0, #3]
		return STATUS_ERR_INVALID_ARG;
     2c8:	3207      	adds	r2, #7
	if (wdt_is_locked()) {
		return STATUS_ERR_IO;
	}

	/* Check for an invalid timeout period, abort if found */
	if (config->timeout_period == WDT_PERIOD_NONE) {
     2ca:	2b00      	cmp	r3, #0
     2cc:	d05e      	beq.n	38c <wdt_set_config+0xe0>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Make sure the Window and Early Warning periods are not more than the
	 * reset period, abort if either is invalid */
	if ((config->timeout_period < config->window_period) ||
     2ce:	7901      	ldrb	r1, [r0, #4]
     2d0:	4299      	cmp	r1, r3
     2d2:	d85b      	bhi.n	38c <wdt_set_config+0xe0>
     2d4:	7941      	ldrb	r1, [r0, #5]
     2d6:	4299      	cmp	r1, r3
     2d8:	d858      	bhi.n	38c <wdt_set_config+0xe0>
			(config->timeout_period < config->early_warning_period)) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Disable the Watchdog module */
	WDT_module->CTRL.reg &= ~WDT_CTRL_ENABLE;
     2da:	4a2f      	ldr	r2, [pc, #188]	; (398 <wdt_set_config+0xec>)
     2dc:	7813      	ldrb	r3, [r2, #0]
     2de:	2102      	movs	r1, #2
     2e0:	438b      	bics	r3, r1
     2e2:	7013      	strb	r3, [r2, #0]
	Wdt *const WDT_module = WDT;

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	if (WDT_module->SYNCBUSY.reg) {
#else
	if (WDT_module->STATUS.reg & WDT_STATUS_SYNCBUSY) {
     2e4:	79d3      	ldrb	r3, [r2, #7]

	while (wdt_is_syncing()) {
     2e6:	b25b      	sxtb	r3, r3
     2e8:	2b00      	cmp	r3, #0
     2ea:	dbfb      	blt.n	2e4 <wdt_set_config+0x38>
		/* Wait for all hardware modules to complete synchronization */
	}

	if(config->enable == false) {
     2ec:	7843      	ldrb	r3, [r0, #1]
		return STATUS_OK;
     2ee:	2200      	movs	r2, #0

	while (wdt_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}

	if(config->enable == false) {
     2f0:	2b00      	cmp	r3, #0
     2f2:	d04b      	beq.n	38c <wdt_set_config+0xe0>
     2f4:	1c04      	adds	r4, r0, #0
		return STATUS_OK;
	}

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	gclk_chan_conf.source_generator = config->clock_source;
     2f6:	a901      	add	r1, sp, #4
     2f8:	7883      	ldrb	r3, [r0, #2]
     2fa:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(WDT_GCLK_ID, &gclk_chan_conf);
     2fc:	2003      	movs	r0, #3
     2fe:	4b27      	ldr	r3, [pc, #156]	; (39c <wdt_set_config+0xf0>)
     300:	4798      	blx	r3
	system_gclk_chan_enable(WDT_GCLK_ID);
     302:	2003      	movs	r0, #3
     304:	4b26      	ldr	r3, [pc, #152]	; (3a0 <wdt_set_config+0xf4>)
     306:	4798      	blx	r3
	if (config->always_on) {
     308:	7823      	ldrb	r3, [r4, #0]
     30a:	2b00      	cmp	r3, #0
     30c:	d002      	beq.n	314 <wdt_set_config+0x68>
		system_gclk_chan_lock(WDT_GCLK_ID);
     30e:	2003      	movs	r0, #3
     310:	4b24      	ldr	r3, [pc, #144]	; (3a4 <wdt_set_config+0xf8>)
     312:	4798      	blx	r3
	}

	uint32_t new_config = 0;

	/* Update the timeout period value with the requested period */
	new_config |= (config->timeout_period - 1) << WDT_CONFIG_PER_Pos;
     314:	78e3      	ldrb	r3, [r4, #3]
     316:	3b01      	subs	r3, #1

	/* Check if the user has requested a reset window period */
	if (config->window_period != WDT_PERIOD_NONE) {
     318:	7922      	ldrb	r2, [r4, #4]
     31a:	2a00      	cmp	r2, #0
     31c:	d009      	beq.n	332 <wdt_set_config+0x86>
		WDT_module->CTRL.reg |= WDT_CTRL_WEN;
     31e:	491e      	ldr	r1, [pc, #120]	; (398 <wdt_set_config+0xec>)
     320:	7808      	ldrb	r0, [r1, #0]
     322:	2204      	movs	r2, #4
     324:	4302      	orrs	r2, r0
     326:	700a      	strb	r2, [r1, #0]

		/* Update and enable the timeout period value */
		new_config |= (config->window_period - 1) << WDT_CONFIG_WINDOW_Pos;
     328:	7922      	ldrb	r2, [r4, #4]
     32a:	3a01      	subs	r2, #1
     32c:	0112      	lsls	r2, r2, #4
     32e:	4313      	orrs	r3, r2
     330:	e004      	b.n	33c <wdt_set_config+0x90>
	} else {
		/* Ensure the window enable control flag is cleared */
		WDT_module->CTRL.reg &= ~WDT_CTRL_WEN;
     332:	4919      	ldr	r1, [pc, #100]	; (398 <wdt_set_config+0xec>)
     334:	780a      	ldrb	r2, [r1, #0]
     336:	2004      	movs	r0, #4
     338:	4382      	bics	r2, r0
     33a:	700a      	strb	r2, [r1, #0]
     33c:	4916      	ldr	r1, [pc, #88]	; (398 <wdt_set_config+0xec>)
     33e:	79ca      	ldrb	r2, [r1, #7]
	}

	while (wdt_is_syncing()) {
     340:	b252      	sxtb	r2, r2
     342:	2a00      	cmp	r2, #0
     344:	dbfb      	blt.n	33e <wdt_set_config+0x92>
		/* Wait for all hardware modules to complete synchronization */
	}

	/* Write the new Watchdog configuration */
	WDT_module->CONFIG.reg = new_config;
     346:	b2db      	uxtb	r3, r3
     348:	4a13      	ldr	r2, [pc, #76]	; (398 <wdt_set_config+0xec>)
     34a:	7053      	strb	r3, [r2, #1]

	/* Check if the user has requested an early warning period */
	if (config->early_warning_period != WDT_PERIOD_NONE) {
     34c:	7963      	ldrb	r3, [r4, #5]
     34e:	2b00      	cmp	r3, #0
     350:	d008      	beq.n	364 <wdt_set_config+0xb8>
     352:	1c11      	adds	r1, r2, #0
     354:	79ca      	ldrb	r2, [r1, #7]
		while (wdt_is_syncing()) {
     356:	b252      	sxtb	r2, r2
     358:	2a00      	cmp	r2, #0
     35a:	dbfb      	blt.n	354 <wdt_set_config+0xa8>
			/* Wait for all hardware modules to complete synchronization */
		}

		/* Set the Early Warning period */
		WDT_module->EWCTRL.reg
			= (config->early_warning_period - 1) << WDT_EWCTRL_EWOFFSET_Pos;
     35c:	3b01      	subs	r3, #1
     35e:	b2db      	uxtb	r3, r3
     360:	4a0d      	ldr	r2, [pc, #52]	; (398 <wdt_set_config+0xec>)
     362:	7093      	strb	r3, [r2, #2]
	}

	/* Either enable or lock-enable the Watchdog timer depending on the user
	 * settings */
	if (config->always_on) {
     364:	7823      	ldrb	r3, [r4, #0]
     366:	2b00      	cmp	r3, #0
     368:	d005      	beq.n	376 <wdt_set_config+0xca>
		WDT_module->CTRL.reg |= WDT_CTRL_ALWAYSON;
     36a:	4a0b      	ldr	r2, [pc, #44]	; (398 <wdt_set_config+0xec>)
     36c:	7811      	ldrb	r1, [r2, #0]
     36e:	2380      	movs	r3, #128	; 0x80
     370:	430b      	orrs	r3, r1
     372:	7013      	strb	r3, [r2, #0]
     374:	e004      	b.n	380 <wdt_set_config+0xd4>
	} else {
		WDT_module->CTRL.reg |= WDT_CTRL_ENABLE;
     376:	4a08      	ldr	r2, [pc, #32]	; (398 <wdt_set_config+0xec>)
     378:	7811      	ldrb	r1, [r2, #0]
     37a:	2302      	movs	r3, #2
     37c:	430b      	orrs	r3, r1
     37e:	7013      	strb	r3, [r2, #0]
     380:	4a05      	ldr	r2, [pc, #20]	; (398 <wdt_set_config+0xec>)
     382:	79d3      	ldrb	r3, [r2, #7]
	}

	while (wdt_is_syncing()) {
     384:	b25b      	sxtb	r3, r3
     386:	2b00      	cmp	r3, #0
     388:	dbfb      	blt.n	382 <wdt_set_config+0xd6>
		/* Wait for all hardware modules to complete synchronization */
	}

	return STATUS_OK;
     38a:	2200      	movs	r2, #0
}
     38c:	1c10      	adds	r0, r2, #0
     38e:	b002      	add	sp, #8
     390:	bd10      	pop	{r4, pc}
     392:	46c0      	nop			; (mov r8, r8)
     394:	40000400 	.word	0x40000400
     398:	40001000 	.word	0x40001000
     39c:	000044a9 	.word	0x000044a9
     3a0:	0000442d 	.word	0x0000442d
     3a4:	000044c1 	.word	0x000044c1

000003a8 <wdt_reset_count>:
void wdt_reset_count(void)
{
	Wdt *const WDT_module = WDT;

	/* Disable the Watchdog module */
	WDT_module->CLEAR.reg = WDT_CLEAR_CLEAR_KEY;
     3a8:	22a5      	movs	r2, #165	; 0xa5
     3aa:	4b04      	ldr	r3, [pc, #16]	; (3bc <wdt_reset_count+0x14>)
     3ac:	721a      	strb	r2, [r3, #8]
     3ae:	1c1a      	adds	r2, r3, #0
     3b0:	79d3      	ldrb	r3, [r2, #7]

	while (wdt_is_syncing()) {
     3b2:	b25b      	sxtb	r3, r3
     3b4:	2b00      	cmp	r3, #0
     3b6:	dbfb      	blt.n	3b0 <wdt_reset_count+0x8>
		/* Wait for all hardware modules to complete synchronization */
	}
}
     3b8:	4770      	bx	lr
     3ba:	46c0      	nop			; (mov r8, r8)
     3bc:	40001000 	.word	0x40001000

000003c0 <_Z10wdt_configv>:
 * Created: 08/07/2016 10:52:22
 *  Author: Time Syn Project
 */ 
#include "wdt_config.h"
uint8_t clearRCrash;
void wdt_config(void){
     3c0:	b500      	push	{lr}
     3c2:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->always_on            = false;
     3c4:	2300      	movs	r3, #0
     3c6:	466a      	mov	r2, sp
     3c8:	7013      	strb	r3, [r2, #0]
	config->enable               = true;
     3ca:	2201      	movs	r2, #1
     3cc:	4669      	mov	r1, sp
     3ce:	704a      	strb	r2, [r1, #1]
#if !(SAML21) && !(SAML22) && !(SAMC20) && !(SAMC21)
	config->clock_source         = GCLK_GENERATOR_4;
#endif
	config->timeout_period       = WDT_PERIOD_16384CLK;
     3d0:	320b      	adds	r2, #11
     3d2:	70ca      	strb	r2, [r1, #3]
	config->window_period        = WDT_PERIOD_NONE;
     3d4:	710b      	strb	r3, [r1, #4]
	config->early_warning_period = WDT_PERIOD_NONE;
     3d6:	714b      	strb	r3, [r1, #5]

	/* Set the Watchdog configuration settings */
	//! [setup_3]
	config_wdt.always_on            = false;
#if !((SAML21) || (SAMC21) || (SAML22))
	config_wdt.clock_source         = GCLK_GENERATOR_2;
     3d8:	3302      	adds	r3, #2
     3da:	708b      	strb	r3, [r1, #2]
	//! [setup_3]

	/* Initialize and enable the Watchdog with the user settings */
	//! [setup_4]
	
	wdt_set_config(&config_wdt);
     3dc:	4668      	mov	r0, sp
     3de:	4b02      	ldr	r3, [pc, #8]	; (3e8 <_Z10wdt_configv+0x28>)
     3e0:	4798      	blx	r3
	//! [setup_4]	
	//hmi.printf("config wdt\r\n");
	
	
	
}
     3e2:	b003      	add	sp, #12
     3e4:	bd00      	pop	{pc}
     3e6:	46c0      	nop			; (mov r8, r8)
     3e8:	000002ad 	.word	0x000002ad

000003ec <wdt_clear>:
void wdt_clear(void){
     3ec:	b508      	push	{r3, lr}
	wdt_reset_count();
     3ee:	4b01      	ldr	r3, [pc, #4]	; (3f4 <wdt_clear+0x8>)
     3f0:	4798      	blx	r3
	
     3f2:	bd08      	pop	{r3, pc}
     3f4:	000003a9 	.word	0x000003a9

000003f8 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
     3f8:	b510      	push	{r4, lr}
     3fa:	1c04      	adds	r4, r0, #0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
     3fc:	6c03      	ldr	r3, [r0, #64]	; 0x40
     3fe:	2b00      	cmp	r3, #0
     400:	d108      	bne.n	414 <prvCopyDataToQueue+0x1c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     402:	6803      	ldr	r3, [r0, #0]
     404:	2b00      	cmp	r3, #0
     406:	d126      	bne.n	456 <prvCopyDataToQueue+0x5e>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
     408:	6840      	ldr	r0, [r0, #4]
     40a:	4b15      	ldr	r3, [pc, #84]	; (460 <prvCopyDataToQueue+0x68>)
     40c:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
     40e:	2300      	movs	r3, #0
     410:	6063      	str	r3, [r4, #4]
     412:	e020      	b.n	456 <prvCopyDataToQueue+0x5e>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
     414:	2a00      	cmp	r2, #0
     416:	d10e      	bne.n	436 <prvCopyDataToQueue+0x3e>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
     418:	6880      	ldr	r0, [r0, #8]
     41a:	1c1a      	adds	r2, r3, #0
     41c:	4b11      	ldr	r3, [pc, #68]	; (464 <prvCopyDataToQueue+0x6c>)
     41e:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
     420:	68a3      	ldr	r3, [r4, #8]
     422:	6c22      	ldr	r2, [r4, #64]	; 0x40
     424:	4694      	mov	ip, r2
     426:	4463      	add	r3, ip
     428:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
     42a:	6862      	ldr	r2, [r4, #4]
     42c:	4293      	cmp	r3, r2
     42e:	d312      	bcc.n	456 <prvCopyDataToQueue+0x5e>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
     430:	6823      	ldr	r3, [r4, #0]
     432:	60a3      	str	r3, [r4, #8]
     434:	e00f      	b.n	456 <prvCopyDataToQueue+0x5e>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
     436:	68c0      	ldr	r0, [r0, #12]
     438:	1c1a      	adds	r2, r3, #0
     43a:	4b0a      	ldr	r3, [pc, #40]	; (464 <prvCopyDataToQueue+0x6c>)
     43c:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
     43e:	6c23      	ldr	r3, [r4, #64]	; 0x40
     440:	425b      	negs	r3, r3
     442:	68e2      	ldr	r2, [r4, #12]
     444:	18d2      	adds	r2, r2, r3
     446:	60e2      	str	r2, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
     448:	6821      	ldr	r1, [r4, #0]
     44a:	428a      	cmp	r2, r1
     44c:	d203      	bcs.n	456 <prvCopyDataToQueue+0x5e>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
     44e:	6862      	ldr	r2, [r4, #4]
     450:	4694      	mov	ip, r2
     452:	4463      	add	r3, ip
     454:	60e3      	str	r3, [r4, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
     456:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     458:	3301      	adds	r3, #1
     45a:	63a3      	str	r3, [r4, #56]	; 0x38
}
     45c:	bd10      	pop	{r4, pc}
     45e:	46c0      	nop			; (mov r8, r8)
     460:	00001151 	.word	0x00001151
     464:	00009ea7 	.word	0x00009ea7

00000468 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
     468:	b538      	push	{r3, r4, r5, lr}
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
     46a:	6804      	ldr	r4, [r0, #0]
     46c:	2c00      	cmp	r4, #0
     46e:	d00c      	beq.n	48a <prvCopyDataFromQueue+0x22>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
     470:	6c02      	ldr	r2, [r0, #64]	; 0x40
     472:	68c3      	ldr	r3, [r0, #12]
     474:	189b      	adds	r3, r3, r2
     476:	60c3      	str	r3, [r0, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
     478:	6845      	ldr	r5, [r0, #4]
     47a:	42ab      	cmp	r3, r5
     47c:	d300      	bcc.n	480 <prvCopyDataFromQueue+0x18>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
     47e:	60c4      	str	r4, [r0, #12]
     480:	1c0b      	adds	r3, r1, #0
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( size_t ) pxQueue->uxItemSize );
     482:	68c1      	ldr	r1, [r0, #12]
     484:	1c18      	adds	r0, r3, #0
     486:	4b01      	ldr	r3, [pc, #4]	; (48c <prvCopyDataFromQueue+0x24>)
     488:	4798      	blx	r3
	}
}
     48a:	bd38      	pop	{r3, r4, r5, pc}
     48c:	00009ea7 	.word	0x00009ea7

00000490 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQUEUE *pxQueue )
{
     490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     492:	1c04      	adds	r4, r0, #0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
     494:	4b21      	ldr	r3, [pc, #132]	; (51c <prvUnlockQueue+0x8c>)
     496:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
     498:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     49a:	2b00      	cmp	r3, #0
     49c:	dd16      	ble.n	4cc <prvUnlockQueue+0x3c>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     49e:	6a63      	ldr	r3, [r4, #36]	; 0x24
     4a0:	2b00      	cmp	r3, #0
     4a2:	d104      	bne.n	4ae <prvUnlockQueue+0x1e>
     4a4:	e012      	b.n	4cc <prvUnlockQueue+0x3c>
     4a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
     4a8:	2b00      	cmp	r3, #0
     4aa:	d104      	bne.n	4b6 <prvUnlockQueue+0x26>
     4ac:	e00e      	b.n	4cc <prvUnlockQueue+0x3c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     4ae:	1c25      	adds	r5, r4, #0
     4b0:	3524      	adds	r5, #36	; 0x24
     4b2:	4f1b      	ldr	r7, [pc, #108]	; (520 <prvUnlockQueue+0x90>)
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
     4b4:	4e1b      	ldr	r6, [pc, #108]	; (524 <prvUnlockQueue+0x94>)
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     4b6:	1c28      	adds	r0, r5, #0
     4b8:	47b8      	blx	r7
     4ba:	2800      	cmp	r0, #0
     4bc:	d000      	beq.n	4c0 <prvUnlockQueue+0x30>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
     4be:	47b0      	blx	r6
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
     4c0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     4c2:	3b01      	subs	r3, #1
     4c4:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
     4c6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     4c8:	2b00      	cmp	r3, #0
     4ca:	dcec      	bgt.n	4a6 <prvUnlockQueue+0x16>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
     4cc:	2301      	movs	r3, #1
     4ce:	425b      	negs	r3, r3
     4d0:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
     4d2:	4b15      	ldr	r3, [pc, #84]	; (528 <prvUnlockQueue+0x98>)
     4d4:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
     4d6:	4b11      	ldr	r3, [pc, #68]	; (51c <prvUnlockQueue+0x8c>)
     4d8:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
     4da:	6c63      	ldr	r3, [r4, #68]	; 0x44
     4dc:	2b00      	cmp	r3, #0
     4de:	dd16      	ble.n	50e <prvUnlockQueue+0x7e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     4e0:	6923      	ldr	r3, [r4, #16]
     4e2:	2b00      	cmp	r3, #0
     4e4:	d104      	bne.n	4f0 <prvUnlockQueue+0x60>
     4e6:	e012      	b.n	50e <prvUnlockQueue+0x7e>
     4e8:	6923      	ldr	r3, [r4, #16]
     4ea:	2b00      	cmp	r3, #0
     4ec:	d104      	bne.n	4f8 <prvUnlockQueue+0x68>
     4ee:	e00e      	b.n	50e <prvUnlockQueue+0x7e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     4f0:	1c25      	adds	r5, r4, #0
     4f2:	3510      	adds	r5, #16
     4f4:	4f0a      	ldr	r7, [pc, #40]	; (520 <prvUnlockQueue+0x90>)
				{
					vTaskMissedYield();
     4f6:	4e0b      	ldr	r6, [pc, #44]	; (524 <prvUnlockQueue+0x94>)
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     4f8:	1c28      	adds	r0, r5, #0
     4fa:	47b8      	blx	r7
     4fc:	2800      	cmp	r0, #0
     4fe:	d000      	beq.n	502 <prvUnlockQueue+0x72>
				{
					vTaskMissedYield();
     500:	47b0      	blx	r6
				}

				--( pxQueue->xRxLock );
     502:	6c63      	ldr	r3, [r4, #68]	; 0x44
     504:	3b01      	subs	r3, #1
     506:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
     508:	6c63      	ldr	r3, [r4, #68]	; 0x44
     50a:	2b00      	cmp	r3, #0
     50c:	dcec      	bgt.n	4e8 <prvUnlockQueue+0x58>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
     50e:	2301      	movs	r3, #1
     510:	425b      	negs	r3, r3
     512:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
     514:	4b04      	ldr	r3, [pc, #16]	; (528 <prvUnlockQueue+0x98>)
     516:	4798      	blx	r3
}
     518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     51a:	46c0      	nop			; (mov r8, r8)
     51c:	00001219 	.word	0x00001219
     520:	00000fb1 	.word	0x00000fb1
     524:	000010bd 	.word	0x000010bd
     528:	00001231 	.word	0x00001231

0000052c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle xQueue, portBASE_TYPE xNewQueue )
{
     52c:	b538      	push	{r3, r4, r5, lr}
xQUEUE *pxQueue;

	pxQueue = ( xQUEUE * ) xQueue;
	configASSERT( pxQueue );
     52e:	2800      	cmp	r0, #0
     530:	d101      	bne.n	536 <xQueueGenericReset+0xa>
     532:	b672      	cpsid	i
     534:	e7fe      	b.n	534 <xQueueGenericReset+0x8>
     536:	1c0d      	adds	r5, r1, #0
     538:	1c04      	adds	r4, r0, #0

	taskENTER_CRITICAL();
     53a:	4b15      	ldr	r3, [pc, #84]	; (590 <xQueueGenericReset+0x64>)
     53c:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
     53e:	6822      	ldr	r2, [r4, #0]
     540:	6c21      	ldr	r1, [r4, #64]	; 0x40
     542:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     544:	434b      	muls	r3, r1
     546:	18d0      	adds	r0, r2, r3
     548:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
     54a:	2000      	movs	r0, #0
     54c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
     54e:	60a2      	str	r2, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
     550:	1a5b      	subs	r3, r3, r1
     552:	18d3      	adds	r3, r2, r3
     554:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
     556:	2301      	movs	r3, #1
     558:	425b      	negs	r3, r3
     55a:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
     55c:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
     55e:	2d00      	cmp	r5, #0
     560:	d10b      	bne.n	57a <xQueueGenericReset+0x4e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     562:	6923      	ldr	r3, [r4, #16]
     564:	2b00      	cmp	r3, #0
     566:	d00f      	beq.n	588 <xQueueGenericReset+0x5c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
     568:	1c20      	adds	r0, r4, #0
     56a:	3010      	adds	r0, #16
     56c:	4b09      	ldr	r3, [pc, #36]	; (594 <xQueueGenericReset+0x68>)
     56e:	4798      	blx	r3
     570:	2801      	cmp	r0, #1
     572:	d109      	bne.n	588 <xQueueGenericReset+0x5c>
				{
					portYIELD_WITHIN_API();
     574:	4b08      	ldr	r3, [pc, #32]	; (598 <xQueueGenericReset+0x6c>)
     576:	4798      	blx	r3
     578:	e006      	b.n	588 <xQueueGenericReset+0x5c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
     57a:	1c20      	adds	r0, r4, #0
     57c:	3010      	adds	r0, #16
     57e:	4d07      	ldr	r5, [pc, #28]	; (59c <xQueueGenericReset+0x70>)
     580:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
     582:	1c20      	adds	r0, r4, #0
     584:	3024      	adds	r0, #36	; 0x24
     586:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
     588:	4b05      	ldr	r3, [pc, #20]	; (5a0 <xQueueGenericReset+0x74>)
     58a:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
     58c:	2001      	movs	r0, #1
     58e:	bd38      	pop	{r3, r4, r5, pc}
     590:	00001219 	.word	0x00001219
     594:	00000fb1 	.word	0x00000fb1
     598:	00001201 	.word	0x00001201
     59c:	000008f5 	.word	0x000008f5
     5a0:	00001231 	.word	0x00001231

000005a4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
     5a4:	b570      	push	{r4, r5, r6, lr}
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
     5a6:	2800      	cmp	r0, #0
     5a8:	d013      	beq.n	5d2 <xQueueGenericCreate+0x2e>
     5aa:	1c0e      	adds	r6, r1, #0
     5ac:	1c05      	adds	r5, r0, #0
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
     5ae:	204c      	movs	r0, #76	; 0x4c
     5b0:	4b0d      	ldr	r3, [pc, #52]	; (5e8 <xQueueGenericCreate+0x44>)
     5b2:	4798      	blx	r3
     5b4:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
     5b6:	d00c      	beq.n	5d2 <xQueueGenericCreate+0x2e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
     5b8:	1c30      	adds	r0, r6, #0
     5ba:	4368      	muls	r0, r5
     5bc:	3001      	adds	r0, #1

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
     5be:	4b0a      	ldr	r3, [pc, #40]	; (5e8 <xQueueGenericCreate+0x44>)
     5c0:	4798      	blx	r3
     5c2:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
     5c4:	2800      	cmp	r0, #0
     5c6:	d106      	bne.n	5d6 <xQueueGenericCreate+0x32>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
     5c8:	1c20      	adds	r0, r4, #0
     5ca:	4b08      	ldr	r3, [pc, #32]	; (5ec <xQueueGenericCreate+0x48>)
     5cc:	4798      	blx	r3
     5ce:	e000      	b.n	5d2 <xQueueGenericCreate+0x2e>
			}
		}
	}

	configASSERT( xReturn );
     5d0:	e7fe      	b.n	5d0 <xQueueGenericCreate+0x2c>
     5d2:	b672      	cpsid	i
     5d4:	e7fc      	b.n	5d0 <xQueueGenericCreate+0x2c>
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
     5d6:	63e5      	str	r5, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
     5d8:	6426      	str	r6, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
     5da:	1c20      	adds	r0, r4, #0
     5dc:	2101      	movs	r1, #1
     5de:	4b04      	ldr	r3, [pc, #16]	; (5f0 <xQueueGenericCreate+0x4c>)
     5e0:	4798      	blx	r3
	}

	configASSERT( xReturn );

	return xReturn;
}
     5e2:	1c20      	adds	r0, r4, #0
     5e4:	bd70      	pop	{r4, r5, r6, pc}
     5e6:	46c0      	nop			; (mov r8, r8)
     5e8:	00001319 	.word	0x00001319
     5ec:	00001381 	.word	0x00001381
     5f0:	0000052d 	.word	0x0000052d

000005f4 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle xQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
     5f4:	b5f0      	push	{r4, r5, r6, r7, lr}
     5f6:	4657      	mov	r7, sl
     5f8:	b480      	push	{r7}
     5fa:	b086      	sub	sp, #24
     5fc:	9203      	str	r2, [sp, #12]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
xQUEUE *pxQueue;

	pxQueue = ( xQUEUE * ) xQueue;
	configASSERT( pxQueue );
     5fe:	2800      	cmp	r0, #0
     600:	d101      	bne.n	606 <xQueueGenericSend+0x12>
     602:	b672      	cpsid	i
     604:	e7fe      	b.n	604 <xQueueGenericSend+0x10>
     606:	2700      	movs	r7, #0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
     608:	2900      	cmp	r1, #0
     60a:	d105      	bne.n	618 <xQueueGenericSend+0x24>
     60c:	6c02      	ldr	r2, [r0, #64]	; 0x40
     60e:	2a00      	cmp	r2, #0
     610:	d001      	beq.n	616 <xQueueGenericSend+0x22>
     612:	b672      	cpsid	i
     614:	e7fe      	b.n	614 <xQueueGenericSend+0x20>
     616:	2700      	movs	r7, #0
     618:	9302      	str	r3, [sp, #8]
     61a:	9101      	str	r1, [sp, #4]
     61c:	1c04      	adds	r4, r0, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
     61e:	4d33      	ldr	r5, [pc, #204]	; (6ec <xQueueGenericSend+0xf8>)
     620:	47a8      	blx	r5
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
     622:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     624:	6be2      	ldr	r2, [r4, #60]	; 0x3c
     626:	4293      	cmp	r3, r2
     628:	d213      	bcs.n	652 <xQueueGenericSend+0x5e>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
     62a:	1c20      	adds	r0, r4, #0
     62c:	9901      	ldr	r1, [sp, #4]
     62e:	9a02      	ldr	r2, [sp, #8]
     630:	4b2f      	ldr	r3, [pc, #188]	; (6f0 <xQueueGenericSend+0xfc>)
     632:	4798      	blx	r3
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     634:	6a63      	ldr	r3, [r4, #36]	; 0x24
     636:	2b00      	cmp	r3, #0
     638:	d007      	beq.n	64a <xQueueGenericSend+0x56>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
     63a:	1c20      	adds	r0, r4, #0
     63c:	3024      	adds	r0, #36	; 0x24
     63e:	4b2d      	ldr	r3, [pc, #180]	; (6f4 <xQueueGenericSend+0x100>)
     640:	4798      	blx	r3
     642:	2801      	cmp	r0, #1
     644:	d101      	bne.n	64a <xQueueGenericSend+0x56>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							portYIELD_WITHIN_API();
     646:	4b2c      	ldr	r3, [pc, #176]	; (6f8 <xQueueGenericSend+0x104>)
     648:	4798      	blx	r3
						}
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
     64a:	4b2c      	ldr	r3, [pc, #176]	; (6fc <xQueueGenericSend+0x108>)
     64c:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
     64e:	2001      	movs	r0, #1
     650:	e048      	b.n	6e4 <xQueueGenericSend+0xf0>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
     652:	9b03      	ldr	r3, [sp, #12]
     654:	2b00      	cmp	r3, #0
     656:	d103      	bne.n	660 <xQueueGenericSend+0x6c>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
     658:	4b28      	ldr	r3, [pc, #160]	; (6fc <xQueueGenericSend+0x108>)
     65a:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
     65c:	2000      	movs	r0, #0
     65e:	e041      	b.n	6e4 <xQueueGenericSend+0xf0>
				}
				else if( xEntryTimeSet == pdFALSE )
     660:	2f00      	cmp	r7, #0
     662:	d103      	bne.n	66c <xQueueGenericSend+0x78>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
     664:	a804      	add	r0, sp, #16
     666:	4b26      	ldr	r3, [pc, #152]	; (700 <xQueueGenericSend+0x10c>)
     668:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
     66a:	3701      	adds	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
     66c:	4b23      	ldr	r3, [pc, #140]	; (6fc <xQueueGenericSend+0x108>)
     66e:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
     670:	4b24      	ldr	r3, [pc, #144]	; (704 <xQueueGenericSend+0x110>)
     672:	4798      	blx	r3
		prvLockQueue( pxQueue );
     674:	4b1d      	ldr	r3, [pc, #116]	; (6ec <xQueueGenericSend+0xf8>)
     676:	4798      	blx	r3
     678:	6c63      	ldr	r3, [r4, #68]	; 0x44
     67a:	3301      	adds	r3, #1
     67c:	d101      	bne.n	682 <xQueueGenericSend+0x8e>
     67e:	2300      	movs	r3, #0
     680:	6463      	str	r3, [r4, #68]	; 0x44
     682:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     684:	3301      	adds	r3, #1
     686:	d101      	bne.n	68c <xQueueGenericSend+0x98>
     688:	2300      	movs	r3, #0
     68a:	64a3      	str	r3, [r4, #72]	; 0x48
     68c:	4b1b      	ldr	r3, [pc, #108]	; (6fc <xQueueGenericSend+0x108>)
     68e:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     690:	a804      	add	r0, sp, #16
     692:	a903      	add	r1, sp, #12
     694:	4b1c      	ldr	r3, [pc, #112]	; (708 <xQueueGenericSend+0x114>)
     696:	4798      	blx	r3
     698:	2800      	cmp	r0, #0
     69a:	d11d      	bne.n	6d8 <xQueueGenericSend+0xe4>

static signed portBASE_TYPE prvIsQueueFull( const xQUEUE *pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
     69c:	4b13      	ldr	r3, [pc, #76]	; (6ec <xQueueGenericSend+0xf8>)
     69e:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
     6a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     6a2:	469a      	mov	sl, r3
     6a4:	6be6      	ldr	r6, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
     6a6:	4b15      	ldr	r3, [pc, #84]	; (6fc <xQueueGenericSend+0x108>)
     6a8:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
     6aa:	45b2      	cmp	sl, r6
     6ac:	d10e      	bne.n	6cc <xQueueGenericSend+0xd8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
     6ae:	1c20      	adds	r0, r4, #0
     6b0:	3010      	adds	r0, #16
     6b2:	9903      	ldr	r1, [sp, #12]
     6b4:	4b15      	ldr	r3, [pc, #84]	; (70c <xQueueGenericSend+0x118>)
     6b6:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
     6b8:	1c20      	adds	r0, r4, #0
     6ba:	4b15      	ldr	r3, [pc, #84]	; (710 <xQueueGenericSend+0x11c>)
     6bc:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
     6be:	4b15      	ldr	r3, [pc, #84]	; (714 <xQueueGenericSend+0x120>)
     6c0:	4798      	blx	r3
     6c2:	2800      	cmp	r0, #0
     6c4:	d1ac      	bne.n	620 <xQueueGenericSend+0x2c>
				{
					portYIELD_WITHIN_API();
     6c6:	4b0c      	ldr	r3, [pc, #48]	; (6f8 <xQueueGenericSend+0x104>)
     6c8:	4798      	blx	r3
     6ca:	e7a9      	b.n	620 <xQueueGenericSend+0x2c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
     6cc:	1c20      	adds	r0, r4, #0
     6ce:	4b10      	ldr	r3, [pc, #64]	; (710 <xQueueGenericSend+0x11c>)
     6d0:	4798      	blx	r3
				( void ) xTaskResumeAll();
     6d2:	4b10      	ldr	r3, [pc, #64]	; (714 <xQueueGenericSend+0x120>)
     6d4:	4798      	blx	r3
     6d6:	e7a3      	b.n	620 <xQueueGenericSend+0x2c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
     6d8:	1c20      	adds	r0, r4, #0
     6da:	4b0d      	ldr	r3, [pc, #52]	; (710 <xQueueGenericSend+0x11c>)
     6dc:	4798      	blx	r3
			( void ) xTaskResumeAll();
     6de:	4b0d      	ldr	r3, [pc, #52]	; (714 <xQueueGenericSend+0x120>)
     6e0:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
     6e2:	2000      	movs	r0, #0
		}
	}
}
     6e4:	b006      	add	sp, #24
     6e6:	bc04      	pop	{r2}
     6e8:	4692      	mov	sl, r2
     6ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6ec:	00001219 	.word	0x00001219
     6f0:	000003f9 	.word	0x000003f9
     6f4:	00000fb1 	.word	0x00000fb1
     6f8:	00001201 	.word	0x00001201
     6fc:	00001231 	.word	0x00001231
     700:	0000102d 	.word	0x0000102d
     704:	00000c39 	.word	0x00000c39
     708:	0000104d 	.word	0x0000104d
     70c:	00000f71 	.word	0x00000f71
     710:	00000491 	.word	0x00000491
     714:	00000d85 	.word	0x00000d85

00000718 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle xQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
     718:	b570      	push	{r4, r5, r6, lr}
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;
xQUEUE *pxQueue;

	pxQueue = ( xQUEUE * ) xQueue;
	configASSERT( pxQueue );
     71a:	2800      	cmp	r0, #0
     71c:	d101      	bne.n	722 <xQueueGenericSendFromISR+0xa>
     71e:	b672      	cpsid	i
     720:	e7fe      	b.n	720 <xQueueGenericSendFromISR+0x8>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
     722:	2900      	cmp	r1, #0
     724:	d104      	bne.n	730 <xQueueGenericSendFromISR+0x18>
     726:	6c04      	ldr	r4, [r0, #64]	; 0x40
     728:	2c00      	cmp	r4, #0
     72a:	d001      	beq.n	730 <xQueueGenericSendFromISR+0x18>
     72c:	b672      	cpsid	i
     72e:	e7fe      	b.n	72e <xQueueGenericSendFromISR+0x16>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
     730:	b672      	cpsid	i
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
     732:	6b84      	ldr	r4, [r0, #56]	; 0x38
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
     734:	2500      	movs	r5, #0
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
     736:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
     738:	42b4      	cmp	r4, r6
     73a:	d21c      	bcs.n	776 <xQueueGenericSendFromISR+0x5e>
     73c:	1c16      	adds	r6, r2, #0
     73e:	1c04      	adds	r4, r0, #0
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
     740:	1c1a      	adds	r2, r3, #0
     742:	4b0e      	ldr	r3, [pc, #56]	; (77c <xQueueGenericSendFromISR+0x64>)
     744:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
     746:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     748:	3301      	adds	r3, #1
     74a:	d10e      	bne.n	76a <xQueueGenericSendFromISR+0x52>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     74c:	6a63      	ldr	r3, [r4, #36]	; 0x24
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
     74e:	3501      	adds	r5, #1
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     750:	2b00      	cmp	r3, #0
     752:	d010      	beq.n	776 <xQueueGenericSendFromISR+0x5e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     754:	1c20      	adds	r0, r4, #0
     756:	3024      	adds	r0, #36	; 0x24
     758:	4b09      	ldr	r3, [pc, #36]	; (780 <xQueueGenericSendFromISR+0x68>)
     75a:	4798      	blx	r3
     75c:	2800      	cmp	r0, #0
     75e:	d00a      	beq.n	776 <xQueueGenericSendFromISR+0x5e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
     760:	2e00      	cmp	r6, #0
     762:	d007      	beq.n	774 <xQueueGenericSendFromISR+0x5c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
     764:	2301      	movs	r3, #1
     766:	6033      	str	r3, [r6, #0]
     768:	e005      	b.n	776 <xQueueGenericSendFromISR+0x5e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
     76a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     76c:	3301      	adds	r3, #1
     76e:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
     770:	2501      	movs	r5, #1
     772:	e000      	b.n	776 <xQueueGenericSendFromISR+0x5e>
     774:	2501      	movs	r5, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
     776:	b662      	cpsie	i

	return xReturn;
}
     778:	1c28      	adds	r0, r5, #0
     77a:	bd70      	pop	{r4, r5, r6, pc}
     77c:	000003f9 	.word	0x000003f9
     780:	00000fb1 	.word	0x00000fb1

00000784 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle xQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
     784:	b5f0      	push	{r4, r5, r6, r7, lr}
     786:	464f      	mov	r7, r9
     788:	b480      	push	{r7}
     78a:	b084      	sub	sp, #16
     78c:	9201      	str	r2, [sp, #4]
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;
xQUEUE *pxQueue;

	pxQueue = ( xQUEUE * ) xQueue;
	configASSERT( pxQueue );
     78e:	2800      	cmp	r0, #0
     790:	d101      	bne.n	796 <xQueueGenericReceive+0x12>
     792:	b672      	cpsid	i
     794:	e7fe      	b.n	794 <xQueueGenericReceive+0x10>
     796:	2700      	movs	r7, #0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
     798:	2900      	cmp	r1, #0
     79a:	d105      	bne.n	7a8 <xQueueGenericReceive+0x24>
     79c:	6c02      	ldr	r2, [r0, #64]	; 0x40
     79e:	2a00      	cmp	r2, #0
     7a0:	d001      	beq.n	7a6 <xQueueGenericReceive+0x22>
     7a2:	b672      	cpsid	i
     7a4:	e7fe      	b.n	7a4 <xQueueGenericReceive+0x20>
     7a6:	2700      	movs	r7, #0
     7a8:	1c1d      	adds	r5, r3, #0
     7aa:	9100      	str	r1, [sp, #0]
     7ac:	1c04      	adds	r4, r0, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
     7ae:	4e44      	ldr	r6, [pc, #272]	; (8c0 <xQueueGenericReceive+0x13c>)
     7b0:	47b0      	blx	r6
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
     7b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     7b4:	2b00      	cmp	r3, #0
     7b6:	d02b      	beq.n	810 <xQueueGenericReceive+0x8c>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
     7b8:	68e7      	ldr	r7, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
     7ba:	1c20      	adds	r0, r4, #0
     7bc:	9900      	ldr	r1, [sp, #0]
     7be:	4b41      	ldr	r3, [pc, #260]	; (8c4 <xQueueGenericReceive+0x140>)
     7c0:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
     7c2:	2d00      	cmp	r5, #0
     7c4:	d114      	bne.n	7f0 <xQueueGenericReceive+0x6c>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
     7c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     7c8:	3b01      	subs	r3, #1
     7ca:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     7cc:	6823      	ldr	r3, [r4, #0]
     7ce:	2b00      	cmp	r3, #0
     7d0:	d102      	bne.n	7d8 <xQueueGenericReceive+0x54>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
     7d2:	4b3d      	ldr	r3, [pc, #244]	; (8c8 <xQueueGenericReceive+0x144>)
     7d4:	4798      	blx	r3
     7d6:	6060      	str	r0, [r4, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     7d8:	6923      	ldr	r3, [r4, #16]
     7da:	2b00      	cmp	r3, #0
     7dc:	d014      	beq.n	808 <xQueueGenericReceive+0x84>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
     7de:	1c20      	adds	r0, r4, #0
     7e0:	3010      	adds	r0, #16
     7e2:	4b3a      	ldr	r3, [pc, #232]	; (8cc <xQueueGenericReceive+0x148>)
     7e4:	4798      	blx	r3
     7e6:	2801      	cmp	r0, #1
     7e8:	d10e      	bne.n	808 <xQueueGenericReceive+0x84>
						{
							portYIELD_WITHIN_API();
     7ea:	4b39      	ldr	r3, [pc, #228]	; (8d0 <xQueueGenericReceive+0x14c>)
     7ec:	4798      	blx	r3
     7ee:	e00b      	b.n	808 <xQueueGenericReceive+0x84>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
     7f0:	60e7      	str	r7, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     7f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
     7f4:	2b00      	cmp	r3, #0
     7f6:	d007      	beq.n	808 <xQueueGenericReceive+0x84>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     7f8:	1c20      	adds	r0, r4, #0
     7fa:	3024      	adds	r0, #36	; 0x24
     7fc:	4b33      	ldr	r3, [pc, #204]	; (8cc <xQueueGenericReceive+0x148>)
     7fe:	4798      	blx	r3
     800:	2800      	cmp	r0, #0
     802:	d001      	beq.n	808 <xQueueGenericReceive+0x84>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
     804:	4b32      	ldr	r3, [pc, #200]	; (8d0 <xQueueGenericReceive+0x14c>)
     806:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
     808:	4b32      	ldr	r3, [pc, #200]	; (8d4 <xQueueGenericReceive+0x150>)
     80a:	4798      	blx	r3
				return pdPASS;
     80c:	2001      	movs	r0, #1
     80e:	e052      	b.n	8b6 <xQueueGenericReceive+0x132>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
     810:	9b01      	ldr	r3, [sp, #4]
     812:	2b00      	cmp	r3, #0
     814:	d103      	bne.n	81e <xQueueGenericReceive+0x9a>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
     816:	4b2f      	ldr	r3, [pc, #188]	; (8d4 <xQueueGenericReceive+0x150>)
     818:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
     81a:	2000      	movs	r0, #0
     81c:	e04b      	b.n	8b6 <xQueueGenericReceive+0x132>
				}
				else if( xEntryTimeSet == pdFALSE )
     81e:	2f00      	cmp	r7, #0
     820:	d103      	bne.n	82a <xQueueGenericReceive+0xa6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
     822:	a802      	add	r0, sp, #8
     824:	4b2c      	ldr	r3, [pc, #176]	; (8d8 <xQueueGenericReceive+0x154>)
     826:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
     828:	3701      	adds	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
     82a:	4b2a      	ldr	r3, [pc, #168]	; (8d4 <xQueueGenericReceive+0x150>)
     82c:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
     82e:	4b2b      	ldr	r3, [pc, #172]	; (8dc <xQueueGenericReceive+0x158>)
     830:	4798      	blx	r3
		prvLockQueue( pxQueue );
     832:	4b23      	ldr	r3, [pc, #140]	; (8c0 <xQueueGenericReceive+0x13c>)
     834:	4798      	blx	r3
     836:	6c63      	ldr	r3, [r4, #68]	; 0x44
     838:	3301      	adds	r3, #1
     83a:	d101      	bne.n	840 <xQueueGenericReceive+0xbc>
     83c:	2300      	movs	r3, #0
     83e:	6463      	str	r3, [r4, #68]	; 0x44
     840:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     842:	3301      	adds	r3, #1
     844:	d101      	bne.n	84a <xQueueGenericReceive+0xc6>
     846:	2300      	movs	r3, #0
     848:	64a3      	str	r3, [r4, #72]	; 0x48
     84a:	4b22      	ldr	r3, [pc, #136]	; (8d4 <xQueueGenericReceive+0x150>)
     84c:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     84e:	a802      	add	r0, sp, #8
     850:	a901      	add	r1, sp, #4
     852:	4b23      	ldr	r3, [pc, #140]	; (8e0 <xQueueGenericReceive+0x15c>)
     854:	4798      	blx	r3
     856:	2800      	cmp	r0, #0
     858:	d127      	bne.n	8aa <xQueueGenericReceive+0x126>

static signed portBASE_TYPE prvIsQueueEmpty( const xQUEUE *pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
     85a:	4b19      	ldr	r3, [pc, #100]	; (8c0 <xQueueGenericReceive+0x13c>)
     85c:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == 0 )
     85e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     860:	4699      	mov	r9, r3
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
     862:	4b1c      	ldr	r3, [pc, #112]	; (8d4 <xQueueGenericReceive+0x150>)
     864:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     866:	464b      	mov	r3, r9
     868:	2b00      	cmp	r3, #0
     86a:	d118      	bne.n	89e <xQueueGenericReceive+0x11a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     86c:	6823      	ldr	r3, [r4, #0]
     86e:	2b00      	cmp	r3, #0
     870:	d106      	bne.n	880 <xQueueGenericReceive+0xfc>
					{
						portENTER_CRITICAL();
     872:	4b13      	ldr	r3, [pc, #76]	; (8c0 <xQueueGenericReceive+0x13c>)
     874:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
     876:	6860      	ldr	r0, [r4, #4]
     878:	4b1a      	ldr	r3, [pc, #104]	; (8e4 <xQueueGenericReceive+0x160>)
     87a:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
     87c:	4b15      	ldr	r3, [pc, #84]	; (8d4 <xQueueGenericReceive+0x150>)
     87e:	4798      	blx	r3
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
     880:	1c20      	adds	r0, r4, #0
     882:	3024      	adds	r0, #36	; 0x24
     884:	9901      	ldr	r1, [sp, #4]
     886:	4b18      	ldr	r3, [pc, #96]	; (8e8 <xQueueGenericReceive+0x164>)
     888:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
     88a:	1c20      	adds	r0, r4, #0
     88c:	4b17      	ldr	r3, [pc, #92]	; (8ec <xQueueGenericReceive+0x168>)
     88e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
     890:	4b17      	ldr	r3, [pc, #92]	; (8f0 <xQueueGenericReceive+0x16c>)
     892:	4798      	blx	r3
     894:	2800      	cmp	r0, #0
     896:	d18b      	bne.n	7b0 <xQueueGenericReceive+0x2c>
				{
					portYIELD_WITHIN_API();
     898:	4b0d      	ldr	r3, [pc, #52]	; (8d0 <xQueueGenericReceive+0x14c>)
     89a:	4798      	blx	r3
     89c:	e788      	b.n	7b0 <xQueueGenericReceive+0x2c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
     89e:	1c20      	adds	r0, r4, #0
     8a0:	4b12      	ldr	r3, [pc, #72]	; (8ec <xQueueGenericReceive+0x168>)
     8a2:	4798      	blx	r3
				( void ) xTaskResumeAll();
     8a4:	4b12      	ldr	r3, [pc, #72]	; (8f0 <xQueueGenericReceive+0x16c>)
     8a6:	4798      	blx	r3
     8a8:	e782      	b.n	7b0 <xQueueGenericReceive+0x2c>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
     8aa:	1c20      	adds	r0, r4, #0
     8ac:	4b0f      	ldr	r3, [pc, #60]	; (8ec <xQueueGenericReceive+0x168>)
     8ae:	4798      	blx	r3
			( void ) xTaskResumeAll();
     8b0:	4b0f      	ldr	r3, [pc, #60]	; (8f0 <xQueueGenericReceive+0x16c>)
     8b2:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
     8b4:	2000      	movs	r0, #0
		}
	}
}
     8b6:	b004      	add	sp, #16
     8b8:	bc04      	pop	{r2}
     8ba:	4691      	mov	r9, r2
     8bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     8be:	46c0      	nop			; (mov r8, r8)
     8c0:	00001219 	.word	0x00001219
     8c4:	00000469 	.word	0x00000469
     8c8:	000010c9 	.word	0x000010c9
     8cc:	00000fb1 	.word	0x00000fb1
     8d0:	00001201 	.word	0x00001201
     8d4:	00001231 	.word	0x00001231
     8d8:	0000102d 	.word	0x0000102d
     8dc:	00000c39 	.word	0x00000c39
     8e0:	0000104d 	.word	0x0000104d
     8e4:	000010d5 	.word	0x000010d5
     8e8:	00000f71 	.word	0x00000f71
     8ec:	00000491 	.word	0x00000491
     8f0:	00000d85 	.word	0x00000d85

000008f4 <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
     8f4:	1c03      	adds	r3, r0, #0
     8f6:	3308      	adds	r3, #8
     8f8:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     8fa:	2201      	movs	r2, #1
     8fc:	4252      	negs	r2, r2
     8fe:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
     900:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
     902:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
     904:	2300      	movs	r3, #0
     906:	6003      	str	r3, [r0, #0]
}
     908:	4770      	bx	lr
     90a:	46c0      	nop			; (mov r8, r8)

0000090c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     90c:	2300      	movs	r3, #0
     90e:	6103      	str	r3, [r0, #16]
}
     910:	4770      	bx	lr
     912:	46c0      	nop			; (mov r8, r8)

00000914 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
     914:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
     916:	685a      	ldr	r2, [r3, #4]
     918:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
     91a:	6842      	ldr	r2, [r0, #4]
     91c:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     91e:	685a      	ldr	r2, [r3, #4]
     920:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
     922:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
     924:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     926:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
     928:	6803      	ldr	r3, [r0, #0]
     92a:	3301      	adds	r3, #1
     92c:	6003      	str	r3, [r0, #0]
}
     92e:	4770      	bx	lr

00000930 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
     930:	b510      	push	{r4, lr}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
     932:	680c      	ldr	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     934:	1c63      	adds	r3, r4, #1
     936:	d101      	bne.n	93c <vListInsert+0xc>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     938:	6903      	ldr	r3, [r0, #16]
     93a:	e00a      	b.n	952 <vListInsert+0x22>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
     93c:	1c03      	adds	r3, r0, #0
     93e:	3308      	adds	r3, #8
     940:	68c2      	ldr	r2, [r0, #12]
     942:	6812      	ldr	r2, [r2, #0]
     944:	4294      	cmp	r4, r2
     946:	d304      	bcc.n	952 <vListInsert+0x22>
     948:	685b      	ldr	r3, [r3, #4]
     94a:	685a      	ldr	r2, [r3, #4]
     94c:	6812      	ldr	r2, [r2, #0]
     94e:	4294      	cmp	r4, r2
     950:	d2fa      	bcs.n	948 <vListInsert+0x18>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     952:	685a      	ldr	r2, [r3, #4]
     954:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     956:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
     958:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
     95a:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     95c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
     95e:	6803      	ldr	r3, [r0, #0]
     960:	3301      	adds	r3, #1
     962:	6003      	str	r3, [r0, #0]
}
     964:	bd10      	pop	{r4, pc}
     966:	46c0      	nop			; (mov r8, r8)

00000968 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     968:	6843      	ldr	r3, [r0, #4]
     96a:	6882      	ldr	r2, [r0, #8]
     96c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     96e:	6883      	ldr	r3, [r0, #8]
     970:	6842      	ldr	r2, [r0, #4]
     972:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
     974:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     976:	685a      	ldr	r2, [r3, #4]
     978:	4282      	cmp	r2, r0
     97a:	d101      	bne.n	980 <uxListRemove+0x18>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     97c:	6882      	ldr	r2, [r0, #8]
     97e:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
     980:	2200      	movs	r2, #0
     982:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
     984:	681a      	ldr	r2, [r3, #0]
     986:	3a01      	subs	r2, #1
     988:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
     98a:	6818      	ldr	r0, [r3, #0]
}
     98c:	4770      	bx	lr
     98e:	46c0      	nop			; (mov r8, r8)

00000990 <prvAddCurrentTaskToDelayedList>:
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
     990:	b510      	push	{r4, lr}
     992:	1e04      	subs	r4, r0, #0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
     994:	4b0e      	ldr	r3, [pc, #56]	; (9d0 <prvAddCurrentTaskToDelayedList+0x40>)
     996:	681b      	ldr	r3, [r3, #0]
     998:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
     99a:	4b0e      	ldr	r3, [pc, #56]	; (9d4 <prvAddCurrentTaskToDelayedList+0x44>)
     99c:	681b      	ldr	r3, [r3, #0]
     99e:	429c      	cmp	r4, r3
     9a0:	d207      	bcs.n	9b2 <prvAddCurrentTaskToDelayedList+0x22>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
     9a2:	4b0d      	ldr	r3, [pc, #52]	; (9d8 <prvAddCurrentTaskToDelayedList+0x48>)
     9a4:	6818      	ldr	r0, [r3, #0]
     9a6:	4b0a      	ldr	r3, [pc, #40]	; (9d0 <prvAddCurrentTaskToDelayedList+0x40>)
     9a8:	6819      	ldr	r1, [r3, #0]
     9aa:	3104      	adds	r1, #4
     9ac:	4b0b      	ldr	r3, [pc, #44]	; (9dc <prvAddCurrentTaskToDelayedList+0x4c>)
     9ae:	4798      	blx	r3
     9b0:	e00c      	b.n	9cc <prvAddCurrentTaskToDelayedList+0x3c>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
     9b2:	4b0b      	ldr	r3, [pc, #44]	; (9e0 <prvAddCurrentTaskToDelayedList+0x50>)
     9b4:	6818      	ldr	r0, [r3, #0]
     9b6:	4b06      	ldr	r3, [pc, #24]	; (9d0 <prvAddCurrentTaskToDelayedList+0x40>)
     9b8:	6819      	ldr	r1, [r3, #0]
     9ba:	3104      	adds	r1, #4
     9bc:	4b07      	ldr	r3, [pc, #28]	; (9dc <prvAddCurrentTaskToDelayedList+0x4c>)
     9be:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
     9c0:	4b08      	ldr	r3, [pc, #32]	; (9e4 <prvAddCurrentTaskToDelayedList+0x54>)
     9c2:	681b      	ldr	r3, [r3, #0]
     9c4:	429c      	cmp	r4, r3
     9c6:	d201      	bcs.n	9cc <prvAddCurrentTaskToDelayedList+0x3c>
		{
			xNextTaskUnblockTime = xTimeToWake;
     9c8:	4b06      	ldr	r3, [pc, #24]	; (9e4 <prvAddCurrentTaskToDelayedList+0x54>)
     9ca:	601c      	str	r4, [r3, #0]
		}
	}
}
     9cc:	bd10      	pop	{r4, pc}
     9ce:	46c0      	nop			; (mov r8, r8)
     9d0:	2000023c 	.word	0x2000023c
     9d4:	20000254 	.word	0x20000254
     9d8:	20000258 	.word	0x20000258
     9dc:	00000931 	.word	0x00000931
     9e0:	200001a0 	.word	0x200001a0
     9e4:	200000b4 	.word	0x200000b4

000009e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
     9e8:	b510      	push	{r4, lr}
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
     9ea:	4c01      	ldr	r4, [pc, #4]	; (9f0 <prvIdleTask+0x8>)
     9ec:	47a0      	blx	r4
				}
				xTaskResumeAll();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
     9ee:	e7fd      	b.n	9ec <prvIdleTask+0x4>
     9f0:	00000251 	.word	0x00000251

000009f4 <xTaskGenericCreate>:
#endif

/*lint +e956 */

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
     9f4:	b5f0      	push	{r4, r5, r6, r7, lr}
     9f6:	464f      	mov	r7, r9
     9f8:	4646      	mov	r6, r8
     9fa:	b4c0      	push	{r6, r7}
     9fc:	b085      	sub	sp, #20
     9fe:	9c0c      	ldr	r4, [sp, #48]	; 0x30
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
     a00:	2800      	cmp	r0, #0
     a02:	d101      	bne.n	a08 <xTaskGenericCreate+0x14>
     a04:	b672      	cpsid	i
     a06:	e7fe      	b.n	a06 <xTaskGenericCreate+0x12>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
     a08:	2c05      	cmp	r4, #5
     a0a:	d901      	bls.n	a10 <xTaskGenericCreate+0x1c>
     a0c:	b672      	cpsid	i
     a0e:	e7fe      	b.n	a0e <xTaskGenericCreate+0x1a>
     a10:	9303      	str	r3, [sp, #12]
     a12:	1c16      	adds	r6, r2, #0
     a14:	1c0f      	adds	r7, r1, #0
     a16:	9002      	str	r0, [sp, #8]
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
     a18:	2040      	movs	r0, #64	; 0x40
     a1a:	4b59      	ldr	r3, [pc, #356]	; (b80 <xTaskGenericCreate+0x18c>)
     a1c:	4798      	blx	r3
     a1e:	1e05      	subs	r5, r0, #0

	if( pxNewTCB != NULL )
     a20:	d100      	bne.n	a24 <xTaskGenericCreate+0x30>
     a22:	e0a5      	b.n	b70 <xTaskGenericCreate+0x17c>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
     a24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
     a26:	2b00      	cmp	r3, #0
     a28:	d000      	beq.n	a2c <xTaskGenericCreate+0x38>
     a2a:	e09d      	b.n	b68 <xTaskGenericCreate+0x174>
     a2c:	00b0      	lsls	r0, r6, #2
     a2e:	4b54      	ldr	r3, [pc, #336]	; (b80 <xTaskGenericCreate+0x18c>)
     a30:	4798      	blx	r3
     a32:	6328      	str	r0, [r5, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
     a34:	2800      	cmp	r0, #0
     a36:	d103      	bne.n	a40 <xTaskGenericCreate+0x4c>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
     a38:	1c28      	adds	r0, r5, #0
     a3a:	4b52      	ldr	r3, [pc, #328]	; (b84 <xTaskGenericCreate+0x190>)
     a3c:	4798      	blx	r3
     a3e:	e097      	b.n	b70 <xTaskGenericCreate+0x17c>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
     a40:	00b2      	lsls	r2, r6, #2
     a42:	21a5      	movs	r1, #165	; 0xa5
     a44:	4b50      	ldr	r3, [pc, #320]	; (b88 <xTaskGenericCreate+0x194>)
     a46:	4798      	blx	r3
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
     a48:	4b50      	ldr	r3, [pc, #320]	; (b8c <xTaskGenericCreate+0x198>)
     a4a:	18f3      	adds	r3, r6, r3
     a4c:	009b      	lsls	r3, r3, #2
     a4e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
     a50:	4694      	mov	ip, r2
     a52:	4463      	add	r3, ip
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
     a54:	2207      	movs	r2, #7
     a56:	4393      	bics	r3, r2
     a58:	4698      	mov	r8, r3
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
     a5a:	1c28      	adds	r0, r5, #0
     a5c:	3034      	adds	r0, #52	; 0x34
     a5e:	1c39      	adds	r1, r7, #0
     a60:	3201      	adds	r2, #1
     a62:	4b4b      	ldr	r3, [pc, #300]	; (b90 <xTaskGenericCreate+0x19c>)
     a64:	4798      	blx	r3
	}
	#endif /* configMAX_TASK_NAME_LEN */
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
     a66:	2200      	movs	r2, #0
     a68:	233b      	movs	r3, #59	; 0x3b
     a6a:	54ea      	strb	r2, [r5, r3]
     a6c:	1e27      	subs	r7, r4, #0
     a6e:	2f05      	cmp	r7, #5
     a70:	d900      	bls.n	a74 <xTaskGenericCreate+0x80>
     a72:	2705      	movs	r7, #5
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
     a74:	62ef      	str	r7, [r5, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
     a76:	63ef      	str	r7, [r5, #60]	; 0x3c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
     a78:	1d2b      	adds	r3, r5, #4
     a7a:	9301      	str	r3, [sp, #4]
     a7c:	1c18      	adds	r0, r3, #0
     a7e:	4e45      	ldr	r6, [pc, #276]	; (b94 <xTaskGenericCreate+0x1a0>)
     a80:	47b0      	blx	r6
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
     a82:	1c28      	adds	r0, r5, #0
     a84:	3018      	adds	r0, #24
     a86:	47b0      	blx	r6

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
     a88:	612d      	str	r5, [r5, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
     a8a:	2306      	movs	r3, #6
     a8c:	1bdb      	subs	r3, r3, r7
     a8e:	61ab      	str	r3, [r5, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
     a90:	626d      	str	r5, [r5, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
     a92:	4640      	mov	r0, r8
     a94:	9902      	ldr	r1, [sp, #8]
     a96:	9a03      	ldr	r2, [sp, #12]
     a98:	4b3f      	ldr	r3, [pc, #252]	; (b98 <xTaskGenericCreate+0x1a4>)
     a9a:	4798      	blx	r3
     a9c:	6028      	str	r0, [r5, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
     a9e:	0743      	lsls	r3, r0, #29
     aa0:	d001      	beq.n	aa6 <xTaskGenericCreate+0xb2>
     aa2:	b672      	cpsid	i
     aa4:	e7fe      	b.n	aa4 <xTaskGenericCreate+0xb0>

		if( ( void * ) pxCreatedTask != NULL )
     aa6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
     aa8:	2b00      	cmp	r3, #0
     aaa:	d000      	beq.n	aae <xTaskGenericCreate+0xba>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
     aac:	601d      	str	r5, [r3, #0]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
     aae:	4b3b      	ldr	r3, [pc, #236]	; (b9c <xTaskGenericCreate+0x1a8>)
     ab0:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
     ab2:	4a3b      	ldr	r2, [pc, #236]	; (ba0 <xTaskGenericCreate+0x1ac>)
     ab4:	6813      	ldr	r3, [r2, #0]
     ab6:	3301      	adds	r3, #1
     ab8:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
     aba:	4b3a      	ldr	r3, [pc, #232]	; (ba4 <xTaskGenericCreate+0x1b0>)
     abc:	681b      	ldr	r3, [r3, #0]
     abe:	2b00      	cmp	r3, #0
     ac0:	d11e      	bne.n	b00 <xTaskGenericCreate+0x10c>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
     ac2:	4b38      	ldr	r3, [pc, #224]	; (ba4 <xTaskGenericCreate+0x1b0>)
     ac4:	601d      	str	r5, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
     ac6:	6813      	ldr	r3, [r2, #0]
     ac8:	2b01      	cmp	r3, #1
     aca:	d124      	bne.n	b16 <xTaskGenericCreate+0x122>
     acc:	4e36      	ldr	r6, [pc, #216]	; (ba8 <xTaskGenericCreate+0x1b4>)
     ace:	3377      	adds	r3, #119	; 0x77
     ad0:	4699      	mov	r9, r3
     ad2:	44b1      	add	r9, r6
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
     ad4:	4f35      	ldr	r7, [pc, #212]	; (bac <xTaskGenericCreate+0x1b8>)
     ad6:	1c30      	adds	r0, r6, #0
     ad8:	47b8      	blx	r7
     ada:	3614      	adds	r6, #20

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
     adc:	454e      	cmp	r6, r9
     ade:	d1fa      	bne.n	ad6 <xTaskGenericCreate+0xe2>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
     ae0:	4b33      	ldr	r3, [pc, #204]	; (bb0 <xTaskGenericCreate+0x1bc>)
     ae2:	4699      	mov	r9, r3
     ae4:	1c18      	adds	r0, r3, #0
     ae6:	4e31      	ldr	r6, [pc, #196]	; (bac <xTaskGenericCreate+0x1b8>)
     ae8:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
     aea:	4f32      	ldr	r7, [pc, #200]	; (bb4 <xTaskGenericCreate+0x1c0>)
     aec:	1c38      	adds	r0, r7, #0
     aee:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xPendingReadyList );
     af0:	4831      	ldr	r0, [pc, #196]	; (bb8 <xTaskGenericCreate+0x1c4>)
     af2:	47b0      	blx	r6
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
     af4:	4b31      	ldr	r3, [pc, #196]	; (bbc <xTaskGenericCreate+0x1c8>)
     af6:	464a      	mov	r2, r9
     af8:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
     afa:	4b31      	ldr	r3, [pc, #196]	; (bc0 <xTaskGenericCreate+0x1cc>)
     afc:	601f      	str	r7, [r3, #0]
     afe:	e00a      	b.n	b16 <xTaskGenericCreate+0x122>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
     b00:	4b30      	ldr	r3, [pc, #192]	; (bc4 <xTaskGenericCreate+0x1d0>)
     b02:	681b      	ldr	r3, [r3, #0]
     b04:	2b00      	cmp	r3, #0
     b06:	d106      	bne.n	b16 <xTaskGenericCreate+0x122>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
     b08:	4b26      	ldr	r3, [pc, #152]	; (ba4 <xTaskGenericCreate+0x1b0>)
     b0a:	681b      	ldr	r3, [r3, #0]
     b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     b0e:	429c      	cmp	r4, r3
     b10:	d301      	bcc.n	b16 <xTaskGenericCreate+0x122>
					{
						pxCurrentTCB = pxNewTCB;
     b12:	4b24      	ldr	r3, [pc, #144]	; (ba4 <xTaskGenericCreate+0x1b0>)
     b14:	601d      	str	r5, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
     b16:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
     b18:	4a2b      	ldr	r2, [pc, #172]	; (bc8 <xTaskGenericCreate+0x1d4>)
     b1a:	6812      	ldr	r2, [r2, #0]
     b1c:	4293      	cmp	r3, r2
     b1e:	d901      	bls.n	b24 <xTaskGenericCreate+0x130>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
     b20:	4a29      	ldr	r2, [pc, #164]	; (bc8 <xTaskGenericCreate+0x1d4>)
     b22:	6013      	str	r3, [r2, #0]
			}

			uxTaskNumber++;
     b24:	4929      	ldr	r1, [pc, #164]	; (bcc <xTaskGenericCreate+0x1d8>)
     b26:	680a      	ldr	r2, [r1, #0]
     b28:	3201      	adds	r2, #1
     b2a:	600a      	str	r2, [r1, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyQueue( pxNewTCB );
     b2c:	4a28      	ldr	r2, [pc, #160]	; (bd0 <xTaskGenericCreate+0x1dc>)
     b2e:	6812      	ldr	r2, [r2, #0]
     b30:	4293      	cmp	r3, r2
     b32:	d901      	bls.n	b38 <xTaskGenericCreate+0x144>
     b34:	4a26      	ldr	r2, [pc, #152]	; (bd0 <xTaskGenericCreate+0x1dc>)
     b36:	6013      	str	r3, [r2, #0]
     b38:	0098      	lsls	r0, r3, #2
     b3a:	18c3      	adds	r3, r0, r3
     b3c:	009b      	lsls	r3, r3, #2
     b3e:	481a      	ldr	r0, [pc, #104]	; (ba8 <xTaskGenericCreate+0x1b4>)
     b40:	18c0      	adds	r0, r0, r3
     b42:	9901      	ldr	r1, [sp, #4]
     b44:	4b23      	ldr	r3, [pc, #140]	; (bd4 <xTaskGenericCreate+0x1e0>)
     b46:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
     b48:	4b23      	ldr	r3, [pc, #140]	; (bd8 <xTaskGenericCreate+0x1e4>)
     b4a:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
     b4c:	4b1d      	ldr	r3, [pc, #116]	; (bc4 <xTaskGenericCreate+0x1d0>)
     b4e:	681b      	ldr	r3, [r3, #0]
     b50:	2001      	movs	r0, #1
     b52:	2b00      	cmp	r3, #0
     b54:	d00e      	beq.n	b74 <xTaskGenericCreate+0x180>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
     b56:	4b13      	ldr	r3, [pc, #76]	; (ba4 <xTaskGenericCreate+0x1b0>)
     b58:	681b      	ldr	r3, [r3, #0]
     b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     b5c:	429c      	cmp	r4, r3
     b5e:	d909      	bls.n	b74 <xTaskGenericCreate+0x180>
			{
				portYIELD_WITHIN_API();
     b60:	4b1e      	ldr	r3, [pc, #120]	; (bdc <xTaskGenericCreate+0x1e8>)
     b62:	4798      	blx	r3
     b64:	2001      	movs	r0, #1
     b66:	e005      	b.n	b74 <xTaskGenericCreate+0x180>
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
     b68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
     b6a:	6303      	str	r3, [r0, #48]	; 0x30
     b6c:	1c18      	adds	r0, r3, #0
     b6e:	e767      	b.n	a40 <xTaskGenericCreate+0x4c>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
     b70:	2001      	movs	r0, #1
     b72:	4240      	negs	r0, r0
			}
		}
	}

	return xReturn;
}
     b74:	b005      	add	sp, #20
     b76:	bc0c      	pop	{r2, r3}
     b78:	4690      	mov	r8, r2
     b7a:	4699      	mov	r9, r3
     b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b7e:	46c0      	nop			; (mov r8, r8)
     b80:	00001319 	.word	0x00001319
     b84:	00001381 	.word	0x00001381
     b88:	00009eb9 	.word	0x00009eb9
     b8c:	3fffffff 	.word	0x3fffffff
     b90:	0000b5e3 	.word	0x0000b5e3
     b94:	0000090d 	.word	0x0000090d
     b98:	000011c1 	.word	0x000011c1
     b9c:	00001219 	.word	0x00001219
     ba0:	2000027c 	.word	0x2000027c
     ba4:	2000023c 	.word	0x2000023c
     ba8:	200001c0 	.word	0x200001c0
     bac:	000008f5 	.word	0x000008f5
     bb0:	20000264 	.word	0x20000264
     bb4:	200001ac 	.word	0x200001ac
     bb8:	20000240 	.word	0x20000240
     bbc:	200001a0 	.word	0x200001a0
     bc0:	20000258 	.word	0x20000258
     bc4:	200001a4 	.word	0x200001a4
     bc8:	20000280 	.word	0x20000280
     bcc:	20000260 	.word	0x20000260
     bd0:	2000025c 	.word	0x2000025c
     bd4:	00000915 	.word	0x00000915
     bd8:	00001231 	.word	0x00001231
     bdc:	00001201 	.word	0x00001201

00000be0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
     be0:	b510      	push	{r4, lr}
     be2:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
     be4:	2300      	movs	r3, #0
     be6:	9300      	str	r3, [sp, #0]
     be8:	9301      	str	r3, [sp, #4]
     bea:	9302      	str	r3, [sp, #8]
     bec:	9303      	str	r3, [sp, #12]
     bee:	480c      	ldr	r0, [pc, #48]	; (c20 <vTaskStartScheduler+0x40>)
     bf0:	490c      	ldr	r1, [pc, #48]	; (c24 <vTaskStartScheduler+0x44>)
     bf2:	2296      	movs	r2, #150	; 0x96
     bf4:	0052      	lsls	r2, r2, #1
     bf6:	4c0c      	ldr	r4, [pc, #48]	; (c28 <vTaskStartScheduler+0x48>)
     bf8:	47a0      	blx	r4
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
     bfa:	2801      	cmp	r0, #1
     bfc:	d109      	bne.n	c12 <vTaskStartScheduler+0x32>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
     bfe:	b672      	cpsid	i

		xSchedulerRunning = pdTRUE;
     c00:	2201      	movs	r2, #1
     c02:	4b0a      	ldr	r3, [pc, #40]	; (c2c <vTaskStartScheduler+0x4c>)
     c04:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
     c06:	2200      	movs	r2, #0
     c08:	4b09      	ldr	r3, [pc, #36]	; (c30 <vTaskStartScheduler+0x50>)
     c0a:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
     c0c:	4b09      	ldr	r3, [pc, #36]	; (c34 <vTaskStartScheduler+0x54>)
     c0e:	4798      	blx	r3
     c10:	e003      	b.n	c1a <vTaskStartScheduler+0x3a>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
     c12:	2800      	cmp	r0, #0
     c14:	d101      	bne.n	c1a <vTaskStartScheduler+0x3a>
     c16:	b672      	cpsid	i
     c18:	e7fe      	b.n	c18 <vTaskStartScheduler+0x38>
	}
}
     c1a:	b004      	add	sp, #16
     c1c:	bd10      	pop	{r4, pc}
     c1e:	46c0      	nop			; (mov r8, r8)
     c20:	000009e9 	.word	0x000009e9
     c24:	0000ead0 	.word	0x0000ead0
     c28:	000009f5 	.word	0x000009f5
     c2c:	200001a4 	.word	0x200001a4
     c30:	20000254 	.word	0x20000254
     c34:	000012dd 	.word	0x000012dd

00000c38 <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
     c38:	4a02      	ldr	r2, [pc, #8]	; (c44 <vTaskSuspendAll+0xc>)
     c3a:	6813      	ldr	r3, [r2, #0]
     c3c:	3301      	adds	r3, #1
     c3e:	6013      	str	r3, [r2, #0]
}
     c40:	4770      	bx	lr
     c42:	46c0      	nop			; (mov r8, r8)
     c44:	20000238 	.word	0x20000238

00000c48 <xTaskGetTickCount>:
	return xAlreadyYielded;
}
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCount( void )
{
     c48:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
     c4a:	4b04      	ldr	r3, [pc, #16]	; (c5c <xTaskGetTickCount+0x14>)
     c4c:	4798      	blx	r3
	{
		xTicks = xTickCount;
     c4e:	4b04      	ldr	r3, [pc, #16]	; (c60 <xTaskGetTickCount+0x18>)
     c50:	681c      	ldr	r4, [r3, #0]
	}
	taskEXIT_CRITICAL();
     c52:	4b04      	ldr	r3, [pc, #16]	; (c64 <xTaskGetTickCount+0x1c>)
     c54:	4798      	blx	r3

	return xTicks;
}
     c56:	1c20      	adds	r0, r4, #0
     c58:	bd10      	pop	{r4, pc}
     c5a:	46c0      	nop			; (mov r8, r8)
     c5c:	00001219 	.word	0x00001219
     c60:	20000254 	.word	0x20000254
     c64:	00001231 	.word	0x00001231

00000c68 <vTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
     c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
     c6a:	4b3b      	ldr	r3, [pc, #236]	; (d58 <vTaskIncrementTick+0xf0>)
     c6c:	681b      	ldr	r3, [r3, #0]
     c6e:	2b00      	cmp	r3, #0
     c70:	d16d      	bne.n	d4e <vTaskIncrementTick+0xe6>
	{
		++xTickCount;
     c72:	4b3a      	ldr	r3, [pc, #232]	; (d5c <vTaskIncrementTick+0xf4>)
     c74:	681a      	ldr	r2, [r3, #0]
     c76:	3201      	adds	r2, #1
     c78:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
     c7a:	681b      	ldr	r3, [r3, #0]
     c7c:	2b00      	cmp	r3, #0
     c7e:	d120      	bne.n	cc2 <vTaskIncrementTick+0x5a>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
     c80:	4b37      	ldr	r3, [pc, #220]	; (d60 <vTaskIncrementTick+0xf8>)
     c82:	681b      	ldr	r3, [r3, #0]
     c84:	681b      	ldr	r3, [r3, #0]
     c86:	2b00      	cmp	r3, #0
     c88:	d001      	beq.n	c8e <vTaskIncrementTick+0x26>
     c8a:	b672      	cpsid	i
     c8c:	e7fe      	b.n	c8c <vTaskIncrementTick+0x24>

			pxTemp = pxDelayedTaskList;
     c8e:	4b34      	ldr	r3, [pc, #208]	; (d60 <vTaskIncrementTick+0xf8>)
     c90:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
     c92:	4a34      	ldr	r2, [pc, #208]	; (d64 <vTaskIncrementTick+0xfc>)
     c94:	6810      	ldr	r0, [r2, #0]
     c96:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
     c98:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
     c9a:	4933      	ldr	r1, [pc, #204]	; (d68 <vTaskIncrementTick+0x100>)
     c9c:	680a      	ldr	r2, [r1, #0]
     c9e:	3201      	adds	r2, #1
     ca0:	600a      	str	r2, [r1, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
     ca2:	681b      	ldr	r3, [r3, #0]
     ca4:	681b      	ldr	r3, [r3, #0]
     ca6:	2b00      	cmp	r3, #0
     ca8:	d104      	bne.n	cb4 <vTaskIncrementTick+0x4c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
     caa:	2201      	movs	r2, #1
     cac:	4252      	negs	r2, r2
     cae:	4b2f      	ldr	r3, [pc, #188]	; (d6c <vTaskIncrementTick+0x104>)
     cb0:	601a      	str	r2, [r3, #0]
     cb2:	e006      	b.n	cc2 <vTaskIncrementTick+0x5a>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
     cb4:	4b2a      	ldr	r3, [pc, #168]	; (d60 <vTaskIncrementTick+0xf8>)
     cb6:	681b      	ldr	r3, [r3, #0]
     cb8:	68db      	ldr	r3, [r3, #12]
     cba:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
     cbc:	685a      	ldr	r2, [r3, #4]
     cbe:	4b2b      	ldr	r3, [pc, #172]	; (d6c <vTaskIncrementTick+0x104>)
     cc0:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
     cc2:	4b26      	ldr	r3, [pc, #152]	; (d5c <vTaskIncrementTick+0xf4>)
     cc4:	681a      	ldr	r2, [r3, #0]
     cc6:	4b29      	ldr	r3, [pc, #164]	; (d6c <vTaskIncrementTick+0x104>)
     cc8:	681b      	ldr	r3, [r3, #0]
     cca:	429a      	cmp	r2, r3
     ccc:	d343      	bcc.n	d56 <vTaskIncrementTick+0xee>
     cce:	4b24      	ldr	r3, [pc, #144]	; (d60 <vTaskIncrementTick+0xf8>)
     cd0:	681b      	ldr	r3, [r3, #0]
     cd2:	681b      	ldr	r3, [r3, #0]
     cd4:	2b00      	cmp	r3, #0
     cd6:	d00b      	beq.n	cf0 <vTaskIncrementTick+0x88>
     cd8:	4b21      	ldr	r3, [pc, #132]	; (d60 <vTaskIncrementTick+0xf8>)
     cda:	681b      	ldr	r3, [r3, #0]
     cdc:	68db      	ldr	r3, [r3, #12]
     cde:	68dd      	ldr	r5, [r3, #12]
     ce0:	686b      	ldr	r3, [r5, #4]
     ce2:	4a1e      	ldr	r2, [pc, #120]	; (d5c <vTaskIncrementTick+0xf4>)
     ce4:	6812      	ldr	r2, [r2, #0]
     ce6:	4293      	cmp	r3, r2
     ce8:	d810      	bhi.n	d0c <vTaskIncrementTick+0xa4>
     cea:	4f21      	ldr	r7, [pc, #132]	; (d70 <vTaskIncrementTick+0x108>)
     cec:	4e21      	ldr	r6, [pc, #132]	; (d74 <vTaskIncrementTick+0x10c>)
     cee:	e010      	b.n	d12 <vTaskIncrementTick+0xaa>
     cf0:	2201      	movs	r2, #1
     cf2:	4252      	negs	r2, r2
     cf4:	4b1d      	ldr	r3, [pc, #116]	; (d6c <vTaskIncrementTick+0x104>)
     cf6:	601a      	str	r2, [r3, #0]
     cf8:	e02d      	b.n	d56 <vTaskIncrementTick+0xee>
     cfa:	4b19      	ldr	r3, [pc, #100]	; (d60 <vTaskIncrementTick+0xf8>)
     cfc:	681b      	ldr	r3, [r3, #0]
     cfe:	68db      	ldr	r3, [r3, #12]
     d00:	68dd      	ldr	r5, [r3, #12]
     d02:	686b      	ldr	r3, [r5, #4]
     d04:	4a15      	ldr	r2, [pc, #84]	; (d5c <vTaskIncrementTick+0xf4>)
     d06:	6812      	ldr	r2, [r2, #0]
     d08:	4293      	cmp	r3, r2
     d0a:	d902      	bls.n	d12 <vTaskIncrementTick+0xaa>
     d0c:	4a17      	ldr	r2, [pc, #92]	; (d6c <vTaskIncrementTick+0x104>)
     d0e:	6013      	str	r3, [r2, #0]
     d10:	e021      	b.n	d56 <vTaskIncrementTick+0xee>
     d12:	1d2c      	adds	r4, r5, #4
     d14:	1c20      	adds	r0, r4, #0
     d16:	47b8      	blx	r7
     d18:	6aab      	ldr	r3, [r5, #40]	; 0x28
     d1a:	2b00      	cmp	r3, #0
     d1c:	d003      	beq.n	d26 <vTaskIncrementTick+0xbe>
     d1e:	1c28      	adds	r0, r5, #0
     d20:	3018      	adds	r0, #24
     d22:	4b13      	ldr	r3, [pc, #76]	; (d70 <vTaskIncrementTick+0x108>)
     d24:	4798      	blx	r3
     d26:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
     d28:	6832      	ldr	r2, [r6, #0]
     d2a:	4293      	cmp	r3, r2
     d2c:	d901      	bls.n	d32 <vTaskIncrementTick+0xca>
     d2e:	4a11      	ldr	r2, [pc, #68]	; (d74 <vTaskIncrementTick+0x10c>)
     d30:	6013      	str	r3, [r2, #0]
     d32:	0098      	lsls	r0, r3, #2
     d34:	18c3      	adds	r3, r0, r3
     d36:	009b      	lsls	r3, r3, #2
     d38:	480f      	ldr	r0, [pc, #60]	; (d78 <vTaskIncrementTick+0x110>)
     d3a:	18c0      	adds	r0, r0, r3
     d3c:	1c21      	adds	r1, r4, #0
     d3e:	4b0f      	ldr	r3, [pc, #60]	; (d7c <vTaskIncrementTick+0x114>)
     d40:	4798      	blx	r3
     d42:	4b07      	ldr	r3, [pc, #28]	; (d60 <vTaskIncrementTick+0xf8>)
     d44:	681b      	ldr	r3, [r3, #0]
     d46:	681b      	ldr	r3, [r3, #0]
     d48:	2b00      	cmp	r3, #0
     d4a:	d1d6      	bne.n	cfa <vTaskIncrementTick+0x92>
     d4c:	e7d0      	b.n	cf0 <vTaskIncrementTick+0x88>
	}
	else
	{
		++uxMissedTicks;
     d4e:	4a0c      	ldr	r2, [pc, #48]	; (d80 <vTaskIncrementTick+0x118>)
     d50:	6813      	ldr	r3, [r2, #0]
     d52:	3301      	adds	r3, #1
     d54:	6013      	str	r3, [r2, #0]
		{
			vApplicationTickHook();
		}
	}
	#endif /* configUSE_TICK_HOOK */
}
     d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d58:	20000238 	.word	0x20000238
     d5c:	20000254 	.word	0x20000254
     d60:	200001a0 	.word	0x200001a0
     d64:	20000258 	.word	0x20000258
     d68:	200001a8 	.word	0x200001a8
     d6c:	200000b4 	.word	0x200000b4
     d70:	00000969 	.word	0x00000969
     d74:	2000025c 	.word	0x2000025c
     d78:	200001c0 	.word	0x200001c0
     d7c:	00000915 	.word	0x00000915
     d80:	2000019c 	.word	0x2000019c

00000d84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
     d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
     d86:	4b2f      	ldr	r3, [pc, #188]	; (e44 <xTaskResumeAll+0xc0>)
     d88:	681b      	ldr	r3, [r3, #0]
     d8a:	2b00      	cmp	r3, #0
     d8c:	d101      	bne.n	d92 <xTaskResumeAll+0xe>
     d8e:	b672      	cpsid	i
     d90:	e7fe      	b.n	d90 <xTaskResumeAll+0xc>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
     d92:	4b2d      	ldr	r3, [pc, #180]	; (e48 <xTaskResumeAll+0xc4>)
     d94:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
     d96:	4b2b      	ldr	r3, [pc, #172]	; (e44 <xTaskResumeAll+0xc0>)
     d98:	681a      	ldr	r2, [r3, #0]
     d9a:	3a01      	subs	r2, #1
     d9c:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
     d9e:	681b      	ldr	r3, [r3, #0]
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
     da0:	2400      	movs	r4, #0
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
     da2:	2b00      	cmp	r3, #0
     da4:	d149      	bne.n	e3a <xTaskResumeAll+0xb6>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
     da6:	4b29      	ldr	r3, [pc, #164]	; (e4c <xTaskResumeAll+0xc8>)
     da8:	681b      	ldr	r3, [r3, #0]
     daa:	2b00      	cmp	r3, #0
     dac:	d122      	bne.n	df4 <xTaskResumeAll+0x70>
     dae:	e044      	b.n	e3a <xTaskResumeAll+0xb6>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
     db0:	4b27      	ldr	r3, [pc, #156]	; (e50 <xTaskResumeAll+0xcc>)
     db2:	68db      	ldr	r3, [r3, #12]
     db4:	68df      	ldr	r7, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
     db6:	1c38      	adds	r0, r7, #0
     db8:	3018      	adds	r0, #24
     dba:	4b26      	ldr	r3, [pc, #152]	; (e54 <xTaskResumeAll+0xd0>)
     dbc:	4798      	blx	r3
					uxListRemove( &( pxTCB->xGenericListItem ) );
     dbe:	1d3d      	adds	r5, r7, #4
     dc0:	1c28      	adds	r0, r5, #0
     dc2:	4b24      	ldr	r3, [pc, #144]	; (e54 <xTaskResumeAll+0xd0>)
     dc4:	4798      	blx	r3
					prvAddTaskToReadyQueue( pxTCB );
     dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     dc8:	4a23      	ldr	r2, [pc, #140]	; (e58 <xTaskResumeAll+0xd4>)
     dca:	6812      	ldr	r2, [r2, #0]
     dcc:	4293      	cmp	r3, r2
     dce:	d901      	bls.n	dd4 <xTaskResumeAll+0x50>
     dd0:	4a21      	ldr	r2, [pc, #132]	; (e58 <xTaskResumeAll+0xd4>)
     dd2:	6013      	str	r3, [r2, #0]
     dd4:	0098      	lsls	r0, r3, #2
     dd6:	18c3      	adds	r3, r0, r3
     dd8:	009b      	lsls	r3, r3, #2
     dda:	4820      	ldr	r0, [pc, #128]	; (e5c <xTaskResumeAll+0xd8>)
     ddc:	18c0      	adds	r0, r0, r3
     dde:	1c29      	adds	r1, r5, #0
     de0:	4b1f      	ldr	r3, [pc, #124]	; (e60 <xTaskResumeAll+0xdc>)
     de2:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
     de4:	4b1f      	ldr	r3, [pc, #124]	; (e64 <xTaskResumeAll+0xe0>)
     de6:	681b      	ldr	r3, [r3, #0]
     de8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     dec:	429a      	cmp	r2, r3
     dee:	d302      	bcc.n	df6 <xTaskResumeAll+0x72>
					{
						xYieldRequired = pdTRUE;
     df0:	2401      	movs	r4, #1
     df2:	e000      	b.n	df6 <xTaskResumeAll+0x72>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
     df4:	4e16      	ldr	r6, [pc, #88]	; (e50 <xTaskResumeAll+0xcc>)
     df6:	6833      	ldr	r3, [r6, #0]
     df8:	2b00      	cmp	r3, #0
     dfa:	d1d9      	bne.n	db0 <xTaskResumeAll+0x2c>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
     dfc:	4b1a      	ldr	r3, [pc, #104]	; (e68 <xTaskResumeAll+0xe4>)
     dfe:	681b      	ldr	r3, [r3, #0]
     e00:	2b00      	cmp	r3, #0
     e02:	d00d      	beq.n	e20 <xTaskResumeAll+0x9c>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
     e04:	4b18      	ldr	r3, [pc, #96]	; (e68 <xTaskResumeAll+0xe4>)
     e06:	681b      	ldr	r3, [r3, #0]
     e08:	2b00      	cmp	r3, #0
     e0a:	d010      	beq.n	e2e <xTaskResumeAll+0xaa>
					{
						vTaskIncrementTick();
     e0c:	4d17      	ldr	r5, [pc, #92]	; (e6c <xTaskResumeAll+0xe8>)
						--uxMissedTicks;
     e0e:	4c16      	ldr	r4, [pc, #88]	; (e68 <xTaskResumeAll+0xe4>)
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
     e10:	47a8      	blx	r5
						--uxMissedTicks;
     e12:	6823      	ldr	r3, [r4, #0]
     e14:	3b01      	subs	r3, #1
     e16:	6023      	str	r3, [r4, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
     e18:	6823      	ldr	r3, [r4, #0]
     e1a:	2b00      	cmp	r3, #0
     e1c:	d1f8      	bne.n	e10 <xTaskResumeAll+0x8c>
     e1e:	e006      	b.n	e2e <xTaskResumeAll+0xaa>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
     e20:	2c01      	cmp	r4, #1
     e22:	d004      	beq.n	e2e <xTaskResumeAll+0xaa>
     e24:	4b12      	ldr	r3, [pc, #72]	; (e70 <xTaskResumeAll+0xec>)
     e26:	681b      	ldr	r3, [r3, #0]
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
     e28:	2400      	movs	r4, #0
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
     e2a:	2b01      	cmp	r3, #1
     e2c:	d105      	bne.n	e3a <xTaskResumeAll+0xb6>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
     e2e:	2200      	movs	r2, #0
     e30:	4b0f      	ldr	r3, [pc, #60]	; (e70 <xTaskResumeAll+0xec>)
     e32:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
     e34:	4b0f      	ldr	r3, [pc, #60]	; (e74 <xTaskResumeAll+0xf0>)
     e36:	4798      	blx	r3
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
     e38:	2401      	movs	r4, #1
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
     e3a:	4b0f      	ldr	r3, [pc, #60]	; (e78 <xTaskResumeAll+0xf4>)
     e3c:	4798      	blx	r3

	return xAlreadyYielded;
}
     e3e:	1c20      	adds	r0, r4, #0
     e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     e42:	46c0      	nop			; (mov r8, r8)
     e44:	20000238 	.word	0x20000238
     e48:	00001219 	.word	0x00001219
     e4c:	2000027c 	.word	0x2000027c
     e50:	20000240 	.word	0x20000240
     e54:	00000969 	.word	0x00000969
     e58:	2000025c 	.word	0x2000025c
     e5c:	200001c0 	.word	0x200001c0
     e60:	00000915 	.word	0x00000915
     e64:	2000023c 	.word	0x2000023c
     e68:	2000019c 	.word	0x2000019c
     e6c:	00000c69 	.word	0x00000c69
     e70:	20000278 	.word	0x20000278
     e74:	00001201 	.word	0x00001201
     e78:	00001231 	.word	0x00001231

00000e7c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
     e7c:	b510      	push	{r4, lr}
     e7e:	1e04      	subs	r4, r0, #0
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
     e80:	d010      	beq.n	ea4 <vTaskDelay+0x28>
		{
			vTaskSuspendAll();
     e82:	4b0a      	ldr	r3, [pc, #40]	; (eac <vTaskDelay+0x30>)
     e84:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
     e86:	4b0a      	ldr	r3, [pc, #40]	; (eb0 <vTaskDelay+0x34>)
     e88:	681b      	ldr	r3, [r3, #0]
     e8a:	18e4      	adds	r4, r4, r3

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
     e8c:	4b09      	ldr	r3, [pc, #36]	; (eb4 <vTaskDelay+0x38>)
     e8e:	6818      	ldr	r0, [r3, #0]
     e90:	3004      	adds	r0, #4
     e92:	4b09      	ldr	r3, [pc, #36]	; (eb8 <vTaskDelay+0x3c>)
     e94:	4798      	blx	r3
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
     e96:	1c20      	adds	r0, r4, #0
     e98:	4b08      	ldr	r3, [pc, #32]	; (ebc <vTaskDelay+0x40>)
     e9a:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
     e9c:	4b08      	ldr	r3, [pc, #32]	; (ec0 <vTaskDelay+0x44>)
     e9e:	4798      	blx	r3
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
     ea0:	2800      	cmp	r0, #0
     ea2:	d101      	bne.n	ea8 <vTaskDelay+0x2c>
		{
			portYIELD_WITHIN_API();
     ea4:	4b07      	ldr	r3, [pc, #28]	; (ec4 <vTaskDelay+0x48>)
     ea6:	4798      	blx	r3
		}
	}
     ea8:	bd10      	pop	{r4, pc}
     eaa:	46c0      	nop			; (mov r8, r8)
     eac:	00000c39 	.word	0x00000c39
     eb0:	20000254 	.word	0x20000254
     eb4:	2000023c 	.word	0x2000023c
     eb8:	00000969 	.word	0x00000969
     ebc:	00000991 	.word	0x00000991
     ec0:	00000d85 	.word	0x00000d85
     ec4:	00001201 	.word	0x00001201

00000ec8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
     ec8:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
     eca:	4b24      	ldr	r3, [pc, #144]	; (f5c <vTaskSwitchContext+0x94>)
     ecc:	681b      	ldr	r3, [r3, #0]
     ece:	2b00      	cmp	r3, #0
     ed0:	d110      	bne.n	ef4 <vTaskSwitchContext+0x2c>
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
     ed2:	4b23      	ldr	r3, [pc, #140]	; (f60 <vTaskSwitchContext+0x98>)
     ed4:	681b      	ldr	r3, [r3, #0]
     ed6:	009a      	lsls	r2, r3, #2
     ed8:	18d3      	adds	r3, r2, r3
     eda:	009b      	lsls	r3, r3, #2
     edc:	4a21      	ldr	r2, [pc, #132]	; (f64 <vTaskSwitchContext+0x9c>)
     ede:	589b      	ldr	r3, [r3, r2]
     ee0:	2b00      	cmp	r3, #0
     ee2:	d11a      	bne.n	f1a <vTaskSwitchContext+0x52>
     ee4:	4b1e      	ldr	r3, [pc, #120]	; (f60 <vTaskSwitchContext+0x98>)
     ee6:	681b      	ldr	r3, [r3, #0]
     ee8:	2b00      	cmp	r3, #0
     eea:	d00a      	beq.n	f02 <vTaskSwitchContext+0x3a>
     eec:	4a1c      	ldr	r2, [pc, #112]	; (f60 <vTaskSwitchContext+0x98>)
     eee:	4c1d      	ldr	r4, [pc, #116]	; (f64 <vTaskSwitchContext+0x9c>)
     ef0:	1c10      	adds	r0, r2, #0
     ef2:	e008      	b.n	f06 <vTaskSwitchContext+0x3e>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
     ef4:	2201      	movs	r2, #1
     ef6:	4b1c      	ldr	r3, [pc, #112]	; (f68 <vTaskSwitchContext+0xa0>)
     ef8:	601a      	str	r2, [r3, #0]
     efa:	e02d      	b.n	f58 <vTaskSwitchContext+0x90>
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
     efc:	6803      	ldr	r3, [r0, #0]
     efe:	2b00      	cmp	r3, #0
     f00:	d101      	bne.n	f06 <vTaskSwitchContext+0x3e>
     f02:	b672      	cpsid	i
     f04:	e7fe      	b.n	f04 <vTaskSwitchContext+0x3c>
     f06:	6813      	ldr	r3, [r2, #0]
     f08:	3b01      	subs	r3, #1
     f0a:	6013      	str	r3, [r2, #0]
     f0c:	6813      	ldr	r3, [r2, #0]
     f0e:	0099      	lsls	r1, r3, #2
     f10:	18cb      	adds	r3, r1, r3
     f12:	009b      	lsls	r3, r3, #2
     f14:	591b      	ldr	r3, [r3, r4]
     f16:	2b00      	cmp	r3, #0
     f18:	d0f0      	beq.n	efc <vTaskSwitchContext+0x34>
     f1a:	4b11      	ldr	r3, [pc, #68]	; (f60 <vTaskSwitchContext+0x98>)
     f1c:	681b      	ldr	r3, [r3, #0]
     f1e:	4c11      	ldr	r4, [pc, #68]	; (f64 <vTaskSwitchContext+0x9c>)
     f20:	009a      	lsls	r2, r3, #2
     f22:	18d1      	adds	r1, r2, r3
     f24:	0089      	lsls	r1, r1, #2
     f26:	1861      	adds	r1, r4, r1
     f28:	6848      	ldr	r0, [r1, #4]
     f2a:	6840      	ldr	r0, [r0, #4]
     f2c:	6048      	str	r0, [r1, #4]
     f2e:	18d2      	adds	r2, r2, r3
     f30:	0092      	lsls	r2, r2, #2
     f32:	3208      	adds	r2, #8
     f34:	18a2      	adds	r2, r4, r2
     f36:	4290      	cmp	r0, r2
     f38:	d105      	bne.n	f46 <vTaskSwitchContext+0x7e>
     f3a:	6841      	ldr	r1, [r0, #4]
     f3c:	009a      	lsls	r2, r3, #2
     f3e:	18d2      	adds	r2, r2, r3
     f40:	0092      	lsls	r2, r2, #2
     f42:	18a2      	adds	r2, r4, r2
     f44:	6051      	str	r1, [r2, #4]
     f46:	009a      	lsls	r2, r3, #2
     f48:	18d3      	adds	r3, r2, r3
     f4a:	009b      	lsls	r3, r3, #2
     f4c:	4a05      	ldr	r2, [pc, #20]	; (f64 <vTaskSwitchContext+0x9c>)
     f4e:	18d3      	adds	r3, r2, r3
     f50:	685b      	ldr	r3, [r3, #4]
     f52:	68da      	ldr	r2, [r3, #12]
     f54:	4b05      	ldr	r3, [pc, #20]	; (f6c <vTaskSwitchContext+0xa4>)
     f56:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();
	}
}
     f58:	bd10      	pop	{r4, pc}
     f5a:	46c0      	nop			; (mov r8, r8)
     f5c:	20000238 	.word	0x20000238
     f60:	2000025c 	.word	0x2000025c
     f64:	200001c0 	.word	0x200001c0
     f68:	20000278 	.word	0x20000278
     f6c:	2000023c 	.word	0x2000023c

00000f70 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
     f70:	b538      	push	{r3, r4, r5, lr}
portTickType xTimeToWake;

	configASSERT( pxEventList );
     f72:	2800      	cmp	r0, #0
     f74:	d101      	bne.n	f7a <vTaskPlaceOnEventList+0xa>
     f76:	b672      	cpsid	i
     f78:	e7fe      	b.n	f78 <vTaskPlaceOnEventList+0x8>
     f7a:	1c0c      	adds	r4, r1, #0
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
     f7c:	4d07      	ldr	r5, [pc, #28]	; (f9c <vTaskPlaceOnEventList+0x2c>)
     f7e:	6829      	ldr	r1, [r5, #0]
     f80:	3118      	adds	r1, #24
     f82:	4b07      	ldr	r3, [pc, #28]	; (fa0 <vTaskPlaceOnEventList+0x30>)
     f84:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
     f86:	6828      	ldr	r0, [r5, #0]
     f88:	3004      	adds	r0, #4
     f8a:	4b06      	ldr	r3, [pc, #24]	; (fa4 <vTaskPlaceOnEventList+0x34>)
     f8c:	4798      	blx	r3
	}
	#else /* INCLUDE_vTaskSuspend */
	{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
     f8e:	4b06      	ldr	r3, [pc, #24]	; (fa8 <vTaskPlaceOnEventList+0x38>)
     f90:	6818      	ldr	r0, [r3, #0]
     f92:	1820      	adds	r0, r4, r0
			prvAddCurrentTaskToDelayedList( xTimeToWake );
     f94:	4b05      	ldr	r3, [pc, #20]	; (fac <vTaskPlaceOnEventList+0x3c>)
     f96:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */
}
     f98:	bd38      	pop	{r3, r4, r5, pc}
     f9a:	46c0      	nop			; (mov r8, r8)
     f9c:	2000023c 	.word	0x2000023c
     fa0:	00000931 	.word	0x00000931
     fa4:	00000969 	.word	0x00000969
     fa8:	20000254 	.word	0x20000254
     fac:	00000991 	.word	0x00000991

00000fb0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
     fb0:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
     fb2:	68c3      	ldr	r3, [r0, #12]
     fb4:	68dd      	ldr	r5, [r3, #12]
	configASSERT( pxUnblockedTCB );
     fb6:	2d00      	cmp	r5, #0
     fb8:	d101      	bne.n	fbe <xTaskRemoveFromEventList+0xe>
     fba:	b672      	cpsid	i
     fbc:	e7fe      	b.n	fbc <xTaskRemoveFromEventList+0xc>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
     fbe:	1c2c      	adds	r4, r5, #0
     fc0:	3418      	adds	r4, #24
     fc2:	1c20      	adds	r0, r4, #0
     fc4:	4b12      	ldr	r3, [pc, #72]	; (1010 <xTaskRemoveFromEventList+0x60>)
     fc6:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
     fc8:	4b12      	ldr	r3, [pc, #72]	; (1014 <xTaskRemoveFromEventList+0x64>)
     fca:	681b      	ldr	r3, [r3, #0]
     fcc:	2b00      	cmp	r3, #0
     fce:	d113      	bne.n	ff8 <xTaskRemoveFromEventList+0x48>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
     fd0:	1d2c      	adds	r4, r5, #4
     fd2:	1c20      	adds	r0, r4, #0
     fd4:	4b0e      	ldr	r3, [pc, #56]	; (1010 <xTaskRemoveFromEventList+0x60>)
     fd6:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
     fd8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
     fda:	4a0f      	ldr	r2, [pc, #60]	; (1018 <xTaskRemoveFromEventList+0x68>)
     fdc:	6812      	ldr	r2, [r2, #0]
     fde:	4293      	cmp	r3, r2
     fe0:	d901      	bls.n	fe6 <xTaskRemoveFromEventList+0x36>
     fe2:	4a0d      	ldr	r2, [pc, #52]	; (1018 <xTaskRemoveFromEventList+0x68>)
     fe4:	6013      	str	r3, [r2, #0]
     fe6:	0098      	lsls	r0, r3, #2
     fe8:	18c3      	adds	r3, r0, r3
     fea:	009b      	lsls	r3, r3, #2
     fec:	480b      	ldr	r0, [pc, #44]	; (101c <xTaskRemoveFromEventList+0x6c>)
     fee:	18c0      	adds	r0, r0, r3
     ff0:	1c21      	adds	r1, r4, #0
     ff2:	4b0b      	ldr	r3, [pc, #44]	; (1020 <xTaskRemoveFromEventList+0x70>)
     ff4:	4798      	blx	r3
     ff6:	e003      	b.n	1000 <xTaskRemoveFromEventList+0x50>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
     ff8:	480a      	ldr	r0, [pc, #40]	; (1024 <xTaskRemoveFromEventList+0x74>)
     ffa:	1c21      	adds	r1, r4, #0
     ffc:	4b08      	ldr	r3, [pc, #32]	; (1020 <xTaskRemoveFromEventList+0x70>)
     ffe:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1000:	4b09      	ldr	r3, [pc, #36]	; (1028 <xTaskRemoveFromEventList+0x78>)
    1002:	681b      	ldr	r3, [r3, #0]
    1004:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    1006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1008:	2000      	movs	r0, #0
    100a:	429a      	cmp	r2, r3
    100c:	4140      	adcs	r0, r0
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
    100e:	bd38      	pop	{r3, r4, r5, pc}
    1010:	00000969 	.word	0x00000969
    1014:	20000238 	.word	0x20000238
    1018:	2000025c 	.word	0x2000025c
    101c:	200001c0 	.word	0x200001c0
    1020:	00000915 	.word	0x00000915
    1024:	20000240 	.word	0x20000240
    1028:	2000023c 	.word	0x2000023c

0000102c <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
	configASSERT( pxTimeOut );
    102c:	2800      	cmp	r0, #0
    102e:	d101      	bne.n	1034 <vTaskSetTimeOutState+0x8>
    1030:	b672      	cpsid	i
    1032:	e7fe      	b.n	1032 <vTaskSetTimeOutState+0x6>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    1034:	4b03      	ldr	r3, [pc, #12]	; (1044 <vTaskSetTimeOutState+0x18>)
    1036:	681b      	ldr	r3, [r3, #0]
    1038:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    103a:	4b03      	ldr	r3, [pc, #12]	; (1048 <vTaskSetTimeOutState+0x1c>)
    103c:	681b      	ldr	r3, [r3, #0]
    103e:	6043      	str	r3, [r0, #4]
}
    1040:	4770      	bx	lr
    1042:	46c0      	nop			; (mov r8, r8)
    1044:	200001a8 	.word	0x200001a8
    1048:	20000254 	.word	0x20000254

0000104c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    104c:	b570      	push	{r4, r5, r6, lr}
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
    104e:	2800      	cmp	r0, #0
    1050:	d101      	bne.n	1056 <xTaskCheckForTimeOut+0xa>
    1052:	b672      	cpsid	i
    1054:	e7fe      	b.n	1054 <xTaskCheckForTimeOut+0x8>
	configASSERT( pxTicksToWait );
    1056:	2900      	cmp	r1, #0
    1058:	d101      	bne.n	105e <xTaskCheckForTimeOut+0x12>
    105a:	b672      	cpsid	i
    105c:	e7fe      	b.n	105c <xTaskCheckForTimeOut+0x10>
    105e:	1c0d      	adds	r5, r1, #0
    1060:	1c04      	adds	r4, r0, #0

	taskENTER_CRITICAL();
    1062:	4b11      	ldr	r3, [pc, #68]	; (10a8 <xTaskCheckForTimeOut+0x5c>)
    1064:	4798      	blx	r3
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    1066:	4b11      	ldr	r3, [pc, #68]	; (10ac <xTaskCheckForTimeOut+0x60>)
    1068:	681b      	ldr	r3, [r3, #0]
    106a:	6822      	ldr	r2, [r4, #0]
    106c:	429a      	cmp	r2, r3
    106e:	d005      	beq.n	107c <xTaskCheckForTimeOut+0x30>
    1070:	4b0f      	ldr	r3, [pc, #60]	; (10b0 <xTaskCheckForTimeOut+0x64>)
    1072:	681b      	ldr	r3, [r3, #0]
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    1074:	2601      	movs	r6, #1
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    1076:	6862      	ldr	r2, [r4, #4]
    1078:	429a      	cmp	r2, r3
    107a:	d910      	bls.n	109e <xTaskCheckForTimeOut+0x52>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    107c:	4b0c      	ldr	r3, [pc, #48]	; (10b0 <xTaskCheckForTimeOut+0x64>)
    107e:	6819      	ldr	r1, [r3, #0]
    1080:	6860      	ldr	r0, [r4, #4]
    1082:	682b      	ldr	r3, [r5, #0]
    1084:	1a09      	subs	r1, r1, r0
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
    1086:	2601      	movs	r6, #1
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    1088:	4299      	cmp	r1, r3
    108a:	d208      	bcs.n	109e <xTaskCheckForTimeOut+0x52>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    108c:	4a08      	ldr	r2, [pc, #32]	; (10b0 <xTaskCheckForTimeOut+0x64>)
    108e:	6812      	ldr	r2, [r2, #0]
    1090:	1a12      	subs	r2, r2, r0
    1092:	1a9b      	subs	r3, r3, r2
    1094:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
    1096:	1c20      	adds	r0, r4, #0
    1098:	4b06      	ldr	r3, [pc, #24]	; (10b4 <xTaskCheckForTimeOut+0x68>)
    109a:	4798      	blx	r3
			xReturn = pdFALSE;
    109c:	2600      	movs	r6, #0
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
    109e:	4b06      	ldr	r3, [pc, #24]	; (10b8 <xTaskCheckForTimeOut+0x6c>)
    10a0:	4798      	blx	r3

	return xReturn;
}
    10a2:	1c30      	adds	r0, r6, #0
    10a4:	bd70      	pop	{r4, r5, r6, pc}
    10a6:	46c0      	nop			; (mov r8, r8)
    10a8:	00001219 	.word	0x00001219
    10ac:	200001a8 	.word	0x200001a8
    10b0:	20000254 	.word	0x20000254
    10b4:	0000102d 	.word	0x0000102d
    10b8:	00001231 	.word	0x00001231

000010bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
    10bc:	2201      	movs	r2, #1
    10be:	4b01      	ldr	r3, [pc, #4]	; (10c4 <vTaskMissedYield+0x8>)
    10c0:	601a      	str	r2, [r3, #0]
}
    10c2:	4770      	bx	lr
    10c4:	20000278 	.word	0x20000278

000010c8 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    10c8:	4b01      	ldr	r3, [pc, #4]	; (10d0 <xTaskGetCurrentTaskHandle+0x8>)
    10ca:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
    10cc:	4770      	bx	lr
    10ce:	46c0      	nop			; (mov r8, r8)
    10d0:	2000023c 	.word	0x2000023c

000010d4 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    10d4:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
    10d6:	2800      	cmp	r0, #0
    10d8:	d02f      	beq.n	113a <vTaskPriorityInherit+0x66>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    10da:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    10dc:	4a17      	ldr	r2, [pc, #92]	; (113c <vTaskPriorityInherit+0x68>)
    10de:	6812      	ldr	r2, [r2, #0]
    10e0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    10e2:	4293      	cmp	r3, r2
    10e4:	d229      	bcs.n	113a <vTaskPriorityInherit+0x66>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    10e6:	4a15      	ldr	r2, [pc, #84]	; (113c <vTaskPriorityInherit+0x68>)
    10e8:	6812      	ldr	r2, [r2, #0]
    10ea:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    10ec:	2206      	movs	r2, #6
    10ee:	1a52      	subs	r2, r2, r1
    10f0:	6182      	str	r2, [r0, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    10f2:	009a      	lsls	r2, r3, #2
    10f4:	18d3      	adds	r3, r2, r3
    10f6:	009b      	lsls	r3, r3, #2
    10f8:	4a11      	ldr	r2, [pc, #68]	; (1140 <vTaskPriorityInherit+0x6c>)
    10fa:	18d3      	adds	r3, r2, r3
    10fc:	6942      	ldr	r2, [r0, #20]
    10fe:	429a      	cmp	r2, r3
    1100:	d117      	bne.n	1132 <vTaskPriorityInherit+0x5e>
    1102:	1c05      	adds	r5, r0, #0
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
    1104:	1d04      	adds	r4, r0, #4
    1106:	1c20      	adds	r0, r4, #0
    1108:	4b0e      	ldr	r3, [pc, #56]	; (1144 <vTaskPriorityInherit+0x70>)
    110a:	4798      	blx	r3
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    110c:	4b0b      	ldr	r3, [pc, #44]	; (113c <vTaskPriorityInherit+0x68>)
    110e:	681b      	ldr	r3, [r3, #0]
    1110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1112:	62eb      	str	r3, [r5, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
    1114:	4a0c      	ldr	r2, [pc, #48]	; (1148 <vTaskPriorityInherit+0x74>)
    1116:	6812      	ldr	r2, [r2, #0]
    1118:	4293      	cmp	r3, r2
    111a:	d901      	bls.n	1120 <vTaskPriorityInherit+0x4c>
    111c:	4a0a      	ldr	r2, [pc, #40]	; (1148 <vTaskPriorityInherit+0x74>)
    111e:	6013      	str	r3, [r2, #0]
    1120:	0098      	lsls	r0, r3, #2
    1122:	18c0      	adds	r0, r0, r3
    1124:	0083      	lsls	r3, r0, #2
    1126:	4806      	ldr	r0, [pc, #24]	; (1140 <vTaskPriorityInherit+0x6c>)
    1128:	18c0      	adds	r0, r0, r3
    112a:	1c21      	adds	r1, r4, #0
    112c:	4b07      	ldr	r3, [pc, #28]	; (114c <vTaskPriorityInherit+0x78>)
    112e:	4798      	blx	r3
    1130:	e003      	b.n	113a <vTaskPriorityInherit+0x66>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    1132:	4b02      	ldr	r3, [pc, #8]	; (113c <vTaskPriorityInherit+0x68>)
    1134:	681b      	ldr	r3, [r3, #0]
    1136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1138:	62c3      	str	r3, [r0, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
			}
		}
	}
    113a:	bd38      	pop	{r3, r4, r5, pc}
    113c:	2000023c 	.word	0x2000023c
    1140:	200001c0 	.word	0x200001c0
    1144:	00000969 	.word	0x00000969
    1148:	2000025c 	.word	0x2000025c
    114c:	00000915 	.word	0x00000915

00001150 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    1150:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
    1152:	2800      	cmp	r0, #0
    1154:	d01b      	beq.n	118e <vTaskPriorityDisinherit+0x3e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    1156:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    1158:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    115a:	4293      	cmp	r3, r2
    115c:	d017      	beq.n	118e <vTaskPriorityDisinherit+0x3e>
    115e:	1c04      	adds	r4, r0, #0
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
    1160:	1d05      	adds	r5, r0, #4
    1162:	1c28      	adds	r0, r5, #0
    1164:	4b0a      	ldr	r3, [pc, #40]	; (1190 <vTaskPriorityDisinherit+0x40>)
    1166:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    1168:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    116a:	62e3      	str	r3, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    116c:	2206      	movs	r2, #6
    116e:	1ad2      	subs	r2, r2, r3
    1170:	61a2      	str	r2, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
    1172:	4a08      	ldr	r2, [pc, #32]	; (1194 <vTaskPriorityDisinherit+0x44>)
    1174:	6812      	ldr	r2, [r2, #0]
    1176:	4293      	cmp	r3, r2
    1178:	d901      	bls.n	117e <vTaskPriorityDisinherit+0x2e>
    117a:	4a06      	ldr	r2, [pc, #24]	; (1194 <vTaskPriorityDisinherit+0x44>)
    117c:	6013      	str	r3, [r2, #0]
    117e:	0098      	lsls	r0, r3, #2
    1180:	18c0      	adds	r0, r0, r3
    1182:	0083      	lsls	r3, r0, #2
    1184:	4804      	ldr	r0, [pc, #16]	; (1198 <vTaskPriorityDisinherit+0x48>)
    1186:	18c0      	adds	r0, r0, r3
    1188:	1c29      	adds	r1, r5, #0
    118a:	4b04      	ldr	r3, [pc, #16]	; (119c <vTaskPriorityDisinherit+0x4c>)
    118c:	4798      	blx	r3
			}
		}
	}
    118e:	bd38      	pop	{r3, r4, r5, pc}
    1190:	00000969 	.word	0x00000969
    1194:	2000025c 	.word	0x2000025c
    1198:	200001c0 	.word	0x200001c0
    119c:	00000915 	.word	0x00000915

000011a0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
    11a0:	4a06      	ldr	r2, [pc, #24]	; (11bc <pxCurrentTCBConst3>)
    11a2:	6813      	ldr	r3, [r2, #0]
    11a4:	6818      	ldr	r0, [r3, #0]
    11a6:	3020      	adds	r0, #32
    11a8:	f380 8809 	msr	PSP, r0
    11ac:	2002      	movs	r0, #2
    11ae:	f380 8814 	msr	CONTROL, r0
    11b2:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    11b4:	46ae      	mov	lr, r5
    11b6:	b662      	cpsie	i
    11b8:	bd00      	pop	{pc}
    11ba:	46c0      	nop			; (mov r8, r8)

000011bc <pxCurrentTCBConst3>:
    11bc:	2000023c 	.word	0x2000023c

000011c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    11c0:	b510      	push	{r4, lr}
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    11c2:	1f03      	subs	r3, r0, #4
    11c4:	2480      	movs	r4, #128	; 0x80
    11c6:	0464      	lsls	r4, r4, #17
    11c8:	601c      	str	r4, [r3, #0]
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
    11ca:	3b04      	subs	r3, #4
    11cc:	6019      	str	r1, [r3, #0]
	pxTopOfStack -= 6;	/* LR, R12, R3..R1 */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
    11ce:	3b18      	subs	r3, #24
    11d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
    11d2:	3840      	subs	r0, #64	; 0x40

	return pxTopOfStack;
}
    11d4:	bd10      	pop	{r4, pc}
    11d6:	46c0      	nop			; (mov r8, r8)

000011d8 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    11d8:	4b08      	ldr	r3, [pc, #32]	; (11fc <pxCurrentTCBConst2>)
    11da:	6819      	ldr	r1, [r3, #0]
    11dc:	6808      	ldr	r0, [r1, #0]
    11de:	3010      	adds	r0, #16
    11e0:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    11e2:	46a0      	mov	r8, r4
    11e4:	46a9      	mov	r9, r5
    11e6:	46b2      	mov	sl, r6
    11e8:	46bb      	mov	fp, r7
    11ea:	f380 8809 	msr	PSP, r0
    11ee:	3820      	subs	r0, #32
    11f0:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    11f2:	4671      	mov	r1, lr
    11f4:	200d      	movs	r0, #13
    11f6:	4301      	orrs	r1, r0
    11f8:	4708      	bx	r1
    11fa:	46c0      	nop			; (mov r8, r8)

000011fc <pxCurrentTCBConst2>:
    11fc:	2000023c 	.word	0x2000023c

00001200 <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void )
{
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
    1200:	2280      	movs	r2, #128	; 0x80
    1202:	0552      	lsls	r2, r2, #21
    1204:	4b03      	ldr	r3, [pc, #12]	; (1214 <vPortYield+0x14>)
    1206:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
    1208:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    120c:	f3bf 8f6f 	isb	sy
}
    1210:	4770      	bx	lr
    1212:	46c0      	nop			; (mov r8, r8)
    1214:	e000ed04 	.word	0xe000ed04

00001218 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    portDISABLE_INTERRUPTS();
    1218:	b672      	cpsid	i
    uxCriticalNesting++;
    121a:	4a04      	ldr	r2, [pc, #16]	; (122c <vPortEnterCritical+0x14>)
    121c:	6813      	ldr	r3, [r2, #0]
    121e:	3301      	adds	r3, #1
    1220:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
    1222:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    1226:	f3bf 8f6f 	isb	sy
}
    122a:	4770      	bx	lr
    122c:	200000b8 	.word	0x200000b8

00001230 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    uxCriticalNesting--;
    1230:	4a03      	ldr	r2, [pc, #12]	; (1240 <vPortExitCritical+0x10>)
    1232:	6813      	ldr	r3, [r2, #0]
    1234:	3b01      	subs	r3, #1
    1236:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
    1238:	2b00      	cmp	r3, #0
    123a:	d100      	bne.n	123e <vPortExitCritical+0xe>
    {
        portENABLE_INTERRUPTS();
    123c:	b662      	cpsie	i
    }
}
    123e:	4770      	bx	lr
    1240:	200000b8 	.word	0x200000b8

00001244 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    1244:	f3ef 8009 	mrs	r0, PSP
    1248:	4b0e      	ldr	r3, [pc, #56]	; (1284 <pxCurrentTCBConst>)
    124a:	681a      	ldr	r2, [r3, #0]
    124c:	3820      	subs	r0, #32
    124e:	6010      	str	r0, [r2, #0]
    1250:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    1252:	4644      	mov	r4, r8
    1254:	464d      	mov	r5, r9
    1256:	4656      	mov	r6, sl
    1258:	465f      	mov	r7, fp
    125a:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    125c:	b508      	push	{r3, lr}
    125e:	b672      	cpsid	i
    1260:	f7ff fe32 	bl	ec8 <vTaskSwitchContext>
    1264:	b662      	cpsie	i
    1266:	bc0c      	pop	{r2, r3}
    1268:	6811      	ldr	r1, [r2, #0]
    126a:	6808      	ldr	r0, [r1, #0]
    126c:	3010      	adds	r0, #16
    126e:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    1270:	46a0      	mov	r8, r4
    1272:	46a9      	mov	r9, r5
    1274:	46b2      	mov	sl, r6
    1276:	46bb      	mov	fp, r7
    1278:	f380 8809 	msr	PSP, r0
    127c:	3820      	subs	r0, #32
    127e:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    1280:	4718      	bx	r3
    1282:	46c0      	nop			; (mov r8, r8)

00001284 <pxCurrentTCBConst>:
    1284:	2000023c 	.word	0x2000023c

00001288 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    1288:	b508      	push	{r3, lr}
unsigned long ulDummy;

	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    128a:	2280      	movs	r2, #128	; 0x80
    128c:	0552      	lsls	r2, r2, #21
    128e:	4b03      	ldr	r3, [pc, #12]	; (129c <SysTick_Handler+0x14>)
    1290:	601a      	str	r2, [r3, #0]
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
    1292:	b672      	cpsid	i
	{
		vTaskIncrementTick();
    1294:	4b02      	ldr	r3, [pc, #8]	; (12a0 <SysTick_Handler+0x18>)
    1296:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
    1298:	b662      	cpsie	i
}
    129a:	bd08      	pop	{r3, pc}
    129c:	e000ed04 	.word	0xe000ed04
    12a0:	00000c69 	.word	0x00000c69

000012a4 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
    12a4:	b508      	push	{r3, lr}
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_VAL)  = 0; /* Load the SysTick Counter Value */
    12a6:	2200      	movs	r2, #0
    12a8:	4b07      	ldr	r3, [pc, #28]	; (12c8 <vPortSetupTimerInterrupt+0x24>)
    12aa:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    12ac:	2000      	movs	r0, #0
    12ae:	4b07      	ldr	r3, [pc, #28]	; (12cc <vPortSetupTimerInterrupt+0x28>)
    12b0:	4798      	blx	r3
    12b2:	21fa      	movs	r1, #250	; 0xfa
    12b4:	0089      	lsls	r1, r1, #2
    12b6:	4b06      	ldr	r3, [pc, #24]	; (12d0 <vPortSetupTimerInterrupt+0x2c>)
    12b8:	4798      	blx	r3
    12ba:	3801      	subs	r0, #1
    12bc:	4b05      	ldr	r3, [pc, #20]	; (12d4 <vPortSetupTimerInterrupt+0x30>)
    12be:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    12c0:	2207      	movs	r2, #7
    12c2:	4b05      	ldr	r3, [pc, #20]	; (12d8 <vPortSetupTimerInterrupt+0x34>)
    12c4:	601a      	str	r2, [r3, #0]
}
    12c6:	bd08      	pop	{r3, pc}
    12c8:	e000e018 	.word	0xe000e018
    12cc:	000043b5 	.word	0x000043b5
    12d0:	00006685 	.word	0x00006685
    12d4:	e000e014 	.word	0xe000e014
    12d8:	e000e010 	.word	0xe000e010

000012dc <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
    12dc:	b508      	push	{r3, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    12de:	4b0a      	ldr	r3, [pc, #40]	; (1308 <xPortStartScheduler+0x2c>)
    12e0:	681a      	ldr	r2, [r3, #0]
    12e2:	21ff      	movs	r1, #255	; 0xff
    12e4:	0409      	lsls	r1, r1, #16
    12e6:	430a      	orrs	r2, r1
    12e8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    12ea:	681a      	ldr	r2, [r3, #0]
    12ec:	21ff      	movs	r1, #255	; 0xff
    12ee:	0609      	lsls	r1, r1, #24
    12f0:	430a      	orrs	r2, r1
    12f2:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
    12f4:	4b05      	ldr	r3, [pc, #20]	; (130c <xPortStartScheduler+0x30>)
    12f6:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    12f8:	2200      	movs	r2, #0
    12fa:	4b05      	ldr	r3, [pc, #20]	; (1310 <xPortStartScheduler+0x34>)
    12fc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
    12fe:	4b05      	ldr	r3, [pc, #20]	; (1314 <xPortStartScheduler+0x38>)
    1300:	4798      	blx	r3

	/* Should not get here! */
	return 0;
}
    1302:	2000      	movs	r0, #0
    1304:	bd08      	pop	{r3, pc}
    1306:	46c0      	nop			; (mov r8, r8)
    1308:	e000ed20 	.word	0xe000ed20
    130c:	000012a5 	.word	0x000012a5
    1310:	200000b8 	.word	0x200000b8
    1314:	000011a1 	.word	0x000011a1

00001318 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    1318:	b538      	push	{r3, r4, r5, lr}
    131a:	1c04      	adds	r4, r0, #0
void *pvReturn = NULL;
static unsigned char *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    131c:	0743      	lsls	r3, r0, #29
    131e:	d002      	beq.n	1326 <pvPortMalloc+0xe>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    1320:	2307      	movs	r3, #7
    1322:	439c      	bics	r4, r3
    1324:	3408      	adds	r4, #8
		}
	#endif

	vTaskSuspendAll();
    1326:	4b10      	ldr	r3, [pc, #64]	; (1368 <pvPortMalloc+0x50>)
    1328:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
    132a:	4b10      	ldr	r3, [pc, #64]	; (136c <pvPortMalloc+0x54>)
    132c:	681b      	ldr	r3, [r3, #0]
    132e:	2b00      	cmp	r3, #0
    1330:	d105      	bne.n	133e <pvPortMalloc+0x26>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( unsigned char * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
    1332:	2207      	movs	r2, #7
    1334:	4b0e      	ldr	r3, [pc, #56]	; (1370 <pvPortMalloc+0x58>)
    1336:	3308      	adds	r3, #8
    1338:	4393      	bics	r3, r2
    133a:	4a0c      	ldr	r2, [pc, #48]	; (136c <pvPortMalloc+0x54>)
    133c:	6013      	str	r3, [r2, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    133e:	4b0d      	ldr	r3, [pc, #52]	; (1374 <pvPortMalloc+0x5c>)
    1340:	681b      	ldr	r3, [r3, #0]
    1342:	18e4      	adds	r4, r4, r3
    1344:	4a0c      	ldr	r2, [pc, #48]	; (1378 <pvPortMalloc+0x60>)
    1346:	4294      	cmp	r4, r2
    1348:	d807      	bhi.n	135a <pvPortMalloc+0x42>
    134a:	42a3      	cmp	r3, r4
    134c:	d207      	bcs.n	135e <pvPortMalloc+0x46>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    134e:	4a07      	ldr	r2, [pc, #28]	; (136c <pvPortMalloc+0x54>)
    1350:	6815      	ldr	r5, [r2, #0]
    1352:	18ed      	adds	r5, r5, r3
			xNextFreeByte += xWantedSize;
    1354:	4b07      	ldr	r3, [pc, #28]	; (1374 <pvPortMalloc+0x5c>)
    1356:	601c      	str	r4, [r3, #0]
    1358:	e002      	b.n	1360 <pvPortMalloc+0x48>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
    135a:	2500      	movs	r5, #0
    135c:	e000      	b.n	1360 <pvPortMalloc+0x48>
    135e:	2500      	movs	r5, #0
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
			xNextFreeByte += xWantedSize;
		}
	}
	xTaskResumeAll();
    1360:	4b06      	ldr	r3, [pc, #24]	; (137c <pvPortMalloc+0x64>)
    1362:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
    1364:	1c28      	adds	r0, r5, #0
    1366:	bd38      	pop	{r3, r4, r5, pc}
    1368:	00000c39 	.word	0x00000c39
    136c:	20003d20 	.word	0x20003d20
    1370:	20000288 	.word	0x20000288
    1374:	20000284 	.word	0x20000284
    1378:	00003a8f 	.word	0x00003a8f
    137c:	00000d85 	.word	0x00000d85

00001380 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
    1380:	2800      	cmp	r0, #0
    1382:	d001      	beq.n	1388 <vPortFree+0x8>
    1384:	b672      	cpsid	i
    1386:	e7fe      	b.n	1386 <vPortFree+0x6>
}
    1388:	4770      	bx	lr
    138a:	46c0      	nop			; (mov r8, r8)

0000138c <_Z3sup11structClockS_>:



Clock timeManage={0,0,true};

bool sup(Clock clock1,Clock clock2){
    138c:	b082      	sub	sp, #8
    138e:	b084      	sub	sp, #16
    1390:	9001      	str	r0, [sp, #4]
    1392:	9102      	str	r1, [sp, #8]
    1394:	9203      	str	r2, [sp, #12]
    1396:	9305      	str	r3, [sp, #20]
		if(clock1.second>clock2.second){//clock1>clock2
    1398:	9a01      	ldr	r2, [sp, #4]
    139a:	9b05      	ldr	r3, [sp, #20]
			return true;
    139c:	2001      	movs	r0, #1


Clock timeManage={0,0,true};

bool sup(Clock clock1,Clock clock2){
		if(clock1.second>clock2.second){//clock1>clock2
    139e:	429a      	cmp	r2, r3
    13a0:	d809      	bhi.n	13b6 <_Z3sup11structClockS_+0x2a>
			return true;
		}
		else{
			if(clock1.second<clock2.second){
    13a2:	9a01      	ldr	r2, [sp, #4]
    13a4:	9b05      	ldr	r3, [sp, #20]
				return false;
    13a6:	2000      	movs	r0, #0
bool sup(Clock clock1,Clock clock2){
		if(clock1.second>clock2.second){//clock1>clock2
			return true;
		}
		else{
			if(clock1.second<clock2.second){
    13a8:	429a      	cmp	r2, r3
    13aa:	d304      	bcc.n	13b6 <_Z3sup11structClockS_+0x2a>
				return false;
			}
			else{//egual
				if(clock1.halfmillis>clock2.halfmillis){
    13ac:	9802      	ldr	r0, [sp, #8]
    13ae:	9b06      	ldr	r3, [sp, #24]
    13b0:	4283      	cmp	r3, r0
    13b2:	4180      	sbcs	r0, r0
    13b4:	4240      	negs	r0, r0
					return false;
				}
			}
		}

}
    13b6:	b004      	add	sp, #16
    13b8:	b002      	add	sp, #8
    13ba:	4770      	bx	lr

000013bc <_Z11subClockPos11structClockS_>:
	}

	
	return ret;
}
Clock subClockPos(Clock clock1,Clock clock2 ){
    13bc:	b084      	sub	sp, #16
    13be:	9101      	str	r1, [sp, #4]
    13c0:	9202      	str	r2, [sp, #8]
    13c2:	9303      	str	r3, [sp, #12]
	Clock ret={0,0,true};
    13c4:	2300      	movs	r3, #0
    13c6:	6003      	str	r3, [r0, #0]
    13c8:	6043      	str	r3, [r0, #4]
    13ca:	3301      	adds	r3, #1
    13cc:	7203      	strb	r3, [r0, #8]
	//clock1.second+=clock1.halfmillis/RTC_FREQ;
	//clock1.halfmillis=clock1.halfmillis%RTC_FREQ;	
		
	//clock2.second+=clock2.halfmillis/RTC_FREQ;
	//clock2.halfmillis=clock2.halfmillis%RTC_FREQ;
	long int halfmillis=clock2.halfmillis;
    13ce:	9905      	ldr	r1, [sp, #20]
	ret.second=clock1.second-clock2.second;
    13d0:	9a01      	ldr	r2, [sp, #4]
    13d2:	9b04      	ldr	r3, [sp, #16]
    13d4:	1ad2      	subs	r2, r2, r3
    13d6:	6002      	str	r2, [r0, #0]
	halfmillis=(long int)clock1.halfmillis-halfmillis;
    13d8:	9b02      	ldr	r3, [sp, #8]
    13da:	1a5b      	subs	r3, r3, r1
	
	
	
	if(halfmillis<0){
    13dc:	d50b      	bpl.n	13f6 <_Z11subClockPos11structClockS_+0x3a>
		
		if(ret.second!=0){
    13de:	6802      	ldr	r2, [r0, #0]
    13e0:	2a00      	cmp	r2, #0
    13e2:	d009      	beq.n	13f8 <_Z11subClockPos11structClockS_+0x3c>
				pc.printf("c1:%ld,%ld",clock1.second,clock1.halfmillis);
				pc.printf("c2:%ld,%ld",clock2.second,clock2.halfmillis);*/
				//sendHMI("error clock");
			}
			
			ret.second--;
    13e4:	6802      	ldr	r2, [r0, #0]
    13e6:	3a01      	subs	r2, #1
    13e8:	6002      	str	r2, [r0, #0]
			ret.halfmillis=(unsigned int)(halfmillis+RTC_FREQ);
    13ea:	22fa      	movs	r2, #250	; 0xfa
    13ec:	01d2      	lsls	r2, r2, #7
    13ee:	4694      	mov	ip, r2
    13f0:	4463      	add	r3, ip
    13f2:	6043      	str	r3, [r0, #4]
    13f4:	e000      	b.n	13f8 <_Z11subClockPos11structClockS_+0x3c>
		}
	}
	else{
		ret.halfmillis=halfmillis;
    13f6:	6043      	str	r3, [r0, #4]
	}
			
	return ret;
    13f8:	b004      	add	sp, #16
    13fa:	4770      	bx	lr

000013fc <_Z8subClock11structClockS_>:
	if(clk.sign==false){
		clk.sign=true;
	}
	return clk;
}
Clock subClock(Clock clock1,Clock clock2 ){
    13fc:	b570      	push	{r4, r5, r6, lr}
    13fe:	b08e      	sub	sp, #56	; 0x38
    1400:	1c04      	adds	r4, r0, #0
    1402:	a805      	add	r0, sp, #20
    1404:	9105      	str	r1, [sp, #20]
    1406:	9206      	str	r2, [sp, #24]
    1408:	9307      	str	r3, [sp, #28]
	Clock ret={0,0,true};
    140a:	2300      	movs	r3, #0
    140c:	6023      	str	r3, [r4, #0]
    140e:	6063      	str	r3, [r4, #4]
    1410:	3301      	adds	r3, #1
    1412:	7223      	strb	r3, [r4, #8]
	if(clock1.sign!=clock2.sign){
    1414:	7a03      	ldrb	r3, [r0, #8]
    1416:	aa12      	add	r2, sp, #72	; 0x48
    1418:	7a12      	ldrb	r2, [r2, #8]
    141a:	b2db      	uxtb	r3, r3
    141c:	4293      	cmp	r3, r2
    141e:	d020      	beq.n	1462 <_Z8subClock11structClockS_+0x66>
		if(clock1.sign==true){// + - -
    1420:	7a03      	ldrb	r3, [r0, #8]
    1422:	2b00      	cmp	r3, #0
    1424:	d00d      	beq.n	1442 <_Z8subClock11structClockS_+0x46>
			clock2.sign=true;
    1426:	2201      	movs	r2, #1
    1428:	ab12      	add	r3, sp, #72	; 0x48
    142a:	721a      	strb	r2, [r3, #8]
			ret=sumClock(clock1,clock2);
    142c:	466b      	mov	r3, sp
    142e:	aa12      	add	r2, sp, #72	; 0x48
    1430:	ca23      	ldmia	r2!, {r0, r1, r5}
    1432:	c323      	stmia	r3!, {r0, r1, r5}
    1434:	1c20      	adds	r0, r4, #0
    1436:	9905      	ldr	r1, [sp, #20]
    1438:	9a06      	ldr	r2, [sp, #24]
    143a:	9b07      	ldr	r3, [sp, #28]
    143c:	4d2e      	ldr	r5, [pc, #184]	; (14f8 <_Z8subClock11structClockS_+0xfc>)
    143e:	47a8      	blx	r5
    1440:	e056      	b.n	14f0 <_Z8subClock11structClockS_+0xf4>
		}
		else{// - - +
			clock1.sign=true;
    1442:	ab05      	add	r3, sp, #20
    1444:	2201      	movs	r2, #1
    1446:	721a      	strb	r2, [r3, #8]
			ret=sumClock(clock1,clock2);
    1448:	466a      	mov	r2, sp
    144a:	a912      	add	r1, sp, #72	; 0x48
    144c:	c961      	ldmia	r1!, {r0, r5, r6}
    144e:	c261      	stmia	r2!, {r0, r5, r6}
    1450:	1c20      	adds	r0, r4, #0
    1452:	9905      	ldr	r1, [sp, #20]
    1454:	9a06      	ldr	r2, [sp, #24]
    1456:	9b07      	ldr	r3, [sp, #28]
    1458:	4d27      	ldr	r5, [pc, #156]	; (14f8 <_Z8subClock11structClockS_+0xfc>)
    145a:	47a8      	blx	r5
			ret.sign=false;
    145c:	2300      	movs	r3, #0
    145e:	7223      	strb	r3, [r4, #8]
    1460:	e046      	b.n	14f0 <_Z8subClock11structClockS_+0xf4>
		}
	}
	else{
		if(clock1.sign==true){ //+ - +
    1462:	ab05      	add	r3, sp, #20
    1464:	7a1b      	ldrb	r3, [r3, #8]
    1466:	2b00      	cmp	r3, #0
    1468:	d02b      	beq.n	14c2 <_Z8subClock11structClockS_+0xc6>
    146a:	aa08      	add	r2, sp, #32
    146c:	ab05      	add	r3, sp, #20
    146e:	cb23      	ldmia	r3!, {r0, r1, r5}
    1470:	c223      	stmia	r2!, {r0, r1, r5}
    1472:	ab0b      	add	r3, sp, #44	; 0x2c
    1474:	aa12      	add	r2, sp, #72	; 0x48
    1476:	ca23      	ldmia	r2!, {r0, r1, r5}
    1478:	c323      	stmia	r3!, {r0, r1, r5}


Clock timeManage={0,0,true};

bool sup(Clock clock1,Clock clock2){
		if(clock1.second>clock2.second){//clock1>clock2
    147a:	9a08      	ldr	r2, [sp, #32]
    147c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    147e:	429a      	cmp	r2, r3
    1480:	d807      	bhi.n	1492 <_Z8subClock11structClockS_+0x96>
			return true;
		}
		else{
			if(clock1.second<clock2.second){
    1482:	9a08      	ldr	r2, [sp, #32]
    1484:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1486:	429a      	cmp	r2, r3
    1488:	d30e      	bcc.n	14a8 <_Z8subClock11structClockS_+0xac>
				return false;
			}
			else{//egual
				if(clock1.halfmillis>clock2.halfmillis){
    148a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    148c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			ret.sign=false;
		}
	}
	else{
		if(clock1.sign==true){ //+ - +
			if(sup(clock1,clock2)){//clock1>Clock2
    148e:	429a      	cmp	r2, r3
    1490:	d90a      	bls.n	14a8 <_Z8subClock11structClockS_+0xac>
				
				ret=subClockPos(clock1,clock2);
    1492:	466b      	mov	r3, sp
    1494:	aa12      	add	r2, sp, #72	; 0x48
    1496:	ca23      	ldmia	r2!, {r0, r1, r5}
    1498:	c323      	stmia	r3!, {r0, r1, r5}
    149a:	1c20      	adds	r0, r4, #0
    149c:	9905      	ldr	r1, [sp, #20]
    149e:	9a06      	ldr	r2, [sp, #24]
    14a0:	9b07      	ldr	r3, [sp, #28]
    14a2:	4d16      	ldr	r5, [pc, #88]	; (14fc <_Z8subClock11structClockS_+0x100>)
    14a4:	47a8      	blx	r5
    14a6:	e023      	b.n	14f0 <_Z8subClock11structClockS_+0xf4>
			}
			else{
				ret=subClockPos(clock2,clock1);
    14a8:	ab05      	add	r3, sp, #20
    14aa:	466a      	mov	r2, sp
    14ac:	cb23      	ldmia	r3!, {r0, r1, r5}
    14ae:	c223      	stmia	r2!, {r0, r1, r5}
    14b0:	1c20      	adds	r0, r4, #0
    14b2:	9912      	ldr	r1, [sp, #72]	; 0x48
    14b4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    14b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
    14b8:	4d10      	ldr	r5, [pc, #64]	; (14fc <_Z8subClock11structClockS_+0x100>)
    14ba:	47a8      	blx	r5
				ret.sign=false;
    14bc:	2300      	movs	r3, #0
    14be:	7223      	strb	r3, [r4, #8]
    14c0:	e016      	b.n	14f0 <_Z8subClock11structClockS_+0xf4>
			}
		}
		else{// - - - 
			clock2.sign=true;
    14c2:	2201      	movs	r2, #1
    14c4:	ab12      	add	r3, sp, #72	; 0x48
    14c6:	721a      	strb	r2, [r3, #8]
			clock1.sign=true;	
    14c8:	ab05      	add	r3, sp, #20
    14ca:	721a      	strb	r2, [r3, #8]
			ret=subClock(clock1,clock2);
    14cc:	466a      	mov	r2, sp
    14ce:	a912      	add	r1, sp, #72	; 0x48
    14d0:	c961      	ldmia	r1!, {r0, r5, r6}
    14d2:	c261      	stmia	r2!, {r0, r5, r6}
    14d4:	1c20      	adds	r0, r4, #0
    14d6:	9905      	ldr	r1, [sp, #20]
    14d8:	9a06      	ldr	r2, [sp, #24]
    14da:	9b07      	ldr	r3, [sp, #28]
    14dc:	f7ff ff8e 	bl	13fc <_Z8subClock11structClockS_>
			if(ret.sign==true){
    14e0:	7a23      	ldrb	r3, [r4, #8]
    14e2:	2b00      	cmp	r3, #0
    14e4:	d002      	beq.n	14ec <_Z8subClock11structClockS_+0xf0>
				ret.sign=false;
    14e6:	2300      	movs	r3, #0
    14e8:	7223      	strb	r3, [r4, #8]
    14ea:	e001      	b.n	14f0 <_Z8subClock11structClockS_+0xf4>
			}
			else{
				ret.sign=true;
    14ec:	2301      	movs	r3, #1
    14ee:	7223      	strb	r3, [r4, #8]
		}
	}

	
	return ret;
}
    14f0:	1c20      	adds	r0, r4, #0
    14f2:	b00e      	add	sp, #56	; 0x38
    14f4:	bd70      	pop	{r4, r5, r6, pc}
    14f6:	46c0      	nop			; (mov r8, r8)
    14f8:	00001501 	.word	0x00001501
    14fc:	000013bd 	.word	0x000013bd

00001500 <_Z8sumClock11structClockS_>:
	ret.second=ret.second+(halfmillis/RTC_FREQ);
	ret.halfmillis=halfmillis%RTC_FREQ;
	return ret;
	
}
Clock sumClock(Clock clock1,Clock clock2 ){
    1500:	b5f0      	push	{r4, r5, r6, r7, lr}
    1502:	4647      	mov	r7, r8
    1504:	b480      	push	{r7}
    1506:	b09a      	sub	sp, #104	; 0x68
    1508:	1c04      	adds	r4, r0, #0
    150a:	a805      	add	r0, sp, #20
    150c:	9105      	str	r1, [sp, #20]
    150e:	9206      	str	r2, [sp, #24]
    1510:	9307      	str	r3, [sp, #28]
	Clock ret={0,0,true};
    1512:	2300      	movs	r3, #0
    1514:	6023      	str	r3, [r4, #0]
    1516:	6063      	str	r3, [r4, #4]
    1518:	3301      	adds	r3, #1
    151a:	7223      	strb	r3, [r4, #8]
		
	if((clock1.sign==true)&&(clock2.sign==true)){// + + +
    151c:	7a03      	ldrb	r3, [r0, #8]
    151e:	2b00      	cmp	r3, #0
    1520:	d013      	beq.n	154a <_Z8sumClock11structClockS_+0x4a>
    1522:	ab20      	add	r3, sp, #128	; 0x80
    1524:	7a1b      	ldrb	r3, [r3, #8]
    1526:	2b00      	cmp	r3, #0
    1528:	d114      	bne.n	1554 <_Z8sumClock11structClockS_+0x54>
    152a:	e00e      	b.n	154a <_Z8sumClock11structClockS_+0x4a>
		ret=sumClockPos(clock1,clock2);
	}
	else{
		if((clock1.sign==true)&&(clock2.sign==false)){ // + + -
    152c:	ab20      	add	r3, sp, #128	; 0x80
    152e:	7a1b      	ldrb	r3, [r3, #8]
    1530:	2b00      	cmp	r3, #0
    1532:	d146      	bne.n	15c2 <_Z8sumClock11structClockS_+0xc2>
    1534:	e037      	b.n	15a6 <_Z8sumClock11structClockS_+0xa6>
			clock2.sign=true;
			ret=subClock(clock1,clock2);
		}
		else{
					if((clock1.sign==false)&&(clock2.sign==true)){ // - + + 
    1536:	ab20      	add	r3, sp, #128	; 0x80
    1538:	7a1b      	ldrb	r3, [r3, #8]
    153a:	2b00      	cmp	r3, #0
    153c:	d146      	bne.n	15cc <_Z8sumClock11structClockS_+0xcc>
    153e:	e052      	b.n	15e6 <_Z8sumClock11structClockS_+0xe6>
						clock1.sign=true;
						ret=subClock(clock2,clock1);
					}
					else{
						if((clock1.sign==false)&&(clock2.sign==false)){ // - + -
    1540:	ab20      	add	r3, sp, #128	; 0x80
    1542:	7a1b      	ldrb	r3, [r3, #8]
    1544:	2b00      	cmp	r3, #0
    1546:	d053      	beq.n	15f0 <_Z8sumClock11structClockS_+0xf0>
    1548:	e081      	b.n	164e <_Z8sumClock11structClockS_+0x14e>
		
	if((clock1.sign==true)&&(clock2.sign==true)){// + + +
		ret=sumClockPos(clock1,clock2);
	}
	else{
		if((clock1.sign==true)&&(clock2.sign==false)){ // + + -
    154a:	ab05      	add	r3, sp, #20
    154c:	7a1b      	ldrb	r3, [r3, #8]
    154e:	2b00      	cmp	r3, #0
    1550:	d1ec      	bne.n	152c <_Z8sumClock11structClockS_+0x2c>
    1552:	e036      	b.n	15c2 <_Z8sumClock11structClockS_+0xc2>
    1554:	aa08      	add	r2, sp, #32
    1556:	ab05      	add	r3, sp, #20
    1558:	1c11      	adds	r1, r2, #0
    155a:	cb61      	ldmia	r3!, {r0, r5, r6}
    155c:	c161      	stmia	r1!, {r0, r5, r6}
    155e:	ab0b      	add	r3, sp, #44	; 0x2c
    1560:	1c19      	adds	r1, r3, #0
    1562:	a820      	add	r0, sp, #128	; 0x80
    1564:	c8e0      	ldmia	r0!, {r5, r6, r7}
    1566:	c1e0      	stmia	r1!, {r5, r6, r7}
			}
		}

}
Clock sumClockPos(Clock clock1,Clock clock2 ){
	Clock ret={0,0,true};
    1568:	ad14      	add	r5, sp, #80	; 0x50
    156a:	2100      	movs	r1, #0
    156c:	9114      	str	r1, [sp, #80]	; 0x50
    156e:	9115      	str	r1, [sp, #84]	; 0x54
    1570:	3101      	adds	r1, #1
    1572:	7229      	strb	r1, [r5, #8]
	unsigned long int halfmillis=clock1.halfmillis;
    1574:	9909      	ldr	r1, [sp, #36]	; 0x24
	ret.second=clock1.second+clock2.second;
    1576:	9a08      	ldr	r2, [sp, #32]
    1578:	980b      	ldr	r0, [sp, #44]	; 0x2c
    157a:	1882      	adds	r2, r0, r2
    157c:	9214      	str	r2, [sp, #80]	; 0x50
	halfmillis=halfmillis+clock2.halfmillis;
    157e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    1580:	1876      	adds	r6, r6, r1
	ret.second=ret.second+(halfmillis/RTC_FREQ);
    1582:	9f14      	ldr	r7, [sp, #80]	; 0x50
    1584:	1c30      	adds	r0, r6, #0
    1586:	21fa      	movs	r1, #250	; 0xfa
    1588:	01c9      	lsls	r1, r1, #7
    158a:	4b3a      	ldr	r3, [pc, #232]	; (1674 <_Z8sumClock11structClockS_+0x174>)
    158c:	4798      	blx	r3
    158e:	19c7      	adds	r7, r0, r7
    1590:	9714      	str	r7, [sp, #80]	; 0x50
	ret.halfmillis=halfmillis%RTC_FREQ;
    1592:	1c30      	adds	r0, r6, #0
    1594:	21fa      	movs	r1, #250	; 0xfa
    1596:	01c9      	lsls	r1, r1, #7
    1598:	4b37      	ldr	r3, [pc, #220]	; (1678 <_Z8sumClock11structClockS_+0x178>)
    159a:	4798      	blx	r3
    159c:	6069      	str	r1, [r5, #4]
}
Clock sumClock(Clock clock1,Clock clock2 ){
	Clock ret={0,0,true};
		
	if((clock1.sign==true)&&(clock2.sign==true)){// + + +
		ret=sumClockPos(clock1,clock2);
    159e:	1c23      	adds	r3, r4, #0
    15a0:	cd07      	ldmia	r5!, {r0, r1, r2}
    15a2:	c307      	stmia	r3!, {r0, r1, r2}
    15a4:	e053      	b.n	164e <_Z8sumClock11structClockS_+0x14e>
	}
	else{
		if((clock1.sign==true)&&(clock2.sign==false)){ // + + -
			clock2.sign=true;
    15a6:	2201      	movs	r2, #1
    15a8:	ab20      	add	r3, sp, #128	; 0x80
    15aa:	721a      	strb	r2, [r3, #8]
			ret=subClock(clock1,clock2);
    15ac:	466b      	mov	r3, sp
    15ae:	aa20      	add	r2, sp, #128	; 0x80
    15b0:	ca23      	ldmia	r2!, {r0, r1, r5}
    15b2:	c323      	stmia	r3!, {r0, r1, r5}
    15b4:	1c20      	adds	r0, r4, #0
    15b6:	9905      	ldr	r1, [sp, #20]
    15b8:	9a06      	ldr	r2, [sp, #24]
    15ba:	9b07      	ldr	r3, [sp, #28]
    15bc:	4d2f      	ldr	r5, [pc, #188]	; (167c <_Z8sumClock11structClockS_+0x17c>)
    15be:	47a8      	blx	r5
    15c0:	e045      	b.n	164e <_Z8sumClock11structClockS_+0x14e>
		}
		else{
					if((clock1.sign==false)&&(clock2.sign==true)){ // - + + 
    15c2:	ab05      	add	r3, sp, #20
    15c4:	7a1b      	ldrb	r3, [r3, #8]
    15c6:	2b00      	cmp	r3, #0
    15c8:	d10d      	bne.n	15e6 <_Z8sumClock11structClockS_+0xe6>
    15ca:	e7b4      	b.n	1536 <_Z8sumClock11structClockS_+0x36>
						clock1.sign=true;
    15cc:	ab05      	add	r3, sp, #20
    15ce:	2201      	movs	r2, #1
    15d0:	721a      	strb	r2, [r3, #8]
						ret=subClock(clock2,clock1);
    15d2:	466a      	mov	r2, sp
    15d4:	cb23      	ldmia	r3!, {r0, r1, r5}
    15d6:	c223      	stmia	r2!, {r0, r1, r5}
    15d8:	1c20      	adds	r0, r4, #0
    15da:	9920      	ldr	r1, [sp, #128]	; 0x80
    15dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
    15de:	9b22      	ldr	r3, [sp, #136]	; 0x88
    15e0:	4d26      	ldr	r5, [pc, #152]	; (167c <_Z8sumClock11structClockS_+0x17c>)
    15e2:	47a8      	blx	r5
    15e4:	e033      	b.n	164e <_Z8sumClock11structClockS_+0x14e>
					}
					else{
						if((clock1.sign==false)&&(clock2.sign==false)){ // - + -
    15e6:	ab05      	add	r3, sp, #20
    15e8:	7a1b      	ldrb	r3, [r3, #8]
    15ea:	2b00      	cmp	r3, #0
    15ec:	d12f      	bne.n	164e <_Z8sumClock11structClockS_+0x14e>
    15ee:	e7a7      	b.n	1540 <_Z8sumClock11structClockS_+0x40>
							clock1.sign=true;
    15f0:	ab05      	add	r3, sp, #20
    15f2:	2101      	movs	r1, #1
    15f4:	7219      	strb	r1, [r3, #8]
							clock2.sign=true;
    15f6:	aa20      	add	r2, sp, #128	; 0x80
    15f8:	7211      	strb	r1, [r2, #8]
    15fa:	aa0e      	add	r2, sp, #56	; 0x38
    15fc:	1c10      	adds	r0, r2, #0
    15fe:	cbe0      	ldmia	r3!, {r5, r6, r7}
    1600:	c0e0      	stmia	r0!, {r5, r6, r7}
    1602:	ab11      	add	r3, sp, #68	; 0x44
    1604:	469c      	mov	ip, r3
    1606:	1c18      	adds	r0, r3, #0
    1608:	ad20      	add	r5, sp, #128	; 0x80
    160a:	cdc8      	ldmia	r5!, {r3, r6, r7}
    160c:	c0c8      	stmia	r0!, {r3, r6, r7}
			}
		}

}
Clock sumClockPos(Clock clock1,Clock clock2 ){
	Clock ret={0,0,true};
    160e:	ad17      	add	r5, sp, #92	; 0x5c
    1610:	2700      	movs	r7, #0
    1612:	9717      	str	r7, [sp, #92]	; 0x5c
    1614:	9718      	str	r7, [sp, #96]	; 0x60
    1616:	7229      	strb	r1, [r5, #8]
	unsigned long int halfmillis=clock1.halfmillis;
    1618:	990f      	ldr	r1, [sp, #60]	; 0x3c
	ret.second=clock1.second+clock2.second;
    161a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    161c:	9811      	ldr	r0, [sp, #68]	; 0x44
    161e:	1882      	adds	r2, r0, r2
    1620:	9217      	str	r2, [sp, #92]	; 0x5c
	halfmillis=halfmillis+clock2.halfmillis;
    1622:	4663      	mov	r3, ip
    1624:	685e      	ldr	r6, [r3, #4]
    1626:	1876      	adds	r6, r6, r1
	ret.second=ret.second+(halfmillis/RTC_FREQ);
    1628:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    162a:	4698      	mov	r8, r3
    162c:	1c30      	adds	r0, r6, #0
    162e:	21fa      	movs	r1, #250	; 0xfa
    1630:	01c9      	lsls	r1, r1, #7
    1632:	4b10      	ldr	r3, [pc, #64]	; (1674 <_Z8sumClock11structClockS_+0x174>)
    1634:	4798      	blx	r3
    1636:	4440      	add	r0, r8
    1638:	9017      	str	r0, [sp, #92]	; 0x5c
	ret.halfmillis=halfmillis%RTC_FREQ;
    163a:	1c30      	adds	r0, r6, #0
    163c:	21fa      	movs	r1, #250	; 0xfa
    163e:	01c9      	lsls	r1, r1, #7
    1640:	4b0d      	ldr	r3, [pc, #52]	; (1678 <_Z8sumClock11structClockS_+0x178>)
    1642:	4798      	blx	r3
    1644:	6069      	str	r1, [r5, #4]
					}
					else{
						if((clock1.sign==false)&&(clock2.sign==false)){ // - + -
							clock1.sign=true;
							clock2.sign=true;
							ret=sumClockPos(clock1,clock2);
    1646:	1c23      	adds	r3, r4, #0
    1648:	cd07      	ldmia	r5!, {r0, r1, r2}
    164a:	c307      	stmia	r3!, {r0, r1, r2}
							ret.sign=false;
    164c:	7227      	strb	r7, [r4, #8]
						}
					}
		}
		
	}
	ret.second+=ret.halfmillis/RTC_FREQ;
    164e:	6860      	ldr	r0, [r4, #4]
    1650:	6825      	ldr	r5, [r4, #0]
    1652:	21fa      	movs	r1, #250	; 0xfa
    1654:	01c9      	lsls	r1, r1, #7
    1656:	4b07      	ldr	r3, [pc, #28]	; (1674 <_Z8sumClock11structClockS_+0x174>)
    1658:	4798      	blx	r3
    165a:	1945      	adds	r5, r0, r5
    165c:	6025      	str	r5, [r4, #0]
	ret.halfmillis=ret.halfmillis%RTC_FREQ;
    165e:	6860      	ldr	r0, [r4, #4]
    1660:	21fa      	movs	r1, #250	; 0xfa
    1662:	01c9      	lsls	r1, r1, #7
    1664:	4b04      	ldr	r3, [pc, #16]	; (1678 <_Z8sumClock11structClockS_+0x178>)
    1666:	4798      	blx	r3
    1668:	6061      	str	r1, [r4, #4]
	return ret;
}
    166a:	1c20      	adds	r0, r4, #0
    166c:	b01a      	add	sp, #104	; 0x68
    166e:	bc04      	pop	{r2}
    1670:	4690      	mov	r8, r2
    1672:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1674:	00006685 	.word	0x00006685
    1678:	00006791 	.word	0x00006791
    167c:	000013fd 	.word	0x000013fd

00001680 <_Z9readClockP11structClock>:
volatile int timeCorr;
volatile bool stateLed=false;
DigitalOut led(LED1);
struct rtc_module rtc_instance;

uint32_t  readClock(Clock* timeClock){
    1680:	b5f0      	push	{r4, r5, r6, r7, lr}
    1682:	4647      	mov	r7, r8
    1684:	b480      	push	{r7}
    1686:	1c04      	adds	r4, r0, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1688:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    168a:	f3bf 8f5f 	dmb	sy
	//rtc_count_disable(&rtc_instance);
	Disable_global_interrupt();
    168e:	2200      	movs	r2, #0
    1690:	4b19      	ldr	r3, [pc, #100]	; (16f8 <_Z9readClockP11structClock+0x78>)
    1692:	701a      	strb	r2, [r3, #0]
	uint32_t timeCounter=0;
	RTC->MODE0.CTRL.reg &=  0b1111111111111101;//disable timer
    1694:	4a19      	ldr	r2, [pc, #100]	; (16fc <_Z9readClockP11structClock+0x7c>)
    1696:	8813      	ldrh	r3, [r2, #0]
    1698:	2102      	movs	r1, #2
    169a:	438b      	bics	r3, r1
    169c:	8013      	strh	r3, [r2, #0]
	while(RTC->MODE0.STATUS.bit.SYNCBUSY==1);//wait timer disable
    169e:	7a93      	ldrb	r3, [r2, #10]
    16a0:	09db      	lsrs	r3, r3, #7
    16a2:	d1fc      	bne.n	169e <_Z9readClockP11structClock+0x1e>
	
	timeCounter=RTC->MODE0.COUNT.reg; 
    16a4:	4d15      	ldr	r5, [pc, #84]	; (16fc <_Z9readClockP11structClock+0x7c>)
    16a6:	692f      	ldr	r7, [r5, #16]
	timeClock->second=timeManage.second;	
    16a8:	4b15      	ldr	r3, [pc, #84]	; (1700 <_Z9readClockP11structClock+0x80>)
    16aa:	681a      	ldr	r2, [r3, #0]
    16ac:	6022      	str	r2, [r4, #0]
	timeClock->halfmillis=timeManage.halfmillis;	
    16ae:	685b      	ldr	r3, [r3, #4]
    16b0:	6063      	str	r3, [r4, #4]
	//timeCounter=0;
	

	//Enable_global_interrupt();
	timeClock->sign=true;	
    16b2:	2301      	movs	r3, #1
    16b4:	4698      	mov	r8, r3
    16b6:	7223      	strb	r3, [r4, #8]

	timeClock->halfmillis+=timeCounter;
    16b8:	6863      	ldr	r3, [r4, #4]
    16ba:	19db      	adds	r3, r3, r7
    16bc:	6063      	str	r3, [r4, #4]
	timeClock->second+=timeClock->halfmillis/RTC_FREQ;
    16be:	6860      	ldr	r0, [r4, #4]
    16c0:	6826      	ldr	r6, [r4, #0]
    16c2:	21fa      	movs	r1, #250	; 0xfa
    16c4:	01c9      	lsls	r1, r1, #7
    16c6:	4b0f      	ldr	r3, [pc, #60]	; (1704 <_Z9readClockP11structClock+0x84>)
    16c8:	4798      	blx	r3
    16ca:	1986      	adds	r6, r0, r6
    16cc:	6026      	str	r6, [r4, #0]
	timeClock->halfmillis=timeClock->halfmillis%RTC_FREQ;
    16ce:	6860      	ldr	r0, [r4, #4]
    16d0:	21fa      	movs	r1, #250	; 0xfa
    16d2:	01c9      	lsls	r1, r1, #7
    16d4:	4b0c      	ldr	r3, [pc, #48]	; (1708 <_Z9readClockP11structClock+0x88>)
    16d6:	4798      	blx	r3
    16d8:	6061      	str	r1, [r4, #4]
	RTC->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE; //enable timer
    16da:	882a      	ldrh	r2, [r5, #0]
    16dc:	2302      	movs	r3, #2
    16de:	4313      	orrs	r3, r2
    16e0:	802b      	strh	r3, [r5, #0]
	Enable_global_interrupt();
    16e2:	4b05      	ldr	r3, [pc, #20]	; (16f8 <_Z9readClockP11structClock+0x78>)
    16e4:	4642      	mov	r2, r8
    16e6:	701a      	strb	r2, [r3, #0]
    16e8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    16ec:	b662      	cpsie	i
	return timeCounter;
}
    16ee:	1c38      	adds	r0, r7, #0
    16f0:	bc04      	pop	{r2}
    16f2:	4690      	mov	r8, r2
    16f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    16f6:	46c0      	nop			; (mov r8, r8)
    16f8:	200000d0 	.word	0x200000d0
    16fc:	40001400 	.word	0x40001400
    1700:	200000bc 	.word	0x200000bc
    1704:	00006685 	.word	0x00006685
    1708:	00006791 	.word	0x00006791

0000170c <_Z10writeClock11structClock>:
void writeClock(Clock clk){
    170c:	b5f0      	push	{r4, r5, r6, r7, lr}
    170e:	4647      	mov	r7, r8
    1710:	b480      	push	{r7}
    1712:	b084      	sub	sp, #16
    1714:	9001      	str	r0, [sp, #4]
    1716:	9102      	str	r1, [sp, #8]
    1718:	9203      	str	r2, [sp, #12]
	//rtc_count_disable(&rtc_instance);
	//Disable_global_interrupt();

	RTC->MODE0.CTRL.reg &=  0b1111111111111101;//stop timer
    171a:	4a16      	ldr	r2, [pc, #88]	; (1774 <_Z10writeClock11structClock+0x68>)
    171c:	8813      	ldrh	r3, [r2, #0]
    171e:	2102      	movs	r1, #2
    1720:	438b      	bics	r3, r1
    1722:	8013      	strh	r3, [r2, #0]
	
	while(RTC->MODE0.STATUS.bit.SYNCBUSY==1);
    1724:	7a93      	ldrb	r3, [r2, #10]
    1726:	09db      	lsrs	r3, r3, #7
    1728:	d1fc      	bne.n	1724 <_Z10writeClock11structClock+0x18>
	RTC->MODE0.COUNT.reg=clk.halfmillis%VALUE_TIMER;
    172a:	9802      	ldr	r0, [sp, #8]
    172c:	4f12      	ldr	r7, [pc, #72]	; (1778 <_Z10writeClock11structClock+0x6c>)
    172e:	4913      	ldr	r1, [pc, #76]	; (177c <_Z10writeClock11structClock+0x70>)
    1730:	47b8      	blx	r7
    1732:	4d10      	ldr	r5, [pc, #64]	; (1774 <_Z10writeClock11structClock+0x68>)
    1734:	6129      	str	r1, [r5, #16]
	timeManage.second=clk.second;
    1736:	9b01      	ldr	r3, [sp, #4]
    1738:	4c11      	ldr	r4, [pc, #68]	; (1780 <_Z10writeClock11structClock+0x74>)
    173a:	6023      	str	r3, [r4, #0]
	timeManage.halfmillis=(int)(clk.halfmillis/VALUE_TIMER)*VALUE_TIMER;
    173c:	9802      	ldr	r0, [sp, #8]
    173e:	4b11      	ldr	r3, [pc, #68]	; (1784 <_Z10writeClock11structClock+0x78>)
    1740:	4698      	mov	r8, r3
    1742:	490e      	ldr	r1, [pc, #56]	; (177c <_Z10writeClock11structClock+0x70>)
    1744:	4798      	blx	r3
    1746:	4b0d      	ldr	r3, [pc, #52]	; (177c <_Z10writeClock11structClock+0x70>)
    1748:	4358      	muls	r0, r3
    174a:	6060      	str	r0, [r4, #4]
	timeManage.second+=timeManage.halfmillis/RTC_FREQ;
    174c:	6860      	ldr	r0, [r4, #4]
    174e:	6826      	ldr	r6, [r4, #0]
    1750:	21fa      	movs	r1, #250	; 0xfa
    1752:	01c9      	lsls	r1, r1, #7
    1754:	47c0      	blx	r8
    1756:	1986      	adds	r6, r0, r6
    1758:	6026      	str	r6, [r4, #0]
	timeManage.halfmillis=timeManage.halfmillis%RTC_FREQ;
    175a:	6860      	ldr	r0, [r4, #4]
    175c:	21fa      	movs	r1, #250	; 0xfa
    175e:	01c9      	lsls	r1, r1, #7
    1760:	47b8      	blx	r7
    1762:	6061      	str	r1, [r4, #4]
	RTC->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE; //enable timer
    1764:	882a      	ldrh	r2, [r5, #0]
    1766:	2302      	movs	r3, #2
    1768:	4313      	orrs	r3, r2
    176a:	802b      	strh	r3, [r5, #0]

	

	
	
}
    176c:	b004      	add	sp, #16
    176e:	bc04      	pop	{r2}
    1770:	4690      	mov	r8, r2
    1772:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1774:	40001400 	.word	0x40001400
    1778:	00006791 	.word	0x00006791
    177c:	00002710 	.word	0x00002710
    1780:	200000bc 	.word	0x200000bc
    1784:	00006685 	.word	0x00006685

00001788 <_Z15isrInternalClokv>:
void isrInternalClok(void){
    1788:	b5f0      	push	{r4, r5, r6, r7, lr}
    178a:	b08d      	sub	sp, #52	; 0x34
		RTC->MODE0.CTRL.reg &=  0b1111111111111101;//stop timer
    178c:	4a5f      	ldr	r2, [pc, #380]	; (190c <_Z15isrInternalClokv+0x184>)
    178e:	8813      	ldrh	r3, [r2, #0]
    1790:	2102      	movs	r1, #2
    1792:	438b      	bics	r3, r1
    1794:	8013      	strh	r3, [r2, #0]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1796:	b672      	cpsid	i
    1798:	f3bf 8f5f 	dmb	sy
			Disable_global_interrupt();
    179c:	2200      	movs	r2, #0
    179e:	4b5c      	ldr	r3, [pc, #368]	; (1910 <_Z15isrInternalClokv+0x188>)
    17a0:	701a      	strb	r2, [r3, #0]
			//printf("+");
			static bool state;
			state=stateLed;
    17a2:	4b5c      	ldr	r3, [pc, #368]	; (1914 <_Z15isrInternalClokv+0x18c>)
    17a4:	781a      	ldrb	r2, [r3, #0]
    17a6:	4b5c      	ldr	r3, [pc, #368]	; (1918 <_Z15isrInternalClokv+0x190>)
    17a8:	701a      	strb	r2, [r3, #0]
			

			timeManage.halfmillis+=VALUE_TIMER;
    17aa:	4b5c      	ldr	r3, [pc, #368]	; (191c <_Z15isrInternalClokv+0x194>)
    17ac:	685a      	ldr	r2, [r3, #4]
    17ae:	495c      	ldr	r1, [pc, #368]	; (1920 <_Z15isrInternalClokv+0x198>)
    17b0:	468c      	mov	ip, r1
    17b2:	4462      	add	r2, ip
    17b4:	605a      	str	r2, [r3, #4]

		
			if(timeManage.halfmillis<(RTC_FREQ/2)){//all 500ms
    17b6:	685a      	ldr	r2, [r3, #4]
    17b8:	4b5a      	ldr	r3, [pc, #360]	; (1924 <_Z15isrInternalClokv+0x19c>)
    17ba:	429a      	cmp	r2, r3
    17bc:	d803      	bhi.n	17c6 <_Z15isrInternalClokv+0x3e>
				stateLed=LOW;
    17be:	2200      	movs	r2, #0
    17c0:	4b54      	ldr	r3, [pc, #336]	; (1914 <_Z15isrInternalClokv+0x18c>)
    17c2:	701a      	strb	r2, [r3, #0]
    17c4:	e002      	b.n	17cc <_Z15isrInternalClokv+0x44>
			}
			else{
				stateLed=HIGH;
    17c6:	2201      	movs	r2, #1
    17c8:	4b52      	ldr	r3, [pc, #328]	; (1914 <_Z15isrInternalClokv+0x18c>)
    17ca:	701a      	strb	r2, [r3, #0]
			}
			if(state!=stateLed){
    17cc:	4b51      	ldr	r3, [pc, #324]	; (1914 <_Z15isrInternalClokv+0x18c>)
    17ce:	781b      	ldrb	r3, [r3, #0]
    17d0:	b2db      	uxtb	r3, r3
    17d2:	4a51      	ldr	r2, [pc, #324]	; (1918 <_Z15isrInternalClokv+0x190>)
    17d4:	7812      	ldrb	r2, [r2, #0]
    17d6:	429a      	cmp	r2, r3
    17d8:	d017      	beq.n	180a <_Z15isrInternalClokv+0x82>
				led = stateLed;
    17da:	4b4e      	ldr	r3, [pc, #312]	; (1914 <_Z15isrInternalClokv+0x18c>)
    17dc:	781c      	ldrb	r4, [r3, #0]
    17de:	b2e4      	uxtb	r4, r4
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    17e0:	4b51      	ldr	r3, [pc, #324]	; (1928 <_Z15isrInternalClokv+0x1a0>)
    17e2:	781b      	ldrb	r3, [r3, #0]
    17e4:	b25b      	sxtb	r3, r3
    17e6:	3301      	adds	r3, #1
    17e8:	d104      	bne.n	17f4 <_Z15isrInternalClokv+0x6c>
    17ea:	4850      	ldr	r0, [pc, #320]	; (192c <_Z15isrInternalClokv+0x1a4>)
    17ec:	4950      	ldr	r1, [pc, #320]	; (1930 <_Z15isrInternalClokv+0x1a8>)
    17ee:	2228      	movs	r2, #40	; 0x28
    17f0:	4b50      	ldr	r3, [pc, #320]	; (1934 <_Z15isrInternalClokv+0x1ac>)
    17f2:	4798      	blx	r3
    if (value)
    17f4:	2c00      	cmp	r4, #0
    17f6:	d004      	beq.n	1802 <_Z15isrInternalClokv+0x7a>
        *obj->OUTSET = obj->mask;
    17f8:	4b4b      	ldr	r3, [pc, #300]	; (1928 <_Z15isrInternalClokv+0x1a0>)
    17fa:	691a      	ldr	r2, [r3, #16]
    17fc:	685b      	ldr	r3, [r3, #4]
    17fe:	6013      	str	r3, [r2, #0]
    1800:	e003      	b.n	180a <_Z15isrInternalClokv+0x82>
    else
        *obj->OUTCLR = obj->mask;
    1802:	4b49      	ldr	r3, [pc, #292]	; (1928 <_Z15isrInternalClokv+0x1a0>)
    1804:	68da      	ldr	r2, [r3, #12]
    1806:	685b      	ldr	r3, [r3, #4]
    1808:	6013      	str	r3, [r2, #0]
				//		xSemaphoreGiveFromISR( synchroLed,NULL);
				//	}
			}

			
			timeManage.second+=timeManage.halfmillis/RTC_FREQ;
    180a:	4c44      	ldr	r4, [pc, #272]	; (191c <_Z15isrInternalClokv+0x194>)
    180c:	6860      	ldr	r0, [r4, #4]
    180e:	6825      	ldr	r5, [r4, #0]
    1810:	21fa      	movs	r1, #250	; 0xfa
    1812:	01c9      	lsls	r1, r1, #7
    1814:	4b48      	ldr	r3, [pc, #288]	; (1938 <_Z15isrInternalClokv+0x1b0>)
    1816:	4798      	blx	r3
    1818:	1945      	adds	r5, r0, r5
    181a:	6025      	str	r5, [r4, #0]
			timeManage.halfmillis=timeManage.halfmillis%RTC_FREQ;
    181c:	6860      	ldr	r0, [r4, #4]
    181e:	21fa      	movs	r1, #250	; 0xfa
    1820:	01c9      	lsls	r1, r1, #7
    1822:	4b46      	ldr	r3, [pc, #280]	; (193c <_Z15isrInternalClokv+0x1b4>)
    1824:	4798      	blx	r3
    1826:	6061      	str	r1, [r4, #4]
			if((valueCor!=0)){
    1828:	4b45      	ldr	r3, [pc, #276]	; (1940 <_Z15isrInternalClokv+0x1b8>)
    182a:	681b      	ldr	r3, [r3, #0]
    182c:	2b00      	cmp	r3, #0
    182e:	d060      	beq.n	18f2 <_Z15isrInternalClokv+0x16a>
				if (timeCorr==0){
    1830:	4b44      	ldr	r3, [pc, #272]	; (1944 <_Z15isrInternalClokv+0x1bc>)
    1832:	681b      	ldr	r3, [r3, #0]
    1834:	2b00      	cmp	r3, #0
    1836:	d13c      	bne.n	18b2 <_Z15isrInternalClokv+0x12a>
					timeCorr=timeCorrection;
    1838:	4b43      	ldr	r3, [pc, #268]	; (1948 <_Z15isrInternalClokv+0x1c0>)
    183a:	681a      	ldr	r2, [r3, #0]
    183c:	4b41      	ldr	r3, [pc, #260]	; (1944 <_Z15isrInternalClokv+0x1bc>)
    183e:	601a      	str	r2, [r3, #0]
					Clock off;
					off.second=(unsigned int )abs(valueCor)/RTC_FREQ;
    1840:	4c3f      	ldr	r4, [pc, #252]	; (1940 <_Z15isrInternalClokv+0x1b8>)
    1842:	6820      	ldr	r0, [r4, #0]
    1844:	17c3      	asrs	r3, r0, #31
    1846:	18c0      	adds	r0, r0, r3
    1848:	4058      	eors	r0, r3
    184a:	21fa      	movs	r1, #250	; 0xfa
    184c:	01c9      	lsls	r1, r1, #7
    184e:	4b3a      	ldr	r3, [pc, #232]	; (1938 <_Z15isrInternalClokv+0x1b0>)
    1850:	4798      	blx	r3
    1852:	9009      	str	r0, [sp, #36]	; 0x24
					off.halfmillis=(unsigned int)abs(valueCor)%RTC_FREQ;
    1854:	6820      	ldr	r0, [r4, #0]
    1856:	17c3      	asrs	r3, r0, #31
    1858:	18c0      	adds	r0, r0, r3
    185a:	4058      	eors	r0, r3
    185c:	21fa      	movs	r1, #250	; 0xfa
    185e:	01c9      	lsls	r1, r1, #7
    1860:	4b36      	ldr	r3, [pc, #216]	; (193c <_Z15isrInternalClokv+0x1b4>)
    1862:	4798      	blx	r3
    1864:	910a      	str	r1, [sp, #40]	; 0x28
					if(valueCor<0){
    1866:	6823      	ldr	r3, [r4, #0]
    1868:	2b00      	cmp	r3, #0
    186a:	da03      	bge.n	1874 <_Z15isrInternalClokv+0xec>
						off.sign=false;
    186c:	2200      	movs	r2, #0
    186e:	ab09      	add	r3, sp, #36	; 0x24
    1870:	721a      	strb	r2, [r3, #8]
    1872:	e002      	b.n	187a <_Z15isrInternalClokv+0xf2>
					}
					else{
						off.sign=true;
    1874:	2201      	movs	r2, #1
    1876:	ab09      	add	r3, sp, #36	; 0x24
    1878:	721a      	strb	r2, [r3, #8]
					}
					//change the time
					timeManage=sumClock(timeManage,off);
    187a:	4e28      	ldr	r6, [pc, #160]	; (191c <_Z15isrInternalClokv+0x194>)
    187c:	ac04      	add	r4, sp, #16
    187e:	ad09      	add	r5, sp, #36	; 0x24
    1880:	466b      	mov	r3, sp
    1882:	1c2a      	adds	r2, r5, #0
    1884:	ca83      	ldmia	r2!, {r0, r1, r7}
    1886:	c383      	stmia	r3!, {r0, r1, r7}
    1888:	1c20      	adds	r0, r4, #0
    188a:	6831      	ldr	r1, [r6, #0]
    188c:	6872      	ldr	r2, [r6, #4]
    188e:	68b3      	ldr	r3, [r6, #8]
    1890:	4f2e      	ldr	r7, [pc, #184]	; (194c <_Z15isrInternalClokv+0x1c4>)
    1892:	47b8      	blx	r7
    1894:	1c23      	adds	r3, r4, #0
    1896:	cb07      	ldmia	r3!, {r0, r1, r2}
    1898:	c607      	stmia	r6!, {r0, r1, r2}
					//change the correction offset
					sumOffset=sumClock(sumOffset,off);//ok
    189a:	4e2d      	ldr	r6, [pc, #180]	; (1950 <_Z15isrInternalClokv+0x1c8>)
    189c:	466b      	mov	r3, sp
    189e:	cd07      	ldmia	r5!, {r0, r1, r2}
    18a0:	c307      	stmia	r3!, {r0, r1, r2}
    18a2:	1c20      	adds	r0, r4, #0
    18a4:	6831      	ldr	r1, [r6, #0]
    18a6:	6872      	ldr	r2, [r6, #4]
    18a8:	68b3      	ldr	r3, [r6, #8]
    18aa:	47b8      	blx	r7
    18ac:	cc0e      	ldmia	r4!, {r1, r2, r3}
    18ae:	c60e      	stmia	r6!, {r1, r2, r3}
    18b0:	e003      	b.n	18ba <_Z15isrInternalClokv+0x132>
				}
				else{
					timeCorr--;
    18b2:	4a24      	ldr	r2, [pc, #144]	; (1944 <_Z15isrInternalClokv+0x1bc>)
    18b4:	6813      	ldr	r3, [r2, #0]
    18b6:	3b01      	subs	r3, #1
    18b8:	6013      	str	r3, [r2, #0]
				}	
				sumOffset.second+=sumOffset.halfmillis/RTC_FREQ;
    18ba:	4c25      	ldr	r4, [pc, #148]	; (1950 <_Z15isrInternalClokv+0x1c8>)
    18bc:	6860      	ldr	r0, [r4, #4]
    18be:	6825      	ldr	r5, [r4, #0]
    18c0:	4f1d      	ldr	r7, [pc, #116]	; (1938 <_Z15isrInternalClokv+0x1b0>)
    18c2:	21fa      	movs	r1, #250	; 0xfa
    18c4:	01c9      	lsls	r1, r1, #7
    18c6:	47b8      	blx	r7
    18c8:	1945      	adds	r5, r0, r5
    18ca:	6025      	str	r5, [r4, #0]
				sumOffset.halfmillis=sumOffset.halfmillis%RTC_FREQ;
    18cc:	6860      	ldr	r0, [r4, #4]
    18ce:	4e1b      	ldr	r6, [pc, #108]	; (193c <_Z15isrInternalClokv+0x1b4>)
    18d0:	21fa      	movs	r1, #250	; 0xfa
    18d2:	01c9      	lsls	r1, r1, #7
    18d4:	47b0      	blx	r6
    18d6:	6061      	str	r1, [r4, #4]
				timeManage.second+=timeManage.halfmillis/RTC_FREQ;
    18d8:	4c10      	ldr	r4, [pc, #64]	; (191c <_Z15isrInternalClokv+0x194>)
    18da:	6860      	ldr	r0, [r4, #4]
    18dc:	6825      	ldr	r5, [r4, #0]
    18de:	21fa      	movs	r1, #250	; 0xfa
    18e0:	01c9      	lsls	r1, r1, #7
    18e2:	47b8      	blx	r7
    18e4:	1945      	adds	r5, r0, r5
    18e6:	6025      	str	r5, [r4, #0]
				timeManage.halfmillis=timeManage.halfmillis%RTC_FREQ;
    18e8:	6860      	ldr	r0, [r4, #4]
    18ea:	21fa      	movs	r1, #250	; 0xfa
    18ec:	01c9      	lsls	r1, r1, #7
    18ee:	47b0      	blx	r6
    18f0:	6061      	str	r1, [r4, #4]
			
			}
			

			
	Enable_global_interrupt();
    18f2:	2201      	movs	r2, #1
    18f4:	4b06      	ldr	r3, [pc, #24]	; (1910 <_Z15isrInternalClokv+0x188>)
    18f6:	701a      	strb	r2, [r3, #0]
    18f8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    18fc:	b662      	cpsie	i
	RTC->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE; //enable timer
    18fe:	4a03      	ldr	r2, [pc, #12]	; (190c <_Z15isrInternalClokv+0x184>)
    1900:	8811      	ldrh	r1, [r2, #0]
    1902:	2302      	movs	r3, #2
    1904:	430b      	orrs	r3, r1
    1906:	8013      	strh	r3, [r2, #0]
}
    1908:	b00d      	add	sp, #52	; 0x34
    190a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    190c:	40001400 	.word	0x40001400
    1910:	200000d0 	.word	0x200000d0
    1914:	20003d2c 	.word	0x20003d2c
    1918:	20003d24 	.word	0x20003d24
    191c:	200000bc 	.word	0x200000bc
    1920:	00002710 	.word	0x00002710
    1924:	00003e7f 	.word	0x00003e7f
    1928:	20003d34 	.word	0x20003d34
    192c:	0000ead8 	.word	0x0000ead8
    1930:	0000eaf0 	.word	0x0000eaf0
    1934:	00004f89 	.word	0x00004f89
    1938:	00006685 	.word	0x00006685
    193c:	00006791 	.word	0x00006791
    1940:	20003d50 	.word	0x20003d50
    1944:	20003d30 	.word	0x20003d30
    1948:	20003d28 	.word	0x20003d28
    194c:	00001501 	.word	0x00001501
    1950:	200041f8 	.word	0x200041f8

00001954 <RTC_Handler>:
void RTC_Handler( void ){
    1954:	b508      	push	{r3, lr}
	//pc.printf("ISR");
	RTC->MODE0.INTFLAG.bit.CMP0=1;		//disable the flag COMPARE
    1956:	4b06      	ldr	r3, [pc, #24]	; (1970 <RTC_Handler+0x1c>)
    1958:	7a19      	ldrb	r1, [r3, #8]
    195a:	2201      	movs	r2, #1
    195c:	430a      	orrs	r2, r1
    195e:	721a      	strb	r2, [r3, #8]
	RTC->MODE0.INTFLAG.bit.OVF=1;		//disable the flag COMPARE
    1960:	7a1a      	ldrb	r2, [r3, #8]
    1962:	2180      	movs	r1, #128	; 0x80
    1964:	4249      	negs	r1, r1
    1966:	430a      	orrs	r2, r1
    1968:	721a      	strb	r2, [r3, #8]
	isrInternalClok();
    196a:	4b02      	ldr	r3, [pc, #8]	; (1974 <RTC_Handler+0x20>)
    196c:	4798      	blx	r3
}
    196e:	bd08      	pop	{r3, pc}
    1970:	40001400 	.word	0x40001400
    1974:	00001789 	.word	0x00001789

00001978 <_Z22configureInternalClockv>:

void configureInternalClock(void){
    1978:	b508      	push	{r3, lr}
	hmi.printf("internal clock config\r\n");
    197a:	4821      	ldr	r0, [pc, #132]	; (1a00 <_Z22configureInternalClockv+0x88>)
    197c:	4921      	ldr	r1, [pc, #132]	; (1a04 <_Z22configureInternalClockv+0x8c>)
    197e:	4b22      	ldr	r3, [pc, #136]	; (1a08 <_Z22configureInternalClockv+0x90>)
    1980:	4798      	blx	r3
	//gENERIC CLOCK GENRERATOR
	GCLK->GENCTRL.reg=0x00010402;
    1982:	4b22      	ldr	r3, [pc, #136]	; (1a0c <_Z22configureInternalClockv+0x94>)
    1984:	4a22      	ldr	r2, [pc, #136]	; (1a10 <_Z22configureInternalClockv+0x98>)
    1986:	605a      	str	r2, [r3, #4]
	//Generic Clock Generator Division
	GCLK->GENDIV.reg=0x00000102;
    1988:	2281      	movs	r2, #129	; 0x81
    198a:	0052      	lsls	r2, r2, #1
    198c:	609a      	str	r2, [r3, #8]
	//Generic Clock Control
	GCLK->CLKCTRL.reg=0x4204;
    198e:	4a21      	ldr	r2, [pc, #132]	; (1a14 <_Z22configureInternalClockv+0x9c>)
    1990:	805a      	strh	r2, [r3, #2]
	//peripheral RTC configuration
	
	RTC->MODE0.CTRL.bit.PRESCALER=0x0;	//prescaller at 0
    1992:	4b21      	ldr	r3, [pc, #132]	; (1a18 <_Z22configureInternalClockv+0xa0>)
    1994:	8819      	ldrh	r1, [r3, #0]
    1996:	4a21      	ldr	r2, [pc, #132]	; (1a1c <_Z22configureInternalClockv+0xa4>)
    1998:	400a      	ands	r2, r1
    199a:	801a      	strh	r2, [r3, #0]
	RTC->MODE0.CTRL.bit.MODE=0x0;			//mode 0 : 32 bit counter
    199c:	881a      	ldrh	r2, [r3, #0]
    199e:	210c      	movs	r1, #12
    19a0:	438a      	bics	r2, r1
    19a2:	801a      	strh	r2, [r3, #0]
	RTC->MODE0.CTRL.bit.SWRST=0;			//no software reset
    19a4:	881a      	ldrh	r2, [r3, #0]
    19a6:	390b      	subs	r1, #11
    19a8:	438a      	bics	r2, r1
    19aa:	801a      	strh	r2, [r3, #0]
	RTC->MODE0.CTRL.bit.MATCHCLR=1;			//automatic reset counter
    19ac:	8819      	ldrh	r1, [r3, #0]
    19ae:	2280      	movs	r2, #128	; 0x80
    19b0:	430a      	orrs	r2, r1
    19b2:	801a      	strh	r2, [r3, #0]
	
	//event configuration
	RTC->MODE0.INTENSET.bit.OVF=1;		//enable the event overflow
    19b4:	79d9      	ldrb	r1, [r3, #7]
    19b6:	2080      	movs	r0, #128	; 0x80
    19b8:	4240      	negs	r0, r0
    19ba:	4301      	orrs	r1, r0
    19bc:	71d9      	strb	r1, [r3, #7]
	RTC->MODE0.INTENSET.bit.CMP0=1;		//enable the event compare
    19be:	79d9      	ldrb	r1, [r3, #7]
    19c0:	2201      	movs	r2, #1
    19c2:	4311      	orrs	r1, r2
    19c4:	71d9      	strb	r1, [r3, #7]
	RTC->MODE0.INTFLAG.bit.CMP0=1;		//disable the flag COMPARE
    19c6:	7a19      	ldrb	r1, [r3, #8]
    19c8:	430a      	orrs	r2, r1
    19ca:	721a      	strb	r2, [r3, #8]
	RTC->MODE0.INTFLAG.bit.OVF=1;		//disable the flag COMPARE
    19cc:	7a1a      	ldrb	r2, [r3, #8]
    19ce:	4302      	orrs	r2, r0
    19d0:	721a      	strb	r2, [r3, #8]
	RTC->MODE0.COUNT.bit.COUNT=0;		//set the RTC value
    19d2:	2200      	movs	r2, #0
    19d4:	611a      	str	r2, [r3, #16]
	RTC->MODE0.COMP[0].reg = count_set_period;//set the value of the period
    19d6:	4a12      	ldr	r2, [pc, #72]	; (1a20 <_Z22configureInternalClockv+0xa8>)
    19d8:	6812      	ldr	r2, [r2, #0]
    19da:	619a      	str	r2, [r3, #24]

	RTC->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;//enable the timer
    19dc:	8819      	ldrh	r1, [r3, #0]
    19de:	2202      	movs	r2, #2
    19e0:	430a      	orrs	r2, r1
    19e2:	801a      	strh	r2, [r3, #0]
  if((int32_t)(IRQn) < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    19e4:	4a0f      	ldr	r2, [pc, #60]	; (1a24 <_Z22configureInternalClockv+0xac>)
    19e6:	21c0      	movs	r1, #192	; 0xc0
    19e8:	0089      	lsls	r1, r1, #2
    19ea:	5853      	ldr	r3, [r2, r1]
    19ec:	021b      	lsls	r3, r3, #8
    19ee:	0a1b      	lsrs	r3, r3, #8
    19f0:	20c0      	movs	r0, #192	; 0xc0
    19f2:	0600      	lsls	r0, r0, #24
    19f4:	4303      	orrs	r3, r0
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    19f6:	5053      	str	r3, [r2, r1]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    19f8:	2308      	movs	r3, #8
    19fa:	6013      	str	r3, [r2, #0]

	NVIC_SetPriority (RTC_IRQn, (1<<__NVIC_PRIO_BITS) - 1);//configure interrupt
	NVIC_EnableIRQ(RTC_IRQn);//enable interrrupt
	
    19fc:	bd08      	pop	{r3, pc}
    19fe:	46c0      	nop			; (mov r8, r8)
    1a00:	20004594 	.word	0x20004594
    1a04:	0000eb3c 	.word	0x0000eb3c
    1a08:	00004f61 	.word	0x00004f61
    1a0c:	40000c00 	.word	0x40000c00
    1a10:	00010402 	.word	0x00010402
    1a14:	00004204 	.word	0x00004204
    1a18:	40001400 	.word	0x40001400
    1a1c:	fffff0ff 	.word	0xfffff0ff
    1a20:	200000c8 	.word	0x200000c8
    1a24:	e000e100 	.word	0xe000e100

00001a28 <_GLOBAL__sub_I_count_set_period>:
    1a28:	b508      	push	{r3, lr}
public:
    /** Create a DigitalOut connected to the specified pin
     *
     *  @param pin DigitalOut pin to connect to
     */
    DigitalOut(PinName pin) : gpio() {
    1a2a:	4807      	ldr	r0, [pc, #28]	; (1a48 <_GLOBAL__sub_I_count_set_period+0x20>)
    1a2c:	2300      	movs	r3, #0
    1a2e:	7003      	strb	r3, [r0, #0]
    1a30:	6043      	str	r3, [r0, #4]
    1a32:	7203      	strb	r3, [r0, #8]
    1a34:	7243      	strb	r3, [r0, #9]
    1a36:	7283      	strb	r3, [r0, #10]
    1a38:	60c3      	str	r3, [r0, #12]
    1a3a:	6103      	str	r3, [r0, #16]
    1a3c:	6143      	str	r3, [r0, #20]
    1a3e:	6183      	str	r3, [r0, #24]
        gpio_init_out(&gpio, pin);
    1a40:	2113      	movs	r1, #19
    1a42:	4b02      	ldr	r3, [pc, #8]	; (1a4c <_GLOBAL__sub_I_count_set_period+0x24>)
    1a44:	4798      	blx	r3
    1a46:	bd08      	pop	{r3, pc}
    1a48:	20003d34 	.word	0x20003d34
    1a4c:	00004fad 	.word	0x00004fad

00001a50 <_Z19ISRNetworkReceptionh>:
volatile circularBuffer buffer;
extern portTickType saveTimeRCrash;
/************************************************************************/
/* GLOBAL FUNCTION                                                      */
/************************************************************************/
void ISRNetworkReception(uint8_t e){
    1a50:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a52:	464f      	mov	r7, r9
    1a54:	4646      	mov	r6, r8
    1a56:	b4c0      	push	{r6, r7}
    1a58:	b085      	sub	sp, #20
    1a5a:	1c04      	adds	r4, r0, #0
	 uint16_t rx;
	saveTimeRCrash=xTaskGetTickCount();
    1a5c:	4b35      	ldr	r3, [pc, #212]	; (1b34 <_Z19ISRNetworkReceptionh+0xe4>)
    1a5e:	4798      	blx	r3
    1a60:	4b35      	ldr	r3, [pc, #212]	; (1b38 <_Z19ISRNetworkReceptionh+0xe8>)
    1a62:	6018      	str	r0, [r3, #0]
	if(((e & TRX_IRQ_TRX_END) == TRX_IRQ_TRX_END)||((e & TRX_IRQ_RX_START) == TRX_IRQ_RX_START))
    1a64:	230c      	movs	r3, #12
    1a66:	4223      	tst	r3, r4
    1a68:	d05f      	beq.n	1b2a <_Z19ISRNetworkReceptionh+0xda>
	{
		
		#ifdef RADIO
		uint8_t available=radio.available();
    1a6a:	4834      	ldr	r0, [pc, #208]	; (1b3c <_Z19ISRNetworkReceptionh+0xec>)
    1a6c:	4b34      	ldr	r3, [pc, #208]	; (1b40 <_Z19ISRNetworkReceptionh+0xf0>)
    1a6e:	4798      	blx	r3
    1a70:	b2c3      	uxtb	r3, r0
    1a72:	4698      	mov	r8, r3
		 for(uint8_t i=0;i<available;i++){
    1a74:	2b00      	cmp	r3, #0
    1a76:	d055      	beq.n	1b24 <_Z19ISRNetworkReceptionh+0xd4>
    1a78:	2400      	movs	r4, #0

			//Disable_global_interrupt();
			//pc.printf("mimi\r\n");
			//synchro semaphore with a task

			rx=radio.read();
    1a7a:	4b32      	ldr	r3, [pc, #200]	; (1b44 <_Z19ISRNetworkReceptionh+0xf4>)
    1a7c:	4699      	mov	r9, r3
			buffer.buffer[buffer.indice++]=rx;
    1a7e:	4e32      	ldr	r6, [pc, #200]	; (1b48 <_Z19ISRNetworkReceptionh+0xf8>)

			//Disable_global_interrupt();
			//pc.printf("mimi\r\n");
			//synchro semaphore with a task

			rx=radio.read();
    1a80:	482e      	ldr	r0, [pc, #184]	; (1b3c <_Z19ISRNetworkReceptionh+0xec>)
    1a82:	47c8      	blx	r9
    1a84:	b281      	uxth	r1, r0
			buffer.buffer[buffer.indice++]=rx;
    1a86:	2232      	movs	r2, #50	; 0x32
    1a88:	5cb3      	ldrb	r3, [r6, r2]
    1a8a:	b2db      	uxtb	r3, r3
    1a8c:	1c5f      	adds	r7, r3, #1
    1a8e:	b2ff      	uxtb	r7, r7
    1a90:	54b7      	strb	r7, [r6, r2]
    1a92:	b2c0      	uxtb	r0, r0
    1a94:	54f0      	strb	r0, [r6, r3]
			//pc.printf("rx:%d\r\n",rx);
			if(buffer.indice>=CIRCULAR_BUFFER_LENGTH){
    1a96:	5cb3      	ldrb	r3, [r6, r2]
    1a98:	b2db      	uxtb	r3, r3
    1a9a:	2b31      	cmp	r3, #49	; 0x31
    1a9c:	d903      	bls.n	1aa6 <_Z19ISRNetworkReceptionh+0x56>
				buffer.indice=0;
    1a9e:	2000      	movs	r0, #0
    1aa0:	2332      	movs	r3, #50	; 0x32
    1aa2:	4a29      	ldr	r2, [pc, #164]	; (1b48 <_Z19ISRNetworkReceptionh+0xf8>)
    1aa4:	54d0      	strb	r0, [r2, r3]
			}

			if(rx==HEADER){
    1aa6:	2955      	cmp	r1, #85	; 0x55
    1aa8:	d120      	bne.n	1aec <_Z19ISRNetworkReceptionh+0x9c>
				if(timeProt.synchroTime!=NULL){
    1aaa:	2394      	movs	r3, #148	; 0x94
    1aac:	4a27      	ldr	r2, [pc, #156]	; (1b4c <_Z19ISRNetworkReceptionh+0xfc>)
    1aae:	58d0      	ldr	r0, [r2, r3]
    1ab0:	2800      	cmp	r0, #0
    1ab2:	d004      	beq.n	1abe <_Z19ISRNetworkReceptionh+0x6e>
					xSemaphoreGiveFromISR(timeProt.synchroTime,NULL);
    1ab4:	2100      	movs	r1, #0
    1ab6:	2200      	movs	r2, #0
    1ab8:	2300      	movs	r3, #0
    1aba:	4f25      	ldr	r7, [pc, #148]	; (1b50 <_Z19ISRNetworkReceptionh+0x100>)
    1abc:	47b8      	blx	r7
				}
				timeProt.waitIdentifier=true;
    1abe:	4d23      	ldr	r5, [pc, #140]	; (1b4c <_Z19ISRNetworkReceptionh+0xfc>)
    1ac0:	2201      	movs	r2, #1
    1ac2:	2384      	movs	r3, #132	; 0x84
    1ac4:	54ea      	strb	r2, [r5, r3]

				#ifdef MASTERMODE
					Clock save;
					save.second=timeProt.saveTime[0].second;
    1ac6:	682b      	ldr	r3, [r5, #0]
    1ac8:	af01      	add	r7, sp, #4
    1aca:	9301      	str	r3, [sp, #4]
					save.halfmillis=timeProt.saveTime[0].halfmillis;
    1acc:	686b      	ldr	r3, [r5, #4]
    1ace:	9302      	str	r3, [sp, #8]
					save.sign=timeProt.saveTime[0].sign;
    1ad0:	7a2b      	ldrb	r3, [r5, #8]
    1ad2:	b2db      	uxtb	r3, r3
    1ad4:	723b      	strb	r3, [r7, #8]
					readClock(&save);
    1ad6:	1c38      	adds	r0, r7, #0
    1ad8:	4b1e      	ldr	r3, [pc, #120]	; (1b54 <_Z19ISRNetworkReceptionh+0x104>)
    1ada:	4798      	blx	r3
					timeProt.saveTime[0].second=save.second;
    1adc:	9b01      	ldr	r3, [sp, #4]
    1ade:	602b      	str	r3, [r5, #0]
					timeProt.saveTime[0].halfmillis=save.halfmillis;
    1ae0:	687b      	ldr	r3, [r7, #4]
    1ae2:	606b      	str	r3, [r5, #4]
					timeProt.saveTime[0].sign=save.sign;
    1ae4:	7a3b      	ldrb	r3, [r7, #8]
    1ae6:	b2db      	uxtb	r3, r3
    1ae8:	722b      	strb	r3, [r5, #8]
    1aea:	e017      	b.n	1b1c <_Z19ISRNetworkReceptionh+0xcc>
				continue;
				//return;
			}
			
			#ifdef MASTERMODE
			if(timeProt.waitIdentifier==true){
    1aec:	2384      	movs	r3, #132	; 0x84
    1aee:	4a17      	ldr	r2, [pc, #92]	; (1b4c <_Z19ISRNetworkReceptionh+0xfc>)
    1af0:	5cd3      	ldrb	r3, [r2, r3]
    1af2:	2b00      	cmp	r3, #0
    1af4:	d012      	beq.n	1b1c <_Z19ISRNetworkReceptionh+0xcc>
				timeProt.waitIdentifier=false;
    1af6:	1c13      	adds	r3, r2, #0
    1af8:	2000      	movs	r0, #0
    1afa:	2284      	movs	r2, #132	; 0x84
    1afc:	5498      	strb	r0, [r3, r2]
				timeProt.waitType=true;
    1afe:	3001      	adds	r0, #1
    1b00:	3201      	adds	r2, #1
    1b02:	5498      	strb	r0, [r3, r2]
				if(rx<MAX_SLAVE_CLOCK){
    1b04:	2909      	cmp	r1, #9
    1b06:	d809      	bhi.n	1b1c <_Z19ISRNetworkReceptionh+0xcc>
					timeProt.saveTime[rx].second=timeProt.saveTime[0].second;
    1b08:	681f      	ldr	r7, [r3, #0]
    1b0a:	0048      	lsls	r0, r1, #1
    1b0c:	1842      	adds	r2, r0, r1
    1b0e:	0092      	lsls	r2, r2, #2
    1b10:	50d7      	str	r7, [r2, r3]
					timeProt.saveTime[rx].halfmillis=timeProt.saveTime[0].halfmillis;
    1b12:	685a      	ldr	r2, [r3, #4]
    1b14:	1841      	adds	r1, r0, r1
    1b16:	0089      	lsls	r1, r1, #2
    1b18:	1859      	adds	r1, r3, r1
    1b1a:	604a      	str	r2, [r1, #4]
	if(((e & TRX_IRQ_TRX_END) == TRX_IRQ_TRX_END)||((e & TRX_IRQ_RX_START) == TRX_IRQ_RX_START))
	{
		
		#ifdef RADIO
		uint8_t available=radio.available();
		 for(uint8_t i=0;i<available;i++){
    1b1c:	3401      	adds	r4, #1
    1b1e:	b2e4      	uxtb	r4, r4
    1b20:	45a0      	cmp	r8, r4
    1b22:	d1ad      	bne.n	1a80 <_Z19ISRNetworkReceptionh+0x30>
		
			//Enable_global_interrupt();
		 }
		
		 #endif
		  radio.flush();
    1b24:	4805      	ldr	r0, [pc, #20]	; (1b3c <_Z19ISRNetworkReceptionh+0xec>)
    1b26:	4b0c      	ldr	r3, [pc, #48]	; (1b58 <_Z19ISRNetworkReceptionh+0x108>)
    1b28:	4798      	blx	r3
	 }
	 
	 
}
    1b2a:	b005      	add	sp, #20
    1b2c:	bc0c      	pop	{r2, r3}
    1b2e:	4690      	mov	r8, r2
    1b30:	4699      	mov	r9, r3
    1b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b34:	00000c49 	.word	0x00000c49
    1b38:	20000194 	.word	0x20000194
    1b3c:	20003d88 	.word	0x20003d88
    1b40:	0000209d 	.word	0x0000209d
    1b44:	00002069 	.word	0x00002069
    1b48:	20003d54 	.word	0x20003d54
    1b4c:	200042cc 	.word	0x200042cc
    1b50:	00000719 	.word	0x00000719
    1b54:	00001681 	.word	0x00001681
    1b58:	00002059 	.word	0x00002059

00001b5c <_Z16networkAvailablev>:
}

bool networkAvailable(void){


	if(buffer.currentIndice!=buffer.indice){
    1b5c:	4a04      	ldr	r2, [pc, #16]	; (1b70 <_Z16networkAvailablev+0x14>)
    1b5e:	2333      	movs	r3, #51	; 0x33
    1b60:	5cd3      	ldrb	r3, [r2, r3]
    1b62:	2132      	movs	r1, #50	; 0x32
    1b64:	5c50      	ldrb	r0, [r2, r1]
    1b66:	1a18      	subs	r0, r3, r0
    1b68:	1e43      	subs	r3, r0, #1
    1b6a:	4198      	sbcs	r0, r3
    1b6c:	b2c0      	uxtb	r0, r0
	else{
			
		return false;
	}

}
    1b6e:	4770      	bx	lr
    1b70:	20003d54 	.word	0x20003d54

00001b74 <_Z12networkFlushv>:
void networkFlush(void){
	//usart_disable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);//momo
	buffer.currentIndice=buffer.indice;
    1b74:	4a03      	ldr	r2, [pc, #12]	; (1b84 <_Z12networkFlushv+0x10>)
    1b76:	2332      	movs	r3, #50	; 0x32
    1b78:	5cd3      	ldrb	r3, [r2, r3]
    1b7a:	b2db      	uxtb	r3, r3
    1b7c:	2133      	movs	r1, #51	; 0x33
    1b7e:	5453      	strb	r3, [r2, r1]
	//usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED); //momo
}
    1b80:	4770      	bx	lr
    1b82:	46c0      	nop			; (mov r8, r8)
    1b84:	20003d54 	.word	0x20003d54

00001b88 <_Z9networkTxPKhh>:
void networkTx(const uint8_t send[],const uint8_t length){
    1b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1b8a:	1c07      	adds	r7, r0, #0
    1b8c:	1c0e      	adds	r6, r1, #0
	#ifdef RADIO
		uint8_t i;
		radio.beginTransmission();
    1b8e:	480b      	ldr	r0, [pc, #44]	; (1bbc <_Z9networkTxPKhh+0x34>)
    1b90:	4b0b      	ldr	r3, [pc, #44]	; (1bc0 <_Z9networkTxPKhh+0x38>)
    1b92:	4798      	blx	r3
		for(i=0;i<length;i++){
    1b94:	2e00      	cmp	r6, #0
    1b96:	d00c      	beq.n	1bb2 <_Z9networkTxPKhh+0x2a>
    1b98:	1c3c      	adds	r4, r7, #0
    1b9a:	1e75      	subs	r5, r6, #1
    1b9c:	b2ed      	uxtb	r5, r5
    1b9e:	3501      	adds	r5, #1
    1ba0:	197d      	adds	r5, r7, r5
			
			radio.write(send[i]);
    1ba2:	4e06      	ldr	r6, [pc, #24]	; (1bbc <_Z9networkTxPKhh+0x34>)
    1ba4:	4f07      	ldr	r7, [pc, #28]	; (1bc4 <_Z9networkTxPKhh+0x3c>)
    1ba6:	7821      	ldrb	r1, [r4, #0]
    1ba8:	1c30      	adds	r0, r6, #0
    1baa:	47b8      	blx	r7
    1bac:	3401      	adds	r4, #1
}
void networkTx(const uint8_t send[],const uint8_t length){
	#ifdef RADIO
		uint8_t i;
		radio.beginTransmission();
		for(i=0;i<length;i++){
    1bae:	42ac      	cmp	r4, r5
    1bb0:	d1f9      	bne.n	1ba6 <_Z9networkTxPKhh+0x1e>
			
			radio.write(send[i]);
			
		}
		radio.endTransmission();
    1bb2:	4802      	ldr	r0, [pc, #8]	; (1bbc <_Z9networkTxPKhh+0x34>)
    1bb4:	4b04      	ldr	r3, [pc, #16]	; (1bc8 <_Z9networkTxPKhh+0x40>)
    1bb6:	4798      	blx	r3
	#endif
}
    1bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1bba:	46c0      	nop			; (mov r8, r8)
    1bbc:	20003d88 	.word	0x20003d88
    1bc0:	000020bd 	.word	0x000020bd
    1bc4:	000021e1 	.word	0x000021e1
    1bc8:	00002115 	.word	0x00002115

00001bcc <_Z11networkReadv>:
uint8_t networkRead(void){
    1bcc:	b510      	push	{r4, lr}
	uint8_t i =networkAvailable();
    1bce:	4c0e      	ldr	r4, [pc, #56]	; (1c08 <_Z11networkReadv+0x3c>)
    1bd0:	47a0      	blx	r4
	if(networkAvailable()){
    1bd2:	47a0      	blx	r4
			buffer.currentIndice=0;
		}
		return recu; 
	}
	else{
		return 0;
    1bd4:	2300      	movs	r3, #0
		radio.endTransmission();
	#endif
}
uint8_t networkRead(void){
	uint8_t i =networkAvailable();
	if(networkAvailable()){
    1bd6:	2800      	cmp	r0, #0
    1bd8:	d013      	beq.n	1c02 <_Z11networkReadv+0x36>
		uint8_t recu;
		recu=buffer.buffer[buffer.currentIndice];
    1bda:	4b0c      	ldr	r3, [pc, #48]	; (1c0c <_Z11networkReadv+0x40>)
    1bdc:	2133      	movs	r1, #51	; 0x33
    1bde:	5c5a      	ldrb	r2, [r3, r1]
    1be0:	b2d2      	uxtb	r2, r2
    1be2:	5c98      	ldrb	r0, [r3, r2]
    1be4:	b2c0      	uxtb	r0, r0
		buffer.currentIndice++;
    1be6:	5c5a      	ldrb	r2, [r3, r1]
    1be8:	3201      	adds	r2, #1
    1bea:	b2d2      	uxtb	r2, r2
    1bec:	545a      	strb	r2, [r3, r1]
		if(buffer.currentIndice>=CIRCULAR_BUFFER_LENGTH){
    1bee:	5c5a      	ldrb	r2, [r3, r1]
    1bf0:	b2d2      	uxtb	r2, r2
			buffer.currentIndice=0;
		}
		return recu; 
    1bf2:	1c03      	adds	r3, r0, #0
	uint8_t i =networkAvailable();
	if(networkAvailable()){
		uint8_t recu;
		recu=buffer.buffer[buffer.currentIndice];
		buffer.currentIndice++;
		if(buffer.currentIndice>=CIRCULAR_BUFFER_LENGTH){
    1bf4:	2a31      	cmp	r2, #49	; 0x31
    1bf6:	d904      	bls.n	1c02 <_Z11networkReadv+0x36>
			buffer.currentIndice=0;
    1bf8:	2100      	movs	r1, #0
    1bfa:	2333      	movs	r3, #51	; 0x33
    1bfc:	4a03      	ldr	r2, [pc, #12]	; (1c0c <_Z11networkReadv+0x40>)
    1bfe:	54d1      	strb	r1, [r2, r3]
		}
		return recu; 
    1c00:	1c03      	adds	r3, r0, #0
	else{
		return 0;
	}

	
}
    1c02:	1c18      	adds	r0, r3, #0
    1c04:	bd10      	pop	{r4, pc}
    1c06:	46c0      	nop			; (mov r8, r8)
    1c08:	00001b5d 	.word	0x00001b5d
    1c0c:	20003d54 	.word	0x20003d54

00001c10 <_Z20configurationNetworkv>:

void configurationNetwork(){
    1c10:	b510      	push	{r4, lr}
	hmi.printf("network config\r\n");
    1c12:	480a      	ldr	r0, [pc, #40]	; (1c3c <_Z20configurationNetworkv+0x2c>)
    1c14:	490a      	ldr	r1, [pc, #40]	; (1c40 <_Z20configurationNetworkv+0x30>)
    1c16:	4b0b      	ldr	r3, [pc, #44]	; (1c44 <_Z20configurationNetworkv+0x34>)
    1c18:	4798      	blx	r3
	buffer.currentIndice=0;
    1c1a:	4b0b      	ldr	r3, [pc, #44]	; (1c48 <_Z20configurationNetworkv+0x38>)
    1c1c:	2200      	movs	r2, #0
    1c1e:	2133      	movs	r1, #51	; 0x33
    1c20:	545a      	strb	r2, [r3, r1]
	buffer.indice=0;
    1c22:	3901      	subs	r1, #1
    1c24:	545a      	strb	r2, [r3, r1]
	#ifdef RADIO
	radio.attachIrq(ISRNetworkReception);
    1c26:	4c09      	ldr	r4, [pc, #36]	; (1c4c <_Z20configurationNetworkv+0x3c>)
    1c28:	1c20      	adds	r0, r4, #0
    1c2a:	4909      	ldr	r1, [pc, #36]	; (1c50 <_Z20configurationNetworkv+0x40>)
    1c2c:	4b09      	ldr	r3, [pc, #36]	; (1c54 <_Z20configurationNetworkv+0x44>)
    1c2e:	4798      	blx	r3
    radio.begin(RADIO_CHANNEL);
    1c30:	1c20      	adds	r0, r4, #0
    1c32:	210c      	movs	r1, #12
    1c34:	4b08      	ldr	r3, [pc, #32]	; (1c58 <_Z20configurationNetworkv+0x48>)
    1c36:	4798      	blx	r3
	#endif
	

}
    1c38:	bd10      	pop	{r4, pc}
    1c3a:	46c0      	nop			; (mov r8, r8)
    1c3c:	20004594 	.word	0x20004594
    1c40:	0000eb54 	.word	0x0000eb54
    1c44:	00004f61 	.word	0x00004f61
    1c48:	20003d54 	.word	0x20003d54
    1c4c:	20003d88 	.word	0x20003d88
    1c50:	00001a51 	.word	0x00001a51
    1c54:	00002051 	.word	0x00002051
    1c58:	00002041 	.word	0x00002041

00001c5c <_GLOBAL__sub_I_radio>:
    1c5c:	b530      	push	{r4, r5, lr}
    1c5e:	b085      	sub	sp, #20
#include "network.h"
/************************************************************************/
/* GLOBAL                                                               */
/************************************************************************/
#ifdef RADIO
cMxRadio radio(PB30,PC19,PC18,PB31,PB15,PA20,PB00);
    1c60:	4c0a      	ldr	r4, [pc, #40]	; (1c8c <_GLOBAL__sub_I_radio+0x30>)
    1c62:	233f      	movs	r3, #63	; 0x3f
    1c64:	9300      	str	r3, [sp, #0]
    1c66:	3b10      	subs	r3, #16
    1c68:	9301      	str	r3, [sp, #4]
    1c6a:	3b1b      	subs	r3, #27
    1c6c:	9302      	str	r3, [sp, #8]
    1c6e:	330c      	adds	r3, #12
    1c70:	9303      	str	r3, [sp, #12]
    1c72:	1c20      	adds	r0, r4, #0
    1c74:	213e      	movs	r1, #62	; 0x3e
    1c76:	2253      	movs	r2, #83	; 0x53
    1c78:	3332      	adds	r3, #50	; 0x32
    1c7a:	4d05      	ldr	r5, [pc, #20]	; (1c90 <_GLOBAL__sub_I_radio+0x34>)
    1c7c:	47a8      	blx	r5
    1c7e:	1c20      	adds	r0, r4, #0
    1c80:	4904      	ldr	r1, [pc, #16]	; (1c94 <_GLOBAL__sub_I_radio+0x38>)
    1c82:	4a05      	ldr	r2, [pc, #20]	; (1c98 <_GLOBAL__sub_I_radio+0x3c>)
    1c84:	4b05      	ldr	r3, [pc, #20]	; (1c9c <_GLOBAL__sub_I_radio+0x40>)
    1c86:	4798      	blx	r3
	radio.attachIrq(ISRNetworkReception);
    radio.begin(RADIO_CHANNEL);
	#endif
	

}
    1c88:	b005      	add	sp, #20
    1c8a:	bd30      	pop	{r4, r5, pc}
    1c8c:	20003d88 	.word	0x20003d88
    1c90:	00001e7d 	.word	0x00001e7d
    1c94:	00001e79 	.word	0x00001e79
    1c98:	200000b0 	.word	0x200000b0
    1c9c:	0000666d 	.word	0x0000666d

00001ca0 <main>:
#include <internalClock.h>
#include <ppsGPS.h>
#include <network.h>
#include <wdt_config.h>

int main (void ){
    1ca0:	b570      	push	{r4, r5, r6, lr}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1ca2:	b672      	cpsid	i
    1ca4:	f3bf 8f5f 	dmb	sy
 * Disabled global interrupts in the device, preventing any enabled interrupt
 * handlers from executing.
 */
static inline void system_interrupt_disable_global(void)
{
    cpu_irq_disable();
    1ca8:	4c17      	ldr	r4, [pc, #92]	; (1d08 <main+0x68>)
    1caa:	2300      	movs	r3, #0
    1cac:	7023      	strb	r3, [r4, #0]
	 system_interrupt_disable_global();
    //configure HMI
    configureHMI();
    1cae:	4b17      	ldr	r3, [pc, #92]	; (1d0c <main+0x6c>)
    1cb0:	4798      	blx	r3
    //RTC configure
   configureInternalClock();
    1cb2:	4b17      	ldr	r3, [pc, #92]	; (1d10 <main+0x70>)
    1cb4:	4798      	blx	r3
    //configure external intrerrupt for pps
    configurationPPS();
    1cb6:	4b17      	ldr	r3, [pc, #92]	; (1d14 <main+0x74>)
    1cb8:	4798      	blx	r3
    //configure the network of the time SYNCHRONISATION
	
    configurationNetwork();
    1cba:	4b17      	ldr	r3, [pc, #92]	; (1d18 <main+0x78>)
    1cbc:	4798      	blx	r3
	wdt_config();
    1cbe:	4b17      	ldr	r3, [pc, #92]	; (1d1c <main+0x7c>)
    1cc0:	4798      	blx	r3
    // Initialize the demo..
    kernelConfig();
    1cc2:	4b17      	ldr	r3, [pc, #92]	; (1d20 <main+0x80>)
    1cc4:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
    cpu_irq_enable();
    1cc6:	2301      	movs	r3, #1
    1cc8:	7023      	strb	r3, [r4, #0]
    1cca:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    1cce:	b662      	cpsie	i
    //demask global interrupt
    system_interrupt_enable_global();
    hmi.printf("\r\n\r\n**********************************************************************\r\n");
    1cd0:	4d14      	ldr	r5, [pc, #80]	; (1d24 <main+0x84>)
    1cd2:	1c28      	adds	r0, r5, #0
    1cd4:	4914      	ldr	r1, [pc, #80]	; (1d28 <main+0x88>)
    1cd6:	4c15      	ldr	r4, [pc, #84]	; (1d2c <main+0x8c>)
    1cd8:	47a0      	blx	r4
    hmi.printf("tick time: %lu ms\r\n",portTICK_RATE_MS);   
    1cda:	1c28      	adds	r0, r5, #0
    1cdc:	4914      	ldr	r1, [pc, #80]	; (1d30 <main+0x90>)
    1cde:	2201      	movs	r2, #1
    1ce0:	47a0      	blx	r4
    #ifdef MASTERMODE
        hmi.printf("Master clock\r\n");
    1ce2:	1c28      	adds	r0, r5, #0
    1ce4:	4913      	ldr	r1, [pc, #76]	; (1d34 <main+0x94>)
    1ce6:	47a0      	blx	r4
    #else
        hmi.printf("Slave Clock \r\n");
    #endif
    hmi.printf("end config application begin\r\n");
    1ce8:	1c28      	adds	r0, r5, #0
    1cea:	4913      	ldr	r1, [pc, #76]	; (1d38 <main+0x98>)
    1cec:	47a0      	blx	r4
    hmi.printf("\r\n**********************************************************************\r\n\r\n");
    1cee:	1c28      	adds	r0, r5, #0
    1cf0:	4912      	ldr	r1, [pc, #72]	; (1d3c <main+0x9c>)
    1cf2:	47a0      	blx	r4
    //start the scheduler
    vTaskStartScheduler();
    1cf4:	4b12      	ldr	r3, [pc, #72]	; (1d40 <main+0xa0>)
    1cf6:	4798      	blx	r3
    while(1){//trap
		hmi.printf("trap!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n");
    1cf8:	4e0a      	ldr	r6, [pc, #40]	; (1d24 <main+0x84>)
    1cfa:	4d12      	ldr	r5, [pc, #72]	; (1d44 <main+0xa4>)
    1cfc:	4c0b      	ldr	r4, [pc, #44]	; (1d2c <main+0x8c>)
    1cfe:	1c30      	adds	r0, r6, #0
    1d00:	1c29      	adds	r1, r5, #0
    1d02:	47a0      	blx	r4
#include <internalClock.h>
#include <ppsGPS.h>
#include <network.h>
#include <wdt_config.h>

int main (void ){
    1d04:	e7fb      	b.n	1cfe <main+0x5e>
    1d06:	46c0      	nop			; (mov r8, r8)
    1d08:	200000d0 	.word	0x200000d0
    1d0c:	00003b91 	.word	0x00003b91
    1d10:	00001979 	.word	0x00001979
    1d14:	00002d51 	.word	0x00002d51
    1d18:	00001c11 	.word	0x00001c11
    1d1c:	000003c1 	.word	0x000003c1
    1d20:	00002c5d 	.word	0x00002c5d
    1d24:	20004594 	.word	0x20004594
    1d28:	0000eb68 	.word	0x0000eb68
    1d2c:	00004f61 	.word	0x00004f61
    1d30:	0000ebb8 	.word	0x0000ebb8
    1d34:	0000ebcc 	.word	0x0000ebcc
    1d38:	0000ebdc 	.word	0x0000ebdc
    1d3c:	0000ebfc 	.word	0x0000ebfc
    1d40:	00000be1 	.word	0x00000be1
    1d44:	0000ec4c 	.word	0x0000ec4c

00001d48 <_ZN8cMxRadio14onReceiveFrameEhPhhah>:
 * @param frm array containing frame data
 * @param lqi link quality indicator
 * @param crc_fail boolean indicating whether the received frame failed FCS verification, not used
 */
uint8_t* cMxRadio::onReceiveFrame(uint8_t len, uint8_t* frm, uint8_t lqi, int8_t ed,uint8_t crc_fail)
{
    1d48:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d4a:	4657      	mov	r7, sl
    1d4c:	464e      	mov	r6, r9
    1d4e:	4645      	mov	r5, r8
    1d50:	b4e0      	push	{r5, r6, r7}
    1d52:	b082      	sub	sp, #8
    1d54:	ac0a      	add	r4, sp, #40	; 0x28
    1d56:	2500      	movs	r5, #0
    1d58:	5765      	ldrsb	r5, [r4, r5]
    1d5a:	ac0b      	add	r4, sp, #44	; 0x2c
    1d5c:	7824      	ldrb	r4, [r4, #0]
	if (crc_fail)
    1d5e:	2c00      	cmp	r4, #0
    1d60:	d002      	beq.n	1d68 <_ZN8cMxRadio14onReceiveFrameEhPhhah+0x20>
		return rxRingBuffer;
    1d62:	307c      	adds	r0, #124	; 0x7c
    1d64:	30ff      	adds	r0, #255	; 0xff
    1d66:	e06b      	b.n	1e40 <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xf8>
	lastLqi = lqi;
    1d68:	4c38      	ldr	r4, [pc, #224]	; (1e4c <_ZN8cMxRadio14onReceiveFrameEhPhhah+0x104>)
    1d6a:	5503      	strb	r3, [r0, r4]
	//lastRssi=ed;
	if (hasAttachedRxEvent == 0)
    1d6c:	4c38      	ldr	r4, [pc, #224]	; (1e50 <_ZN8cMxRadio14onReceiveFrameEhPhhah+0x108>)
    1d6e:	5d04      	ldrb	r4, [r0, r4]
    1d70:	2c00      	cmp	r4, #0
    1d72:	d15b      	bne.n	1e2c <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xe4>
	{
		// no event handler, so write it into the FIFO

		if (len >= HeadSize-1)
    1d74:	2907      	cmp	r1, #7
    1d76:	d817      	bhi.n	1da8 <_ZN8cMxRadio14onReceiveFrameEhPhhah+0x60>
		else
		{
			// frame header does not exist
			// copy everything

			for (uint8_t i = 0; i < len; i++)
    1d78:	2900      	cmp	r1, #0
    1d7a:	d054      	beq.n	1e26 <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xde>
			{
				uint16_t j = ((uint16_t)((uint16_t)rxRingBufferHead + 1)) % ZR_FIFO_SIZE;
    1d7c:	23fc      	movs	r3, #252	; 0xfc
    1d7e:	33ff      	adds	r3, #255	; 0xff
    1d80:	5cc3      	ldrb	r3, [r0, r3]
    1d82:	1c5c      	adds	r4, r3, #1
    1d84:	257f      	movs	r5, #127	; 0x7f
    1d86:	402c      	ands	r4, r5
				if (j != rxRingBufferTail)
    1d88:	357e      	adds	r5, #126	; 0x7e
    1d8a:	35ff      	adds	r5, #255	; 0xff
    1d8c:	5d45      	ldrb	r5, [r0, r5]
    1d8e:	42a5      	cmp	r5, r4
    1d90:	d049      	beq.n	1e26 <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xde>
    1d92:	1c17      	adds	r7, r2, #0
    1d94:	3901      	subs	r1, #1
    1d96:	b2c9      	uxtb	r1, r1
    1d98:	1852      	adds	r2, r2, r1
				{
					// push into FIFO
					rxRingBuffer[rxRingBufferHead] = frm[i];
					rxRingBufferHead = j;
    1d9a:	21fc      	movs	r1, #252	; 0xfc
    1d9c:	31ff      	adds	r1, #255	; 0xff
			// frame header does not exist
			// copy everything

			for (uint8_t i = 0; i < len; i++)
			{
				uint16_t j = ((uint16_t)((uint16_t)rxRingBufferHead + 1)) % ZR_FIFO_SIZE;
    1d9e:	257f      	movs	r5, #127	; 0x7f
    1da0:	46ac      	mov	ip, r5
				if (j != rxRingBufferTail)
    1da2:	26fe      	movs	r6, #254	; 0xfe
    1da4:	0076      	lsls	r6, r6, #1
    1da6:	e035      	b.n	1e14 <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xcc>
		if (len >= HeadSize-1)
		{
			// frame header exists
			// copy only payload

			for (uint8_t i = HeadSize; i < len - 2; i++)
    1da8:	1e8e      	subs	r6, r1, #2
    1daa:	2e09      	cmp	r6, #9
    1dac:	dd3b      	ble.n	1e26 <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xde>
			{
				uint16_t j = ((uint16_t)((uint16_t)rxRingBufferHead + 1)) % ZR_FIFO_SIZE;
    1dae:	23fc      	movs	r3, #252	; 0xfc
    1db0:	33ff      	adds	r3, #255	; 0xff
    1db2:	5cc4      	ldrb	r4, [r0, r3]
    1db4:	1c63      	adds	r3, r4, #1
    1db6:	217f      	movs	r1, #127	; 0x7f
    1db8:	400b      	ands	r3, r1
				if (j != rxRingBufferTail)
    1dba:	317e      	adds	r1, #126	; 0x7e
    1dbc:	31ff      	adds	r1, #255	; 0xff
    1dbe:	5c41      	ldrb	r1, [r0, r1]
    1dc0:	2509      	movs	r5, #9
    1dc2:	4299      	cmp	r1, r3
    1dc4:	d10a      	bne.n	1ddc <_ZN8cMxRadio14onReceiveFrameEhPhhah+0x94>
    1dc6:	e02e      	b.n	1e26 <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xde>
			// frame header exists
			// copy only payload

			for (uint8_t i = HeadSize; i < len - 2; i++)
			{
				uint16_t j = ((uint16_t)((uint16_t)rxRingBufferHead + 1)) % ZR_FIFO_SIZE;
    1dc8:	4647      	mov	r7, r8
    1dca:	403b      	ands	r3, r7
    1dcc:	3301      	adds	r3, #1
    1dce:	4667      	mov	r7, ip
    1dd0:	403b      	ands	r3, r7
				if (j != rxRingBufferTail)
    1dd2:	4657      	mov	r7, sl
    1dd4:	5dc7      	ldrb	r7, [r0, r7]
    1dd6:	429f      	cmp	r7, r3
    1dd8:	d109      	bne.n	1dee <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xa6>
    1dda:	e024      	b.n	1e26 <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xde>
				{
					// push into FIFO
					rxRingBuffer[rxRingBufferHead] = frm[i];
					rxRingBufferHead = j;
    1ddc:	21fc      	movs	r1, #252	; 0xfc
    1dde:	31ff      	adds	r1, #255	; 0xff
			// frame header exists
			// copy only payload

			for (uint8_t i = HeadSize; i < len - 2; i++)
			{
				uint16_t j = ((uint16_t)((uint16_t)rxRingBufferHead + 1)) % ZR_FIFO_SIZE;
    1de0:	27ff      	movs	r7, #255	; 0xff
    1de2:	46b8      	mov	r8, r7
    1de4:	3f80      	subs	r7, #128	; 0x80
    1de6:	46bc      	mov	ip, r7
				if (j != rxRingBufferTail)
    1de8:	377e      	adds	r7, #126	; 0x7e
    1dea:	37ff      	adds	r7, #255	; 0xff
    1dec:	46ba      	mov	sl, r7
				{
					// push into FIFO
					rxRingBuffer[rxRingBufferHead] = frm[i];
    1dee:	5d57      	ldrb	r7, [r2, r5]
    1df0:	1904      	adds	r4, r0, r4
    1df2:	3479      	adds	r4, #121	; 0x79
    1df4:	34ff      	adds	r4, #255	; 0xff
    1df6:	70e7      	strb	r7, [r4, #3]
					rxRingBufferHead = j;
    1df8:	b2dc      	uxtb	r4, r3
    1dfa:	5444      	strb	r4, [r0, r1]
		if (len >= HeadSize-1)
		{
			// frame header exists
			// copy only payload

			for (uint8_t i = HeadSize; i < len - 2; i++)
    1dfc:	3501      	adds	r5, #1
    1dfe:	b2ed      	uxtb	r5, r5
    1e00:	42b5      	cmp	r5, r6
    1e02:	dbe1      	blt.n	1dc8 <_ZN8cMxRadio14onReceiveFrameEhPhhah+0x80>
    1e04:	e00f      	b.n	1e26 <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xde>
			// frame header does not exist
			// copy everything

			for (uint8_t i = 0; i < len; i++)
			{
				uint16_t j = ((uint16_t)((uint16_t)rxRingBufferHead + 1)) % ZR_FIFO_SIZE;
    1e06:	3401      	adds	r4, #1
    1e08:	4665      	mov	r5, ip
    1e0a:	402c      	ands	r4, r5
    1e0c:	3701      	adds	r7, #1
				if (j != rxRingBufferTail)
    1e0e:	5d85      	ldrb	r5, [r0, r6]
    1e10:	42a5      	cmp	r5, r4
    1e12:	d008      	beq.n	1e26 <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xde>
				{
					// push into FIFO
					rxRingBuffer[rxRingBufferHead] = frm[i];
    1e14:	783d      	ldrb	r5, [r7, #0]
    1e16:	18c3      	adds	r3, r0, r3
    1e18:	3379      	adds	r3, #121	; 0x79
    1e1a:	33ff      	adds	r3, #255	; 0xff
    1e1c:	70dd      	strb	r5, [r3, #3]
					rxRingBufferHead = j;
    1e1e:	b2e3      	uxtb	r3, r4
    1e20:	5443      	strb	r3, [r0, r1]
		else
		{
			// frame header does not exist
			// copy everything

			for (uint8_t i = 0; i < len; i++)
    1e22:	4297      	cmp	r7, r2
    1e24:	d1ef      	bne.n	1e06 <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xbe>
					break;
				}
			}
		}

		return rxRingBuffer;
    1e26:	307c      	adds	r0, #124	; 0x7c
    1e28:	30ff      	adds	r0, #255	; 0xff
    1e2a:	e009      	b.n	1e40 <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xf8>
	}
	else
	{
		// user event is attached so call it
		return zrEventReceiveFrame(len, frm, lqi, ed,crc_fail);
    1e2c:	2400      	movs	r4, #0
    1e2e:	9400      	str	r4, [sp, #0]
    1e30:	24a1      	movs	r4, #161	; 0xa1
    1e32:	00a4      	lsls	r4, r4, #2
    1e34:	5904      	ldr	r4, [r0, r4]
    1e36:	1c08      	adds	r0, r1, #0
    1e38:	1c11      	adds	r1, r2, #0
    1e3a:	1c1a      	adds	r2, r3, #0
    1e3c:	1c2b      	adds	r3, r5, #0
    1e3e:	47a0      	blx	r4
	}
}
    1e40:	b002      	add	sp, #8
    1e42:	bc1c      	pop	{r2, r3, r4}
    1e44:	4690      	mov	r8, r2
    1e46:	4699      	mov	r9, r3
    1e48:	46a2      	mov	sl, r4
    1e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e4c:	0000027d 	.word	0x0000027d
    1e50:	0000027f 	.word	0x0000027f

00001e54 <_ZN8cMxRadio8onTxDoneE15radio_tx_done_t>:
 * this should not be called by the user
 *
 * @param x one of the radio_tx_done_t enumerations indicating transmission success
 */
void cMxRadio::onTxDone(radio_tx_done_t x)
{
    1e54:	b510      	push	{r4, lr}
    1e56:	1c04      	adds	r4, r0, #0
	if (hasAttachedTxEvent)
    1e58:	23a0      	movs	r3, #160	; 0xa0
    1e5a:	009b      	lsls	r3, r3, #2
    1e5c:	5cc3      	ldrb	r3, [r0, r3]
    1e5e:	2b00      	cmp	r3, #0
    1e60:	d004      	beq.n	1e6c <_ZN8cMxRadio8onTxDoneE15radio_tx_done_t+0x18>
	{
		zrEventTxDone(x);
    1e62:	23a2      	movs	r3, #162	; 0xa2
    1e64:	009b      	lsls	r3, r3, #2
    1e66:	58c3      	ldr	r3, [r0, r3]
    1e68:	1c08      	adds	r0, r1, #0
    1e6a:	4798      	blx	r3
	}

	txIsBusy = 0;
    1e6c:	2200      	movs	r2, #0
    1e6e:	4b01      	ldr	r3, [pc, #4]	; (1e74 <_ZN8cMxRadio8onTxDoneE15radio_tx_done_t+0x20>)
    1e70:	54e2      	strb	r2, [r4, r3]
}
    1e72:	bd10      	pop	{r4, pc}
    1e74:	00000282 	.word	0x00000282

00001e78 <_ZN8cMxRadioD1Ev>:
volatile uint8_t txIsBusy = 0;


cMxRadio::~cMxRadio()
{
}
    1e78:	4770      	bx	lr
    1e7a:	46c0      	nop			; (mov r8, r8)

00001e7c <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_>:
// empty constructor, should not be called by user
cMxRadio::cMxRadio(PinName mosi, PinName miso, PinName sclk, PinName cs, PinName rst, PinName slp, PinName irq)
    1e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e7e:	4647      	mov	r7, r8
    1e80:	b480      	push	{r7}
    1e82:	b086      	sub	sp, #24
    1e84:	1c05      	adds	r5, r0, #0
    1e86:	a80c      	add	r0, sp, #48	; 0x30
    1e88:	2600      	movs	r6, #0
    1e8a:	5786      	ldrsb	r6, [r0, r6]
    1e8c:	a80d      	add	r0, sp, #52	; 0x34
    1e8e:	2700      	movs	r7, #0
    1e90:	57c7      	ldrsb	r7, [r0, r7]
    1e92:	a80e      	add	r0, sp, #56	; 0x38
    1e94:	7800      	ldrb	r0, [r0, #0]
    1e96:	b240      	sxtb	r0, r0
    1e98:	4680      	mov	r8, r0
:m_spi(mosi, miso, sclk), m_cs(cs), reset_pin(rst), sleep_pin(slp)//,irq_pin(irq)
    1e9a:	1c28      	adds	r0, r5, #0
    1e9c:	3014      	adds	r0, #20
    1e9e:	2401      	movs	r4, #1
    1ea0:	4264      	negs	r4, r4
    1ea2:	9400      	str	r4, [sp, #0]
    1ea4:	4c2c      	ldr	r4, [pc, #176]	; (1f58 <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_+0xdc>)
    1ea6:	47a0      	blx	r4
public:
    /** Create a DigitalOut connected to the specified pin
     *
     *  @param pin DigitalOut pin to connect to
     */
    DigitalOut(PinName pin) : gpio() {
    1ea8:	2400      	movs	r4, #0
    1eaa:	23a8      	movs	r3, #168	; 0xa8
    1eac:	54ec      	strb	r4, [r5, r3]
    1eae:	1c28      	adds	r0, r5, #0
    1eb0:	30a8      	adds	r0, #168	; 0xa8
    1eb2:	6044      	str	r4, [r0, #4]
    1eb4:	7204      	strb	r4, [r0, #8]
    1eb6:	7244      	strb	r4, [r0, #9]
    1eb8:	7284      	strb	r4, [r0, #10]
    1eba:	60c4      	str	r4, [r0, #12]
    1ebc:	6104      	str	r4, [r0, #16]
    1ebe:	6144      	str	r4, [r0, #20]
    1ec0:	6184      	str	r4, [r0, #24]
        gpio_init_out(&gpio, pin);
    1ec2:	1c31      	adds	r1, r6, #0
    1ec4:	4e25      	ldr	r6, [pc, #148]	; (1f5c <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_+0xe0>)
    1ec6:	47b0      	blx	r6
public:
    /** Create a DigitalOut connected to the specified pin
     *
     *  @param pin DigitalOut pin to connect to
     */
    DigitalOut(PinName pin) : gpio() {
    1ec8:	23c4      	movs	r3, #196	; 0xc4
    1eca:	54ec      	strb	r4, [r5, r3]
    1ecc:	1c28      	adds	r0, r5, #0
    1ece:	30c4      	adds	r0, #196	; 0xc4
    1ed0:	6044      	str	r4, [r0, #4]
    1ed2:	7204      	strb	r4, [r0, #8]
    1ed4:	7244      	strb	r4, [r0, #9]
    1ed6:	7284      	strb	r4, [r0, #10]
    1ed8:	60c4      	str	r4, [r0, #12]
    1eda:	6104      	str	r4, [r0, #16]
    1edc:	6144      	str	r4, [r0, #20]
    1ede:	6184      	str	r4, [r0, #24]
        gpio_init_out(&gpio, pin);
    1ee0:	1c39      	adds	r1, r7, #0
    1ee2:	47b0      	blx	r6
public:
    /** Create a DigitalOut connected to the specified pin
     *
     *  @param pin DigitalOut pin to connect to
     */
    DigitalOut(PinName pin) : gpio() {
    1ee4:	23e0      	movs	r3, #224	; 0xe0
    1ee6:	54ec      	strb	r4, [r5, r3]
    1ee8:	1c28      	adds	r0, r5, #0
    1eea:	30e0      	adds	r0, #224	; 0xe0
    1eec:	6044      	str	r4, [r0, #4]
    1eee:	7204      	strb	r4, [r0, #8]
    1ef0:	7244      	strb	r4, [r0, #9]
    1ef2:	7284      	strb	r4, [r0, #10]
    1ef4:	60c4      	str	r4, [r0, #12]
    1ef6:	6104      	str	r4, [r0, #16]
    1ef8:	6144      	str	r4, [r0, #20]
    1efa:	6184      	str	r4, [r0, #24]
        gpio_init_out(&gpio, pin);
    1efc:	4641      	mov	r1, r8
    1efe:	47b0      	blx	r6
{
	// default event handlers
	
	zrEventTxDone=0;
    1f00:	23a2      	movs	r3, #162	; 0xa2
    1f02:	009b      	lsls	r3, r3, #2
    1f04:	50ec      	str	r4, [r5, r3]
	zrEventReceiveFrame=0;
    1f06:	3b04      	subs	r3, #4
    1f08:	50ec      	str	r4, [r5, r3]
	temprssi=0;
    1f0a:	702c      	strb	r4, [r5, #0]
	setautotx=false;
    1f0c:	3308      	adds	r3, #8
    1f0e:	54ec      	strb	r4, [r5, r3]
	setautorx=false;
    1f10:	4b13      	ldr	r3, [pc, #76]	; (1f60 <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_+0xe4>)
    1f12:	54ec      	strb	r4, [r5, r3]
	needack=false;
    1f14:	4b13      	ldr	r3, [pc, #76]	; (1f64 <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_+0xe8>)
    1f16:	54ec      	strb	r4, [r5, r3]
	usedBeginTransmission = 0;
    1f18:	4b13      	ldr	r3, [pc, #76]	; (1f68 <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_+0xec>)
    1f1a:	54ec      	strb	r4, [r5, r3]
	hasAttachedTxEvent = 0;
    1f1c:	3b01      	subs	r3, #1
    1f1e:	54ec      	strb	r4, [r5, r3]
	hasAttachedRxEvent = 0;
    1f20:	4b12      	ldr	r3, [pc, #72]	; (1f6c <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_+0xf0>)
    1f22:	54ec      	strb	r4, [r5, r3]
	lastLqi = 0;
    1f24:	4b12      	ldr	r3, [pc, #72]	; (1f70 <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_+0xf4>)
    1f26:	54ec      	strb	r4, [r5, r3]
	lastRssi = 0;
    1f28:	4b12      	ldr	r3, [pc, #72]	; (1f74 <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_+0xf8>)
    1f2a:	54ec      	strb	r4, [r5, r3]
	txTmpBufferLength = 0;
    1f2c:	3b02      	subs	r3, #2
    1f2e:	54ec      	strb	r4, [r5, r3]
	rxRingBufferHead = 0;
    1f30:	23fc      	movs	r3, #252	; 0xfc
    1f32:	33ff      	adds	r3, #255	; 0xff
    1f34:	54ec      	strb	r4, [r5, r3]
	rxRingBufferTail = 0;
    1f36:	3301      	adds	r3, #1
    1f38:	54ec      	strb	r4, [r5, r3]
	user_radio_tx_done=0;
	user_radio_receive_frame=0;
	user_radio_irq=0;
	user_radio_error=0;
	*/
	zr_attach_receive_frame(&cMxRadio::onReceiveFrame);
    1f3a:	1c28      	adds	r0, r5, #0
    1f3c:	490e      	ldr	r1, [pc, #56]	; (1f78 <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_+0xfc>)
    1f3e:	2200      	movs	r2, #0
    1f40:	4b0e      	ldr	r3, [pc, #56]	; (1f7c <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_+0x100>)
    1f42:	4798      	blx	r3
	zr_attach_tx_done(&cMxRadio::onTxDone);
    1f44:	1c28      	adds	r0, r5, #0
    1f46:	490e      	ldr	r1, [pc, #56]	; (1f80 <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_+0x104>)
    1f48:	2200      	movs	r2, #0
    1f4a:	4b0e      	ldr	r3, [pc, #56]	; (1f84 <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_+0x108>)
    1f4c:	4798      	blx	r3

}
    1f4e:	1c28      	adds	r0, r5, #0
    1f50:	b006      	add	sp, #24
    1f52:	bc04      	pop	{r2}
    1f54:	4690      	mov	r8, r2
    1f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f58:	00004ba1 	.word	0x00004ba1
    1f5c:	00004fad 	.word	0x00004fad
    1f60:	0000028d 	.word	0x0000028d
    1f64:	0000028e 	.word	0x0000028e
    1f68:	00000281 	.word	0x00000281
    1f6c:	0000027f 	.word	0x0000027f
    1f70:	0000027d 	.word	0x0000027d
    1f74:	0000027e 	.word	0x0000027e
    1f78:	00001d49 	.word	0x00001d49
    1f7c:	000022cd 	.word	0x000022cd
    1f80:	00001e55 	.word	0x00001e55
    1f84:	000022e5 	.word	0x000022e5

00001f88 <_ZN8cMxRadio5beginEaPh>:
 *
 * @param chan channel number for the radio to use, 11 to 26
 * @param frameHeader HeadSize byte custom frame header
 */
void cMxRadio::begin(channel_t chan, uint8_t* frameHeader)
{
    1f88:	b570      	push	{r4, r5, r6, lr}
    1f8a:	1c06      	adds	r6, r0, #0
    1f8c:	1c0d      	adds	r5, r1, #0
    1f8e:	1c14      	adds	r4, r2, #0
	radio_init(rxFrameBuffer, MAX_FRAME_SIZE);
    1f90:	1c01      	adds	r1, r0, #0
    1f92:	31fc      	adds	r1, #252	; 0xfc
    1f94:	227f      	movs	r2, #127	; 0x7f
    1f96:	4b20      	ldr	r3, [pc, #128]	; (2018 <STACK_SIZE+0x18>)
    1f98:	4798      	blx	r3

	if (frameHeader)
    1f9a:	2c00      	cmp	r4, #0
    1f9c:	d00c      	beq.n	1fb8 <_ZN8cMxRadio5beginEaPh+0x30>
    1f9e:	1c22      	adds	r2, r4, #0
    1fa0:	1c33      	adds	r3, r6, #0
    1fa2:	33fe      	adds	r3, #254	; 0xfe
    1fa4:	33ff      	adds	r3, #255	; 0xff
    1fa6:	491d      	ldr	r1, [pc, #116]	; (201c <STACK_SIZE+0x1c>)
    1fa8:	1870      	adds	r0, r6, r1
	{
		// copy custom frame header
		int i;
		for (i = 0; i < HeadSize; i++)
			txTmpBuffer[i] = frameHeader[i];
    1faa:	7811      	ldrb	r1, [r2, #0]
    1fac:	7019      	strb	r1, [r3, #0]
    1fae:	3201      	adds	r2, #1
    1fb0:	3301      	adds	r3, #1

	if (frameHeader)
	{
		// copy custom frame header
		int i;
		for (i = 0; i < HeadSize; i++)
    1fb2:	4283      	cmp	r3, r0
    1fb4:	d1f9      	bne.n	1faa <_ZN8cMxRadio5beginEaPh+0x22>
    1fb6:	e01b      	b.n	1ff0 <_ZN8cMxRadio5beginEaPh+0x68>
			txTmpBuffer[i] = frameHeader[i];
	}
	else
	{
		txTmpBuffer[0] = 0x41;
    1fb8:	2241      	movs	r2, #65	; 0x41
    1fba:	23fe      	movs	r3, #254	; 0xfe
    1fbc:	33ff      	adds	r3, #255	; 0xff
    1fbe:	54f2      	strb	r2, [r6, r3]
		txTmpBuffer[1] = 0x88;
    1fc0:	3247      	adds	r2, #71	; 0x47
    1fc2:	3301      	adds	r3, #1
    1fc4:	54f2      	strb	r2, [r6, r3]
		txTmpBuffer[2] =  0;
    1fc6:	2300      	movs	r3, #0
    1fc8:	4a15      	ldr	r2, [pc, #84]	; (2020 <STACK_SIZE+0x20>)
    1fca:	54b3      	strb	r3, [r6, r2]
		txTmpBuffer[3]=0xCD;
    1fcc:	21cd      	movs	r1, #205	; 0xcd
    1fce:	3201      	adds	r2, #1
    1fd0:	54b1      	strb	r1, [r6, r2]
		txTmpBuffer[4]=0xAB;
    1fd2:	3922      	subs	r1, #34	; 0x22
    1fd4:	4a13      	ldr	r2, [pc, #76]	; (2024 <STACK_SIZE+0x24>)
    1fd6:	54b1      	strb	r1, [r6, r2]
		txTmpBuffer[5] = 0xFF; //dest address low byte
    1fd8:	3a03      	subs	r2, #3
    1fda:	3aff      	subs	r2, #255	; 0xff
    1fdc:	4912      	ldr	r1, [pc, #72]	; (2028 <STACK_SIZE+0x28>)
    1fde:	5472      	strb	r2, [r6, r1]
		txTmpBuffer[6] = 0xFF; //dest address hight byte
    1fe0:	4912      	ldr	r1, [pc, #72]	; (202c <STACK_SIZE+0x2c>)
    1fe2:	5472      	strb	r2, [r6, r1]
		txTmpBuffer[7] = 0x01;;
    1fe4:	2101      	movs	r1, #1
    1fe6:	3206      	adds	r2, #6
    1fe8:	32ff      	adds	r2, #255	; 0xff
    1fea:	54b1      	strb	r1, [r6, r2]
		txTmpBuffer[8] = 0x00;;
    1fec:	4a10      	ldr	r2, [pc, #64]	; (2030 <STACK_SIZE+0x30>)
    1fee:	54b3      	strb	r3, [r6, r2]
 */
typedef union radio_param_t
{
#if defined __cplusplus
public:
    radio_param_t(int8_t c) { channel = c; } /* also used for txpwr_t */
    1ff0:	b2ea      	uxtb	r2, r5
	}

	// set the channel
	radio_set_param(RP_CHANNEL(chan));
    1ff2:	1c30      	adds	r0, r6, #0
    1ff4:	2100      	movs	r1, #0
    1ff6:	4b0f      	ldr	r3, [pc, #60]	; (2034 <STACK_SIZE+0x34>)
    1ff8:	4798      	blx	r3

	// default to receiver
	if (setautorx)
    1ffa:	4b0f      	ldr	r3, [pc, #60]	; (2038 <STACK_SIZE+0x38>)
    1ffc:	5cf3      	ldrb	r3, [r6, r3]
    1ffe:	2b00      	cmp	r3, #0
    2000:	d004      	beq.n	200c <STACK_SIZE+0xc>
		radio_set_state(STATE_RXAUTO);
    2002:	1c30      	adds	r0, r6, #0
    2004:	2104      	movs	r1, #4
    2006:	4b0d      	ldr	r3, [pc, #52]	; (203c <STACK_SIZE+0x3c>)
    2008:	4798      	blx	r3
    200a:	e003      	b.n	2014 <STACK_SIZE+0x14>
	else
		radio_set_state(STATE_RX);
    200c:	1c30      	adds	r0, r6, #0
    200e:	2102      	movs	r1, #2
    2010:	4b0a      	ldr	r3, [pc, #40]	; (203c <STACK_SIZE+0x3c>)
    2012:	4798      	blx	r3

#ifdef ENABLE_DIG3_DIG4
	trx_bit_write(SR_PA_EXT_EN, 1);
#endif

}
    2014:	bd70      	pop	{r4, r5, r6, pc}
    2016:	46c0      	nop			; (mov r8, r8)
    2018:	00002401 	.word	0x00002401
    201c:	00000206 	.word	0x00000206
    2020:	000001ff 	.word	0x000001ff
    2024:	00000201 	.word	0x00000201
    2028:	00000202 	.word	0x00000202
    202c:	00000203 	.word	0x00000203
    2030:	00000205 	.word	0x00000205
    2034:	00002741 	.word	0x00002741
    2038:	0000028d 	.word	0x0000028d
    203c:	000024f1 	.word	0x000024f1

00002040 <_ZN8cMxRadio5beginEa>:
 * Then it sets the channel number and defaults to RX state.
 *
 * @param chan the channel number for the radio to use, 11 to 26
 */
void cMxRadio::begin(channel_t chan)
{
    2040:	b508      	push	{r3, lr}
	begin(chan, 0);
    2042:	2200      	movs	r2, #0
    2044:	4b01      	ldr	r3, [pc, #4]	; (204c <_ZN8cMxRadio5beginEa+0xc>)
    2046:	4798      	blx	r3
}
    2048:	bd08      	pop	{r3, pc}
    204a:	46c0      	nop			; (mov r8, r8)
    204c:	00001f89 	.word	0x00001f89

00002050 <_ZN8cMxRadio9attachIrqEPFvhE>:
 *
 * @param funct the function pointer to the event handler
 */
void cMxRadio::attachIrq(void (*funct)(uint8_t))
{
	user_radio_irq = funct;
    2050:	23a5      	movs	r3, #165	; 0xa5
    2052:	009b      	lsls	r3, r3, #2
    2054:	50c1      	str	r1, [r0, r3]
}
    2056:	4770      	bx	lr

00002058 <_ZN8cMxRadio5flushEv>:
 *
 * Flush the RX FIFO ring buffer
 */
void cMxRadio::flush()
{
	rxRingBufferHead = rxRingBufferTail;
    2058:	23fe      	movs	r3, #254	; 0xfe
    205a:	005b      	lsls	r3, r3, #1
    205c:	5cc2      	ldrb	r2, [r0, r3]
    205e:	23fc      	movs	r3, #252	; 0xfc
    2060:	33ff      	adds	r3, #255	; 0xff
    2062:	54c2      	strb	r2, [r0, r3]
}
    2064:	4770      	bx	lr
    2066:	46c0      	nop			; (mov r8, r8)

00002068 <_ZN8cMxRadio4readEv>:
 * @return the next byte, or -1 if buffer is empty
 */
int16_t cMxRadio::read()
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (rxRingBufferHead == rxRingBufferTail)
    2068:	23fe      	movs	r3, #254	; 0xfe
    206a:	005b      	lsls	r3, r3, #1
    206c:	5cc3      	ldrb	r3, [r0, r3]
    206e:	22fc      	movs	r2, #252	; 0xfc
    2070:	32ff      	adds	r2, #255	; 0xff
    2072:	5c82      	ldrb	r2, [r0, r2]
    2074:	429a      	cmp	r2, r3
    2076:	d00b      	beq.n	2090 <_ZN8cMxRadio4readEv+0x28>
	{
		return -1;
	}
	else
	{
		uint8_t c = rxRingBuffer[rxRingBufferTail];
    2078:	18c2      	adds	r2, r0, r3
    207a:	3279      	adds	r2, #121	; 0x79
    207c:	32ff      	adds	r2, #255	; 0xff
    207e:	78d2      	ldrb	r2, [r2, #3]
		rxRingBufferTail = (rxRingBufferTail + 1) % ZR_FIFO_SIZE; // pop
    2080:	3301      	adds	r3, #1
    2082:	217f      	movs	r1, #127	; 0x7f
    2084:	400b      	ands	r3, r1
    2086:	317e      	adds	r1, #126	; 0x7e
    2088:	31ff      	adds	r1, #255	; 0xff
    208a:	5443      	strb	r3, [r0, r1]
		return c;
    208c:	b290      	uxth	r0, r2
    208e:	e000      	b.n	2092 <_ZN8cMxRadio4readEv+0x2a>
int16_t cMxRadio::read()
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (rxRingBufferHead == rxRingBufferTail)
	{
		return -1;
    2090:	4801      	ldr	r0, [pc, #4]	; (2098 <_ZN8cMxRadio4readEv+0x30>)
    2092:	b200      	sxth	r0, r0
	{
		uint8_t c = rxRingBuffer[rxRingBufferTail];
		rxRingBufferTail = (rxRingBufferTail + 1) % ZR_FIFO_SIZE; // pop
		return c;
	}
}
    2094:	4770      	bx	lr
    2096:	46c0      	nop			; (mov r8, r8)
    2098:	0000ffff 	.word	0x0000ffff

0000209c <_ZN8cMxRadio9availableEv>:
 *
 * @return how many bytes are in the RX FIFO ring buffer
 */
int8_t cMxRadio::available()
{
	return ((int16_t)((int16_t)ZR_FIFO_SIZE + (int16_t)rxRingBufferHead - (int16_t)rxRingBufferTail)) % ZR_FIFO_SIZE;
    209c:	23fc      	movs	r3, #252	; 0xfc
    209e:	33ff      	adds	r3, #255	; 0xff
    20a0:	5cc3      	ldrb	r3, [r0, r3]
    20a2:	3380      	adds	r3, #128	; 0x80
    20a4:	22fe      	movs	r2, #254	; 0xfe
    20a6:	0052      	lsls	r2, r2, #1
    20a8:	5c80      	ldrb	r0, [r0, r2]
    20aa:	1a1b      	subs	r3, r3, r0
    20ac:	17d8      	asrs	r0, r3, #31
    20ae:	0e42      	lsrs	r2, r0, #25
    20b0:	189b      	adds	r3, r3, r2
    20b2:	207f      	movs	r0, #127	; 0x7f
    20b4:	4003      	ands	r3, r0
    20b6:	1a98      	subs	r0, r3, r2
    20b8:	b240      	sxtb	r0, r0
}
    20ba:	4770      	bx	lr

000020bc <_ZN8cMxRadio17beginTransmissionEv>:
 * Non-immediate mode sends multiple bytes per frame
 *
 */
void cMxRadio::beginTransmission()
{
	usedBeginTransmission = 1;
    20bc:	2201      	movs	r2, #1
    20be:	4b07      	ldr	r3, [pc, #28]	; (20dc <_ZN8cMxRadio17beginTransmissionEv+0x20>)
    20c0:	54c2      	strb	r2, [r0, r3]
	txTmpBuffer[5]= 0xFF;
    20c2:	3b83      	subs	r3, #131	; 0x83
    20c4:	3bff      	subs	r3, #255	; 0xff
    20c6:	4a06      	ldr	r2, [pc, #24]	; (20e0 <_ZN8cMxRadio17beginTransmissionEv+0x24>)
    20c8:	5483      	strb	r3, [r0, r2]
	txTmpBuffer[6]= 0XFF;
    20ca:	4a06      	ldr	r2, [pc, #24]	; (20e4 <_ZN8cMxRadio17beginTransmissionEv+0x28>)
    20cc:	5483      	strb	r3, [r0, r2]
	// add frame header
	txTmpBufferLength = HeadSize;
    20ce:	3afb      	subs	r2, #251	; 0xfb
    20d0:	3aff      	subs	r2, #255	; 0xff
    20d2:	337e      	adds	r3, #126	; 0x7e
    20d4:	33ff      	adds	r3, #255	; 0xff
    20d6:	54c2      	strb	r2, [r0, r3]
}
    20d8:	4770      	bx	lr
    20da:	46c0      	nop			; (mov r8, r8)
    20dc:	00000281 	.word	0x00000281
    20e0:	00000202 	.word	0x00000202
    20e4:	00000203 	.word	0x00000203

000020e8 <_ZN8cMxRadio10waitTxDoneEt>:
 * waits until the last transmission is complete, or timed out
 *
 * @param timeout iterations to countdown before timeout
 */
void cMxRadio::waitTxDone(uint16_t timeout)
{
    20e8:	b510      	push	{r4, lr}
    20ea:	b082      	sub	sp, #8
	volatile uint16_t cnt = timeout;
    20ec:	466b      	mov	r3, sp
    20ee:	80d9      	strh	r1, [r3, #6]
	while (txIsBusy && cnt--);
    20f0:	4c07      	ldr	r4, [pc, #28]	; (2110 <_ZN8cMxRadio10waitTxDoneEt+0x28>)
    20f2:	466b      	mov	r3, sp
    20f4:	1d99      	adds	r1, r3, #6
    20f6:	5d03      	ldrb	r3, [r0, r4]
    20f8:	2b00      	cmp	r3, #0
    20fa:	d006      	beq.n	210a <_ZN8cMxRadio10waitTxDoneEt+0x22>
    20fc:	880b      	ldrh	r3, [r1, #0]
    20fe:	b29b      	uxth	r3, r3
    2100:	1e5a      	subs	r2, r3, #1
    2102:	b292      	uxth	r2, r2
    2104:	800a      	strh	r2, [r1, #0]
    2106:	2b00      	cmp	r3, #0
    2108:	d1f5      	bne.n	20f6 <_ZN8cMxRadio10waitTxDoneEt+0xe>
}
    210a:	b002      	add	sp, #8
    210c:	bd10      	pop	{r4, pc}
    210e:	46c0      	nop			; (mov r8, r8)
    2110:	00000282 	.word	0x00000282

00002114 <_ZN8cMxRadio15endTransmissionEv>:
 *
 * Finalize the payload and transmits it when ready
 *
 */
void cMxRadio::endTransmission()
{
    2114:	b538      	push	{r3, r4, r5, lr}
    2116:	1c04      	adds	r4, r0, #0
	usedBeginTransmission = 0;
    2118:	2200      	movs	r2, #0
    211a:	4b28      	ldr	r3, [pc, #160]	; (21bc <_ZN8cMxRadio15endTransmissionEv+0xa8>)
    211c:	54c2      	strb	r2, [r0, r3]

	// empty FCS field
	txTmpBufferLength += 2;
    211e:	229f      	movs	r2, #159	; 0x9f
    2120:	0092      	lsls	r2, r2, #2
    2122:	5c83      	ldrb	r3, [r0, r2]
    2124:	3302      	adds	r3, #2
    2126:	5483      	strb	r3, [r0, r2]

#ifdef ZR_TXWAIT_BEFORE
	waitTxDone(0xFFFF);
    2128:	4925      	ldr	r1, [pc, #148]	; (21c0 <_ZN8cMxRadio15endTransmissionEv+0xac>)
    212a:	4b26      	ldr	r3, [pc, #152]	; (21c4 <_ZN8cMxRadio15endTransmissionEv+0xb0>)
    212c:	4798      	blx	r3
#endif
	txIsBusy = 1;
    212e:	2201      	movs	r2, #1
    2130:	4b25      	ldr	r3, [pc, #148]	; (21c8 <_ZN8cMxRadio15endTransmissionEv+0xb4>)
    2132:	54e2      	strb	r2, [r4, r3]
	if (setautotx)
    2134:	330a      	adds	r3, #10
    2136:	5ce3      	ldrb	r3, [r4, r3]
    2138:	2b00      	cmp	r3, #0
    213a:	d004      	beq.n	2146 <_ZN8cMxRadio15endTransmissionEv+0x32>
		radio_set_state(STATE_TXAUTO);
    213c:	1c20      	adds	r0, r4, #0
    213e:	2103      	movs	r1, #3
    2140:	4b22      	ldr	r3, [pc, #136]	; (21cc <_ZN8cMxRadio15endTransmissionEv+0xb8>)
    2142:	4798      	blx	r3
    2144:	e003      	b.n	214e <_ZN8cMxRadio15endTransmissionEv+0x3a>
	else
		radio_set_state(STATE_TX);
    2146:	1c20      	adds	r0, r4, #0
    2148:	2101      	movs	r1, #1
    214a:	4b20      	ldr	r3, [pc, #128]	; (21cc <_ZN8cMxRadio15endTransmissionEv+0xb8>)
    214c:	4798      	blx	r3
	ZR_RFTX_LED_ON();
	//if broadcase ,cant need ack
	if(txTmpBuffer[5]==0xff && txTmpBuffer[5]==0xff)
    214e:	4b20      	ldr	r3, [pc, #128]	; (21d0 <_ZN8cMxRadio15endTransmissionEv+0xbc>)
    2150:	5ce3      	ldrb	r3, [r4, r3]
    2152:	2bff      	cmp	r3, #255	; 0xff
    2154:	d106      	bne.n	2164 <_ZN8cMxRadio15endTransmissionEv+0x50>
		txTmpBuffer[0]=txTmpBuffer[0]&0xdf;
    2156:	22fe      	movs	r2, #254	; 0xfe
    2158:	32ff      	adds	r2, #255	; 0xff
    215a:	5ca3      	ldrb	r3, [r4, r2]
    215c:	2120      	movs	r1, #32
    215e:	438b      	bics	r3, r1
    2160:	54a3      	strb	r3, [r4, r2]
    2162:	e00c      	b.n	217e <_ZN8cMxRadio15endTransmissionEv+0x6a>
	else
	{
		if(!needack)
    2164:	4b1b      	ldr	r3, [pc, #108]	; (21d4 <_ZN8cMxRadio15endTransmissionEv+0xc0>)
    2166:	5ce3      	ldrb	r3, [r4, r3]
    2168:	2b00      	cmp	r3, #0
    216a:	d104      	bne.n	2176 <_ZN8cMxRadio15endTransmissionEv+0x62>
			txTmpBuffer[0] = 0x41;
    216c:	2241      	movs	r2, #65	; 0x41
    216e:	23fe      	movs	r3, #254	; 0xfe
    2170:	33ff      	adds	r3, #255	; 0xff
    2172:	54e2      	strb	r2, [r4, r3]
    2174:	e003      	b.n	217e <_ZN8cMxRadio15endTransmissionEv+0x6a>
		else
			txTmpBuffer[0] = 0x61; //ack required
    2176:	2261      	movs	r2, #97	; 0x61
    2178:	23fe      	movs	r3, #254	; 0xfe
    217a:	33ff      	adds	r3, #255	; 0xff
    217c:	54e2      	strb	r2, [r4, r3]
	}
	radio_send_frame(txTmpBufferLength, txTmpBuffer, 0);
    217e:	239f      	movs	r3, #159	; 0x9f
    2180:	009b      	lsls	r3, r3, #2
    2182:	5ce1      	ldrb	r1, [r4, r3]
    2184:	1c20      	adds	r0, r4, #0
    2186:	1c22      	adds	r2, r4, #0
    2188:	32fe      	adds	r2, #254	; 0xfe
    218a:	32ff      	adds	r2, #255	; 0xff
    218c:	2300      	movs	r3, #0
    218e:	4d12      	ldr	r5, [pc, #72]	; (21d8 <_ZN8cMxRadio15endTransmissionEv+0xc4>)
    2190:	47a8      	blx	r5
#ifdef ZR_TXWAIT_AFTER
	waitTxDone(0xFFFF);
    2192:	1c20      	adds	r0, r4, #0
    2194:	490a      	ldr	r1, [pc, #40]	; (21c0 <_ZN8cMxRadio15endTransmissionEv+0xac>)
    2196:	4b0b      	ldr	r3, [pc, #44]	; (21c4 <_ZN8cMxRadio15endTransmissionEv+0xb0>)
    2198:	4798      	blx	r3
	if (setautorx)
    219a:	4b10      	ldr	r3, [pc, #64]	; (21dc <_ZN8cMxRadio15endTransmissionEv+0xc8>)
    219c:	5ce3      	ldrb	r3, [r4, r3]
    219e:	2b00      	cmp	r3, #0
    21a0:	d004      	beq.n	21ac <_ZN8cMxRadio15endTransmissionEv+0x98>
		radio_set_state(STATE_RXAUTO);
    21a2:	1c20      	adds	r0, r4, #0
    21a4:	2104      	movs	r1, #4
    21a6:	4b09      	ldr	r3, [pc, #36]	; (21cc <_ZN8cMxRadio15endTransmissionEv+0xb8>)
    21a8:	4798      	blx	r3
    21aa:	e003      	b.n	21b4 <_ZN8cMxRadio15endTransmissionEv+0xa0>
	else
		radio_set_state(STATE_RX);
    21ac:	1c20      	adds	r0, r4, #0
    21ae:	2102      	movs	r1, #2
    21b0:	4b06      	ldr	r3, [pc, #24]	; (21cc <_ZN8cMxRadio15endTransmissionEv+0xb8>)
    21b2:	4798      	blx	r3
	txIsBusy = 0;
    21b4:	2200      	movs	r2, #0
    21b6:	4b04      	ldr	r3, [pc, #16]	; (21c8 <_ZN8cMxRadio15endTransmissionEv+0xb4>)
    21b8:	54e2      	strb	r2, [r4, r3]
#endif
}
    21ba:	bd38      	pop	{r3, r4, r5, pc}
    21bc:	00000281 	.word	0x00000281
    21c0:	0000ffff 	.word	0x0000ffff
    21c4:	000020e9 	.word	0x000020e9
    21c8:	00000282 	.word	0x00000282
    21cc:	000024f1 	.word	0x000024f1
    21d0:	00000202 	.word	0x00000202
    21d4:	0000028e 	.word	0x0000028e
    21d8:	00002845 	.word	0x00002845
    21dc:	0000028d 	.word	0x0000028d

000021e0 <_ZN8cMxRadio5writeEh>:
 * If "beginTrasmission" was not used, then it transmits the single byte immediately (slower for multiple bytes)
 *
 * @param c character to be sent
 */
void cMxRadio::write(uint8_t c)
{
    21e0:	b538      	push	{r3, r4, r5, lr}
    21e2:	1c04      	adds	r4, r0, #0
	if (usedBeginTransmission)
    21e4:	4b2d      	ldr	r3, [pc, #180]	; (229c <_ZN8cMxRadio5writeEh+0xbc>)
    21e6:	5cc3      	ldrb	r3, [r0, r3]
    21e8:	2b00      	cmp	r3, #0
    21ea:	d020      	beq.n	222e <_ZN8cMxRadio5writeEh+0x4e>
	{
		if (txTmpBufferLength < ZR_TXTMPBUFF_SIZE - 2)
    21ec:	239f      	movs	r3, #159	; 0x9f
    21ee:	009b      	lsls	r3, r3, #2
    21f0:	5cc3      	ldrb	r3, [r0, r3]
    21f2:	2b7c      	cmp	r3, #124	; 0x7c
    21f4:	d851      	bhi.n	229a <_ZN8cMxRadio5writeEh+0xba>
		{
			txTmpBuffer[txTmpBufferLength] = c;
    21f6:	18c2      	adds	r2, r0, r3
    21f8:	32f9      	adds	r2, #249	; 0xf9
    21fa:	32ff      	adds	r2, #255	; 0xff
    21fc:	7151      	strb	r1, [r2, #5]
			txTmpBufferLength++;
    21fe:	3301      	adds	r3, #1
    2200:	b2db      	uxtb	r3, r3
    2202:	229f      	movs	r2, #159	; 0x9f
    2204:	0092      	lsls	r2, r2, #2
    2206:	5483      	strb	r3, [r0, r2]

			if (txTmpBufferLength >= ZR_TXTMPBUFF_SIZE - 2)
    2208:	2b7c      	cmp	r3, #124	; 0x7c
    220a:	d946      	bls.n	229a <_ZN8cMxRadio5writeEh+0xba>
			{
				// buffer is now full
				// just send it all out so we have more room
				endTransmission();
    220c:	4b24      	ldr	r3, [pc, #144]	; (22a0 <_ZN8cMxRadio5writeEh+0xc0>)
    220e:	4798      	blx	r3
 * Non-immediate mode sends multiple bytes per frame
 *
 */
void cMxRadio::beginTransmission()
{
	usedBeginTransmission = 1;
    2210:	2201      	movs	r2, #1
    2212:	4b22      	ldr	r3, [pc, #136]	; (229c <_ZN8cMxRadio5writeEh+0xbc>)
    2214:	54e2      	strb	r2, [r4, r3]
	txTmpBuffer[5]= 0xFF;
    2216:	3b83      	subs	r3, #131	; 0x83
    2218:	3bff      	subs	r3, #255	; 0xff
    221a:	4a22      	ldr	r2, [pc, #136]	; (22a4 <_ZN8cMxRadio5writeEh+0xc4>)
    221c:	54a3      	strb	r3, [r4, r2]
	txTmpBuffer[6]= 0XFF;
    221e:	4a22      	ldr	r2, [pc, #136]	; (22a8 <_ZN8cMxRadio5writeEh+0xc8>)
    2220:	54a3      	strb	r3, [r4, r2]
	// add frame header
	txTmpBufferLength = HeadSize;
    2222:	3afb      	subs	r2, #251	; 0xfb
    2224:	3aff      	subs	r2, #255	; 0xff
    2226:	337e      	adds	r3, #126	; 0x7e
    2228:	33ff      	adds	r3, #255	; 0xff
    222a:	54e2      	strb	r2, [r4, r3]
    222c:	e035      	b.n	229a <_ZN8cMxRadio5writeEh+0xba>
			}
		}
	}
	else
	{
		txTmpBuffer[HeadSize] = c; // set payload
    222e:	4b1f      	ldr	r3, [pc, #124]	; (22ac <_ZN8cMxRadio5writeEh+0xcc>)
    2230:	54c1      	strb	r1, [r0, r3]
		txTmpBuffer[HeadSize+1] = 0; // empty FCS
    2232:	2300      	movs	r3, #0
    2234:	4a1e      	ldr	r2, [pc, #120]	; (22b0 <_ZN8cMxRadio5writeEh+0xd0>)
    2236:	5483      	strb	r3, [r0, r2]
		txTmpBuffer[HeadSize+2] = 0; // empty FCS
    2238:	3201      	adds	r2, #1
    223a:	5483      	strb	r3, [r0, r2]

#ifdef ZR_TXWAIT_BEFORE
		waitTxDone(0xFFFF);
    223c:	491d      	ldr	r1, [pc, #116]	; (22b4 <_ZN8cMxRadio5writeEh+0xd4>)
    223e:	4b1e      	ldr	r3, [pc, #120]	; (22b8 <_ZN8cMxRadio5writeEh+0xd8>)
    2240:	4798      	blx	r3
#endif
		txIsBusy = 1;
    2242:	2201      	movs	r2, #1
    2244:	4b1d      	ldr	r3, [pc, #116]	; (22bc <_ZN8cMxRadio5writeEh+0xdc>)
    2246:	54e2      	strb	r2, [r4, r3]
		if (setautotx)
    2248:	330a      	adds	r3, #10
    224a:	5ce3      	ldrb	r3, [r4, r3]
    224c:	2b00      	cmp	r3, #0
    224e:	d004      	beq.n	225a <_ZN8cMxRadio5writeEh+0x7a>
			radio_set_state(STATE_TXAUTO);
    2250:	1c20      	adds	r0, r4, #0
    2252:	2103      	movs	r1, #3
    2254:	4b1a      	ldr	r3, [pc, #104]	; (22c0 <_ZN8cMxRadio5writeEh+0xe0>)
    2256:	4798      	blx	r3
    2258:	e003      	b.n	2262 <_ZN8cMxRadio5writeEh+0x82>
		else
			radio_set_state(STATE_TX);
    225a:	1c20      	adds	r0, r4, #0
    225c:	2101      	movs	r1, #1
    225e:	4b18      	ldr	r3, [pc, #96]	; (22c0 <_ZN8cMxRadio5writeEh+0xe0>)
    2260:	4798      	blx	r3
		ZR_RFTX_LED_ON();
		radio_send_frame(10, txTmpBuffer, 0);
    2262:	1c20      	adds	r0, r4, #0
    2264:	210a      	movs	r1, #10
    2266:	1c22      	adds	r2, r4, #0
    2268:	32fe      	adds	r2, #254	; 0xfe
    226a:	32ff      	adds	r2, #255	; 0xff
    226c:	2300      	movs	r3, #0
    226e:	4d15      	ldr	r5, [pc, #84]	; (22c4 <_ZN8cMxRadio5writeEh+0xe4>)
    2270:	47a8      	blx	r5
#ifdef ZR_TXWAIT_AFTER
		waitTxDone(0xFFFF);
    2272:	1c20      	adds	r0, r4, #0
    2274:	490f      	ldr	r1, [pc, #60]	; (22b4 <_ZN8cMxRadio5writeEh+0xd4>)
    2276:	4b10      	ldr	r3, [pc, #64]	; (22b8 <_ZN8cMxRadio5writeEh+0xd8>)
    2278:	4798      	blx	r3
		if (setautorx)
    227a:	4b13      	ldr	r3, [pc, #76]	; (22c8 <_ZN8cMxRadio5writeEh+0xe8>)
    227c:	5ce3      	ldrb	r3, [r4, r3]
    227e:	2b00      	cmp	r3, #0
    2280:	d004      	beq.n	228c <_ZN8cMxRadio5writeEh+0xac>
			radio_set_state(STATE_RXAUTO);
    2282:	1c20      	adds	r0, r4, #0
    2284:	2104      	movs	r1, #4
    2286:	4b0e      	ldr	r3, [pc, #56]	; (22c0 <_ZN8cMxRadio5writeEh+0xe0>)
    2288:	4798      	blx	r3
    228a:	e003      	b.n	2294 <_ZN8cMxRadio5writeEh+0xb4>
		else
			radio_set_state(STATE_RX);
    228c:	1c20      	adds	r0, r4, #0
    228e:	2102      	movs	r1, #2
    2290:	4b0b      	ldr	r3, [pc, #44]	; (22c0 <_ZN8cMxRadio5writeEh+0xe0>)
    2292:	4798      	blx	r3
		txIsBusy = 0;
    2294:	2200      	movs	r2, #0
    2296:	4b09      	ldr	r3, [pc, #36]	; (22bc <_ZN8cMxRadio5writeEh+0xdc>)
    2298:	54e2      	strb	r2, [r4, r3]
#endif
	}
}
    229a:	bd38      	pop	{r3, r4, r5, pc}
    229c:	00000281 	.word	0x00000281
    22a0:	00002115 	.word	0x00002115
    22a4:	00000202 	.word	0x00000202
    22a8:	00000203 	.word	0x00000203
    22ac:	00000206 	.word	0x00000206
    22b0:	00000207 	.word	0x00000207
    22b4:	0000ffff 	.word	0x0000ffff
    22b8:	000020e9 	.word	0x000020e9
    22bc:	00000282 	.word	0x00000282
    22c0:	000024f1 	.word	0x000024f1
    22c4:	00002845 	.word	0x00002845
    22c8:	0000028d 	.word	0x0000028d

000022cc <_ZN8cMxRadio23zr_attach_receive_frameEMS_FPhhS0_hahE>:
{
	user_radio_irq = funct;
}

void cMxRadio::zr_attach_receive_frame(uint8_t* (cMxRadio::*funct)(uint8_t, uint8_t*, uint8_t, int8_t, uint8_t))
{
    22cc:	b082      	sub	sp, #8
    22ce:	466b      	mov	r3, sp
    22d0:	9100      	str	r1, [sp, #0]
    22d2:	9201      	str	r2, [sp, #4]
	user_radio_receive_frame = funct;
    22d4:	22a6      	movs	r2, #166	; 0xa6
    22d6:	0092      	lsls	r2, r2, #2
    22d8:	4694      	mov	ip, r2
    22da:	4460      	add	r0, ip
    22dc:	cb06      	ldmia	r3!, {r1, r2}
    22de:	c006      	stmia	r0!, {r1, r2}
}
    22e0:	b002      	add	sp, #8
    22e2:	4770      	bx	lr

000022e4 <_ZN8cMxRadio17zr_attach_tx_doneEMS_Fv15radio_tx_done_tE>:

void cMxRadio::zr_attach_tx_done(void (cMxRadio::*funct)(radio_tx_done_t))
{
    22e4:	b082      	sub	sp, #8
    22e6:	466b      	mov	r3, sp
    22e8:	9100      	str	r1, [sp, #0]
    22ea:	9201      	str	r2, [sp, #4]
	user_radio_tx_done = funct;
    22ec:	22a8      	movs	r2, #168	; 0xa8
    22ee:	0092      	lsls	r2, r2, #2
    22f0:	4694      	mov	ip, r2
    22f2:	4460      	add	r0, ip
    22f4:	cb06      	ldmia	r3!, {r1, r2}
    22f6:	c006      	stmia	r0!, {r1, r2}
}
    22f8:	b002      	add	sp, #8
    22fa:	4770      	bx	lr

000022fc <_ZN8cMxRadio15usr_radio_errorE13radio_error_t>:
void cMxRadio::usr_radio_error(radio_error_t err)
{
    22fc:	b508      	push	{r3, lr}
	if (user_radio_error) user_radio_error(err);
    22fe:	23a4      	movs	r3, #164	; 0xa4
    2300:	009b      	lsls	r3, r3, #2
    2302:	58c3      	ldr	r3, [r0, r3]
    2304:	2b00      	cmp	r3, #0
    2306:	d001      	beq.n	230c <_ZN8cMxRadio15usr_radio_errorE13radio_error_t+0x10>
    2308:	1c08      	adds	r0, r1, #0
    230a:	4798      	blx	r3
}
    230c:	bd08      	pop	{r3, pc}
    230e:	46c0      	nop			; (mov r8, r8)

00002310 <_ZN8cMxRadio13usr_radio_irqEh>:

void cMxRadio::usr_radio_irq(uint8_t cause)
{
    2310:	b508      	push	{r3, lr}
	if (user_radio_irq) user_radio_irq(cause);
    2312:	23a5      	movs	r3, #165	; 0xa5
    2314:	009b      	lsls	r3, r3, #2
    2316:	58c3      	ldr	r3, [r0, r3]
    2318:	2b00      	cmp	r3, #0
    231a:	d001      	beq.n	2320 <_ZN8cMxRadio13usr_radio_irqEh+0x10>
    231c:	1c08      	adds	r0, r1, #0
    231e:	4798      	blx	r3
}
    2320:	bd08      	pop	{r3, pc}
    2322:	46c0      	nop			; (mov r8, r8)

00002324 <_ZN8cMxRadio23usr_radio_receive_frameEhPhhah>:

uint8_t* cMxRadio::usr_radio_receive_frame(uint8_t len, uint8_t *frm, uint8_t lqi, int8_t ed,uint8_t crc_fail)
{
    2324:	b5f0      	push	{r4, r5, r6, r7, lr}
    2326:	b085      	sub	sp, #20
    2328:	9303      	str	r3, [sp, #12]
    232a:	ac0a      	add	r4, sp, #40	; 0x28
    232c:	2700      	movs	r7, #0
    232e:	57e7      	ldrsb	r7, [r4, r7]
    2330:	ac0b      	add	r4, sp, #44	; 0x2c
    2332:	7826      	ldrb	r6, [r4, #0]
	if (user_radio_receive_frame)
    2334:	24a6      	movs	r4, #166	; 0xa6
    2336:	00a4      	lsls	r4, r4, #2
    2338:	5905      	ldr	r5, [r0, r4]
    233a:	2d00      	cmp	r5, #0
    233c:	d105      	bne.n	234a <_ZN8cMxRadio23usr_radio_receive_frameEhPhhah+0x26>
    233e:	3404      	adds	r4, #4
    2340:	5904      	ldr	r4, [r0, r4]
    2342:	07e3      	lsls	r3, r4, #31
    2344:	d406      	bmi.n	2354 <_ZN8cMxRadio23usr_radio_receive_frameEhPhhah+0x30>
		return (this->*user_radio_receive_frame)(len, frm, lqi,ed, crc_fail);
	else return frm;
    2346:	1c10      	adds	r0, r2, #0
    2348:	e00d      	b.n	2366 <_ZN8cMxRadio23usr_radio_receive_frameEhPhhah+0x42>
}

uint8_t* cMxRadio::usr_radio_receive_frame(uint8_t len, uint8_t *frm, uint8_t lqi, int8_t ed,uint8_t crc_fail)
{
	if (user_radio_receive_frame)
		return (this->*user_radio_receive_frame)(len, frm, lqi,ed, crc_fail);
    234a:	24a7      	movs	r4, #167	; 0xa7
    234c:	00a4      	lsls	r4, r4, #2
    234e:	5904      	ldr	r4, [r0, r4]
    2350:	07e3      	lsls	r3, r4, #31
    2352:	d502      	bpl.n	235a <_ZN8cMxRadio23usr_radio_receive_frameEhPhhah+0x36>
    2354:	1063      	asrs	r3, r4, #1
    2356:	58c3      	ldr	r3, [r0, r3]
    2358:	595d      	ldr	r5, [r3, r5]
    235a:	9b03      	ldr	r3, [sp, #12]
    235c:	1064      	asrs	r4, r4, #1
    235e:	1900      	adds	r0, r0, r4
    2360:	9700      	str	r7, [sp, #0]
    2362:	9601      	str	r6, [sp, #4]
    2364:	47a8      	blx	r5
	else return frm;
}
    2366:	b005      	add	sp, #20
    2368:	bdf0      	pop	{r4, r5, r6, r7, pc}
    236a:	46c0      	nop			; (mov r8, r8)

0000236c <_ZN8cMxRadio17usr_radio_tx_doneE15radio_tx_done_t>:

void cMxRadio::usr_radio_tx_done(radio_tx_done_t status)
{
    236c:	b510      	push	{r4, lr}
	if (user_radio_tx_done) (this->*user_radio_tx_done)(status);
    236e:	23a8      	movs	r3, #168	; 0xa8
    2370:	009b      	lsls	r3, r3, #2
    2372:	58c2      	ldr	r2, [r0, r3]
    2374:	2a00      	cmp	r2, #0
    2376:	d104      	bne.n	2382 <_ZN8cMxRadio17usr_radio_tx_doneE15radio_tx_done_t+0x16>
    2378:	3304      	adds	r3, #4
    237a:	58c3      	ldr	r3, [r0, r3]
    237c:	07dc      	lsls	r4, r3, #31
    237e:	d405      	bmi.n	238c <_ZN8cMxRadio17usr_radio_tx_doneE15radio_tx_done_t+0x20>
    2380:	e00a      	b.n	2398 <_ZN8cMxRadio17usr_radio_tx_doneE15radio_tx_done_t+0x2c>
    2382:	23a9      	movs	r3, #169	; 0xa9
    2384:	009b      	lsls	r3, r3, #2
    2386:	58c3      	ldr	r3, [r0, r3]
    2388:	07dc      	lsls	r4, r3, #31
    238a:	d502      	bpl.n	2392 <_ZN8cMxRadio17usr_radio_tx_doneE15radio_tx_done_t+0x26>
    238c:	105c      	asrs	r4, r3, #1
    238e:	5904      	ldr	r4, [r0, r4]
    2390:	58a2      	ldr	r2, [r4, r2]
    2392:	105b      	asrs	r3, r3, #1
    2394:	18c0      	adds	r0, r0, r3
    2396:	4790      	blx	r2
}
    2398:	bd10      	pop	{r4, pc}
    239a:	46c0      	nop			; (mov r8, r8)

0000239c <_ZN8cMxRadio19radio_receive_frameEv>:
/**
 * @brief Frame reception
 *
 */
void cMxRadio::radio_receive_frame(void)
{
    239c:	b5f0      	push	{r4, r5, r6, r7, lr}
    239e:	b087      	sub	sp, #28
    23a0:	1c04      	adds	r4, r0, #0

	uint8_t len, lqi, crc_fail;
	int8_t ed;

	/* @todo add RSSI_BASE_VALUE to get a dBm value */
	ed = (int8_t)trx_reg_read(RG_PHY_ED_LEVEL);
    23a2:	2107      	movs	r1, #7
    23a4:	4b12      	ldr	r3, [pc, #72]	; (23f0 <_ZN8cMxRadio19radio_receive_frameEv+0x54>)
    23a6:	4798      	blx	r3
    23a8:	9003      	str	r0, [sp, #12]
	len = trx_frame_read(radiostatus.rxframe, radiostatus.rxframesz, &lqi);
    23aa:	7c22      	ldrb	r2, [r4, #16]
    23ac:	270f      	movs	r7, #15
    23ae:	ab02      	add	r3, sp, #8
    23b0:	469c      	mov	ip, r3
    23b2:	4467      	add	r7, ip
    23b4:	1c20      	adds	r0, r4, #0
    23b6:	68e1      	ldr	r1, [r4, #12]
    23b8:	1c3b      	adds	r3, r7, #0
    23ba:	4d0e      	ldr	r5, [pc, #56]	; (23f4 <_ZN8cMxRadio19radio_receive_frameEv+0x58>)
    23bc:	47a8      	blx	r5
    23be:	1c05      	adds	r5, r0, #0
	len &= ~0x80;

#if defined(SR_RX_CRC_VALID)
	crc_fail = trx_bit_read(SR_RX_CRC_VALID) ? 0 : 1;
    23c0:	1c20      	adds	r0, r4, #0
    23c2:	2106      	movs	r1, #6
    23c4:	2280      	movs	r2, #128	; 0x80
    23c6:	2307      	movs	r3, #7
    23c8:	4e0b      	ldr	r6, [pc, #44]	; (23f8 <_ZN8cMxRadio19radio_receive_frameEv+0x5c>)
    23ca:	47b0      	blx	r6
		crc = CRC_CCITT_UPDATE(crc, *frm++);
	}
	crc_fail = (crc == 0)? 0: 1;
#endif
radiostatus.rxframe = usr_radio_receive_frame(len, radiostatus.rxframe,
		lqi, ed, crc_fail);
    23cc:	217f      	movs	r1, #127	; 0x7f
    23ce:	4029      	ands	r1, r5
    23d0:	783b      	ldrb	r3, [r7, #0]
    23d2:	466a      	mov	r2, sp
    23d4:	260c      	movs	r6, #12
    23d6:	5796      	ldrsb	r6, [r2, r6]
    23d8:	9600      	str	r6, [sp, #0]
	ed = (int8_t)trx_reg_read(RG_PHY_ED_LEVEL);
	len = trx_frame_read(radiostatus.rxframe, radiostatus.rxframesz, &lqi);
	len &= ~0x80;

#if defined(SR_RX_CRC_VALID)
	crc_fail = trx_bit_read(SR_RX_CRC_VALID) ? 0 : 1;
    23da:	4242      	negs	r2, r0
    23dc:	4142      	adcs	r2, r0
		crc = CRC_CCITT_UPDATE(crc, *frm++);
	}
	crc_fail = (crc == 0)? 0: 1;
#endif
radiostatus.rxframe = usr_radio_receive_frame(len, radiostatus.rxframe,
		lqi, ed, crc_fail);
    23de:	9201      	str	r2, [sp, #4]
    23e0:	1c20      	adds	r0, r4, #0
    23e2:	68e2      	ldr	r2, [r4, #12]
    23e4:	4d05      	ldr	r5, [pc, #20]	; (23fc <_ZN8cMxRadio19radio_receive_frameEv+0x60>)
    23e6:	47a8      	blx	r5
    23e8:	60e0      	str	r0, [r4, #12]
}
    23ea:	b007      	add	sp, #28
    23ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    23ee:	46c0      	nop			; (mov r8, r8)
    23f0:	00002a21 	.word	0x00002a21
    23f4:	00002b61 	.word	0x00002b61
    23f8:	00002a8d 	.word	0x00002a8d
    23fc:	00002325 	.word	0x00002325

00002400 <_ZN8cMxRadio10radio_initEPhh>:


/* === external functions ====================================================*/

void cMxRadio::radio_init(uint8_t * rxbuf, uint8_t rxbufsz)
{
    2400:	b530      	push	{r4, r5, lr}
    2402:	b083      	sub	sp, #12
    2404:	1c04      	adds	r4, r0, #0
	trx_regval_t status;
	/* init cpu peripherals and global IRQ enable */
	radiostatus.rxframe = rxbuf;
    2406:	60c1      	str	r1, [r0, #12]
	radiostatus.rxframesz = rxbufsz;
    2408:	7402      	strb	r2, [r0, #16]
	trx_io_init(1000000);
    240a:	492f      	ldr	r1, [pc, #188]	; (24c8 <_ZN8cMxRadio10radio_initEPhh+0xc8>)
    240c:	4b2f      	ldr	r3, [pc, #188]	; (24cc <_ZN8cMxRadio10radio_initEPhh+0xcc>)
    240e:	4798      	blx	r3
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    2410:	23c4      	movs	r3, #196	; 0xc4
    2412:	56e3      	ldrsb	r3, [r4, r3]
    2414:	3301      	adds	r3, #1
    2416:	d104      	bne.n	2422 <_ZN8cMxRadio10radio_initEPhh+0x22>
    2418:	482d      	ldr	r0, [pc, #180]	; (24d0 <_ZN8cMxRadio10radio_initEPhh+0xd0>)
    241a:	492e      	ldr	r1, [pc, #184]	; (24d4 <_ZN8cMxRadio10radio_initEPhh+0xd4>)
    241c:	2228      	movs	r2, #40	; 0x28
    241e:	4b2e      	ldr	r3, [pc, #184]	; (24d8 <_ZN8cMxRadio10radio_initEPhh+0xd8>)
    2420:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    else
        *obj->OUTCLR = obj->mask;
    2422:	1c23      	adds	r3, r4, #0
    2424:	33c4      	adds	r3, #196	; 0xc4
    2426:	68da      	ldr	r2, [r3, #12]
    2428:	685b      	ldr	r3, [r3, #4]
    242a:	6013      	str	r3, [r2, #0]
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    242c:	23e0      	movs	r3, #224	; 0xe0
    242e:	56e3      	ldrsb	r3, [r4, r3]
    2430:	3301      	adds	r3, #1
    2432:	d104      	bne.n	243e <_ZN8cMxRadio10radio_initEPhh+0x3e>
    2434:	4826      	ldr	r0, [pc, #152]	; (24d0 <_ZN8cMxRadio10radio_initEPhh+0xd0>)
    2436:	4927      	ldr	r1, [pc, #156]	; (24d4 <_ZN8cMxRadio10radio_initEPhh+0xd4>)
    2438:	2228      	movs	r2, #40	; 0x28
    243a:	4b27      	ldr	r3, [pc, #156]	; (24d8 <_ZN8cMxRadio10radio_initEPhh+0xd8>)
    243c:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    else
        *obj->OUTCLR = obj->mask;
    243e:	1c23      	adds	r3, r4, #0
    2440:	33e0      	adds	r3, #224	; 0xe0
    2442:	68da      	ldr	r2, [r3, #12]
    2444:	685b      	ldr	r3, [r3, #4]
    2446:	6013      	str	r3, [r2, #0]
	/* transceiver initialization */

	reset_pin=0;//TRX_RESET_LOW();
	sleep_pin=0;//TRX_SLPTR_LOW();
	DELAY_US(TRX_RESET_TIME_US);
    2448:	2006      	movs	r0, #6
    244a:	4b24      	ldr	r3, [pc, #144]	; (24dc <_ZN8cMxRadio10radio_initEPhh+0xdc>)
    244c:	4798      	blx	r3
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    244e:	23c4      	movs	r3, #196	; 0xc4
    2450:	56e3      	ldrsb	r3, [r4, r3]
    2452:	3301      	adds	r3, #1
    2454:	d104      	bne.n	2460 <_ZN8cMxRadio10radio_initEPhh+0x60>
    2456:	481e      	ldr	r0, [pc, #120]	; (24d0 <_ZN8cMxRadio10radio_initEPhh+0xd0>)
    2458:	491e      	ldr	r1, [pc, #120]	; (24d4 <_ZN8cMxRadio10radio_initEPhh+0xd4>)
    245a:	2228      	movs	r2, #40	; 0x28
    245c:	4b1e      	ldr	r3, [pc, #120]	; (24d8 <_ZN8cMxRadio10radio_initEPhh+0xd8>)
    245e:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    2460:	1c23      	adds	r3, r4, #0
    2462:	33c4      	adds	r3, #196	; 0xc4
    2464:	691a      	ldr	r2, [r3, #16]
    2466:	685b      	ldr	r3, [r3, #4]
    2468:	6013      	str	r3, [r2, #0]


//	if (trx_reg_read(RG_MAN_ID_0)==31) //atmel
//		m_myled=0;
	/* disable IRQ and clear any pending IRQs */
	trx_reg_write(RG_IRQ_MASK, 0);
    246a:	1c20      	adds	r0, r4, #0
    246c:	210e      	movs	r1, #14
    246e:	2200      	movs	r2, #0
    2470:	4b1b      	ldr	r3, [pc, #108]	; (24e0 <_ZN8cMxRadio10radio_initEPhh+0xe0>)
    2472:	4798      	blx	r3

	trx_reg_read(RG_IRQ_STATUS);
    2474:	1c20      	adds	r0, r4, #0
    2476:	210f      	movs	r1, #15
    2478:	4b1a      	ldr	r3, [pc, #104]	; (24e4 <_ZN8cMxRadio10radio_initEPhh+0xe4>)
    247a:	4798      	blx	r3
	DELAY_US(510);
#endif
	trx_reg_write(RG_TRX_STATE, CMD_FORCE_TRX_OFF);
	DELAY_US(510);
#else
	trx_bit_write(SR_TRX_CMD, CMD_TRX_OFF);
    247c:	2308      	movs	r3, #8
    247e:	9300      	str	r3, [sp, #0]
    2480:	1c20      	adds	r0, r4, #0
    2482:	2102      	movs	r1, #2
    2484:	221f      	movs	r2, #31
    2486:	2300      	movs	r3, #0
    2488:	4d17      	ldr	r5, [pc, #92]	; (24e8 <_ZN8cMxRadio10radio_initEPhh+0xe8>)
    248a:	47a8      	blx	r5
	DELAY_US(510);
    248c:	20ff      	movs	r0, #255	; 0xff
    248e:	0040      	lsls	r0, r0, #1
    2490:	4b12      	ldr	r3, [pc, #72]	; (24dc <_ZN8cMxRadio10radio_initEPhh+0xdc>)
    2492:	4798      	blx	r3
#endif

	do
	{
		status = trx_bit_read(SR_TRX_STATUS);
    2494:	4d15      	ldr	r5, [pc, #84]	; (24ec <_ZN8cMxRadio10radio_initEPhh+0xec>)
    2496:	1c20      	adds	r0, r4, #0
    2498:	2101      	movs	r1, #1
    249a:	221f      	movs	r2, #31
    249c:	2300      	movs	r3, #0
    249e:	47a8      	blx	r5
#else
	trx_bit_write(SR_TRX_CMD, CMD_TRX_OFF);
	DELAY_US(510);
#endif

	do
    24a0:	2808      	cmp	r0, #8
    24a2:	d1f8      	bne.n	2496 <_ZN8cMxRadio10radio_initEPhh+0x96>
	{
		status = trx_bit_read(SR_TRX_STATUS);
	}
	while (status != TRX_OFF);
	trx_bit_write(SR_TX_AUTO_CRC_ON, 1);
    24a4:	2301      	movs	r3, #1
    24a6:	9300      	str	r3, [sp, #0]
    24a8:	1c20      	adds	r0, r4, #0
    24aa:	2104      	movs	r1, #4
    24ac:	2220      	movs	r2, #32
    24ae:	3304      	adds	r3, #4
    24b0:	4d0d      	ldr	r5, [pc, #52]	; (24e8 <_ZN8cMxRadio10radio_initEPhh+0xe8>)
    24b2:	47a8      	blx	r5
	trx_reg_write(RG_IRQ_MASK, TRX_IRQ_RX_START | TRX_IRQ_TRX_END);
    24b4:	1c20      	adds	r0, r4, #0
    24b6:	210e      	movs	r1, #14
    24b8:	220c      	movs	r2, #12
    24ba:	4b09      	ldr	r3, [pc, #36]	; (24e0 <_ZN8cMxRadio10radio_initEPhh+0xe0>)
    24bc:	4798      	blx	r3

	radiostatus.state = STATE_OFF;
    24be:	2300      	movs	r3, #0
    24c0:	71e3      	strb	r3, [r4, #7]
	radiostatus.idle_state = STATE_OFF;
    24c2:	7223      	strb	r3, [r4, #8]
}
    24c4:	b003      	add	sp, #12
    24c6:	bd30      	pop	{r4, r5, pc}
    24c8:	000f4240 	.word	0x000f4240
    24cc:	00002919 	.word	0x00002919
    24d0:	0000ead8 	.word	0x0000ead8
    24d4:	0000eaf0 	.word	0x0000eaf0
    24d8:	00004f89 	.word	0x00004f89
    24dc:	00005069 	.word	0x00005069
    24e0:	000029b9 	.word	0x000029b9
    24e4:	00002a21 	.word	0x00002a21
    24e8:	00002aa5 	.word	0x00002aa5
    24ec:	00002a8d 	.word	0x00002a8d

000024f0 <_ZN8cMxRadio15radio_set_stateEh>:
	trx_bit_write(SR_TRX_CMD, CMD_FORCE_TRX_OFF);
	radio_set_state(state);
}

void cMxRadio::radio_set_state(volatile radio_state_t state)
{
    24f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    24f2:	464f      	mov	r7, r9
    24f4:	b480      	push	{r7}
    24f6:	b086      	sub	sp, #24
    24f8:	9002      	str	r0, [sp, #8]
    24fa:	230f      	movs	r3, #15
    24fc:	446b      	add	r3, sp
    24fe:	7019      	strb	r1, [r3, #0]
	volatile trx_regval_t cmd, expstatus, currstatus;
	uint8_t retries;
	bool do_sleep = false;

	switch(state)
    2500:	781b      	ldrb	r3, [r3, #0]
    2502:	b2db      	uxtb	r3, r3
    2504:	2b05      	cmp	r3, #5
    2506:	d83b      	bhi.n	2580 <_ZN8cMxRadio15radio_set_stateEh+0x90>
    2508:	009b      	lsls	r3, r3, #2
    250a:	4a65      	ldr	r2, [pc, #404]	; (26a0 <_ZN8cMxRadio15radio_set_stateEh+0x1b0>)
    250c:	58d3      	ldr	r3, [r2, r3]
    250e:	469f      	mov	pc, r3
		TRX_TX_PA_DI();
#endif
#ifdef TRX_RX_LNA_EI
		TRX_RX_LNA_DI();
#endif
		expstatus = TRX_OFF;
    2510:	2308      	movs	r3, #8
    2512:	2216      	movs	r2, #22
    2514:	446a      	add	r2, sp
    2516:	7013      	strb	r3, [r2, #0]
		cmd = CMD_TRX_OFF;
    2518:	2215      	movs	r2, #21
    251a:	446a      	add	r2, sp
    251c:	7013      	strb	r3, [r2, #0]
		break;
    251e:	e0b4      	b.n	268a <_ZN8cMxRadio15radio_set_stateEh+0x19a>
		if (radiostatus.rx_lna)
		{
			TRX_RX_LNA_EI();
		}
#endif
expstatus = RX_ON;
    2520:	2306      	movs	r3, #6
    2522:	2216      	movs	r2, #22
    2524:	446a      	add	r2, sp
    2526:	7013      	strb	r3, [r2, #0]
cmd = CMD_RX_ON;
    2528:	2215      	movs	r2, #21
    252a:	446a      	add	r2, sp
    252c:	7013      	strb	r3, [r2, #0]
break;
    252e:	e0ac      	b.n	268a <_ZN8cMxRadio15radio_set_stateEh+0x19a>

	case STATE_TX:
		expstatus = PLL_ON;
    2530:	2309      	movs	r3, #9
    2532:	2216      	movs	r2, #22
    2534:	446a      	add	r2, sp
    2536:	7013      	strb	r3, [r2, #0]
		cmd = CMD_PLL_ON;
    2538:	2215      	movs	r2, #21
    253a:	446a      	add	r2, sp
    253c:	7013      	strb	r3, [r2, #0]
		break;
    253e:	e0a4      	b.n	268a <_ZN8cMxRadio15radio_set_stateEh+0x19a>
if (radiostatus.rx_lna)
{
	TRX_RX_LNA_EI();
}
#endif
expstatus = RX_AACK_ON;
    2540:	2316      	movs	r3, #22
    2542:	2216      	movs	r2, #22
    2544:	446a      	add	r2, sp
    2546:	7013      	strb	r3, [r2, #0]
cmd = CMD_RX_AACK_ON;
    2548:	2215      	movs	r2, #21
    254a:	446a      	add	r2, sp
    254c:	7013      	strb	r3, [r2, #0]
break;
    254e:	e09c      	b.n	268a <_ZN8cMxRadio15radio_set_stateEh+0x19a>

	case STATE_TXAUTO:
		expstatus = TX_ARET_ON;
    2550:	2319      	movs	r3, #25
    2552:	2216      	movs	r2, #22
    2554:	446a      	add	r2, sp
    2556:	7013      	strb	r3, [r2, #0]
		cmd = CMD_TX_ARET_ON;
    2558:	2215      	movs	r2, #21
    255a:	446a      	add	r2, sp
    255c:	7013      	strb	r3, [r2, #0]
		break;
    255e:	e094      	b.n	268a <_ZN8cMxRadio15radio_set_stateEh+0x19a>
		TRX_TX_PA_DI();
#endif
#ifdef TRX_RX_LNA_EI
		TRX_RX_LNA_DI();
#endif
		expstatus = TRX_OFF;
    2560:	2208      	movs	r2, #8
    2562:	2316      	movs	r3, #22
    2564:	446b      	add	r3, sp
    2566:	701a      	strb	r2, [r3, #0]
		cmd = CMD_FORCE_TRX_OFF;
    2568:	3a05      	subs	r2, #5
    256a:	2315      	movs	r3, #21
    256c:	446b      	add	r3, sp
    256e:	701a      	strb	r2, [r3, #0]
		cmd = CMD_TRX_OFF;
		break;

	}

	if (STATE_SLEEP == radiostatus.state)
    2570:	9b02      	ldr	r3, [sp, #8]
    2572:	79db      	ldrb	r3, [r3, #7]
    2574:	2b05      	cmp	r3, #5
    2576:	d100      	bne.n	257a <_ZN8cMxRadio15radio_set_stateEh+0x8a>
    2578:	e08e      	b.n	2698 <_ZN8cMxRadio15radio_set_stateEh+0x1a8>
#ifdef TRX_RX_LNA_EI
		TRX_RX_LNA_DI();
#endif
		expstatus = TRX_OFF;
		cmd = CMD_FORCE_TRX_OFF;
		do_sleep = true;
    257a:	2301      	movs	r3, #1
    257c:	4699      	mov	r9, r3
    257e:	e03d      	b.n	25fc <_ZN8cMxRadio15radio_set_stateEh+0x10c>
 * @ingroup grpRadio
 */

void cMxRadio::radio_error(radio_error_t err)
{
	usr_radio_error(err);
    2580:	9802      	ldr	r0, [sp, #8]
    2582:	2104      	movs	r1, #4
    2584:	4b47      	ldr	r3, [pc, #284]	; (26a4 <_ZN8cMxRadio15radio_set_stateEh+0x1b4>)
    2586:	4798      	blx	r3
		do_sleep = true;
		break;

	default:
		radio_error(GENERAL_ERROR);
		expstatus = TRX_OFF;
    2588:	2308      	movs	r3, #8
    258a:	2216      	movs	r2, #22
    258c:	446a      	add	r2, sp
    258e:	7013      	strb	r3, [r2, #0]
		cmd = CMD_TRX_OFF;
    2590:	2215      	movs	r2, #21
    2592:	446a      	add	r2, sp
    2594:	7013      	strb	r3, [r2, #0]
		break;
    2596:	e078      	b.n	268a <_ZN8cMxRadio15radio_set_stateEh+0x19a>
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    2598:	23e0      	movs	r3, #224	; 0xe0
    259a:	9a02      	ldr	r2, [sp, #8]
    259c:	56d3      	ldrsb	r3, [r2, r3]
    259e:	3301      	adds	r3, #1
    25a0:	d104      	bne.n	25ac <_ZN8cMxRadio15radio_set_stateEh+0xbc>
    25a2:	4841      	ldr	r0, [pc, #260]	; (26a8 <_ZN8cMxRadio15radio_set_stateEh+0x1b8>)
    25a4:	4941      	ldr	r1, [pc, #260]	; (26ac <_ZN8cMxRadio15radio_set_stateEh+0x1bc>)
    25a6:	2228      	movs	r2, #40	; 0x28
    25a8:	4b41      	ldr	r3, [pc, #260]	; (26b0 <_ZN8cMxRadio15radio_set_stateEh+0x1c0>)
    25aa:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    else
        *obj->OUTCLR = obj->mask;
    25ac:	9b02      	ldr	r3, [sp, #8]
    25ae:	33e0      	adds	r3, #224	; 0xe0
    25b0:	68da      	ldr	r2, [r3, #12]
    25b2:	685b      	ldr	r3, [r3, #4]
    25b4:	6013      	str	r3, [r2, #0]
		 * be polled.  The state reads as 0b0011111 ("state transition
		 * in progress") while the transceiver is still in its startup
		 * phase, which does not match any of the "expstatus" values,
		 * so polling just continues.
		 */
		DELAY_US(500);
    25b6:	20fa      	movs	r0, #250	; 0xfa
    25b8:	0040      	lsls	r0, r0, #1
    25ba:	4b3e      	ldr	r3, [pc, #248]	; (26b4 <_ZN8cMxRadio15radio_set_stateEh+0x1c4>)
    25bc:	4798      	blx	r3
    25be:	2464      	movs	r4, #100	; 0x64
		 * to be enough under all circumstances.
		 */
		retries = 100;
		do
		{
			currstatus = trx_bit_read(SR_TRX_STATUS);
    25c0:	4f3d      	ldr	r7, [pc, #244]	; (26b8 <_ZN8cMxRadio15radio_set_stateEh+0x1c8>)
    25c2:	2517      	movs	r5, #23
    25c4:	446d      	add	r5, sp
			 */
			if (TRX_OFF == currstatus)
			{
				break;
			}
			DELAY_US(50);
    25c6:	4e3b      	ldr	r6, [pc, #236]	; (26b4 <_ZN8cMxRadio15radio_set_stateEh+0x1c4>)
		 * to be enough under all circumstances.
		 */
		retries = 100;
		do
		{
			currstatus = trx_bit_read(SR_TRX_STATUS);
    25c8:	9802      	ldr	r0, [sp, #8]
    25ca:	2101      	movs	r1, #1
    25cc:	221f      	movs	r2, #31
    25ce:	2300      	movs	r3, #0
    25d0:	47b8      	blx	r7
    25d2:	7028      	strb	r0, [r5, #0]
			/*
			 * Sleep could only be entered from TRX_OFF, so that's
			 * what is expected again.
			 */
			if (TRX_OFF == currstatus)
    25d4:	782b      	ldrb	r3, [r5, #0]
    25d6:	2b08      	cmp	r3, #8
    25d8:	d005      	beq.n	25e6 <_ZN8cMxRadio15radio_set_stateEh+0xf6>
			{
				break;
			}
			DELAY_US(50);
    25da:	2032      	movs	r0, #50	; 0x32
    25dc:	47b0      	blx	r6
    25de:	3c01      	subs	r4, #1
    25e0:	b2e4      	uxtb	r4, r4
		 * to be charged by the voltage regulator.  Give the crystal
		 * oscillator some time to start up.  5 ms (100 * 50 us) ought
		 * to be enough under all circumstances.
		 */
		retries = 100;
		do
    25e2:	2c00      	cmp	r4, #0
    25e4:	d1f0      	bne.n	25c8 <_ZN8cMxRadio15radio_set_stateEh+0xd8>
			}
			DELAY_US(50);
		}
		while (--retries);

		if (currstatus != TRX_OFF)
    25e6:	2317      	movs	r3, #23
    25e8:	446b      	add	r3, sp
    25ea:	781b      	ldrb	r3, [r3, #0]
    25ec:	2200      	movs	r2, #0
    25ee:	4691      	mov	r9, r2
    25f0:	2b08      	cmp	r3, #8
    25f2:	d003      	beq.n	25fc <_ZN8cMxRadio15radio_set_stateEh+0x10c>
 * @ingroup grpRadio
 */

void cMxRadio::radio_error(radio_error_t err)
{
	usr_radio_error(err);
    25f4:	9802      	ldr	r0, [sp, #8]
    25f6:	2101      	movs	r1, #1
    25f8:	4b2a      	ldr	r3, [pc, #168]	; (26a4 <_ZN8cMxRadio15radio_set_stateEh+0x1b4>)
    25fa:	4798      	blx	r3
		{
			/* radio didn't wake up */
			radio_error(STATE_SET_FAILED);
		}
	}
	trx_bit_write(SR_TRX_CMD, cmd);
    25fc:	2315      	movs	r3, #21
    25fe:	446b      	add	r3, sp
    2600:	781b      	ldrb	r3, [r3, #0]
    2602:	9300      	str	r3, [sp, #0]
    2604:	9802      	ldr	r0, [sp, #8]
    2606:	2102      	movs	r1, #2
    2608:	221f      	movs	r2, #31
    260a:	2300      	movs	r3, #0
    260c:	4c2b      	ldr	r4, [pc, #172]	; (26bc <_ZN8cMxRadio15radio_set_stateEh+0x1cc>)
    260e:	47a0      	blx	r4
    2610:	248c      	movs	r4, #140	; 0x8c

	retries = 140;              /* enough to await an ongoing frame
	 * reception */
	do
	{
		currstatus = trx_bit_read(SR_TRX_STATUS);
    2612:	4f29      	ldr	r7, [pc, #164]	; (26b8 <_ZN8cMxRadio15radio_set_stateEh+0x1c8>)
    2614:	2517      	movs	r5, #23
    2616:	446d      	add	r5, sp
		if (expstatus == currstatus)
		{
			break;
		}
		/** @todo must wait longer for 790/868/900 MHz radios */
		DELAY_US(32);
    2618:	4e26      	ldr	r6, [pc, #152]	; (26b4 <_ZN8cMxRadio15radio_set_stateEh+0x1c4>)

	retries = 140;              /* enough to await an ongoing frame
	 * reception */
	do
	{
		currstatus = trx_bit_read(SR_TRX_STATUS);
    261a:	9802      	ldr	r0, [sp, #8]
    261c:	2101      	movs	r1, #1
    261e:	221f      	movs	r2, #31
    2620:	2300      	movs	r3, #0
    2622:	47b8      	blx	r7
    2624:	7028      	strb	r0, [r5, #0]
		if (expstatus == currstatus)
    2626:	2316      	movs	r3, #22
    2628:	446b      	add	r3, sp
    262a:	781b      	ldrb	r3, [r3, #0]
    262c:	782a      	ldrb	r2, [r5, #0]
    262e:	b2db      	uxtb	r3, r3
    2630:	4293      	cmp	r3, r2
    2632:	d005      	beq.n	2640 <_ZN8cMxRadio15radio_set_stateEh+0x150>
		{
			break;
		}
		/** @todo must wait longer for 790/868/900 MHz radios */
		DELAY_US(32);
    2634:	2020      	movs	r0, #32
    2636:	47b0      	blx	r6
    2638:	3c01      	subs	r4, #1
    263a:	b2e4      	uxtb	r4, r4
	}
	trx_bit_write(SR_TRX_CMD, cmd);

	retries = 140;              /* enough to await an ongoing frame
	 * reception */
	do
    263c:	2c00      	cmp	r4, #0
    263e:	d1ec      	bne.n	261a <_ZN8cMxRadio15radio_set_stateEh+0x12a>
		/** @todo must wait longer for 790/868/900 MHz radios */
		DELAY_US(32);
	}
	while (--retries);

	if (expstatus != currstatus)
    2640:	2316      	movs	r3, #22
    2642:	446b      	add	r3, sp
    2644:	781b      	ldrb	r3, [r3, #0]
    2646:	2217      	movs	r2, #23
    2648:	446a      	add	r2, sp
    264a:	7812      	ldrb	r2, [r2, #0]
    264c:	b2db      	uxtb	r3, r3
    264e:	4293      	cmp	r3, r2
    2650:	d003      	beq.n	265a <_ZN8cMxRadio15radio_set_stateEh+0x16a>
 * @ingroup grpRadio
 */

void cMxRadio::radio_error(radio_error_t err)
{
	usr_radio_error(err);
    2652:	9802      	ldr	r0, [sp, #8]
    2654:	2101      	movs	r1, #1
    2656:	4b13      	ldr	r3, [pc, #76]	; (26a4 <_ZN8cMxRadio15radio_set_stateEh+0x1b4>)
    2658:	4798      	blx	r3
	if (expstatus != currstatus)
	{
		radio_error(STATE_SET_FAILED);
	}

	if (do_sleep)
    265a:	464b      	mov	r3, r9
    265c:	2b00      	cmp	r3, #0
    265e:	d00e      	beq.n	267e <_ZN8cMxRadio15radio_set_stateEh+0x18e>
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    2660:	23e0      	movs	r3, #224	; 0xe0
    2662:	9a02      	ldr	r2, [sp, #8]
    2664:	56d3      	ldrsb	r3, [r2, r3]
    2666:	3301      	adds	r3, #1
    2668:	d104      	bne.n	2674 <_ZN8cMxRadio15radio_set_stateEh+0x184>
    266a:	480f      	ldr	r0, [pc, #60]	; (26a8 <_ZN8cMxRadio15radio_set_stateEh+0x1b8>)
    266c:	490f      	ldr	r1, [pc, #60]	; (26ac <_ZN8cMxRadio15radio_set_stateEh+0x1bc>)
    266e:	2228      	movs	r2, #40	; 0x28
    2670:	4b0f      	ldr	r3, [pc, #60]	; (26b0 <_ZN8cMxRadio15radio_set_stateEh+0x1c0>)
    2672:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    2674:	9b02      	ldr	r3, [sp, #8]
    2676:	33e0      	adds	r3, #224	; 0xe0
    2678:	691a      	ldr	r2, [r3, #16]
    267a:	685b      	ldr	r3, [r3, #4]
    267c:	6013      	str	r3, [r2, #0]
	{
		sleep_pin=1;//TRX_SLPTR_HIGH();
	}

	radiostatus.state = state;
    267e:	230f      	movs	r3, #15
    2680:	446b      	add	r3, sp
    2682:	781b      	ldrb	r3, [r3, #0]
    2684:	9a02      	ldr	r2, [sp, #8]
    2686:	71d3      	strb	r3, [r2, #7]
    2688:	e006      	b.n	2698 <_ZN8cMxRadio15radio_set_stateEh+0x1a8>
		cmd = CMD_TRX_OFF;
		break;

	}

	if (STATE_SLEEP == radiostatus.state)
    268a:	9b02      	ldr	r3, [sp, #8]
    268c:	79db      	ldrb	r3, [r3, #7]
    268e:	2b05      	cmp	r3, #5
    2690:	d082      	beq.n	2598 <_ZN8cMxRadio15radio_set_stateEh+0xa8>
    2692:	2300      	movs	r3, #0
    2694:	4699      	mov	r9, r3
    2696:	e7b1      	b.n	25fc <_ZN8cMxRadio15radio_set_stateEh+0x10c>
	{
		sleep_pin=1;//TRX_SLPTR_HIGH();
	}

	radiostatus.state = state;
}
    2698:	b006      	add	sp, #24
    269a:	bc04      	pop	{r2}
    269c:	4691      	mov	r9, r2
    269e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    26a0:	0000ec80 	.word	0x0000ec80
    26a4:	000022fd 	.word	0x000022fd
    26a8:	0000ead8 	.word	0x0000ead8
    26ac:	0000eaf0 	.word	0x0000eaf0
    26b0:	00004f89 	.word	0x00004f89
    26b4:	00005069 	.word	0x00005069
    26b8:	00002a8d 	.word	0x00002a8d
    26bc:	00002aa5 	.word	0x00002aa5

000026c0 <_ZN8cMxRadio17radio_irq_handlerEh>:
 *
 * @parm cause  value of the interrupt status register
 *
 */
void cMxRadio::radio_irq_handler(uint8_t cause)
{
    26c0:	b570      	push	{r4, r5, r6, lr}
    26c2:	1c04      	adds	r4, r0, #0
    26c4:	1c0d      	adds	r5, r1, #0
	if (cause & TRX_IRQ_TRX_END)
    26c6:	070b      	lsls	r3, r1, #28
    26c8:	d52b      	bpl.n	2722 <_ZN8cMxRadio17radio_irq_handlerEh+0x62>
	{
		if (STATE_RX == radiostatus.state ||
    26ca:	79c3      	ldrb	r3, [r0, #7]
    26cc:	1e99      	subs	r1, r3, #2
    26ce:	22fd      	movs	r2, #253	; 0xfd
    26d0:	4211      	tst	r1, r2
    26d2:	d102      	bne.n	26da <_ZN8cMxRadio17radio_irq_handlerEh+0x1a>
				STATE_RXAUTO == radiostatus.state)
		{
			radio_receive_frame();
    26d4:	4b15      	ldr	r3, [pc, #84]	; (272c <_ZN8cMxRadio17radio_irq_handlerEh+0x6c>)
    26d6:	4798      	blx	r3
    26d8:	e023      	b.n	2722 <_ZN8cMxRadio17radio_irq_handlerEh+0x62>
		}
		else if (STATE_TX == radiostatus.state)
    26da:	2b01      	cmp	r3, #1
    26dc:	d107      	bne.n	26ee <_ZN8cMxRadio17radio_irq_handlerEh+0x2e>
		{
#ifdef TRX_TX_PA_EI
TRX_TX_PA_DI();
#endif
usr_radio_tx_done(TX_OK);
    26de:	2100      	movs	r1, #0
    26e0:	4b13      	ldr	r3, [pc, #76]	; (2730 <_ZN8cMxRadio17radio_irq_handlerEh+0x70>)
    26e2:	4798      	blx	r3
radio_set_state(radiostatus.idle_state);
    26e4:	7a21      	ldrb	r1, [r4, #8]
    26e6:	1c20      	adds	r0, r4, #0
    26e8:	4b12      	ldr	r3, [pc, #72]	; (2734 <_ZN8cMxRadio17radio_irq_handlerEh+0x74>)
    26ea:	4798      	blx	r3
    26ec:	e019      	b.n	2722 <_ZN8cMxRadio17radio_irq_handlerEh+0x62>
		}
		else if (STATE_TXAUTO == radiostatus.state)
    26ee:	2b03      	cmp	r3, #3
    26f0:	d117      	bne.n	2722 <_ZN8cMxRadio17radio_irq_handlerEh+0x62>
		{
#ifdef TRX_TX_PA_EI
			TRX_TX_PA_DI();
#endif
			uint8_t trac_status = trx_bit_read(SR_TRAC_STATUS);
    26f2:	2102      	movs	r1, #2
    26f4:	22e0      	movs	r2, #224	; 0xe0
    26f6:	3302      	adds	r3, #2
    26f8:	4e0f      	ldr	r6, [pc, #60]	; (2738 <_ZN8cMxRadio17radio_irq_handlerEh+0x78>)
    26fa:	47b0      	blx	r6
			radio_tx_done_t result;
			switch (trac_status)
    26fc:	2803      	cmp	r0, #3
    26fe:	d006      	beq.n	270e <_ZN8cMxRadio17radio_irq_handlerEh+0x4e>
    2700:	d307      	bcc.n	2712 <_ZN8cMxRadio17radio_irq_handlerEh+0x52>
			case TRAC_NO_ACK:
				result = TX_NO_ACK;
				break;

			default:
				result = TX_FAIL;
    2702:	3805      	subs	r0, #5
    2704:	4243      	negs	r3, r0
    2706:	4143      	adcs	r3, r0
    2708:	2103      	movs	r1, #3
    270a:	1ac9      	subs	r1, r1, r3
    270c:	e002      	b.n	2714 <_ZN8cMxRadio17radio_irq_handlerEh+0x54>
#endif
				result = TX_OK;
				break;

			case TRAC_CHANNEL_ACCESS_FAILURE:
				result = TX_CCA_FAIL;
    270e:	2101      	movs	r1, #1
    2710:	e000      	b.n	2714 <_ZN8cMxRadio17radio_irq_handlerEh+0x54>
			case TRAC_SUCCESS_DATA_PENDING:
#endif
#if defined TRAC_SUCCESS_WAIT_FOR_ACK
			case TRAC_SUCCESS_WAIT_FOR_ACK:
#endif
				result = TX_OK;
    2712:	2100      	movs	r1, #0
				break;

			default:
				result = TX_FAIL;
			}
			usr_radio_tx_done(result);
    2714:	1c20      	adds	r0, r4, #0
    2716:	4b06      	ldr	r3, [pc, #24]	; (2730 <_ZN8cMxRadio17radio_irq_handlerEh+0x70>)
    2718:	4798      	blx	r3
			radio_set_state(radiostatus.idle_state);
    271a:	7a21      	ldrb	r1, [r4, #8]
    271c:	1c20      	adds	r0, r4, #0
    271e:	4b05      	ldr	r3, [pc, #20]	; (2734 <_ZN8cMxRadio17radio_irq_handlerEh+0x74>)
    2720:	4798      	blx	r3
		}
	}
	usr_radio_irq(cause);
    2722:	1c20      	adds	r0, r4, #0
    2724:	1c29      	adds	r1, r5, #0
    2726:	4b05      	ldr	r3, [pc, #20]	; (273c <_ZN8cMxRadio17radio_irq_handlerEh+0x7c>)
    2728:	4798      	blx	r3
}
    272a:	bd70      	pop	{r4, r5, r6, pc}
    272c:	0000239d 	.word	0x0000239d
    2730:	0000236d 	.word	0x0000236d
    2734:	000024f1 	.word	0x000024f1
    2738:	00002a8d 	.word	0x00002a8d
    273c:	00002311 	.word	0x00002311

00002740 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t>:

	radiostatus.state = state;
}

void cMxRadio::radio_set_param(radio_attribute_t attr, radio_param_t parm)
{
    2740:	b5f0      	push	{r4, r5, r6, r7, lr}
    2742:	4647      	mov	r7, r8
    2744:	b480      	push	{r7}
    2746:	b082      	sub	sp, #8
    2748:	1c05      	adds	r5, r0, #0
	switch (attr)
    274a:	2908      	cmp	r1, #8
    274c:	d864      	bhi.n	2818 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xd8>
    274e:	0089      	lsls	r1, r1, #2
    2750:	4b35      	ldr	r3, [pc, #212]	; (2828 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xe8>)
    2752:	585b      	ldr	r3, [r3, r1]
    2754:	469f      	mov	pc, r3
	{
	case phyCurrentChannel:
		if (((int)parm.channel >= TRX_MIN_CHANNEL) &&
    2756:	b2d4      	uxtb	r4, r2
    2758:	1c23      	adds	r3, r4, #0
    275a:	3b0b      	subs	r3, #11
    275c:	2b0f      	cmp	r3, #15
    275e:	d807      	bhi.n	2770 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0x30>
		{
#ifdef CHINABAND
			trx_reg_write(RG_CC_CTRL_1, CCBAND);
			trx_reg_write(RG_CC_CTRL_0, parm.channel*2+CCNUMBER);
#else
			trx_bit_write(SR_CHANNEL, parm.channel);
    2760:	9400      	str	r4, [sp, #0]
    2762:	2108      	movs	r1, #8
    2764:	221f      	movs	r2, #31
    2766:	2300      	movs	r3, #0
    2768:	4e30      	ldr	r6, [pc, #192]	; (282c <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xec>)
    276a:	47b0      	blx	r6
#endif
			radiostatus.channel = parm.channel;
    276c:	712c      	strb	r4, [r5, #4]
    276e:	e056      	b.n	281e <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xde>
 * @ingroup grpRadio
 */

void cMxRadio::radio_error(radio_error_t err)
{
	usr_radio_error(err);
    2770:	2102      	movs	r1, #2
    2772:	4b2f      	ldr	r3, [pc, #188]	; (2830 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xf0>)
    2774:	4798      	blx	r3
    2776:	e052      	b.n	281e <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xde>
		{
			radio_error(SET_PARM_FAILED);
		}
#endif//chinaband
#else
		if (parm.tx_pwr >= -17 && parm.tx_pwr <= 3)
    2778:	b2d2      	uxtb	r2, r2
    277a:	1c13      	adds	r3, r2, #0
    277c:	3311      	adds	r3, #17
    277e:	b2db      	uxtb	r3, r3
    2780:	2b14      	cmp	r3, #20
    2782:	d809      	bhi.n	2798 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0x58>
					0x06,                         /* 0 dBm */
					0x04,                         /* 1 dBm */
					0x02,                         /* 2 dBm */
					0x00                          /* 3 dBm */
			};
			radiostatus.tx_pwr = parm.tx_pwr;
    2784:	7142      	strb	r2, [r0, #5]
			uint8_t idx = parm.tx_pwr + 17;
			uint8_t pwrval = pwrtable[idx];
    2786:	4a2b      	ldr	r2, [pc, #172]	; (2834 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xf4>)
			trx_bit_write(SR_TX_PWR, pwrval);
    2788:	5cd3      	ldrb	r3, [r2, r3]
    278a:	9300      	str	r3, [sp, #0]
    278c:	2105      	movs	r1, #5
    278e:	220f      	movs	r2, #15
    2790:	2300      	movs	r3, #0
    2792:	4c26      	ldr	r4, [pc, #152]	; (282c <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xec>)
    2794:	47a0      	blx	r4
    2796:	e042      	b.n	281e <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xde>
 * @ingroup grpRadio
 */

void cMxRadio::radio_error(radio_error_t err)
{
	usr_radio_error(err);
    2798:	2102      	movs	r1, #2
    279a:	4b25      	ldr	r3, [pc, #148]	; (2830 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xf0>)
    279c:	4798      	blx	r3
    279e:	e03e      	b.n	281e <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xde>
		}

#endif//rf212
		break;
	case phyCCAMode:
		if (parm.cca_mode <= 3)
    27a0:	b2d2      	uxtb	r2, r2
    27a2:	2a03      	cmp	r2, #3
    27a4:	d807      	bhi.n	27b6 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0x76>
		{
			radiostatus.cca_mode = parm.cca_mode;
    27a6:	7182      	strb	r2, [r0, #6]
			trx_bit_write(SR_CCA_MODE, radiostatus.cca_mode);
    27a8:	9200      	str	r2, [sp, #0]
    27aa:	2108      	movs	r1, #8
    27ac:	2260      	movs	r2, #96	; 0x60
    27ae:	2305      	movs	r3, #5
    27b0:	4c1e      	ldr	r4, [pc, #120]	; (282c <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xec>)
    27b2:	47a0      	blx	r4
    27b4:	e033      	b.n	281e <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xde>
 * @ingroup grpRadio
 */

void cMxRadio::radio_error(radio_error_t err)
{
	usr_radio_error(err);
    27b6:	2102      	movs	r1, #2
    27b8:	4b1d      	ldr	r3, [pc, #116]	; (2830 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xf0>)
    27ba:	4798      	blx	r3
    27bc:	e02f      	b.n	281e <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xde>
			radio_error(SET_PARM_FAILED);
		}
		break;

	case phyIdleState:
		radiostatus.idle_state = parm.idle_state;
    27be:	b2d1      	uxtb	r1, r2
    27c0:	7201      	strb	r1, [r0, #8]
		radio_set_state(parm.idle_state);
    27c2:	4b1d      	ldr	r3, [pc, #116]	; (2838 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xf8>)
    27c4:	4798      	blx	r3
		break;
    27c6:	e02a      	b.n	281e <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xde>

	case phyChannelsSupported:
		break;

	case phyPanId:
		trx_set_panid(parm.pan_id);
    27c8:	b294      	uxth	r4, r2
	/**
	 * @brief Write the PANID to the address filter registers
	 */
	 inline void trx_set_panid(uint16_t panid)
	{
	    trx_reg_write(RG_PAN_ID_0,(panid&0xff));
    27ca:	b2e2      	uxtb	r2, r4
    27cc:	2122      	movs	r1, #34	; 0x22
    27ce:	4e1b      	ldr	r6, [pc, #108]	; (283c <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xfc>)
    27d0:	47b0      	blx	r6
	    trx_reg_write(RG_PAN_ID_1,(panid>>8));
    27d2:	0a22      	lsrs	r2, r4, #8
    27d4:	1c28      	adds	r0, r5, #0
    27d6:	2123      	movs	r1, #35	; 0x23
    27d8:	47b0      	blx	r6
    27da:	e020      	b.n	281e <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xde>
		break;

	case phyShortAddr:
		trx_set_shortaddr(parm.short_addr);
    27dc:	b294      	uxth	r4, r2
	 * @brief Write the 16 bit short address to the
	 * address filter registers
	 */
	 inline void trx_set_shortaddr(uint16_t shortaddr)
	{
	    trx_reg_write(RG_SHORT_ADDR_0,(shortaddr&0xff));
    27de:	b2e2      	uxtb	r2, r4
    27e0:	2120      	movs	r1, #32
    27e2:	4e16      	ldr	r6, [pc, #88]	; (283c <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xfc>)
    27e4:	47b0      	blx	r6
	    trx_reg_write(RG_SHORT_ADDR_1,(shortaddr>>8));
    27e6:	0a22      	lsrs	r2, r4, #8
    27e8:	1c28      	adds	r0, r5, #0
    27ea:	2121      	movs	r1, #33	; 0x21
    27ec:	47b0      	blx	r6
    27ee:	e016      	b.n	281e <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xde>
		break;

	case phyLongAddr:
	{
		uint8_t regno, *ap;
		for (regno = RG_IEEE_ADDR_0, ap = (uint8_t *)parm.long_addr;
    27f0:	1c17      	adds	r7, r2, #0
    27f2:	3208      	adds	r2, #8
    27f4:	1c14      	adds	r4, r2, #0
    27f6:	2624      	movs	r6, #36	; 0x24
				regno <= RG_IEEE_ADDR_7;
				regno++, ap++)
			trx_reg_write(regno, *ap);
    27f8:	4b10      	ldr	r3, [pc, #64]	; (283c <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xfc>)
    27fa:	4698      	mov	r8, r3
    27fc:	783a      	ldrb	r2, [r7, #0]
    27fe:	1c28      	adds	r0, r5, #0
    2800:	1c31      	adds	r1, r6, #0
    2802:	47c0      	blx	r8
		break;

	case phyLongAddr:
	{
		uint8_t regno, *ap;
		for (regno = RG_IEEE_ADDR_0, ap = (uint8_t *)parm.long_addr;
    2804:	3601      	adds	r6, #1
    2806:	b2f6      	uxtb	r6, r6
    2808:	3701      	adds	r7, #1
    280a:	42a7      	cmp	r7, r4
    280c:	d1f6      	bne.n	27fc <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xbc>
    280e:	e006      	b.n	281e <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xde>
			trx_reg_write(regno, *ap);
		break;
	}

	case phyDataRate:
		trx_set_datarate(parm.data_rate);
    2810:	b2d1      	uxtb	r1, r2
    2812:	4b0b      	ldr	r3, [pc, #44]	; (2840 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0x100>)
    2814:	4798      	blx	r3
		break;
    2816:	e002      	b.n	281e <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xde>
 * @ingroup grpRadio
 */

void cMxRadio::radio_error(radio_error_t err)
{
	usr_radio_error(err);
    2818:	2102      	movs	r1, #2
    281a:	4b05      	ldr	r3, [pc, #20]	; (2830 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xf0>)
    281c:	4798      	blx	r3

	default:
		radio_error(SET_PARM_FAILED);
		break;
	}
}
    281e:	b002      	add	sp, #8
    2820:	bc04      	pop	{r2}
    2822:	4690      	mov	r8, r2
    2824:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2826:	46c0      	nop			; (mov r8, r8)
    2828:	0000ec98 	.word	0x0000ec98
    282c:	00002aa5 	.word	0x00002aa5
    2830:	000022fd 	.word	0x000022fd
    2834:	0000ecbc 	.word	0x0000ecbc
    2838:	000024f1 	.word	0x000024f1
    283c:	000029b9 	.word	0x000029b9
    2840:	000028a9 	.word	0x000028a9

00002844 <_ZN8cMxRadio16radio_send_frameEhPhh>:


void cMxRadio::radio_send_frame(uint8_t len, uint8_t *frm, uint8_t compcrc)
{
    2844:	b570      	push	{r4, r5, r6, lr}
    2846:	1c04      	adds	r4, r0, #0
    2848:	1c0e      	adds	r6, r1, #0
    284a:	1c15      	adds	r5, r2, #0
	{
		TRX_TX_PA_EI();
	}
#endif
/* this block should be made atomic */
	frm[2]++;
    284c:	7893      	ldrb	r3, [r2, #2]
    284e:	3301      	adds	r3, #1
    2850:	7093      	strb	r3, [r2, #2]
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    2852:	23e0      	movs	r3, #224	; 0xe0
    2854:	56c3      	ldrsb	r3, [r0, r3]
    2856:	3301      	adds	r3, #1
    2858:	d104      	bne.n	2864 <_ZN8cMxRadio16radio_send_frameEhPhh+0x20>
    285a:	480f      	ldr	r0, [pc, #60]	; (2898 <_ZN8cMxRadio16radio_send_frameEhPhh+0x54>)
    285c:	490f      	ldr	r1, [pc, #60]	; (289c <_ZN8cMxRadio16radio_send_frameEhPhh+0x58>)
    285e:	2228      	movs	r2, #40	; 0x28
    2860:	4b0f      	ldr	r3, [pc, #60]	; (28a0 <_ZN8cMxRadio16radio_send_frameEhPhh+0x5c>)
    2862:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    2864:	1c23      	adds	r3, r4, #0
    2866:	33e0      	adds	r3, #224	; 0xe0
    2868:	691a      	ldr	r2, [r3, #16]
    286a:	685b      	ldr	r3, [r3, #4]
    286c:	6013      	str	r3, [r2, #0]
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    286e:	23e0      	movs	r3, #224	; 0xe0
    2870:	56e3      	ldrsb	r3, [r4, r3]
    2872:	3301      	adds	r3, #1
    2874:	d104      	bne.n	2880 <_ZN8cMxRadio16radio_send_frameEhPhh+0x3c>
    2876:	4808      	ldr	r0, [pc, #32]	; (2898 <_ZN8cMxRadio16radio_send_frameEhPhh+0x54>)
    2878:	4908      	ldr	r1, [pc, #32]	; (289c <_ZN8cMxRadio16radio_send_frameEhPhh+0x58>)
    287a:	2228      	movs	r2, #40	; 0x28
    287c:	4b08      	ldr	r3, [pc, #32]	; (28a0 <_ZN8cMxRadio16radio_send_frameEhPhh+0x5c>)
    287e:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    else
        *obj->OUTCLR = obj->mask;
    2880:	1c23      	adds	r3, r4, #0
    2882:	33e0      	adds	r3, #224	; 0xe0
    2884:	68da      	ldr	r2, [r3, #12]
    2886:	685b      	ldr	r3, [r3, #4]
    2888:	6013      	str	r3, [r2, #0]
	sleep_pin=1;//TRX_SLPTR_HIGH();
	sleep_pin=0;//TRX_SLPTR_LOW();
	trx_frame_write(len, frm);
    288a:	1c20      	adds	r0, r4, #0
    288c:	1c31      	adds	r1, r6, #0
    288e:	1c2a      	adds	r2, r5, #0
    2890:	4b04      	ldr	r3, [pc, #16]	; (28a4 <_ZN8cMxRadio16radio_send_frameEhPhh+0x60>)
    2892:	4798      	blx	r3
	/***********************************/
}
    2894:	bd70      	pop	{r4, r5, r6, pc}
    2896:	46c0      	nop			; (mov r8, r8)
    2898:	0000ead8 	.word	0x0000ead8
    289c:	0000eaf0 	.word	0x0000eaf0
    28a0:	00004f89 	.word	0x00004f89
    28a4:	00002ad9 	.word	0x00002ad9

000028a8 <_ZN8cMxRadio16trx_set_datarateEh>:
}

#elif RADIO_TYPE == RADIO_AT86RF231

uint8_t cMxRadio::trx_set_datarate(uint8_t rate_type)
{
    28a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    28aa:	1c06      	adds	r6, r0, #0
    28ac:	1e0c      	subs	r4, r1, #0
trx_regval_t regval = TRX_NONE;

    switch(rate_type)
    28ae:	2c34      	cmp	r4, #52	; 0x34
    28b0:	d00f      	beq.n	28d2 <_ZN8cMxRadio16trx_set_datarateEh+0x2a>
    28b2:	2934      	cmp	r1, #52	; 0x34
    28b4:	d803      	bhi.n	28be <_ZN8cMxRadio16trx_set_datarateEh+0x16>
    {
        case OQPSK250: regval = TRX_OQPSK250; break;
    28b6:	2500      	movs	r5, #0

uint8_t cMxRadio::trx_set_datarate(uint8_t rate_type)
{
trx_regval_t regval = TRX_NONE;

    switch(rate_type)
    28b8:	2933      	cmp	r1, #51	; 0x33
    28ba:	d00b      	beq.n	28d4 <_ZN8cMxRadio16trx_set_datarateEh+0x2c>
    28bc:	e007      	b.n	28ce <_ZN8cMxRadio16trx_set_datarateEh+0x26>
    28be:	2954      	cmp	r1, #84	; 0x54
    28c0:	d003      	beq.n	28ca <_ZN8cMxRadio16trx_set_datarateEh+0x22>
    {
        case OQPSK250: regval = TRX_OQPSK250; break;
        case OQPSK500: regval = TRX_OQPSK500; break;
    28c2:	2501      	movs	r5, #1

uint8_t cMxRadio::trx_set_datarate(uint8_t rate_type)
{
trx_regval_t regval = TRX_NONE;

    switch(rate_type)
    28c4:	2994      	cmp	r1, #148	; 0x94
    28c6:	d005      	beq.n	28d4 <_ZN8cMxRadio16trx_set_datarateEh+0x2c>
    28c8:	e001      	b.n	28ce <_ZN8cMxRadio16trx_set_datarateEh+0x26>
    {
        case OQPSK250: regval = TRX_OQPSK250; break;
        case OQPSK500: regval = TRX_OQPSK500; break;
        case OQPSK1000: regval = TRX_OQPSK1000; break;
        case OQPSK2000: regval = TRX_OQPSK2000; break;
    28ca:	2503      	movs	r5, #3
    28cc:	e002      	b.n	28d4 <_ZN8cMxRadio16trx_set_datarateEh+0x2c>
        regval |=  trx_reg_read(RG_TRX_CTRL_2) & 0xfc ;
        trx_reg_write(RG_TRX_CTRL_2, regval);
    }
    else
    {
        rate_type = TRX_NONE;
    28ce:	24ff      	movs	r4, #255	; 0xff
    28d0:	e011      	b.n	28f6 <_ZN8cMxRadio16trx_set_datarateEh+0x4e>

    switch(rate_type)
    {
        case OQPSK250: regval = TRX_OQPSK250; break;
        case OQPSK500: regval = TRX_OQPSK500; break;
        case OQPSK1000: regval = TRX_OQPSK1000; break;
    28d2:	2502      	movs	r5, #2
        case OQPSK2000: regval = TRX_OQPSK2000; break;
        default: break;
    }
    if (regval != TRX_NONE)
    {
        trx_reg_write(RG_TRX_STATE, CMD_FORCE_TRX_OFF);
    28d4:	1c30      	adds	r0, r6, #0
    28d6:	2102      	movs	r1, #2
    28d8:	2203      	movs	r2, #3
    28da:	4f08      	ldr	r7, [pc, #32]	; (28fc <_ZN8cMxRadio16trx_set_datarateEh+0x54>)
    28dc:	47b8      	blx	r7
        regval |=  trx_reg_read(RG_TRX_CTRL_2) & 0xfc ;
    28de:	1c30      	adds	r0, r6, #0
    28e0:	210c      	movs	r1, #12
    28e2:	4b07      	ldr	r3, [pc, #28]	; (2900 <_ZN8cMxRadio16trx_set_datarateEh+0x58>)
    28e4:	4798      	blx	r3
    28e6:	2303      	movs	r3, #3
    28e8:	1c02      	adds	r2, r0, #0
    28ea:	439a      	bics	r2, r3
    28ec:	4315      	orrs	r5, r2
        trx_reg_write(RG_TRX_CTRL_2, regval);
    28ee:	b2ea      	uxtb	r2, r5
    28f0:	1c30      	adds	r0, r6, #0
    28f2:	210c      	movs	r1, #12
    28f4:	47b8      	blx	r7
    else
    {
        rate_type = TRX_NONE;
    }
    return rate_type;
}
    28f6:	1c20      	adds	r0, r4, #0
    28f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    28fa:	46c0      	nop			; (mov r8, r8)
    28fc:	000029b9 	.word	0x000029b9
    2900:	00002a21 	.word	0x00002a21

00002904 <_Z8IRQradiov>:
/* === Includes ============================================================ */
#include <MxRadio.h>

cMxRadio* gRadio = NULL;

void IRQradio(void){
    2904:	b508      	push	{r3, lr}
	gRadio->rf_irq_callback();
    2906:	4b02      	ldr	r3, [pc, #8]	; (2910 <_Z8IRQradiov+0xc>)
    2908:	6818      	ldr	r0, [r3, #0]
    290a:	4b02      	ldr	r3, [pc, #8]	; (2914 <_Z8IRQradiov+0x10>)
    290c:	4798      	blx	r3
}
    290e:	bd08      	pop	{r3, pc}
    2910:	20004030 	.word	0x20004030
    2914:	00002c1d 	.word	0x00002c1d

00002918 <_ZN8cMxRadio11trx_io_initEi>:
/* === external functions =================================================== */
void cMxRadio::trx_io_init (int spirate)
{
    2918:	b570      	push	{r4, r5, r6, lr}
    291a:	b084      	sub	sp, #16
    291c:	1c05      	adds	r5, r0, #0
    291e:	1c0e      	adds	r6, r1, #0
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    2920:	23a8      	movs	r3, #168	; 0xa8
    2922:	56c3      	ldrsb	r3, [r0, r3]
    2924:	3301      	adds	r3, #1
    2926:	d104      	bne.n	2932 <_ZN8cMxRadio11trx_io_initEi+0x1a>
    2928:	4818      	ldr	r0, [pc, #96]	; (298c <_ZN8cMxRadio11trx_io_initEi+0x74>)
    292a:	4919      	ldr	r1, [pc, #100]	; (2990 <_ZN8cMxRadio11trx_io_initEi+0x78>)
    292c:	2228      	movs	r2, #40	; 0x28
    292e:	4b19      	ldr	r3, [pc, #100]	; (2994 <_ZN8cMxRadio11trx_io_initEi+0x7c>)
    2930:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    2932:	1c2b      	adds	r3, r5, #0
    2934:	33a8      	adds	r3, #168	; 0xa8
    2936:	691a      	ldr	r2, [r3, #16]
    2938:	685b      	ldr	r3, [r3, #4]
    293a:	6013      	str	r3, [r2, #0]

	m_cs = 1;
	m_spi.format(8, 0);
    293c:	1c2c      	adds	r4, r5, #0
    293e:	3414      	adds	r4, #20
    2940:	1c20      	adds	r0, r4, #0
    2942:	2108      	movs	r1, #8
    2944:	2200      	movs	r2, #0
    2946:	4b14      	ldr	r3, [pc, #80]	; (2998 <_ZN8cMxRadio11trx_io_initEi+0x80>)
    2948:	4798      	blx	r3
	m_spi.frequency(spirate);
    294a:	1c20      	adds	r0, r4, #0
    294c:	1c31      	adds	r1, r6, #0
    294e:	4b13      	ldr	r3, [pc, #76]	; (299c <_ZN8cMxRadio11trx_io_initEi+0x84>)
    2950:	4798      	blx	r3
	/////////////////////////////////////////////////////////////////////
	/////modification BM irq_pin.rise(this,&cMxRadio::rf_irq_callback);
	//////////////////////////////////////////////////////////////////////
	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    2952:	ac01      	add	r4, sp, #4
    2954:	1c20      	adds	r0, r4, #0
    2956:	4b12      	ldr	r3, [pc, #72]	; (29a0 <_ZN8cMxRadio11trx_io_initEi+0x88>)
    2958:	4798      	blx	r3
	// put the button as EXTINT
	eint_chan_conf.gpio_pin           = PIN_PB00A_EIC_EXTINT0;
    295a:	2320      	movs	r3, #32
    295c:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_mux       = MUX_PB00A_EIC_EXTINT0 ;
    295e:	2300      	movs	r3, #0
    2960:	6063      	str	r3, [r4, #4]
	eint_chan_conf.detection_criteria = EXTINT_DETECT_RISING;
    2962:	2201      	movs	r2, #1
    2964:	72e2      	strb	r2, [r4, #11]
	eint_chan_conf.filter_input_signal = false;
    2966:	72a3      	strb	r3, [r4, #10]
		
	extint_chan_set_config(0, &eint_chan_conf);
    2968:	2000      	movs	r0, #0
    296a:	1c21      	adds	r1, r4, #0
    296c:	4b0d      	ldr	r3, [pc, #52]	; (29a4 <_ZN8cMxRadio11trx_io_initEi+0x8c>)
    296e:	4798      	blx	r3
	//configuration callback
	gRadio = this;
    2970:	4b0d      	ldr	r3, [pc, #52]	; (29a8 <_ZN8cMxRadio11trx_io_initEi+0x90>)
    2972:	601d      	str	r5, [r3, #0]
	extint_register_callback(&IRQradio,0,EXTINT_CALLBACK_TYPE_DETECT);
    2974:	480d      	ldr	r0, [pc, #52]	; (29ac <_ZN8cMxRadio11trx_io_initEi+0x94>)
    2976:	2100      	movs	r1, #0
    2978:	2200      	movs	r2, #0
    297a:	4b0d      	ldr	r3, [pc, #52]	; (29b0 <_ZN8cMxRadio11trx_io_initEi+0x98>)
    297c:	4798      	blx	r3
	//InterruptManager::get()->add_handler(ppsISR, EIC_IRQn);
	//ppsIsrr.attach(&ppsISR);
	//activation callback
		extint_chan_enable_callback(0,EXTINT_CALLBACK_TYPE_DETECT);		
    297e:	2000      	movs	r0, #0
    2980:	2100      	movs	r1, #0
    2982:	4b0c      	ldr	r3, [pc, #48]	; (29b4 <_ZN8cMxRadio11trx_io_initEi+0x9c>)
    2984:	4798      	blx	r3
	TRX_SLPTR_INIT();
	SPI_INIT(spirate);
	TRX_IRQ_INIT();
	EI_TRX_IRQ();
	*/
}
    2986:	b004      	add	sp, #16
    2988:	bd70      	pop	{r4, r5, r6, pc}
    298a:	46c0      	nop			; (mov r8, r8)
    298c:	0000ead8 	.word	0x0000ead8
    2990:	0000eaf0 	.word	0x0000eaf0
    2994:	00004f89 	.word	0x00004f89
    2998:	00004ca1 	.word	0x00004ca1
    299c:	00004cbd 	.word	0x00004cbd
    29a0:	0000415d 	.word	0x0000415d
    29a4:	00004171 	.word	0x00004171
    29a8:	20004030 	.word	0x20004030
    29ac:	00002905 	.word	0x00002905
    29b0:	0000405d 	.word	0x0000405d
    29b4:	00004085 	.word	0x00004085

000029b8 <_ZN8cMxRadio13trx_reg_writeEhh>:

void cMxRadio::trx_reg_write(uint8_t addr, trx_regval_t val)
{
    29b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    29ba:	1c04      	adds	r4, r0, #0
    29bc:	1c17      	adds	r7, r2, #0

	addr = TRX_CMD_RW | (TRX_CMD_RADDR_MASK & addr);
    29be:	23c0      	movs	r3, #192	; 0xc0
    29c0:	4319      	orrs	r1, r3
    29c2:	1c0d      	adds	r5, r1, #0
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    29c4:	3b18      	subs	r3, #24
    29c6:	56c3      	ldrsb	r3, [r0, r3]
    29c8:	3301      	adds	r3, #1
    29ca:	d104      	bne.n	29d6 <_ZN8cMxRadio13trx_reg_writeEhh+0x1e>
    29cc:	4810      	ldr	r0, [pc, #64]	; (2a10 <_ZN8cMxRadio13trx_reg_writeEhh+0x58>)
    29ce:	4911      	ldr	r1, [pc, #68]	; (2a14 <_ZN8cMxRadio13trx_reg_writeEhh+0x5c>)
    29d0:	2228      	movs	r2, #40	; 0x28
    29d2:	4b11      	ldr	r3, [pc, #68]	; (2a18 <_ZN8cMxRadio13trx_reg_writeEhh+0x60>)
    29d4:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    else
        *obj->OUTCLR = obj->mask;
    29d6:	1c23      	adds	r3, r4, #0
    29d8:	33a8      	adds	r3, #168	; 0xa8
    29da:	68da      	ldr	r2, [r3, #12]
    29dc:	685b      	ldr	r3, [r3, #4]
    29de:	6013      	str	r3, [r2, #0]

	m_cs = 0;//SPI_SELN_LOW();
	m_spi.write(addr);//SPI_DATA_REG = addr;
    29e0:	1c26      	adds	r6, r4, #0
    29e2:	3614      	adds	r6, #20
    29e4:	1c30      	adds	r0, r6, #0
    29e6:	1c29      	adds	r1, r5, #0
    29e8:	4d0c      	ldr	r5, [pc, #48]	; (2a1c <_ZN8cMxRadio13trx_reg_writeEhh+0x64>)
    29ea:	47a8      	blx	r5
	//SPI_WAITFOR();
	m_spi.write(val);//SPI_DATA_REG = val;
    29ec:	1c30      	adds	r0, r6, #0
    29ee:	1c39      	adds	r1, r7, #0
    29f0:	47a8      	blx	r5
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    29f2:	23a8      	movs	r3, #168	; 0xa8
    29f4:	56e3      	ldrsb	r3, [r4, r3]
    29f6:	3301      	adds	r3, #1
    29f8:	d104      	bne.n	2a04 <_ZN8cMxRadio13trx_reg_writeEhh+0x4c>
    29fa:	4805      	ldr	r0, [pc, #20]	; (2a10 <_ZN8cMxRadio13trx_reg_writeEhh+0x58>)
    29fc:	4905      	ldr	r1, [pc, #20]	; (2a14 <_ZN8cMxRadio13trx_reg_writeEhh+0x5c>)
    29fe:	2228      	movs	r2, #40	; 0x28
    2a00:	4b05      	ldr	r3, [pc, #20]	; (2a18 <_ZN8cMxRadio13trx_reg_writeEhh+0x60>)
    2a02:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    2a04:	34a8      	adds	r4, #168	; 0xa8
    2a06:	6923      	ldr	r3, [r4, #16]
    2a08:	6862      	ldr	r2, [r4, #4]
    2a0a:	601a      	str	r2, [r3, #0]
	//SPI_WAITFOR();
	m_cs = 1;//SPI_SELN_HIGH();
}
    2a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2a0e:	46c0      	nop			; (mov r8, r8)
    2a10:	0000ead8 	.word	0x0000ead8
    2a14:	0000eaf0 	.word	0x0000eaf0
    2a18:	00004f89 	.word	0x00004f89
    2a1c:	00004cd5 	.word	0x00004cd5

00002a20 <_ZN8cMxRadio12trx_reg_readEh>:

trx_regval_t cMxRadio::trx_reg_read(uint8_t addr)
{
    2a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a22:	1c04      	adds	r4, r0, #0

	uint8_t val;

	addr=TRX_CMD_RR | (TRX_CMD_RADDR_MASK & addr);
    2a24:	253f      	movs	r5, #63	; 0x3f
    2a26:	4029      	ands	r1, r5
    2a28:	3541      	adds	r5, #65	; 0x41
    2a2a:	430d      	orrs	r5, r1
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    2a2c:	23a8      	movs	r3, #168	; 0xa8
    2a2e:	56c3      	ldrsb	r3, [r0, r3]
    2a30:	3301      	adds	r3, #1
    2a32:	d104      	bne.n	2a3e <_ZN8cMxRadio12trx_reg_readEh+0x1e>
    2a34:	4811      	ldr	r0, [pc, #68]	; (2a7c <_ZN8cMxRadio12trx_reg_readEh+0x5c>)
    2a36:	4912      	ldr	r1, [pc, #72]	; (2a80 <_ZN8cMxRadio12trx_reg_readEh+0x60>)
    2a38:	2228      	movs	r2, #40	; 0x28
    2a3a:	4b12      	ldr	r3, [pc, #72]	; (2a84 <_ZN8cMxRadio12trx_reg_readEh+0x64>)
    2a3c:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    else
        *obj->OUTCLR = obj->mask;
    2a3e:	1c23      	adds	r3, r4, #0
    2a40:	33a8      	adds	r3, #168	; 0xa8
    2a42:	68da      	ldr	r2, [r3, #12]
    2a44:	685b      	ldr	r3, [r3, #4]
    2a46:	6013      	str	r3, [r2, #0]

	// Select transceiver
	m_cs = 0;//SPI_SELN_LOW();

	m_spi.write(addr);//SPI_DATA_REG = addr;
    2a48:	1c27      	adds	r7, r4, #0
    2a4a:	3714      	adds	r7, #20
    2a4c:	1c38      	adds	r0, r7, #0
    2a4e:	1c29      	adds	r1, r5, #0
    2a50:	4e0d      	ldr	r6, [pc, #52]	; (2a88 <_ZN8cMxRadio12trx_reg_readEh+0x68>)
    2a52:	47b0      	blx	r6
	//SPI_WAITFOR();
	val=m_spi.write(addr);//SPI_DATA_REG = addr;        /* dummy out */
    2a54:	1c38      	adds	r0, r7, #0
    2a56:	1c29      	adds	r1, r5, #0
    2a58:	47b0      	blx	r6
    2a5a:	b2c5      	uxtb	r5, r0
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    2a5c:	23a8      	movs	r3, #168	; 0xa8
    2a5e:	56e3      	ldrsb	r3, [r4, r3]
    2a60:	3301      	adds	r3, #1
    2a62:	d104      	bne.n	2a6e <_ZN8cMxRadio12trx_reg_readEh+0x4e>
    2a64:	4805      	ldr	r0, [pc, #20]	; (2a7c <_ZN8cMxRadio12trx_reg_readEh+0x5c>)
    2a66:	4906      	ldr	r1, [pc, #24]	; (2a80 <_ZN8cMxRadio12trx_reg_readEh+0x60>)
    2a68:	2228      	movs	r2, #40	; 0x28
    2a6a:	4b06      	ldr	r3, [pc, #24]	; (2a84 <_ZN8cMxRadio12trx_reg_readEh+0x64>)
    2a6c:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    2a6e:	34a8      	adds	r4, #168	; 0xa8
    2a70:	6923      	ldr	r3, [r4, #16]
    2a72:	6862      	ldr	r2, [r4, #4]
    2a74:	601a      	str	r2, [r3, #0]
	//val = SPI_DATA_REG;

	m_cs=1;//SPI_SELN_HIGH();

	return (trx_regval_t)val;
}
    2a76:	1c28      	adds	r0, r5, #0
    2a78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2a7a:	46c0      	nop			; (mov r8, r8)
    2a7c:	0000ead8 	.word	0x0000ead8
    2a80:	0000eaf0 	.word	0x0000eaf0
    2a84:	00004f89 	.word	0x00004f89
    2a88:	00004cd5 	.word	0x00004cd5

00002a8c <_ZN8cMxRadio12trx_bit_readEhhh>:
#include <MxRadio.h>


/* === functions ========================================= */
trx_regval_t cMxRadio::trx_bit_read(uint8_t addr, trx_regval_t mask, uint8_t pos)
{
    2a8c:	b538      	push	{r3, r4, r5, lr}
    2a8e:	1c15      	adds	r5, r2, #0
    2a90:	1c1c      	adds	r4, r3, #0
trx_regval_t data;
    data = trx_reg_read(addr);
    2a92:	4b03      	ldr	r3, [pc, #12]	; (2aa0 <_ZN8cMxRadio12trx_bit_readEhhh+0x14>)
    2a94:	4798      	blx	r3
    data &= mask;
    data >>= pos;
    2a96:	4028      	ands	r0, r5
    2a98:	4120      	asrs	r0, r4
    return data;
    2a9a:	b2c0      	uxtb	r0, r0
}
    2a9c:	bd38      	pop	{r3, r4, r5, pc}
    2a9e:	46c0      	nop			; (mov r8, r8)
    2aa0:	00002a21 	.word	0x00002a21

00002aa4 <_ZN8cMxRadio13trx_bit_writeEhhhh>:

#include <MxRadio.h>

/* === functions ========================================= */
void cMxRadio::trx_bit_write(uint8_t addr, trx_regval_t mask, uint8_t pos, trx_regval_t value)
{
    2aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2aa6:	b083      	sub	sp, #12
    2aa8:	1c05      	adds	r5, r0, #0
    2aaa:	1c16      	adds	r6, r2, #0
    2aac:	1c1c      	adds	r4, r3, #0
    2aae:	ab08      	add	r3, sp, #32
    2ab0:	781f      	ldrb	r7, [r3, #0]

trx_regval_t tmp;
    tmp = trx_reg_read(addr);
    2ab2:	9101      	str	r1, [sp, #4]
    2ab4:	4b06      	ldr	r3, [pc, #24]	; (2ad0 <_ZN8cMxRadio13trx_bit_writeEhhhh+0x2c>)
    2ab6:	4798      	blx	r3
    tmp &= ~mask;
    2ab8:	43b0      	bics	r0, r6
    2aba:	b2c0      	uxtb	r0, r0
    value <<= pos;
    2abc:	1c3a      	adds	r2, r7, #0
    2abe:	40a2      	lsls	r2, r4
    value &=mask;
    2ac0:	4032      	ands	r2, r6
    value |= tmp;
    trx_reg_write(addr, value);
    2ac2:	4302      	orrs	r2, r0
    2ac4:	1c28      	adds	r0, r5, #0
    2ac6:	9901      	ldr	r1, [sp, #4]
    2ac8:	4b02      	ldr	r3, [pc, #8]	; (2ad4 <_ZN8cMxRadio13trx_bit_writeEhhhh+0x30>)
    2aca:	4798      	blx	r3
    return;
}
    2acc:	b003      	add	sp, #12
    2ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ad0:	00002a21 	.word	0x00002a21
    2ad4:	000029b9 	.word	0x000029b9

00002ad8 <_ZN8cMxRadio15trx_frame_writeEhPh>:
#include <MxRadio.h>

/* === functions ========================================= */

void cMxRadio::trx_frame_write(uint8_t length, uint8_t *data)
{
    2ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ada:	b083      	sub	sp, #12
    2adc:	1c06      	adds	r6, r0, #0
    2ade:	1c0f      	adds	r7, r1, #0
    2ae0:	1c15      	adds	r5, r2, #0
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    2ae2:	23a8      	movs	r3, #168	; 0xa8
    2ae4:	56c3      	ldrsb	r3, [r0, r3]
    2ae6:	3301      	adds	r3, #1
    2ae8:	d104      	bne.n	2af4 <_ZN8cMxRadio15trx_frame_writeEhPh+0x1c>
    2aea:	4819      	ldr	r0, [pc, #100]	; (2b50 <_ZN8cMxRadio15trx_frame_writeEhPh+0x78>)
    2aec:	4919      	ldr	r1, [pc, #100]	; (2b54 <_ZN8cMxRadio15trx_frame_writeEhPh+0x7c>)
    2aee:	2228      	movs	r2, #40	; 0x28
    2af0:	4b19      	ldr	r3, [pc, #100]	; (2b58 <_ZN8cMxRadio15trx_frame_writeEhPh+0x80>)
    2af2:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    else
        *obj->OUTCLR = obj->mask;
    2af4:	1c33      	adds	r3, r6, #0
    2af6:	33a8      	adds	r3, #168	; 0xa8
    2af8:	68da      	ldr	r2, [r3, #12]
    2afa:	685b      	ldr	r3, [r3, #4]
    2afc:	6013      	str	r3, [r2, #0]

    // Select transceiver
    m_cs=0;//SPI_SELN_LOW();

    m_spi.write(TRX_CMD_FW);//SPI_DATA_REG = TRX_CMD_FW;
    2afe:	2314      	movs	r3, #20
    2b00:	469c      	mov	ip, r3
    2b02:	44b4      	add	ip, r6
    2b04:	4663      	mov	r3, ip
    2b06:	9301      	str	r3, [sp, #4]
    2b08:	4660      	mov	r0, ip
    2b0a:	2160      	movs	r1, #96	; 0x60
    2b0c:	4c13      	ldr	r4, [pc, #76]	; (2b5c <_ZN8cMxRadio15trx_frame_writeEhPh+0x84>)
    2b0e:	47a0      	blx	r4
    //SPI_WAITFOR();
    m_spi.write(length);//SPI_DATA_REG = length;
    2b10:	9801      	ldr	r0, [sp, #4]
    2b12:	1c39      	adds	r1, r7, #0
    2b14:	47a0      	blx	r4
    2b16:	1c2c      	adds	r4, r5, #0
    2b18:	3f01      	subs	r7, #1
    2b1a:	b2ff      	uxtb	r7, r7
    2b1c:	3701      	adds	r7, #1
    2b1e:	19ed      	adds	r5, r5, r7

    do
    {
        //SPI_WAITFOR();
    	m_spi.write(*data++);//SPI_DATA_REG = *data++;
    2b20:	4f0e      	ldr	r7, [pc, #56]	; (2b5c <_ZN8cMxRadio15trx_frame_writeEhPh+0x84>)
    2b22:	7821      	ldrb	r1, [r4, #0]
    2b24:	9801      	ldr	r0, [sp, #4]
    2b26:	47b8      	blx	r7
    2b28:	3401      	adds	r4, #1

    m_spi.write(TRX_CMD_FW);//SPI_DATA_REG = TRX_CMD_FW;
    //SPI_WAITFOR();
    m_spi.write(length);//SPI_DATA_REG = length;

    do
    2b2a:	42ac      	cmp	r4, r5
    2b2c:	d1f9      	bne.n	2b22 <_ZN8cMxRadio15trx_frame_writeEhPh+0x4a>
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    2b2e:	23a8      	movs	r3, #168	; 0xa8
    2b30:	56f3      	ldrsb	r3, [r6, r3]
    2b32:	3301      	adds	r3, #1
    2b34:	d104      	bne.n	2b40 <_ZN8cMxRadio15trx_frame_writeEhPh+0x68>
    2b36:	4806      	ldr	r0, [pc, #24]	; (2b50 <_ZN8cMxRadio15trx_frame_writeEhPh+0x78>)
    2b38:	4906      	ldr	r1, [pc, #24]	; (2b54 <_ZN8cMxRadio15trx_frame_writeEhPh+0x7c>)
    2b3a:	2228      	movs	r2, #40	; 0x28
    2b3c:	4b06      	ldr	r3, [pc, #24]	; (2b58 <_ZN8cMxRadio15trx_frame_writeEhPh+0x80>)
    2b3e:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    2b40:	1c33      	adds	r3, r6, #0
    2b42:	33a8      	adds	r3, #168	; 0xa8
    2b44:	691a      	ldr	r2, [r3, #16]
    2b46:	685b      	ldr	r3, [r3, #4]
    2b48:	6013      	str	r3, [r2, #0]

    //SPI_WAITFOR(); /* wait here until last byte is out otherwise underrun irq */

    // Deselect Slave
    m_cs=1;//SPI_SELN_HIGH();
}
    2b4a:	b003      	add	sp, #12
    2b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b4e:	46c0      	nop			; (mov r8, r8)
    2b50:	0000ead8 	.word	0x0000ead8
    2b54:	0000eaf0 	.word	0x0000eaf0
    2b58:	00004f89 	.word	0x00004f89
    2b5c:	00004cd5 	.word	0x00004cd5

00002b60 <_ZN8cMxRadio14trx_frame_readEPhhS0_>:

uint8_t cMxRadio::trx_frame_read(uint8_t *data, uint8_t datasz, uint8_t *lqi)
{
    2b60:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b62:	4657      	mov	r7, sl
    2b64:	464e      	mov	r6, r9
    2b66:	b4c0      	push	{r6, r7}
    2b68:	b083      	sub	sp, #12
    2b6a:	1c07      	adds	r7, r0, #0
    2b6c:	9101      	str	r1, [sp, #4]
    2b6e:	1c15      	adds	r5, r2, #0
    2b70:	4699      	mov	r9, r3
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    2b72:	23a8      	movs	r3, #168	; 0xa8
    2b74:	56c3      	ldrsb	r3, [r0, r3]
    2b76:	3301      	adds	r3, #1
    2b78:	d104      	bne.n	2b84 <_ZN8cMxRadio14trx_frame_readEPhhS0_+0x24>
    2b7a:	4824      	ldr	r0, [pc, #144]	; (2c0c <_ZN8cMxRadio14trx_frame_readEPhhS0_+0xac>)
    2b7c:	4924      	ldr	r1, [pc, #144]	; (2c10 <_ZN8cMxRadio14trx_frame_readEPhhS0_+0xb0>)
    2b7e:	2228      	movs	r2, #40	; 0x28
    2b80:	4b24      	ldr	r3, [pc, #144]	; (2c14 <_ZN8cMxRadio14trx_frame_readEPhhS0_+0xb4>)
    2b82:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    else
        *obj->OUTCLR = obj->mask;
    2b84:	1c3b      	adds	r3, r7, #0
    2b86:	33a8      	adds	r3, #168	; 0xa8
    2b88:	68da      	ldr	r2, [r3, #12]
    2b8a:	685b      	ldr	r3, [r3, #4]
    2b8c:	6013      	str	r3, [r2, #0]

    /* Select transceiver */
    m_cs=0;//SPI_SELN_LOW();

    /* start frame read */
    m_spi.write(TRX_CMD_FR);//SPI_DATA_REG = TRX_CMD_FR;
    2b8e:	2314      	movs	r3, #20
    2b90:	469c      	mov	ip, r3
    2b92:	44bc      	add	ip, r7
    2b94:	4663      	mov	r3, ip
    2b96:	4666      	mov	r6, ip
    2b98:	9300      	str	r3, [sp, #0]
    2b9a:	1c18      	adds	r0, r3, #0
    2b9c:	2120      	movs	r1, #32
    2b9e:	4c1e      	ldr	r4, [pc, #120]	; (2c18 <_ZN8cMxRadio14trx_frame_readEPhhS0_+0xb8>)
    2ba0:	47a0      	blx	r4
    //SPI_WAITFOR();

    /* read length */
    length= m_spi.write(0);//SPI_DATA_REG = 0;
    2ba2:	1c30      	adds	r0, r6, #0
    2ba4:	2100      	movs	r1, #0
    2ba6:	47a0      	blx	r4
    2ba8:	b2c6      	uxtb	r6, r0
    //SPI_WAITFOR();
    //length = SPI_DATA_REG;

    if (length <= datasz)
    2baa:	42ae      	cmp	r6, r5
    2bac:	d818      	bhi.n	2be0 <_ZN8cMxRadio14trx_frame_readEPhhS0_+0x80>
    2bae:	9a01      	ldr	r2, [sp, #4]
    2bb0:	1c14      	adds	r4, r2, #0
    2bb2:	1e73      	subs	r3, r6, #1
    2bb4:	b2db      	uxtb	r3, r3
    2bb6:	3301      	adds	r3, #1
    2bb8:	18d5      	adds	r5, r2, r3
        i = length;
        do
        {
            //SPI_DATA_REG = 0;   /* dummy out */
            //SPI_WAITFOR();
            *data++ = m_spi.write(0);//SPI_DATA_REG;
    2bba:	4b17      	ldr	r3, [pc, #92]	; (2c18 <_ZN8cMxRadio14trx_frame_readEPhhS0_+0xb8>)
    2bbc:	469a      	mov	sl, r3
    2bbe:	9800      	ldr	r0, [sp, #0]
    2bc0:	2100      	movs	r1, #0
    2bc2:	47d0      	blx	sl
    2bc4:	7020      	strb	r0, [r4, #0]
    2bc6:	3401      	adds	r4, #1
    //length = SPI_DATA_REG;

    if (length <= datasz)
    {
        i = length;
        do
    2bc8:	42ac      	cmp	r4, r5
    2bca:	d1f8      	bne.n	2bbe <_ZN8cMxRadio14trx_frame_readEPhhS0_+0x5e>
            //SPI_WAITFOR();
            *data++ = m_spi.write(0);//SPI_DATA_REG;
        }
        while(--i);

        if (lqi!= NULL)
    2bcc:	464b      	mov	r3, r9
    2bce:	2b00      	cmp	r3, #0
    2bd0:	d008      	beq.n	2be4 <_ZN8cMxRadio14trx_frame_readEPhhS0_+0x84>
        {
            //SPI_DATA_REG = 0;   /* dummy out */
            //SPI_WAITFOR();
            *lqi = m_spi.write(0);//SPI_DATA_REG;
    2bd2:	9800      	ldr	r0, [sp, #0]
    2bd4:	2100      	movs	r1, #0
    2bd6:	4b10      	ldr	r3, [pc, #64]	; (2c18 <_ZN8cMxRadio14trx_frame_readEPhhS0_+0xb8>)
    2bd8:	4798      	blx	r3
    2bda:	464b      	mov	r3, r9
    2bdc:	7018      	strb	r0, [r3, #0]
    2bde:	e001      	b.n	2be4 <_ZN8cMxRadio14trx_frame_readEPhhS0_+0x84>
        }
    }
    else
    {
        /* we drop the frame */
        length = 0x80 | length;
    2be0:	2380      	movs	r3, #128	; 0x80
    2be2:	431e      	orrs	r6, r3
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    2be4:	23a8      	movs	r3, #168	; 0xa8
    2be6:	56fb      	ldrsb	r3, [r7, r3]
    2be8:	3301      	adds	r3, #1
    2bea:	d104      	bne.n	2bf6 <_ZN8cMxRadio14trx_frame_readEPhhS0_+0x96>
    2bec:	4807      	ldr	r0, [pc, #28]	; (2c0c <_ZN8cMxRadio14trx_frame_readEPhhS0_+0xac>)
    2bee:	4908      	ldr	r1, [pc, #32]	; (2c10 <_ZN8cMxRadio14trx_frame_readEPhhS0_+0xb0>)
    2bf0:	2228      	movs	r2, #40	; 0x28
    2bf2:	4b08      	ldr	r3, [pc, #32]	; (2c14 <_ZN8cMxRadio14trx_frame_readEPhhS0_+0xb4>)
    2bf4:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    2bf6:	37a8      	adds	r7, #168	; 0xa8
    2bf8:	693b      	ldr	r3, [r7, #16]
    2bfa:	687a      	ldr	r2, [r7, #4]
    2bfc:	601a      	str	r2, [r3, #0]
    }
    m_cs=1;//SPI_SELN_HIGH();
    return length;
}
    2bfe:	1c30      	adds	r0, r6, #0
    2c00:	b003      	add	sp, #12
    2c02:	bc0c      	pop	{r2, r3}
    2c04:	4691      	mov	r9, r2
    2c06:	469a      	mov	sl, r3
    2c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c0a:	46c0      	nop			; (mov r8, r8)
    2c0c:	0000ead8 	.word	0x0000ead8
    2c10:	0000eaf0 	.word	0x0000eaf0
    2c14:	00004f89 	.word	0x00004f89
    2c18:	00004cd5 	.word	0x00004cd5

00002c1c <_ZN8cMxRadio15rf_irq_callbackEv>:


/* === globals ============================================================= */

void cMxRadio::rf_irq_callback()
{
    2c1c:	b538      	push	{r3, r4, r5, lr}
    2c1e:	1c04      	adds	r4, r0, #0

uint8_t cause;
    //DI_TRX_IRQ();
    //sei();
    cause = trx_reg_read(RG_IRQ_STATUS);
    2c20:	210f      	movs	r1, #15
    2c22:	4b0c      	ldr	r3, [pc, #48]	; (2c54 <_ZN8cMxRadio15rf_irq_callbackEv+0x38>)
    2c24:	4798      	blx	r3
    2c26:	1c05      	adds	r5, r0, #0

    if (cause & TRX_IRQ_RX_START)
    2c28:	0743      	lsls	r3, r0, #29
    2c2a:	d504      	bpl.n	2c36 <_ZN8cMxRadio15rf_irq_callbackEv+0x1a>
    {
    	temprssi = trx_reg_read(RG_PHY_RSSI);
    2c2c:	1c20      	adds	r0, r4, #0
    2c2e:	2106      	movs	r1, #6
    2c30:	4b08      	ldr	r3, [pc, #32]	; (2c54 <_ZN8cMxRadio15rf_irq_callbackEv+0x38>)
    2c32:	4798      	blx	r3
    2c34:	7020      	strb	r0, [r4, #0]
    	//temped = trx_reg_read(RG_PHY_ED_LEVEL);
    }

    if (cause & TRX_IRQ_TRX_END)
    2c36:	072b      	lsls	r3, r5, #28
    2c38:	d507      	bpl.n	2c4a <_ZN8cMxRadio15rf_irq_callbackEv+0x2e>
    {
    	if (temprssi==0)
    2c3a:	7823      	ldrb	r3, [r4, #0]
    2c3c:	2b00      	cmp	r3, #0
    2c3e:	d104      	bne.n	2c4a <_ZN8cMxRadio15rf_irq_callbackEv+0x2e>
    		temprssi = trx_reg_read(RG_PHY_RSSI);
    2c40:	1c20      	adds	r0, r4, #0
    2c42:	2106      	movs	r1, #6
    2c44:	4b03      	ldr	r3, [pc, #12]	; (2c54 <_ZN8cMxRadio15rf_irq_callbackEv+0x38>)
    2c46:	4798      	blx	r3
    2c48:	7020      	strb	r0, [r4, #0]
    	//temped = trx_reg_read(RG_PHY_ED_LEVEL);
    }
    radio_irq_handler(cause);
    2c4a:	1c20      	adds	r0, r4, #0
    2c4c:	1c29      	adds	r1, r5, #0
    2c4e:	4b02      	ldr	r3, [pc, #8]	; (2c58 <_ZN8cMxRadio15rf_irq_callbackEv+0x3c>)
    2c50:	4798      	blx	r3
    //cli();
    //EI_TRX_IRQ();
}
    2c52:	bd38      	pop	{r3, r4, r5, pc}
    2c54:	00002a21 	.word	0x00002a21
    2c58:	000026c1 	.word	0x000026c1

00002c5c <_Z12kernelConfigv>:
 * Created: 13/05/2016 16:34:52
 *  Author: MORAND Baptiste
 */ 
#include "utask.h"

void kernelConfig(void){
    2c5c:	b530      	push	{r4, r5, lr}
    2c5e:	b085      	sub	sp, #20

	hmi.printf("kernel config\r\n");
    2c60:	480e      	ldr	r0, [pc, #56]	; (2c9c <_Z12kernelConfigv+0x40>)
    2c62:	490f      	ldr	r1, [pc, #60]	; (2ca0 <_Z12kernelConfigv+0x44>)
    2c64:	4b0f      	ldr	r3, [pc, #60]	; (2ca4 <_Z12kernelConfigv+0x48>)
    2c66:	4798      	blx	r3
	// tasks creations
	xTaskCreate((pdTASK_CODE)HMITask,(const signed char*)"HMI",configMINIMAL_STACK_SIZE,NULL, tskIDLE_PRIORITY +1, NULL);
    2c68:	2301      	movs	r3, #1
    2c6a:	9300      	str	r3, [sp, #0]
    2c6c:	2400      	movs	r4, #0
    2c6e:	9401      	str	r4, [sp, #4]
    2c70:	9402      	str	r4, [sp, #8]
    2c72:	9403      	str	r4, [sp, #12]
    2c74:	480c      	ldr	r0, [pc, #48]	; (2ca8 <_Z12kernelConfigv+0x4c>)
    2c76:	490d      	ldr	r1, [pc, #52]	; (2cac <_Z12kernelConfigv+0x50>)
    2c78:	2296      	movs	r2, #150	; 0x96
    2c7a:	0052      	lsls	r2, r2, #1
    2c7c:	2300      	movs	r3, #0
    2c7e:	4d0c      	ldr	r5, [pc, #48]	; (2cb0 <_Z12kernelConfigv+0x54>)
    2c80:	47a8      	blx	r5
	xTaskCreate((pdTASK_CODE)timeProtocolTask,(const signed char*)"time",configMINIMAL_STACK_SIZE+600,NULL, tskIDLE_PRIORITY +3, NULL);
    2c82:	2303      	movs	r3, #3
    2c84:	9300      	str	r3, [sp, #0]
    2c86:	9401      	str	r4, [sp, #4]
    2c88:	9402      	str	r4, [sp, #8]
    2c8a:	9403      	str	r4, [sp, #12]
    2c8c:	4809      	ldr	r0, [pc, #36]	; (2cb4 <_Z12kernelConfigv+0x58>)
    2c8e:	490a      	ldr	r1, [pc, #40]	; (2cb8 <_Z12kernelConfigv+0x5c>)
    2c90:	22e1      	movs	r2, #225	; 0xe1
    2c92:	0092      	lsls	r2, r2, #2
    2c94:	2300      	movs	r3, #0
    2c96:	47a8      	blx	r5
	//xTaskCreate((pdTASK_CODE)ledBlinkTask,(const signed char*)"led",configMINIMAL_STACK_SIZE,NULL, tskIDLE_PRIORITY +4, NULL);
	//xTaskCreate((pdTASK_CODE)gpsUartTask,(const signed char*)"gps",configMINIMAL_STACK_SIZE,NULL, tskIDLE_PRIORITY +2, NULL);
}
    2c98:	b005      	add	sp, #20
    2c9a:	bd30      	pop	{r4, r5, pc}
    2c9c:	20004594 	.word	0x20004594
    2ca0:	0000ecd4 	.word	0x0000ecd4
    2ca4:	00004f61 	.word	0x00004f61
    2ca8:	00003bad 	.word	0x00003bad
    2cac:	0000ece4 	.word	0x0000ece4
    2cb0:	000009f5 	.word	0x000009f5
    2cb4:	00003a19 	.word	0x00003a19
    2cb8:	0000ece8 	.word	0x0000ece8

00002cbc <_Z6ppsISRv>:
char messageHMIError[100];
/** Callback function for the EXTINT driver, called when an external interrupt
 *  detection occurs.
 */
void ppsISR(void)
{	
    2cbc:	b530      	push	{r4, r5, lr}
    2cbe:	b08f      	sub	sp, #60	; 0x3c
	wdt_clear();
    2cc0:	4b1c      	ldr	r3, [pc, #112]	; (2d34 <_Z6ppsISRv+0x78>)
    2cc2:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    2cc4:	b672      	cpsid	i
    2cc6:	f3bf 8f5f 	dmb	sy
	Disable_global_interrupt();
    2cca:	2300      	movs	r3, #0
    2ccc:	4a1a      	ldr	r2, [pc, #104]	; (2d38 <_Z6ppsISRv+0x7c>)
    2cce:	7013      	strb	r3, [r2, #0]
	Clock timeCopy={0,0,true};
    2cd0:	ad08      	add	r5, sp, #32
    2cd2:	9308      	str	r3, [sp, #32]
    2cd4:	9309      	str	r3, [sp, #36]	; 0x24
    2cd6:	2201      	movs	r2, #1
    2cd8:	722a      	strb	r2, [r5, #8]
	//Disable_global_interrupt();
	Clock timeMaster={0,0,true};
    2cda:	ac0b      	add	r4, sp, #44	; 0x2c
    2cdc:	930b      	str	r3, [sp, #44]	; 0x2c
    2cde:	930c      	str	r3, [sp, #48]	; 0x30
    2ce0:	7222      	strb	r2, [r4, #8]
	readClock(&timeCopy);
    2ce2:	1c28      	adds	r0, r5, #0
    2ce4:	4b15      	ldr	r3, [pc, #84]	; (2d3c <_Z6ppsISRv+0x80>)
    2ce6:	4798      	blx	r3
	
	//Enable_global_interrupt();
	timeMaster.second=timeCopy.second;
    2ce8:	9b08      	ldr	r3, [sp, #32]
    2cea:	930b      	str	r3, [sp, #44]	; 0x2c
	timeMaster.halfmillis=timeCopy.halfmillis;
    2cec:	686b      	ldr	r3, [r5, #4]
    2cee:	6063      	str	r3, [r4, #4]
	if(timeMaster.halfmillis>=RTC_FREQ/2){//for the accurate 500ms
    2cf0:	6862      	ldr	r2, [r4, #4]
    2cf2:	4b13      	ldr	r3, [pc, #76]	; (2d40 <_Z6ppsISRv+0x84>)
    2cf4:	429a      	cmp	r2, r3
    2cf6:	d902      	bls.n	2cfe <_Z6ppsISRv+0x42>
		timeMaster.second++;
    2cf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2cfa:	3301      	adds	r3, #1
    2cfc:	930b      	str	r3, [sp, #44]	; 0x2c
	}
	timeMaster.halfmillis=0;
    2cfe:	2300      	movs	r3, #0
    2d00:	930c      	str	r3, [sp, #48]	; 0x30
	
	timeProt.offset=subClock(timeMaster,timeCopy);
    2d02:	ac04      	add	r4, sp, #16
    2d04:	ab08      	add	r3, sp, #32
    2d06:	466a      	mov	r2, sp
    2d08:	cb23      	ldmia	r3!, {r0, r1, r5}
    2d0a:	c223      	stmia	r2!, {r0, r1, r5}
    2d0c:	1c20      	adds	r0, r4, #0
    2d0e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2d10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    2d12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2d14:	4d0b      	ldr	r5, [pc, #44]	; (2d44 <_Z6ppsISRv+0x88>)
    2d16:	47a8      	blx	r5
    2d18:	4b0b      	ldr	r3, [pc, #44]	; (2d48 <_Z6ppsISRv+0x8c>)
    2d1a:	3398      	adds	r3, #152	; 0x98
    2d1c:	cc07      	ldmia	r4!, {r0, r1, r2}
    2d1e:	c307      	stmia	r3!, {r0, r1, r2}
	//timeProt.offset.second=0;
	//report(timeProt.offset,1);
	#ifdef MASTERMODE
		updateClock();
    2d20:	4b0a      	ldr	r3, [pc, #40]	; (2d4c <_Z6ppsISRv+0x90>)
    2d22:	4798      	blx	r3
		else{
			sprintf(messageHMIError,"		-%lu",offset);
		}
		sendHMI(messageHMIError);
	#endif
		Enable_global_interrupt();
    2d24:	2201      	movs	r2, #1
    2d26:	4b04      	ldr	r3, [pc, #16]	; (2d38 <_Z6ppsISRv+0x7c>)
    2d28:	701a      	strb	r2, [r3, #0]
    2d2a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    2d2e:	b662      	cpsie	i
		

}
    2d30:	b00f      	add	sp, #60	; 0x3c
    2d32:	bd30      	pop	{r4, r5, pc}
    2d34:	000003ed 	.word	0x000003ed
    2d38:	200000d0 	.word	0x200000d0
    2d3c:	00001681 	.word	0x00001681
    2d40:	00003e7f 	.word	0x00003e7f
    2d44:	000013fd 	.word	0x000013fd
    2d48:	200042cc 	.word	0x200042cc
    2d4c:	00003535 	.word	0x00003535

00002d50 <_Z16configurationPPSv>:

void configurationPPS(void){
    2d50:	b510      	push	{r4, lr}
    2d52:	b084      	sub	sp, #16
		hmi.printf("confif pps\r\n");
    2d54:	480e      	ldr	r0, [pc, #56]	; (2d90 <_Z16configurationPPSv+0x40>)
    2d56:	490f      	ldr	r1, [pc, #60]	; (2d94 <_Z16configurationPPSv+0x44>)
    2d58:	4b0f      	ldr	r3, [pc, #60]	; (2d98 <_Z16configurationPPSv+0x48>)
    2d5a:	4798      	blx	r3
	//	pps.rise(ppsISR);
		struct extint_chan_conf eint_chan_conf;
		extint_chan_get_config_defaults(&eint_chan_conf);
    2d5c:	ac01      	add	r4, sp, #4
    2d5e:	1c20      	adds	r0, r4, #0
    2d60:	4b0e      	ldr	r3, [pc, #56]	; (2d9c <_Z16configurationPPSv+0x4c>)
    2d62:	4798      	blx	r3
		// put the button as EXTINT
		eint_chan_conf.gpio_pin           = PIN_PA28A_EIC_EXTINT8;
    2d64:	231c      	movs	r3, #28
    2d66:	9301      	str	r3, [sp, #4]
		eint_chan_conf.gpio_pin_mux       = MUX_PA28A_EIC_EXTINT8;
    2d68:	2300      	movs	r3, #0
    2d6a:	6063      	str	r3, [r4, #4]
		eint_chan_conf.detection_criteria = EXTINT_DETECT_RISING;
    2d6c:	2201      	movs	r2, #1
    2d6e:	72e2      	strb	r2, [r4, #11]
		eint_chan_conf.filter_input_signal = false;
    2d70:	72a3      	strb	r3, [r4, #10]
		
		extint_chan_set_config(8, &eint_chan_conf);
    2d72:	2008      	movs	r0, #8
    2d74:	1c21      	adds	r1, r4, #0
    2d76:	4b0a      	ldr	r3, [pc, #40]	; (2da0 <_Z16configurationPPSv+0x50>)
    2d78:	4798      	blx	r3
		//configuration callback
		extint_register_callback(&ppsISR,8,EXTINT_CALLBACK_TYPE_DETECT);
    2d7a:	480a      	ldr	r0, [pc, #40]	; (2da4 <_Z16configurationPPSv+0x54>)
    2d7c:	2108      	movs	r1, #8
    2d7e:	2200      	movs	r2, #0
    2d80:	4b09      	ldr	r3, [pc, #36]	; (2da8 <_Z16configurationPPSv+0x58>)
    2d82:	4798      	blx	r3
		//activation callback
		extint_chan_enable_callback(8,EXTINT_CALLBACK_TYPE_DETECT);		
    2d84:	2008      	movs	r0, #8
    2d86:	2100      	movs	r1, #0
    2d88:	4b08      	ldr	r3, [pc, #32]	; (2dac <_Z16configurationPPSv+0x5c>)
    2d8a:	4798      	blx	r3
		
		
    2d8c:	b004      	add	sp, #16
    2d8e:	bd10      	pop	{r4, pc}
    2d90:	20004594 	.word	0x20004594
    2d94:	0000ecf0 	.word	0x0000ecf0
    2d98:	00004f61 	.word	0x00004f61
    2d9c:	0000415d 	.word	0x0000415d
    2da0:	00004171 	.word	0x00004171
    2da4:	00002cbd 	.word	0x00002cbd
    2da8:	0000405d 	.word	0x0000405d
    2dac:	00004085 	.word	0x00004085

00002db0 <_ZN4mbed10SerialBaseD1Ev>:
#endif

protected:
    SerialBase(PinName tx, PinName rx);
    virtual ~SerialBase() {
    }
    2db0:	4770      	bx	lr
    2db2:	46c0      	nop			; (mov r8, r8)

00002db4 <_ZN4mbed6SerialD1Ev>:
 * int main() {
 *     pc.printf("Hello World\n");
 * }
 * @endcode
 */
class Serial : public SerialBase, public Stream {
    2db4:	b510      	push	{r4, lr}
    2db6:	1c04      	adds	r4, r0, #0
    2db8:	4b06      	ldr	r3, [pc, #24]	; (2dd4 <_ZN4mbed6SerialD1Ev+0x20>)
    2dba:	6003      	str	r3, [r0, #0]
    2dbc:	1c19      	adds	r1, r3, #0
    2dbe:	3118      	adds	r1, #24
    2dc0:	22dc      	movs	r2, #220	; 0xdc
    2dc2:	5081      	str	r1, [r0, r2]
    2dc4:	334c      	adds	r3, #76	; 0x4c
    2dc6:	3204      	adds	r2, #4
    2dc8:	5083      	str	r3, [r0, r2]
    2dca:	30dc      	adds	r0, #220	; 0xdc
    2dcc:	4b02      	ldr	r3, [pc, #8]	; (2dd8 <_ZN4mbed6SerialD1Ev+0x24>)
    2dce:	4798      	blx	r3
    2dd0:	1c20      	adds	r0, r4, #0
    2dd2:	bd10      	pop	{r4, pc}
    2dd4:	0000f1f0 	.word	0x0000f1f0
    2dd8:	00004f25 	.word	0x00004f25

00002ddc <_ZThn220_N4mbed6SerialD1Ev>:
    2ddc:	b408      	push	{r3}
    2dde:	4b02      	ldr	r3, [pc, #8]	; (2de8 <_ZThn220_N4mbed6SerialD1Ev+0xc>)
    2de0:	469c      	mov	ip, r3
    2de2:	38dc      	subs	r0, #220	; 0xdc
    2de4:	bc08      	pop	{r3}
    2de6:	4760      	bx	ip
    2de8:	00002db5 	.word	0x00002db5

00002dec <_ZThn224_N4mbed6SerialD1Ev>:
    2dec:	b408      	push	{r3}
    2dee:	4b02      	ldr	r3, [pc, #8]	; (2df8 <_ZThn224_N4mbed6SerialD1Ev+0xc>)
    2df0:	469c      	mov	ip, r3
    2df2:	38e0      	subs	r0, #224	; 0xe0
    2df4:	bc08      	pop	{r3}
    2df6:	4760      	bx	ip
    2df8:	00002db5 	.word	0x00002db5

00002dfc <_ZN4mbed10SerialBaseD0Ev>:
    void interrupt_handler_asynch(void);
#endif

protected:
    SerialBase(PinName tx, PinName rx);
    virtual ~SerialBase() {
    2dfc:	b510      	push	{r4, lr}
    2dfe:	1c04      	adds	r4, r0, #0
    }
    2e00:	4b01      	ldr	r3, [pc, #4]	; (2e08 <_ZN4mbed10SerialBaseD0Ev+0xc>)
    2e02:	4798      	blx	r3
    2e04:	1c20      	adds	r0, r4, #0
    2e06:	bd10      	pop	{r4, pc}
    2e08:	0000667b 	.word	0x0000667b

00002e0c <_Z6report11structClocki>:
#endif
/************************************************************************/
/* FUNCTION                                                             */
/************************************************************************/

void report(Clock offset,int type){//type=1 for master type=2 for slave
    2e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e0e:	b0e9      	sub	sp, #420	; 0x1a4
    2e10:	ac01      	add	r4, sp, #4
    2e12:	9001      	str	r0, [sp, #4]
    2e14:	9102      	str	r1, [sp, #8]
    2e16:	9203      	str	r2, [sp, #12]
	#ifdef MASTERMODE
		uint8_t i;
	
		uint8_t buffer[100];
		uint8_t send[CLP_UTILITY_MAX_PACKET_SIZE];
		buffer[0] = 'V';
    2e18:	aa04      	add	r2, sp, #16
    2e1a:	2156      	movs	r1, #86	; 0x56
    2e1c:	7011      	strb	r1, [r2, #0]
	
		buffer[1] = type;
    2e1e:	7053      	strb	r3, [r2, #1]


		//data
		long int time= offset.second*32000+offset.halfmillis;
    2e20:	9901      	ldr	r1, [sp, #4]
    2e22:	9a02      	ldr	r2, [sp, #8]
    2e24:	23fa      	movs	r3, #250	; 0xfa
    2e26:	01db      	lsls	r3, r3, #7
    2e28:	434b      	muls	r3, r1
    2e2a:	189b      	adds	r3, r3, r2
		if(offset.sign==false){
    2e2c:	7a22      	ldrb	r2, [r4, #8]
    2e2e:	2a00      	cmp	r2, #0
    2e30:	d100      	bne.n	2e34 <_Z6report11structClocki+0x28>
			time=-time;	
    2e32:	425b      	negs	r3, r3
		}
		buffer[2]=(uint8_t)(time&0x00FF);
    2e34:	aa04      	add	r2, sp, #16
    2e36:	7093      	strb	r3, [r2, #2]
		buffer[3]=(uint8_t)((time>>8)&0x00FF);
    2e38:	1219      	asrs	r1, r3, #8
    2e3a:	70d1      	strb	r1, [r2, #3]
		buffer[4]=(uint8_t)((time>>16)&0x00FF);
    2e3c:	1419      	asrs	r1, r3, #16
    2e3e:	7111      	strb	r1, [r2, #4]
		buffer[5]=(uint8_t)((time>>24)&0x00FF);
    2e40:	0e1b      	lsrs	r3, r3, #24
    2e42:	7153      	strb	r3, [r2, #5]
	
		size_t length = CLP_GeneratePacket(send, buffer, 6);
    2e44:	a81d      	add	r0, sp, #116	; 0x74
    2e46:	1c11      	adds	r1, r2, #0
    2e48:	2206      	movs	r2, #6
    2e4a:	4b09      	ldr	r3, [pc, #36]	; (2e70 <_Z6report11structClocki+0x64>)
    2e4c:	4798      	blx	r3
    2e4e:	1e06      	subs	r6, r0, #0

		for(i=0;i<length;i++){
    2e50:	d00b      	beq.n	2e6a <_Z6report11structClocki+0x5e>
    2e52:	2400      	movs	r4, #0
			pc.putc(send[i]);
    2e54:	4d07      	ldr	r5, [pc, #28]	; (2e74 <_Z6report11structClocki+0x68>)
    2e56:	35dc      	adds	r5, #220	; 0xdc
    2e58:	4f07      	ldr	r7, [pc, #28]	; (2e78 <_Z6report11structClocki+0x6c>)
    2e5a:	ab1d      	add	r3, sp, #116	; 0x74
    2e5c:	5d19      	ldrb	r1, [r3, r4]
    2e5e:	1c28      	adds	r0, r5, #0
    2e60:	47b8      	blx	r7
		buffer[4]=(uint8_t)((time>>16)&0x00FF);
		buffer[5]=(uint8_t)((time>>24)&0x00FF);
	
		size_t length = CLP_GeneratePacket(send, buffer, 6);

		for(i=0;i<length;i++){
    2e62:	3401      	adds	r4, #1
    2e64:	b2e4      	uxtb	r4, r4
    2e66:	42a6      	cmp	r6, r4
    2e68:	d8f7      	bhi.n	2e5a <_Z6report11structClocki+0x4e>
	#endif
	
	
	
	
}
    2e6a:	b069      	add	sp, #420	; 0x1a4
    2e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e6e:	46c0      	nop			; (mov r8, r8)
    2e70:	0000017d 	.word	0x0000017d
    2e74:	20004104 	.word	0x20004104
    2e78:	00004f49 	.word	0x00004f49

00002e7c <_Z4pgcdii>:
	}
	
}


int pgcd( int a ,int b){
    2e7c:	b510      	push	{r4, lr}
	int i=0;
	while ((!(a*b == 0))&&(i<1000)) {
    2e7e:	1c0b      	adds	r3, r1, #0
    2e80:	4343      	muls	r3, r0
    2e82:	2b00      	cmp	r3, #0
    2e84:	d013      	beq.n	2eae <_Z4pgcdii+0x32>
    2e86:	2300      	movs	r3, #0
    2e88:	24fa      	movs	r4, #250	; 0xfa
    2e8a:	00a4      	lsls	r4, r4, #2
		if (a>b) {
    2e8c:	4288      	cmp	r0, r1
    2e8e:	dd01      	ble.n	2e94 <_Z4pgcdii+0x18>
			a = a - b ;
    2e90:	1a40      	subs	r0, r0, r1
    2e92:	e000      	b.n	2e96 <_Z4pgcdii+0x1a>
		}
		else{
			b = b - a ;
    2e94:	1a09      	subs	r1, r1, r0
		}
		i++;
    2e96:	3301      	adds	r3, #1
}


int pgcd( int a ,int b){
	int i=0;
	while ((!(a*b == 0))&&(i<1000)) {
    2e98:	1c0a      	adds	r2, r1, #0
    2e9a:	4342      	muls	r2, r0
    2e9c:	2a00      	cmp	r2, #0
    2e9e:	d003      	beq.n	2ea8 <_Z4pgcdii+0x2c>
    2ea0:	42a3      	cmp	r3, r4
    2ea2:	d1f3      	bne.n	2e8c <_Z4pgcdii+0x10>
			b = b - a ;
		}
		i++;
	}
	if(i>=1000){
		return 1;
    2ea4:	2101      	movs	r1, #1
    2ea6:	e007      	b.n	2eb8 <_Z4pgcdii+0x3c>
		else{
			b = b - a ;
		}
		i++;
	}
	if(i>=1000){
    2ea8:	4a04      	ldr	r2, [pc, #16]	; (2ebc <_Z4pgcdii+0x40>)
    2eaa:	4293      	cmp	r3, r2
    2eac:	dc03      	bgt.n	2eb6 <_Z4pgcdii+0x3a>
		return 1;
	}
	if(a==0){
    2eae:	2800      	cmp	r0, #0
    2eb0:	d002      	beq.n	2eb8 <_Z4pgcdii+0x3c>
    2eb2:	1c01      	adds	r1, r0, #0
    2eb4:	e000      	b.n	2eb8 <_Z4pgcdii+0x3c>
			b = b - a ;
		}
		i++;
	}
	if(i>=1000){
		return 1;
    2eb6:	2101      	movs	r1, #1
	}
	else{
		return a;
	}
	return a;
}
    2eb8:	1c08      	adds	r0, r1, #0
    2eba:	bd10      	pop	{r4, pc}
    2ebc:	000003e7 	.word	0x000003e7

00002ec0 <_Z24resetSofftwareCorrectionv>:

void resetSofftwareCorrection(void){

		sumOffset.second=0;
    2ec0:	4a06      	ldr	r2, [pc, #24]	; (2edc <_Z24resetSofftwareCorrectionv+0x1c>)
    2ec2:	2300      	movs	r3, #0
    2ec4:	6013      	str	r3, [r2, #0]
		sumOffset.halfmillis=0;
    2ec6:	6053      	str	r3, [r2, #4]
		timeProt.correction.nbCorrection=0;
    2ec8:	4a05      	ldr	r2, [pc, #20]	; (2ee0 <_Z24resetSofftwareCorrectionv+0x20>)
    2eca:	21a4      	movs	r1, #164	; 0xa4
    2ecc:	5053      	str	r3, [r2, r1]
		timeProt.correction.sumTime.second=0;
    2ece:	3120      	adds	r1, #32
    2ed0:	5053      	str	r3, [r2, r1]
		timeProt.correction.sumTime.halfmillis=0;
    2ed2:	3104      	adds	r1, #4
    2ed4:	5053      	str	r3, [r2, r1]
		timeProt.correction.currentTimeOffsetSync.second=0;// to not take the first value
    2ed6:	3910      	subs	r1, #16
    2ed8:	5053      	str	r3, [r2, r1]
}
    2eda:	4770      	bx	lr
    2edc:	200041f8 	.word	0x200041f8
    2ee0:	200042cc 	.word	0x200042cc

00002ee4 <_Z17sofwareCorrectionv>:
			}
	}
	
}

void sofwareCorrection(){
    2ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ee6:	465f      	mov	r7, fp
    2ee8:	4656      	mov	r6, sl
    2eea:	464d      	mov	r5, r9
    2eec:	4644      	mov	r4, r8
    2eee:	b4f0      	push	{r4, r5, r6, r7}
    2ef0:	b091      	sub	sp, #68	; 0x44
	if(timeProt.correction.nbCorrection!=0){
    2ef2:	23a4      	movs	r3, #164	; 0xa4
    2ef4:	4ac2      	ldr	r2, [pc, #776]	; (3200 <_Z17sofwareCorrectionv+0x31c>)
    2ef6:	58d3      	ldr	r3, [r2, r3]
    2ef8:	2b00      	cmp	r3, #0
    2efa:	d100      	bne.n	2efe <_Z17sofwareCorrectionv+0x1a>
    2efc:	e178      	b.n	31f0 <_Z17sofwareCorrectionv+0x30c>
	//	printf("nb corr : %d",timeProt.correction.nbCorrection);
		sendHMI("	Software Correction ");
    2efe:	48c1      	ldr	r0, [pc, #772]	; (3204 <_Z17sofwareCorrectionv+0x320>)
    2f00:	4bc1      	ldr	r3, [pc, #772]	; (3208 <_Z17sofwareCorrectionv+0x324>)
    2f02:	4798      	blx	r3
		//interval of time
		Clock averageTime;
		Clock averageOffset;
		Clock sumOffsetl;
		float fcorr=0;
		int indice=timeProt.correction.indiceFull;
    2f04:	49be      	ldr	r1, [pc, #760]	; (3200 <_Z17sofwareCorrectionv+0x31c>)
    2f06:	2322      	movs	r3, #34	; 0x22
    2f08:	33ff      	adds	r3, #255	; 0xff
    2f0a:	5cc8      	ldrb	r0, [r1, r3]
			

		sumOffsetl=sumOffset;
    2f0c:	ab0d      	add	r3, sp, #52	; 0x34
    2f0e:	4abf      	ldr	r2, [pc, #764]	; (320c <_Z17sofwareCorrectionv+0x328>)
    2f10:	1c1c      	adds	r4, r3, #0
    2f12:	cae0      	ldmia	r2!, {r5, r6, r7}
    2f14:	c4e0      	stmia	r4!, {r5, r6, r7}

		
		//sign change
		if(timeProt.correction.valueCor!=sumOffsetl.sign){//if the sum of the offset change of sign error ze reset the software corection 
    2f16:	22a8      	movs	r2, #168	; 0xa8
    2f18:	5c8a      	ldrb	r2, [r1, r2]
    2f1a:	7a19      	ldrb	r1, [r3, #8]
    2f1c:	b2d3      	uxtb	r3, r2
		//interval of time
		Clock averageTime;
		Clock averageOffset;
		Clock sumOffsetl;
		float fcorr=0;
		int indice=timeProt.correction.indiceFull;
    2f1e:	4680      	mov	r8, r0

		sumOffsetl=sumOffset;

		
		//sign change
		if(timeProt.correction.valueCor!=sumOffsetl.sign){//if the sum of the offset change of sign error ze reset the software corection 
    2f20:	428b      	cmp	r3, r1
    2f22:	d006      	beq.n	2f32 <_Z17sofwareCorrectionv+0x4e>
			indice=0;
			timeProt.correction.indiceMoySoftCor=0;
    2f24:	2100      	movs	r1, #0
    2f26:	2390      	movs	r3, #144	; 0x90
    2f28:	005b      	lsls	r3, r3, #1
    2f2a:	4ab5      	ldr	r2, [pc, #724]	; (3200 <_Z17sofwareCorrectionv+0x31c>)
    2f2c:	54d1      	strb	r1, [r2, r3]
		sumOffsetl=sumOffset;

		
		//sign change
		if(timeProt.correction.valueCor!=sumOffsetl.sign){//if the sum of the offset change of sign error ze reset the software corection 
			indice=0;
    2f2e:	2300      	movs	r3, #0
    2f30:	4698      	mov	r8, r3
			timeProt.correction.indiceMoySoftCor=0;
		
		}
		
		float second=(float)timeProt.correction.sumTime.second/timeProt.correction.nbCorrection;
    2f32:	4fb3      	ldr	r7, [pc, #716]	; (3200 <_Z17sofwareCorrectionv+0x31c>)
    2f34:	23c4      	movs	r3, #196	; 0xc4
    2f36:	58f8      	ldr	r0, [r7, r3]
    2f38:	3b20      	subs	r3, #32
    2f3a:	58fc      	ldr	r4, [r7, r3]
    2f3c:	4eb4      	ldr	r6, [pc, #720]	; (3210 <_Z17sofwareCorrectionv+0x32c>)
    2f3e:	47b0      	blx	r6
    2f40:	1c05      	adds	r5, r0, #0
    2f42:	1c20      	adds	r0, r4, #0
    2f44:	47b0      	blx	r6
    2f46:	1c01      	adds	r1, r0, #0
    2f48:	1c28      	adds	r0, r5, #0
    2f4a:	4bb2      	ldr	r3, [pc, #712]	; (3214 <_Z17sofwareCorrectionv+0x330>)
    2f4c:	4798      	blx	r3
    2f4e:	1c05      	adds	r5, r0, #0
		int secondi=(int)second;
    2f50:	4bb1      	ldr	r3, [pc, #708]	; (3218 <_Z17sofwareCorrectionv+0x334>)
    2f52:	4798      	blx	r3
    2f54:	1c06      	adds	r6, r0, #0
				//calcul average time
				//printf("second : %d,%d",secondi,(int)((second-secondi)*1000.0));
				
		averageTime.second=secondi;
    2f56:	9007      	str	r0, [sp, #28]
		averageTime.halfmillis=(timeProt.correction.sumTime.halfmillis/timeProt.correction.nbCorrection)+RTC_FREQ*1.0*((float)(second-secondi));
    2f58:	23c8      	movs	r3, #200	; 0xc8
    2f5a:	58f8      	ldr	r0, [r7, r3]
    2f5c:	4faf      	ldr	r7, [pc, #700]	; (321c <_Z17sofwareCorrectionv+0x338>)
    2f5e:	1c21      	adds	r1, r4, #0
    2f60:	47b8      	blx	r7
    2f62:	4baf      	ldr	r3, [pc, #700]	; (3220 <_Z17sofwareCorrectionv+0x33c>)
    2f64:	4798      	blx	r3
    2f66:	9002      	str	r0, [sp, #8]
    2f68:	9103      	str	r1, [sp, #12]
    2f6a:	1c30      	adds	r0, r6, #0
    2f6c:	4bad      	ldr	r3, [pc, #692]	; (3224 <_Z17sofwareCorrectionv+0x340>)
    2f6e:	4798      	blx	r3
    2f70:	1c01      	adds	r1, r0, #0
    2f72:	1c28      	adds	r0, r5, #0
    2f74:	4bac      	ldr	r3, [pc, #688]	; (3228 <_Z17sofwareCorrectionv+0x344>)
    2f76:	4798      	blx	r3
    2f78:	4bac      	ldr	r3, [pc, #688]	; (322c <_Z17sofwareCorrectionv+0x348>)
    2f7a:	4798      	blx	r3
    2f7c:	2200      	movs	r2, #0
    2f7e:	4bac      	ldr	r3, [pc, #688]	; (3230 <_Z17sofwareCorrectionv+0x34c>)
    2f80:	4dac      	ldr	r5, [pc, #688]	; (3234 <_Z17sofwareCorrectionv+0x350>)
    2f82:	47a8      	blx	r5
    2f84:	1c02      	adds	r2, r0, #0
    2f86:	1c0b      	adds	r3, r1, #0
    2f88:	9802      	ldr	r0, [sp, #8]
    2f8a:	9903      	ldr	r1, [sp, #12]
    2f8c:	4daa      	ldr	r5, [pc, #680]	; (3238 <_Z17sofwareCorrectionv+0x354>)
    2f8e:	47a8      	blx	r5
    2f90:	4baa      	ldr	r3, [pc, #680]	; (323c <_Z17sofwareCorrectionv+0x358>)
    2f92:	4798      	blx	r3
    2f94:	9008      	str	r0, [sp, #32]
		//unsigned long int averageTimeli=(averageTime.second*2000)+(averageTime.halfmillis);
		//calcul average offset
		averageOffset.second=sumOffset.second/timeProt.correction.nbCorrection;
    2f96:	4e9d      	ldr	r6, [pc, #628]	; (320c <_Z17sofwareCorrectionv+0x328>)
    2f98:	6830      	ldr	r0, [r6, #0]
    2f9a:	1c21      	adds	r1, r4, #0
    2f9c:	47b8      	blx	r7
    2f9e:	ad0a      	add	r5, sp, #40	; 0x28
    2fa0:	900a      	str	r0, [sp, #40]	; 0x28
		averageOffset.halfmillis=sumOffset.halfmillis/timeProt.correction.nbCorrection;
    2fa2:	6870      	ldr	r0, [r6, #4]
    2fa4:	1c21      	adds	r1, r4, #0
    2fa6:	47b8      	blx	r7
    2fa8:	6068      	str	r0, [r5, #4]
		averageOffset.sign=sumOffset.sign;
    2faa:	7a33      	ldrb	r3, [r6, #8]
    2fac:	b2db      	uxtb	r3, r3
    2fae:	722b      	strb	r3, [r5, #8]
		printfClock(averageTime);
		printf("averageOffseet: ");
		printfClock(averageOffset);*/
		
		//calcul of average time in hms
		unsigned long int diffhms=averageTime.second*RTC_FREQ+averageTime.halfmillis;
    2fb0:	9807      	ldr	r0, [sp, #28]
    2fb2:	9a08      	ldr	r2, [sp, #32]
		//offset in hms
		long int offset=averageOffset.second*RTC_FREQ+averageOffset.halfmillis;
    2fb4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    2fb6:	6869      	ldr	r1, [r5, #4]
    2fb8:	23fa      	movs	r3, #250	; 0xfa
    2fba:	01db      	lsls	r3, r3, #7
    2fbc:	4363      	muls	r3, r4
    2fbe:	185f      	adds	r7, r3, r1
		if (averageOffset.sign==false)
    2fc0:	7a2b      	ldrb	r3, [r5, #8]
    2fc2:	2b00      	cmp	r3, #0
    2fc4:	d100      	bne.n	2fc8 <_Z17sofwareCorrectionv+0xe4>
		{
			offset=-offset;
    2fc6:	427f      	negs	r7, r7
		float correctionTime=0.0;
		int corr;
		int corrTime;
		int nbwait;
		
		corr=valueCor;
    2fc8:	4b9d      	ldr	r3, [pc, #628]	; (3240 <_Z17sofwareCorrectionv+0x35c>)
    2fca:	681b      	ldr	r3, [r3, #0]
		nbwait=timeCorrection;
    2fcc:	4b9d      	ldr	r3, [pc, #628]	; (3244 <_Z17sofwareCorrectionv+0x360>)
    2fce:	681c      	ldr	r4, [r3, #0]
		corrTime=nbwait;		

		if(offset!=0){
    2fd0:	2f00      	cmp	r7, #0
    2fd2:	d100      	bne.n	2fd6 <_Z17sofwareCorrectionv+0xf2>
    2fd4:	e0f8      	b.n	31c8 <_Z17sofwareCorrectionv+0x2e4>
					//printf("correction need %d(%d)\r\n",(int)fcorr,nbwait);	
					if(fcorr<0){
						fcorr=-fcorr;
					}
					
					while((nbwait<1000)&&(fcorr<0.5)){
    2fd6:	4b9c      	ldr	r3, [pc, #624]	; (3248 <_Z17sofwareCorrectionv+0x364>)
    2fd8:	429c      	cmp	r4, r3
    2fda:	dc27      	bgt.n	302c <_Z17sofwareCorrectionv+0x148>
		printfClock(averageTime);
		printf("averageOffseet: ");
		printfClock(averageOffset);*/
		
		//calcul of average time in hms
		unsigned long int diffhms=averageTime.second*RTC_FREQ+averageTime.halfmillis;
    2fdc:	23fa      	movs	r3, #250	; 0xfa
    2fde:	01db      	lsls	r3, r3, #7
    2fe0:	4358      	muls	r0, r3
    2fe2:	1880      	adds	r0, r0, r2
					if(fcorr<0){
						fcorr=-fcorr;
					}
					
					while((nbwait<1000)&&(fcorr<0.5)){
						fcorr=(float)((float)VALUE_TIMER*nbwait*offset*1.0)/(diffhms);
    2fe4:	4b8a      	ldr	r3, [pc, #552]	; (3210 <_Z17sofwareCorrectionv+0x32c>)
    2fe6:	4798      	blx	r3
    2fe8:	9002      	str	r0, [sp, #8]
    2fea:	4e8e      	ldr	r6, [pc, #568]	; (3224 <_Z17sofwareCorrectionv+0x340>)
    2fec:	4d97      	ldr	r5, [pc, #604]	; (324c <_Z17sofwareCorrectionv+0x368>)
    2fee:	4b89      	ldr	r3, [pc, #548]	; (3214 <_Z17sofwareCorrectionv+0x330>)
    2ff0:	469a      	mov	sl, r3
					//printf("correction need %d(%d)\r\n",(int)fcorr,nbwait);	
					if(fcorr<0){
						fcorr=-fcorr;
					}
					
					while((nbwait<1000)&&(fcorr<0.5)){
    2ff2:	23fa      	movs	r3, #250	; 0xfa
    2ff4:	009b      	lsls	r3, r3, #2
    2ff6:	4699      	mov	r9, r3
    2ff8:	4b95      	ldr	r3, [pc, #596]	; (3250 <_Z17sofwareCorrectionv+0x36c>)
    2ffa:	469b      	mov	fp, r3
    2ffc:	9704      	str	r7, [sp, #16]
						fcorr=(float)((float)VALUE_TIMER*nbwait*offset*1.0)/(diffhms);
    2ffe:	1c20      	adds	r0, r4, #0
    3000:	47b0      	blx	r6
    3002:	4994      	ldr	r1, [pc, #592]	; (3254 <_Z17sofwareCorrectionv+0x370>)
    3004:	47a8      	blx	r5
    3006:	1c07      	adds	r7, r0, #0
    3008:	9804      	ldr	r0, [sp, #16]
    300a:	47b0      	blx	r6
    300c:	1c01      	adds	r1, r0, #0
    300e:	1c38      	adds	r0, r7, #0
    3010:	47a8      	blx	r5
    3012:	9902      	ldr	r1, [sp, #8]
    3014:	47d0      	blx	sl
    3016:	1c07      	adds	r7, r0, #0
						nbwait++;
    3018:	3401      	adds	r4, #1
					//printf("correction need %d(%d)\r\n",(int)fcorr,nbwait);	
					if(fcorr<0){
						fcorr=-fcorr;
					}
					
					while((nbwait<1000)&&(fcorr<0.5)){
    301a:	454c      	cmp	r4, r9
    301c:	d009      	beq.n	3032 <_Z17sofwareCorrectionv+0x14e>
    301e:	21fc      	movs	r1, #252	; 0xfc
    3020:	0589      	lsls	r1, r1, #22
    3022:	47d8      	blx	fp
    3024:	2800      	cmp	r0, #0
    3026:	d1ea      	bne.n	2ffe <_Z17sofwareCorrectionv+0x11a>
    3028:	1c3a      	adds	r2, r7, #0
    302a:	e003      	b.n	3034 <_Z17sofwareCorrectionv+0x150>
    302c:	2300      	movs	r3, #0
    302e:	1c1a      	adds	r2, r3, #0
    3030:	e000      	b.n	3034 <_Z17sofwareCorrectionv+0x150>
    3032:	1c02      	adds	r2, r0, #0
					//fcorr=fcorr*RTC_FREQ;	
					

				//	printf("correction need %d/10(%d)\r\n",(int)fcorr*10,nbwait);			
					int i;
					timeProt.correction.moySoftCor[timeProt.correction.indiceMoySoftCor][0]=fcorr;
    3034:	4e72      	ldr	r6, [pc, #456]	; (3200 <_Z17sofwareCorrectionv+0x31c>)
    3036:	2390      	movs	r3, #144	; 0x90
    3038:	005b      	lsls	r3, r3, #1
    303a:	5cf5      	ldrb	r5, [r6, r3]
    303c:	1c2b      	adds	r3, r5, #0
    303e:	3319      	adds	r3, #25
    3040:	00db      	lsls	r3, r3, #3
    3042:	18f3      	adds	r3, r6, r3
    3044:	609a      	str	r2, [r3, #8]
					timeProt.correction.moySoftCor[timeProt.correction.indiceMoySoftCor][1]=nbwait;
    3046:	00eb      	lsls	r3, r5, #3
    3048:	18f6      	adds	r6, r6, r3
    304a:	36cc      	adds	r6, #204	; 0xcc
    304c:	1c20      	adds	r0, r4, #0
    304e:	4b75      	ldr	r3, [pc, #468]	; (3224 <_Z17sofwareCorrectionv+0x340>)
    3050:	4798      	blx	r3
    3052:	60b0      	str	r0, [r6, #8]
					timeProt.correction.indiceMoySoftCor++;
    3054:	3501      	adds	r5, #1
    3056:	b2ed      	uxtb	r5, r5
					if(indice<MOYCORLENGTH){//if ze have enougth space to sqve the value
						indice++;
    3058:	2209      	movs	r2, #9
    305a:	4643      	mov	r3, r8
    305c:	0fd9      	lsrs	r1, r3, #31
    305e:	17d3      	asrs	r3, r2, #31
    3060:	4640      	mov	r0, r8
    3062:	4282      	cmp	r2, r0
    3064:	414b      	adcs	r3, r1
    3066:	4498      	add	r8, r3
					}
					if(timeProt.correction.indiceMoySoftCor>indice){
    3068:	45a8      	cmp	r8, r5
    306a:	db04      	blt.n	3076 <_Z17sofwareCorrectionv+0x192>

				//	printf("correction need %d/10(%d)\r\n",(int)fcorr*10,nbwait);			
					int i;
					timeProt.correction.moySoftCor[timeProt.correction.indiceMoySoftCor][0]=fcorr;
					timeProt.correction.moySoftCor[timeProt.correction.indiceMoySoftCor][1]=nbwait;
					timeProt.correction.indiceMoySoftCor++;
    306c:	2390      	movs	r3, #144	; 0x90
    306e:	005b      	lsls	r3, r3, #1
    3070:	4a63      	ldr	r2, [pc, #396]	; (3200 <_Z17sofwareCorrectionv+0x31c>)
    3072:	54d5      	strb	r5, [r2, r3]
    3074:	e004      	b.n	3080 <_Z17sofwareCorrectionv+0x19c>
					if(indice<MOYCORLENGTH){//if ze have enougth space to sqve the value
						indice++;
					}
					if(timeProt.correction.indiceMoySoftCor>indice){
						timeProt.correction.indiceMoySoftCor=0;
    3076:	2100      	movs	r1, #0
    3078:	2390      	movs	r3, #144	; 0x90
    307a:	005b      	lsls	r3, r3, #1
    307c:	4a60      	ldr	r2, [pc, #384]	; (3200 <_Z17sofwareCorrectionv+0x31c>)
    307e:	54d1      	strb	r1, [r2, r3]
					}
					
					
					for(i=0;i<indice;i++){//go to the maximum value save
    3080:	4643      	mov	r3, r8
    3082:	2b00      	cmp	r3, #0
    3084:	dd18      	ble.n	30b8 <_Z17sofwareCorrectionv+0x1d4>
    3086:	4a5e      	ldr	r2, [pc, #376]	; (3200 <_Z17sofwareCorrectionv+0x31c>)
    3088:	1c16      	adds	r6, r2, #0
    308a:	36d0      	adds	r6, #208	; 0xd0
    308c:	331a      	adds	r3, #26
    308e:	00db      	lsls	r3, r3, #3
    3090:	18d5      	adds	r5, r2, r3
    3092:	2400      	movs	r4, #0
    3094:	9402      	str	r4, [sp, #8]
						//	printf("i : %d, value : %d\r\n",i,(int)timeProt.correction.moySoftCor[i]);
							correctionSoft+=timeProt.correction.moySoftCor[i][0];
    3096:	4f70      	ldr	r7, [pc, #448]	; (3258 <_Z17sofwareCorrectionv+0x374>)
    3098:	1c2b      	adds	r3, r5, #0
    309a:	1c25      	adds	r5, r4, #0
    309c:	1c1c      	adds	r4, r3, #0
    309e:	9802      	ldr	r0, [sp, #8]
    30a0:	6831      	ldr	r1, [r6, #0]
    30a2:	47b8      	blx	r7
    30a4:	9002      	str	r0, [sp, #8]
							correctionTime+=timeProt.correction.moySoftCor[i][1];
    30a6:	1c28      	adds	r0, r5, #0
    30a8:	6871      	ldr	r1, [r6, #4]
    30aa:	47b8      	blx	r7
    30ac:	1c05      	adds	r5, r0, #0
    30ae:	3608      	adds	r6, #8
					if(timeProt.correction.indiceMoySoftCor>indice){
						timeProt.correction.indiceMoySoftCor=0;
					}
					
					
					for(i=0;i<indice;i++){//go to the maximum value save
    30b0:	42a6      	cmp	r6, r4
    30b2:	d1f4      	bne.n	309e <_Z17sofwareCorrectionv+0x1ba>
    30b4:	1c04      	adds	r4, r0, #0
    30b6:	e001      	b.n	30bc <_Z17sofwareCorrectionv+0x1d8>
			offset=-offset;
		}
		//printf("offset : %lu\r\n",offset);
		//printf("diffhms : %lu\r\n",diffhms);
		float correctionSoft=0.0;
		float correctionTime=0.0;
    30b8:	2400      	movs	r4, #0
		{
			offset=-offset;
		}
		//printf("offset : %lu\r\n",offset);
		//printf("diffhms : %lu\r\n",diffhms);
		float correctionSoft=0.0;
    30ba:	9402      	str	r4, [sp, #8]
							correctionSoft+=timeProt.correction.moySoftCor[i][0];
							correctionTime+=timeProt.correction.moySoftCor[i][1];
					}
				//	printf("sumCorr : %d",(int)correctionSoft);
					
					correctionSoft=(float)(1.0*correctionSoft)/(indice*1.0);//calcul the average value of the software correction 
    30bc:	4640      	mov	r0, r8
    30be:	4b67      	ldr	r3, [pc, #412]	; (325c <_Z17sofwareCorrectionv+0x378>)
    30c0:	4798      	blx	r3
    30c2:	9004      	str	r0, [sp, #16]
    30c4:	9105      	str	r1, [sp, #20]
    30c6:	4f59      	ldr	r7, [pc, #356]	; (322c <_Z17sofwareCorrectionv+0x348>)
    30c8:	9802      	ldr	r0, [sp, #8]
    30ca:	47b8      	blx	r7
    30cc:	4e64      	ldr	r6, [pc, #400]	; (3260 <_Z17sofwareCorrectionv+0x37c>)
    30ce:	9a04      	ldr	r2, [sp, #16]
    30d0:	9b05      	ldr	r3, [sp, #20]
    30d2:	47b0      	blx	r6
    30d4:	4d63      	ldr	r5, [pc, #396]	; (3264 <_Z17sofwareCorrectionv+0x380>)
    30d6:	47a8      	blx	r5
    30d8:	9002      	str	r0, [sp, #8]
					correctionTime=(float)(1.0*correctionTime)/(indice*1.0);//calcul the average value of the software correction 
    30da:	1c20      	adds	r0, r4, #0
    30dc:	47b8      	blx	r7
    30de:	9a04      	ldr	r2, [sp, #16]
    30e0:	9b05      	ldr	r3, [sp, #20]
    30e2:	47b0      	blx	r6
    30e4:	47a8      	blx	r5
    30e6:	9004      	str	r0, [sp, #16]
					corr=(int)correctionSoft;//cast to int
					corrTime=(int)correctionTime;//cast to int
    30e8:	4a4b      	ldr	r2, [pc, #300]	; (3218 <_Z17sofwareCorrectionv+0x334>)
    30ea:	4693      	mov	fp, r2
    30ec:	4790      	blx	r2
    30ee:	1c04      	adds	r4, r0, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    30f0:	b672      	cpsid	i
    30f2:	f3bf 8f5f 	dmb	sy
					Disable_global_interrupt();
    30f6:	4d5c      	ldr	r5, [pc, #368]	; (3268 <_Z17sofwareCorrectionv+0x384>)
    30f8:	2300      	movs	r3, #0
    30fa:	702b      	strb	r3, [r5, #0]
					corr=valueCor+Coef_Software_Correction*(corr-valueCor);
    30fc:	4f50      	ldr	r7, [pc, #320]	; (3240 <_Z17sofwareCorrectionv+0x35c>)
    30fe:	683e      	ldr	r6, [r7, #0]
					}
				//	printf("sumCorr : %d",(int)correctionSoft);
					
					correctionSoft=(float)(1.0*correctionSoft)/(indice*1.0);//calcul the average value of the software correction 
					correctionTime=(float)(1.0*correctionTime)/(indice*1.0);//calcul the average value of the software correction 
					corr=(int)correctionSoft;//cast to int
    3100:	9802      	ldr	r0, [sp, #8]
    3102:	47d8      	blx	fp
					corrTime=(int)correctionTime;//cast to int
					Disable_global_interrupt();
					corr=valueCor+Coef_Software_Correction*(corr-valueCor);
    3104:	1b80      	subs	r0, r0, r6
    3106:	683f      	ldr	r7, [r7, #0]
    3108:	19c7      	adds	r7, r0, r7
					Enable_global_interrupt();
    310a:	2301      	movs	r3, #1
    310c:	702b      	strb	r3, [r5, #0]
    310e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    3112:	b662      	cpsie	i
					if(corr<0){
    3114:	2f00      	cmp	r7, #0
    3116:	da0e      	bge.n	3136 <_Z17sofwareCorrectionv+0x252>
							if(correctionSoft-corr<-0.5){//calculate int the most close to the real value
    3118:	1c38      	adds	r0, r7, #0
    311a:	4b42      	ldr	r3, [pc, #264]	; (3224 <_Z17sofwareCorrectionv+0x340>)
    311c:	4798      	blx	r3
    311e:	1c01      	adds	r1, r0, #0
    3120:	9802      	ldr	r0, [sp, #8]
    3122:	4b41      	ldr	r3, [pc, #260]	; (3228 <_Z17sofwareCorrectionv+0x344>)
    3124:	4798      	blx	r3
    3126:	21bf      	movs	r1, #191	; 0xbf
    3128:	0609      	lsls	r1, r1, #24
    312a:	4b49      	ldr	r3, [pc, #292]	; (3250 <_Z17sofwareCorrectionv+0x36c>)
    312c:	4798      	blx	r3
								corr--;
    312e:	1e43      	subs	r3, r0, #1
    3130:	4198      	sbcs	r0, r3
    3132:	1a3f      	subs	r7, r7, r0
    3134:	e00d      	b.n	3152 <_Z17sofwareCorrectionv+0x26e>
							}
					//		printf("corr<0");
					}
					else{
							if(correctionSoft-corr>0.5){//calculate int the most close to the real value
    3136:	1c38      	adds	r0, r7, #0
    3138:	4b3a      	ldr	r3, [pc, #232]	; (3224 <_Z17sofwareCorrectionv+0x340>)
    313a:	4798      	blx	r3
    313c:	1c01      	adds	r1, r0, #0
    313e:	9802      	ldr	r0, [sp, #8]
    3140:	4b39      	ldr	r3, [pc, #228]	; (3228 <_Z17sofwareCorrectionv+0x344>)
    3142:	4798      	blx	r3
    3144:	21fc      	movs	r1, #252	; 0xfc
    3146:	0589      	lsls	r1, r1, #22
    3148:	4b48      	ldr	r3, [pc, #288]	; (326c <_Z17sofwareCorrectionv+0x388>)
    314a:	4798      	blx	r3
								corr++;
    314c:	1e43      	subs	r3, r0, #1
    314e:	4198      	sbcs	r0, r3
    3150:	183f      	adds	r7, r7, r0
							}
					//		printf("corr>0");
					}
					
					if(correctionTime-corrTime>0.5){//calculate int the most close to the real value
    3152:	1c20      	adds	r0, r4, #0
    3154:	4b33      	ldr	r3, [pc, #204]	; (3224 <_Z17sofwareCorrectionv+0x340>)
    3156:	4798      	blx	r3
    3158:	1c01      	adds	r1, r0, #0
    315a:	9804      	ldr	r0, [sp, #16]
    315c:	4b32      	ldr	r3, [pc, #200]	; (3228 <_Z17sofwareCorrectionv+0x344>)
    315e:	4798      	blx	r3
    3160:	21fc      	movs	r1, #252	; 0xfc
    3162:	0589      	lsls	r1, r1, #22
    3164:	4b41      	ldr	r3, [pc, #260]	; (326c <_Z17sofwareCorrectionv+0x388>)
    3166:	4798      	blx	r3
						corrTime++;
    3168:	1e43      	subs	r3, r0, #1
    316a:	4198      	sbcs	r0, r3
    316c:	1824      	adds	r4, r4, r0
					}
					//	printf("moy : %d",(int)correctionSoft*1000);
					//	printf("corr: %u",corr);
					int pgcdi =pgcd(corrTime,corr);
    316e:	1c20      	adds	r0, r4, #0
    3170:	1c39      	adds	r1, r7, #0
    3172:	4b3f      	ldr	r3, [pc, #252]	; (3270 <_Z17sofwareCorrectionv+0x38c>)
    3174:	4798      	blx	r3
    3176:	1c03      	adds	r3, r0, #0
					corrTime=corrTime/pgcdi;
    3178:	4a3e      	ldr	r2, [pc, #248]	; (3274 <_Z17sofwareCorrectionv+0x390>)
    317a:	4692      	mov	sl, r2
    317c:	1c20      	adds	r0, r4, #0
    317e:	9302      	str	r3, [sp, #8]
    3180:	1c19      	adds	r1, r3, #0
    3182:	4790      	blx	r2
    3184:	1c04      	adds	r4, r0, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    3186:	b672      	cpsid	i
    3188:	f3bf 8f5f 	dmb	sy
					corr=corr/pgcdi;
					Disable_global_interrupt();
    318c:	4a36      	ldr	r2, [pc, #216]	; (3268 <_Z17sofwareCorrectionv+0x384>)
    318e:	4691      	mov	r9, r2
    3190:	2300      	movs	r3, #0
    3192:	7013      	strb	r3, [r2, #0]
					
					valueCor=valueCor+Coef_Software_Correction*(corr-valueCor);
    3194:	4d2a      	ldr	r5, [pc, #168]	; (3240 <_Z17sofwareCorrectionv+0x35c>)
    3196:	682a      	ldr	r2, [r5, #0]
    3198:	4693      	mov	fp, r2
    319a:	682e      	ldr	r6, [r5, #0]
					}
					//	printf("moy : %d",(int)correctionSoft*1000);
					//	printf("corr: %u",corr);
					int pgcdi =pgcd(corrTime,corr);
					corrTime=corrTime/pgcdi;
					corr=corr/pgcdi;
    319c:	1c38      	adds	r0, r7, #0
    319e:	9902      	ldr	r1, [sp, #8]
    31a0:	47d0      	blx	sl
					Disable_global_interrupt();
					
					valueCor=valueCor+Coef_Software_Correction*(corr-valueCor);
    31a2:	465b      	mov	r3, fp
    31a4:	1ac0      	subs	r0, r0, r3
    31a6:	1986      	adds	r6, r0, r6
    31a8:	602e      	str	r6, [r5, #0]
					timeCorrection=corrTime;
    31aa:	4b26      	ldr	r3, [pc, #152]	; (3244 <_Z17sofwareCorrectionv+0x360>)
    31ac:	601c      	str	r4, [r3, #0]
					timeCorr=corrTime;
    31ae:	4b32      	ldr	r3, [pc, #200]	; (3278 <_Z17sofwareCorrectionv+0x394>)
    31b0:	601c      	str	r4, [r3, #0]
					Enable_global_interrupt();
    31b2:	2301      	movs	r3, #1
    31b4:	464a      	mov	r2, r9
    31b6:	7013      	strb	r3, [r2, #0]
    31b8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    31bc:	b662      	cpsie	i
						
					
					timeProt.correction.indiceFull=indice;
    31be:	2322      	movs	r3, #34	; 0x22
    31c0:	33ff      	adds	r3, #255	; 0xff
    31c2:	4a0f      	ldr	r2, [pc, #60]	; (3200 <_Z17sofwareCorrectionv+0x31c>)
    31c4:	4641      	mov	r1, r8
    31c6:	54d1      	strb	r1, [r2, r3]
		}
			
		resetSofftwareCorrection();
    31c8:	4b2c      	ldr	r3, [pc, #176]	; (327c <_Z17sofwareCorrectionv+0x398>)
    31ca:	4798      	blx	r3
		sprintf(messageHMICor,"		update time corr: %d(%d) sign : %d with %d sample",(int)valueCor,corrTime,averageOffset.sign,indice);
    31cc:	4b1c      	ldr	r3, [pc, #112]	; (3240 <_Z17sofwareCorrectionv+0x35c>)
    31ce:	681a      	ldr	r2, [r3, #0]
    31d0:	ab0a      	add	r3, sp, #40	; 0x28
    31d2:	7a1b      	ldrb	r3, [r3, #8]
    31d4:	4d2a      	ldr	r5, [pc, #168]	; (3280 <_Z17sofwareCorrectionv+0x39c>)
    31d6:	9300      	str	r3, [sp, #0]
    31d8:	4643      	mov	r3, r8
    31da:	9301      	str	r3, [sp, #4]
    31dc:	1c28      	adds	r0, r5, #0
    31de:	4929      	ldr	r1, [pc, #164]	; (3284 <_Z17sofwareCorrectionv+0x3a0>)
    31e0:	1c23      	adds	r3, r4, #0
    31e2:	4c29      	ldr	r4, [pc, #164]	; (3288 <_Z17sofwareCorrectionv+0x3a4>)
    31e4:	47a0      	blx	r4
		sendHMI(messageHMICor);
    31e6:	1c28      	adds	r0, r5, #0
    31e8:	4c07      	ldr	r4, [pc, #28]	; (3208 <_Z17sofwareCorrectionv+0x324>)
    31ea:	47a0      	blx	r4
		sendHMI("	end Software correction");
    31ec:	4827      	ldr	r0, [pc, #156]	; (328c <_Z17sofwareCorrectionv+0x3a8>)
    31ee:	47a0      	blx	r4
	}
	
}
    31f0:	b011      	add	sp, #68	; 0x44
    31f2:	bc3c      	pop	{r2, r3, r4, r5}
    31f4:	4690      	mov	r8, r2
    31f6:	4699      	mov	r9, r3
    31f8:	46a2      	mov	sl, r4
    31fa:	46ab      	mov	fp, r5
    31fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    31fe:	46c0      	nop			; (mov r8, r8)
    3200:	200042cc 	.word	0x200042cc
    3204:	0000ed00 	.word	0x0000ed00
    3208:	00003c15 	.word	0x00003c15
    320c:	200041f8 	.word	0x200041f8
    3210:	00007815 	.word	0x00007815
    3214:	00006e01 	.word	0x00006e01
    3218:	00007745 	.word	0x00007745
    321c:	00006685 	.word	0x00006685
    3220:	0000947d 	.word	0x0000947d
    3224:	00007785 	.word	0x00007785
    3228:	00007449 	.word	0x00007449
    322c:	000094e1 	.word	0x000094e1
    3230:	40df4000 	.word	0x40df4000
    3234:	00008771 	.word	0x00008771
    3238:	000078a5 	.word	0x000078a5
    323c:	00006acd 	.word	0x00006acd
    3240:	20003d50 	.word	0x20003d50
    3244:	20003d28 	.word	0x20003d28
    3248:	000003e7 	.word	0x000003e7
    324c:	000071e5 	.word	0x000071e5
    3250:	00006a29 	.word	0x00006a29
    3254:	461c4000 	.word	0x461c4000
    3258:	00006b09 	.word	0x00006b09
    325c:	00009405 	.word	0x00009405
    3260:	00007ef5 	.word	0x00007ef5
    3264:	00009589 	.word	0x00009589
    3268:	200000d0 	.word	0x200000d0
    326c:	00006a51 	.word	0x00006a51
    3270:	00002e7d 	.word	0x00002e7d
    3274:	000067a5 	.word	0x000067a5
    3278:	20003d30 	.word	0x20003d30
    327c:	00002ec1 	.word	0x00002ec1
    3280:	20004204 	.word	0x20004204
    3284:	0000ed18 	.word	0x0000ed18
    3288:	0000b469 	.word	0x0000b469
    328c:	0000ed4c 	.word	0x0000ed4c

00003290 <_Z18hardwareCorrectionv>:
		timeProt.correction.nbCorrection=0;
		timeProt.correction.sumTime.second=0;
		timeProt.correction.sumTime.halfmillis=0;
		timeProt.correction.currentTimeOffsetSync.second=0;// to not take the first value
}
bool hardwareCorrection(void){
    3290:	b5f0      	push	{r4, r5, r6, r7, lr}
    3292:	b08b      	sub	sp, #44	; 0x2c
	if(timeProt.correction.nbCorrection!=0){
    3294:	23a4      	movs	r3, #164	; 0xa4
    3296:	4a73      	ldr	r2, [pc, #460]	; (3464 <_Z18hardwareCorrectionv+0x1d4>)
    3298:	58d3      	ldr	r3, [r2, r3]
			sendHMI("	end correction");
			return false;
		}
		
	}
	return false;	
    329a:	2000      	movs	r0, #0
		timeProt.correction.sumTime.second=0;
		timeProt.correction.sumTime.halfmillis=0;
		timeProt.correction.currentTimeOffsetSync.second=0;// to not take the first value
}
bool hardwareCorrection(void){
	if(timeProt.correction.nbCorrection!=0){
    329c:	2b00      	cmp	r3, #0
    329e:	d100      	bne.n	32a2 <_Z18hardwareCorrectionv+0x12>
    32a0:	e0dd      	b.n	345e <_Z18hardwareCorrectionv+0x1ce>
		sendHMI("	Hardware correction");
    32a2:	4871      	ldr	r0, [pc, #452]	; (3468 <_Z18hardwareCorrectionv+0x1d8>)
    32a4:	4b71      	ldr	r3, [pc, #452]	; (346c <_Z18hardwareCorrectionv+0x1dc>)
    32a6:	4798      	blx	r3
		long int sumOffsetl;
		Clock averageTime={0,0,true};
    32a8:	af07      	add	r7, sp, #28
    32aa:	2300      	movs	r3, #0
    32ac:	9307      	str	r3, [sp, #28]
    32ae:	9308      	str	r3, [sp, #32]
    32b0:	3301      	adds	r3, #1
    32b2:	723b      	strb	r3, [r7, #8]
		float second=(float)timeProt.correction.sumTime.second/timeProt.correction.nbCorrection;
    32b4:	4c6b      	ldr	r4, [pc, #428]	; (3464 <_Z18hardwareCorrectionv+0x1d4>)
    32b6:	33c3      	adds	r3, #195	; 0xc3
    32b8:	58e0      	ldr	r0, [r4, r3]
    32ba:	3b20      	subs	r3, #32
    32bc:	58e3      	ldr	r3, [r4, r3]
    32be:	9303      	str	r3, [sp, #12]
    32c0:	4e6b      	ldr	r6, [pc, #428]	; (3470 <_Z18hardwareCorrectionv+0x1e0>)
    32c2:	47b0      	blx	r6
    32c4:	1c05      	adds	r5, r0, #0
    32c6:	9803      	ldr	r0, [sp, #12]
    32c8:	47b0      	blx	r6
    32ca:	1c01      	adds	r1, r0, #0
    32cc:	1c28      	adds	r0, r5, #0
    32ce:	4b69      	ldr	r3, [pc, #420]	; (3474 <_Z18hardwareCorrectionv+0x1e4>)
    32d0:	4798      	blx	r3
    32d2:	1c05      	adds	r5, r0, #0
		int secondi=(int)second;
    32d4:	4b68      	ldr	r3, [pc, #416]	; (3478 <_Z18hardwareCorrectionv+0x1e8>)
    32d6:	4798      	blx	r3
    32d8:	1c06      	adds	r6, r0, #0
		//calcul average time
		//printf("second : %d,%d",secondi,(int)((second-secondi)*1000.0));
		
		averageTime.second=secondi;
    32da:	9007      	str	r0, [sp, #28]
		averageTime.halfmillis=(timeProt.correction.sumTime.halfmillis/timeProt.correction.nbCorrection)+RTC_FREQ*1.0*((float)(second-secondi));
    32dc:	23c8      	movs	r3, #200	; 0xc8
    32de:	58e0      	ldr	r0, [r4, r3]
    32e0:	9903      	ldr	r1, [sp, #12]
    32e2:	4b66      	ldr	r3, [pc, #408]	; (347c <_Z18hardwareCorrectionv+0x1ec>)
    32e4:	4798      	blx	r3
    32e6:	4c66      	ldr	r4, [pc, #408]	; (3480 <_Z18hardwareCorrectionv+0x1f0>)
    32e8:	47a0      	blx	r4
    32ea:	9004      	str	r0, [sp, #16]
    32ec:	9105      	str	r1, [sp, #20]
    32ee:	1c30      	adds	r0, r6, #0
    32f0:	4b64      	ldr	r3, [pc, #400]	; (3484 <_Z18hardwareCorrectionv+0x1f4>)
    32f2:	4798      	blx	r3
    32f4:	1c01      	adds	r1, r0, #0
    32f6:	1c28      	adds	r0, r5, #0
    32f8:	4b63      	ldr	r3, [pc, #396]	; (3488 <_Z18hardwareCorrectionv+0x1f8>)
    32fa:	4798      	blx	r3
    32fc:	4b63      	ldr	r3, [pc, #396]	; (348c <_Z18hardwareCorrectionv+0x1fc>)
    32fe:	4798      	blx	r3
    3300:	2200      	movs	r2, #0
    3302:	4b63      	ldr	r3, [pc, #396]	; (3490 <_Z18hardwareCorrectionv+0x200>)
    3304:	4d63      	ldr	r5, [pc, #396]	; (3494 <_Z18hardwareCorrectionv+0x204>)
    3306:	47a8      	blx	r5
    3308:	1c02      	adds	r2, r0, #0
    330a:	1c0b      	adds	r3, r1, #0
    330c:	9804      	ldr	r0, [sp, #16]
    330e:	9905      	ldr	r1, [sp, #20]
    3310:	4d61      	ldr	r5, [pc, #388]	; (3498 <_Z18hardwareCorrectionv+0x208>)
    3312:	47a8      	blx	r5
    3314:	4b61      	ldr	r3, [pc, #388]	; (349c <_Z18hardwareCorrectionv+0x20c>)
    3316:	4798      	blx	r3
    3318:	6078      	str	r0, [r7, #4]
		unsigned long int averageTimeli=(averageTime.second*RTC_FREQ)+(averageTime.halfmillis);
    331a:	9b07      	ldr	r3, [sp, #28]
    331c:	687a      	ldr	r2, [r7, #4]
    331e:	26fa      	movs	r6, #250	; 0xfa
    3320:	01f6      	lsls	r6, r6, #7
    3322:	4373      	muls	r3, r6
    3324:	189f      	adds	r7, r3, r2
	
		//printf("averageTime : %lu\r\n",averageTime);
		float Fnow=(float)RTC_FREQ*1.0/count_set_period;
    3326:	4b5e      	ldr	r3, [pc, #376]	; (34a0 <_Z18hardwareCorrectionv+0x210>)
    3328:	6818      	ldr	r0, [r3, #0]
    332a:	47a0      	blx	r4
    332c:	1c02      	adds	r2, r0, #0
    332e:	1c0b      	adds	r3, r1, #0
    3330:	2000      	movs	r0, #0
    3332:	4957      	ldr	r1, [pc, #348]	; (3490 <_Z18hardwareCorrectionv+0x200>)
    3334:	4d5b      	ldr	r5, [pc, #364]	; (34a4 <_Z18hardwareCorrectionv+0x214>)
    3336:	47a8      	blx	r5
    3338:	4b5b      	ldr	r3, [pc, #364]	; (34a8 <_Z18hardwareCorrectionv+0x218>)
    333a:	4798      	blx	r3
    333c:	9004      	str	r0, [sp, #16]
		float Fafter=0;
		//calcul of the sumOffset in ms

		sumOffsetl=(sumOffset.second*RTC_FREQ)+(sumOffset.halfmillis);
    333e:	4a5b      	ldr	r2, [pc, #364]	; (34ac <_Z18hardwareCorrectionv+0x21c>)
    3340:	6810      	ldr	r0, [r2, #0]
    3342:	6853      	ldr	r3, [r2, #4]
    3344:	4370      	muls	r0, r6
    3346:	18c0      	adds	r0, r0, r3
		if(sumOffset.sign!=true){
    3348:	7a13      	ldrb	r3, [r2, #8]
    334a:	2b00      	cmp	r3, #0
    334c:	d100      	bne.n	3350 <_Z18hardwareCorrectionv+0xc0>
			sumOffsetl=-sumOffsetl;
    334e:	4240      	negs	r0, r0
		

		//printf("correction nb : %d",timeProt.correction.nbCorrection);
		//average per period of sync
		int nbcor=timeProt.correction.nbCorrection;
		sumOffsetl=sumOffsetl/nbcor;
    3350:	9903      	ldr	r1, [sp, #12]
    3352:	4b57      	ldr	r3, [pc, #348]	; (34b0 <_Z18hardwareCorrectionv+0x220>)
    3354:	4798      	blx	r3
		
		//printf("sumOffsetmoy :  %ld\r\n",sumOffset/2);
		sumOffsetl=sumOffsetl/(float)(averageTimeli/(RTC_FREQ*1.0));
    3356:	4d4b      	ldr	r5, [pc, #300]	; (3484 <_Z18hardwareCorrectionv+0x1f4>)
    3358:	47a8      	blx	r5
    335a:	1c06      	adds	r6, r0, #0
    335c:	1c38      	adds	r0, r7, #0
    335e:	4b48      	ldr	r3, [pc, #288]	; (3480 <_Z18hardwareCorrectionv+0x1f0>)
    3360:	4798      	blx	r3
    3362:	2200      	movs	r2, #0
    3364:	4b4a      	ldr	r3, [pc, #296]	; (3490 <_Z18hardwareCorrectionv+0x200>)
    3366:	4c4f      	ldr	r4, [pc, #316]	; (34a4 <_Z18hardwareCorrectionv+0x214>)
    3368:	47a0      	blx	r4
    336a:	4b4f      	ldr	r3, [pc, #316]	; (34a8 <_Z18hardwareCorrectionv+0x218>)
    336c:	4798      	blx	r3
    336e:	1c01      	adds	r1, r0, #0
    3370:	4c40      	ldr	r4, [pc, #256]	; (3474 <_Z18hardwareCorrectionv+0x1e4>)
    3372:	1c30      	adds	r0, r6, #0
    3374:	47a0      	blx	r4
    3376:	4b40      	ldr	r3, [pc, #256]	; (3478 <_Z18hardwareCorrectionv+0x1e8>)
    3378:	4798      	blx	r3
		//printf("sumOffset/S :  %ld\r\n",sumOffset/2);
	

	
		//number of ms/tick
		float decPerPeriod=(float)sumOffsetl/(RTC_FREQ*1.0);
    337a:	47a8      	blx	r5
    337c:	494d      	ldr	r1, [pc, #308]	; (34b4 <_Z18hardwareCorrectionv+0x224>)
    337e:	47a0      	blx	r4
    3380:	1c04      	adds	r4, r0, #0
		
		if(decPerPeriod<1.0){
    3382:	21fe      	movs	r1, #254	; 0xfe
    3384:	0589      	lsls	r1, r1, #22
    3386:	4b4c      	ldr	r3, [pc, #304]	; (34b8 <_Z18hardwareCorrectionv+0x228>)
    3388:	4798      	blx	r3
    338a:	2800      	cmp	r0, #0
    338c:	d00a      	beq.n	33a4 <_Z18hardwareCorrectionv+0x114>
			Fafter=Fnow/(double)(1-decPerPeriod);
    338e:	20fe      	movs	r0, #254	; 0xfe
    3390:	0580      	lsls	r0, r0, #22
    3392:	1c21      	adds	r1, r4, #0
    3394:	4b3c      	ldr	r3, [pc, #240]	; (3488 <_Z18hardwareCorrectionv+0x1f8>)
    3396:	4798      	blx	r3
    3398:	1c01      	adds	r1, r0, #0
    339a:	9804      	ldr	r0, [sp, #16]
    339c:	4b35      	ldr	r3, [pc, #212]	; (3474 <_Z18hardwareCorrectionv+0x1e4>)
    339e:	4798      	blx	r3
    33a0:	1c05      	adds	r5, r0, #0
    33a2:	e009      	b.n	33b8 <_Z18hardwareCorrectionv+0x128>
		}
		else{
			Fafter=Fnow/(double)(1+decPerPeriod);
    33a4:	1c20      	adds	r0, r4, #0
    33a6:	21fe      	movs	r1, #254	; 0xfe
    33a8:	0589      	lsls	r1, r1, #22
    33aa:	4b44      	ldr	r3, [pc, #272]	; (34bc <_Z18hardwareCorrectionv+0x22c>)
    33ac:	4798      	blx	r3
    33ae:	1c01      	adds	r1, r0, #0
    33b0:	9804      	ldr	r0, [sp, #16]
    33b2:	4b30      	ldr	r3, [pc, #192]	; (3474 <_Z18hardwareCorrectionv+0x1e4>)
    33b4:	4798      	blx	r3
    33b6:	1c05      	adds	r5, r0, #0
		}
		double dcount_set_period=32000/Fafter;
    33b8:	483e      	ldr	r0, [pc, #248]	; (34b4 <_Z18hardwareCorrectionv+0x224>)
    33ba:	1c29      	adds	r1, r5, #0
    33bc:	4b2d      	ldr	r3, [pc, #180]	; (3474 <_Z18hardwareCorrectionv+0x1e4>)
    33be:	4798      	blx	r3
    33c0:	1c06      	adds	r6, r0, #0
		unsigned int count;
		count=(int)dcount_set_period;
    33c2:	4b2d      	ldr	r3, [pc, #180]	; (3478 <_Z18hardwareCorrectionv+0x1e8>)
    33c4:	4798      	blx	r3
    33c6:	1c04      	adds	r4, r0, #0
			Fafter=Fnow/(double)(1-decPerPeriod);
		}
		else{
			Fafter=Fnow/(double)(1+decPerPeriod);
		}
		double dcount_set_period=32000/Fafter;
    33c8:	1c30      	adds	r0, r6, #0
    33ca:	4b30      	ldr	r3, [pc, #192]	; (348c <_Z18hardwareCorrectionv+0x1fc>)
    33cc:	4798      	blx	r3
    33ce:	1c06      	adds	r6, r0, #0
    33d0:	1c0f      	adds	r7, r1, #0
		unsigned int count;
		count=(int)dcount_set_period;
		if((dcount_set_period-count)>0.5){
    33d2:	1c20      	adds	r0, r4, #0
    33d4:	4b2a      	ldr	r3, [pc, #168]	; (3480 <_Z18hardwareCorrectionv+0x1f0>)
    33d6:	4798      	blx	r3
    33d8:	1c02      	adds	r2, r0, #0
    33da:	1c0b      	adds	r3, r1, #0
    33dc:	1c30      	adds	r0, r6, #0
    33de:	1c39      	adds	r1, r7, #0
    33e0:	4e37      	ldr	r6, [pc, #220]	; (34c0 <_Z18hardwareCorrectionv+0x230>)
    33e2:	47b0      	blx	r6
    33e4:	2200      	movs	r2, #0
    33e6:	4b37      	ldr	r3, [pc, #220]	; (34c4 <_Z18hardwareCorrectionv+0x234>)
    33e8:	4e37      	ldr	r6, [pc, #220]	; (34c8 <_Z18hardwareCorrectionv+0x238>)
    33ea:	47b0      	blx	r6
			count++;
    33ec:	1e43      	subs	r3, r0, #1
    33ee:	4198      	sbcs	r0, r3
    33f0:	1824      	adds	r4, r4, r0
    33f2:	23fa      	movs	r3, #250	; 0xfa
    33f4:	01db      	lsls	r3, r3, #7
    33f6:	429c      	cmp	r4, r3
    33f8:	d900      	bls.n	33fc <_Z18hardwareCorrectionv+0x16c>
    33fa:	1c1c      	adds	r4, r3, #0
		}
		if(count>RTC_FREQ){//never <1Hz of frequency
			count=RTC_FREQ;
		
		}
		if(count_set_period!=count){
    33fc:	4b28      	ldr	r3, [pc, #160]	; (34a0 <_Z18hardwareCorrectionv+0x210>)
    33fe:	681b      	ldr	r3, [r3, #0]
    3400:	42a3      	cmp	r3, r4
    3402:	d028      	beq.n	3456 <_Z18hardwareCorrectionv+0x1c6>
			count_set_period=count;
    3404:	4e26      	ldr	r6, [pc, #152]	; (34a0 <_Z18hardwareCorrectionv+0x210>)
    3406:	6034      	str	r4, [r6, #0]
			resetSofftwareCorrection();
    3408:	4b30      	ldr	r3, [pc, #192]	; (34cc <_Z18hardwareCorrectionv+0x23c>)
    340a:	4798      	blx	r3
			valueCor=0;
    340c:	2300      	movs	r3, #0
    340e:	4a30      	ldr	r2, [pc, #192]	; (34d0 <_Z18hardwareCorrectionv+0x240>)
    3410:	6013      	str	r3, [r2, #0]
			timeProt.correction.indiceFull=0;
    3412:	4a14      	ldr	r2, [pc, #80]	; (3464 <_Z18hardwareCorrectionv+0x1d4>)
    3414:	2122      	movs	r1, #34	; 0x22
    3416:	31ff      	adds	r1, #255	; 0xff
    3418:	5453      	strb	r3, [r2, r1]
			timeProt.correction.indiceMoySoftCor=0;
    341a:	3901      	subs	r1, #1
    341c:	5453      	strb	r3, [r2, r1]
			//printf("count : %u",(unsigned int)count);
			//rtc_count_set_compare(&rtc_instance,VALUE_TIMER,RTC_COUNT_COMPARE_0 );
		//	rtc_count_set_period(&rtc_instance,count_set_period); //MOMO
			RTC->MODE0.COMP[0].reg = count_set_period;
    341e:	6832      	ldr	r2, [r6, #0]
    3420:	4b2c      	ldr	r3, [pc, #176]	; (34d4 <_Z18hardwareCorrectionv+0x244>)
    3422:	619a      	str	r2, [r3, #24]
			unsigned int Fuse=(RTC_FREQ/count_set_period);
    3424:	6837      	ldr	r7, [r6, #0]
			unsigned int Fbest=(int)Fafter;
		
			sprintf(messageHMICor,"		Fbest: %u Hz, Fuse= %u Hz count=%d",(unsigned int)Fbest,(unsigned int)Fuse,count);
    3426:	4e2c      	ldr	r6, [pc, #176]	; (34d8 <_Z18hardwareCorrectionv+0x248>)
			//printf("count : %u",(unsigned int)count);
			//rtc_count_set_compare(&rtc_instance,VALUE_TIMER,RTC_COUNT_COMPARE_0 );
		//	rtc_count_set_period(&rtc_instance,count_set_period); //MOMO
			RTC->MODE0.COMP[0].reg = count_set_period;
			unsigned int Fuse=(RTC_FREQ/count_set_period);
			unsigned int Fbest=(int)Fafter;
    3428:	1c28      	adds	r0, r5, #0
    342a:	4b13      	ldr	r3, [pc, #76]	; (3478 <_Z18hardwareCorrectionv+0x1e8>)
    342c:	4798      	blx	r3
    342e:	1c05      	adds	r5, r0, #0
			timeProt.correction.indiceMoySoftCor=0;
			//printf("count : %u",(unsigned int)count);
			//rtc_count_set_compare(&rtc_instance,VALUE_TIMER,RTC_COUNT_COMPARE_0 );
		//	rtc_count_set_period(&rtc_instance,count_set_period); //MOMO
			RTC->MODE0.COMP[0].reg = count_set_period;
			unsigned int Fuse=(RTC_FREQ/count_set_period);
    3430:	20fa      	movs	r0, #250	; 0xfa
    3432:	01c0      	lsls	r0, r0, #7
    3434:	1c39      	adds	r1, r7, #0
    3436:	4b11      	ldr	r3, [pc, #68]	; (347c <_Z18hardwareCorrectionv+0x1ec>)
    3438:	4798      	blx	r3
    343a:	1c03      	adds	r3, r0, #0
			unsigned int Fbest=(int)Fafter;
		
			sprintf(messageHMICor,"		Fbest: %u Hz, Fuse= %u Hz count=%d",(unsigned int)Fbest,(unsigned int)Fuse,count);
    343c:	9400      	str	r4, [sp, #0]
    343e:	1c30      	adds	r0, r6, #0
    3440:	4926      	ldr	r1, [pc, #152]	; (34dc <_Z18hardwareCorrectionv+0x24c>)
    3442:	1c2a      	adds	r2, r5, #0
    3444:	4c26      	ldr	r4, [pc, #152]	; (34e0 <_Z18hardwareCorrectionv+0x250>)
    3446:	47a0      	blx	r4
			sendHMI(messageHMICor);
    3448:	1c30      	adds	r0, r6, #0
    344a:	4c08      	ldr	r4, [pc, #32]	; (346c <_Z18hardwareCorrectionv+0x1dc>)
    344c:	47a0      	blx	r4
			sendHMI("	end correction");
    344e:	4825      	ldr	r0, [pc, #148]	; (34e4 <_Z18hardwareCorrectionv+0x254>)
    3450:	47a0      	blx	r4
			return true;
    3452:	2001      	movs	r0, #1
    3454:	e003      	b.n	345e <_Z18hardwareCorrectionv+0x1ce>
			
		}
		else{
	

			sendHMI("	end correction");
    3456:	4823      	ldr	r0, [pc, #140]	; (34e4 <_Z18hardwareCorrectionv+0x254>)
    3458:	4b04      	ldr	r3, [pc, #16]	; (346c <_Z18hardwareCorrectionv+0x1dc>)
    345a:	4798      	blx	r3
			return false;
    345c:	2000      	movs	r0, #0
		}
		
	}
	return false;	
}
    345e:	b00b      	add	sp, #44	; 0x2c
    3460:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3462:	46c0      	nop			; (mov r8, r8)
    3464:	200042cc 	.word	0x200042cc
    3468:	0000ed68 	.word	0x0000ed68
    346c:	00003c15 	.word	0x00003c15
    3470:	00007815 	.word	0x00007815
    3474:	00006e01 	.word	0x00006e01
    3478:	00007745 	.word	0x00007745
    347c:	00006685 	.word	0x00006685
    3480:	0000947d 	.word	0x0000947d
    3484:	00007785 	.word	0x00007785
    3488:	00007449 	.word	0x00007449
    348c:	000094e1 	.word	0x000094e1
    3490:	40df4000 	.word	0x40df4000
    3494:	00008771 	.word	0x00008771
    3498:	000078a5 	.word	0x000078a5
    349c:	00006acd 	.word	0x00006acd
    34a0:	200000c8 	.word	0x200000c8
    34a4:	00007ef5 	.word	0x00007ef5
    34a8:	00009589 	.word	0x00009589
    34ac:	200041f8 	.word	0x200041f8
    34b0:	000067a5 	.word	0x000067a5
    34b4:	46fa0000 	.word	0x46fa0000
    34b8:	00006a29 	.word	0x00006a29
    34bc:	00006b09 	.word	0x00006b09
    34c0:	00008ca5 	.word	0x00008ca5
    34c4:	3fe00000 	.word	0x3fe00000
    34c8:	000069dd 	.word	0x000069dd
    34cc:	00002ec1 	.word	0x00002ec1
    34d0:	20003d50 	.word	0x20003d50
    34d4:	40001400 	.word	0x40001400
    34d8:	20004204 	.word	0x20004204
    34dc:	0000ed80 	.word	0x0000ed80
    34e0:	0000b469 	.word	0x0000b469
    34e4:	0000eda8 	.word	0x0000eda8

000034e8 <_Z10correctionv>:
	
	
	
}

void correction(void){
    34e8:	b508      	push	{r3, lr}
	

	if(xTaskGetTickCount()-saveCorrection>(TIME_CORRECTION/portTICK_RATE_MS)){
    34ea:	4b0c      	ldr	r3, [pc, #48]	; (351c <_Z10correctionv+0x34>)
    34ec:	4798      	blx	r3
    34ee:	4b0c      	ldr	r3, [pc, #48]	; (3520 <_Z10correctionv+0x38>)
    34f0:	681b      	ldr	r3, [r3, #0]
    34f2:	1ac0      	subs	r0, r0, r3
    34f4:	4b0b      	ldr	r3, [pc, #44]	; (3524 <_Z10correctionv+0x3c>)
    34f6:	4298      	cmp	r0, r3
    34f8:	d90e      	bls.n	3518 <_Z10correctionv+0x30>
			
			if(timeProt.correction.nbCorrection>1){
    34fa:	23a4      	movs	r3, #164	; 0xa4
    34fc:	4a0a      	ldr	r2, [pc, #40]	; (3528 <_Z10correctionv+0x40>)
    34fe:	58d3      	ldr	r3, [r2, r3]
    3500:	2b01      	cmp	r3, #1
    3502:	d909      	bls.n	3518 <_Z10correctionv+0x30>
				saveCorrection=xTaskGetTickCount();
    3504:	4b05      	ldr	r3, [pc, #20]	; (351c <_Z10correctionv+0x34>)
    3506:	4798      	blx	r3
    3508:	4b05      	ldr	r3, [pc, #20]	; (3520 <_Z10correctionv+0x38>)
    350a:	6018      	str	r0, [r3, #0]
				if(!hardwareCorrection()){
    350c:	4b07      	ldr	r3, [pc, #28]	; (352c <_Z10correctionv+0x44>)
    350e:	4798      	blx	r3
    3510:	2800      	cmp	r0, #0
    3512:	d101      	bne.n	3518 <_Z10correctionv+0x30>
					sofwareCorrection();
    3514:	4b06      	ldr	r3, [pc, #24]	; (3530 <_Z10correctionv+0x48>)
    3516:	4798      	blx	r3
				}
			}
	}
	
}
    3518:	bd08      	pop	{r3, pc}
    351a:	46c0      	nop			; (mov r8, r8)
    351c:	00000c49 	.word	0x00000c49
    3520:	20004034 	.word	0x20004034
    3524:	00001388 	.word	0x00001388
    3528:	200042cc 	.word	0x200042cc
    352c:	00003291 	.word	0x00003291
    3530:	00002ee5 	.word	0x00002ee5

00003534 <_Z11updateClockv>:
			else{
				pc.printf("-%lu s,%u\r\n",clock.second,(unsigned int)clock.halfmillis);
			}
	*/
}
void updateClock(void){
    3534:	b5f0      	push	{r4, r5, r6, r7, lr}
    3536:	4647      	mov	r7, r8
    3538:	b480      	push	{r7}
    353a:	b090      	sub	sp, #64	; 0x40
		Clock diff;
		if(timeProt.correction.previousSignOffset==timeProt.offset.sign){
    353c:	4a64      	ldr	r2, [pc, #400]	; (36d0 <_Z11updateClockv+0x19c>)
    353e:	23a0      	movs	r3, #160	; 0xa0
    3540:	5cd3      	ldrb	r3, [r2, r3]
    3542:	b2db      	uxtb	r3, r3
    3544:	2191      	movs	r1, #145	; 0x91
    3546:	0049      	lsls	r1, r1, #1
    3548:	5c52      	ldrb	r2, [r2, r1]
    354a:	429a      	cmp	r2, r3
    354c:	d15a      	bne.n	3604 <_Z11updateClockv+0xd0>
			timeProt.correction.previousSignOffset=timeProt.offset.sign;
    354e:	4c60      	ldr	r4, [pc, #384]	; (36d0 <_Z11updateClockv+0x19c>)
    3550:	23a0      	movs	r3, #160	; 0xa0
    3552:	5ce2      	ldrb	r2, [r4, r3]
    3554:	1c0b      	adds	r3, r1, #0
    3556:	5462      	strb	r2, [r4, r1]
			timeProt.correction.previoustimeOffset.second=timeProt.correction.currentTimeOffsetSync.second;
    3558:	3b6a      	subs	r3, #106	; 0x6a
    355a:	58e3      	ldr	r3, [r4, r3]
    355c:	25ac      	movs	r5, #172	; 0xac
    355e:	5163      	str	r3, [r4, r5]
			timeProt.correction.previoustimeOffset.halfmillis=timeProt.correction.currentTimeOffsetSync.halfmillis;
    3560:	23bc      	movs	r3, #188	; 0xbc
    3562:	58e2      	ldr	r2, [r4, r3]
    3564:	3b0c      	subs	r3, #12
    3566:	50e2      	str	r2, [r4, r3]
			readClock(&timeProt.correction.currentTimeOffsetSync);
    3568:	1c20      	adds	r0, r4, #0
    356a:	30b8      	adds	r0, #184	; 0xb8
    356c:	4b59      	ldr	r3, [pc, #356]	; (36d4 <_Z11updateClockv+0x1a0>)
    356e:	4798      	blx	r3
			if(timeProt.correction.previoustimeOffset.second!=0){
    3570:	5963      	ldr	r3, [r4, r5]
    3572:	2b00      	cmp	r3, #0
    3574:	d048      	beq.n	3608 <_Z11updateClockv+0xd4>
				if(sup(timeProt.correction.currentTimeOffsetSync,timeProt.correction.previoustimeOffset)){
    3576:	4a56      	ldr	r2, [pc, #344]	; (36d0 <_Z11updateClockv+0x19c>)
    3578:	1c13      	adds	r3, r2, #0
    357a:	33b0      	adds	r3, #176	; 0xb0
    357c:	4669      	mov	r1, sp
    357e:	cb11      	ldmia	r3!, {r0, r4}
    3580:	c111      	stmia	r1!, {r0, r4}
    3582:	23ac      	movs	r3, #172	; 0xac
    3584:	58d3      	ldr	r3, [r2, r3]
    3586:	21b8      	movs	r1, #184	; 0xb8
    3588:	5850      	ldr	r0, [r2, r1]
    358a:	32b8      	adds	r2, #184	; 0xb8
    358c:	6851      	ldr	r1, [r2, #4]
    358e:	6892      	ldr	r2, [r2, #8]
    3590:	4c51      	ldr	r4, [pc, #324]	; (36d8 <_Z11updateClockv+0x1a4>)
    3592:	47a0      	blx	r4
    3594:	2800      	cmp	r0, #0
    3596:	d032      	beq.n	35fe <_Z11updateClockv+0xca>
												
					diff=subClock(timeProt.correction.currentTimeOffsetSync,timeProt.correction.previoustimeOffset);
    3598:	ae0a      	add	r6, sp, #40	; 0x28
    359a:	4d4d      	ldr	r5, [pc, #308]	; (36d0 <_Z11updateClockv+0x19c>)
    359c:	1c2b      	adds	r3, r5, #0
    359e:	33ac      	adds	r3, #172	; 0xac
    35a0:	466a      	mov	r2, sp
    35a2:	cb13      	ldmia	r3!, {r0, r1, r4}
    35a4:	c213      	stmia	r2!, {r0, r1, r4}
    35a6:	1c30      	adds	r0, r6, #0
    35a8:	23b8      	movs	r3, #184	; 0xb8
    35aa:	58e9      	ldr	r1, [r5, r3]
    35ac:	1c2b      	adds	r3, r5, #0
    35ae:	33b8      	adds	r3, #184	; 0xb8
    35b0:	685a      	ldr	r2, [r3, #4]
    35b2:	689b      	ldr	r3, [r3, #8]
    35b4:	4c49      	ldr	r4, [pc, #292]	; (36dc <_Z11updateClockv+0x1a8>)
    35b6:	47a0      	blx	r4
					//printf("diff: ");
					//printfClock(diff);
					timeProt.correction.sumTime=sumClock(timeProt.correction.sumTime,diff);
    35b8:	ac06      	add	r4, sp, #24
    35ba:	466b      	mov	r3, sp
    35bc:	ce07      	ldmia	r6!, {r0, r1, r2}
    35be:	c307      	stmia	r3!, {r0, r1, r2}
    35c0:	1c20      	adds	r0, r4, #0
    35c2:	23c4      	movs	r3, #196	; 0xc4
    35c4:	58e9      	ldr	r1, [r5, r3]
    35c6:	1c2e      	adds	r6, r5, #0
    35c8:	36c4      	adds	r6, #196	; 0xc4
    35ca:	6872      	ldr	r2, [r6, #4]
    35cc:	68b3      	ldr	r3, [r6, #8]
    35ce:	4f44      	ldr	r7, [pc, #272]	; (36e0 <_Z11updateClockv+0x1ac>)
    35d0:	46b8      	mov	r8, r7
    35d2:	47b8      	blx	r7
    35d4:	1c23      	adds	r3, r4, #0
    35d6:	cb07      	ldmia	r3!, {r0, r1, r2}
    35d8:	c607      	stmia	r6!, {r0, r1, r2}
					sumOffset=sumClock(sumOffset,timeProt.offset);
    35da:	4e42      	ldr	r6, [pc, #264]	; (36e4 <_Z11updateClockv+0x1b0>)
    35dc:	1c2b      	adds	r3, r5, #0
    35de:	3398      	adds	r3, #152	; 0x98
    35e0:	466a      	mov	r2, sp
    35e2:	cb83      	ldmia	r3!, {r0, r1, r7}
    35e4:	c283      	stmia	r2!, {r0, r1, r7}
    35e6:	1c20      	adds	r0, r4, #0
    35e8:	6831      	ldr	r1, [r6, #0]
    35ea:	6872      	ldr	r2, [r6, #4]
    35ec:	68b3      	ldr	r3, [r6, #8]
    35ee:	47c0      	blx	r8
    35f0:	cc0e      	ldmia	r4!, {r1, r2, r3}
    35f2:	c60e      	stmia	r6!, {r1, r2, r3}
					printf("sumClock: ");
					printfClock(timeProt.correction.sumTime);
					
					printf("nb corrr  : %d",timeProt.correction.nbCorrection);
					*/
					timeProt.correction.nbCorrection++;
    35f4:	22a4      	movs	r2, #164	; 0xa4
    35f6:	58ab      	ldr	r3, [r5, r2]
    35f8:	3301      	adds	r3, #1
    35fa:	50ab      	str	r3, [r5, r2]
    35fc:	e004      	b.n	3608 <_Z11updateClockv+0xd4>
				}
				else{
					resetSofftwareCorrection();
    35fe:	4b3a      	ldr	r3, [pc, #232]	; (36e8 <_Z11updateClockv+0x1b4>)
    3600:	4798      	blx	r3
    3602:	e001      	b.n	3608 <_Z11updateClockv+0xd4>
				}
			}
		}
		else{
			resetSofftwareCorrection();
    3604:	4b38      	ldr	r3, [pc, #224]	; (36e8 <_Z11updateClockv+0x1b4>)
    3606:	4798      	blx	r3
		}
		timeProt.correction.previousSignOffset=timeProt.offset.sign;
    3608:	4e31      	ldr	r6, [pc, #196]	; (36d0 <_Z11updateClockv+0x19c>)
    360a:	23a0      	movs	r3, #160	; 0xa0
    360c:	4698      	mov	r8, r3
    360e:	5cf2      	ldrb	r2, [r6, r3]
    3610:	3382      	adds	r3, #130	; 0x82
    3612:	54f2      	strb	r2, [r6, r3]
		Clock timeCopy;
		readClock(&timeCopy);
    3614:	ad0d      	add	r5, sp, #52	; 0x34
    3616:	1c28      	adds	r0, r5, #0
    3618:	4b2e      	ldr	r3, [pc, #184]	; (36d4 <_Z11updateClockv+0x1a0>)
    361a:	4798      	blx	r3


		
		timeCopy=sumClock(timeCopy,timeProt.offset);//add offset
    361c:	ac06      	add	r4, sp, #24
    361e:	1c33      	adds	r3, r6, #0
    3620:	3398      	adds	r3, #152	; 0x98
    3622:	466a      	mov	r2, sp
    3624:	cb83      	ldmia	r3!, {r0, r1, r7}
    3626:	c283      	stmia	r2!, {r0, r1, r7}
    3628:	1c20      	adds	r0, r4, #0
    362a:	990d      	ldr	r1, [sp, #52]	; 0x34
    362c:	686a      	ldr	r2, [r5, #4]
    362e:	68ab      	ldr	r3, [r5, #8]
    3630:	4f2b      	ldr	r7, [pc, #172]	; (36e0 <_Z11updateClockv+0x1ac>)
    3632:	47b8      	blx	r7
    3634:	1c23      	adds	r3, r4, #0
    3636:	cb07      	ldmia	r3!, {r0, r1, r2}
    3638:	c507      	stmia	r5!, {r0, r1, r2}
		writeClock(timeCopy);
    363a:	980d      	ldr	r0, [sp, #52]	; 0x34
    363c:	6861      	ldr	r1, [r4, #4]
    363e:	68a2      	ldr	r2, [r4, #8]
    3640:	4b2a      	ldr	r3, [pc, #168]	; (36ec <_Z11updateClockv+0x1b8>)
    3642:	4798      	blx	r3
		report(timeProt.offset,1);
    3644:	2398      	movs	r3, #152	; 0x98
    3646:	58f0      	ldr	r0, [r6, r3]
    3648:	1c33      	adds	r3, r6, #0
    364a:	3398      	adds	r3, #152	; 0x98
    364c:	6859      	ldr	r1, [r3, #4]
    364e:	689a      	ldr	r2, [r3, #8]
    3650:	2301      	movs	r3, #1
    3652:	4c27      	ldr	r4, [pc, #156]	; (36f0 <_Z11updateClockv+0x1bc>)
    3654:	47a0      	blx	r4
		if(timeProt.offset.sign==true){
    3656:	4643      	mov	r3, r8
    3658:	5cf3      	ldrb	r3, [r6, r3]
    365a:	2b00      	cmp	r3, #0
    365c:	d018      	beq.n	3690 <_Z11updateClockv+0x15c>
			sprintf(messageHMIOffset,"		update clock offset: +%lus,%ld[+%lus,%lu ms,~%lu us]	t: %lu,%lu",timeProt.offset.second,(long unsigned int)timeProt.offset.halfmillis,timeProt.offset.second,timeProt.offset.halfmillis/32,(timeProt.offset.halfmillis%32)*31,timeCopy.second,timeCopy.halfmillis);
    365e:	491c      	ldr	r1, [pc, #112]	; (36d0 <_Z11updateClockv+0x19c>)
    3660:	2098      	movs	r0, #152	; 0x98
    3662:	580a      	ldr	r2, [r1, r0]
    3664:	249c      	movs	r4, #156	; 0x9c
    3666:	590b      	ldr	r3, [r1, r4]
    3668:	580e      	ldr	r6, [r1, r0]
    366a:	5908      	ldr	r0, [r1, r4]
    366c:	5909      	ldr	r1, [r1, r4]
    366e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    3670:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    3672:	9600      	str	r6, [sp, #0]
    3674:	0940      	lsrs	r0, r0, #5
    3676:	9001      	str	r0, [sp, #4]
    3678:	201f      	movs	r0, #31
    367a:	4001      	ands	r1, r0
    367c:	0148      	lsls	r0, r1, #5
    367e:	1a41      	subs	r1, r0, r1
    3680:	9102      	str	r1, [sp, #8]
    3682:	9503      	str	r5, [sp, #12]
    3684:	9404      	str	r4, [sp, #16]
    3686:	481b      	ldr	r0, [pc, #108]	; (36f4 <_Z11updateClockv+0x1c0>)
    3688:	491b      	ldr	r1, [pc, #108]	; (36f8 <_Z11updateClockv+0x1c4>)
    368a:	4c1c      	ldr	r4, [pc, #112]	; (36fc <_Z11updateClockv+0x1c8>)
    368c:	47a0      	blx	r4
    368e:	e017      	b.n	36c0 <_Z11updateClockv+0x18c>
		}
		else{
			sprintf(messageHMIOffset,"		update clock offset: -%lus,%ld[-%lus,%lums,~%lu us]	t: %lu,%lu",timeProt.offset.second,(long unsigned int)timeProt.offset.halfmillis,timeProt.offset.second,timeProt.offset.halfmillis/32,(timeProt.offset.halfmillis%32)*31,timeCopy.second,timeCopy.halfmillis);
    3690:	490f      	ldr	r1, [pc, #60]	; (36d0 <_Z11updateClockv+0x19c>)
    3692:	2098      	movs	r0, #152	; 0x98
    3694:	580a      	ldr	r2, [r1, r0]
    3696:	249c      	movs	r4, #156	; 0x9c
    3698:	590b      	ldr	r3, [r1, r4]
    369a:	580e      	ldr	r6, [r1, r0]
    369c:	5908      	ldr	r0, [r1, r4]
    369e:	5909      	ldr	r1, [r1, r4]
    36a0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    36a2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    36a4:	9600      	str	r6, [sp, #0]
    36a6:	0940      	lsrs	r0, r0, #5
    36a8:	9001      	str	r0, [sp, #4]
    36aa:	201f      	movs	r0, #31
    36ac:	4001      	ands	r1, r0
    36ae:	0148      	lsls	r0, r1, #5
    36b0:	1a41      	subs	r1, r0, r1
    36b2:	9102      	str	r1, [sp, #8]
    36b4:	9503      	str	r5, [sp, #12]
    36b6:	9404      	str	r4, [sp, #16]
    36b8:	480e      	ldr	r0, [pc, #56]	; (36f4 <_Z11updateClockv+0x1c0>)
    36ba:	4911      	ldr	r1, [pc, #68]	; (3700 <_Z11updateClockv+0x1cc>)
    36bc:	4c0f      	ldr	r4, [pc, #60]	; (36fc <_Z11updateClockv+0x1c8>)
    36be:	47a0      	blx	r4
		}
		sendHMI(messageHMIOffset);
    36c0:	480c      	ldr	r0, [pc, #48]	; (36f4 <_Z11updateClockv+0x1c0>)
    36c2:	4b10      	ldr	r3, [pc, #64]	; (3704 <_Z11updateClockv+0x1d0>)
    36c4:	4798      	blx	r3
}
    36c6:	b010      	add	sp, #64	; 0x40
    36c8:	bc04      	pop	{r2}
    36ca:	4690      	mov	r8, r2
    36cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    36ce:	46c0      	nop			; (mov r8, r8)
    36d0:	200042cc 	.word	0x200042cc
    36d4:	00001681 	.word	0x00001681
    36d8:	0000138d 	.word	0x0000138d
    36dc:	000013fd 	.word	0x000013fd
    36e0:	00001501 	.word	0x00001501
    36e4:	200041f8 	.word	0x200041f8
    36e8:	00002ec1 	.word	0x00002ec1
    36ec:	0000170d 	.word	0x0000170d
    36f0:	00002e0d 	.word	0x00002e0d
    36f4:	20004038 	.word	0x20004038
    36f8:	0000edb8 	.word	0x0000edb8
    36fc:	0000b469 	.word	0x0000b469
    3700:	0000edfc 	.word	0x0000edfc
    3704:	00003c15 	.word	0x00003c15

00003708 <_Z11calculCRCID8enumTypehPKhh>:

}
uint8_t calculCRC(const Type type,const uint8_t length,const uint8_t* data){
	return calculCRCID(type,length,data,IDDEVICE);
}
uint8_t calculCRCID(const Type type,const uint8_t length,const uint8_t* data,const uint8_t id){
    3708:	18cb      	adds	r3, r1, r3
	uint8_t crc;
	uint8_t i;
	crc=type+length+id;
    370a:	18c0      	adds	r0, r0, r3
    370c:	b2c0      	uxtb	r0, r0
	for(i=0;i<length;i++){
    370e:	2900      	cmp	r1, #0
    3710:	d00a      	beq.n	3728 <_Z11calculCRCID8enumTypehPKhh+0x20>
    3712:	1c13      	adds	r3, r2, #0
    3714:	3901      	subs	r1, #1
    3716:	b2c9      	uxtb	r1, r1
    3718:	3101      	adds	r1, #1
    371a:	1852      	adds	r2, r2, r1
		crc=crc+data[i];
    371c:	7819      	ldrb	r1, [r3, #0]
    371e:	1840      	adds	r0, r0, r1
    3720:	b2c0      	uxtb	r0, r0
    3722:	3301      	adds	r3, #1
}
uint8_t calculCRCID(const Type type,const uint8_t length,const uint8_t* data,const uint8_t id){
	uint8_t crc;
	uint8_t i;
	crc=type+length+id;
	for(i=0;i<length;i++){
    3724:	4293      	cmp	r3, r2
    3726:	d1f9      	bne.n	371c <_Z11calculCRCID8enumTypehPKhh+0x14>
		crc=crc+data[i];
	}
	
	return crc;
    3728:	4770      	bx	lr
    372a:	46c0      	nop			; (mov r8, r8)

0000372c <_Z9calculCRC8enumTypehPKh>:
		send[3+i+j]=calculCRC(type,length,data);

		networkTx(send,length+4+j);

}
uint8_t calculCRC(const Type type,const uint8_t length,const uint8_t* data){
    372c:	b510      	push	{r4, lr}
	return calculCRCID(type,length,data,IDDEVICE);
    372e:	2300      	movs	r3, #0
    3730:	4c01      	ldr	r4, [pc, #4]	; (3738 <_Z9calculCRC8enumTypehPKh+0xc>)
    3732:	47a0      	blx	r4
}
    3734:	bd10      	pop	{r4, pc}
    3736:	46c0      	nop			; (mov r8, r8)
    3738:	00003709 	.word	0x00003709

0000373c <_Z4send8enumTypehPKh>:

	
	sendHMI("	delay request send");
}
#endif
void send(const Type type,const uint8_t length,const uint8_t* data){
    373c:	b5f0      	push	{r4, r5, r6, r7, lr}
    373e:	4647      	mov	r7, r8
    3740:	b480      	push	{r7}
    3742:	af00      	add	r7, sp, #0
    3744:	1c0c      	adds	r4, r1, #0
		uint8_t i;
		uint8_t j=0;
		uint8_t send[length+4];//to complete
    3746:	1c0b      	adds	r3, r1, #0
    3748:	330b      	adds	r3, #11
    374a:	08db      	lsrs	r3, r3, #3
    374c:	00db      	lsls	r3, r3, #3
    374e:	4669      	mov	r1, sp
    3750:	1acb      	subs	r3, r1, r3
    3752:	469d      	mov	sp, r3
    3754:	466d      	mov	r5, sp
		send[0]=HEADER;
    3756:	2355      	movs	r3, #85	; 0x55
    3758:	702b      	strb	r3, [r5, #0]
		send[1]=IDDEVICE;	
    375a:	2300      	movs	r3, #0
    375c:	706b      	strb	r3, [r5, #1]
		send[2]=type;
    375e:	70a8      	strb	r0, [r5, #2]
		if(length!=0){
    3760:	2c00      	cmp	r4, #0
    3762:	d00a      	beq.n	377a <_Z4send8enumTypehPKh+0x3e>
			send[3]=length;//length data
    3764:	70ec      	strb	r4, [r5, #3]
    3766:	18e9      	adds	r1, r5, r3
			j=1;
		}
		for(i=0;i<length;i++){
			send[3+i+j]=data[i];
    3768:	5cd6      	ldrb	r6, [r2, r3]
    376a:	710e      	strb	r6, [r1, #4]
    376c:	3301      	adds	r3, #1
		send[2]=type;
		if(length!=0){
			send[3]=length;//length data
			j=1;
		}
		for(i=0;i<length;i++){
    376e:	b2d9      	uxtb	r1, r3
    3770:	428c      	cmp	r4, r1
    3772:	d8f8      	bhi.n	3766 <_Z4send8enumTypehPKh+0x2a>
    3774:	1c23      	adds	r3, r4, #0
		send[0]=HEADER;
		send[1]=IDDEVICE;	
		send[2]=type;
		if(length!=0){
			send[3]=length;//length data
			j=1;
    3776:	2601      	movs	r6, #1
    3778:	e001      	b.n	377e <_Z4send8enumTypehPKh+0x42>
	sendHMI("	delay request send");
}
#endif
void send(const Type type,const uint8_t length,const uint8_t* data){
		uint8_t i;
		uint8_t j=0;
    377a:	2600      	movs	r6, #0
		send[2]=type;
		if(length!=0){
			send[3]=length;//length data
			j=1;
		}
		for(i=0;i<length;i++){
    377c:	2300      	movs	r3, #0
			send[3+i+j]=data[i];
		}
		send[3+i+j]=calculCRC(type,length,data);
    377e:	3303      	adds	r3, #3
    3780:	4698      	mov	r8, r3
    3782:	44b0      	add	r8, r6
    3784:	1c21      	adds	r1, r4, #0
    3786:	4b07      	ldr	r3, [pc, #28]	; (37a4 <_Z4send8enumTypehPKh+0x68>)
    3788:	4798      	blx	r3
    378a:	4643      	mov	r3, r8
    378c:	54e8      	strb	r0, [r5, r3]
    378e:	3404      	adds	r4, #4

		networkTx(send,length+4+j);
    3790:	1931      	adds	r1, r6, r4
    3792:	b2c9      	uxtb	r1, r1
    3794:	1c28      	adds	r0, r5, #0
    3796:	4b04      	ldr	r3, [pc, #16]	; (37a8 <_Z4send8enumTypehPKh+0x6c>)
    3798:	4798      	blx	r3

}
    379a:	46bd      	mov	sp, r7
    379c:	bc04      	pop	{r2}
    379e:	4690      	mov	r8, r2
    37a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    37a2:	46c0      	nop			; (mov r8, r8)
    37a4:	0000372d 	.word	0x0000372d
    37a8:	00001b89 	.word	0x00001b89

000037ac <_Z4syncv>:
				}
				
			}		
}
#ifdef MASTERMODE
void sync(void){
    37ac:	b500      	push	{lr}
    37ae:	b085      	sub	sp, #20
	uint8_t sendP[4];
	Type type=SYNC;
	Clock timeSave;
	readClock(&timeSave);
    37b0:	a801      	add	r0, sp, #4
    37b2:	4b0b      	ldr	r3, [pc, #44]	; (37e0 <_Z4syncv+0x34>)
    37b4:	4798      	blx	r3
	sendP[0]=(uint8_t)(timeSave.second&0x00FF);
    37b6:	9b01      	ldr	r3, [sp, #4]
    37b8:	466a      	mov	r2, sp
    37ba:	7013      	strb	r3, [r2, #0]
	sendP[1]=(uint8_t)((timeSave.second>>8)&0x00FF);
    37bc:	9b01      	ldr	r3, [sp, #4]
    37be:	0a1b      	lsrs	r3, r3, #8
    37c0:	7053      	strb	r3, [r2, #1]
	sendP[2]=(uint8_t)(timeSave.halfmillis&0x00FF);
    37c2:	9b02      	ldr	r3, [sp, #8]
    37c4:	7093      	strb	r3, [r2, #2]
	sendP[3]=(uint8_t)((timeSave.halfmillis>>8)&0x00FF);
    37c6:	9b02      	ldr	r3, [sp, #8]
    37c8:	0a1b      	lsrs	r3, r3, #8
    37ca:	70d3      	strb	r3, [r2, #3]
	send(type,4,sendP);
    37cc:	2001      	movs	r0, #1
    37ce:	2104      	movs	r1, #4
    37d0:	4b04      	ldr	r3, [pc, #16]	; (37e4 <_Z4syncv+0x38>)
    37d2:	4798      	blx	r3
	sendHMI("	sync send");
    37d4:	4804      	ldr	r0, [pc, #16]	; (37e8 <_Z4syncv+0x3c>)
    37d6:	4b05      	ldr	r3, [pc, #20]	; (37ec <_Z4syncv+0x40>)
    37d8:	4798      	blx	r3
}
    37da:	b005      	add	sp, #20
    37dc:	bd00      	pop	{pc}
    37de:	46c0      	nop			; (mov r8, r8)
    37e0:	00001681 	.word	0x00001681
    37e4:	0000373d 	.word	0x0000373d
    37e8:	0000ee40 	.word	0x0000ee40
    37ec:	00003c15 	.word	0x00003c15

000037f0 <_Z6senderv>:
	vTaskDelay(500/portTICK_RATE_MS);
}



void sender(void){
    37f0:	b508      	push	{r3, lr}
		if(timeSender!=0){
			//printf("id : %d  , delay response time second : %lu",i,timeSender);
			delayResponse(i);
		}
	}*/
	if(xTaskGetTickCount()-saveSync>(TIMESYNC/portTICK_RATE_MS)){
    37f2:	4b07      	ldr	r3, [pc, #28]	; (3810 <_Z6senderv+0x20>)
    37f4:	4798      	blx	r3
    37f6:	4b07      	ldr	r3, [pc, #28]	; (3814 <_Z6senderv+0x24>)
    37f8:	681b      	ldr	r3, [r3, #0]
    37fa:	1ac0      	subs	r0, r0, r3
    37fc:	4b06      	ldr	r3, [pc, #24]	; (3818 <_Z6senderv+0x28>)
    37fe:	4298      	cmp	r0, r3
    3800:	d905      	bls.n	380e <_Z6senderv+0x1e>
		saveSync=xTaskGetTickCount();
    3802:	4b03      	ldr	r3, [pc, #12]	; (3810 <_Z6senderv+0x20>)
    3804:	4798      	blx	r3
    3806:	4b03      	ldr	r3, [pc, #12]	; (3814 <_Z6senderv+0x24>)
    3808:	6018      	str	r0, [r3, #0]
		sync();
    380a:	4b04      	ldr	r3, [pc, #16]	; (381c <_Z6senderv+0x2c>)
    380c:	4798      	blx	r3
		saveDRequest=xTaskGetTickCount();
		delayRequest();
	}
	#endif

}
    380e:	bd08      	pop	{r3, pc}
    3810:	00000c49 	.word	0x00000c49
    3814:	20004100 	.word	0x20004100
    3818:	00001388 	.word	0x00001388
    381c:	000037ad 	.word	0x000037ad

00003820 <_Z13delayResponseh>:
	sendP[2]=(uint8_t)(timeSave.halfmillis&0x00FF);
	sendP[3]=(uint8_t)((timeSave.halfmillis>>8)&0x00FF);
	send(type,4,sendP);
	sendHMI("	sync send");
}
void delayResponse(uint8_t id){
    3820:	b530      	push	{r4, r5, lr}
    3822:	b087      	sub	sp, #28
    3824:	1c04      	adds	r4, r0, #0

	
	Type type=DELAYRESPONSE;
	uint8_t sendP[9];
	
	sendP[0]=id;
    3826:	466b      	mov	r3, sp
    3828:	7018      	strb	r0, [r3, #0]
	sendP[1]=(uint8_t)(timeProt.saveTime[id].second&0x00FF);
    382a:	491e      	ldr	r1, [pc, #120]	; (38a4 <_Z13delayResponseh+0x84>)
    382c:	0043      	lsls	r3, r0, #1
    382e:	181a      	adds	r2, r3, r0
    3830:	0092      	lsls	r2, r2, #2
    3832:	5852      	ldr	r2, [r2, r1]
    3834:	4668      	mov	r0, sp
    3836:	7042      	strb	r2, [r0, #1]
	sendP[2]=(uint8_t)((timeProt.saveTime[id].second>>8)&0x00FF);
    3838:	191a      	adds	r2, r3, r4
    383a:	0092      	lsls	r2, r2, #2
    383c:	5852      	ldr	r2, [r2, r1]
    383e:	0a12      	lsrs	r2, r2, #8
    3840:	7082      	strb	r2, [r0, #2]
	sendP[3]=(uint8_t)(timeProt.saveTime[id].halfmillis&0x00FF);
    3842:	191a      	adds	r2, r3, r4
    3844:	0092      	lsls	r2, r2, #2
    3846:	188a      	adds	r2, r1, r2
    3848:	6850      	ldr	r0, [r2, #4]
    384a:	466d      	mov	r5, sp
    384c:	70e8      	strb	r0, [r5, #3]
	sendP[4]=(uint8_t)((timeProt.saveTime[id].halfmillis>>8)&0x00FF);
    384e:	6852      	ldr	r2, [r2, #4]
    3850:	0a12      	lsrs	r2, r2, #8
    3852:	712a      	strb	r2, [r5, #4]
	Clock timeSave={timeManage.second,timeManage.halfmillis,true};
    3854:	aa03      	add	r2, sp, #12
    3856:	2001      	movs	r0, #1
    3858:	7210      	strb	r0, [r2, #8]
    385a:	4813      	ldr	r0, [pc, #76]	; (38a8 <_Z13delayResponseh+0x88>)
    385c:	6805      	ldr	r5, [r0, #0]
    385e:	9503      	str	r5, [sp, #12]
    3860:	6840      	ldr	r0, [r0, #4]
    3862:	9004      	str	r0, [sp, #16]
	timeProt.saveTime[id].second=0;
    3864:	191b      	adds	r3, r3, r4
    3866:	009b      	lsls	r3, r3, #2
    3868:	2000      	movs	r0, #0
    386a:	5058      	str	r0, [r3, r1]
	sendP[5]=(uint8_t)(timeSave.second&0x00FF);
    386c:	9b03      	ldr	r3, [sp, #12]
    386e:	4669      	mov	r1, sp
    3870:	714b      	strb	r3, [r1, #5]
	sendP[6]=(uint8_t)((timeSave.second>>8)&0x00FF);
    3872:	9b03      	ldr	r3, [sp, #12]
    3874:	0a1b      	lsrs	r3, r3, #8
    3876:	718b      	strb	r3, [r1, #6]
	sendP[7]=(uint8_t)(timeSave.halfmillis&0x00FF);
    3878:	9b04      	ldr	r3, [sp, #16]
    387a:	71cb      	strb	r3, [r1, #7]
	sendP[8]=(uint8_t)((timeSave.halfmillis>>8)&0x00FF);
    387c:	9b04      	ldr	r3, [sp, #16]
    387e:	0a1b      	lsrs	r3, r3, #8
    3880:	466a      	mov	r2, sp
    3882:	720b      	strb	r3, [r1, #8]
	
	send(type,9,sendP);
    3884:	3003      	adds	r0, #3
    3886:	2109      	movs	r1, #9
    3888:	4b08      	ldr	r3, [pc, #32]	; (38ac <_Z13delayResponseh+0x8c>)
    388a:	4798      	blx	r3
	sprintf(messageHMI,"	delay response send (id: %d)",id);
    388c:	4d08      	ldr	r5, [pc, #32]	; (38b0 <_Z13delayResponseh+0x90>)
    388e:	1c28      	adds	r0, r5, #0
    3890:	4908      	ldr	r1, [pc, #32]	; (38b4 <_Z13delayResponseh+0x94>)
    3892:	1c22      	adds	r2, r4, #0
    3894:	4b08      	ldr	r3, [pc, #32]	; (38b8 <_Z13delayResponseh+0x98>)
    3896:	4798      	blx	r3
	sendHMI(messageHMI);
    3898:	1c28      	adds	r0, r5, #0
    389a:	4b08      	ldr	r3, [pc, #32]	; (38bc <_Z13delayResponseh+0x9c>)
    389c:	4798      	blx	r3
}
    389e:	b007      	add	sp, #28
    38a0:	bd30      	pop	{r4, r5, pc}
    38a2:	46c0      	nop			; (mov r8, r8)
    38a4:	200042cc 	.word	0x200042cc
    38a8:	200000bc 	.word	0x200000bc
    38ac:	0000373d 	.word	0x0000373d
    38b0:	200043f0 	.word	0x200043f0
    38b4:	0000ee4c 	.word	0x0000ee4c
    38b8:	0000b469 	.word	0x0000b469
    38bc:	00003c15 	.word	0x00003c15

000038c0 <_Z8receiverv>:
		else{
			sprintf(messageHMIOffset,"		update clock offset: -%lus,%ld[-%lus,%lums,~%lu us]	t: %lu,%lu",timeProt.offset.second,(long unsigned int)timeProt.offset.halfmillis,timeProt.offset.second,timeProt.offset.halfmillis/32,(timeProt.offset.halfmillis%32)*31,timeCopy.second,timeCopy.halfmillis);
		}
		sendHMI(messageHMIOffset);
}
void receiver(){
    38c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    38c2:	4647      	mov	r7, r8
    38c4:	b480      	push	{r7}
    38c6:	b08c      	sub	sp, #48	; 0x30
			Clock timeMaster={0,0,true};	
			uint8_t i=0;
			#endif
			Data data;
		
			if(networkAvailable()){
    38c8:	4b43      	ldr	r3, [pc, #268]	; (39d8 <_Z8receiverv+0x118>)
    38ca:	4798      	blx	r3
    38cc:	2800      	cmp	r0, #0
    38ce:	d07f      	beq.n	39d0 <_Z8receiverv+0x110>
				vTaskDelay(100);
    38d0:	2064      	movs	r0, #100	; 0x64
    38d2:	4b42      	ldr	r3, [pc, #264]	; (39dc <_Z8receiverv+0x11c>)
    38d4:	4798      	blx	r3
				if(networkRead()==HEADER){
    38d6:	4b42      	ldr	r3, [pc, #264]	; (39e0 <_Z8receiverv+0x120>)
    38d8:	4798      	blx	r3
    38da:	2855      	cmp	r0, #85	; 0x55
    38dc:	d178      	bne.n	39d0 <_Z8receiverv+0x110>
					data.id=networkRead();
    38de:	4d40      	ldr	r5, [pc, #256]	; (39e0 <_Z8receiverv+0x120>)
    38e0:	47a8      	blx	r5
    38e2:	1c06      	adds	r6, r0, #0
    38e4:	ac03      	add	r4, sp, #12
    38e6:	7060      	strb	r0, [r4, #1]
					data.type=(Type)networkRead();
    38e8:	47a8      	blx	r5
    38ea:	7020      	strb	r0, [r4, #0]
							switch (data.type){
    38ec:	2802      	cmp	r0, #2
    38ee:	d002      	beq.n	38f6 <_Z8receiverv+0x36>
    38f0:	2804      	cmp	r0, #4
    38f2:	d025      	beq.n	3940 <_Z8receiverv+0x80>
    38f4:	e067      	b.n	39c6 <_Z8receiverv+0x106>

									
								#else
									case DELAYREQUEST:
									
										data.crc=networkRead();
    38f6:	4b3a      	ldr	r3, [pc, #232]	; (39e0 <_Z8receiverv+0x120>)
    38f8:	4798      	blx	r3
    38fa:	1c04      	adds	r4, r0, #0
    38fc:	2321      	movs	r3, #33	; 0x21
    38fe:	aa03      	add	r2, sp, #12
    3900:	54d0      	strb	r0, [r2, r3]
										//printf("Type:%d , id:%d, crc:%d.",data.type, data.id,data.crc );
										if(calculCRCID(data.type,0,NULL,data.id)!=data.crc){
    3902:	2002      	movs	r0, #2
    3904:	2100      	movs	r1, #0
    3906:	2200      	movs	r2, #0
    3908:	1c33      	adds	r3, r6, #0
    390a:	4d36      	ldr	r5, [pc, #216]	; (39e4 <_Z8receiverv+0x124>)
    390c:	47a8      	blx	r5
    390e:	4284      	cmp	r4, r0
    3910:	d00f      	beq.n	3932 <_Z8receiverv+0x72>
											taskENTER_CRITICAL();
    3912:	4b35      	ldr	r3, [pc, #212]	; (39e8 <_Z8receiverv+0x128>)
    3914:	4798      	blx	r3
											timeProt.saveTime[data.id].second=0;
    3916:	0073      	lsls	r3, r6, #1
    3918:	199e      	adds	r6, r3, r6
    391a:	00b6      	lsls	r6, r6, #2
    391c:	2200      	movs	r2, #0
    391e:	4b33      	ldr	r3, [pc, #204]	; (39ec <_Z8receiverv+0x12c>)
    3920:	50f2      	str	r2, [r6, r3]
											taskEXIT_CRITICAL();
    3922:	4b33      	ldr	r3, [pc, #204]	; (39f0 <_Z8receiverv+0x130>)
    3924:	4798      	blx	r3
											networkFlush();
    3926:	4b33      	ldr	r3, [pc, #204]	; (39f4 <_Z8receiverv+0x134>)
    3928:	4798      	blx	r3
											sendHMI("	Erreur crc");
    392a:	4833      	ldr	r0, [pc, #204]	; (39f8 <_Z8receiverv+0x138>)
    392c:	4b33      	ldr	r3, [pc, #204]	; (39fc <_Z8receiverv+0x13c>)
    392e:	4798      	blx	r3
											return;
    3930:	e04e      	b.n	39d0 <_Z8receiverv+0x110>
										}
										else{
											sendHMI("	delay request receive");
    3932:	4833      	ldr	r0, [pc, #204]	; (3a00 <_Z8receiverv+0x140>)
    3934:	4b31      	ldr	r3, [pc, #196]	; (39fc <_Z8receiverv+0x13c>)
    3936:	4798      	blx	r3
											delayResponse(data.id);
    3938:	1c30      	adds	r0, r6, #0
    393a:	4b32      	ldr	r3, [pc, #200]	; (3a04 <_Z8receiverv+0x144>)
    393c:	4798      	blx	r3
											//pc.printf("id:%d",data.id);
										}
										
										
									break;
    393e:	e047      	b.n	39d0 <_Z8receiverv+0x110>
										case REP:
										uint8_t i;
										Clock timeMaster;
										sendHMI("	report receive");
    3940:	4831      	ldr	r0, [pc, #196]	; (3a08 <_Z8receiverv+0x148>)
    3942:	4b2e      	ldr	r3, [pc, #184]	; (39fc <_Z8receiverv+0x13c>)
    3944:	4798      	blx	r3
										data.length=networkRead();
    3946:	4b26      	ldr	r3, [pc, #152]	; (39e0 <_Z8receiverv+0x120>)
    3948:	4798      	blx	r3
    394a:	4680      	mov	r8, r0
    394c:	ab03      	add	r3, sp, #12
    394e:	7098      	strb	r0, [r3, #2]
										for(i=0;i<data.length;i++){
    3950:	2800      	cmp	r0, #0
    3952:	d00d      	beq.n	3970 <_Z8receiverv+0xb0>
    3954:	240f      	movs	r4, #15
    3956:	446c      	add	r4, sp
    3958:	1e45      	subs	r5, r0, #1
    395a:	b2ed      	uxtb	r5, r5
    395c:	ab0c      	add	r3, sp, #48	; 0x30
    395e:	469c      	mov	ip, r3
    3960:	4465      	add	r5, ip
    3962:	3d20      	subs	r5, #32
											data.data[i]=networkRead();
    3964:	4f1e      	ldr	r7, [pc, #120]	; (39e0 <_Z8receiverv+0x120>)
    3966:	47b8      	blx	r7
    3968:	7020      	strb	r0, [r4, #0]
    396a:	3401      	adds	r4, #1
										case REP:
										uint8_t i;
										Clock timeMaster;
										sendHMI("	report receive");
										data.length=networkRead();
										for(i=0;i<data.length;i++){
    396c:	42ac      	cmp	r4, r5
    396e:	d1fa      	bne.n	3966 <_Z8receiverv+0xa6>
											data.data[i]=networkRead();
										}
										data.crc=networkRead();
    3970:	4b1b      	ldr	r3, [pc, #108]	; (39e0 <_Z8receiverv+0x120>)
    3972:	4798      	blx	r3
    3974:	1c04      	adds	r4, r0, #0
    3976:	2321      	movs	r3, #33	; 0x21
    3978:	aa03      	add	r2, sp, #12
    397a:	54d0      	strb	r0, [r2, r3]
										//networkFlush();
										if(calculCRCID(data.type,data.length,data.data,data.id)!=data.crc){
    397c:	2004      	movs	r0, #4
    397e:	4641      	mov	r1, r8
    3980:	220f      	movs	r2, #15
    3982:	446a      	add	r2, sp
    3984:	1c33      	adds	r3, r6, #0
    3986:	4d17      	ldr	r5, [pc, #92]	; (39e4 <_Z8receiverv+0x124>)
    3988:	47a8      	blx	r5
    398a:	4284      	cmp	r4, r0
    398c:	d003      	beq.n	3996 <_Z8receiverv+0xd6>
											
											sendHMI("erreur crc");
    398e:	481f      	ldr	r0, [pc, #124]	; (3a0c <_Z8receiverv+0x14c>)
    3990:	4b1a      	ldr	r3, [pc, #104]	; (39fc <_Z8receiverv+0x13c>)
    3992:	4798      	blx	r3
											return;
    3994:	e01c      	b.n	39d0 <_Z8receiverv+0x110>
										}
										else{	
											timeMaster.second=data.data[0]|(data.data[1]<<8);
    3996:	ab03      	add	r3, sp, #12
    3998:	791a      	ldrb	r2, [r3, #4]
    399a:	0211      	lsls	r1, r2, #8
    399c:	78da      	ldrb	r2, [r3, #3]
    399e:	430a      	orrs	r2, r1
    39a0:	9200      	str	r2, [sp, #0]
											timeMaster.halfmillis=data.data[2]|(data.data[3]<<8);
    39a2:	799a      	ldrb	r2, [r3, #6]
    39a4:	0211      	lsls	r1, r2, #8
    39a6:	795a      	ldrb	r2, [r3, #5]
    39a8:	430a      	orrs	r2, r1
    39aa:	9201      	str	r2, [sp, #4]
											timeMaster.sign=data.data[4];
    39ac:	79db      	ldrb	r3, [r3, #7]
    39ae:	1e5a      	subs	r2, r3, #1
    39b0:	4193      	sbcs	r3, r2
    39b2:	b2db      	uxtb	r3, r3
    39b4:	466a      	mov	r2, sp
    39b6:	7213      	strb	r3, [r2, #8]
											report(timeMaster,data.id);
    39b8:	9800      	ldr	r0, [sp, #0]
    39ba:	9901      	ldr	r1, [sp, #4]
    39bc:	9a02      	ldr	r2, [sp, #8]
    39be:	1c33      	adds	r3, r6, #0
    39c0:	4c13      	ldr	r4, [pc, #76]	; (3a10 <_Z8receiverv+0x150>)
    39c2:	47a0      	blx	r4
										

										}
									break;
    39c4:	e004      	b.n	39d0 <_Z8receiverv+0x110>
								#endif
								default:
									sendHMI("	Erreur type unknow");
    39c6:	4813      	ldr	r0, [pc, #76]	; (3a14 <_Z8receiverv+0x154>)
    39c8:	4b0c      	ldr	r3, [pc, #48]	; (39fc <_Z8receiverv+0x13c>)
    39ca:	4798      	blx	r3
									networkFlush();	
    39cc:	4b09      	ldr	r3, [pc, #36]	; (39f4 <_Z8receiverv+0x134>)
    39ce:	4798      	blx	r3
									
							}		
				}
				
			}		
}
    39d0:	b00c      	add	sp, #48	; 0x30
    39d2:	bc04      	pop	{r2}
    39d4:	4690      	mov	r8, r2
    39d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    39d8:	00001b5d 	.word	0x00001b5d
    39dc:	00000e7d 	.word	0x00000e7d
    39e0:	00001bcd 	.word	0x00001bcd
    39e4:	00003709 	.word	0x00003709
    39e8:	00001219 	.word	0x00001219
    39ec:	200042cc 	.word	0x200042cc
    39f0:	00001231 	.word	0x00001231
    39f4:	00001b75 	.word	0x00001b75
    39f8:	0000ee6c 	.word	0x0000ee6c
    39fc:	00003c15 	.word	0x00003c15
    3a00:	0000ee78 	.word	0x0000ee78
    3a04:	00003821 	.word	0x00003821
    3a08:	0000ee90 	.word	0x0000ee90
    3a0c:	0000eea0 	.word	0x0000eea0
    3a10:	00002e0d 	.word	0x00002e0d
    3a14:	0000eeac 	.word	0x0000eeac

00003a18 <_Z16timeProtocolTaskv>:
		
	}
	return false;	
}

void timeProtocolTask(void){
    3a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    3a1a:	b672      	cpsid	i
    3a1c:	f3bf 8f5f 	dmb	sy
	Disable_global_interrupt();
    3a20:	2200      	movs	r2, #0
    3a22:	4b2f      	ldr	r3, [pc, #188]	; (3ae0 <_Z16timeProtocolTaskv+0xc8>)
    3a24:	701a      	strb	r2, [r3, #0]
    3a26:	2300      	movs	r3, #0
		
	#ifdef MASTERMODE
		uint8_t i ;
		for(i=0;i<=MAX_SLAVE_CLOCK;i++){
			timeProt.saveTime[i].second=0;
    3a28:	482e      	ldr	r0, [pc, #184]	; (3ae4 <_Z16timeProtocolTaskv+0xcc>)
    3a2a:	2100      	movs	r1, #0
    3a2c:	005a      	lsls	r2, r3, #1
    3a2e:	18d2      	adds	r2, r2, r3
    3a30:	0092      	lsls	r2, r2, #2
    3a32:	5011      	str	r1, [r2, r0]
    3a34:	3301      	adds	r3, #1
void timeProtocolTask(void){
	Disable_global_interrupt();
		
	#ifdef MASTERMODE
		uint8_t i ;
		for(i=0;i<=MAX_SLAVE_CLOCK;i++){
    3a36:	2b0b      	cmp	r3, #11
    3a38:	d1f8      	bne.n	3a2c <_Z16timeProtocolTaskv+0x14>
	timeProt.rx.sign=true;
	timeProt.rxDelay.sign=true;
	timeProt.rxSync.sign=true;
	timeProt.tx.sign=true;
	#endif
	timeProt.correction.nbCorrection=0;
    3a3a:	4c2a      	ldr	r4, [pc, #168]	; (3ae4 <_Z16timeProtocolTaskv+0xcc>)
    3a3c:	2300      	movs	r3, #0
    3a3e:	22a4      	movs	r2, #164	; 0xa4
    3a40:	50a3      	str	r3, [r4, r2]

	
	sumOffset.second=0;
    3a42:	4929      	ldr	r1, [pc, #164]	; (3ae8 <_Z16timeProtocolTaskv+0xd0>)
    3a44:	600b      	str	r3, [r1, #0]
	sumOffset.halfmillis=0;
    3a46:	604b      	str	r3, [r1, #4]
	sumOffset.sign=true;
    3a48:	3aa3      	subs	r2, #163	; 0xa3
    3a4a:	720a      	strb	r2, [r1, #8]
	
	
	timeProt.correction.currentTimeOffsetSync.second=0;
    3a4c:	21b8      	movs	r1, #184	; 0xb8
    3a4e:	5063      	str	r3, [r4, r1]
	timeProt.correction.currentTimeOffsetSync.halfmillis=0;
    3a50:	3104      	adds	r1, #4
    3a52:	5063      	str	r3, [r4, r1]
	timeProt.correction.currentTimeOffsetSync.sign=true;
    3a54:	3104      	adds	r1, #4
    3a56:	5462      	strb	r2, [r4, r1]
	
	
	timeProt.correction.previoustimeOffset.second=0;
    3a58:	3914      	subs	r1, #20
    3a5a:	5063      	str	r3, [r4, r1]
	timeProt.correction.previoustimeOffset.halfmillis=0;
    3a5c:	3104      	adds	r1, #4
    3a5e:	5063      	str	r3, [r4, r1]
	timeProt.correction.previoustimeOffset.sign=true;
    3a60:	3104      	adds	r1, #4
    3a62:	5462      	strb	r2, [r4, r1]
	
	
	//timeProt.correction.timeSoftCor=0;
	timeProt.correction.indiceMoySoftCor=0;
    3a64:	316c      	adds	r1, #108	; 0x6c
    3a66:	5463      	strb	r3, [r4, r1]
	timeProt.correction.indiceFull=0;
    3a68:	2122      	movs	r1, #34	; 0x22
    3a6a:	31ff      	adds	r1, #255	; 0xff
    3a6c:	5463      	strb	r3, [r4, r1]


	timeProt.delay.second=0;
    3a6e:	3999      	subs	r1, #153	; 0x99
    3a70:	5063      	str	r3, [r4, r1]
	timeProt.delay.halfmillis=0;
    3a72:	3104      	adds	r1, #4
    3a74:	5063      	str	r3, [r4, r1]
	timeProt.delay.sign=true;
    3a76:	3104      	adds	r1, #4
    3a78:	5462      	strb	r2, [r4, r1]
	timeProt.waitIdentifier=false;
    3a7a:	3283      	adds	r2, #131	; 0x83
    3a7c:	54a3      	strb	r3, [r4, r2]
	timeProt.synchroTime=NULL;
    3a7e:	2594      	movs	r5, #148	; 0x94
    3a80:	5163      	str	r3, [r4, r5]
	vSemaphoreCreateBinary(timeProt.synchroTime);
    3a82:	2001      	movs	r0, #1
    3a84:	2100      	movs	r1, #0
    3a86:	3a81      	subs	r2, #129	; 0x81
    3a88:	4b18      	ldr	r3, [pc, #96]	; (3aec <_Z16timeProtocolTaskv+0xd4>)
    3a8a:	4798      	blx	r3
    3a8c:	5160      	str	r0, [r4, r5]
    3a8e:	2800      	cmp	r0, #0
    3a90:	d004      	beq.n	3a9c <_Z16timeProtocolTaskv+0x84>
    3a92:	2100      	movs	r1, #0
    3a94:	2200      	movs	r2, #0
    3a96:	2300      	movs	r3, #0
    3a98:	4c15      	ldr	r4, [pc, #84]	; (3af0 <_Z16timeProtocolTaskv+0xd8>)
    3a9a:	47a0      	blx	r4
	Enable_global_interrupt();
    3a9c:	2201      	movs	r2, #1
    3a9e:	4b10      	ldr	r3, [pc, #64]	; (3ae0 <_Z16timeProtocolTaskv+0xc8>)
    3aa0:	701a      	strb	r2, [r3, #0]
    3aa2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    3aa6:	b662      	cpsie	i
	#ifdef SLAVEMODE
	delayRequest();
	#else
	sync();
    3aa8:	4b12      	ldr	r3, [pc, #72]	; (3af4 <_Z16timeProtocolTaskv+0xdc>)
    3aaa:	4798      	blx	r3
	#endif
	
	while(1){
		//sendHMI("time protocol task.");
			//pc.printf("timeprotocol task");
			if(timeProt.synchroTime!=NULL){
    3aac:	4d0d      	ldr	r5, [pc, #52]	; (3ae4 <_Z16timeProtocolTaskv+0xcc>)
				sender();
    3aae:	4f12      	ldr	r7, [pc, #72]	; (3af8 <_Z16timeProtocolTaskv+0xe0>)
				if( xSemaphoreTake(timeProt.synchroTime,500/portTICK_RATE_MS) == pdTRUE ){
    3ab0:	1c2e      	adds	r6, r5, #0
	#endif
	
	while(1){
		//sendHMI("time protocol task.");
			//pc.printf("timeprotocol task");
			if(timeProt.synchroTime!=NULL){
    3ab2:	2394      	movs	r3, #148	; 0x94
    3ab4:	58eb      	ldr	r3, [r5, r3]
    3ab6:	2b00      	cmp	r3, #0
    3ab8:	d00f      	beq.n	3ada <_Z16timeProtocolTaskv+0xc2>
				sender();
    3aba:	47b8      	blx	r7
				if( xSemaphoreTake(timeProt.synchroTime,500/portTICK_RATE_MS) == pdTRUE ){
    3abc:	2394      	movs	r3, #148	; 0x94
    3abe:	58f0      	ldr	r0, [r6, r3]
    3ac0:	2100      	movs	r1, #0
    3ac2:	22fa      	movs	r2, #250	; 0xfa
    3ac4:	0052      	lsls	r2, r2, #1
    3ac6:	2300      	movs	r3, #0
    3ac8:	4c0c      	ldr	r4, [pc, #48]	; (3afc <_Z16timeProtocolTaskv+0xe4>)
    3aca:	47a0      	blx	r4
    3acc:	2801      	cmp	r0, #1
    3ace:	d104      	bne.n	3ada <_Z16timeProtocolTaskv+0xc2>
					vTaskDelay(100/portTICK_RATE_MS);
    3ad0:	3063      	adds	r0, #99	; 0x63
    3ad2:	4b0b      	ldr	r3, [pc, #44]	; (3b00 <_Z16timeProtocolTaskv+0xe8>)
    3ad4:	4798      	blx	r3
					receiver();
    3ad6:	4b0b      	ldr	r3, [pc, #44]	; (3b04 <_Z16timeProtocolTaskv+0xec>)
    3ad8:	4798      	blx	r3
					
				}
					
			}
			correction();	
    3ada:	4b0b      	ldr	r3, [pc, #44]	; (3b08 <_Z16timeProtocolTaskv+0xf0>)
    3adc:	4798      	blx	r3
	}	 
	vTaskDelay(500/portTICK_RATE_MS);
    3ade:	e7e8      	b.n	3ab2 <_Z16timeProtocolTaskv+0x9a>
    3ae0:	200000d0 	.word	0x200000d0
    3ae4:	200042cc 	.word	0x200042cc
    3ae8:	200041f8 	.word	0x200041f8
    3aec:	000005a5 	.word	0x000005a5
    3af0:	000005f5 	.word	0x000005f5
    3af4:	000037ad 	.word	0x000037ad
    3af8:	000037f1 	.word	0x000037f1
    3afc:	00000785 	.word	0x00000785
    3b00:	00000e7d 	.word	0x00000e7d
    3b04:	000038c1 	.word	0x000038c1
    3b08:	000034e9 	.word	0x000034e9

00003b0c <_ZN4mbed6SerialD0Ev>:
    3b0c:	b510      	push	{r4, lr}
    3b0e:	1c04      	adds	r4, r0, #0
    3b10:	4b08      	ldr	r3, [pc, #32]	; (3b34 <_ZN4mbed6SerialD0Ev+0x28>)
    3b12:	6003      	str	r3, [r0, #0]
    3b14:	1c19      	adds	r1, r3, #0
    3b16:	3118      	adds	r1, #24
    3b18:	22dc      	movs	r2, #220	; 0xdc
    3b1a:	5081      	str	r1, [r0, r2]
    3b1c:	334c      	adds	r3, #76	; 0x4c
    3b1e:	3204      	adds	r2, #4
    3b20:	5083      	str	r3, [r0, r2]
    3b22:	30dc      	adds	r0, #220	; 0xdc
    3b24:	4b04      	ldr	r3, [pc, #16]	; (3b38 <_ZN4mbed6SerialD0Ev+0x2c>)
    3b26:	4798      	blx	r3
    3b28:	1c20      	adds	r0, r4, #0
    3b2a:	4b04      	ldr	r3, [pc, #16]	; (3b3c <_ZN4mbed6SerialD0Ev+0x30>)
    3b2c:	4798      	blx	r3
    3b2e:	1c20      	adds	r0, r4, #0
    3b30:	bd10      	pop	{r4, pc}
    3b32:	46c0      	nop			; (mov r8, r8)
    3b34:	0000f1f0 	.word	0x0000f1f0
    3b38:	00004f25 	.word	0x00004f25
    3b3c:	0000667b 	.word	0x0000667b

00003b40 <_ZThn220_N4mbed6SerialD0Ev>:
    3b40:	b408      	push	{r3}
    3b42:	4b02      	ldr	r3, [pc, #8]	; (3b4c <_ZThn220_N4mbed6SerialD0Ev+0xc>)
    3b44:	469c      	mov	ip, r3
    3b46:	38dc      	subs	r0, #220	; 0xdc
    3b48:	bc08      	pop	{r3}
    3b4a:	4760      	bx	ip
    3b4c:	00003b0d 	.word	0x00003b0d

00003b50 <_ZThn224_N4mbed6SerialD0Ev>:
    3b50:	b408      	push	{r3}
    3b52:	4b02      	ldr	r3, [pc, #8]	; (3b5c <_ZThn224_N4mbed6SerialD0Ev+0xc>)
    3b54:	469c      	mov	ip, r3
    3b56:	38e0      	subs	r0, #224	; 0xe0
    3b58:	bc08      	pop	{r3}
    3b5a:	4760      	bx	ip
    3b5c:	00003b0d 	.word	0x00003b0d

00003b60 <_GLOBAL__sub_I_timeProt>:
	for(i=0;i<length;i++){
		crc=crc+data[i];
	}
	
	return crc;
    3b60:	b538      	push	{r3, r4, r5, lr}
char messageHMICor[200];
char messageHMIDelay[200];
char messageHMIOffset[200];
Clock sumOffset;
portTickType saveDRequest=0;
Serial pc(USBTX,USBRX);
    3b62:	4c06      	ldr	r4, [pc, #24]	; (3b7c <_GLOBAL__sub_I_timeProt+0x1c>)
    3b64:	1c20      	adds	r0, r4, #0
    3b66:	2104      	movs	r1, #4
    3b68:	2205      	movs	r2, #5
    3b6a:	2300      	movs	r3, #0
    3b6c:	4d04      	ldr	r5, [pc, #16]	; (3b80 <_GLOBAL__sub_I_timeProt+0x20>)
    3b6e:	47a8      	blx	r5
    3b70:	1c20      	adds	r0, r4, #0
    3b72:	4904      	ldr	r1, [pc, #16]	; (3b84 <_GLOBAL__sub_I_timeProt+0x24>)
    3b74:	4a04      	ldr	r2, [pc, #16]	; (3b88 <_GLOBAL__sub_I_timeProt+0x28>)
    3b76:	4b05      	ldr	r3, [pc, #20]	; (3b8c <_GLOBAL__sub_I_timeProt+0x2c>)
    3b78:	4798      	blx	r3
	for(i=0;i<length;i++){
		crc=crc+data[i];
	}
	
	return crc;
    3b7a:	bd38      	pop	{r3, r4, r5, pc}
    3b7c:	20004104 	.word	0x20004104
    3b80:	00004d19 	.word	0x00004d19
    3b84:	00002db5 	.word	0x00002db5
    3b88:	200000b0 	.word	0x200000b0
    3b8c:	0000666d 	.word	0x0000666d

00003b90 <_Z12configureHMIv>:
	Serial hmi(USBTX,USBRX);
//#endif
/************************************************************************/
/* FUNCTION                                                             */
/************************************************************************/
void configureHMI(void){
    3b90:	b508      	push	{r3, lr}
	hmi.printf("config HMI \r\n");
    3b92:	4803      	ldr	r0, [pc, #12]	; (3ba0 <_Z12configureHMIv+0x10>)
    3b94:	30dc      	adds	r0, #220	; 0xdc
    3b96:	4903      	ldr	r1, [pc, #12]	; (3ba4 <_Z12configureHMIv+0x14>)
    3b98:	4b03      	ldr	r3, [pc, #12]	; (3ba8 <_Z12configureHMIv+0x18>)
    3b9a:	4798      	blx	r3
}
    3b9c:	bd08      	pop	{r3, pc}
    3b9e:	46c0      	nop			; (mov r8, r8)
    3ba0:	200044b8 	.word	0x200044b8
    3ba4:	0000eec0 	.word	0x0000eec0
    3ba8:	00004f61 	.word	0x00004f61

00003bac <_Z7HMITaskv>:
void HMITask(){
    3bac:	b5f0      	push	{r4, r5, r6, r7, lr}
    3bae:	b083      	sub	sp, #12
	//Can receive up to 10 char[50]
	uartQueue = xQueueCreate( LENGTH_QUEUE, sizeof( char* ) );
    3bb0:	2032      	movs	r0, #50	; 0x32
    3bb2:	2104      	movs	r1, #4
    3bb4:	2200      	movs	r2, #0
    3bb6:	4b10      	ldr	r3, [pc, #64]	; (3bf8 <_Z7HMITaskv+0x4c>)
    3bb8:	4798      	blx	r3
    3bba:	4b10      	ldr	r3, [pc, #64]	; (3bfc <_Z7HMITaskv+0x50>)
    3bbc:	6018      	str	r0, [r3, #0]

	while(1){
		//pc.printf("HMI task\r\n");
		 if( uartQueue != 0 )
    3bbe:	1c1f      	adds	r7, r3, #0
		 {
			 char* receive;
			 // Receive a message on the created queue.
			 while( xQueueReceive( uartQueue, &( receive ), (  portTickType ) 0) )
			 {			
				 hmi.printf(receive);
    3bc0:	4d0f      	ldr	r5, [pc, #60]	; (3c00 <_Z7HMITaskv+0x54>)
    3bc2:	35dc      	adds	r5, #220	; 0xdc
	//Can receive up to 10 char[50]
	uartQueue = xQueueCreate( LENGTH_QUEUE, sizeof( char* ) );

	while(1){
		//pc.printf("HMI task\r\n");
		 if( uartQueue != 0 )
    3bc4:	683b      	ldr	r3, [r7, #0]
    3bc6:	2b00      	cmp	r3, #0
    3bc8:	d108      	bne.n	3bdc <_Z7HMITaskv+0x30>
    3bca:	e010      	b.n	3bee <_Z7HMITaskv+0x42>
		 {
			 char* receive;
			 // Receive a message on the created queue.
			 while( xQueueReceive( uartQueue, &( receive ), (  portTickType ) 0) )
			 {			
				 hmi.printf(receive);
    3bcc:	1c28      	adds	r0, r5, #0
    3bce:	9901      	ldr	r1, [sp, #4]
    3bd0:	4c0c      	ldr	r4, [pc, #48]	; (3c04 <_Z7HMITaskv+0x58>)
    3bd2:	47a0      	blx	r4
				 hmi.printf("\r\n");
    3bd4:	1c28      	adds	r0, r5, #0
    3bd6:	490c      	ldr	r1, [pc, #48]	; (3c08 <_Z7HMITaskv+0x5c>)
    3bd8:	47a0      	blx	r4
    3bda:	e000      	b.n	3bde <_Z7HMITaskv+0x32>
		//pc.printf("HMI task\r\n");
		 if( uartQueue != 0 )
		 {
			 char* receive;
			 // Receive a message on the created queue.
			 while( xQueueReceive( uartQueue, &( receive ), (  portTickType ) 0) )
    3bdc:	4e07      	ldr	r6, [pc, #28]	; (3bfc <_Z7HMITaskv+0x50>)
    3bde:	6830      	ldr	r0, [r6, #0]
    3be0:	a901      	add	r1, sp, #4
    3be2:	2200      	movs	r2, #0
    3be4:	2300      	movs	r3, #0
    3be6:	4c09      	ldr	r4, [pc, #36]	; (3c0c <_Z7HMITaskv+0x60>)
    3be8:	47a0      	blx	r4
    3bea:	2800      	cmp	r0, #0
    3bec:	d1ee      	bne.n	3bcc <_Z7HMITaskv+0x20>
			//printf("						t: %lus,%u\r\n",timeCopy.second,(unsigned int)timeCopy.halfmillis/2);
			//printf("timecor : %d\r\n",ti);
			//printf("corhms : %d\r\n",to);
		 }
		 // pc.printf("test");
        vTaskDelay(500/portTICK_RATE_MS);
    3bee:	20fa      	movs	r0, #250	; 0xfa
    3bf0:	0040      	lsls	r0, r0, #1
    3bf2:	4b07      	ldr	r3, [pc, #28]	; (3c10 <_Z7HMITaskv+0x64>)
    3bf4:	4798      	blx	r3
	}
    3bf6:	e7e5      	b.n	3bc4 <_Z7HMITaskv+0x18>
    3bf8:	000005a5 	.word	0x000005a5
    3bfc:	200045ac 	.word	0x200045ac
    3c00:	200044b8 	.word	0x200044b8
    3c04:	00004f61 	.word	0x00004f61
    3c08:	0000ebd8 	.word	0x0000ebd8
    3c0c:	00000785 	.word	0x00000785
    3c10:	00000e7d 	.word	0x00000e7d

00003c14 <_Z7sendHMIPKc>:
}
bool sendHMI(const char send[]){
    3c14:	b510      	push	{r4, lr}
    3c16:	b082      	sub	sp, #8
    3c18:	9001      	str	r0, [sp, #4]
			if( uartQueue != 0 )
    3c1a:	4b08      	ldr	r3, [pc, #32]	; (3c3c <_Z7sendHMIPKc+0x28>)
    3c1c:	6818      	ldr	r0, [r3, #0]
    3c1e:	2800      	cmp	r0, #0
    3c20:	d009      	beq.n	3c36 <_Z7sendHMIPKc+0x22>
			{
				if( xQueueSendToBack( uartQueue,( void * ) &send,(  portTickType ) 0 ) == pdPASS )
    3c22:	a901      	add	r1, sp, #4
    3c24:	2200      	movs	r2, #0
    3c26:	2300      	movs	r3, #0
    3c28:	4c05      	ldr	r4, [pc, #20]	; (3c40 <_Z7sendHMIPKc+0x2c>)
    3c2a:	47a0      	blx	r4
    3c2c:	3801      	subs	r0, #1
    3c2e:	4243      	negs	r3, r0
    3c30:	4158      	adcs	r0, r3
    3c32:	b2c0      	uxtb	r0, r0
    3c34:	e000      	b.n	3c38 <_Z7sendHMIPKc+0x24>
				
				/* Failed to post the message. */
				
			}
			
				return false;
    3c36:	2000      	movs	r0, #0
			
    3c38:	b002      	add	sp, #8
    3c3a:	bd10      	pop	{r4, pc}
    3c3c:	200045ac 	.word	0x200045ac
    3c40:	000005f5 	.word	0x000005f5

00003c44 <_GLOBAL__sub_I_uartQueue>:
    3c44:	b538      	push	{r3, r4, r5, lr}
/************************************************************************/
xQueueHandle uartQueue;
//#ifdef MASTERMODE
//	Serial hmi(PA22,PA23);
//#else
	Serial hmi(USBTX,USBRX);
    3c46:	4c06      	ldr	r4, [pc, #24]	; (3c60 <_GLOBAL__sub_I_uartQueue+0x1c>)
    3c48:	1c20      	adds	r0, r4, #0
    3c4a:	2104      	movs	r1, #4
    3c4c:	2205      	movs	r2, #5
    3c4e:	2300      	movs	r3, #0
    3c50:	4d04      	ldr	r5, [pc, #16]	; (3c64 <_GLOBAL__sub_I_uartQueue+0x20>)
    3c52:	47a8      	blx	r5
    3c54:	1c20      	adds	r0, r4, #0
    3c56:	4904      	ldr	r1, [pc, #16]	; (3c68 <_GLOBAL__sub_I_uartQueue+0x24>)
    3c58:	4a04      	ldr	r2, [pc, #16]	; (3c6c <_GLOBAL__sub_I_uartQueue+0x28>)
    3c5a:	4b05      	ldr	r3, [pc, #20]	; (3c70 <_GLOBAL__sub_I_uartQueue+0x2c>)
    3c5c:	4798      	blx	r3
				
			}
			
				return false;
			
    3c5e:	bd38      	pop	{r3, r4, r5, pc}
    3c60:	200044b8 	.word	0x200044b8
    3c64:	00004d19 	.word	0x00004d19
    3c68:	00002db5 	.word	0x00002db5
    3c6c:	200000b0 	.word	0x200000b0
    3c70:	0000666d 	.word	0x0000666d

00003c74 <mbed_die>:
    3c74:	b508      	push	{r3, lr}
    3c76:	b672      	cpsid	i
    3c78:	2096      	movs	r0, #150	; 0x96
    3c7a:	f001 fa01 	bl	5080 <wait_ms>
    3c7e:	2096      	movs	r0, #150	; 0x96
    3c80:	f001 f9fe 	bl	5080 <wait_ms>
    3c84:	e7f8      	b.n	3c78 <mbed_die+0x4>
    3c86:	46c0      	nop			; (mov r8, r8)

00003c88 <NVIC_SetVector>:
    3c88:	4a0b      	ldr	r2, [pc, #44]	; (3cb8 <NVIC_SetVector+0x30>)
    3c8a:	b530      	push	{r4, r5, lr}
    3c8c:	6894      	ldr	r4, [r2, #8]
    3c8e:	6892      	ldr	r2, [r2, #8]
    3c90:	1c23      	adds	r3, r4, #0
    3c92:	2a00      	cmp	r2, #0
    3c94:	d10c      	bne.n	3cb0 <NVIC_SetVector+0x28>
    3c96:	2300      	movs	r3, #0
    3c98:	2280      	movs	r2, #128	; 0x80
    3c9a:	591d      	ldr	r5, [r3, r4]
    3c9c:	0592      	lsls	r2, r2, #22
    3c9e:	189a      	adds	r2, r3, r2
    3ca0:	3304      	adds	r3, #4
    3ca2:	6015      	str	r5, [r2, #0]
    3ca4:	2bb0      	cmp	r3, #176	; 0xb0
    3ca6:	d1f7      	bne.n	3c98 <NVIC_SetVector+0x10>
    3ca8:	2380      	movs	r3, #128	; 0x80
    3caa:	4a03      	ldr	r2, [pc, #12]	; (3cb8 <NVIC_SetVector+0x30>)
    3cac:	059b      	lsls	r3, r3, #22
    3cae:	6093      	str	r3, [r2, #8]
    3cb0:	3010      	adds	r0, #16
    3cb2:	0080      	lsls	r0, r0, #2
    3cb4:	50c1      	str	r1, [r0, r3]
    3cb6:	bd30      	pop	{r4, r5, pc}
    3cb8:	e000ed00 	.word	0xe000ed00

00003cbc <mbed_sdk_init>:
    3cbc:	b508      	push	{r3, lr}
    3cbe:	4b04      	ldr	r3, [pc, #16]	; (3cd0 <mbed_sdk_init+0x14>)
    3cc0:	781a      	ldrb	r2, [r3, #0]
    3cc2:	2a00      	cmp	r2, #0
    3cc4:	d103      	bne.n	3cce <mbed_sdk_init+0x12>
    3cc6:	3201      	adds	r2, #1
    3cc8:	701a      	strb	r2, [r3, #0]
    3cca:	f000 fc23 	bl	4514 <system_init>
    3cce:	bd08      	pop	{r3, pc}
    3cd0:	200045b0 	.word	0x200045b0

00003cd4 <_ZN4mbed10FileHandle4flenEv>:
    3cd4:	6803      	ldr	r3, [r0, #0]
    3cd6:	b570      	push	{r4, r5, r6, lr}
    3cd8:	691b      	ldr	r3, [r3, #16]
    3cda:	2100      	movs	r1, #0
    3cdc:	2201      	movs	r2, #1
    3cde:	1c04      	adds	r4, r0, #0
    3ce0:	4798      	blx	r3
    3ce2:	1c06      	adds	r6, r0, #0
    3ce4:	1c43      	adds	r3, r0, #1
    3ce6:	d00e      	beq.n	3d06 <_ZN4mbed10FileHandle4flenEv+0x32>
    3ce8:	6823      	ldr	r3, [r4, #0]
    3cea:	2100      	movs	r1, #0
    3cec:	691b      	ldr	r3, [r3, #16]
    3cee:	2202      	movs	r2, #2
    3cf0:	1c20      	adds	r0, r4, #0
    3cf2:	4798      	blx	r3
    3cf4:	1c05      	adds	r5, r0, #0
    3cf6:	6823      	ldr	r3, [r4, #0]
    3cf8:	1c20      	adds	r0, r4, #0
    3cfa:	691b      	ldr	r3, [r3, #16]
    3cfc:	1c31      	adds	r1, r6, #0
    3cfe:	2200      	movs	r2, #0
    3d00:	4798      	blx	r3
    3d02:	1c28      	adds	r0, r5, #0
    3d04:	bd70      	pop	{r4, r5, r6, pc}
    3d06:	e7fd      	b.n	3d04 <_ZN4mbed10FileHandle4flenEv+0x30>

00003d08 <_ZL11init_serialv.part.0>:
    3d08:	b508      	push	{r3, lr}
    3d0a:	4803      	ldr	r0, [pc, #12]	; (3d18 <_ZL11init_serialv.part.0+0x10>)
    3d0c:	2104      	movs	r1, #4
    3d0e:	2205      	movs	r2, #5
    3d10:	f000 fd3e 	bl	4790 <serial_init>
    3d14:	bd08      	pop	{r3, pc}
    3d16:	46c0      	nop			; (mov r8, r8)
    3d18:	20004758 	.word	0x20004758

00003d1c <_ZN4mbed10FileHandleD1Ev>:
    3d1c:	4b09      	ldr	r3, [pc, #36]	; (3d44 <_ZN4mbed10FileHandleD1Ev+0x28>)
    3d1e:	b510      	push	{r4, lr}
    3d20:	3308      	adds	r3, #8
    3d22:	6003      	str	r3, [r0, #0]
    3d24:	4b08      	ldr	r3, [pc, #32]	; (3d48 <_ZN4mbed10FileHandleD1Ev+0x2c>)
    3d26:	2100      	movs	r1, #0
    3d28:	1c5a      	adds	r2, r3, #1
    3d2a:	32ff      	adds	r2, #255	; 0xff
    3d2c:	e002      	b.n	3d34 <_ZN4mbed10FileHandleD1Ev+0x18>
    3d2e:	3304      	adds	r3, #4
    3d30:	4293      	cmp	r3, r2
    3d32:	d006      	beq.n	3d42 <_ZN4mbed10FileHandleD1Ev+0x26>
    3d34:	681c      	ldr	r4, [r3, #0]
    3d36:	4284      	cmp	r4, r0
    3d38:	d1f9      	bne.n	3d2e <_ZN4mbed10FileHandleD1Ev+0x12>
    3d3a:	6019      	str	r1, [r3, #0]
    3d3c:	3304      	adds	r3, #4
    3d3e:	4293      	cmp	r3, r2
    3d40:	d1f8      	bne.n	3d34 <_ZN4mbed10FileHandleD1Ev+0x18>
    3d42:	bd10      	pop	{r4, pc}
    3d44:	0000eee8 	.word	0x0000eee8
    3d48:	200045b4 	.word	0x200045b4

00003d4c <_open>:
    3d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d4e:	4647      	mov	r7, r8
    3d50:	b480      	push	{r7}
    3d52:	1c0e      	adds	r6, r1, #0
    3d54:	b082      	sub	sp, #8
    3d56:	4934      	ldr	r1, [pc, #208]	; (3e28 <_open+0xdc>)
    3d58:	1c05      	adds	r5, r0, #0
    3d5a:	f007 fc1d 	bl	b598 <strcmp>
    3d5e:	1e04      	subs	r4, r0, #0
    3d60:	d108      	bne.n	3d74 <_open+0x28>
    3d62:	4b32      	ldr	r3, [pc, #200]	; (3e2c <_open+0xe0>)
    3d64:	681b      	ldr	r3, [r3, #0]
    3d66:	2b00      	cmp	r3, #0
    3d68:	d00f      	beq.n	3d8a <_open+0x3e>
    3d6a:	1c20      	adds	r0, r4, #0
    3d6c:	b002      	add	sp, #8
    3d6e:	bc04      	pop	{r2}
    3d70:	4690      	mov	r8, r2
    3d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3d74:	1c28      	adds	r0, r5, #0
    3d76:	492e      	ldr	r1, [pc, #184]	; (3e30 <_open+0xe4>)
    3d78:	f007 fc0e 	bl	b598 <strcmp>
    3d7c:	2800      	cmp	r0, #0
    3d7e:	d107      	bne.n	3d90 <_open+0x44>
    3d80:	4b2a      	ldr	r3, [pc, #168]	; (3e2c <_open+0xe0>)
    3d82:	2401      	movs	r4, #1
    3d84:	681b      	ldr	r3, [r3, #0]
    3d86:	2b00      	cmp	r3, #0
    3d88:	d1ef      	bne.n	3d6a <_open+0x1e>
    3d8a:	f7ff ffbd 	bl	3d08 <_ZL11init_serialv.part.0>
    3d8e:	e7ec      	b.n	3d6a <_open+0x1e>
    3d90:	1c28      	adds	r0, r5, #0
    3d92:	4928      	ldr	r1, [pc, #160]	; (3e34 <_open+0xe8>)
    3d94:	f007 fc00 	bl	b598 <strcmp>
    3d98:	2800      	cmp	r0, #0
    3d9a:	d024      	beq.n	3de6 <_open+0x9a>
    3d9c:	4f26      	ldr	r7, [pc, #152]	; (3e38 <_open+0xec>)
    3d9e:	2400      	movs	r4, #0
    3da0:	1c3b      	adds	r3, r7, #0
    3da2:	e003      	b.n	3dac <_open+0x60>
    3da4:	3401      	adds	r4, #1
    3da6:	3304      	adds	r3, #4
    3da8:	2c40      	cmp	r4, #64	; 0x40
    3daa:	d022      	beq.n	3df2 <_open+0xa6>
    3dac:	681a      	ldr	r2, [r3, #0]
    3dae:	2a00      	cmp	r2, #0
    3db0:	d1f8      	bne.n	3da4 <_open+0x58>
    3db2:	782b      	ldrb	r3, [r5, #0]
    3db4:	2b3a      	cmp	r3, #58	; 0x3a
    3db6:	d030      	beq.n	3e1a <_open+0xce>
    3db8:	4668      	mov	r0, sp
    3dba:	1c29      	adds	r1, r5, #0
    3dbc:	f000 fe72 	bl	4aa4 <_ZN4mbed8FilePathC1EPKc>
    3dc0:	4668      	mov	r0, sp
    3dc2:	f000 fec9 	bl	4b58 <_ZN4mbed8FilePath6existsEv>
    3dc6:	2800      	cmp	r0, #0
    3dc8:	d013      	beq.n	3df2 <_open+0xa6>
    3dca:	4668      	mov	r0, sp
    3dcc:	f000 fea6 	bl	4b1c <_ZN4mbed8FilePath6isFileEv>
    3dd0:	2800      	cmp	r0, #0
    3dd2:	d011      	beq.n	3df8 <_open+0xac>
    3dd4:	4668      	mov	r0, sp
    3dd6:	f000 fead 	bl	4b34 <_ZN4mbed8FilePath4fileEv>
    3dda:	2800      	cmp	r0, #0
    3ddc:	d009      	beq.n	3df2 <_open+0xa6>
    3dde:	00a3      	lsls	r3, r4, #2
    3de0:	50f8      	str	r0, [r7, r3]
    3de2:	3403      	adds	r4, #3
    3de4:	e7c1      	b.n	3d6a <_open+0x1e>
    3de6:	4b11      	ldr	r3, [pc, #68]	; (3e2c <_open+0xe0>)
    3de8:	2402      	movs	r4, #2
    3dea:	681b      	ldr	r3, [r3, #0]
    3dec:	2b00      	cmp	r3, #0
    3dee:	d1bc      	bne.n	3d6a <_open+0x1e>
    3df0:	e7cb      	b.n	3d8a <_open+0x3e>
    3df2:	2401      	movs	r4, #1
    3df4:	4264      	negs	r4, r4
    3df6:	e7b8      	b.n	3d6a <_open+0x1e>
    3df8:	4668      	mov	r0, sp
    3dfa:	f000 fe81 	bl	4b00 <_ZN4mbed8FilePath10fileSystemEv>
    3dfe:	1e05      	subs	r5, r0, #0
    3e00:	d0f7      	beq.n	3df2 <_open+0xa6>
    3e02:	6803      	ldr	r3, [r0, #0]
    3e04:	4668      	mov	r0, sp
    3e06:	689b      	ldr	r3, [r3, #8]
    3e08:	4698      	mov	r8, r3
    3e0a:	f000 fe77 	bl	4afc <_ZN4mbed8FilePath8fileNameEv>
    3e0e:	4a0b      	ldr	r2, [pc, #44]	; (3e3c <_open+0xf0>)
    3e10:	1c01      	adds	r1, r0, #0
    3e12:	4032      	ands	r2, r6
    3e14:	1c28      	adds	r0, r5, #0
    3e16:	47c0      	blx	r8
    3e18:	e7df      	b.n	3dda <_open+0x8e>
    3e1a:	1c28      	adds	r0, r5, #0
    3e1c:	4908      	ldr	r1, [pc, #32]	; (3e40 <_open+0xf4>)
    3e1e:	466a      	mov	r2, sp
    3e20:	f007 fb44 	bl	b4ac <siscanf>
    3e24:	9800      	ldr	r0, [sp, #0]
    3e26:	e7d8      	b.n	3dda <_open+0x8e>
    3e28:	0000eed0 	.word	0x0000eed0
    3e2c:	200046bc 	.word	0x200046bc
    3e30:	0000eee0 	.word	0x0000eee0
    3e34:	0000eed8 	.word	0x0000eed8
    3e38:	200045b4 	.word	0x200045b4
    3e3c:	fffeffff 	.word	0xfffeffff
    3e40:	0000ef14 	.word	0x0000ef14

00003e44 <_close>:
    3e44:	b508      	push	{r3, lr}
    3e46:	1c03      	adds	r3, r0, #0
    3e48:	2000      	movs	r0, #0
    3e4a:	2b02      	cmp	r3, #2
    3e4c:	dd0a      	ble.n	3e64 <_close+0x20>
    3e4e:	4907      	ldr	r1, [pc, #28]	; (3e6c <_close+0x28>)
    3e50:	3b03      	subs	r3, #3
    3e52:	009b      	lsls	r3, r3, #2
    3e54:	585a      	ldr	r2, [r3, r1]
    3e56:	5058      	str	r0, [r3, r1]
    3e58:	2a00      	cmp	r2, #0
    3e5a:	d004      	beq.n	3e66 <_close+0x22>
    3e5c:	6813      	ldr	r3, [r2, #0]
    3e5e:	1c10      	adds	r0, r2, #0
    3e60:	685b      	ldr	r3, [r3, #4]
    3e62:	4798      	blx	r3
    3e64:	bd08      	pop	{r3, pc}
    3e66:	2001      	movs	r0, #1
    3e68:	4240      	negs	r0, r0
    3e6a:	e7fb      	b.n	3e64 <_close+0x20>
    3e6c:	200045b4 	.word	0x200045b4

00003e70 <_write>:
    3e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e72:	1c0c      	adds	r4, r1, #0
    3e74:	1c17      	adds	r7, r2, #0
    3e76:	2802      	cmp	r0, #2
    3e78:	dc12      	bgt.n	3ea0 <_write+0x30>
    3e7a:	4b10      	ldr	r3, [pc, #64]	; (3ebc <_write+0x4c>)
    3e7c:	681b      	ldr	r3, [r3, #0]
    3e7e:	2b00      	cmp	r3, #0
    3e80:	d101      	bne.n	3e86 <_write+0x16>
    3e82:	f7ff ff41 	bl	3d08 <_ZL11init_serialv.part.0>
    3e86:	2f00      	cmp	r7, #0
    3e88:	d008      	beq.n	3e9c <_write+0x2c>
    3e8a:	4d0d      	ldr	r5, [pc, #52]	; (3ec0 <_write+0x50>)
    3e8c:	19e6      	adds	r6, r4, r7
    3e8e:	7821      	ldrb	r1, [r4, #0]
    3e90:	1c28      	adds	r0, r5, #0
    3e92:	3401      	adds	r4, #1
    3e94:	f000 fde6 	bl	4a64 <serial_putc>
    3e98:	42b4      	cmp	r4, r6
    3e9a:	d1f8      	bne.n	3e8e <_write+0x1e>
    3e9c:	1c38      	adds	r0, r7, #0
    3e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3ea0:	3803      	subs	r0, #3
    3ea2:	4b08      	ldr	r3, [pc, #32]	; (3ec4 <_write+0x54>)
    3ea4:	0080      	lsls	r0, r0, #2
    3ea6:	58c0      	ldr	r0, [r0, r3]
    3ea8:	2800      	cmp	r0, #0
    3eaa:	d003      	beq.n	3eb4 <_write+0x44>
    3eac:	6803      	ldr	r3, [r0, #0]
    3eae:	681b      	ldr	r3, [r3, #0]
    3eb0:	4798      	blx	r3
    3eb2:	e7f4      	b.n	3e9e <_write+0x2e>
    3eb4:	2001      	movs	r0, #1
    3eb6:	4240      	negs	r0, r0
    3eb8:	e7f1      	b.n	3e9e <_write+0x2e>
    3eba:	46c0      	nop			; (mov r8, r8)
    3ebc:	200046bc 	.word	0x200046bc
    3ec0:	20004758 	.word	0x20004758
    3ec4:	200045b4 	.word	0x200045b4

00003ec8 <_read>:
    3ec8:	b510      	push	{r4, lr}
    3eca:	1c0c      	adds	r4, r1, #0
    3ecc:	2802      	cmp	r0, #2
    3ece:	dc09      	bgt.n	3ee4 <_read+0x1c>
    3ed0:	4b0c      	ldr	r3, [pc, #48]	; (3f04 <_read+0x3c>)
    3ed2:	681b      	ldr	r3, [r3, #0]
    3ed4:	2b00      	cmp	r3, #0
    3ed6:	d00f      	beq.n	3ef8 <_read+0x30>
    3ed8:	480b      	ldr	r0, [pc, #44]	; (3f08 <_read+0x40>)
    3eda:	f000 fd97 	bl	4a0c <serial_getc>
    3ede:	7020      	strb	r0, [r4, #0]
    3ee0:	2001      	movs	r0, #1
    3ee2:	bd10      	pop	{r4, pc}
    3ee4:	3803      	subs	r0, #3
    3ee6:	4b09      	ldr	r3, [pc, #36]	; (3f0c <_read+0x44>)
    3ee8:	0080      	lsls	r0, r0, #2
    3eea:	58c0      	ldr	r0, [r0, r3]
    3eec:	2800      	cmp	r0, #0
    3eee:	d006      	beq.n	3efe <_read+0x36>
    3ef0:	6803      	ldr	r3, [r0, #0]
    3ef2:	689b      	ldr	r3, [r3, #8]
    3ef4:	4798      	blx	r3
    3ef6:	e7f4      	b.n	3ee2 <_read+0x1a>
    3ef8:	f7ff ff06 	bl	3d08 <_ZL11init_serialv.part.0>
    3efc:	e7ec      	b.n	3ed8 <_read+0x10>
    3efe:	2001      	movs	r0, #1
    3f00:	4240      	negs	r0, r0
    3f02:	e7ee      	b.n	3ee2 <_read+0x1a>
    3f04:	200046bc 	.word	0x200046bc
    3f08:	20004758 	.word	0x20004758
    3f0c:	200045b4 	.word	0x200045b4

00003f10 <_isatty>:
    3f10:	b508      	push	{r3, lr}
    3f12:	1c03      	adds	r3, r0, #0
    3f14:	2001      	movs	r0, #1
    3f16:	2b02      	cmp	r3, #2
    3f18:	dd08      	ble.n	3f2c <_isatty+0x1c>
    3f1a:	3b03      	subs	r3, #3
    3f1c:	4a05      	ldr	r2, [pc, #20]	; (3f34 <_isatty+0x24>)
    3f1e:	009b      	lsls	r3, r3, #2
    3f20:	5898      	ldr	r0, [r3, r2]
    3f22:	2800      	cmp	r0, #0
    3f24:	d003      	beq.n	3f2e <_isatty+0x1e>
    3f26:	6803      	ldr	r3, [r0, #0]
    3f28:	68db      	ldr	r3, [r3, #12]
    3f2a:	4798      	blx	r3
    3f2c:	bd08      	pop	{r3, pc}
    3f2e:	2001      	movs	r0, #1
    3f30:	4240      	negs	r0, r0
    3f32:	e7fb      	b.n	3f2c <_isatty+0x1c>
    3f34:	200045b4 	.word	0x200045b4

00003f38 <_lseek>:
    3f38:	b508      	push	{r3, lr}
    3f3a:	1c03      	adds	r3, r0, #0
    3f3c:	2000      	movs	r0, #0
    3f3e:	2b02      	cmp	r3, #2
    3f40:	dd08      	ble.n	3f54 <_lseek+0x1c>
    3f42:	3b03      	subs	r3, #3
    3f44:	4805      	ldr	r0, [pc, #20]	; (3f5c <_lseek+0x24>)
    3f46:	009b      	lsls	r3, r3, #2
    3f48:	5818      	ldr	r0, [r3, r0]
    3f4a:	2800      	cmp	r0, #0
    3f4c:	d003      	beq.n	3f56 <_lseek+0x1e>
    3f4e:	6803      	ldr	r3, [r0, #0]
    3f50:	691b      	ldr	r3, [r3, #16]
    3f52:	4798      	blx	r3
    3f54:	bd08      	pop	{r3, pc}
    3f56:	2001      	movs	r0, #1
    3f58:	4240      	negs	r0, r0
    3f5a:	e7fb      	b.n	3f54 <_lseek+0x1c>
    3f5c:	200045b4 	.word	0x200045b4

00003f60 <_fstat>:
    3f60:	b508      	push	{r3, lr}
    3f62:	2802      	cmp	r0, #2
    3f64:	d804      	bhi.n	3f70 <_fstat+0x10>
    3f66:	2380      	movs	r3, #128	; 0x80
    3f68:	2000      	movs	r0, #0
    3f6a:	019b      	lsls	r3, r3, #6
    3f6c:	604b      	str	r3, [r1, #4]
    3f6e:	bd08      	pop	{r3, pc}
    3f70:	f005 fbc6 	bl	9700 <__errno>
    3f74:	2309      	movs	r3, #9
    3f76:	6003      	str	r3, [r0, #0]
    3f78:	2001      	movs	r0, #1
    3f7a:	4240      	negs	r0, r0
    3f7c:	e7f7      	b.n	3f6e <_fstat+0xe>
    3f7e:	46c0      	nop			; (mov r8, r8)

00003f80 <__cxa_pure_virtual>:
    3f80:	b508      	push	{r3, lr}
    3f82:	2001      	movs	r0, #1
    3f84:	f005 fbc2 	bl	970c <exit>

00003f88 <mbed_main>:
    3f88:	4770      	bx	lr
    3f8a:	46c0      	nop			; (mov r8, r8)

00003f8c <__wrap_main>:
    3f8c:	b508      	push	{r3, lr}
    3f8e:	f7ff fe95 	bl	3cbc <mbed_sdk_init>
    3f92:	f7ff fff9 	bl	3f88 <mbed_main>
    3f96:	f7fd fe83 	bl	1ca0 <main>
    3f9a:	bd08      	pop	{r3, pc}

00003f9c <_sbrk>:
    3f9c:	4a07      	ldr	r2, [pc, #28]	; (3fbc <_sbrk+0x20>)
    3f9e:	6813      	ldr	r3, [r2, #0]
    3fa0:	1818      	adds	r0, r3, r0
    3fa2:	f3ef 8108 	mrs	r1, MSP
    3fa6:	4288      	cmp	r0, r1
    3fa8:	d202      	bcs.n	3fb0 <_sbrk+0x14>
    3faa:	6010      	str	r0, [r2, #0]
    3fac:	1c18      	adds	r0, r3, #0
    3fae:	4770      	bx	lr
    3fb0:	220c      	movs	r2, #12
    3fb2:	2001      	movs	r0, #1
    3fb4:	4b02      	ldr	r3, [pc, #8]	; (3fc0 <_sbrk+0x24>)
    3fb6:	4240      	negs	r0, r0
    3fb8:	601a      	str	r2, [r3, #0]
    3fba:	e7f8      	b.n	3fae <_sbrk+0x12>
    3fbc:	200000cc 	.word	0x200000cc
    3fc0:	200047c8 	.word	0x200047c8

00003fc4 <_exit>:
    3fc4:	b508      	push	{r3, lr}
    3fc6:	2800      	cmp	r0, #0
    3fc8:	d100      	bne.n	3fcc <_exit+0x8>
    3fca:	e7fe      	b.n	3fca <_exit+0x6>
    3fcc:	f7ff fe52 	bl	3c74 <mbed_die>
    3fd0:	e7fb      	b.n	3fca <_exit+0x6>
    3fd2:	46c0      	nop			; (mov r8, r8)

00003fd4 <_ZN4mbed26mbed_set_unbuffered_streamEP7__sFILE>:
    3fd4:	b508      	push	{r3, lr}
    3fd6:	2100      	movs	r1, #0
    3fd8:	f007 f9b3 	bl	b342 <setbuf>
    3fdc:	bd08      	pop	{r3, pc}
    3fde:	46c0      	nop			; (mov r8, r8)

00003fe0 <Dummy_Handler>:
    3fe0:	e7fe      	b.n	3fe0 <Dummy_Handler>
    3fe2:	46c0      	nop			; (mov r8, r8)

00003fe4 <Reset_Handler>:
    3fe4:	4816      	ldr	r0, [pc, #88]	; (4040 <Reset_Handler+0x5c>)
    3fe6:	4917      	ldr	r1, [pc, #92]	; (4044 <Reset_Handler+0x60>)
    3fe8:	b510      	push	{r4, lr}
    3fea:	4288      	cmp	r0, r1
    3fec:	d00d      	beq.n	400a <Reset_Handler+0x26>
    3fee:	4b16      	ldr	r3, [pc, #88]	; (4048 <Reset_Handler+0x64>)
    3ff0:	4299      	cmp	r1, r3
    3ff2:	d20a      	bcs.n	400a <Reset_Handler+0x26>
    3ff4:	43ca      	mvns	r2, r1
    3ff6:	18d3      	adds	r3, r2, r3
    3ff8:	2200      	movs	r2, #0
    3ffa:	089b      	lsrs	r3, r3, #2
    3ffc:	3301      	adds	r3, #1
    3ffe:	009b      	lsls	r3, r3, #2
    4000:	5884      	ldr	r4, [r0, r2]
    4002:	508c      	str	r4, [r1, r2]
    4004:	3204      	adds	r2, #4
    4006:	429a      	cmp	r2, r3
    4008:	d1fa      	bne.n	4000 <Reset_Handler+0x1c>
    400a:	4910      	ldr	r1, [pc, #64]	; (404c <Reset_Handler+0x68>)
    400c:	4b10      	ldr	r3, [pc, #64]	; (4050 <Reset_Handler+0x6c>)
    400e:	4299      	cmp	r1, r3
    4010:	d20b      	bcs.n	402a <Reset_Handler+0x46>
    4012:	43ca      	mvns	r2, r1
    4014:	2000      	movs	r0, #0
    4016:	18d3      	adds	r3, r2, r3
    4018:	2200      	movs	r2, #0
    401a:	089b      	lsrs	r3, r3, #2
    401c:	3301      	adds	r3, #1
    401e:	009b      	lsls	r3, r3, #2
    4020:	188c      	adds	r4, r1, r2
    4022:	3204      	adds	r2, #4
    4024:	6020      	str	r0, [r4, #0]
    4026:	429a      	cmp	r2, r3
    4028:	d1fa      	bne.n	4020 <Reset_Handler+0x3c>
    402a:	21ff      	movs	r1, #255	; 0xff
    402c:	4b09      	ldr	r3, [pc, #36]	; (4054 <Reset_Handler+0x70>)
    402e:	4a0a      	ldr	r2, [pc, #40]	; (4058 <Reset_Handler+0x74>)
    4030:	438b      	bics	r3, r1
    4032:	6093      	str	r3, [r2, #8]
    4034:	f005 fe9a 	bl	9d6c <__libc_init_array>
    4038:	f7ff ffa8 	bl	3f8c <__wrap_main>
    403c:	e7fe      	b.n	403c <Reset_Handler+0x58>
    403e:	46c0      	nop			; (mov r8, r8)
    4040:	0000fd5c 	.word	0x0000fd5c
    4044:	200000b0 	.word	0x200000b0
    4048:	20000174 	.word	0x20000174
    404c:	20000174 	.word	0x20000174
    4050:	200047cc 	.word	0x200047cc
    4054:	00000000 	.word	0x00000000
    4058:	e000ed00 	.word	0xe000ed00

0000405c <extint_register_callback>:
    405c:	2317      	movs	r3, #23
    405e:	2a00      	cmp	r2, #0
    4060:	d001      	beq.n	4066 <extint_register_callback+0xa>
    4062:	1c18      	adds	r0, r3, #0
    4064:	4770      	bx	lr
    4066:	4a06      	ldr	r2, [pc, #24]	; (4080 <extint_register_callback+0x24>)
    4068:	0089      	lsls	r1, r1, #2
    406a:	588b      	ldr	r3, [r1, r2]
    406c:	2b00      	cmp	r3, #0
    406e:	d003      	beq.n	4078 <extint_register_callback+0x1c>
    4070:	4283      	cmp	r3, r0
    4072:	d003      	beq.n	407c <extint_register_callback+0x20>
    4074:	231d      	movs	r3, #29
    4076:	e7f4      	b.n	4062 <extint_register_callback+0x6>
    4078:	5088      	str	r0, [r1, r2]
    407a:	e7f2      	b.n	4062 <extint_register_callback+0x6>
    407c:	2300      	movs	r3, #0
    407e:	e7f0      	b.n	4062 <extint_register_callback+0x6>
    4080:	20004718 	.word	0x20004718

00004084 <extint_chan_enable_callback>:
    4084:	2317      	movs	r3, #23
    4086:	2900      	cmp	r1, #0
    4088:	d001      	beq.n	408e <extint_chan_enable_callback+0xa>
    408a:	1c18      	adds	r0, r3, #0
    408c:	4770      	bx	lr
    408e:	2200      	movs	r2, #0
    4090:	281f      	cmp	r0, #31
    4092:	d800      	bhi.n	4096 <extint_chan_enable_callback+0x12>
    4094:	4a02      	ldr	r2, [pc, #8]	; (40a0 <extint_chan_enable_callback+0x1c>)
    4096:	2301      	movs	r3, #1
    4098:	4083      	lsls	r3, r0
    409a:	60d3      	str	r3, [r2, #12]
    409c:	2300      	movs	r3, #0
    409e:	e7f4      	b.n	408a <extint_chan_enable_callback+0x6>
    40a0:	40001800 	.word	0x40001800

000040a4 <EIC_Handler>:
    40a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    40a6:	2300      	movs	r3, #0
    40a8:	2601      	movs	r6, #1
    40aa:	4c0b      	ldr	r4, [pc, #44]	; (40d8 <EIC_Handler+0x34>)
    40ac:	4d0b      	ldr	r5, [pc, #44]	; (40dc <EIC_Handler+0x38>)
    40ae:	4f0c      	ldr	r7, [pc, #48]	; (40e0 <EIC_Handler+0x3c>)
    40b0:	7023      	strb	r3, [r4, #0]
    40b2:	1c32      	adds	r2, r6, #0
    40b4:	409a      	lsls	r2, r3
    40b6:	6929      	ldr	r1, [r5, #16]
    40b8:	4211      	tst	r1, r2
    40ba:	d005      	beq.n	40c8 <EIC_Handler+0x24>
    40bc:	612a      	str	r2, [r5, #16]
    40be:	009b      	lsls	r3, r3, #2
    40c0:	59db      	ldr	r3, [r3, r7]
    40c2:	2b00      	cmp	r3, #0
    40c4:	d000      	beq.n	40c8 <EIC_Handler+0x24>
    40c6:	4798      	blx	r3
    40c8:	7823      	ldrb	r3, [r4, #0]
    40ca:	3301      	adds	r3, #1
    40cc:	b2db      	uxtb	r3, r3
    40ce:	7023      	strb	r3, [r4, #0]
    40d0:	2b0f      	cmp	r3, #15
    40d2:	d9ee      	bls.n	40b2 <EIC_Handler+0xe>
    40d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    40d6:	46c0      	nop			; (mov r8, r8)
    40d8:	20004714 	.word	0x20004714
    40dc:	40001800 	.word	0x40001800
    40e0:	20004718 	.word	0x20004718

000040e4 <_extint_enable>:
    40e4:	2302      	movs	r3, #2
    40e6:	4a04      	ldr	r2, [pc, #16]	; (40f8 <_extint_enable+0x14>)
    40e8:	7811      	ldrb	r1, [r2, #0]
    40ea:	430b      	orrs	r3, r1
    40ec:	7013      	strb	r3, [r2, #0]
    40ee:	7853      	ldrb	r3, [r2, #1]
    40f0:	b25b      	sxtb	r3, r3
    40f2:	2b00      	cmp	r3, #0
    40f4:	dbfb      	blt.n	40ee <_extint_enable+0xa>
    40f6:	4770      	bx	lr
    40f8:	40001800 	.word	0x40001800

000040fc <_system_extint_init>:
    40fc:	2340      	movs	r3, #64	; 0x40
    40fe:	b500      	push	{lr}
    4100:	4a12      	ldr	r2, [pc, #72]	; (414c <_system_extint_init+0x50>)
    4102:	b083      	sub	sp, #12
    4104:	6991      	ldr	r1, [r2, #24]
    4106:	2005      	movs	r0, #5
    4108:	430b      	orrs	r3, r1
    410a:	6193      	str	r3, [r2, #24]
    410c:	2300      	movs	r3, #0
    410e:	a901      	add	r1, sp, #4
    4110:	700b      	strb	r3, [r1, #0]
    4112:	f000 f9c9 	bl	44a8 <system_gclk_chan_set_config>
    4116:	2005      	movs	r0, #5
    4118:	f000 f988 	bl	442c <system_gclk_chan_enable>
    411c:	2301      	movs	r3, #1
    411e:	4a0c      	ldr	r2, [pc, #48]	; (4150 <_system_extint_init+0x54>)
    4120:	7811      	ldrb	r1, [r2, #0]
    4122:	430b      	orrs	r3, r1
    4124:	7013      	strb	r3, [r2, #0]
    4126:	7853      	ldrb	r3, [r2, #1]
    4128:	b25b      	sxtb	r3, r3
    412a:	2b00      	cmp	r3, #0
    412c:	dbfb      	blt.n	4126 <_system_extint_init+0x2a>
    412e:	4b09      	ldr	r3, [pc, #36]	; (4154 <_system_extint_init+0x58>)
    4130:	2200      	movs	r2, #0
    4132:	1c19      	adds	r1, r3, #0
    4134:	3140      	adds	r1, #64	; 0x40
    4136:	c304      	stmia	r3!, {r2}
    4138:	428b      	cmp	r3, r1
    413a:	d1fc      	bne.n	4136 <_system_extint_init+0x3a>
    413c:	2210      	movs	r2, #16
    413e:	4b06      	ldr	r3, [pc, #24]	; (4158 <_system_extint_init+0x5c>)
    4140:	601a      	str	r2, [r3, #0]
    4142:	f7ff ffcf 	bl	40e4 <_extint_enable>
    4146:	b003      	add	sp, #12
    4148:	bd00      	pop	{pc}
    414a:	46c0      	nop			; (mov r8, r8)
    414c:	40000400 	.word	0x40000400
    4150:	40001800 	.word	0x40001800
    4154:	20004718 	.word	0x20004718
    4158:	e000e100 	.word	0xe000e100

0000415c <extint_chan_get_config_defaults>:
    415c:	2300      	movs	r3, #0
    415e:	2201      	movs	r2, #1
    4160:	6003      	str	r3, [r0, #0]
    4162:	6043      	str	r3, [r0, #4]
    4164:	7283      	strb	r3, [r0, #10]
    4166:	3302      	adds	r3, #2
    4168:	7202      	strb	r2, [r0, #8]
    416a:	7242      	strb	r2, [r0, #9]
    416c:	72c3      	strb	r3, [r0, #11]
    416e:	4770      	bx	lr

00004170 <extint_chan_set_config>:
    4170:	b5f0      	push	{r4, r5, r6, r7, lr}
    4172:	2300      	movs	r3, #0
    4174:	1c0c      	adds	r4, r1, #0
    4176:	b083      	sub	sp, #12
    4178:	a901      	add	r1, sp, #4
    417a:	704b      	strb	r3, [r1, #1]
    417c:	70cb      	strb	r3, [r1, #3]
    417e:	7923      	ldrb	r3, [r4, #4]
    4180:	1c05      	adds	r5, r0, #0
    4182:	700b      	strb	r3, [r1, #0]
    4184:	7a23      	ldrb	r3, [r4, #8]
    4186:	7820      	ldrb	r0, [r4, #0]
    4188:	708b      	strb	r3, [r1, #2]
    418a:	2600      	movs	r6, #0
    418c:	f000 f882 	bl	4294 <system_pinmux_pin_set_config>
    4190:	2d1f      	cmp	r5, #31
    4192:	d800      	bhi.n	4196 <extint_chan_set_config+0x26>
    4194:	4e12      	ldr	r6, [pc, #72]	; (41e0 <extint_chan_set_config+0x70>)
    4196:	2207      	movs	r2, #7
    4198:	7aa3      	ldrb	r3, [r4, #10]
    419a:	402a      	ands	r2, r5
    419c:	0092      	lsls	r2, r2, #2
    419e:	7ae0      	ldrb	r0, [r4, #11]
    41a0:	2b00      	cmp	r3, #0
    41a2:	d001      	beq.n	41a8 <extint_chan_set_config+0x38>
    41a4:	2308      	movs	r3, #8
    41a6:	4318      	orrs	r0, r3
    41a8:	270f      	movs	r7, #15
    41aa:	4097      	lsls	r7, r2
    41ac:	08eb      	lsrs	r3, r5, #3
    41ae:	009b      	lsls	r3, r3, #2
    41b0:	18f3      	adds	r3, r6, r3
    41b2:	6999      	ldr	r1, [r3, #24]
    41b4:	4090      	lsls	r0, r2
    41b6:	43b9      	bics	r1, r7
    41b8:	1c0a      	adds	r2, r1, #0
    41ba:	4302      	orrs	r2, r0
    41bc:	619a      	str	r2, [r3, #24]
    41be:	7a63      	ldrb	r3, [r4, #9]
    41c0:	2b00      	cmp	r3, #0
    41c2:	d106      	bne.n	41d2 <extint_chan_set_config+0x62>
    41c4:	2201      	movs	r2, #1
    41c6:	40aa      	lsls	r2, r5
    41c8:	6973      	ldr	r3, [r6, #20]
    41ca:	4393      	bics	r3, r2
    41cc:	6173      	str	r3, [r6, #20]
    41ce:	b003      	add	sp, #12
    41d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    41d2:	2201      	movs	r2, #1
    41d4:	40aa      	lsls	r2, r5
    41d6:	1c15      	adds	r5, r2, #0
    41d8:	6973      	ldr	r3, [r6, #20]
    41da:	431d      	orrs	r5, r3
    41dc:	6175      	str	r5, [r6, #20]
    41de:	e7f6      	b.n	41ce <extint_chan_set_config+0x5e>
    41e0:	40001800 	.word	0x40001800

000041e4 <_system_pinmux_config>:
    41e4:	78d3      	ldrb	r3, [r2, #3]
    41e6:	b570      	push	{r4, r5, r6, lr}
    41e8:	2b00      	cmp	r3, #0
    41ea:	d131      	bne.n	4250 <_system_pinmux_config+0x6c>
    41ec:	7814      	ldrb	r4, [r2, #0]
    41ee:	2c80      	cmp	r4, #128	; 0x80
    41f0:	d047      	beq.n	4282 <_system_pinmux_config+0x9e>
    41f2:	2380      	movs	r3, #128	; 0x80
    41f4:	0624      	lsls	r4, r4, #24
    41f6:	025b      	lsls	r3, r3, #9
    41f8:	431c      	orrs	r4, r3
    41fa:	7853      	ldrb	r3, [r2, #1]
    41fc:	2502      	movs	r5, #2
    41fe:	1c1e      	adds	r6, r3, #0
    4200:	43ae      	bics	r6, r5
    4202:	d107      	bne.n	4214 <_system_pinmux_config+0x30>
    4204:	7893      	ldrb	r3, [r2, #2]
    4206:	2b00      	cmp	r3, #0
    4208:	d137      	bne.n	427a <_system_pinmux_config+0x96>
    420a:	2380      	movs	r3, #128	; 0x80
    420c:	029b      	lsls	r3, r3, #10
    420e:	431c      	orrs	r4, r3
    4210:	6041      	str	r1, [r0, #4]
    4212:	7853      	ldrb	r3, [r2, #1]
    4214:	3b01      	subs	r3, #1
    4216:	2b01      	cmp	r3, #1
    4218:	d935      	bls.n	4286 <_system_pinmux_config+0xa2>
    421a:	25a0      	movs	r5, #160	; 0xa0
    421c:	040b      	lsls	r3, r1, #16
    421e:	05ed      	lsls	r5, r5, #23
    4220:	0c1b      	lsrs	r3, r3, #16
    4222:	432b      	orrs	r3, r5
    4224:	25d0      	movs	r5, #208	; 0xd0
    4226:	4323      	orrs	r3, r4
    4228:	6283      	str	r3, [r0, #40]	; 0x28
    422a:	062d      	lsls	r5, r5, #24
    422c:	0c0b      	lsrs	r3, r1, #16
    422e:	432b      	orrs	r3, r5
    4230:	4323      	orrs	r3, r4
    4232:	6283      	str	r3, [r0, #40]	; 0x28
    4234:	78d3      	ldrb	r3, [r2, #3]
    4236:	2b00      	cmp	r3, #0
    4238:	d109      	bne.n	424e <_system_pinmux_config+0x6a>
    423a:	0363      	lsls	r3, r4, #13
    423c:	d503      	bpl.n	4246 <_system_pinmux_config+0x62>
    423e:	7893      	ldrb	r3, [r2, #2]
    4240:	2b01      	cmp	r3, #1
    4242:	d023      	beq.n	428c <_system_pinmux_config+0xa8>
    4244:	6141      	str	r1, [r0, #20]
    4246:	7853      	ldrb	r3, [r2, #1]
    4248:	3b01      	subs	r3, #1
    424a:	2b01      	cmp	r3, #1
    424c:	d913      	bls.n	4276 <_system_pinmux_config+0x92>
    424e:	bd70      	pop	{r4, r5, r6, pc}
    4250:	24a0      	movs	r4, #160	; 0xa0
    4252:	040b      	lsls	r3, r1, #16
    4254:	05e4      	lsls	r4, r4, #23
    4256:	0c1b      	lsrs	r3, r3, #16
    4258:	4323      	orrs	r3, r4
    425a:	24d0      	movs	r4, #208	; 0xd0
    425c:	6041      	str	r1, [r0, #4]
    425e:	0624      	lsls	r4, r4, #24
    4260:	6283      	str	r3, [r0, #40]	; 0x28
    4262:	0c0b      	lsrs	r3, r1, #16
    4264:	4323      	orrs	r3, r4
    4266:	6283      	str	r3, [r0, #40]	; 0x28
    4268:	78d3      	ldrb	r3, [r2, #3]
    426a:	2b00      	cmp	r3, #0
    426c:	d1ef      	bne.n	424e <_system_pinmux_config+0x6a>
    426e:	7853      	ldrb	r3, [r2, #1]
    4270:	3b01      	subs	r3, #1
    4272:	2b01      	cmp	r3, #1
    4274:	d8eb      	bhi.n	424e <_system_pinmux_config+0x6a>
    4276:	6081      	str	r1, [r0, #8]
    4278:	e7e9      	b.n	424e <_system_pinmux_config+0x6a>
    427a:	23c0      	movs	r3, #192	; 0xc0
    427c:	02db      	lsls	r3, r3, #11
    427e:	431c      	orrs	r4, r3
    4280:	e7c6      	b.n	4210 <_system_pinmux_config+0x2c>
    4282:	2400      	movs	r4, #0
    4284:	e7b9      	b.n	41fa <_system_pinmux_config+0x16>
    4286:	4b02      	ldr	r3, [pc, #8]	; (4290 <_system_pinmux_config+0xac>)
    4288:	401c      	ands	r4, r3
    428a:	e7c6      	b.n	421a <_system_pinmux_config+0x36>
    428c:	6181      	str	r1, [r0, #24]
    428e:	e7da      	b.n	4246 <_system_pinmux_config+0x62>
    4290:	fffbffff 	.word	0xfffbffff

00004294 <system_pinmux_pin_set_config>:
    4294:	b508      	push	{r3, lr}
    4296:	1c0a      	adds	r2, r1, #0
    4298:	1c03      	adds	r3, r0, #0
    429a:	09c1      	lsrs	r1, r0, #7
    429c:	2000      	movs	r0, #0
    429e:	2900      	cmp	r1, #0
    42a0:	d104      	bne.n	42ac <system_pinmux_pin_set_config+0x18>
    42a2:	4906      	ldr	r1, [pc, #24]	; (42bc <system_pinmux_pin_set_config+0x28>)
    42a4:	0958      	lsrs	r0, r3, #5
    42a6:	468c      	mov	ip, r1
    42a8:	01c0      	lsls	r0, r0, #7
    42aa:	4460      	add	r0, ip
    42ac:	211f      	movs	r1, #31
    42ae:	400b      	ands	r3, r1
    42b0:	391e      	subs	r1, #30
    42b2:	4099      	lsls	r1, r3
    42b4:	f7ff ff96 	bl	41e4 <_system_pinmux_config>
    42b8:	bd08      	pop	{r3, pc}
    42ba:	46c0      	nop			; (mov r8, r8)
    42bc:	41004400 	.word	0x41004400

000042c0 <system_gclk_init>:
    42c0:	2308      	movs	r3, #8
    42c2:	4a06      	ldr	r2, [pc, #24]	; (42dc <system_gclk_init+0x1c>)
    42c4:	6991      	ldr	r1, [r2, #24]
    42c6:	430b      	orrs	r3, r1
    42c8:	6193      	str	r3, [r2, #24]
    42ca:	2301      	movs	r3, #1
    42cc:	2101      	movs	r1, #1
    42ce:	4a04      	ldr	r2, [pc, #16]	; (42e0 <system_gclk_init+0x20>)
    42d0:	7013      	strb	r3, [r2, #0]
    42d2:	7813      	ldrb	r3, [r2, #0]
    42d4:	4219      	tst	r1, r3
    42d6:	d1fc      	bne.n	42d2 <system_gclk_init+0x12>
    42d8:	4770      	bx	lr
    42da:	46c0      	nop			; (mov r8, r8)
    42dc:	40000400 	.word	0x40000400
    42e0:	40000c00 	.word	0x40000c00

000042e4 <system_gclk_gen_set_config>:
    42e4:	b570      	push	{r4, r5, r6, lr}
    42e6:	780d      	ldrb	r5, [r1, #0]
    42e8:	784b      	ldrb	r3, [r1, #1]
    42ea:	022d      	lsls	r5, r5, #8
    42ec:	1c04      	adds	r4, r0, #0
    42ee:	4305      	orrs	r5, r0
    42f0:	2b00      	cmp	r3, #0
    42f2:	d002      	beq.n	42fa <system_gclk_gen_set_config+0x16>
    42f4:	2380      	movs	r3, #128	; 0x80
    42f6:	02db      	lsls	r3, r3, #11
    42f8:	431d      	orrs	r5, r3
    42fa:	7a4b      	ldrb	r3, [r1, #9]
    42fc:	2b00      	cmp	r3, #0
    42fe:	d002      	beq.n	4306 <system_gclk_gen_set_config+0x22>
    4300:	2380      	movs	r3, #128	; 0x80
    4302:	031b      	lsls	r3, r3, #12
    4304:	431d      	orrs	r5, r3
    4306:	684e      	ldr	r6, [r1, #4]
    4308:	2e01      	cmp	r6, #1
    430a:	d90f      	bls.n	432c <system_gclk_gen_set_config+0x48>
    430c:	1e73      	subs	r3, r6, #1
    430e:	4033      	ands	r3, r6
    4310:	d129      	bne.n	4366 <system_gclk_gen_set_config+0x82>
    4312:	2e02      	cmp	r6, #2
    4314:	d005      	beq.n	4322 <system_gclk_gen_set_config+0x3e>
    4316:	2202      	movs	r2, #2
    4318:	3301      	adds	r3, #1
    431a:	0052      	lsls	r2, r2, #1
    431c:	4296      	cmp	r6, r2
    431e:	d8fb      	bhi.n	4318 <system_gclk_gen_set_config+0x34>
    4320:	021b      	lsls	r3, r3, #8
    4322:	4318      	orrs	r0, r3
    4324:	2380      	movs	r3, #128	; 0x80
    4326:	1c04      	adds	r4, r0, #0
    4328:	035b      	lsls	r3, r3, #13
    432a:	431d      	orrs	r5, r3
    432c:	7a0b      	ldrb	r3, [r1, #8]
    432e:	2b00      	cmp	r3, #0
    4330:	d002      	beq.n	4338 <system_gclk_gen_set_config+0x54>
    4332:	2380      	movs	r3, #128	; 0x80
    4334:	039b      	lsls	r3, r3, #14
    4336:	431d      	orrs	r5, r3
    4338:	4a0e      	ldr	r2, [pc, #56]	; (4374 <system_gclk_gen_set_config+0x90>)
    433a:	7853      	ldrb	r3, [r2, #1]
    433c:	4e0d      	ldr	r6, [pc, #52]	; (4374 <system_gclk_gen_set_config+0x90>)
    433e:	b25b      	sxtb	r3, r3
    4340:	2b00      	cmp	r3, #0
    4342:	dbfa      	blt.n	433a <system_gclk_gen_set_config+0x56>
    4344:	f000 f8f2 	bl	452c <cpu_irq_enter_critical>
    4348:	60b4      	str	r4, [r6, #8]
    434a:	7873      	ldrb	r3, [r6, #1]
    434c:	4a09      	ldr	r2, [pc, #36]	; (4374 <system_gclk_gen_set_config+0x90>)
    434e:	b25b      	sxtb	r3, r3
    4350:	2b00      	cmp	r3, #0
    4352:	dbfa      	blt.n	434a <system_gclk_gen_set_config+0x66>
    4354:	2380      	movs	r3, #128	; 0x80
    4356:	6851      	ldr	r1, [r2, #4]
    4358:	025b      	lsls	r3, r3, #9
    435a:	400b      	ands	r3, r1
    435c:	431d      	orrs	r5, r3
    435e:	6055      	str	r5, [r2, #4]
    4360:	f000 f902 	bl	4568 <cpu_irq_leave_critical>
    4364:	bd70      	pop	{r4, r5, r6, pc}
    4366:	2380      	movs	r3, #128	; 0x80
    4368:	0234      	lsls	r4, r6, #8
    436a:	029b      	lsls	r3, r3, #10
    436c:	4304      	orrs	r4, r0
    436e:	431d      	orrs	r5, r3
    4370:	e7dc      	b.n	432c <system_gclk_gen_set_config+0x48>
    4372:	46c0      	nop			; (mov r8, r8)
    4374:	40000c00 	.word	0x40000c00

00004378 <system_gclk_gen_enable>:
    4378:	b510      	push	{r4, lr}
    437a:	1c04      	adds	r4, r0, #0
    437c:	4a0b      	ldr	r2, [pc, #44]	; (43ac <system_gclk_gen_enable+0x34>)
    437e:	7853      	ldrb	r3, [r2, #1]
    4380:	b25b      	sxtb	r3, r3
    4382:	2b00      	cmp	r3, #0
    4384:	dbfb      	blt.n	437e <system_gclk_gen_enable+0x6>
    4386:	f000 f8d1 	bl	452c <cpu_irq_enter_critical>
    438a:	4b09      	ldr	r3, [pc, #36]	; (43b0 <system_gclk_gen_enable+0x38>)
    438c:	4907      	ldr	r1, [pc, #28]	; (43ac <system_gclk_gen_enable+0x34>)
    438e:	701c      	strb	r4, [r3, #0]
    4390:	784b      	ldrb	r3, [r1, #1]
    4392:	4a06      	ldr	r2, [pc, #24]	; (43ac <system_gclk_gen_enable+0x34>)
    4394:	b25b      	sxtb	r3, r3
    4396:	2b00      	cmp	r3, #0
    4398:	dbfa      	blt.n	4390 <system_gclk_gen_enable+0x18>
    439a:	2180      	movs	r1, #128	; 0x80
    439c:	6853      	ldr	r3, [r2, #4]
    439e:	0249      	lsls	r1, r1, #9
    43a0:	430b      	orrs	r3, r1
    43a2:	6053      	str	r3, [r2, #4]
    43a4:	f000 f8e0 	bl	4568 <cpu_irq_leave_critical>
    43a8:	bd10      	pop	{r4, pc}
    43aa:	46c0      	nop			; (mov r8, r8)
    43ac:	40000c00 	.word	0x40000c00
    43b0:	40000c04 	.word	0x40000c04

000043b4 <system_gclk_gen_get_hz>:
    43b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    43b6:	1c07      	adds	r7, r0, #0
    43b8:	4a19      	ldr	r2, [pc, #100]	; (4420 <system_gclk_gen_get_hz+0x6c>)
    43ba:	7853      	ldrb	r3, [r2, #1]
    43bc:	b25b      	sxtb	r3, r3
    43be:	2b00      	cmp	r3, #0
    43c0:	dbfb      	blt.n	43ba <system_gclk_gen_get_hz+0x6>
    43c2:	f000 f8b3 	bl	452c <cpu_irq_enter_critical>
    43c6:	4b17      	ldr	r3, [pc, #92]	; (4424 <system_gclk_gen_get_hz+0x70>)
    43c8:	4a15      	ldr	r2, [pc, #84]	; (4420 <system_gclk_gen_get_hz+0x6c>)
    43ca:	701f      	strb	r7, [r3, #0]
    43cc:	7853      	ldrb	r3, [r2, #1]
    43ce:	4c14      	ldr	r4, [pc, #80]	; (4420 <system_gclk_gen_get_hz+0x6c>)
    43d0:	b25b      	sxtb	r3, r3
    43d2:	2b00      	cmp	r3, #0
    43d4:	dbfa      	blt.n	43cc <system_gclk_gen_get_hz+0x18>
    43d6:	6860      	ldr	r0, [r4, #4]
    43d8:	04c0      	lsls	r0, r0, #19
    43da:	0ec0      	lsrs	r0, r0, #27
    43dc:	f000 ff6c 	bl	52b8 <system_clock_source_get_hz>
    43e0:	1c06      	adds	r6, r0, #0
    43e2:	4b10      	ldr	r3, [pc, #64]	; (4424 <system_gclk_gen_get_hz+0x70>)
    43e4:	701f      	strb	r7, [r3, #0]
    43e6:	6865      	ldr	r5, [r4, #4]
    43e8:	4b0f      	ldr	r3, [pc, #60]	; (4428 <system_gclk_gen_get_hz+0x74>)
    43ea:	02ed      	lsls	r5, r5, #11
    43ec:	0fed      	lsrs	r5, r5, #31
    43ee:	701f      	strb	r7, [r3, #0]
    43f0:	7863      	ldrb	r3, [r4, #1]
    43f2:	b25b      	sxtb	r3, r3
    43f4:	2b00      	cmp	r3, #0
    43f6:	dbfb      	blt.n	43f0 <system_gclk_gen_get_hz+0x3c>
    43f8:	4b09      	ldr	r3, [pc, #36]	; (4420 <system_gclk_gen_get_hz+0x6c>)
    43fa:	6899      	ldr	r1, [r3, #8]
    43fc:	0a09      	lsrs	r1, r1, #8
    43fe:	b28c      	uxth	r4, r1
    4400:	f000 f8b2 	bl	4568 <cpu_irq_leave_critical>
    4404:	2d00      	cmp	r5, #0
    4406:	d003      	beq.n	4410 <system_gclk_gen_get_hz+0x5c>
    4408:	1c61      	adds	r1, r4, #1
    440a:	40ce      	lsrs	r6, r1
    440c:	1c30      	adds	r0, r6, #0
    440e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4410:	2c01      	cmp	r4, #1
    4412:	d9fb      	bls.n	440c <system_gclk_gen_get_hz+0x58>
    4414:	1c30      	adds	r0, r6, #0
    4416:	1c21      	adds	r1, r4, #0
    4418:	f002 f934 	bl	6684 <__aeabi_uidiv>
    441c:	1c06      	adds	r6, r0, #0
    441e:	e7f5      	b.n	440c <system_gclk_gen_get_hz+0x58>
    4420:	40000c00 	.word	0x40000c00
    4424:	40000c04 	.word	0x40000c04
    4428:	40000c08 	.word	0x40000c08

0000442c <system_gclk_chan_enable>:
    442c:	b510      	push	{r4, lr}
    442e:	1c04      	adds	r4, r0, #0
    4430:	f000 f87c 	bl	452c <cpu_irq_enter_critical>
    4434:	2180      	movs	r1, #128	; 0x80
    4436:	4b05      	ldr	r3, [pc, #20]	; (444c <system_gclk_chan_enable+0x20>)
    4438:	4a05      	ldr	r2, [pc, #20]	; (4450 <system_gclk_chan_enable+0x24>)
    443a:	701c      	strb	r4, [r3, #0]
    443c:	8853      	ldrh	r3, [r2, #2]
    443e:	01c9      	lsls	r1, r1, #7
    4440:	430b      	orrs	r3, r1
    4442:	8053      	strh	r3, [r2, #2]
    4444:	f000 f890 	bl	4568 <cpu_irq_leave_critical>
    4448:	bd10      	pop	{r4, pc}
    444a:	46c0      	nop			; (mov r8, r8)
    444c:	40000c02 	.word	0x40000c02
    4450:	40000c00 	.word	0x40000c00

00004454 <system_gclk_chan_disable>:
    4454:	b510      	push	{r4, lr}
    4456:	1c04      	adds	r4, r0, #0
    4458:	f000 f868 	bl	452c <cpu_irq_enter_critical>
    445c:	2080      	movs	r0, #128	; 0x80
    445e:	4b0e      	ldr	r3, [pc, #56]	; (4498 <system_gclk_chan_disable+0x44>)
    4460:	4a0e      	ldr	r2, [pc, #56]	; (449c <system_gclk_chan_disable+0x48>)
    4462:	701c      	strb	r4, [r3, #0]
    4464:	8854      	ldrh	r4, [r2, #2]
    4466:	4b0e      	ldr	r3, [pc, #56]	; (44a0 <system_gclk_chan_disable+0x4c>)
    4468:	8851      	ldrh	r1, [r2, #2]
    446a:	0524      	lsls	r4, r4, #20
    446c:	400b      	ands	r3, r1
    446e:	8053      	strh	r3, [r2, #2]
    4470:	8851      	ldrh	r1, [r2, #2]
    4472:	4b0c      	ldr	r3, [pc, #48]	; (44a4 <system_gclk_chan_disable+0x50>)
    4474:	0f24      	lsrs	r4, r4, #28
    4476:	400b      	ands	r3, r1
    4478:	8053      	strh	r3, [r2, #2]
    447a:	01c0      	lsls	r0, r0, #7
    447c:	8853      	ldrh	r3, [r2, #2]
    447e:	4907      	ldr	r1, [pc, #28]	; (449c <system_gclk_chan_disable+0x48>)
    4480:	4203      	tst	r3, r0
    4482:	d1fb      	bne.n	447c <system_gclk_chan_disable+0x28>
    4484:	8848      	ldrh	r0, [r1, #2]
    4486:	4b06      	ldr	r3, [pc, #24]	; (44a0 <system_gclk_chan_disable+0x4c>)
    4488:	0222      	lsls	r2, r4, #8
    448a:	4003      	ands	r3, r0
    448c:	4313      	orrs	r3, r2
    448e:	804b      	strh	r3, [r1, #2]
    4490:	f000 f86a 	bl	4568 <cpu_irq_leave_critical>
    4494:	bd10      	pop	{r4, pc}
    4496:	46c0      	nop			; (mov r8, r8)
    4498:	40000c02 	.word	0x40000c02
    449c:	40000c00 	.word	0x40000c00
    44a0:	fffff0ff 	.word	0xfffff0ff
    44a4:	ffffbfff 	.word	0xffffbfff

000044a8 <system_gclk_chan_set_config>:
    44a8:	b510      	push	{r4, lr}
    44aa:	780c      	ldrb	r4, [r1, #0]
    44ac:	0224      	lsls	r4, r4, #8
    44ae:	4304      	orrs	r4, r0
    44b0:	f7ff ffd0 	bl	4454 <system_gclk_chan_disable>
    44b4:	4b01      	ldr	r3, [pc, #4]	; (44bc <system_gclk_chan_set_config+0x14>)
    44b6:	b2a4      	uxth	r4, r4
    44b8:	805c      	strh	r4, [r3, #2]
    44ba:	bd10      	pop	{r4, pc}
    44bc:	40000c00 	.word	0x40000c00

000044c0 <system_gclk_chan_lock>:
    44c0:	b510      	push	{r4, lr}
    44c2:	1c04      	adds	r4, r0, #0
    44c4:	f000 f832 	bl	452c <cpu_irq_enter_critical>
    44c8:	4b05      	ldr	r3, [pc, #20]	; (44e0 <system_gclk_chan_lock+0x20>)
    44ca:	4a06      	ldr	r2, [pc, #24]	; (44e4 <system_gclk_chan_lock+0x24>)
    44cc:	701c      	strb	r4, [r3, #0]
    44ce:	2380      	movs	r3, #128	; 0x80
    44d0:	8851      	ldrh	r1, [r2, #2]
    44d2:	021b      	lsls	r3, r3, #8
    44d4:	430b      	orrs	r3, r1
    44d6:	8053      	strh	r3, [r2, #2]
    44d8:	f000 f846 	bl	4568 <cpu_irq_leave_critical>
    44dc:	bd10      	pop	{r4, pc}
    44de:	46c0      	nop			; (mov r8, r8)
    44e0:	40000c02 	.word	0x40000c02
    44e4:	40000c00 	.word	0x40000c00

000044e8 <system_gclk_chan_get_hz>:
    44e8:	b510      	push	{r4, lr}
    44ea:	1c04      	adds	r4, r0, #0
    44ec:	f000 f81e 	bl	452c <cpu_irq_enter_critical>
    44f0:	4b05      	ldr	r3, [pc, #20]	; (4508 <system_gclk_chan_get_hz+0x20>)
    44f2:	701c      	strb	r4, [r3, #0]
    44f4:	4b05      	ldr	r3, [pc, #20]	; (450c <system_gclk_chan_get_hz+0x24>)
    44f6:	885c      	ldrh	r4, [r3, #2]
    44f8:	f000 f836 	bl	4568 <cpu_irq_leave_critical>
    44fc:	0524      	lsls	r4, r4, #20
    44fe:	0f24      	lsrs	r4, r4, #28
    4500:	1c20      	adds	r0, r4, #0
    4502:	f7ff ff57 	bl	43b4 <system_gclk_gen_get_hz>
    4506:	bd10      	pop	{r4, pc}
    4508:	40000c02 	.word	0x40000c02
    450c:	40000c00 	.word	0x40000c00

00004510 <_system_dummy_init>:
    4510:	4770      	bx	lr
    4512:	46c0      	nop			; (mov r8, r8)

00004514 <system_init>:
    4514:	b508      	push	{r3, lr}
    4516:	f000 ff63 	bl	53e0 <system_clock_init>
    451a:	f7ff fff9 	bl	4510 <_system_dummy_init>
    451e:	f7ff fff7 	bl	4510 <_system_dummy_init>
    4522:	f7ff fdeb 	bl	40fc <_system_extint_init>
    4526:	f7ff fff3 	bl	4510 <_system_dummy_init>
    452a:	bd08      	pop	{r3, pc}

0000452c <cpu_irq_enter_critical>:
    452c:	4b0b      	ldr	r3, [pc, #44]	; (455c <cpu_irq_enter_critical+0x30>)
    452e:	681a      	ldr	r2, [r3, #0]
    4530:	2a00      	cmp	r2, #0
    4532:	d105      	bne.n	4540 <cpu_irq_enter_critical+0x14>
    4534:	f3ef 8110 	mrs	r1, PRIMASK
    4538:	2900      	cmp	r1, #0
    453a:	d005      	beq.n	4548 <cpu_irq_enter_critical+0x1c>
    453c:	4908      	ldr	r1, [pc, #32]	; (4560 <cpu_irq_enter_critical+0x34>)
    453e:	700a      	strb	r2, [r1, #0]
    4540:	681a      	ldr	r2, [r3, #0]
    4542:	3201      	adds	r2, #1
    4544:	601a      	str	r2, [r3, #0]
    4546:	4770      	bx	lr
    4548:	b672      	cpsid	i
    454a:	f3bf 8f5f 	dmb	sy
    454e:	4a05      	ldr	r2, [pc, #20]	; (4564 <cpu_irq_enter_critical+0x38>)
    4550:	7011      	strb	r1, [r2, #0]
    4552:	4a03      	ldr	r2, [pc, #12]	; (4560 <cpu_irq_enter_critical+0x34>)
    4554:	3101      	adds	r1, #1
    4556:	7011      	strb	r1, [r2, #0]
    4558:	e7f2      	b.n	4540 <cpu_irq_enter_critical+0x14>
    455a:	46c0      	nop			; (mov r8, r8)
    455c:	200046b4 	.word	0x200046b4
    4560:	200046b8 	.word	0x200046b8
    4564:	200000d0 	.word	0x200000d0

00004568 <cpu_irq_leave_critical>:
    4568:	4b08      	ldr	r3, [pc, #32]	; (458c <cpu_irq_leave_critical+0x24>)
    456a:	681a      	ldr	r2, [r3, #0]
    456c:	3a01      	subs	r2, #1
    456e:	601a      	str	r2, [r3, #0]
    4570:	681b      	ldr	r3, [r3, #0]
    4572:	2b00      	cmp	r3, #0
    4574:	d109      	bne.n	458a <cpu_irq_leave_critical+0x22>
    4576:	4b06      	ldr	r3, [pc, #24]	; (4590 <cpu_irq_leave_critical+0x28>)
    4578:	781b      	ldrb	r3, [r3, #0]
    457a:	2b00      	cmp	r3, #0
    457c:	d005      	beq.n	458a <cpu_irq_leave_critical+0x22>
    457e:	2201      	movs	r2, #1
    4580:	4b04      	ldr	r3, [pc, #16]	; (4594 <cpu_irq_leave_critical+0x2c>)
    4582:	701a      	strb	r2, [r3, #0]
    4584:	f3bf 8f5f 	dmb	sy
    4588:	b662      	cpsie	i
    458a:	4770      	bx	lr
    458c:	200046b4 	.word	0x200046b4
    4590:	200046b8 	.word	0x200046b8
    4594:	200000d0 	.word	0x200000d0

00004598 <usart_set_config_default>:
    4598:	b5f0      	push	{r4, r5, r6, r7, lr}
    459a:	464f      	mov	r7, r9
    459c:	4646      	mov	r6, r8
    459e:	b4c0      	push	{r6, r7}
    45a0:	1c04      	adds	r4, r0, #0
    45a2:	b085      	sub	sp, #20
    45a4:	2800      	cmp	r0, #0
    45a6:	d05c      	beq.n	4662 <usart_set_config_default+0xca>
    45a8:	6800      	ldr	r0, [r0, #0]
    45aa:	f000 fe6d 	bl	5288 <_sercom_get_sercom_inst_index>
    45ae:	250e      	movs	r5, #14
    45b0:	2300      	movs	r3, #0
    45b2:	3014      	adds	r0, #20
    45b4:	446d      	add	r5, sp
    45b6:	b2c0      	uxtb	r0, r0
    45b8:	802b      	strh	r3, [r5, #0]
    45ba:	69a7      	ldr	r7, [r4, #24]
    45bc:	6966      	ldr	r6, [r4, #20]
    45be:	f7ff ff93 	bl	44e8 <system_gclk_chan_get_hz>
    45c2:	2310      	movs	r3, #16
    45c4:	1c01      	adds	r1, r0, #0
    45c6:	9300      	str	r3, [sp, #0]
    45c8:	1c38      	adds	r0, r7, #0
    45ca:	1c2a      	adds	r2, r5, #0
    45cc:	2300      	movs	r3, #0
    45ce:	f000 fd73 	bl	50b8 <_sercom_get_async_baud_val>
    45d2:	6822      	ldr	r2, [r4, #0]
    45d4:	69d3      	ldr	r3, [r2, #28]
    45d6:	2b00      	cmp	r3, #0
    45d8:	d1fc      	bne.n	45d4 <usart_set_config_default+0x3c>
    45da:	882b      	ldrh	r3, [r5, #0]
    45dc:	8193      	strh	r3, [r2, #12]
    45de:	68e2      	ldr	r2, [r4, #12]
    45e0:	6923      	ldr	r3, [r4, #16]
    45e2:	4313      	orrs	r3, r2
    45e4:	221d      	movs	r2, #29
    45e6:	56a2      	ldrsb	r2, [r4, r2]
    45e8:	3201      	adds	r2, #1
    45ea:	d028      	beq.n	463e <usart_set_config_default+0xa6>
    45ec:	25c0      	movs	r5, #192	; 0xc0
    45ee:	02ad      	lsls	r5, r5, #10
    45f0:	431d      	orrs	r5, r3
    45f2:	231c      	movs	r3, #28
    45f4:	56e3      	ldrsb	r3, [r4, r3]
    45f6:	3301      	adds	r3, #1
    45f8:	d019      	beq.n	462e <usart_set_config_default+0x96>
    45fa:	68a2      	ldr	r2, [r4, #8]
    45fc:	2aff      	cmp	r2, #255	; 0xff
    45fe:	d01b      	beq.n	4638 <usart_set_config_default+0xa0>
    4600:	4b29      	ldr	r3, [pc, #164]	; (46a8 <usart_set_config_default+0x110>)
    4602:	4315      	orrs	r5, r2
    4604:	431e      	orrs	r6, r3
    4606:	2c00      	cmp	r4, #0
    4608:	d025      	beq.n	4656 <usart_set_config_default+0xbe>
    460a:	6822      	ldr	r2, [r4, #0]
    460c:	69d3      	ldr	r3, [r2, #28]
    460e:	2b00      	cmp	r3, #0
    4610:	d1fc      	bne.n	460c <usart_set_config_default+0x74>
    4612:	6055      	str	r5, [r2, #4]
    4614:	2c00      	cmp	r4, #0
    4616:	d018      	beq.n	464a <usart_set_config_default+0xb2>
    4618:	6822      	ldr	r2, [r4, #0]
    461a:	69d3      	ldr	r3, [r2, #28]
    461c:	2b00      	cmp	r3, #0
    461e:	d1fc      	bne.n	461a <usart_set_config_default+0x82>
    4620:	2000      	movs	r0, #0
    4622:	6016      	str	r6, [r2, #0]
    4624:	b005      	add	sp, #20
    4626:	bc0c      	pop	{r2, r3}
    4628:	4690      	mov	r8, r2
    462a:	4699      	mov	r9, r3
    462c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    462e:	4b1f      	ldr	r3, [pc, #124]	; (46ac <usart_set_config_default+0x114>)
    4630:	68a2      	ldr	r2, [r4, #8]
    4632:	401d      	ands	r5, r3
    4634:	2aff      	cmp	r2, #255	; 0xff
    4636:	d1e3      	bne.n	4600 <usart_set_config_default+0x68>
    4638:	4b1d      	ldr	r3, [pc, #116]	; (46b0 <usart_set_config_default+0x118>)
    463a:	431e      	orrs	r6, r3
    463c:	e7e3      	b.n	4606 <usart_set_config_default+0x6e>
    463e:	4d1d      	ldr	r5, [pc, #116]	; (46b4 <usart_set_config_default+0x11c>)
    4640:	401d      	ands	r5, r3
    4642:	2380      	movs	r3, #128	; 0x80
    4644:	025b      	lsls	r3, r3, #9
    4646:	431d      	orrs	r5, r3
    4648:	e7d3      	b.n	45f2 <usart_set_config_default+0x5a>
    464a:	481b      	ldr	r0, [pc, #108]	; (46b8 <usart_set_config_default+0x120>)
    464c:	491b      	ldr	r1, [pc, #108]	; (46bc <usart_set_config_default+0x124>)
    464e:	223f      	movs	r2, #63	; 0x3f
    4650:	f000 fc9a 	bl	4f88 <mbed_assert_internal>
    4654:	e7e0      	b.n	4618 <usart_set_config_default+0x80>
    4656:	4818      	ldr	r0, [pc, #96]	; (46b8 <usart_set_config_default+0x120>)
    4658:	4918      	ldr	r1, [pc, #96]	; (46bc <usart_set_config_default+0x124>)
    465a:	223f      	movs	r2, #63	; 0x3f
    465c:	f000 fc94 	bl	4f88 <mbed_assert_internal>
    4660:	e7d3      	b.n	460a <usart_set_config_default+0x72>
    4662:	4b15      	ldr	r3, [pc, #84]	; (46b8 <usart_set_config_default+0x120>)
    4664:	4f15      	ldr	r7, [pc, #84]	; (46bc <usart_set_config_default+0x124>)
    4666:	1c18      	adds	r0, r3, #0
    4668:	1c39      	adds	r1, r7, #0
    466a:	229c      	movs	r2, #156	; 0x9c
    466c:	4698      	mov	r8, r3
    466e:	f000 fc8b 	bl	4f88 <mbed_assert_internal>
    4672:	6820      	ldr	r0, [r4, #0]
    4674:	f000 fe08 	bl	5288 <_sercom_get_sercom_inst_index>
    4678:	250e      	movs	r5, #14
    467a:	69a3      	ldr	r3, [r4, #24]
    467c:	3014      	adds	r0, #20
    467e:	446d      	add	r5, sp
    4680:	b2c0      	uxtb	r0, r0
    4682:	4699      	mov	r9, r3
    4684:	802c      	strh	r4, [r5, #0]
    4686:	6966      	ldr	r6, [r4, #20]
    4688:	f7ff ff2e 	bl	44e8 <system_gclk_chan_get_hz>
    468c:	2310      	movs	r3, #16
    468e:	1c01      	adds	r1, r0, #0
    4690:	9300      	str	r3, [sp, #0]
    4692:	1c2a      	adds	r2, r5, #0
    4694:	4648      	mov	r0, r9
    4696:	2300      	movs	r3, #0
    4698:	f000 fd0e 	bl	50b8 <_sercom_get_async_baud_val>
    469c:	4640      	mov	r0, r8
    469e:	1c39      	adds	r1, r7, #0
    46a0:	223f      	movs	r2, #63	; 0x3f
    46a2:	f000 fc71 	bl	4f88 <mbed_assert_internal>
    46a6:	e794      	b.n	45d2 <usart_set_config_default+0x3a>
    46a8:	41000004 	.word	0x41000004
    46ac:	fffeffff 	.word	0xfffeffff
    46b0:	40000004 	.word	0x40000004
    46b4:	fffdffff 	.word	0xfffdffff
    46b8:	0000ef30 	.word	0x0000ef30
    46bc:	0000ef34 	.word	0x0000ef34

000046c0 <serial_find_mux_settings>:
    46c0:	b570      	push	{r4, r5, r6, lr}
    46c2:	1c05      	adds	r5, r0, #0
    46c4:	b086      	sub	sp, #24
    46c6:	2800      	cmp	r0, #0
    46c8:	d03c      	beq.n	4744 <serial_find_mux_settings+0x84>
    46ca:	201c      	movs	r0, #28
    46cc:	211d      	movs	r1, #29
    46ce:	2300      	movs	r3, #0
    46d0:	5628      	ldrsb	r0, [r5, r0]
    46d2:	5669      	ldrsb	r1, [r5, r1]
    46d4:	9302      	str	r3, [sp, #8]
    46d6:	9303      	str	r3, [sp, #12]
    46d8:	9304      	str	r3, [sp, #16]
    46da:	9305      	str	r3, [sp, #20]
    46dc:	f001 f82a 	bl	5734 <pinmap_merge_sercom>
    46e0:	2400      	movs	r4, #0
    46e2:	1c06      	adds	r6, r0, #0
    46e4:	201c      	movs	r0, #28
    46e6:	192b      	adds	r3, r5, r4
    46e8:	5618      	ldrsb	r0, [r3, r0]
    46ea:	1c31      	adds	r1, r6, #0
    46ec:	f001 f8b2 	bl	5854 <pinmap_pad_sercom>
    46f0:	00a3      	lsls	r3, r4, #2
    46f2:	aa02      	add	r2, sp, #8
    46f4:	3401      	adds	r4, #1
    46f6:	50d0      	str	r0, [r2, r3]
    46f8:	2c04      	cmp	r4, #4
    46fa:	d1f3      	bne.n	46e4 <serial_find_mux_settings+0x24>
    46fc:	9b03      	ldr	r3, [sp, #12]
    46fe:	2000      	movs	r0, #0
    4700:	9301      	str	r3, [sp, #4]
    4702:	3b01      	subs	r3, #1
    4704:	2b02      	cmp	r3, #2
    4706:	d802      	bhi.n	470e <serial_find_mux_settings+0x4e>
    4708:	4a11      	ldr	r2, [pc, #68]	; (4750 <serial_find_mux_settings+0x90>)
    470a:	009b      	lsls	r3, r3, #2
    470c:	5898      	ldr	r0, [r3, r2]
    470e:	221e      	movs	r2, #30
    4710:	5eab      	ldrsh	r3, [r5, r2]
    4712:	3301      	adds	r3, #1
    4714:	d008      	beq.n	4728 <serial_find_mux_settings+0x68>
    4716:	9b02      	ldr	r3, [sp, #8]
    4718:	2b00      	cmp	r3, #0
    471a:	d103      	bne.n	4724 <serial_find_mux_settings+0x64>
    471c:	9b04      	ldr	r3, [sp, #16]
    471e:	9301      	str	r3, [sp, #4]
    4720:	2b02      	cmp	r3, #2
    4722:	d008      	beq.n	4736 <serial_find_mux_settings+0x76>
    4724:	b006      	add	sp, #24
    4726:	bd70      	pop	{r4, r5, r6, pc}
    4728:	9b02      	ldr	r3, [sp, #8]
    472a:	2b02      	cmp	r3, #2
    472c:	d1fa      	bne.n	4724 <serial_find_mux_settings+0x64>
    472e:	2380      	movs	r3, #128	; 0x80
    4730:	025b      	lsls	r3, r3, #9
    4732:	4318      	orrs	r0, r3
    4734:	e7f6      	b.n	4724 <serial_find_mux_settings+0x64>
    4736:	9b05      	ldr	r3, [sp, #20]
    4738:	2b03      	cmp	r3, #3
    473a:	d1f3      	bne.n	4724 <serial_find_mux_settings+0x64>
    473c:	2380      	movs	r3, #128	; 0x80
    473e:	029b      	lsls	r3, r3, #10
    4740:	4318      	orrs	r0, r3
    4742:	e7ef      	b.n	4724 <serial_find_mux_settings+0x64>
    4744:	4803      	ldr	r0, [pc, #12]	; (4754 <serial_find_mux_settings+0x94>)
    4746:	4904      	ldr	r1, [pc, #16]	; (4758 <serial_find_mux_settings+0x98>)
    4748:	2271      	movs	r2, #113	; 0x71
    474a:	f000 fc1d 	bl	4f88 <mbed_assert_internal>
    474e:	e7bc      	b.n	46ca <serial_find_mux_settings+0xa>
    4750:	0000ef24 	.word	0x0000ef24
    4754:	0000ef30 	.word	0x0000ef30
    4758:	0000ef34 	.word	0x0000ef34

0000475c <get_default_serial_values>:
    475c:	b510      	push	{r4, lr}
    475e:	1e04      	subs	r4, r0, #0
    4760:	d00b      	beq.n	477a <get_default_serial_values+0x1e>
    4762:	23ff      	movs	r3, #255	; 0xff
    4764:	60a3      	str	r3, [r4, #8]
    4766:	2300      	movs	r3, #0
    4768:	60e3      	str	r3, [r4, #12]
    476a:	6123      	str	r3, [r4, #16]
    476c:	2396      	movs	r3, #150	; 0x96
    476e:	019b      	lsls	r3, r3, #6
    4770:	61a3      	str	r3, [r4, #24]
    4772:	2388      	movs	r3, #136	; 0x88
    4774:	035b      	lsls	r3, r3, #13
    4776:	6163      	str	r3, [r4, #20]
    4778:	bd10      	pop	{r4, pc}
    477a:	4803      	ldr	r0, [pc, #12]	; (4788 <get_default_serial_values+0x2c>)
    477c:	4903      	ldr	r1, [pc, #12]	; (478c <get_default_serial_values+0x30>)
    477e:	22e1      	movs	r2, #225	; 0xe1
    4780:	f000 fc02 	bl	4f88 <mbed_assert_internal>
    4784:	e7ed      	b.n	4762 <get_default_serial_values+0x6>
    4786:	46c0      	nop			; (mov r8, r8)
    4788:	0000ef30 	.word	0x0000ef30
    478c:	0000ef34 	.word	0x0000ef34

00004790 <serial_init>:
    4790:	b5f0      	push	{r4, r5, r6, r7, lr}
    4792:	464e      	mov	r6, r9
    4794:	4645      	mov	r5, r8
    4796:	4657      	mov	r7, sl
    4798:	b4e0      	push	{r5, r6, r7}
    479a:	1c04      	adds	r4, r0, #0
    479c:	b084      	sub	sp, #16
    479e:	1c0e      	adds	r6, r1, #0
    47a0:	1c15      	adds	r5, r2, #0
    47a2:	2800      	cmp	r0, #0
    47a4:	d100      	bne.n	47a8 <serial_init+0x18>
    47a6:	e09d      	b.n	48e4 <serial_init+0x154>
    47a8:	4f60      	ldr	r7, [pc, #384]	; (492c <serial_init+0x19c>)
    47aa:	783b      	ldrb	r3, [r7, #0]
    47ac:	2b00      	cmp	r3, #0
    47ae:	d100      	bne.n	47b2 <serial_init+0x22>
    47b0:	e083      	b.n	48ba <serial_init+0x12a>
    47b2:	1c20      	adds	r0, r4, #0
    47b4:	f7ff ffd2 	bl	475c <get_default_serial_values>
    47b8:	23ff      	movs	r3, #255	; 0xff
    47ba:	7726      	strb	r6, [r4, #28]
    47bc:	77a3      	strb	r3, [r4, #30]
    47be:	77e3      	strb	r3, [r4, #31]
    47c0:	7765      	strb	r5, [r4, #29]
    47c2:	1c20      	adds	r0, r4, #0
    47c4:	f7ff ff7c 	bl	46c0 <serial_find_mux_settings>
    47c8:	1c29      	adds	r1, r5, #0
    47ca:	1c07      	adds	r7, r0, #0
    47cc:	1c30      	adds	r0, r6, #0
    47ce:	f000 ffb1 	bl	5734 <pinmap_merge_sercom>
    47d2:	1c43      	adds	r3, r0, #1
    47d4:	d017      	beq.n	4806 <serial_init+0x76>
    47d6:	250f      	movs	r5, #15
    47d8:	4005      	ands	r5, r0
    47da:	2001      	movs	r0, #1
    47dc:	1c29      	adds	r1, r5, #0
    47de:	4240      	negs	r0, r0
    47e0:	f001 f85a 	bl	5898 <pinmap_peripheral_sercom>
    47e4:	1c06      	adds	r6, r0, #0
    47e6:	1c02      	adds	r2, r0, #0
    47e8:	6020      	str	r0, [r4, #0]
    47ea:	2c00      	cmp	r4, #0
    47ec:	d06a      	beq.n	48c4 <serial_init+0x134>
    47ee:	69d3      	ldr	r3, [r2, #28]
    47f0:	2b00      	cmp	r3, #0
    47f2:	d1fc      	bne.n	47ee <serial_init+0x5e>
    47f4:	2102      	movs	r1, #2
    47f6:	6813      	ldr	r3, [r2, #0]
    47f8:	438b      	bics	r3, r1
    47fa:	6013      	str	r3, [r2, #0]
    47fc:	2201      	movs	r2, #1
    47fe:	6823      	ldr	r3, [r4, #0]
    4800:	6818      	ldr	r0, [r3, #0]
    4802:	4202      	tst	r2, r0
    4804:	d005      	beq.n	4812 <serial_init+0x82>
    4806:	b004      	add	sp, #16
    4808:	bc1c      	pop	{r2, r3, r4}
    480a:	4690      	mov	r8, r2
    480c:	4699      	mov	r9, r3
    480e:	46a2      	mov	sl, r4
    4810:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4812:	681b      	ldr	r3, [r3, #0]
    4814:	4019      	ands	r1, r3
    4816:	4688      	mov	r8, r1
    4818:	d1f5      	bne.n	4806 <serial_init+0x76>
    481a:	1ca8      	adds	r0, r5, #2
    481c:	4082      	lsls	r2, r0
    481e:	4944      	ldr	r1, [pc, #272]	; (4930 <serial_init+0x1a0>)
    4820:	6a0b      	ldr	r3, [r1, #32]
    4822:	431a      	orrs	r2, r3
    4824:	620a      	str	r2, [r1, #32]
    4826:	4642      	mov	r2, r8
    4828:	ab02      	add	r3, sp, #8
    482a:	701a      	strb	r2, [r3, #0]
    482c:	2314      	movs	r3, #20
    482e:	4699      	mov	r9, r3
    4830:	44a9      	add	r9, r5
    4832:	a902      	add	r1, sp, #8
    4834:	4648      	mov	r0, r9
    4836:	f7ff fe37 	bl	44a8 <system_gclk_chan_set_config>
    483a:	4648      	mov	r0, r9
    483c:	f7ff fdf6 	bl	442c <system_gclk_chan_enable>
    4840:	2100      	movs	r1, #0
    4842:	2000      	movs	r0, #0
    4844:	f000 fd00 	bl	5248 <sercom_set_gclk_generator>
    4848:	6167      	str	r7, [r4, #20]
    484a:	1c20      	adds	r0, r4, #0
    484c:	f7ff fea4 	bl	4598 <usart_set_config_default>
    4850:	4642      	mov	r2, r8
    4852:	ab02      	add	r3, sp, #8
    4854:	715a      	strb	r2, [r3, #5]
    4856:	719a      	strb	r2, [r3, #6]
    4858:	71da      	strb	r2, [r3, #7]
    485a:	2320      	movs	r3, #32
    485c:	1c27      	adds	r7, r4, #0
    485e:	469a      	mov	sl, r3
    4860:	371c      	adds	r7, #28
    4862:	44a2      	add	sl, r4
    4864:	2300      	movs	r3, #0
    4866:	56fb      	ldrsb	r3, [r7, r3]
    4868:	4699      	mov	r9, r3
    486a:	3301      	adds	r3, #1
    486c:	d00f      	beq.n	488e <serial_init+0xfe>
    486e:	4648      	mov	r0, r9
    4870:	1c29      	adds	r1, r5, #0
    4872:	f000 ffcb 	bl	580c <pinmap_function_sercom>
    4876:	ab02      	add	r3, sp, #8
    4878:	b2c0      	uxtb	r0, r0
    487a:	7118      	strb	r0, [r3, #4]
    487c:	28ff      	cmp	r0, #255	; 0xff
    487e:	d006      	beq.n	488e <serial_init+0xfe>
    4880:	466a      	mov	r2, sp
    4882:	464b      	mov	r3, r9
    4884:	71d3      	strb	r3, [r2, #7]
    4886:	79d0      	ldrb	r0, [r2, #7]
    4888:	a903      	add	r1, sp, #12
    488a:	f7ff fd03 	bl	4294 <system_pinmux_pin_set_config>
    488e:	3701      	adds	r7, #1
    4890:	4557      	cmp	r7, sl
    4892:	d1e7      	bne.n	4864 <serial_init+0xd4>
    4894:	4b27      	ldr	r3, [pc, #156]	; (4934 <serial_init+0x1a4>)
    4896:	429e      	cmp	r6, r3
    4898:	d030      	beq.n	48fc <serial_init+0x16c>
    489a:	2c00      	cmp	r4, #0
    489c:	d028      	beq.n	48f0 <serial_init+0x160>
    489e:	6823      	ldr	r3, [r4, #0]
    48a0:	69da      	ldr	r2, [r3, #28]
    48a2:	2a00      	cmp	r2, #0
    48a4:	d1fc      	bne.n	48a0 <serial_init+0x110>
    48a6:	2c00      	cmp	r4, #0
    48a8:	d031      	beq.n	490e <serial_init+0x17e>
    48aa:	69da      	ldr	r2, [r3, #28]
    48ac:	2a00      	cmp	r2, #0
    48ae:	d1fc      	bne.n	48aa <serial_init+0x11a>
    48b0:	6819      	ldr	r1, [r3, #0]
    48b2:	3202      	adds	r2, #2
    48b4:	430a      	orrs	r2, r1
    48b6:	601a      	str	r2, [r3, #0]
    48b8:	e7a5      	b.n	4806 <serial_init+0x76>
    48ba:	f7ff fe2b 	bl	4514 <system_init>
    48be:	2301      	movs	r3, #1
    48c0:	703b      	strb	r3, [r7, #0]
    48c2:	e776      	b.n	47b2 <serial_init+0x22>
    48c4:	4b1c      	ldr	r3, [pc, #112]	; (4938 <serial_init+0x1a8>)
    48c6:	2256      	movs	r2, #86	; 0x56
    48c8:	4699      	mov	r9, r3
    48ca:	4b1c      	ldr	r3, [pc, #112]	; (493c <serial_init+0x1ac>)
    48cc:	4648      	mov	r0, r9
    48ce:	4698      	mov	r8, r3
    48d0:	1c19      	adds	r1, r3, #0
    48d2:	f000 fb59 	bl	4f88 <mbed_assert_internal>
    48d6:	223f      	movs	r2, #63	; 0x3f
    48d8:	4648      	mov	r0, r9
    48da:	4641      	mov	r1, r8
    48dc:	f000 fb54 	bl	4f88 <mbed_assert_internal>
    48e0:	6822      	ldr	r2, [r4, #0]
    48e2:	e784      	b.n	47ee <serial_init+0x5e>
    48e4:	4814      	ldr	r0, [pc, #80]	; (4938 <serial_init+0x1a8>)
    48e6:	4915      	ldr	r1, [pc, #84]	; (493c <serial_init+0x1ac>)
    48e8:	22ed      	movs	r2, #237	; 0xed
    48ea:	f000 fb4d 	bl	4f88 <mbed_assert_internal>
    48ee:	e75b      	b.n	47a8 <serial_init+0x18>
    48f0:	4811      	ldr	r0, [pc, #68]	; (4938 <serial_init+0x1a8>)
    48f2:	4912      	ldr	r1, [pc, #72]	; (493c <serial_init+0x1ac>)
    48f4:	223f      	movs	r2, #63	; 0x3f
    48f6:	f000 fb47 	bl	4f88 <mbed_assert_internal>
    48fa:	e7d0      	b.n	489e <serial_init+0x10e>
    48fc:	2201      	movs	r2, #1
    48fe:	4b10      	ldr	r3, [pc, #64]	; (4940 <serial_init+0x1b0>)
    4900:	1c21      	adds	r1, r4, #0
    4902:	601a      	str	r2, [r3, #0]
    4904:	480f      	ldr	r0, [pc, #60]	; (4944 <serial_init+0x1b4>)
    4906:	3247      	adds	r2, #71	; 0x47
    4908:	f005 facd 	bl	9ea6 <memcpy>
    490c:	e7c5      	b.n	489a <serial_init+0x10a>
    490e:	4e0a      	ldr	r6, [pc, #40]	; (4938 <serial_init+0x1a8>)
    4910:	4d0a      	ldr	r5, [pc, #40]	; (493c <serial_init+0x1ac>)
    4912:	1c30      	adds	r0, r6, #0
    4914:	1c29      	adds	r1, r5, #0
    4916:	324a      	adds	r2, #74	; 0x4a
    4918:	f000 fb36 	bl	4f88 <mbed_assert_internal>
    491c:	1c30      	adds	r0, r6, #0
    491e:	1c29      	adds	r1, r5, #0
    4920:	223f      	movs	r2, #63	; 0x3f
    4922:	f000 fb31 	bl	4f88 <mbed_assert_internal>
    4926:	6823      	ldr	r3, [r4, #0]
    4928:	e7bf      	b.n	48aa <serial_init+0x11a>
    492a:	46c0      	nop			; (mov r8, r8)
    492c:	200045b0 	.word	0x200045b0
    4930:	40000400 	.word	0x40000400
    4934:	42000800 	.word	0x42000800
    4938:	0000ef30 	.word	0x0000ef30
    493c:	0000ef34 	.word	0x0000ef34
    4940:	200046bc 	.word	0x200046bc
    4944:	20004758 	.word	0x20004758

00004948 <serial_irq_handler>:
    4948:	b5f0      	push	{r4, r5, r6, r7, lr}
    494a:	4647      	mov	r7, r8
    494c:	1c04      	adds	r4, r0, #0
    494e:	b480      	push	{r7}
    4950:	1c0e      	adds	r6, r1, #0
    4952:	1c15      	adds	r5, r2, #0
    4954:	2800      	cmp	r0, #0
    4956:	d020      	beq.n	499a <serial_irq_handler+0x52>
    4958:	4b18      	ldr	r3, [pc, #96]	; (49bc <serial_irq_handler+0x74>)
    495a:	6019      	str	r1, [r3, #0]
    495c:	6822      	ldr	r2, [r4, #0]
    495e:	4b18      	ldr	r3, [pc, #96]	; (49c0 <serial_irq_handler+0x78>)
    4960:	429a      	cmp	r2, r3
    4962:	d018      	beq.n	4996 <serial_irq_handler+0x4e>
    4964:	dc0d      	bgt.n	4982 <serial_irq_handler+0x3a>
    4966:	4917      	ldr	r1, [pc, #92]	; (49c4 <serial_irq_handler+0x7c>)
    4968:	2301      	movs	r3, #1
    496a:	428a      	cmp	r2, r1
    496c:	d003      	beq.n	4976 <serial_irq_handler+0x2e>
    496e:	4916      	ldr	r1, [pc, #88]	; (49c8 <serial_irq_handler+0x80>)
    4970:	3301      	adds	r3, #1
    4972:	428a      	cmp	r2, r1
    4974:	d10d      	bne.n	4992 <serial_irq_handler+0x4a>
    4976:	4a15      	ldr	r2, [pc, #84]	; (49cc <serial_irq_handler+0x84>)
    4978:	009b      	lsls	r3, r3, #2
    497a:	509d      	str	r5, [r3, r2]
    497c:	bc04      	pop	{r2}
    497e:	4690      	mov	r8, r2
    4980:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4982:	4913      	ldr	r1, [pc, #76]	; (49d0 <serial_irq_handler+0x88>)
    4984:	2304      	movs	r3, #4
    4986:	428a      	cmp	r2, r1
    4988:	d0f5      	beq.n	4976 <serial_irq_handler+0x2e>
    498a:	4912      	ldr	r1, [pc, #72]	; (49d4 <serial_irq_handler+0x8c>)
    498c:	3301      	adds	r3, #1
    498e:	428a      	cmp	r2, r1
    4990:	d0f1      	beq.n	4976 <serial_irq_handler+0x2e>
    4992:	2300      	movs	r3, #0
    4994:	e7ef      	b.n	4976 <serial_irq_handler+0x2e>
    4996:	2303      	movs	r3, #3
    4998:	e7ed      	b.n	4976 <serial_irq_handler+0x2e>
    499a:	4b0f      	ldr	r3, [pc, #60]	; (49d8 <serial_irq_handler+0x90>)
    499c:	22b3      	movs	r2, #179	; 0xb3
    499e:	4698      	mov	r8, r3
    49a0:	4f0e      	ldr	r7, [pc, #56]	; (49dc <serial_irq_handler+0x94>)
    49a2:	1c18      	adds	r0, r3, #0
    49a4:	1c39      	adds	r1, r7, #0
    49a6:	0092      	lsls	r2, r2, #2
    49a8:	f000 faee 	bl	4f88 <mbed_assert_internal>
    49ac:	4b03      	ldr	r3, [pc, #12]	; (49bc <serial_irq_handler+0x74>)
    49ae:	4640      	mov	r0, r8
    49b0:	1c39      	adds	r1, r7, #0
    49b2:	4a0b      	ldr	r2, [pc, #44]	; (49e0 <serial_irq_handler+0x98>)
    49b4:	601e      	str	r6, [r3, #0]
    49b6:	f000 fae7 	bl	4f88 <mbed_assert_internal>
    49ba:	e7cf      	b.n	495c <serial_irq_handler+0x14>
    49bc:	200046d8 	.word	0x200046d8
    49c0:	42001400 	.word	0x42001400
    49c4:	42000c00 	.word	0x42000c00
    49c8:	42001000 	.word	0x42001000
    49cc:	200046c0 	.word	0x200046c0
    49d0:	42001800 	.word	0x42001800
    49d4:	42001c00 	.word	0x42001c00
    49d8:	0000ef30 	.word	0x0000ef30
    49dc:	0000ef34 	.word	0x0000ef34
    49e0:	00000266 	.word	0x00000266

000049e4 <serial_readable>:
    49e4:	b510      	push	{r4, lr}
    49e6:	1e04      	subs	r4, r0, #0
    49e8:	d004      	beq.n	49f4 <serial_readable+0x10>
    49ea:	6823      	ldr	r3, [r4, #0]
    49ec:	7e18      	ldrb	r0, [r3, #24]
    49ee:	0740      	lsls	r0, r0, #29
    49f0:	0fc0      	lsrs	r0, r0, #31
    49f2:	bd10      	pop	{r4, pc}
    49f4:	4802      	ldr	r0, [pc, #8]	; (4a00 <serial_readable+0x1c>)
    49f6:	4903      	ldr	r1, [pc, #12]	; (4a04 <serial_readable+0x20>)
    49f8:	4a03      	ldr	r2, [pc, #12]	; (4a08 <serial_readable+0x24>)
    49fa:	f000 fac5 	bl	4f88 <mbed_assert_internal>
    49fe:	e7f4      	b.n	49ea <serial_readable+0x6>
    4a00:	0000ef30 	.word	0x0000ef30
    4a04:	0000ef34 	.word	0x0000ef34
    4a08:	00000323 	.word	0x00000323

00004a0c <serial_getc>:
    4a0c:	b510      	push	{r4, lr}
    4a0e:	1e04      	subs	r4, r0, #0
    4a10:	d008      	beq.n	4a24 <serial_getc+0x18>
    4a12:	1c20      	adds	r0, r4, #0
    4a14:	f7ff ffe6 	bl	49e4 <serial_readable>
    4a18:	2800      	cmp	r0, #0
    4a1a:	d0fa      	beq.n	4a12 <serial_getc+0x6>
    4a1c:	6823      	ldr	r3, [r4, #0]
    4a1e:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    4a20:	b280      	uxth	r0, r0
    4a22:	bd10      	pop	{r4, pc}
    4a24:	4802      	ldr	r0, [pc, #8]	; (4a30 <serial_getc+0x24>)
    4a26:	4903      	ldr	r1, [pc, #12]	; (4a34 <serial_getc+0x28>)
    4a28:	4a03      	ldr	r2, [pc, #12]	; (4a38 <serial_getc+0x2c>)
    4a2a:	f000 faad 	bl	4f88 <mbed_assert_internal>
    4a2e:	e7f0      	b.n	4a12 <serial_getc+0x6>
    4a30:	0000ef30 	.word	0x0000ef30
    4a34:	0000ef34 	.word	0x0000ef34
    4a38:	00000311 	.word	0x00000311

00004a3c <serial_writable>:
    4a3c:	b510      	push	{r4, lr}
    4a3e:	1e04      	subs	r4, r0, #0
    4a40:	d004      	beq.n	4a4c <serial_writable+0x10>
    4a42:	2001      	movs	r0, #1
    4a44:	6823      	ldr	r3, [r4, #0]
    4a46:	7e1b      	ldrb	r3, [r3, #24]
    4a48:	4018      	ands	r0, r3
    4a4a:	bd10      	pop	{r4, pc}
    4a4c:	22cc      	movs	r2, #204	; 0xcc
    4a4e:	4803      	ldr	r0, [pc, #12]	; (4a5c <serial_writable+0x20>)
    4a50:	4903      	ldr	r1, [pc, #12]	; (4a60 <serial_writable+0x24>)
    4a52:	0092      	lsls	r2, r2, #2
    4a54:	f000 fa98 	bl	4f88 <mbed_assert_internal>
    4a58:	e7f3      	b.n	4a42 <serial_writable+0x6>
    4a5a:	46c0      	nop			; (mov r8, r8)
    4a5c:	0000ef30 	.word	0x0000ef30
    4a60:	0000ef34 	.word	0x0000ef34

00004a64 <serial_putc>:
    4a64:	b538      	push	{r3, r4, r5, lr}
    4a66:	1c04      	adds	r4, r0, #0
    4a68:	1c0d      	adds	r5, r1, #0
    4a6a:	2800      	cmp	r0, #0
    4a6c:	d00e      	beq.n	4a8c <serial_putc+0x28>
    4a6e:	05ed      	lsls	r5, r5, #23
    4a70:	0ded      	lsrs	r5, r5, #23
    4a72:	1c20      	adds	r0, r4, #0
    4a74:	f7ff ffe2 	bl	4a3c <serial_writable>
    4a78:	2800      	cmp	r0, #0
    4a7a:	d0fa      	beq.n	4a72 <serial_putc+0xe>
    4a7c:	2202      	movs	r2, #2
    4a7e:	6823      	ldr	r3, [r4, #0]
    4a80:	851d      	strh	r5, [r3, #40]	; 0x28
    4a82:	6821      	ldr	r1, [r4, #0]
    4a84:	7e0b      	ldrb	r3, [r1, #24]
    4a86:	421a      	tst	r2, r3
    4a88:	d0fc      	beq.n	4a84 <serial_putc+0x20>
    4a8a:	bd38      	pop	{r3, r4, r5, pc}
    4a8c:	4802      	ldr	r0, [pc, #8]	; (4a98 <serial_putc+0x34>)
    4a8e:	4903      	ldr	r1, [pc, #12]	; (4a9c <serial_putc+0x38>)
    4a90:	4a03      	ldr	r2, [pc, #12]	; (4aa0 <serial_putc+0x3c>)
    4a92:	f000 fa79 	bl	4f88 <mbed_assert_internal>
    4a96:	e7ea      	b.n	4a6e <serial_putc+0xa>
    4a98:	0000ef30 	.word	0x0000ef30
    4a9c:	0000ef34 	.word	0x0000ef34
    4aa0:	00000319 	.word	0x00000319

00004aa4 <_ZN4mbed8FilePathC1EPKc>:
    4aa4:	b538      	push	{r3, r4, r5, lr}
    4aa6:	2300      	movs	r3, #0
    4aa8:	6003      	str	r3, [r0, #0]
    4aaa:	6043      	str	r3, [r0, #4]
    4aac:	780b      	ldrb	r3, [r1, #0]
    4aae:	1c04      	adds	r4, r0, #0
    4ab0:	2b2f      	cmp	r3, #47	; 0x2f
    4ab2:	d001      	beq.n	4ab8 <_ZN4mbed8FilePathC1EPKc+0x14>
    4ab4:	1c20      	adds	r0, r4, #0
    4ab6:	bd38      	pop	{r3, r4, r5, pc}
    4ab8:	784b      	ldrb	r3, [r1, #1]
    4aba:	2b00      	cmp	r3, #0
    4abc:	d0fa      	beq.n	4ab4 <_ZN4mbed8FilePathC1EPKc+0x10>
    4abe:	1c48      	adds	r0, r1, #1
    4ac0:	6020      	str	r0, [r4, #0]
    4ac2:	784b      	ldrb	r3, [r1, #1]
    4ac4:	2b2f      	cmp	r3, #47	; 0x2f
    4ac6:	d014      	beq.n	4af2 <_ZN4mbed8FilePathC1EPKc+0x4e>
    4ac8:	2b00      	cmp	r3, #0
    4aca:	d015      	beq.n	4af8 <_ZN4mbed8FilePathC1EPKc+0x54>
    4acc:	1c03      	adds	r3, r0, #0
    4ace:	e001      	b.n	4ad4 <_ZN4mbed8FilePathC1EPKc+0x30>
    4ad0:	2a00      	cmp	r2, #0
    4ad2:	d00c      	beq.n	4aee <_ZN4mbed8FilePathC1EPKc+0x4a>
    4ad4:	1a5d      	subs	r5, r3, r1
    4ad6:	3301      	adds	r3, #1
    4ad8:	6023      	str	r3, [r4, #0]
    4ada:	781a      	ldrb	r2, [r3, #0]
    4adc:	2a2f      	cmp	r2, #47	; 0x2f
    4ade:	d1f7      	bne.n	4ad0 <_ZN4mbed8FilePathC1EPKc+0x2c>
    4ae0:	1c29      	adds	r1, r5, #0
    4ae2:	3301      	adds	r3, #1
    4ae4:	6023      	str	r3, [r4, #0]
    4ae6:	f001 fb2f 	bl	6148 <_ZN4mbed8FileBase6lookupEPKcj>
    4aea:	6060      	str	r0, [r4, #4]
    4aec:	e7e2      	b.n	4ab4 <_ZN4mbed8FilePathC1EPKc+0x10>
    4aee:	1c29      	adds	r1, r5, #0
    4af0:	e7f9      	b.n	4ae6 <_ZN4mbed8FilePathC1EPKc+0x42>
    4af2:	1c03      	adds	r3, r0, #0
    4af4:	2100      	movs	r1, #0
    4af6:	e7f4      	b.n	4ae2 <_ZN4mbed8FilePathC1EPKc+0x3e>
    4af8:	2100      	movs	r1, #0
    4afa:	e7f4      	b.n	4ae6 <_ZN4mbed8FilePathC1EPKc+0x42>

00004afc <_ZN4mbed8FilePath8fileNameEv>:
    4afc:	6800      	ldr	r0, [r0, #0]
    4afe:	4770      	bx	lr

00004b00 <_ZN4mbed8FilePath10fileSystemEv>:
    4b00:	6843      	ldr	r3, [r0, #4]
    4b02:	b510      	push	{r4, lr}
    4b04:	2b00      	cmp	r3, #0
    4b06:	d007      	beq.n	4b18 <_ZN4mbed8FilePath10fileSystemEv+0x18>
    4b08:	1c04      	adds	r4, r0, #0
    4b0a:	1c18      	adds	r0, r3, #0
    4b0c:	f001 fb3c 	bl	6188 <_ZN4mbed8FileBase11getPathTypeEv>
    4b10:	2801      	cmp	r0, #1
    4b12:	d101      	bne.n	4b18 <_ZN4mbed8FilePath10fileSystemEv+0x18>
    4b14:	6860      	ldr	r0, [r4, #4]
    4b16:	bd10      	pop	{r4, pc}
    4b18:	2000      	movs	r0, #0
    4b1a:	e7fc      	b.n	4b16 <_ZN4mbed8FilePath10fileSystemEv+0x16>

00004b1c <_ZN4mbed8FilePath6isFileEv>:
    4b1c:	6840      	ldr	r0, [r0, #4]
    4b1e:	b508      	push	{r3, lr}
    4b20:	2800      	cmp	r0, #0
    4b22:	d005      	beq.n	4b30 <_ZN4mbed8FilePath6isFileEv+0x14>
    4b24:	f001 fb30 	bl	6188 <_ZN4mbed8FileBase11getPathTypeEv>
    4b28:	4243      	negs	r3, r0
    4b2a:	4158      	adcs	r0, r3
    4b2c:	b2c0      	uxtb	r0, r0
    4b2e:	bd08      	pop	{r3, pc}
    4b30:	2000      	movs	r0, #0
    4b32:	e7fc      	b.n	4b2e <_ZN4mbed8FilePath6isFileEv+0x12>

00004b34 <_ZN4mbed8FilePath4fileEv>:
    4b34:	6843      	ldr	r3, [r0, #4]
    4b36:	b510      	push	{r4, lr}
    4b38:	2b00      	cmp	r3, #0
    4b3a:	d00a      	beq.n	4b52 <_ZN4mbed8FilePath4fileEv+0x1e>
    4b3c:	1c04      	adds	r4, r0, #0
    4b3e:	1c18      	adds	r0, r3, #0
    4b40:	f001 fb22 	bl	6188 <_ZN4mbed8FileBase11getPathTypeEv>
    4b44:	2800      	cmp	r0, #0
    4b46:	d104      	bne.n	4b52 <_ZN4mbed8FilePath4fileEv+0x1e>
    4b48:	6860      	ldr	r0, [r4, #4]
    4b4a:	2800      	cmp	r0, #0
    4b4c:	d001      	beq.n	4b52 <_ZN4mbed8FilePath4fileEv+0x1e>
    4b4e:	3804      	subs	r0, #4
    4b50:	bd10      	pop	{r4, pc}
    4b52:	2000      	movs	r0, #0
    4b54:	e7fc      	b.n	4b50 <_ZN4mbed8FilePath4fileEv+0x1c>
    4b56:	46c0      	nop			; (mov r8, r8)

00004b58 <_ZN4mbed8FilePath6existsEv>:
    4b58:	6840      	ldr	r0, [r0, #4]
    4b5a:	1e43      	subs	r3, r0, #1
    4b5c:	4198      	sbcs	r0, r3
    4b5e:	b2c0      	uxtb	r0, r0
    4b60:	4770      	bx	lr
    4b62:	46c0      	nop			; (mov r8, r8)

00004b64 <_ZN4mbed3SPID1Ev>:
    4b64:	4770      	bx	lr
    4b66:	46c0      	nop			; (mov r8, r8)

00004b68 <_ZN6CThunkIN4mbed3SPIEE10trampolineEPS1_PvPMS1_FvS4_E>:
    4b68:	b510      	push	{r4, lr}
    4b6a:	2800      	cmp	r0, #0
    4b6c:	d008      	beq.n	4b80 <_ZN6CThunkIN4mbed3SPIEE10trampolineEPS1_PvPMS1_FvS4_E+0x18>
    4b6e:	6814      	ldr	r4, [r2, #0]
    4b70:	6853      	ldr	r3, [r2, #4]
    4b72:	2c00      	cmp	r4, #0
    4b74:	d005      	beq.n	4b82 <_ZN6CThunkIN4mbed3SPIEE10trampolineEPS1_PvPMS1_FvS4_E+0x1a>
    4b76:	07da      	lsls	r2, r3, #31
    4b78:	d405      	bmi.n	4b86 <_ZN6CThunkIN4mbed3SPIEE10trampolineEPS1_PvPMS1_FvS4_E+0x1e>
    4b7a:	105b      	asrs	r3, r3, #1
    4b7c:	18c0      	adds	r0, r0, r3
    4b7e:	47a0      	blx	r4
    4b80:	bd10      	pop	{r4, pc}
    4b82:	07da      	lsls	r2, r3, #31
    4b84:	d5fc      	bpl.n	4b80 <_ZN6CThunkIN4mbed3SPIEE10trampolineEPS1_PvPMS1_FvS4_E+0x18>
    4b86:	105b      	asrs	r3, r3, #1
    4b88:	18c0      	adds	r0, r0, r3
    4b8a:	6803      	ldr	r3, [r0, #0]
    4b8c:	591c      	ldr	r4, [r3, r4]
    4b8e:	47a0      	blx	r4
    4b90:	e7f6      	b.n	4b80 <_ZN6CThunkIN4mbed3SPIEE10trampolineEPS1_PvPMS1_FvS4_E+0x18>
    4b92:	46c0      	nop			; (mov r8, r8)

00004b94 <_ZN4mbed3SPID0Ev>:
    4b94:	b510      	push	{r4, lr}
    4b96:	1c04      	adds	r4, r0, #0
    4b98:	f001 fd6f 	bl	667a <_ZdlPv>
    4b9c:	1c20      	adds	r0, r4, #0
    4b9e:	bd10      	pop	{r4, pc}

00004ba0 <_ZN4mbed3SPIC1E7PinNameS1_S1_S1_>:
    4ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4ba2:	4656      	mov	r6, sl
    4ba4:	465f      	mov	r7, fp
    4ba6:	464d      	mov	r5, r9
    4ba8:	4644      	mov	r4, r8
    4baa:	4691      	mov	r9, r2
    4bac:	2200      	movs	r2, #0
    4bae:	b4f0      	push	{r4, r5, r6, r7}
    4bb0:	1c05      	adds	r5, r0, #0
    4bb2:	1c04      	adds	r4, r0, #0
    4bb4:	b087      	sub	sp, #28
    4bb6:	9303      	str	r3, [sp, #12]
    4bb8:	ab10      	add	r3, sp, #64	; 0x40
    4bba:	569a      	ldrsb	r2, [r3, r2]
    4bbc:	4b26      	ldr	r3, [pc, #152]	; (4c58 <_ZN4mbed3SPIC1E7PinNameS1_S1_S1_+0xb8>)
    4bbe:	468a      	mov	sl, r1
    4bc0:	3308      	adds	r3, #8
    4bc2:	c508      	stmia	r5!, {r3}
    4bc4:	4693      	mov	fp, r2
    4bc6:	1c28      	adds	r0, r5, #0
    4bc8:	2100      	movs	r1, #0
    4bca:	2240      	movs	r2, #64	; 0x40
    4bcc:	f005 f974 	bl	9eb8 <memset>
    4bd0:	2300      	movs	r3, #0
    4bd2:	1c22      	adds	r2, r4, #0
    4bd4:	9304      	str	r3, [sp, #16]
    4bd6:	9305      	str	r3, [sp, #20]
    4bd8:	a904      	add	r1, sp, #16
    4bda:	3248      	adds	r2, #72	; 0x48
    4bdc:	c941      	ldmia	r1!, {r0, r6}
    4bde:	c241      	stmia	r2!, {r0, r6}
    4be0:	4a1e      	ldr	r2, [pc, #120]	; (4c5c <_ZN4mbed3SPIC1E7PinNameS1_S1_S1_+0xbc>)
    4be2:	6522      	str	r2, [r4, #80]	; 0x50
    4be4:	4a1e      	ldr	r2, [pc, #120]	; (4c60 <_ZN4mbed3SPIC1E7PinNameS1_S1_S1_+0xc0>)
    4be6:	6562      	str	r2, [r4, #84]	; 0x54
    4be8:	4a1e      	ldr	r2, [pc, #120]	; (4c64 <_ZN4mbed3SPIC1E7PinNameS1_S1_S1_+0xc4>)
    4bea:	65a2      	str	r2, [r4, #88]	; 0x58
    4bec:	1c22      	adds	r2, r4, #0
    4bee:	3248      	adds	r2, #72	; 0x48
    4bf0:	6623      	str	r3, [r4, #96]	; 0x60
    4bf2:	65e4      	str	r4, [r4, #92]	; 0x5c
    4bf4:	6662      	str	r2, [r4, #100]	; 0x64
    4bf6:	4a1c      	ldr	r2, [pc, #112]	; (4c68 <_ZN4mbed3SPIC1E7PinNameS1_S1_S1_+0xc8>)
    4bf8:	66a2      	str	r2, [r4, #104]	; 0x68
    4bfa:	f3bf 8f6f 	isb	sy
    4bfe:	f3bf 8f4f 	dsb	sy
    4c02:	2280      	movs	r2, #128	; 0x80
    4c04:	66e3      	str	r3, [r4, #108]	; 0x6c
    4c06:	50a3      	str	r3, [r4, r2]
    4c08:	3204      	adds	r2, #4
    4c0a:	54a3      	strb	r3, [r4, r2]
    4c0c:	3204      	adds	r2, #4
    4c0e:	4690      	mov	r8, r2
    4c10:	4641      	mov	r1, r8
    4c12:	278c      	movs	r7, #140	; 0x8c
    4c14:	3a80      	subs	r2, #128	; 0x80
    4c16:	5062      	str	r2, [r4, r1]
    4c18:	2690      	movs	r6, #144	; 0x90
    4c1a:	465a      	mov	r2, fp
    4c1c:	51e3      	str	r3, [r4, r7]
    4c1e:	4b13      	ldr	r3, [pc, #76]	; (4c6c <_ZN4mbed3SPIC1E7PinNameS1_S1_S1_+0xcc>)
    4c20:	9200      	str	r2, [sp, #0]
    4c22:	51a3      	str	r3, [r4, r6]
    4c24:	1c28      	adds	r0, r5, #0
    4c26:	4651      	mov	r1, sl
    4c28:	464a      	mov	r2, r9
    4c2a:	9b03      	ldr	r3, [sp, #12]
    4c2c:	f000 ff92 	bl	5b54 <spi_init>
    4c30:	4643      	mov	r3, r8
    4c32:	59e2      	ldr	r2, [r4, r7]
    4c34:	58e1      	ldr	r1, [r4, r3]
    4c36:	1c28      	adds	r0, r5, #0
    4c38:	2300      	movs	r3, #0
    4c3a:	f001 f883 	bl	5d44 <spi_format>
    4c3e:	1c28      	adds	r0, r5, #0
    4c40:	59a1      	ldr	r1, [r4, r6]
    4c42:	f001 f933 	bl	5eac <spi_frequency>
    4c46:	1c20      	adds	r0, r4, #0
    4c48:	b007      	add	sp, #28
    4c4a:	bc3c      	pop	{r2, r3, r4, r5}
    4c4c:	4690      	mov	r8, r2
    4c4e:	4699      	mov	r9, r3
    4c50:	46a2      	mov	sl, r4
    4c52:	46ab      	mov	fp, r5
    4c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4c56:	46c0      	nop			; (mov r8, r8)
    4c58:	0000f1d0 	.word	0x0000f1d0
    4c5c:	2404b51f 	.word	0x2404b51f
    4c60:	cc0f447c 	.word	0xcc0f447c
    4c64:	bd1f4798 	.word	0xbd1f4798
    4c68:	00004b69 	.word	0x00004b69
    4c6c:	000f4240 	.word	0x000f4240

00004c70 <_ZN4mbed3SPI6aquireEv>:
    4c70:	b570      	push	{r4, r5, r6, lr}
    4c72:	4d0a      	ldr	r5, [pc, #40]	; (4c9c <_ZN4mbed3SPI6aquireEv+0x2c>)
    4c74:	682b      	ldr	r3, [r5, #0]
    4c76:	4283      	cmp	r3, r0
    4c78:	d00f      	beq.n	4c9a <_ZN4mbed3SPI6aquireEv+0x2a>
    4c7a:	2388      	movs	r3, #136	; 0x88
    4c7c:	1d06      	adds	r6, r0, #4
    4c7e:	58c1      	ldr	r1, [r0, r3]
    4c80:	3304      	adds	r3, #4
    4c82:	58c2      	ldr	r2, [r0, r3]
    4c84:	1c04      	adds	r4, r0, #0
    4c86:	2300      	movs	r3, #0
    4c88:	1c30      	adds	r0, r6, #0
    4c8a:	f001 f85b 	bl	5d44 <spi_format>
    4c8e:	2390      	movs	r3, #144	; 0x90
    4c90:	1c30      	adds	r0, r6, #0
    4c92:	58e1      	ldr	r1, [r4, r3]
    4c94:	f001 f90a 	bl	5eac <spi_frequency>
    4c98:	602c      	str	r4, [r5, #0]
    4c9a:	bd70      	pop	{r4, r5, r6, pc}
    4c9c:	200046dc 	.word	0x200046dc

00004ca0 <_ZN4mbed3SPI6formatEii>:
    4ca0:	b508      	push	{r3, lr}
    4ca2:	2388      	movs	r3, #136	; 0x88
    4ca4:	50c1      	str	r1, [r0, r3]
    4ca6:	3304      	adds	r3, #4
    4ca8:	50c2      	str	r2, [r0, r3]
    4caa:	2200      	movs	r2, #0
    4cac:	4b02      	ldr	r3, [pc, #8]	; (4cb8 <_ZN4mbed3SPI6formatEii+0x18>)
    4cae:	601a      	str	r2, [r3, #0]
    4cb0:	f7ff ffde 	bl	4c70 <_ZN4mbed3SPI6aquireEv>
    4cb4:	bd08      	pop	{r3, pc}
    4cb6:	46c0      	nop			; (mov r8, r8)
    4cb8:	200046dc 	.word	0x200046dc

00004cbc <_ZN4mbed3SPI9frequencyEi>:
    4cbc:	b508      	push	{r3, lr}
    4cbe:	2390      	movs	r3, #144	; 0x90
    4cc0:	2200      	movs	r2, #0
    4cc2:	50c1      	str	r1, [r0, r3]
    4cc4:	4b02      	ldr	r3, [pc, #8]	; (4cd0 <_ZN4mbed3SPI9frequencyEi+0x14>)
    4cc6:	601a      	str	r2, [r3, #0]
    4cc8:	f7ff ffd2 	bl	4c70 <_ZN4mbed3SPI6aquireEv>
    4ccc:	bd08      	pop	{r3, pc}
    4cce:	46c0      	nop			; (mov r8, r8)
    4cd0:	200046dc 	.word	0x200046dc

00004cd4 <_ZN4mbed3SPI5writeEi>:
    4cd4:	b538      	push	{r3, r4, r5, lr}
    4cd6:	1c0d      	adds	r5, r1, #0
    4cd8:	1c04      	adds	r4, r0, #0
    4cda:	f7ff ffc9 	bl	4c70 <_ZN4mbed3SPI6aquireEv>
    4cde:	1c29      	adds	r1, r5, #0
    4ce0:	1d20      	adds	r0, r4, #4
    4ce2:	f001 f95f 	bl	5fa4 <spi_master_write>
    4ce6:	bd38      	pop	{r3, r4, r5, pc}

00004ce8 <_ZN4mbed6Serial5_getcEv>:
    4ce8:	b508      	push	{r3, lr}
    4cea:	f000 f8b5 	bl	4e58 <_ZN4mbed10SerialBase10_base_getcEv>
    4cee:	bd08      	pop	{r3, pc}

00004cf0 <_ZThn220_N4mbed6Serial5_getcEv>:
    4cf0:	b408      	push	{r3}
    4cf2:	4b02      	ldr	r3, [pc, #8]	; (4cfc <_ZThn220_N4mbed6Serial5_getcEv+0xc>)
    4cf4:	469c      	mov	ip, r3
    4cf6:	38dc      	subs	r0, #220	; 0xdc
    4cf8:	bc08      	pop	{r3}
    4cfa:	4760      	bx	ip
    4cfc:	00004ce9 	.word	0x00004ce9

00004d00 <_ZN4mbed6Serial5_putcEi>:
    4d00:	b508      	push	{r3, lr}
    4d02:	f000 f8af 	bl	4e64 <_ZN4mbed10SerialBase10_base_putcEi>
    4d06:	bd08      	pop	{r3, pc}

00004d08 <_ZThn220_N4mbed6Serial5_putcEi>:
    4d08:	b408      	push	{r3}
    4d0a:	4b02      	ldr	r3, [pc, #8]	; (4d14 <_ZThn220_N4mbed6Serial5_putcEi+0xc>)
    4d0c:	469c      	mov	ip, r3
    4d0e:	38dc      	subs	r0, #220	; 0xdc
    4d10:	bc08      	pop	{r3}
    4d12:	4760      	bx	ip
    4d14:	00004d01 	.word	0x00004d01

00004d18 <_ZN4mbed6SerialC1E7PinNameS1_PKc>:
    4d18:	b538      	push	{r3, r4, r5, lr}
    4d1a:	1c04      	adds	r4, r0, #0
    4d1c:	1c1d      	adds	r5, r3, #0
    4d1e:	f000 f843 	bl	4da8 <_ZN4mbed10SerialBaseC1E7PinNameS1_>
    4d22:	1c20      	adds	r0, r4, #0
    4d24:	1c29      	adds	r1, r5, #0
    4d26:	30dc      	adds	r0, #220	; 0xdc
    4d28:	f000 f8da 	bl	4ee0 <_ZN4mbed6StreamC1EPKc>
    4d2c:	4b06      	ldr	r3, [pc, #24]	; (4d48 <_ZN4mbed6SerialC1E7PinNameS1_PKc+0x30>)
    4d2e:	1c20      	adds	r0, r4, #0
    4d30:	1c1a      	adds	r2, r3, #0
    4d32:	1c19      	adds	r1, r3, #0
    4d34:	3208      	adds	r2, #8
    4d36:	6022      	str	r2, [r4, #0]
    4d38:	22dc      	movs	r2, #220	; 0xdc
    4d3a:	3120      	adds	r1, #32
    4d3c:	50a1      	str	r1, [r4, r2]
    4d3e:	3354      	adds	r3, #84	; 0x54
    4d40:	3204      	adds	r2, #4
    4d42:	50a3      	str	r3, [r4, r2]
    4d44:	bd38      	pop	{r3, r4, r5, pc}
    4d46:	46c0      	nop			; (mov r8, r8)
    4d48:	0000f1e8 	.word	0x0000f1e8

00004d4c <_ZN4mbed10SerialBase12_irq_handlerEm9SerialIrq>:
    4d4c:	b508      	push	{r3, lr}
    4d4e:	004b      	lsls	r3, r1, #1
    4d50:	1859      	adds	r1, r3, r1
    4d52:	00c9      	lsls	r1, r1, #3
    4d54:	1843      	adds	r3, r0, r1
    4d56:	1c1a      	adds	r2, r3, #0
    4d58:	32b8      	adds	r2, #184	; 0xb8
    4d5a:	6852      	ldr	r2, [r2, #4]
    4d5c:	33a8      	adds	r3, #168	; 0xa8
    4d5e:	681b      	ldr	r3, [r3, #0]
    4d60:	2a00      	cmp	r2, #0
    4d62:	d006      	beq.n	4d72 <_ZN4mbed10SerialBase12_irq_handlerEm9SerialIrq+0x26>
    4d64:	2b00      	cmp	r3, #0
    4d66:	d003      	beq.n	4d70 <_ZN4mbed10SerialBase12_irq_handlerEm9SerialIrq+0x24>
    4d68:	1841      	adds	r1, r0, r1
    4d6a:	31ac      	adds	r1, #172	; 0xac
    4d6c:	1c18      	adds	r0, r3, #0
    4d6e:	4790      	blx	r2
    4d70:	bd08      	pop	{r3, pc}
    4d72:	2b00      	cmp	r3, #0
    4d74:	d0fc      	beq.n	4d70 <_ZN4mbed10SerialBase12_irq_handlerEm9SerialIrq+0x24>
    4d76:	4798      	blx	r3
    4d78:	e7fa      	b.n	4d70 <_ZN4mbed10SerialBase12_irq_handlerEm9SerialIrq+0x24>
    4d7a:	46c0      	nop			; (mov r8, r8)

00004d7c <_ZN6CThunkIN4mbed10SerialBaseEE10trampolineEPS1_PvPMS1_FvS4_E>:
    4d7c:	b510      	push	{r4, lr}
    4d7e:	2800      	cmp	r0, #0
    4d80:	d008      	beq.n	4d94 <_ZN6CThunkIN4mbed10SerialBaseEE10trampolineEPS1_PvPMS1_FvS4_E+0x18>
    4d82:	6814      	ldr	r4, [r2, #0]
    4d84:	6853      	ldr	r3, [r2, #4]
    4d86:	2c00      	cmp	r4, #0
    4d88:	d005      	beq.n	4d96 <_ZN6CThunkIN4mbed10SerialBaseEE10trampolineEPS1_PvPMS1_FvS4_E+0x1a>
    4d8a:	07da      	lsls	r2, r3, #31
    4d8c:	d405      	bmi.n	4d9a <_ZN6CThunkIN4mbed10SerialBaseEE10trampolineEPS1_PvPMS1_FvS4_E+0x1e>
    4d8e:	105b      	asrs	r3, r3, #1
    4d90:	18c0      	adds	r0, r0, r3
    4d92:	47a0      	blx	r4
    4d94:	bd10      	pop	{r4, pc}
    4d96:	07da      	lsls	r2, r3, #31
    4d98:	d5fc      	bpl.n	4d94 <_ZN6CThunkIN4mbed10SerialBaseEE10trampolineEPS1_PvPMS1_FvS4_E+0x18>
    4d9a:	105b      	asrs	r3, r3, #1
    4d9c:	18c0      	adds	r0, r0, r3
    4d9e:	6803      	ldr	r3, [r0, #0]
    4da0:	591c      	ldr	r4, [r3, r4]
    4da2:	47a0      	blx	r4
    4da4:	e7f6      	b.n	4d94 <_ZN6CThunkIN4mbed10SerialBaseEE10trampolineEPS1_PvPMS1_FvS4_E+0x18>
    4da6:	46c0      	nop			; (mov r8, r8)

00004da8 <_ZN4mbed10SerialBaseC1E7PinNameS1_>:
    4da8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4daa:	4647      	mov	r7, r8
    4dac:	b480      	push	{r7}
    4dae:	4b24      	ldr	r3, [pc, #144]	; (4e40 <_ZN4mbed10SerialBaseC1E7PinNameS1_+0x98>)
    4db0:	b082      	sub	sp, #8
    4db2:	6003      	str	r3, [r0, #0]
    4db4:	2500      	movs	r5, #0
    4db6:	1c03      	adds	r3, r0, #0
    4db8:	1c17      	adds	r7, r2, #0
    4dba:	466a      	mov	r2, sp
    4dbc:	1c04      	adds	r4, r0, #0
    4dbe:	9500      	str	r5, [sp, #0]
    4dc0:	9501      	str	r5, [sp, #4]
    4dc2:	3308      	adds	r3, #8
    4dc4:	4688      	mov	r8, r1
    4dc6:	ca03      	ldmia	r2!, {r0, r1}
    4dc8:	c303      	stmia	r3!, {r0, r1}
    4dca:	4b1e      	ldr	r3, [pc, #120]	; (4e44 <_ZN4mbed10SerialBaseC1E7PinNameS1_+0x9c>)
    4dcc:	6123      	str	r3, [r4, #16]
    4dce:	4b1e      	ldr	r3, [pc, #120]	; (4e48 <_ZN4mbed10SerialBaseC1E7PinNameS1_+0xa0>)
    4dd0:	6163      	str	r3, [r4, #20]
    4dd2:	4b1e      	ldr	r3, [pc, #120]	; (4e4c <_ZN4mbed10SerialBaseC1E7PinNameS1_+0xa4>)
    4dd4:	61a3      	str	r3, [r4, #24]
    4dd6:	1c23      	adds	r3, r4, #0
    4dd8:	3308      	adds	r3, #8
    4dda:	6225      	str	r5, [r4, #32]
    4ddc:	61e4      	str	r4, [r4, #28]
    4dde:	6263      	str	r3, [r4, #36]	; 0x24
    4de0:	4b1b      	ldr	r3, [pc, #108]	; (4e50 <_ZN4mbed10SerialBaseC1E7PinNameS1_+0xa8>)
    4de2:	62a3      	str	r3, [r4, #40]	; 0x28
    4de4:	f3bf 8f6f 	isb	sy
    4de8:	f3bf 8f4f 	dsb	sy
    4dec:	235c      	movs	r3, #92	; 0x5c
    4dee:	1c26      	adds	r6, r4, #0
    4df0:	62e5      	str	r5, [r4, #44]	; 0x2c
    4df2:	6425      	str	r5, [r4, #64]	; 0x40
    4df4:	6465      	str	r5, [r4, #68]	; 0x44
    4df6:	65a5      	str	r5, [r4, #88]	; 0x58
    4df8:	3660      	adds	r6, #96	; 0x60
    4dfa:	54e5      	strb	r5, [r4, r3]
    4dfc:	3301      	adds	r3, #1
    4dfe:	54e5      	strb	r5, [r4, r3]
    4e00:	1c30      	adds	r0, r6, #0
    4e02:	2100      	movs	r1, #0
    4e04:	2248      	movs	r2, #72	; 0x48
    4e06:	f005 f857 	bl	9eb8 <memset>
    4e0a:	23a8      	movs	r3, #168	; 0xa8
    4e0c:	2296      	movs	r2, #150	; 0x96
    4e0e:	50e5      	str	r5, [r4, r3]
    4e10:	3314      	adds	r3, #20
    4e12:	50e5      	str	r5, [r4, r3]
    4e14:	3304      	adds	r3, #4
    4e16:	50e5      	str	r5, [r4, r3]
    4e18:	3314      	adds	r3, #20
    4e1a:	50e5      	str	r5, [r4, r3]
    4e1c:	0192      	lsls	r2, r2, #6
    4e1e:	3304      	adds	r3, #4
    4e20:	50e2      	str	r2, [r4, r3]
    4e22:	1c30      	adds	r0, r6, #0
    4e24:	4641      	mov	r1, r8
    4e26:	1c3a      	adds	r2, r7, #0
    4e28:	f7ff fcb2 	bl	4790 <serial_init>
    4e2c:	1c30      	adds	r0, r6, #0
    4e2e:	4909      	ldr	r1, [pc, #36]	; (4e54 <_ZN4mbed10SerialBaseC1E7PinNameS1_+0xac>)
    4e30:	1c22      	adds	r2, r4, #0
    4e32:	f7ff fd89 	bl	4948 <serial_irq_handler>
    4e36:	1c20      	adds	r0, r4, #0
    4e38:	b002      	add	sp, #8
    4e3a:	bc04      	pop	{r2}
    4e3c:	4690      	mov	r8, r2
    4e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4e40:	0000f250 	.word	0x0000f250
    4e44:	2404b51f 	.word	0x2404b51f
    4e48:	cc0f447c 	.word	0xcc0f447c
    4e4c:	bd1f4798 	.word	0xbd1f4798
    4e50:	00004d7d 	.word	0x00004d7d
    4e54:	00004d4d 	.word	0x00004d4d

00004e58 <_ZN4mbed10SerialBase10_base_getcEv>:
    4e58:	b508      	push	{r3, lr}
    4e5a:	3060      	adds	r0, #96	; 0x60
    4e5c:	f7ff fdd6 	bl	4a0c <serial_getc>
    4e60:	bd08      	pop	{r3, pc}
    4e62:	46c0      	nop			; (mov r8, r8)

00004e64 <_ZN4mbed10SerialBase10_base_putcEi>:
    4e64:	b510      	push	{r4, lr}
    4e66:	1c0c      	adds	r4, r1, #0
    4e68:	3060      	adds	r0, #96	; 0x60
    4e6a:	f7ff fdfb 	bl	4a64 <serial_putc>
    4e6e:	1c20      	adds	r0, r4, #0
    4e70:	bd10      	pop	{r4, pc}
    4e72:	46c0      	nop			; (mov r8, r8)

00004e74 <_ZN4mbed6Stream5closeEv>:
    4e74:	2000      	movs	r0, #0
    4e76:	4770      	bx	lr

00004e78 <_ZN4mbed6Stream5writeEPKvj>:
    4e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4e7a:	188e      	adds	r6, r1, r2
    4e7c:	1c05      	adds	r5, r0, #0
    4e7e:	1c0f      	adds	r7, r1, #0
    4e80:	1e0c      	subs	r4, r1, #0
    4e82:	42b4      	cmp	r4, r6
    4e84:	d102      	bne.n	4e8c <_ZN4mbed6Stream5writeEPKvj+0x14>
    4e86:	e00a      	b.n	4e9e <_ZN4mbed6Stream5writeEPKvj+0x26>
    4e88:	42a6      	cmp	r6, r4
    4e8a:	d008      	beq.n	4e9e <_ZN4mbed6Stream5writeEPKvj+0x26>
    4e8c:	3401      	adds	r4, #1
    4e8e:	682b      	ldr	r3, [r5, #0]
    4e90:	1e62      	subs	r2, r4, #1
    4e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4e94:	7811      	ldrb	r1, [r2, #0]
    4e96:	1c28      	adds	r0, r5, #0
    4e98:	4798      	blx	r3
    4e9a:	1c43      	adds	r3, r0, #1
    4e9c:	d1f4      	bne.n	4e88 <_ZN4mbed6Stream5writeEPKvj+0x10>
    4e9e:	1be0      	subs	r0, r4, r7
    4ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4ea2:	46c0      	nop			; (mov r8, r8)

00004ea4 <_ZN4mbed6Stream4readEPvj>:
    4ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4ea6:	188e      	adds	r6, r1, r2
    4ea8:	1c05      	adds	r5, r0, #0
    4eaa:	1c0f      	adds	r7, r1, #0
    4eac:	1e0c      	subs	r4, r1, #0
    4eae:	42b4      	cmp	r4, r6
    4eb0:	d105      	bne.n	4ebe <_ZN4mbed6Stream4readEPvj+0x1a>
    4eb2:	e00a      	b.n	4eca <_ZN4mbed6Stream4readEPvj+0x26>
    4eb4:	3401      	adds	r4, #1
    4eb6:	1e63      	subs	r3, r4, #1
    4eb8:	7018      	strb	r0, [r3, #0]
    4eba:	42a6      	cmp	r6, r4
    4ebc:	d005      	beq.n	4eca <_ZN4mbed6Stream4readEPvj+0x26>
    4ebe:	682b      	ldr	r3, [r5, #0]
    4ec0:	1c28      	adds	r0, r5, #0
    4ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4ec4:	4798      	blx	r3
    4ec6:	1c43      	adds	r3, r0, #1
    4ec8:	d1f4      	bne.n	4eb4 <_ZN4mbed6Stream4readEPvj+0x10>
    4eca:	1be0      	subs	r0, r4, r7
    4ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4ece:	46c0      	nop			; (mov r8, r8)

00004ed0 <_ZN4mbed6Stream5lseekEli>:
    4ed0:	2000      	movs	r0, #0
    4ed2:	4770      	bx	lr

00004ed4 <_ZN4mbed6Stream6isattyEv>:
    4ed4:	2000      	movs	r0, #0
    4ed6:	4770      	bx	lr

00004ed8 <_ZN4mbed6Stream5fsyncEv>:
    4ed8:	2000      	movs	r0, #0
    4eda:	4770      	bx	lr

00004edc <_ZN4mbed6Stream4flenEv>:
    4edc:	2000      	movs	r0, #0
    4ede:	4770      	bx	lr

00004ee0 <_ZN4mbed6StreamC1EPKc>:
    4ee0:	b510      	push	{r4, lr}
    4ee2:	1c04      	adds	r4, r0, #0
    4ee4:	b084      	sub	sp, #16
    4ee6:	f001 f951 	bl	618c <_ZN4mbed8FileLikeC1EPKc>
    4eea:	4b0b      	ldr	r3, [pc, #44]	; (4f18 <_ZN4mbed6StreamC1EPKc+0x38>)
    4eec:	a801      	add	r0, sp, #4
    4eee:	1c1a      	adds	r2, r3, #0
    4ef0:	333c      	adds	r3, #60	; 0x3c
    4ef2:	6063      	str	r3, [r4, #4]
    4ef4:	2300      	movs	r3, #0
    4ef6:	3208      	adds	r2, #8
    4ef8:	6163      	str	r3, [r4, #20]
    4efa:	6022      	str	r2, [r4, #0]
    4efc:	4907      	ldr	r1, [pc, #28]	; (4f1c <_ZN4mbed6StreamC1EPKc+0x3c>)
    4efe:	1c22      	adds	r2, r4, #0
    4f00:	f006 fab2 	bl	b468 <siprintf>
    4f04:	4906      	ldr	r1, [pc, #24]	; (4f20 <_ZN4mbed6StreamC1EPKc+0x40>)
    4f06:	a801      	add	r0, sp, #4
    4f08:	f004 fe34 	bl	9b74 <fopen>
    4f0c:	6160      	str	r0, [r4, #20]
    4f0e:	f7ff f861 	bl	3fd4 <_ZN4mbed26mbed_set_unbuffered_streamEP7__sFILE>
    4f12:	1c20      	adds	r0, r4, #0
    4f14:	b004      	add	sp, #16
    4f16:	bd10      	pop	{r4, pc}
    4f18:	0000f258 	.word	0x0000f258
    4f1c:	0000ef14 	.word	0x0000ef14
    4f20:	0000f29c 	.word	0x0000f29c

00004f24 <_ZN4mbed6StreamD1Ev>:
    4f24:	4b07      	ldr	r3, [pc, #28]	; (4f44 <_ZN4mbed6StreamD1Ev+0x20>)
    4f26:	b510      	push	{r4, lr}
    4f28:	1c1a      	adds	r2, r3, #0
    4f2a:	1c04      	adds	r4, r0, #0
    4f2c:	3208      	adds	r2, #8
    4f2e:	333c      	adds	r3, #60	; 0x3c
    4f30:	6002      	str	r2, [r0, #0]
    4f32:	6043      	str	r3, [r0, #4]
    4f34:	6940      	ldr	r0, [r0, #20]
    4f36:	f004 fc57 	bl	97e8 <fclose>
    4f3a:	1c20      	adds	r0, r4, #0
    4f3c:	f001 f93a 	bl	61b4 <_ZN4mbed8FileLikeD1Ev>
    4f40:	1c20      	adds	r0, r4, #0
    4f42:	bd10      	pop	{r4, pc}
    4f44:	0000f258 	.word	0x0000f258

00004f48 <_ZN4mbed6Stream4putcEi>:
    4f48:	b538      	push	{r3, r4, r5, lr}
    4f4a:	1c0d      	adds	r5, r1, #0
    4f4c:	1c04      	adds	r4, r0, #0
    4f4e:	6940      	ldr	r0, [r0, #20]
    4f50:	f004 fd0a 	bl	9968 <fflush>
    4f54:	1c28      	adds	r0, r5, #0
    4f56:	6961      	ldr	r1, [r4, #20]
    4f58:	f004 fe3e 	bl	9bd8 <fputc>
    4f5c:	bd38      	pop	{r3, r4, r5, pc}
    4f5e:	46c0      	nop			; (mov r8, r8)

00004f60 <_ZN4mbed6Stream6printfEPKcz>:
    4f60:	b40e      	push	{r1, r2, r3}
    4f62:	b530      	push	{r4, r5, lr}
    4f64:	1c04      	adds	r4, r0, #0
    4f66:	b082      	sub	sp, #8
    4f68:	ab05      	add	r3, sp, #20
    4f6a:	cb20      	ldmia	r3!, {r5}
    4f6c:	6940      	ldr	r0, [r0, #20]
    4f6e:	9301      	str	r3, [sp, #4]
    4f70:	f004 fcfa 	bl	9968 <fflush>
    4f74:	6960      	ldr	r0, [r4, #20]
    4f76:	1c29      	adds	r1, r5, #0
    4f78:	9a01      	ldr	r2, [sp, #4]
    4f7a:	f005 f97b 	bl	a274 <vfiprintf>
    4f7e:	b002      	add	sp, #8
    4f80:	bc30      	pop	{r4, r5}
    4f82:	bc08      	pop	{r3}
    4f84:	b003      	add	sp, #12
    4f86:	4718      	bx	r3

00004f88 <mbed_assert_internal>:
    4f88:	b538      	push	{r3, r4, r5, lr}
    4f8a:	1c05      	adds	r5, r0, #0
    4f8c:	1c0c      	adds	r4, r1, #0
    4f8e:	1c13      	adds	r3, r2, #0
    4f90:	1c29      	adds	r1, r5, #0
    4f92:	4802      	ldr	r0, [pc, #8]	; (4f9c <mbed_assert_internal+0x14>)
    4f94:	1c22      	adds	r2, r4, #0
    4f96:	f000 f803 	bl	4fa0 <error>
    4f9a:	bd38      	pop	{r3, r4, r5, pc}
    4f9c:	0000f2a0 	.word	0x0000f2a0

00004fa0 <error>:
    4fa0:	b40f      	push	{r0, r1, r2, r3}
    4fa2:	2001      	movs	r0, #1
    4fa4:	b508      	push	{r3, lr}
    4fa6:	f004 fbb1 	bl	970c <exit>
    4faa:	46c0      	nop			; (mov r8, r8)

00004fac <gpio_init_out>:
    4fac:	b538      	push	{r3, r4, r5, lr}
    4fae:	1c0d      	adds	r5, r1, #0
    4fb0:	1c04      	adds	r4, r0, #0
    4fb2:	f000 fa8b 	bl	54cc <gpio_init>
    4fb6:	1c6b      	adds	r3, r5, #1
    4fb8:	d00e      	beq.n	4fd8 <gpio_init_out+0x2c>
    4fba:	2300      	movs	r3, #0
    4fbc:	56e3      	ldrsb	r3, [r4, r3]
    4fbe:	3301      	adds	r3, #1
    4fc0:	d00b      	beq.n	4fda <gpio_init_out+0x2e>
    4fc2:	68e3      	ldr	r3, [r4, #12]
    4fc4:	6862      	ldr	r2, [r4, #4]
    4fc6:	1c20      	adds	r0, r4, #0
    4fc8:	2101      	movs	r1, #1
    4fca:	601a      	str	r2, [r3, #0]
    4fcc:	f000 fae6 	bl	559c <gpio_dir>
    4fd0:	1c20      	adds	r0, r4, #0
    4fd2:	2100      	movs	r1, #0
    4fd4:	f000 faba 	bl	554c <gpio_mode>
    4fd8:	bd38      	pop	{r3, r4, r5, pc}
    4fda:	4803      	ldr	r0, [pc, #12]	; (4fe8 <gpio_init_out+0x3c>)
    4fdc:	4903      	ldr	r1, [pc, #12]	; (4fec <gpio_init_out+0x40>)
    4fde:	2228      	movs	r2, #40	; 0x28
    4fe0:	f7ff ffd2 	bl	4f88 <mbed_assert_internal>
    4fe4:	e7ed      	b.n	4fc2 <gpio_init_out+0x16>
    4fe6:	46c0      	nop			; (mov r8, r8)
    4fe8:	0000ead8 	.word	0x0000ead8
    4fec:	0000f2d4 	.word	0x0000f2d4

00004ff0 <pinmap_find_peripheral>:
    4ff0:	e002      	b.n	4ff8 <pinmap_find_peripheral+0x8>
    4ff2:	4283      	cmp	r3, r0
    4ff4:	d006      	beq.n	5004 <pinmap_find_peripheral+0x14>
    4ff6:	310c      	adds	r1, #12
    4ff8:	2300      	movs	r3, #0
    4ffa:	56cb      	ldrsb	r3, [r1, r3]
    4ffc:	1c5a      	adds	r2, r3, #1
    4ffe:	d1f8      	bne.n	4ff2 <pinmap_find_peripheral+0x2>
    5000:	1c18      	adds	r0, r3, #0
    5002:	4770      	bx	lr
    5004:	6848      	ldr	r0, [r1, #4]
    5006:	e7fc      	b.n	5002 <pinmap_find_peripheral+0x12>

00005008 <pinmap_peripheral>:
    5008:	1c02      	adds	r2, r0, #0
    500a:	b508      	push	{r3, lr}
    500c:	1c53      	adds	r3, r2, #1
    500e:	d103      	bne.n	5018 <pinmap_peripheral+0x10>
    5010:	e00b      	b.n	502a <pinmap_peripheral+0x22>
    5012:	429a      	cmp	r2, r3
    5014:	d00a      	beq.n	502c <pinmap_peripheral+0x24>
    5016:	310c      	adds	r1, #12
    5018:	2300      	movs	r3, #0
    501a:	56cb      	ldrsb	r3, [r1, r3]
    501c:	1c58      	adds	r0, r3, #1
    501e:	d1f8      	bne.n	5012 <pinmap_peripheral+0xa>
    5020:	4804      	ldr	r0, [pc, #16]	; (5034 <pinmap_peripheral+0x2c>)
    5022:	f7ff ffbd 	bl	4fa0 <error>
    5026:	2001      	movs	r0, #1
    5028:	4240      	negs	r0, r0
    502a:	bd08      	pop	{r3, pc}
    502c:	6848      	ldr	r0, [r1, #4]
    502e:	1c43      	adds	r3, r0, #1
    5030:	d1fb      	bne.n	502a <pinmap_peripheral+0x22>
    5032:	e7f5      	b.n	5020 <pinmap_peripheral+0x18>
    5034:	0000f374 	.word	0x0000f374

00005038 <pinmap_function>:
    5038:	1c02      	adds	r2, r0, #0
    503a:	b508      	push	{r3, lr}
    503c:	1c53      	adds	r3, r2, #1
    503e:	d103      	bne.n	5048 <pinmap_function+0x10>
    5040:	e00b      	b.n	505a <pinmap_function+0x22>
    5042:	429a      	cmp	r2, r3
    5044:	d00a      	beq.n	505c <pinmap_function+0x24>
    5046:	310c      	adds	r1, #12
    5048:	2300      	movs	r3, #0
    504a:	56cb      	ldrsb	r3, [r1, r3]
    504c:	1c58      	adds	r0, r3, #1
    504e:	d1f8      	bne.n	5042 <pinmap_function+0xa>
    5050:	4804      	ldr	r0, [pc, #16]	; (5064 <pinmap_function+0x2c>)
    5052:	f7ff ffa5 	bl	4fa0 <error>
    5056:	2001      	movs	r0, #1
    5058:	4240      	negs	r0, r0
    505a:	bd08      	pop	{r3, pc}
    505c:	6888      	ldr	r0, [r1, #8]
    505e:	1c43      	adds	r3, r0, #1
    5060:	d1fb      	bne.n	505a <pinmap_function+0x22>
    5062:	e7f5      	b.n	5050 <pinmap_function+0x18>
    5064:	0000f394 	.word	0x0000f394

00005068 <wait_us>:
    5068:	b538      	push	{r3, r4, r5, lr}
    506a:	1c05      	adds	r5, r0, #0
    506c:	f000 fcbc 	bl	59e8 <us_ticker_read>
    5070:	1c04      	adds	r4, r0, #0
    5072:	f000 fcb9 	bl	59e8 <us_ticker_read>
    5076:	1b00      	subs	r0, r0, r4
    5078:	42a8      	cmp	r0, r5
    507a:	d3fa      	bcc.n	5072 <wait_us+0xa>
    507c:	bd38      	pop	{r3, r4, r5, pc}
    507e:	46c0      	nop			; (mov r8, r8)

00005080 <wait_ms>:
    5080:	b508      	push	{r3, lr}
    5082:	23fa      	movs	r3, #250	; 0xfa
    5084:	009b      	lsls	r3, r3, #2
    5086:	4358      	muls	r0, r3
    5088:	f7ff ffee 	bl	5068 <wait_us>
    508c:	bd08      	pop	{r3, pc}
    508e:	46c0      	nop			; (mov r8, r8)

00005090 <_sercom_get_sync_baud_val>:
    5090:	b510      	push	{r4, lr}
    5092:	0849      	lsrs	r1, r1, #1
    5094:	2340      	movs	r3, #64	; 0x40
    5096:	2400      	movs	r4, #0
    5098:	4281      	cmp	r1, r0
    509a:	d202      	bcs.n	50a2 <_sercom_get_sync_baud_val+0x12>
    509c:	1c18      	adds	r0, r3, #0
    509e:	bd10      	pop	{r4, pc}
    50a0:	1c1c      	adds	r4, r3, #0
    50a2:	1c63      	adds	r3, r4, #1
    50a4:	1a09      	subs	r1, r1, r0
    50a6:	b29b      	uxth	r3, r3
    50a8:	4288      	cmp	r0, r1
    50aa:	d9f9      	bls.n	50a0 <_sercom_get_sync_baud_val+0x10>
    50ac:	2340      	movs	r3, #64	; 0x40
    50ae:	2cff      	cmp	r4, #255	; 0xff
    50b0:	d8f4      	bhi.n	509c <_sercom_get_sync_baud_val+0xc>
    50b2:	8014      	strh	r4, [r2, #0]
    50b4:	2300      	movs	r3, #0
    50b6:	e7f1      	b.n	509c <_sercom_get_sync_baud_val+0xc>

000050b8 <_sercom_get_async_baud_val>:
    50b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    50ba:	4656      	mov	r6, sl
    50bc:	464d      	mov	r5, r9
    50be:	4644      	mov	r4, r8
    50c0:	465f      	mov	r7, fp
    50c2:	b4f0      	push	{r4, r5, r6, r7}
    50c4:	1c04      	adds	r4, r0, #0
    50c6:	1c25      	adds	r5, r4, #0
    50c8:	b087      	sub	sp, #28
    50ca:	a810      	add	r0, sp, #64	; 0x40
    50cc:	7806      	ldrb	r6, [r0, #0]
    50ce:	2040      	movs	r0, #64	; 0x40
    50d0:	4375      	muls	r5, r6
    50d2:	428d      	cmp	r5, r1
    50d4:	d906      	bls.n	50e4 <_sercom_get_async_baud_val+0x2c>
    50d6:	b007      	add	sp, #28
    50d8:	bc3c      	pop	{r2, r3, r4, r5}
    50da:	4690      	mov	r8, r2
    50dc:	4699      	mov	r9, r3
    50de:	46a2      	mov	sl, r4
    50e0:	46ab      	mov	fp, r5
    50e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    50e4:	9204      	str	r2, [sp, #16]
    50e6:	1c0d      	adds	r5, r1, #0
    50e8:	1c22      	adds	r2, r4, #0
    50ea:	2b00      	cmp	r3, #0
    50ec:	d13f      	bne.n	516e <_sercom_get_async_baud_val+0xb6>
    50ee:	1c30      	adds	r0, r6, #0
    50f0:	2100      	movs	r1, #0
    50f2:	f001 fcc1 	bl	6a78 <__aeabi_lmul>
    50f6:	2300      	movs	r3, #0
    50f8:	4683      	mov	fp, r0
    50fa:	213f      	movs	r1, #63	; 0x3f
    50fc:	2001      	movs	r0, #1
    50fe:	469c      	mov	ip, r3
    5100:	469a      	mov	sl, r3
    5102:	1c2e      	adds	r6, r5, #0
    5104:	2700      	movs	r7, #0
    5106:	2200      	movs	r2, #0
    5108:	2300      	movs	r3, #0
    510a:	4680      	mov	r8, r0
    510c:	1c0c      	adds	r4, r1, #0
    510e:	e024      	b.n	515a <_sercom_get_async_baud_val+0xa2>
    5110:	4641      	mov	r1, r8
    5112:	40a9      	lsls	r1, r5
    5114:	1c0d      	adds	r5, r1, #0
    5116:	4641      	mov	r1, r8
    5118:	40a1      	lsls	r1, r4
    511a:	1c10      	adds	r0, r2, #0
    511c:	4689      	mov	r9, r1
    511e:	1c19      	adds	r1, r3, #0
    5120:	1880      	adds	r0, r0, r2
    5122:	4159      	adcs	r1, r3
    5124:	1c0b      	adds	r3, r1, #0
    5126:	1c02      	adds	r2, r0, #0
    5128:	4659      	mov	r1, fp
    512a:	9200      	str	r2, [sp, #0]
    512c:	9301      	str	r3, [sp, #4]
    512e:	4229      	tst	r1, r5
    5130:	d003      	beq.n	513a <_sercom_get_async_baud_val+0x82>
    5132:	4640      	mov	r0, r8
    5134:	4310      	orrs	r0, r2
    5136:	1c02      	adds	r2, r0, #0
    5138:	9b01      	ldr	r3, [sp, #4]
    513a:	429f      	cmp	r7, r3
    513c:	d80b      	bhi.n	5156 <_sercom_get_async_baud_val+0x9e>
    513e:	d101      	bne.n	5144 <_sercom_get_async_baud_val+0x8c>
    5140:	4296      	cmp	r6, r2
    5142:	d808      	bhi.n	5156 <_sercom_get_async_baud_val+0x9e>
    5144:	4661      	mov	r1, ip
    5146:	4648      	mov	r0, r9
    5148:	4301      	orrs	r1, r0
    514a:	4650      	mov	r0, sl
    514c:	4328      	orrs	r0, r5
    514e:	1b92      	subs	r2, r2, r6
    5150:	41bb      	sbcs	r3, r7
    5152:	468c      	mov	ip, r1
    5154:	4682      	mov	sl, r0
    5156:	3c01      	subs	r4, #1
    5158:	d310      	bcc.n	517c <_sercom_get_async_baud_val+0xc4>
    515a:	2120      	movs	r1, #32
    515c:	4249      	negs	r1, r1
    515e:	1865      	adds	r5, r4, r1
    5160:	d5d6      	bpl.n	5110 <_sercom_get_async_baud_val+0x58>
    5162:	2120      	movs	r1, #32
    5164:	1b0d      	subs	r5, r1, r4
    5166:	4641      	mov	r1, r8
    5168:	40e9      	lsrs	r1, r5
    516a:	1c0d      	adds	r5, r1, #0
    516c:	e7d3      	b.n	5116 <_sercom_get_async_baud_val+0x5e>
    516e:	2400      	movs	r4, #0
    5170:	2b01      	cmp	r3, #1
    5172:	d007      	beq.n	5184 <_sercom_get_async_baud_val+0xcc>
    5174:	9b04      	ldr	r3, [sp, #16]
    5176:	2000      	movs	r0, #0
    5178:	801c      	strh	r4, [r3, #0]
    517a:	e7ac      	b.n	50d6 <_sercom_get_async_baud_val+0x1e>
    517c:	4663      	mov	r3, ip
    517e:	425c      	negs	r4, r3
    5180:	0c24      	lsrs	r4, r4, #16
    5182:	e7f7      	b.n	5174 <_sercom_get_async_baud_val+0xbc>
    5184:	0f4b      	lsrs	r3, r1, #29
    5186:	1c1c      	adds	r4, r3, #0
    5188:	00cb      	lsls	r3, r1, #3
    518a:	4698      	mov	r8, r3
    518c:	1c30      	adds	r0, r6, #0
    518e:	2300      	movs	r3, #0
    5190:	2100      	movs	r1, #0
    5192:	f001 fc71 	bl	6a78 <__aeabi_lmul>
    5196:	2300      	movs	r3, #0
    5198:	469c      	mov	ip, r3
    519a:	3320      	adds	r3, #32
    519c:	469b      	mov	fp, r3
    519e:	4663      	mov	r3, ip
    51a0:	46a1      	mov	r9, r4
    51a2:	9000      	str	r0, [sp, #0]
    51a4:	9101      	str	r1, [sp, #4]
    51a6:	9303      	str	r3, [sp, #12]
    51a8:	466b      	mov	r3, sp
    51aa:	7b1b      	ldrb	r3, [r3, #12]
    51ac:	2000      	movs	r0, #0
    51ae:	9305      	str	r3, [sp, #20]
    51b0:	2300      	movs	r3, #0
    51b2:	2100      	movs	r1, #0
    51b4:	469c      	mov	ip, r3
    51b6:	223f      	movs	r2, #63	; 0x3f
    51b8:	e027      	b.n	520a <_sercom_get_async_baud_val+0x152>
    51ba:	2401      	movs	r4, #1
    51bc:	409c      	lsls	r4, r3
    51be:	1c23      	adds	r3, r4, #0
    51c0:	2701      	movs	r7, #1
    51c2:	4646      	mov	r6, r8
    51c4:	4097      	lsls	r7, r2
    51c6:	403e      	ands	r6, r7
    51c8:	1c04      	adds	r4, r0, #0
    51ca:	1c0d      	adds	r5, r1, #0
    51cc:	46b2      	mov	sl, r6
    51ce:	464e      	mov	r6, r9
    51d0:	1824      	adds	r4, r4, r0
    51d2:	414d      	adcs	r5, r1
    51d4:	4033      	ands	r3, r6
    51d6:	4656      	mov	r6, sl
    51d8:	1c20      	adds	r0, r4, #0
    51da:	1c29      	adds	r1, r5, #0
    51dc:	4333      	orrs	r3, r6
    51de:	d004      	beq.n	51ea <_sercom_get_async_baud_val+0x132>
    51e0:	2101      	movs	r1, #1
    51e2:	1c23      	adds	r3, r4, #0
    51e4:	430b      	orrs	r3, r1
    51e6:	1c18      	adds	r0, r3, #0
    51e8:	1c29      	adds	r1, r5, #0
    51ea:	9b01      	ldr	r3, [sp, #4]
    51ec:	428b      	cmp	r3, r1
    51ee:	d80a      	bhi.n	5206 <_sercom_get_async_baud_val+0x14e>
    51f0:	d102      	bne.n	51f8 <_sercom_get_async_baud_val+0x140>
    51f2:	9b00      	ldr	r3, [sp, #0]
    51f4:	4283      	cmp	r3, r0
    51f6:	d806      	bhi.n	5206 <_sercom_get_async_baud_val+0x14e>
    51f8:	9b00      	ldr	r3, [sp, #0]
    51fa:	9c01      	ldr	r4, [sp, #4]
    51fc:	1ac0      	subs	r0, r0, r3
    51fe:	41a1      	sbcs	r1, r4
    5200:	4663      	mov	r3, ip
    5202:	433b      	orrs	r3, r7
    5204:	469c      	mov	ip, r3
    5206:	3a01      	subs	r2, #1
    5208:	d309      	bcc.n	521e <_sercom_get_async_baud_val+0x166>
    520a:	2320      	movs	r3, #32
    520c:	425b      	negs	r3, r3
    520e:	18d3      	adds	r3, r2, r3
    5210:	d5d3      	bpl.n	51ba <_sercom_get_async_baud_val+0x102>
    5212:	465b      	mov	r3, fp
    5214:	2401      	movs	r4, #1
    5216:	1a9b      	subs	r3, r3, r2
    5218:	40dc      	lsrs	r4, r3
    521a:	1c23      	adds	r3, r4, #0
    521c:	e7d0      	b.n	51c0 <_sercom_get_async_baud_val+0x108>
    521e:	4661      	mov	r1, ip
    5220:	9a03      	ldr	r2, [sp, #12]
    5222:	1a8b      	subs	r3, r1, r2
    5224:	4907      	ldr	r1, [pc, #28]	; (5244 <_sercom_get_async_baud_val+0x18c>)
    5226:	08db      	lsrs	r3, r3, #3
    5228:	428b      	cmp	r3, r1
    522a:	d906      	bls.n	523a <_sercom_get_async_baud_val+0x182>
    522c:	1c13      	adds	r3, r2, #0
    522e:	3301      	adds	r3, #1
    5230:	9303      	str	r3, [sp, #12]
    5232:	2b08      	cmp	r3, #8
    5234:	d1b8      	bne.n	51a8 <_sercom_get_async_baud_val+0xf0>
    5236:	2040      	movs	r0, #64	; 0x40
    5238:	e74d      	b.n	50d6 <_sercom_get_async_baud_val+0x1e>
    523a:	9a05      	ldr	r2, [sp, #20]
    523c:	0354      	lsls	r4, r2, #13
    523e:	431c      	orrs	r4, r3
    5240:	b2a4      	uxth	r4, r4
    5242:	e797      	b.n	5174 <_sercom_get_async_baud_val+0xbc>
    5244:	00001fff 	.word	0x00001fff

00005248 <sercom_set_gclk_generator>:
    5248:	b530      	push	{r4, r5, lr}
    524a:	4c0e      	ldr	r4, [pc, #56]	; (5284 <sercom_set_gclk_generator+0x3c>)
    524c:	b083      	sub	sp, #12
    524e:	7823      	ldrb	r3, [r4, #0]
    5250:	1c05      	adds	r5, r0, #0
    5252:	2b00      	cmp	r3, #0
    5254:	d006      	beq.n	5264 <sercom_set_gclk_generator+0x1c>
    5256:	2900      	cmp	r1, #0
    5258:	d104      	bne.n	5264 <sercom_set_gclk_generator+0x1c>
    525a:	7863      	ldrb	r3, [r4, #1]
    525c:	4283      	cmp	r3, r0
    525e:	d00f      	beq.n	5280 <sercom_set_gclk_generator+0x38>
    5260:	201d      	movs	r0, #29
    5262:	e00b      	b.n	527c <sercom_set_gclk_generator+0x34>
    5264:	a901      	add	r1, sp, #4
    5266:	2013      	movs	r0, #19
    5268:	700d      	strb	r5, [r1, #0]
    526a:	f7ff f91d 	bl	44a8 <system_gclk_chan_set_config>
    526e:	2013      	movs	r0, #19
    5270:	f7ff f8dc 	bl	442c <system_gclk_chan_enable>
    5274:	2301      	movs	r3, #1
    5276:	2000      	movs	r0, #0
    5278:	7065      	strb	r5, [r4, #1]
    527a:	7023      	strb	r3, [r4, #0]
    527c:	b003      	add	sp, #12
    527e:	bd30      	pop	{r4, r5, pc}
    5280:	2000      	movs	r0, #0
    5282:	e7fb      	b.n	527c <sercom_set_gclk_generator+0x34>
    5284:	200046e0 	.word	0x200046e0

00005288 <_sercom_get_sercom_inst_index>:
    5288:	b570      	push	{r4, r5, r6, lr}
    528a:	b086      	sub	sp, #24
    528c:	4669      	mov	r1, sp
    528e:	4b09      	ldr	r3, [pc, #36]	; (52b4 <_sercom_get_sercom_inst_index+0x2c>)
    5290:	466a      	mov	r2, sp
    5292:	cb70      	ldmia	r3!, {r4, r5, r6}
    5294:	c170      	stmia	r1!, {r4, r5, r6}
    5296:	cb70      	ldmia	r3!, {r4, r5, r6}
    5298:	c170      	stmia	r1!, {r4, r5, r6}
    529a:	2300      	movs	r3, #0
    529c:	0099      	lsls	r1, r3, #2
    529e:	5851      	ldr	r1, [r2, r1]
    52a0:	4281      	cmp	r1, r0
    52a2:	d005      	beq.n	52b0 <_sercom_get_sercom_inst_index+0x28>
    52a4:	3301      	adds	r3, #1
    52a6:	2b06      	cmp	r3, #6
    52a8:	d1f8      	bne.n	529c <_sercom_get_sercom_inst_index+0x14>
    52aa:	2000      	movs	r0, #0
    52ac:	b006      	add	sp, #24
    52ae:	bd70      	pop	{r4, r5, r6, pc}
    52b0:	b2d8      	uxtb	r0, r3
    52b2:	e7fb      	b.n	52ac <_sercom_get_sercom_inst_index+0x24>
    52b4:	0000f5c4 	.word	0x0000f5c4

000052b8 <system_clock_source_get_hz>:
    52b8:	b510      	push	{r4, lr}
    52ba:	2808      	cmp	r0, #8
    52bc:	d82c      	bhi.n	5318 <system_clock_source_get_hz+0x60>
    52be:	4b1b      	ldr	r3, [pc, #108]	; (532c <system_clock_source_get_hz+0x74>)
    52c0:	0080      	lsls	r0, r0, #2
    52c2:	581b      	ldr	r3, [r3, r0]
    52c4:	469f      	mov	pc, r3
    52c6:	2080      	movs	r0, #128	; 0x80
    52c8:	0200      	lsls	r0, r0, #8
    52ca:	bd10      	pop	{r4, pc}
    52cc:	4b18      	ldr	r3, [pc, #96]	; (5330 <system_clock_source_get_hz+0x78>)
    52ce:	6958      	ldr	r0, [r3, #20]
    52d0:	e7fb      	b.n	52ca <system_clock_source_get_hz+0x12>
    52d2:	4b18      	ldr	r3, [pc, #96]	; (5334 <system_clock_source_get_hz+0x7c>)
    52d4:	6a18      	ldr	r0, [r3, #32]
    52d6:	4b18      	ldr	r3, [pc, #96]	; (5338 <system_clock_source_get_hz+0x80>)
    52d8:	0580      	lsls	r0, r0, #22
    52da:	0f80      	lsrs	r0, r0, #30
    52dc:	40c3      	lsrs	r3, r0
    52de:	1c18      	adds	r0, r3, #0
    52e0:	e7f3      	b.n	52ca <system_clock_source_get_hz+0x12>
    52e2:	2002      	movs	r0, #2
    52e4:	4c12      	ldr	r4, [pc, #72]	; (5330 <system_clock_source_get_hz+0x78>)
    52e6:	6823      	ldr	r3, [r4, #0]
    52e8:	4018      	ands	r0, r3
    52ea:	d0ee      	beq.n	52ca <system_clock_source_get_hz+0x12>
    52ec:	2210      	movs	r2, #16
    52ee:	4911      	ldr	r1, [pc, #68]	; (5334 <system_clock_source_get_hz+0x7c>)
    52f0:	68cb      	ldr	r3, [r1, #12]
    52f2:	421a      	tst	r2, r3
    52f4:	d0fc      	beq.n	52f0 <system_clock_source_get_hz+0x38>
    52f6:	6823      	ldr	r3, [r4, #0]
    52f8:	075b      	lsls	r3, r3, #29
    52fa:	d40f      	bmi.n	531c <system_clock_source_get_hz+0x64>
    52fc:	480f      	ldr	r0, [pc, #60]	; (533c <system_clock_source_get_hz+0x84>)
    52fe:	e7e4      	b.n	52ca <system_clock_source_get_hz+0x12>
    5300:	4b0b      	ldr	r3, [pc, #44]	; (5330 <system_clock_source_get_hz+0x78>)
    5302:	6918      	ldr	r0, [r3, #16]
    5304:	e7e1      	b.n	52ca <system_clock_source_get_hz+0x12>
    5306:	2350      	movs	r3, #80	; 0x50
    5308:	4a0a      	ldr	r2, [pc, #40]	; (5334 <system_clock_source_get_hz+0x7c>)
    530a:	2000      	movs	r0, #0
    530c:	5cd3      	ldrb	r3, [r2, r3]
    530e:	075b      	lsls	r3, r3, #29
    5310:	d5db      	bpl.n	52ca <system_clock_source_get_hz+0x12>
    5312:	4b07      	ldr	r3, [pc, #28]	; (5330 <system_clock_source_get_hz+0x78>)
    5314:	68d8      	ldr	r0, [r3, #12]
    5316:	e7d8      	b.n	52ca <system_clock_source_get_hz+0x12>
    5318:	2000      	movs	r0, #0
    531a:	e7d6      	b.n	52ca <system_clock_source_get_hz+0x12>
    531c:	2000      	movs	r0, #0
    531e:	f7ff f8e3 	bl	44e8 <system_gclk_chan_get_hz>
    5322:	68a3      	ldr	r3, [r4, #8]
    5324:	041b      	lsls	r3, r3, #16
    5326:	0c1b      	lsrs	r3, r3, #16
    5328:	4358      	muls	r0, r3
    532a:	e7ce      	b.n	52ca <system_clock_source_get_hz+0x12>
    532c:	0000f5dc 	.word	0x0000f5dc
    5330:	200046e4 	.word	0x200046e4
    5334:	40000800 	.word	0x40000800
    5338:	007a1200 	.word	0x007a1200
    533c:	02dc6c00 	.word	0x02dc6c00

00005340 <system_clock_source_enable>:
    5340:	b510      	push	{r4, lr}
    5342:	2808      	cmp	r0, #8
    5344:	d841      	bhi.n	53ca <system_clock_source_enable+0x8a>
    5346:	4b22      	ldr	r3, [pc, #136]	; (53d0 <system_clock_source_enable+0x90>)
    5348:	0080      	lsls	r0, r0, #2
    534a:	581b      	ldr	r3, [r3, r0]
    534c:	469f      	mov	pc, r3
    534e:	2000      	movs	r0, #0
    5350:	bd10      	pop	{r4, pc}
    5352:	2302      	movs	r3, #2
    5354:	4a1f      	ldr	r2, [pc, #124]	; (53d4 <system_clock_source_enable+0x94>)
    5356:	2000      	movs	r0, #0
    5358:	6991      	ldr	r1, [r2, #24]
    535a:	430b      	orrs	r3, r1
    535c:	6193      	str	r3, [r2, #24]
    535e:	e7f7      	b.n	5350 <system_clock_source_enable+0x10>
    5360:	2302      	movs	r3, #2
    5362:	4a1c      	ldr	r2, [pc, #112]	; (53d4 <system_clock_source_enable+0x94>)
    5364:	2000      	movs	r0, #0
    5366:	8a91      	ldrh	r1, [r2, #20]
    5368:	430b      	orrs	r3, r1
    536a:	8293      	strh	r3, [r2, #20]
    536c:	e7f0      	b.n	5350 <system_clock_source_enable+0x10>
    536e:	2302      	movs	r3, #2
    5370:	4a18      	ldr	r2, [pc, #96]	; (53d4 <system_clock_source_enable+0x94>)
    5372:	2000      	movs	r0, #0
    5374:	6a11      	ldr	r1, [r2, #32]
    5376:	430b      	orrs	r3, r1
    5378:	6213      	str	r3, [r2, #32]
    537a:	e7e9      	b.n	5350 <system_clock_source_enable+0x10>
    537c:	2302      	movs	r3, #2
    537e:	2010      	movs	r0, #16
    5380:	4c15      	ldr	r4, [pc, #84]	; (53d8 <system_clock_source_enable+0x98>)
    5382:	6822      	ldr	r2, [r4, #0]
    5384:	4313      	orrs	r3, r2
    5386:	6023      	str	r3, [r4, #0]
    5388:	6822      	ldr	r2, [r4, #0]
    538a:	4b14      	ldr	r3, [pc, #80]	; (53dc <system_clock_source_enable+0x9c>)
    538c:	4013      	ands	r3, r2
    538e:	4a11      	ldr	r2, [pc, #68]	; (53d4 <system_clock_source_enable+0x94>)
    5390:	8493      	strh	r3, [r2, #36]	; 0x24
    5392:	68d3      	ldr	r3, [r2, #12]
    5394:	490f      	ldr	r1, [pc, #60]	; (53d4 <system_clock_source_enable+0x94>)
    5396:	4218      	tst	r0, r3
    5398:	d0fb      	beq.n	5392 <system_clock_source_enable+0x52>
    539a:	68a3      	ldr	r3, [r4, #8]
    539c:	2000      	movs	r0, #0
    539e:	62cb      	str	r3, [r1, #44]	; 0x2c
    53a0:	6863      	ldr	r3, [r4, #4]
    53a2:	628b      	str	r3, [r1, #40]	; 0x28
    53a4:	6823      	ldr	r3, [r4, #0]
    53a6:	b29b      	uxth	r3, r3
    53a8:	848b      	strh	r3, [r1, #36]	; 0x24
    53aa:	e7d1      	b.n	5350 <system_clock_source_enable+0x10>
    53ac:	2244      	movs	r2, #68	; 0x44
    53ae:	2302      	movs	r3, #2
    53b0:	4908      	ldr	r1, [pc, #32]	; (53d4 <system_clock_source_enable+0x94>)
    53b2:	5c88      	ldrb	r0, [r1, r2]
    53b4:	4303      	orrs	r3, r0
    53b6:	548b      	strb	r3, [r1, r2]
    53b8:	2000      	movs	r0, #0
    53ba:	e7c9      	b.n	5350 <system_clock_source_enable+0x10>
    53bc:	2302      	movs	r3, #2
    53be:	4a05      	ldr	r2, [pc, #20]	; (53d4 <system_clock_source_enable+0x94>)
    53c0:	2000      	movs	r0, #0
    53c2:	8a11      	ldrh	r1, [r2, #16]
    53c4:	430b      	orrs	r3, r1
    53c6:	8213      	strh	r3, [r2, #16]
    53c8:	e7c2      	b.n	5350 <system_clock_source_enable+0x10>
    53ca:	2017      	movs	r0, #23
    53cc:	e7c0      	b.n	5350 <system_clock_source_enable+0x10>
    53ce:	46c0      	nop			; (mov r8, r8)
    53d0:	0000f600 	.word	0x0000f600
    53d4:	40000800 	.word	0x40000800
    53d8:	200046e4 	.word	0x200046e4
    53dc:	0000ff7f 	.word	0x0000ff7f

000053e0 <system_clock_init>:
    53e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    53e2:	4647      	mov	r7, r8
    53e4:	22c2      	movs	r2, #194	; 0xc2
    53e6:	211e      	movs	r1, #30
    53e8:	b480      	push	{r7}
    53ea:	4b31      	ldr	r3, [pc, #196]	; (54b0 <system_clock_init+0xd0>)
    53ec:	00d2      	lsls	r2, r2, #3
    53ee:	609a      	str	r2, [r3, #8]
    53f0:	4a30      	ldr	r2, [pc, #192]	; (54b4 <system_clock_init+0xd4>)
    53f2:	2400      	movs	r4, #0
    53f4:	6853      	ldr	r3, [r2, #4]
    53f6:	b084      	sub	sp, #16
    53f8:	438b      	bics	r3, r1
    53fa:	6053      	str	r3, [r2, #4]
    53fc:	2301      	movs	r3, #1
    53fe:	ad01      	add	r5, sp, #4
    5400:	702b      	strb	r3, [r5, #0]
    5402:	b2e0      	uxtb	r0, r4
    5404:	1c29      	adds	r1, r5, #0
    5406:	3401      	adds	r4, #1
    5408:	f7ff f84e 	bl	44a8 <system_gclk_chan_set_config>
    540c:	2c25      	cmp	r4, #37	; 0x25
    540e:	d1f8      	bne.n	5402 <system_clock_init+0x22>
    5410:	4b29      	ldr	r3, [pc, #164]	; (54b8 <system_clock_init+0xd8>)
    5412:	4c27      	ldr	r4, [pc, #156]	; (54b0 <system_clock_init+0xd0>)
    5414:	681b      	ldr	r3, [r3, #0]
    5416:	69a1      	ldr	r1, [r4, #24]
    5418:	04db      	lsls	r3, r3, #19
    541a:	0e5b      	lsrs	r3, r3, #25
    541c:	041a      	lsls	r2, r3, #16
    541e:	4b27      	ldr	r3, [pc, #156]	; (54bc <system_clock_init+0xdc>)
    5420:	2604      	movs	r6, #4
    5422:	400b      	ands	r3, r1
    5424:	4313      	orrs	r3, r2
    5426:	2208      	movs	r2, #8
    5428:	2740      	movs	r7, #64	; 0x40
    542a:	61a3      	str	r3, [r4, #24]
    542c:	69a3      	ldr	r3, [r4, #24]
    542e:	2004      	movs	r0, #4
    5430:	4333      	orrs	r3, r6
    5432:	4313      	orrs	r3, r2
    5434:	43bb      	bics	r3, r7
    5436:	3278      	adds	r2, #120	; 0x78
    5438:	4690      	mov	r8, r2
    543a:	4313      	orrs	r3, r2
    543c:	22e0      	movs	r2, #224	; 0xe0
    543e:	00d2      	lsls	r2, r2, #3
    5440:	4313      	orrs	r3, r2
    5442:	4a1f      	ldr	r2, [pc, #124]	; (54c0 <system_clock_init+0xe0>)
    5444:	4013      	ands	r3, r2
    5446:	61a3      	str	r3, [r4, #24]
    5448:	f7ff ff7a 	bl	5340 <system_clock_source_enable>
    544c:	4642      	mov	r2, r8
    544e:	6a23      	ldr	r3, [r4, #32]
    5450:	2006      	movs	r0, #6
    5452:	43bb      	bics	r3, r7
    5454:	4313      	orrs	r3, r2
    5456:	4a1b      	ldr	r2, [pc, #108]	; (54c4 <system_clock_init+0xe4>)
    5458:	4013      	ands	r3, r2
    545a:	6223      	str	r3, [r4, #32]
    545c:	f7ff ff70 	bl	5340 <system_clock_source_enable>
    5460:	2400      	movs	r4, #0
    5462:	f7fe ff2d 	bl	42c0 <system_gclk_init>
    5466:	2320      	movs	r3, #32
    5468:	1c29      	adds	r1, r5, #0
    546a:	2002      	movs	r0, #2
    546c:	606b      	str	r3, [r5, #4]
    546e:	706c      	strb	r4, [r5, #1]
    5470:	722c      	strb	r4, [r5, #8]
    5472:	726c      	strb	r4, [r5, #9]
    5474:	702e      	strb	r6, [r5, #0]
    5476:	f7fe ff35 	bl	42e4 <system_gclk_gen_set_config>
    547a:	2002      	movs	r0, #2
    547c:	f7fe ff7c 	bl	4378 <system_gclk_gen_enable>
    5480:	4b11      	ldr	r3, [pc, #68]	; (54c8 <system_clock_init+0xe8>)
    5482:	1c29      	adds	r1, r5, #0
    5484:	721c      	strb	r4, [r3, #8]
    5486:	725c      	strb	r4, [r3, #9]
    5488:	729c      	strb	r4, [r3, #10]
    548a:	72dc      	strb	r4, [r3, #11]
    548c:	2301      	movs	r3, #1
    548e:	2000      	movs	r0, #0
    5490:	606b      	str	r3, [r5, #4]
    5492:	3305      	adds	r3, #5
    5494:	702b      	strb	r3, [r5, #0]
    5496:	706c      	strb	r4, [r5, #1]
    5498:	722c      	strb	r4, [r5, #8]
    549a:	726c      	strb	r4, [r5, #9]
    549c:	f7fe ff22 	bl	42e4 <system_gclk_gen_set_config>
    54a0:	2000      	movs	r0, #0
    54a2:	f7fe ff69 	bl	4378 <system_gclk_gen_enable>
    54a6:	b004      	add	sp, #16
    54a8:	bc04      	pop	{r2}
    54aa:	4690      	mov	r8, r2
    54ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    54ae:	46c0      	nop			; (mov r8, r8)
    54b0:	40000800 	.word	0x40000800
    54b4:	41004000 	.word	0x41004000
    54b8:	00806024 	.word	0x00806024
    54bc:	ff80ffff 	.word	0xff80ffff
    54c0:	ffffefff 	.word	0xffffefff
    54c4:	fffffcff 	.word	0xfffffcff
    54c8:	40000400 	.word	0x40000400

000054cc <gpio_init>:
    54cc:	b570      	push	{r4, r5, r6, lr}
    54ce:	1c05      	adds	r5, r0, #0
    54d0:	b082      	sub	sp, #8
    54d2:	1c0c      	adds	r4, r1, #0
    54d4:	1c4b      	adds	r3, r1, #1
    54d6:	d028      	beq.n	552a <gpio_init+0x5e>
    54d8:	b2c8      	uxtb	r0, r1
    54da:	2900      	cmp	r1, #0
    54dc:	db2c      	blt.n	5538 <gpio_init+0x6c>
    54de:	4b18      	ldr	r3, [pc, #96]	; (5540 <gpio_init+0x74>)
    54e0:	0946      	lsrs	r6, r0, #5
    54e2:	469c      	mov	ip, r3
    54e4:	01f6      	lsls	r6, r6, #7
    54e6:	4466      	add	r6, ip
    54e8:	702c      	strb	r4, [r5, #0]
    54ea:	17e2      	asrs	r2, r4, #31
    54ec:	0ed2      	lsrs	r2, r2, #27
    54ee:	18a3      	adds	r3, r4, r2
    54f0:	241f      	movs	r4, #31
    54f2:	401c      	ands	r4, r3
    54f4:	1aa4      	subs	r4, r4, r2
    54f6:	2201      	movs	r2, #1
    54f8:	1c13      	adds	r3, r2, #0
    54fa:	b264      	sxtb	r4, r4
    54fc:	40a3      	lsls	r3, r4
    54fe:	606b      	str	r3, [r5, #4]
    5500:	2300      	movs	r3, #0
    5502:	a901      	add	r1, sp, #4
    5504:	722b      	strb	r3, [r5, #8]
    5506:	72ab      	strb	r3, [r5, #10]
    5508:	726a      	strb	r2, [r5, #9]
    550a:	700b      	strb	r3, [r1, #0]
    550c:	708b      	strb	r3, [r1, #2]
    550e:	704a      	strb	r2, [r1, #1]
    5510:	f000 fe6a 	bl	61e8 <port_pin_set_config>
    5514:	1c33      	adds	r3, r6, #0
    5516:	3314      	adds	r3, #20
    5518:	60eb      	str	r3, [r5, #12]
    551a:	3304      	adds	r3, #4
    551c:	612b      	str	r3, [r5, #16]
    551e:	3610      	adds	r6, #16
    5520:	3308      	adds	r3, #8
    5522:	616b      	str	r3, [r5, #20]
    5524:	61ae      	str	r6, [r5, #24]
    5526:	b002      	add	sp, #8
    5528:	bd70      	pop	{r4, r5, r6, pc}
    552a:	4806      	ldr	r0, [pc, #24]	; (5544 <gpio_init+0x78>)
    552c:	4906      	ldr	r1, [pc, #24]	; (5548 <gpio_init+0x7c>)
    552e:	221f      	movs	r2, #31
    5530:	f7ff fd2a 	bl	4f88 <mbed_assert_internal>
    5534:	702c      	strb	r4, [r5, #0]
    5536:	e7f6      	b.n	5526 <gpio_init+0x5a>
    5538:	702c      	strb	r4, [r5, #0]
    553a:	2600      	movs	r6, #0
    553c:	e7d5      	b.n	54ea <gpio_init+0x1e>
    553e:	46c0      	nop			; (mov r8, r8)
    5540:	41004400 	.word	0x41004400
    5544:	0000f624 	.word	0x0000f624
    5548:	0000f638 	.word	0x0000f638

0000554c <gpio_mode>:
    554c:	b530      	push	{r4, r5, lr}
    554e:	1c04      	adds	r4, r0, #0
    5550:	7800      	ldrb	r0, [r0, #0]
    5552:	b083      	sub	sp, #12
    5554:	b243      	sxtb	r3, r0
    5556:	1c0d      	adds	r5, r1, #0
    5558:	3301      	adds	r3, #1
    555a:	d013      	beq.n	5584 <gpio_mode+0x38>
    555c:	7aa3      	ldrb	r3, [r4, #10]
    555e:	a901      	add	r1, sp, #4
    5560:	700b      	strb	r3, [r1, #0]
    5562:	7a23      	ldrb	r3, [r4, #8]
    5564:	7265      	strb	r5, [r4, #9]
    5566:	1e5a      	subs	r2, r3, #1
    5568:	4193      	sbcs	r3, r2
    556a:	708b      	strb	r3, [r1, #2]
    556c:	2d01      	cmp	r5, #1
    556e:	d003      	beq.n	5578 <gpio_mode+0x2c>
    5570:	2d00      	cmp	r5, #0
    5572:	d001      	beq.n	5578 <gpio_mode+0x2c>
    5574:	2d02      	cmp	r5, #2
    5576:	d100      	bne.n	557a <gpio_mode+0x2e>
    5578:	704d      	strb	r5, [r1, #1]
    557a:	b2c0      	uxtb	r0, r0
    557c:	f000 fe34 	bl	61e8 <port_pin_set_config>
    5580:	b003      	add	sp, #12
    5582:	bd30      	pop	{r4, r5, pc}
    5584:	4803      	ldr	r0, [pc, #12]	; (5594 <gpio_mode+0x48>)
    5586:	4904      	ldr	r1, [pc, #16]	; (5598 <gpio_mode+0x4c>)
    5588:	2236      	movs	r2, #54	; 0x36
    558a:	f7ff fcfd 	bl	4f88 <mbed_assert_internal>
    558e:	7820      	ldrb	r0, [r4, #0]
    5590:	e7e4      	b.n	555c <gpio_mode+0x10>
    5592:	46c0      	nop			; (mov r8, r8)
    5594:	0000ead8 	.word	0x0000ead8
    5598:	0000f638 	.word	0x0000f638

0000559c <gpio_dir>:
    559c:	b530      	push	{r4, r5, lr}
    559e:	1c04      	adds	r4, r0, #0
    55a0:	7800      	ldrb	r0, [r0, #0]
    55a2:	b083      	sub	sp, #12
    55a4:	b243      	sxtb	r3, r0
    55a6:	1c0d      	adds	r5, r1, #0
    55a8:	3301      	adds	r3, #1
    55aa:	d013      	beq.n	55d4 <gpio_dir+0x38>
    55ac:	7a63      	ldrb	r3, [r4, #9]
    55ae:	a901      	add	r1, sp, #4
    55b0:	704b      	strb	r3, [r1, #1]
    55b2:	7a23      	ldrb	r3, [r4, #8]
    55b4:	72a5      	strb	r5, [r4, #10]
    55b6:	1e5a      	subs	r2, r3, #1
    55b8:	4193      	sbcs	r3, r2
    55ba:	708b      	strb	r3, [r1, #2]
    55bc:	2d01      	cmp	r5, #1
    55be:	d003      	beq.n	55c8 <gpio_dir+0x2c>
    55c0:	2d00      	cmp	r5, #0
    55c2:	d001      	beq.n	55c8 <gpio_dir+0x2c>
    55c4:	2d02      	cmp	r5, #2
    55c6:	d100      	bne.n	55ca <gpio_dir+0x2e>
    55c8:	700d      	strb	r5, [r1, #0]
    55ca:	b2c0      	uxtb	r0, r0
    55cc:	f000 fe0c 	bl	61e8 <port_pin_set_config>
    55d0:	b003      	add	sp, #12
    55d2:	bd30      	pop	{r4, r5, pc}
    55d4:	4803      	ldr	r0, [pc, #12]	; (55e4 <gpio_dir+0x48>)
    55d6:	4904      	ldr	r1, [pc, #16]	; (55e8 <gpio_dir+0x4c>)
    55d8:	224c      	movs	r2, #76	; 0x4c
    55da:	f7ff fcd5 	bl	4f88 <mbed_assert_internal>
    55de:	7820      	ldrb	r0, [r4, #0]
    55e0:	e7e4      	b.n	55ac <gpio_dir+0x10>
    55e2:	46c0      	nop			; (mov r8, r8)
    55e4:	0000ead8 	.word	0x0000ead8
    55e8:	0000f638 	.word	0x0000f638

000055ec <pin_mode>:
    55ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    55ee:	4645      	mov	r5, r8
    55f0:	4657      	mov	r7, sl
    55f2:	464e      	mov	r6, r9
    55f4:	b4e0      	push	{r5, r6, r7}
    55f6:	4688      	mov	r8, r1
    55f8:	b082      	sub	sp, #8
    55fa:	1c05      	adds	r5, r0, #0
    55fc:	1c43      	adds	r3, r0, #1
    55fe:	d062      	beq.n	56c6 <pin_mode+0xda>
    5600:	17c4      	asrs	r4, r0, #31
    5602:	0ee2      	lsrs	r2, r4, #27
    5604:	241f      	movs	r4, #31
    5606:	2701      	movs	r7, #1
    5608:	1883      	adds	r3, r0, r2
    560a:	401c      	ands	r4, r3
    560c:	1aa4      	subs	r4, r4, r2
    560e:	b264      	sxtb	r4, r4
    5610:	40a7      	lsls	r7, r4
    5612:	b2c6      	uxtb	r6, r0
    5614:	46ba      	mov	sl, r7
    5616:	0975      	lsrs	r5, r6, #5
    5618:	09f3      	lsrs	r3, r6, #7
    561a:	d13e      	bne.n	569a <pin_mode+0xae>
    561c:	4b37      	ldr	r3, [pc, #220]	; (56fc <pin_mode+0x110>)
    561e:	01ed      	lsls	r5, r5, #7
    5620:	469c      	mov	ip, r3
    5622:	4465      	add	r5, ip
    5624:	2d00      	cmp	r5, #0
    5626:	d062      	beq.n	56ee <pin_mode+0x102>
    5628:	1c28      	adds	r0, r5, #0
    562a:	231f      	movs	r3, #31
    562c:	4033      	ands	r3, r6
    562e:	18c2      	adds	r2, r0, r3
    5630:	3240      	adds	r2, #64	; 0x40
    5632:	7812      	ldrb	r2, [r2, #0]
    5634:	2101      	movs	r1, #1
    5636:	4694      	mov	ip, r2
    5638:	4667      	mov	r7, ip
    563a:	2280      	movs	r2, #128	; 0x80
    563c:	4239      	tst	r1, r7
    563e:	d136      	bne.n	56ae <pin_mode+0xc2>
    5640:	a901      	add	r1, sp, #4
    5642:	700a      	strb	r2, [r1, #0]
    5644:	2202      	movs	r2, #2
    5646:	192c      	adds	r4, r5, r4
    5648:	3440      	adds	r4, #64	; 0x40
    564a:	7823      	ldrb	r3, [r4, #0]
    564c:	421a      	tst	r2, r3
    564e:	d010      	beq.n	5672 <pin_mode+0x86>
    5650:	4650      	mov	r0, sl
    5652:	682b      	ldr	r3, [r5, #0]
    5654:	4003      	ands	r3, r0
    5656:	d134      	bne.n	56c2 <pin_mode+0xd6>
    5658:	704b      	strb	r3, [r1, #1]
    565a:	7823      	ldrb	r3, [r4, #0]
    565c:	075b      	lsls	r3, r3, #29
    565e:	d50a      	bpl.n	5676 <pin_mode+0x8a>
    5660:	692b      	ldr	r3, [r5, #16]
    5662:	4642      	mov	r2, r8
    5664:	2300      	movs	r3, #0
    5666:	70cb      	strb	r3, [r1, #3]
    5668:	2a01      	cmp	r2, #1
    566a:	d109      	bne.n	5680 <pin_mode+0x94>
    566c:	4643      	mov	r3, r8
    566e:	708b      	strb	r3, [r1, #2]
    5670:	e00a      	b.n	5688 <pin_mode+0x9c>
    5672:	2301      	movs	r3, #1
    5674:	704b      	strb	r3, [r1, #1]
    5676:	2300      	movs	r3, #0
    5678:	4642      	mov	r2, r8
    567a:	70cb      	strb	r3, [r1, #3]
    567c:	2a01      	cmp	r2, #1
    567e:	d0f5      	beq.n	566c <pin_mode+0x80>
    5680:	4642      	mov	r2, r8
    5682:	2a02      	cmp	r2, #2
    5684:	d0f2      	beq.n	566c <pin_mode+0x80>
    5686:	708b      	strb	r3, [r1, #2]
    5688:	1c30      	adds	r0, r6, #0
    568a:	f7fe fe03 	bl	4294 <system_pinmux_pin_set_config>
    568e:	b002      	add	sp, #8
    5690:	bc1c      	pop	{r2, r3, r4}
    5692:	4690      	mov	r8, r2
    5694:	4699      	mov	r9, r3
    5696:	46a2      	mov	sl, r4
    5698:	bdf0      	pop	{r4, r5, r6, r7, pc}
    569a:	4b19      	ldr	r3, [pc, #100]	; (5700 <pin_mode+0x114>)
    569c:	4699      	mov	r9, r3
    569e:	4819      	ldr	r0, [pc, #100]	; (5704 <pin_mode+0x118>)
    56a0:	4649      	mov	r1, r9
    56a2:	2223      	movs	r2, #35	; 0x23
    56a4:	f7ff fc70 	bl	4f88 <mbed_assert_internal>
    56a8:	2500      	movs	r5, #0
    56aa:	2000      	movs	r0, #0
    56ac:	e7bd      	b.n	562a <pin_mode+0x3e>
    56ae:	085b      	lsrs	r3, r3, #1
    56b0:	18c3      	adds	r3, r0, r3
    56b2:	3330      	adds	r3, #48	; 0x30
    56b4:	781a      	ldrb	r2, [r3, #0]
    56b6:	b2d2      	uxtb	r2, r2
    56b8:	4231      	tst	r1, r6
    56ba:	d116      	bne.n	56ea <pin_mode+0xfe>
    56bc:	230f      	movs	r3, #15
    56be:	401a      	ands	r2, r3
    56c0:	e7be      	b.n	5640 <pin_mode+0x54>
    56c2:	704a      	strb	r2, [r1, #1]
    56c4:	e7d7      	b.n	5676 <pin_mode+0x8a>
    56c6:	4b0e      	ldr	r3, [pc, #56]	; (5700 <pin_mode+0x114>)
    56c8:	4c0f      	ldr	r4, [pc, #60]	; (5708 <pin_mode+0x11c>)
    56ca:	4699      	mov	r9, r3
    56cc:	1c19      	adds	r1, r3, #0
    56ce:	1c20      	adds	r0, r4, #0
    56d0:	225c      	movs	r2, #92	; 0x5c
    56d2:	f7ff fc59 	bl	4f88 <mbed_assert_internal>
    56d6:	1c20      	adds	r0, r4, #0
    56d8:	4649      	mov	r1, r9
    56da:	221e      	movs	r2, #30
    56dc:	f7ff fc54 	bl	4f88 <mbed_assert_internal>
    56e0:	2300      	movs	r3, #0
    56e2:	26ff      	movs	r6, #255	; 0xff
    56e4:	469a      	mov	sl, r3
    56e6:	1c2c      	adds	r4, r5, #0
    56e8:	e7d9      	b.n	569e <pin_mode+0xb2>
    56ea:	0912      	lsrs	r2, r2, #4
    56ec:	e7a8      	b.n	5640 <pin_mode+0x54>
    56ee:	4805      	ldr	r0, [pc, #20]	; (5704 <pin_mode+0x118>)
    56f0:	4903      	ldr	r1, [pc, #12]	; (5700 <pin_mode+0x114>)
    56f2:	2223      	movs	r2, #35	; 0x23
    56f4:	f7ff fc48 	bl	4f88 <mbed_assert_internal>
    56f8:	2000      	movs	r0, #0
    56fa:	e796      	b.n	562a <pin_mode+0x3e>
    56fc:	41004400 	.word	0x41004400
    5700:	0000f6a0 	.word	0x0000f6a0
    5704:	0000f708 	.word	0x0000f708
    5708:	0000f624 	.word	0x0000f624

0000570c <pinmap_find_peripheral_from_pad.part.0>:
    570c:	b510      	push	{r4, lr}
    570e:	1c04      	adds	r4, r0, #0
    5710:	2901      	cmp	r1, #1
    5712:	d004      	beq.n	571e <pinmap_find_peripheral_from_pad.part.0+0x12>
    5714:	1c20      	adds	r0, r4, #0
    5716:	4905      	ldr	r1, [pc, #20]	; (572c <pinmap_find_peripheral_from_pad.part.0+0x20>)
    5718:	f7ff fc6a 	bl	4ff0 <pinmap_find_peripheral>
    571c:	bd10      	pop	{r4, pc}
    571e:	4904      	ldr	r1, [pc, #16]	; (5730 <pinmap_find_peripheral_from_pad.part.0+0x24>)
    5720:	f7ff fc66 	bl	4ff0 <pinmap_find_peripheral>
    5724:	1c43      	adds	r3, r0, #1
    5726:	d1f9      	bne.n	571c <pinmap_find_peripheral_from_pad.part.0+0x10>
    5728:	e7f4      	b.n	5714 <pinmap_find_peripheral_from_pad.part.0+0x8>
    572a:	46c0      	nop			; (mov r8, r8)
    572c:	0000f438 	.word	0x0000f438
    5730:	0000f3b4 	.word	0x0000f3b4

00005734 <pinmap_merge_sercom>:
    5734:	b538      	push	{r3, r4, r5, lr}
    5736:	1c0d      	adds	r5, r1, #0
    5738:	1c43      	adds	r3, r0, #1
    573a:	d01b      	beq.n	5774 <pinmap_merge_sercom+0x40>
    573c:	2100      	movs	r1, #0
    573e:	f7ff ffe5 	bl	570c <pinmap_find_peripheral_from_pad.part.0>
    5742:	1c43      	adds	r3, r0, #1
    5744:	d016      	beq.n	5774 <pinmap_merge_sercom+0x40>
    5746:	240f      	movs	r4, #15
    5748:	4004      	ands	r4, r0
    574a:	1c28      	adds	r0, r5, #0
    574c:	1c6b      	adds	r3, r5, #1
    574e:	d008      	beq.n	5762 <pinmap_merge_sercom+0x2e>
    5750:	2100      	movs	r1, #0
    5752:	f7ff ffdb 	bl	570c <pinmap_find_peripheral_from_pad.part.0>
    5756:	1c43      	adds	r3, r0, #1
    5758:	d003      	beq.n	5762 <pinmap_merge_sercom+0x2e>
    575a:	230f      	movs	r3, #15
    575c:	4018      	ands	r0, r3
    575e:	42a0      	cmp	r0, r4
    5760:	d006      	beq.n	5770 <pinmap_merge_sercom+0x3c>
    5762:	1c63      	adds	r3, r4, #1
    5764:	d003      	beq.n	576e <pinmap_merge_sercom+0x3a>
    5766:	1c43      	adds	r3, r0, #1
    5768:	d002      	beq.n	5770 <pinmap_merge_sercom+0x3c>
    576a:	2001      	movs	r0, #1
    576c:	4240      	negs	r0, r0
    576e:	bd38      	pop	{r3, r4, r5, pc}
    5770:	1c20      	adds	r0, r4, #0
    5772:	e7fc      	b.n	576e <pinmap_merge_sercom+0x3a>
    5774:	1c28      	adds	r0, r5, #0
    5776:	1c6b      	adds	r3, r5, #1
    5778:	d0f9      	beq.n	576e <pinmap_merge_sercom+0x3a>
    577a:	2100      	movs	r1, #0
    577c:	2401      	movs	r4, #1
    577e:	f7ff ffc5 	bl	570c <pinmap_find_peripheral_from_pad.part.0>
    5782:	4264      	negs	r4, r4
    5784:	1c43      	adds	r3, r0, #1
    5786:	d1e8      	bne.n	575a <pinmap_merge_sercom+0x26>
    5788:	e7f1      	b.n	576e <pinmap_merge_sercom+0x3a>
    578a:	46c0      	nop			; (mov r8, r8)

0000578c <pinmap_find_sercom>:
    578c:	b5f0      	push	{r4, r5, r6, r7, lr}
    578e:	1c0f      	adds	r7, r1, #0
    5790:	b085      	sub	sp, #20
    5792:	1c16      	adds	r6, r2, #0
    5794:	1c1d      	adds	r5, r3, #0
    5796:	1c04      	adds	r4, r0, #0
    5798:	1c43      	adds	r3, r0, #1
    579a:	d003      	beq.n	57a4 <pinmap_find_sercom+0x18>
    579c:	2100      	movs	r1, #0
    579e:	f7ff ffb5 	bl	570c <pinmap_find_peripheral_from_pad.part.0>
    57a2:	1c04      	adds	r4, r0, #0
    57a4:	9400      	str	r4, [sp, #0]
    57a6:	1c38      	adds	r0, r7, #0
    57a8:	1c7b      	adds	r3, r7, #1
    57aa:	d002      	beq.n	57b2 <pinmap_find_sercom+0x26>
    57ac:	2100      	movs	r1, #0
    57ae:	f7ff ffad 	bl	570c <pinmap_find_peripheral_from_pad.part.0>
    57b2:	9001      	str	r0, [sp, #4]
    57b4:	1c30      	adds	r0, r6, #0
    57b6:	1c73      	adds	r3, r6, #1
    57b8:	d002      	beq.n	57c0 <pinmap_find_sercom+0x34>
    57ba:	2100      	movs	r1, #0
    57bc:	f7ff ffa6 	bl	570c <pinmap_find_peripheral_from_pad.part.0>
    57c0:	9002      	str	r0, [sp, #8]
    57c2:	1c28      	adds	r0, r5, #0
    57c4:	1c6b      	adds	r3, r5, #1
    57c6:	d002      	beq.n	57ce <pinmap_find_sercom+0x42>
    57c8:	2100      	movs	r1, #0
    57ca:	f7ff ff9f 	bl	570c <pinmap_find_peripheral_from_pad.part.0>
    57ce:	9003      	str	r0, [sp, #12]
    57d0:	2001      	movs	r0, #1
    57d2:	2300      	movs	r3, #0
    57d4:	4240      	negs	r0, r0
    57d6:	220f      	movs	r2, #15
    57d8:	1c61      	adds	r1, r4, #1
    57da:	d004      	beq.n	57e6 <pinmap_find_sercom+0x5a>
    57dc:	1c41      	adds	r1, r0, #1
    57de:	d00b      	beq.n	57f8 <pinmap_find_sercom+0x6c>
    57e0:	4014      	ands	r4, r2
    57e2:	4284      	cmp	r4, r0
    57e4:	d10f      	bne.n	5806 <pinmap_find_sercom+0x7a>
    57e6:	3304      	adds	r3, #4
    57e8:	2b10      	cmp	r3, #16
    57ea:	d00a      	beq.n	5802 <pinmap_find_sercom+0x76>
    57ec:	4669      	mov	r1, sp
    57ee:	58cc      	ldr	r4, [r1, r3]
    57f0:	1c61      	adds	r1, r4, #1
    57f2:	d0f8      	beq.n	57e6 <pinmap_find_sercom+0x5a>
    57f4:	1c41      	adds	r1, r0, #1
    57f6:	d1f3      	bne.n	57e0 <pinmap_find_sercom+0x54>
    57f8:	1c20      	adds	r0, r4, #0
    57fa:	3304      	adds	r3, #4
    57fc:	4010      	ands	r0, r2
    57fe:	2b10      	cmp	r3, #16
    5800:	d1f4      	bne.n	57ec <pinmap_find_sercom+0x60>
    5802:	b005      	add	sp, #20
    5804:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5806:	2001      	movs	r0, #1
    5808:	4240      	negs	r0, r0
    580a:	e7fa      	b.n	5802 <pinmap_find_sercom+0x76>

0000580c <pinmap_function_sercom>:
    580c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    580e:	1c43      	adds	r3, r0, #1
    5810:	d004      	beq.n	581c <pinmap_function_sercom+0x10>
    5812:	260f      	movs	r6, #15
    5814:	4031      	ands	r1, r6
    5816:	1e0d      	subs	r5, r1, #0
    5818:	2d05      	cmp	r5, #5
    581a:	d902      	bls.n	5822 <pinmap_function_sercom+0x16>
    581c:	2001      	movs	r0, #1
    581e:	4240      	negs	r0, r0
    5820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5822:	4f0a      	ldr	r7, [pc, #40]	; (584c <pinmap_function_sercom+0x40>)
    5824:	1c04      	adds	r4, r0, #0
    5826:	1c39      	adds	r1, r7, #0
    5828:	f7ff fbee 	bl	5008 <pinmap_peripheral>
    582c:	4030      	ands	r0, r6
    582e:	42a8      	cmp	r0, r5
    5830:	d007      	beq.n	5842 <pinmap_function_sercom+0x36>
    5832:	4f07      	ldr	r7, [pc, #28]	; (5850 <pinmap_function_sercom+0x44>)
    5834:	1c20      	adds	r0, r4, #0
    5836:	1c39      	adds	r1, r7, #0
    5838:	f7ff fbe6 	bl	5008 <pinmap_peripheral>
    583c:	4006      	ands	r6, r0
    583e:	42ae      	cmp	r6, r5
    5840:	d1ec      	bne.n	581c <pinmap_function_sercom+0x10>
    5842:	1c20      	adds	r0, r4, #0
    5844:	1c39      	adds	r1, r7, #0
    5846:	f7ff fbf7 	bl	5038 <pinmap_function>
    584a:	e7e9      	b.n	5820 <pinmap_function_sercom+0x14>
    584c:	0000f438 	.word	0x0000f438
    5850:	0000f3b4 	.word	0x0000f3b4

00005854 <pinmap_pad_sercom>:
    5854:	b570      	push	{r4, r5, r6, lr}
    5856:	1c43      	adds	r3, r0, #1
    5858:	d004      	beq.n	5864 <pinmap_pad_sercom+0x10>
    585a:	240f      	movs	r4, #15
    585c:	4021      	ands	r1, r4
    585e:	1e0d      	subs	r5, r1, #0
    5860:	2d05      	cmp	r5, #5
    5862:	d902      	bls.n	586a <pinmap_pad_sercom+0x16>
    5864:	2001      	movs	r0, #1
    5866:	4240      	negs	r0, r0
    5868:	bd70      	pop	{r4, r5, r6, pc}
    586a:	4909      	ldr	r1, [pc, #36]	; (5890 <pinmap_pad_sercom+0x3c>)
    586c:	1c06      	adds	r6, r0, #0
    586e:	f7ff fbcb 	bl	5008 <pinmap_peripheral>
    5872:	1c23      	adds	r3, r4, #0
    5874:	4003      	ands	r3, r0
    5876:	42ab      	cmp	r3, r5
    5878:	d007      	beq.n	588a <pinmap_pad_sercom+0x36>
    587a:	1c30      	adds	r0, r6, #0
    587c:	4905      	ldr	r1, [pc, #20]	; (5894 <pinmap_pad_sercom+0x40>)
    587e:	f7ff fbc3 	bl	5008 <pinmap_peripheral>
    5882:	1c23      	adds	r3, r4, #0
    5884:	4003      	ands	r3, r0
    5886:	42ab      	cmp	r3, r5
    5888:	d1ec      	bne.n	5864 <pinmap_pad_sercom+0x10>
    588a:	0900      	lsrs	r0, r0, #4
    588c:	4020      	ands	r0, r4
    588e:	e7eb      	b.n	5868 <pinmap_pad_sercom+0x14>
    5890:	0000f438 	.word	0x0000f438
    5894:	0000f3b4 	.word	0x0000f3b4

00005898 <pinmap_peripheral_sercom>:
    5898:	b570      	push	{r4, r5, r6, lr}
    589a:	b086      	sub	sp, #24
    589c:	466a      	mov	r2, sp
    589e:	4b08      	ldr	r3, [pc, #32]	; (58c0 <pinmap_peripheral_sercom+0x28>)
    58a0:	4668      	mov	r0, sp
    58a2:	cb70      	ldmia	r3!, {r4, r5, r6}
    58a4:	c270      	stmia	r2!, {r4, r5, r6}
    58a6:	cb70      	ldmia	r3!, {r4, r5, r6}
    58a8:	c270      	stmia	r2!, {r4, r5, r6}
    58aa:	230f      	movs	r3, #15
    58ac:	4019      	ands	r1, r3
    58ae:	2905      	cmp	r1, #5
    58b0:	d903      	bls.n	58ba <pinmap_peripheral_sercom+0x22>
    58b2:	2001      	movs	r0, #1
    58b4:	4240      	negs	r0, r0
    58b6:	b006      	add	sp, #24
    58b8:	bd70      	pop	{r4, r5, r6, pc}
    58ba:	0089      	lsls	r1, r1, #2
    58bc:	5808      	ldr	r0, [r1, r0]
    58be:	e7fa      	b.n	58b6 <pinmap_peripheral_sercom+0x1e>
    58c0:	0000f710 	.word	0x0000f710

000058c4 <us_ticker_irq_handler_internal>:
    58c4:	2203      	movs	r2, #3
    58c6:	b508      	push	{r3, lr}
    58c8:	4b02      	ldr	r3, [pc, #8]	; (58d4 <us_ticker_irq_handler_internal+0x10>)
    58ca:	681b      	ldr	r3, [r3, #0]
    58cc:	739a      	strb	r2, [r3, #14]
    58ce:	f000 fc83 	bl	61d8 <us_ticker_irq_handler>
    58d2:	bd08      	pop	{r3, pc}
    58d4:	200047a0 	.word	0x200047a0

000058d8 <us_ticker_init.part.5>:
    58d8:	b530      	push	{r4, r5, lr}
    58da:	2501      	movs	r5, #1
    58dc:	4b35      	ldr	r3, [pc, #212]	; (59b4 <us_ticker_init.part.5+0xdc>)
    58de:	4c36      	ldr	r4, [pc, #216]	; (59b8 <us_ticker_init.part.5+0xe0>)
    58e0:	601d      	str	r5, [r3, #0]
    58e2:	7823      	ldrb	r3, [r4, #0]
    58e4:	b08f      	sub	sp, #60	; 0x3c
    58e6:	2b00      	cmp	r3, #0
    58e8:	d05c      	beq.n	59a4 <us_ticker_init.part.5+0xcc>
    58ea:	2300      	movs	r3, #0
    58ec:	2200      	movs	r2, #0
    58ee:	ac01      	add	r4, sp, #4
    58f0:	7422      	strb	r2, [r4, #16]
    58f2:	6163      	str	r3, [r4, #20]
    58f4:	61a3      	str	r3, [r4, #24]
    58f6:	7722      	strb	r2, [r4, #28]
    58f8:	6223      	str	r3, [r4, #32]
    58fa:	6263      	str	r3, [r4, #36]	; 0x24
    58fc:	2000      	movs	r0, #0
    58fe:	7023      	strb	r3, [r4, #0]
    5900:	70a3      	strb	r3, [r4, #2]
    5902:	80a3      	strh	r3, [r4, #4]
    5904:	71a2      	strb	r2, [r4, #6]
    5906:	8123      	strh	r3, [r4, #8]
    5908:	7062      	strb	r2, [r4, #1]
    590a:	72a2      	strb	r2, [r4, #10]
    590c:	72e2      	strb	r2, [r4, #11]
    590e:	7322      	strb	r2, [r4, #12]
    5910:	73a2      	strb	r2, [r4, #14]
    5912:	7362      	strb	r2, [r4, #13]
    5914:	8523      	strh	r3, [r4, #40]	; 0x28
    5916:	8563      	strh	r3, [r4, #42]	; 0x2a
    5918:	85a3      	strh	r3, [r4, #44]	; 0x2c
    591a:	f7fe fd4b 	bl	43b4 <system_gclk_gen_get_hz>
    591e:	4927      	ldr	r1, [pc, #156]	; (59bc <us_ticker_init.part.5+0xe4>)
    5920:	f000 feb0 	bl	6684 <__aeabi_uidiv>
    5924:	2800      	cmp	r0, #0
    5926:	d032      	beq.n	598e <us_ticker_init.part.5+0xb6>
    5928:	2300      	movs	r3, #0
    592a:	2801      	cmp	r0, #1
    592c:	d007      	beq.n	593e <us_ticker_init.part.5+0x66>
    592e:	0840      	lsrs	r0, r0, #1
    5930:	3301      	adds	r3, #1
    5932:	2801      	cmp	r0, #1
    5934:	d022      	beq.n	597c <us_ticker_init.part.5+0xa4>
    5936:	2b0b      	cmp	r3, #11
    5938:	d1f9      	bne.n	592e <us_ticker_init.part.5+0x56>
    593a:	23e0      	movs	r3, #224	; 0xe0
    593c:	00db      	lsls	r3, r3, #3
    593e:	80a3      	strh	r3, [r4, #4]
    5940:	2308      	movs	r3, #8
    5942:	70a3      	strb	r3, [r4, #2]
    5944:	3b07      	subs	r3, #7
    5946:	7063      	strb	r3, [r4, #1]
    5948:	2300      	movs	r3, #0
    594a:	4d1d      	ldr	r5, [pc, #116]	; (59c0 <us_ticker_init.part.5+0xe8>)
    594c:	62a3      	str	r3, [r4, #40]	; 0x28
    594e:	491d      	ldr	r1, [pc, #116]	; (59c4 <us_ticker_init.part.5+0xec>)
    5950:	3b01      	subs	r3, #1
    5952:	1c22      	adds	r2, r4, #0
    5954:	1c28      	adds	r0, r5, #0
    5956:	62e3      	str	r3, [r4, #44]	; 0x2c
    5958:	f000 fcd2 	bl	6300 <tc_init>
    595c:	491a      	ldr	r1, [pc, #104]	; (59c8 <us_ticker_init.part.5+0xf0>)
    595e:	2202      	movs	r2, #2
    5960:	1c28      	adds	r0, r5, #0
    5962:	f000 fc51 	bl	6208 <tc_register_callback>
    5966:	217f      	movs	r1, #127	; 0x7f
    5968:	682a      	ldr	r2, [r5, #0]
    596a:	7bd3      	ldrb	r3, [r2, #15]
    596c:	438b      	bics	r3, r1
    596e:	d1fc      	bne.n	596a <us_ticker_init.part.5+0x92>
    5970:	8811      	ldrh	r1, [r2, #0]
    5972:	3302      	adds	r3, #2
    5974:	430b      	orrs	r3, r1
    5976:	8013      	strh	r3, [r2, #0]
    5978:	b00f      	add	sp, #60	; 0x3c
    597a:	bd30      	pop	{r4, r5, pc}
    597c:	2b08      	cmp	r3, #8
    597e:	d8dc      	bhi.n	593a <us_ticker_init.part.5+0x62>
    5980:	2b06      	cmp	r3, #6
    5982:	d813      	bhi.n	59ac <us_ticker_init.part.5+0xd4>
    5984:	2b04      	cmp	r3, #4
    5986:	d908      	bls.n	599a <us_ticker_init.part.5+0xc2>
    5988:	23a0      	movs	r3, #160	; 0xa0
    598a:	00db      	lsls	r3, r3, #3
    598c:	e7d7      	b.n	593e <us_ticker_init.part.5+0x66>
    598e:	480f      	ldr	r0, [pc, #60]	; (59cc <us_ticker_init.part.5+0xf4>)
    5990:	490f      	ldr	r1, [pc, #60]	; (59d0 <us_ticker_init.part.5+0xf8>)
    5992:	2257      	movs	r2, #87	; 0x57
    5994:	f7ff faf8 	bl	4f88 <mbed_assert_internal>
    5998:	2300      	movs	r3, #0
    599a:	22e0      	movs	r2, #224	; 0xe0
    599c:	021b      	lsls	r3, r3, #8
    599e:	00d2      	lsls	r2, r2, #3
    59a0:	4013      	ands	r3, r2
    59a2:	e7cc      	b.n	593e <us_ticker_init.part.5+0x66>
    59a4:	f7fe fdb6 	bl	4514 <system_init>
    59a8:	7025      	strb	r5, [r4, #0]
    59aa:	e79e      	b.n	58ea <us_ticker_init.part.5+0x12>
    59ac:	23c0      	movs	r3, #192	; 0xc0
    59ae:	00db      	lsls	r3, r3, #3
    59b0:	e7c5      	b.n	593e <us_ticker_init.part.5+0x66>
    59b2:	46c0      	nop			; (mov r8, r8)
    59b4:	200046fc 	.word	0x200046fc
    59b8:	200045b0 	.word	0x200045b0
    59bc:	000f4240 	.word	0x000f4240
    59c0:	200047a0 	.word	0x200047a0
    59c4:	42003000 	.word	0x42003000
    59c8:	000058c5 	.word	0x000058c5
    59cc:	0000f728 	.word	0x0000f728
    59d0:	0000f73c 	.word	0x0000f73c

000059d4 <us_ticker_init>:
    59d4:	b508      	push	{r3, lr}
    59d6:	4b03      	ldr	r3, [pc, #12]	; (59e4 <us_ticker_init+0x10>)
    59d8:	681b      	ldr	r3, [r3, #0]
    59da:	2b00      	cmp	r3, #0
    59dc:	d101      	bne.n	59e2 <us_ticker_init+0xe>
    59de:	f7ff ff7b 	bl	58d8 <us_ticker_init.part.5>
    59e2:	bd08      	pop	{r3, pc}
    59e4:	200046fc 	.word	0x200046fc

000059e8 <us_ticker_read>:
    59e8:	b508      	push	{r3, lr}
    59ea:	4b05      	ldr	r3, [pc, #20]	; (5a00 <us_ticker_read+0x18>)
    59ec:	681b      	ldr	r3, [r3, #0]
    59ee:	2b00      	cmp	r3, #0
    59f0:	d101      	bne.n	59f6 <us_ticker_read+0xe>
    59f2:	f7ff ff71 	bl	58d8 <us_ticker_init.part.5>
    59f6:	4803      	ldr	r0, [pc, #12]	; (5a04 <us_ticker_read+0x1c>)
    59f8:	f000 fdd4 	bl	65a4 <tc_get_count_value>
    59fc:	bd08      	pop	{r3, pc}
    59fe:	46c0      	nop			; (mov r8, r8)
    5a00:	200046fc 	.word	0x200046fc
    5a04:	200047a0 	.word	0x200047a0

00005a08 <us_ticker_set_interrupt>:
    5a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5a0a:	1c06      	adds	r6, r0, #0
    5a0c:	f7ff ffec 	bl	59e8 <us_ticker_read>
    5a10:	1a30      	subs	r0, r6, r0
    5a12:	d421      	bmi.n	5a58 <us_ticker_set_interrupt+0x50>
    5a14:	2780      	movs	r7, #128	; 0x80
    5a16:	2380      	movs	r3, #128	; 0x80
    5a18:	4d11      	ldr	r5, [pc, #68]	; (5a60 <us_ticker_set_interrupt+0x58>)
    5a1a:	033f      	lsls	r7, r7, #12
    5a1c:	50ef      	str	r7, [r5, r3]
    5a1e:	4911      	ldr	r1, [pc, #68]	; (5a64 <us_ticker_set_interrupt+0x5c>)
    5a20:	2013      	movs	r0, #19
    5a22:	f7fe f931 	bl	3c88 <NVIC_SetVector>
    5a26:	4c10      	ldr	r4, [pc, #64]	; (5a68 <us_ticker_set_interrupt+0x60>)
    5a28:	6820      	ldr	r0, [r4, #0]
    5a2a:	f000 fc49 	bl	62c0 <_tc_get_inst_index>
    5a2e:	221f      	movs	r2, #31
    5a30:	4b0e      	ldr	r3, [pc, #56]	; (5a6c <us_ticker_set_interrupt+0x64>)
    5a32:	2100      	movs	r1, #0
    5a34:	5c1b      	ldrb	r3, [r3, r0]
    5a36:	1c20      	adds	r0, r4, #0
    5a38:	4013      	ands	r3, r2
    5a3a:	3a1e      	subs	r2, #30
    5a3c:	409a      	lsls	r2, r3
    5a3e:	2310      	movs	r3, #16
    5a40:	602a      	str	r2, [r5, #0]
    5a42:	7e62      	ldrb	r2, [r4, #25]
    5a44:	4313      	orrs	r3, r2
    5a46:	7663      	strb	r3, [r4, #25]
    5a48:	2310      	movs	r3, #16
    5a4a:	6822      	ldr	r2, [r4, #0]
    5a4c:	7353      	strb	r3, [r2, #13]
    5a4e:	1c32      	adds	r2, r6, #0
    5a50:	f000 fdbe 	bl	65d0 <tc_set_compare_value>
    5a54:	602f      	str	r7, [r5, #0]
    5a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5a58:	f000 fbbe 	bl	61d8 <us_ticker_irq_handler>
    5a5c:	e7fb      	b.n	5a56 <us_ticker_set_interrupt+0x4e>
    5a5e:	46c0      	nop			; (mov r8, r8)
    5a60:	e000e100 	.word	0xe000e100
    5a64:	000062a9 	.word	0x000062a9
    5a68:	200047a0 	.word	0x200047a0
    5a6c:	0000f7ac 	.word	0x0000f7ac

00005a70 <us_ticker_disable_interrupt>:
    5a70:	2110      	movs	r1, #16
    5a72:	4b06      	ldr	r3, [pc, #24]	; (5a8c <us_ticker_disable_interrupt+0x1c>)
    5a74:	681a      	ldr	r2, [r3, #0]
    5a76:	7311      	strb	r1, [r2, #12]
    5a78:	7e5a      	ldrb	r2, [r3, #25]
    5a7a:	438a      	bics	r2, r1
    5a7c:	2180      	movs	r1, #128	; 0x80
    5a7e:	765a      	strb	r2, [r3, #25]
    5a80:	2380      	movs	r3, #128	; 0x80
    5a82:	4a03      	ldr	r2, [pc, #12]	; (5a90 <us_ticker_disable_interrupt+0x20>)
    5a84:	0309      	lsls	r1, r1, #12
    5a86:	50d1      	str	r1, [r2, r3]
    5a88:	4770      	bx	lr
    5a8a:	46c0      	nop			; (mov r8, r8)
    5a8c:	200047a0 	.word	0x200047a0
    5a90:	e000e100 	.word	0xe000e100

00005a94 <us_ticker_clear_interrupt>:
    5a94:	2210      	movs	r2, #16
    5a96:	4b05      	ldr	r3, [pc, #20]	; (5aac <us_ticker_clear_interrupt+0x18>)
    5a98:	2180      	movs	r1, #128	; 0x80
    5a9a:	681b      	ldr	r3, [r3, #0]
    5a9c:	0309      	lsls	r1, r1, #12
    5a9e:	739a      	strb	r2, [r3, #14]
    5aa0:	731a      	strb	r2, [r3, #12]
    5aa2:	23c0      	movs	r3, #192	; 0xc0
    5aa4:	4a02      	ldr	r2, [pc, #8]	; (5ab0 <us_ticker_clear_interrupt+0x1c>)
    5aa6:	005b      	lsls	r3, r3, #1
    5aa8:	50d1      	str	r1, [r2, r3]
    5aaa:	4770      	bx	lr
    5aac:	200047a0 	.word	0x200047a0
    5ab0:	e000e100 	.word	0xe000e100

00005ab4 <spi_find_mux_settings>:
    5ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5ab6:	1e04      	subs	r4, r0, #0
    5ab8:	d03e      	beq.n	5b38 <spi_find_mux_settings+0x84>
    5aba:	6820      	ldr	r0, [r4, #0]
    5abc:	f7ff fbe4 	bl	5288 <_sercom_get_sercom_inst_index>
    5ac0:	7923      	ldrb	r3, [r4, #4]
    5ac2:	1c07      	adds	r7, r0, #0
    5ac4:	2b01      	cmp	r3, #1
    5ac6:	d02a      	beq.n	5b1e <spi_find_mux_settings+0x6a>
    5ac8:	2501      	movs	r5, #1
    5aca:	2300      	movs	r3, #0
    5acc:	2005      	movs	r0, #5
    5ace:	18e3      	adds	r3, r4, r3
    5ad0:	5618      	ldrsb	r0, [r3, r0]
    5ad2:	1c43      	adds	r3, r0, #1
    5ad4:	d00f      	beq.n	5af6 <spi_find_mux_settings+0x42>
    5ad6:	1c39      	adds	r1, r7, #0
    5ad8:	f7ff febc 	bl	5854 <pinmap_pad_sercom>
    5adc:	1c43      	adds	r3, r0, #1
    5ade:	d00a      	beq.n	5af6 <spi_find_mux_settings+0x42>
    5ae0:	26c0      	movs	r6, #192	; 0xc0
    5ae2:	0500      	lsls	r0, r0, #20
    5ae4:	03b6      	lsls	r6, r6, #14
    5ae6:	4006      	ands	r6, r0
    5ae8:	2005      	movs	r0, #5
    5aea:	1965      	adds	r5, r4, r5
    5aec:	5628      	ldrsb	r0, [r5, r0]
    5aee:	1c43      	adds	r3, r0, #1
    5af0:	d107      	bne.n	5b02 <spi_find_mux_settings+0x4e>
    5af2:	1c30      	adds	r0, r6, #0
    5af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5af6:	2005      	movs	r0, #5
    5af8:	1965      	adds	r5, r4, r5
    5afa:	5628      	ldrsb	r0, [r5, r0]
    5afc:	2600      	movs	r6, #0
    5afe:	1c43      	adds	r3, r0, #1
    5b00:	d0f7      	beq.n	5af2 <spi_find_mux_settings+0x3e>
    5b02:	1c39      	adds	r1, r7, #0
    5b04:	f7ff fea6 	bl	5854 <pinmap_pad_sercom>
    5b08:	1c43      	adds	r3, r0, #1
    5b0a:	d0f2      	beq.n	5af2 <spi_find_mux_settings+0x3e>
    5b0c:	2800      	cmp	r0, #0
    5b0e:	d009      	beq.n	5b24 <spi_find_mux_settings+0x70>
    5b10:	23c0      	movs	r3, #192	; 0xc0
    5b12:	3801      	subs	r0, #1
    5b14:	0400      	lsls	r0, r0, #16
    5b16:	029b      	lsls	r3, r3, #10
    5b18:	4018      	ands	r0, r3
    5b1a:	4306      	orrs	r6, r0
    5b1c:	e7e9      	b.n	5af2 <spi_find_mux_settings+0x3e>
    5b1e:	2500      	movs	r5, #0
    5b20:	2301      	movs	r3, #1
    5b22:	e7d3      	b.n	5acc <spi_find_mux_settings+0x18>
    5b24:	2007      	movs	r0, #7
    5b26:	1c39      	adds	r1, r7, #0
    5b28:	5620      	ldrsb	r0, [r4, r0]
    5b2a:	f7ff fe93 	bl	5854 <pinmap_pad_sercom>
    5b2e:	2803      	cmp	r0, #3
    5b30:	d008      	beq.n	5b44 <spi_find_mux_settings+0x90>
    5b32:	2000      	movs	r0, #0
    5b34:	4306      	orrs	r6, r0
    5b36:	e7dc      	b.n	5af2 <spi_find_mux_settings+0x3e>
    5b38:	4804      	ldr	r0, [pc, #16]	; (5b4c <spi_find_mux_settings+0x98>)
    5b3a:	4905      	ldr	r1, [pc, #20]	; (5b50 <spi_find_mux_settings+0x9c>)
    5b3c:	22b1      	movs	r2, #177	; 0xb1
    5b3e:	f7ff fa23 	bl	4f88 <mbed_assert_internal>
    5b42:	e7ba      	b.n	5aba <spi_find_mux_settings+0x6>
    5b44:	20c0      	movs	r0, #192	; 0xc0
    5b46:	0280      	lsls	r0, r0, #10
    5b48:	4306      	orrs	r6, r0
    5b4a:	e7d2      	b.n	5af2 <spi_find_mux_settings+0x3e>
    5b4c:	0000ef30 	.word	0x0000ef30
    5b50:	0000f7b0 	.word	0x0000f7b0

00005b54 <spi_init>:
    5b54:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b56:	4644      	mov	r4, r8
    5b58:	465f      	mov	r7, fp
    5b5a:	464d      	mov	r5, r9
    5b5c:	4656      	mov	r6, sl
    5b5e:	b4f0      	push	{r4, r5, r6, r7}
    5b60:	b085      	sub	sp, #20
    5b62:	4698      	mov	r8, r3
    5b64:	ab0e      	add	r3, sp, #56	; 0x38
    5b66:	781b      	ldrb	r3, [r3, #0]
    5b68:	1c04      	adds	r4, r0, #0
    5b6a:	b25b      	sxtb	r3, r3
    5b6c:	1c0d      	adds	r5, r1, #0
    5b6e:	4693      	mov	fp, r2
    5b70:	9300      	str	r3, [sp, #0]
    5b72:	2800      	cmp	r0, #0
    5b74:	d100      	bne.n	5b78 <spi_init+0x24>
    5b76:	e0c8      	b.n	5d0a <spi_init+0x1b6>
    5b78:	4643      	mov	r3, r8
    5b7a:	3301      	adds	r3, #1
    5b7c:	d100      	bne.n	5b80 <spi_init+0x2c>
    5b7e:	e0b8      	b.n	5cf2 <spi_init+0x19e>
    5b80:	2300      	movs	r3, #0
    5b82:	4e6a      	ldr	r6, [pc, #424]	; (5d2c <spi_init+0x1d8>)
    5b84:	aa02      	add	r2, sp, #8
    5b86:	8053      	strh	r3, [r2, #2]
    5b88:	7833      	ldrb	r3, [r6, #0]
    5b8a:	2b00      	cmp	r3, #0
    5b8c:	d032      	beq.n	5bf4 <spi_init+0xa0>
    5b8e:	4659      	mov	r1, fp
    5b90:	4642      	mov	r2, r8
    5b92:	9b00      	ldr	r3, [sp, #0]
    5b94:	1c28      	adds	r0, r5, #0
    5b96:	f7ff fdf9 	bl	578c <pinmap_find_sercom>
    5b9a:	4681      	mov	r9, r0
    5b9c:	2001      	movs	r0, #1
    5b9e:	4649      	mov	r1, r9
    5ba0:	4240      	negs	r0, r0
    5ba2:	f7ff fe79 	bl	5898 <pinmap_peripheral_sercom>
    5ba6:	6020      	str	r0, [r4, #0]
    5ba8:	2c00      	cmp	r4, #0
    5baa:	d100      	bne.n	5bae <spi_init+0x5a>
    5bac:	e0a7      	b.n	5cfe <spi_init+0x1aa>
    5bae:	4f60      	ldr	r7, [pc, #384]	; (5d30 <spi_init+0x1dc>)
    5bb0:	4e60      	ldr	r6, [pc, #384]	; (5d34 <spi_init+0x1e0>)
    5bb2:	e003      	b.n	5bbc <spi_init+0x68>
    5bb4:	6822      	ldr	r2, [r4, #0]
    5bb6:	8b53      	ldrh	r3, [r2, #26]
    5bb8:	0bdb      	lsrs	r3, r3, #15
    5bba:	d00a      	beq.n	5bd2 <spi_init+0x7e>
    5bbc:	2c00      	cmp	r4, #0
    5bbe:	d1f9      	bne.n	5bb4 <spi_init+0x60>
    5bc0:	2244      	movs	r2, #68	; 0x44
    5bc2:	1c38      	adds	r0, r7, #0
    5bc4:	1c31      	adds	r1, r6, #0
    5bc6:	f7ff f9df 	bl	4f88 <mbed_assert_internal>
    5bca:	6822      	ldr	r2, [r4, #0]
    5bcc:	8b53      	ldrh	r3, [r2, #26]
    5bce:	0bdb      	lsrs	r3, r3, #15
    5bd0:	d1f4      	bne.n	5bbc <spi_init+0x68>
    5bd2:	2102      	movs	r1, #2
    5bd4:	6813      	ldr	r3, [r2, #0]
    5bd6:	438b      	bics	r3, r1
    5bd8:	6013      	str	r3, [r2, #0]
    5bda:	6823      	ldr	r3, [r4, #0]
    5bdc:	681e      	ldr	r6, [r3, #0]
    5bde:	2301      	movs	r3, #1
    5be0:	469a      	mov	sl, r3
    5be2:	401e      	ands	r6, r3
    5be4:	d00b      	beq.n	5bfe <spi_init+0xaa>
    5be6:	b005      	add	sp, #20
    5be8:	bc3c      	pop	{r2, r3, r4, r5}
    5bea:	4690      	mov	r8, r2
    5bec:	4699      	mov	r9, r3
    5bee:	46a2      	mov	sl, r4
    5bf0:	46ab      	mov	fp, r5
    5bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5bf4:	f7fe fc8e 	bl	4514 <system_init>
    5bf8:	2301      	movs	r3, #1
    5bfa:	7033      	strb	r3, [r6, #0]
    5bfc:	e7c7      	b.n	5b8e <spi_init+0x3a>
    5bfe:	464b      	mov	r3, r9
    5c00:	4650      	mov	r0, sl
    5c02:	3302      	adds	r3, #2
    5c04:	4098      	lsls	r0, r3
    5c06:	1c03      	adds	r3, r0, #0
    5c08:	494b      	ldr	r1, [pc, #300]	; (5d38 <spi_init+0x1e4>)
    5c0a:	6a0a      	ldr	r2, [r1, #32]
    5c0c:	4313      	orrs	r3, r2
    5c0e:	620b      	str	r3, [r1, #32]
    5c10:	ab02      	add	r3, sp, #8
    5c12:	701e      	strb	r6, [r3, #0]
    5c14:	464b      	mov	r3, r9
    5c16:	3314      	adds	r3, #20
    5c18:	b2db      	uxtb	r3, r3
    5c1a:	1c1f      	adds	r7, r3, #0
    5c1c:	1c18      	adds	r0, r3, #0
    5c1e:	a902      	add	r1, sp, #8
    5c20:	9301      	str	r3, [sp, #4]
    5c22:	f7fe fc41 	bl	44a8 <system_gclk_chan_set_config>
    5c26:	1c38      	adds	r0, r7, #0
    5c28:	f7fe fc00 	bl	442c <system_gclk_chan_enable>
    5c2c:	2100      	movs	r1, #0
    5c2e:	2000      	movs	r0, #0
    5c30:	f7ff fb0a 	bl	5248 <sercom_set_gclk_generator>
    5c34:	230c      	movs	r3, #12
    5c36:	6822      	ldr	r2, [r4, #0]
    5c38:	af03      	add	r7, sp, #12
    5c3a:	6811      	ldr	r1, [r2, #0]
    5c3c:	430b      	orrs	r3, r1
    5c3e:	6013      	str	r3, [r2, #0]
    5c40:	4653      	mov	r3, sl
    5c42:	7123      	strb	r3, [r4, #4]
    5c44:	2380      	movs	r3, #128	; 0x80
    5c46:	703b      	strb	r3, [r7, #0]
    5c48:	4653      	mov	r3, sl
    5c4a:	70bb      	strb	r3, [r7, #2]
    5c4c:	465b      	mov	r3, fp
    5c4e:	71a3      	strb	r3, [r4, #6]
    5c50:	4643      	mov	r3, r8
    5c52:	71e3      	strb	r3, [r4, #7]
    5c54:	466b      	mov	r3, sp
    5c56:	781b      	ldrb	r3, [r3, #0]
    5c58:	7165      	strb	r5, [r4, #5]
    5c5a:	7223      	strb	r3, [r4, #8]
    5c5c:	2309      	movs	r3, #9
    5c5e:	4698      	mov	r8, r3
    5c60:	b26d      	sxtb	r5, r5
    5c62:	707e      	strb	r6, [r7, #1]
    5c64:	70fe      	strb	r6, [r7, #3]
    5c66:	44a0      	add	r8, r4
    5c68:	1da6      	adds	r6, r4, #6
    5c6a:	1c6b      	adds	r3, r5, #1
    5c6c:	d00b      	beq.n	5c86 <spi_init+0x132>
    5c6e:	1c28      	adds	r0, r5, #0
    5c70:	4649      	mov	r1, r9
    5c72:	f7ff fdcb 	bl	580c <pinmap_function_sercom>
    5c76:	b2c0      	uxtb	r0, r0
    5c78:	7038      	strb	r0, [r7, #0]
    5c7a:	28ff      	cmp	r0, #255	; 0xff
    5c7c:	d003      	beq.n	5c86 <spi_init+0x132>
    5c7e:	b2e8      	uxtb	r0, r5
    5c80:	1c39      	adds	r1, r7, #0
    5c82:	f7fe fb07 	bl	4294 <system_pinmux_pin_set_config>
    5c86:	4546      	cmp	r6, r8
    5c88:	d006      	beq.n	5c98 <spi_init+0x144>
    5c8a:	7835      	ldrb	r5, [r6, #0]
    5c8c:	3601      	adds	r6, #1
    5c8e:	b26d      	sxtb	r5, r5
    5c90:	1c6b      	adds	r3, r5, #1
    5c92:	d1ec      	bne.n	5c6e <spi_init+0x11a>
    5c94:	4546      	cmp	r6, r8
    5c96:	d1f8      	bne.n	5c8a <spi_init+0x136>
    5c98:	9801      	ldr	r0, [sp, #4]
    5c9a:	f7fe fc25 	bl	44e8 <system_gclk_chan_get_hz>
    5c9e:	ab02      	add	r3, sp, #8
    5ca0:	1c01      	adds	r1, r0, #0
    5ca2:	1c9a      	adds	r2, r3, #2
    5ca4:	4825      	ldr	r0, [pc, #148]	; (5d3c <spi_init+0x1e8>)
    5ca6:	f7ff f9f3 	bl	5090 <_sercom_get_sync_baud_val>
    5caa:	2800      	cmp	r0, #0
    5cac:	d19b      	bne.n	5be6 <spi_init+0x92>
    5cae:	ab02      	add	r3, sp, #8
    5cb0:	789b      	ldrb	r3, [r3, #2]
    5cb2:	6822      	ldr	r2, [r4, #0]
    5cb4:	1c20      	adds	r0, r4, #0
    5cb6:	7313      	strb	r3, [r2, #12]
    5cb8:	f7ff fefc 	bl	5ab4 <spi_find_mux_settings>
    5cbc:	2180      	movs	r1, #128	; 0x80
    5cbe:	6822      	ldr	r2, [r4, #0]
    5cc0:	0289      	lsls	r1, r1, #10
    5cc2:	6813      	ldr	r3, [r2, #0]
    5cc4:	4318      	orrs	r0, r3
    5cc6:	6010      	str	r0, [r2, #0]
    5cc8:	6822      	ldr	r2, [r4, #0]
    5cca:	6853      	ldr	r3, [r2, #4]
    5ccc:	430b      	orrs	r3, r1
    5cce:	6053      	str	r3, [r2, #4]
    5cd0:	2c00      	cmp	r4, #0
    5cd2:	d025      	beq.n	5d20 <spi_init+0x1cc>
    5cd4:	4e16      	ldr	r6, [pc, #88]	; (5d30 <spi_init+0x1dc>)
    5cd6:	4d17      	ldr	r5, [pc, #92]	; (5d34 <spi_init+0x1e0>)
    5cd8:	e003      	b.n	5ce2 <spi_init+0x18e>
    5cda:	6822      	ldr	r2, [r4, #0]
    5cdc:	8b53      	ldrh	r3, [r2, #26]
    5cde:	0bdb      	lsrs	r3, r3, #15
    5ce0:	d019      	beq.n	5d16 <spi_init+0x1c2>
    5ce2:	2c00      	cmp	r4, #0
    5ce4:	d1f9      	bne.n	5cda <spi_init+0x186>
    5ce6:	1c30      	adds	r0, r6, #0
    5ce8:	1c29      	adds	r1, r5, #0
    5cea:	2244      	movs	r2, #68	; 0x44
    5cec:	f7ff f94c 	bl	4f88 <mbed_assert_internal>
    5cf0:	e7f3      	b.n	5cda <spi_init+0x186>
    5cf2:	4813      	ldr	r0, [pc, #76]	; (5d40 <spi_init+0x1ec>)
    5cf4:	490f      	ldr	r1, [pc, #60]	; (5d34 <spi_init+0x1e0>)
    5cf6:	22f5      	movs	r2, #245	; 0xf5
    5cf8:	f7ff f946 	bl	4f88 <mbed_assert_internal>
    5cfc:	e740      	b.n	5b80 <spi_init+0x2c>
    5cfe:	480c      	ldr	r0, [pc, #48]	; (5d30 <spi_init+0x1dc>)
    5d00:	490c      	ldr	r1, [pc, #48]	; (5d34 <spi_init+0x1e0>)
    5d02:	225e      	movs	r2, #94	; 0x5e
    5d04:	f7ff f940 	bl	4f88 <mbed_assert_internal>
    5d08:	e751      	b.n	5bae <spi_init+0x5a>
    5d0a:	4809      	ldr	r0, [pc, #36]	; (5d30 <spi_init+0x1dc>)
    5d0c:	4909      	ldr	r1, [pc, #36]	; (5d34 <spi_init+0x1e0>)
    5d0e:	22f4      	movs	r2, #244	; 0xf4
    5d10:	f7ff f93a 	bl	4f88 <mbed_assert_internal>
    5d14:	e730      	b.n	5b78 <spi_init+0x24>
    5d16:	6811      	ldr	r1, [r2, #0]
    5d18:	3302      	adds	r3, #2
    5d1a:	430b      	orrs	r3, r1
    5d1c:	6013      	str	r3, [r2, #0]
    5d1e:	e762      	b.n	5be6 <spi_init+0x92>
    5d20:	4803      	ldr	r0, [pc, #12]	; (5d30 <spi_init+0x1dc>)
    5d22:	4904      	ldr	r1, [pc, #16]	; (5d34 <spi_init+0x1e0>)
    5d24:	2252      	movs	r2, #82	; 0x52
    5d26:	f7ff f92f 	bl	4f88 <mbed_assert_internal>
    5d2a:	e7d3      	b.n	5cd4 <spi_init+0x180>
    5d2c:	200045b0 	.word	0x200045b0
    5d30:	0000ef30 	.word	0x0000ef30
    5d34:	0000f7b0 	.word	0x0000f7b0
    5d38:	40000400 	.word	0x40000400
    5d3c:	000186a0 	.word	0x000186a0
    5d40:	0000f818 	.word	0x0000f818

00005d44 <spi_format>:
    5d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5d46:	464f      	mov	r7, r9
    5d48:	4646      	mov	r6, r8
    5d4a:	1c04      	adds	r4, r0, #0
    5d4c:	b4c0      	push	{r6, r7}
    5d4e:	4688      	mov	r8, r1
    5d50:	1c15      	adds	r5, r2, #0
    5d52:	4699      	mov	r9, r3
    5d54:	2800      	cmp	r0, #0
    5d56:	d100      	bne.n	5d5a <spi_format+0x16>
    5d58:	e08a      	b.n	5e70 <spi_format+0x12c>
    5d5a:	4f4f      	ldr	r7, [pc, #316]	; (5e98 <spi_format+0x154>)
    5d5c:	4e4f      	ldr	r6, [pc, #316]	; (5e9c <spi_format+0x158>)
    5d5e:	e006      	b.n	5d6e <spi_format+0x2a>
    5d60:	6822      	ldr	r2, [r4, #0]
    5d62:	8b53      	ldrh	r3, [r2, #26]
    5d64:	0bdb      	lsrs	r3, r3, #15
    5d66:	03db      	lsls	r3, r3, #15
    5d68:	b29b      	uxth	r3, r3
    5d6a:	2b00      	cmp	r3, #0
    5d6c:	d00d      	beq.n	5d8a <spi_format+0x46>
    5d6e:	2c00      	cmp	r4, #0
    5d70:	d1f6      	bne.n	5d60 <spi_format+0x1c>
    5d72:	2244      	movs	r2, #68	; 0x44
    5d74:	1c38      	adds	r0, r7, #0
    5d76:	1c31      	adds	r1, r6, #0
    5d78:	f7ff f906 	bl	4f88 <mbed_assert_internal>
    5d7c:	6822      	ldr	r2, [r4, #0]
    5d7e:	8b53      	ldrh	r3, [r2, #26]
    5d80:	0bdb      	lsrs	r3, r3, #15
    5d82:	03db      	lsls	r3, r3, #15
    5d84:	b29b      	uxth	r3, r3
    5d86:	2b00      	cmp	r3, #0
    5d88:	d1f1      	bne.n	5d6e <spi_format+0x2a>
    5d8a:	2002      	movs	r0, #2
    5d8c:	6811      	ldr	r1, [r2, #0]
    5d8e:	4381      	bics	r1, r0
    5d90:	6011      	str	r1, [r2, #0]
    5d92:	464a      	mov	r2, r9
    5d94:	2a00      	cmp	r2, #0
    5d96:	d060      	beq.n	5e5a <spi_format+0x116>
    5d98:	211c      	movs	r1, #28
    5d9a:	6820      	ldr	r0, [r4, #0]
    5d9c:	6802      	ldr	r2, [r0, #0]
    5d9e:	438a      	bics	r2, r1
    5da0:	3914      	subs	r1, #20
    5da2:	430a      	orrs	r2, r1
    5da4:	6002      	str	r2, [r0, #0]
    5da6:	6822      	ldr	r2, [r4, #0]
    5da8:	7123      	strb	r3, [r4, #4]
    5daa:	6851      	ldr	r1, [r2, #4]
    5dac:	3340      	adds	r3, #64	; 0x40
    5dae:	430b      	orrs	r3, r1
    5db0:	6053      	str	r3, [r2, #4]
    5db2:	2300      	movs	r3, #0
    5db4:	4699      	mov	r9, r3
    5db6:	1c27      	adds	r7, r4, #0
    5db8:	1d66      	adds	r6, r4, #5
    5dba:	3709      	adds	r7, #9
    5dbc:	2000      	movs	r0, #0
    5dbe:	5630      	ldrsb	r0, [r6, r0]
    5dc0:	1c43      	adds	r3, r0, #1
    5dc2:	d002      	beq.n	5dca <spi_format+0x86>
    5dc4:	4649      	mov	r1, r9
    5dc6:	f7ff fc11 	bl	55ec <pin_mode>
    5dca:	3601      	adds	r6, #1
    5dcc:	42be      	cmp	r6, r7
    5dce:	d1f5      	bne.n	5dbc <spi_format+0x78>
    5dd0:	6823      	ldr	r3, [r4, #0]
    5dd2:	1c20      	adds	r0, r4, #0
    5dd4:	681e      	ldr	r6, [r3, #0]
    5dd6:	4b32      	ldr	r3, [pc, #200]	; (5ea0 <spi_format+0x15c>)
    5dd8:	401e      	ands	r6, r3
    5dda:	f7ff fe6b 	bl	5ab4 <spi_find_mux_settings>
    5dde:	4642      	mov	r2, r8
    5de0:	6823      	ldr	r3, [r4, #0]
    5de2:	4306      	orrs	r6, r0
    5de4:	601e      	str	r6, [r3, #0]
    5de6:	6821      	ldr	r1, [r4, #0]
    5de8:	2301      	movs	r3, #1
    5dea:	2a08      	cmp	r2, #8
    5dec:	dc00      	bgt.n	5df0 <spi_format+0xac>
    5dee:	2300      	movs	r3, #0
    5df0:	2007      	movs	r0, #7
    5df2:	684a      	ldr	r2, [r1, #4]
    5df4:	4003      	ands	r3, r0
    5df6:	4382      	bics	r2, r0
    5df8:	4313      	orrs	r3, r2
    5dfa:	604b      	str	r3, [r1, #4]
    5dfc:	2301      	movs	r3, #1
    5dfe:	1c1a      	adds	r2, r3, #0
    5e00:	6820      	ldr	r0, [r4, #0]
    5e02:	402a      	ands	r2, r5
    5e04:	6806      	ldr	r6, [r0, #0]
    5e06:	0711      	lsls	r1, r2, #28
    5e08:	4a26      	ldr	r2, [pc, #152]	; (5ea4 <spi_format+0x160>)
    5e0a:	086d      	lsrs	r5, r5, #1
    5e0c:	4032      	ands	r2, r6
    5e0e:	430a      	orrs	r2, r1
    5e10:	6002      	str	r2, [r0, #0]
    5e12:	6821      	ldr	r1, [r4, #0]
    5e14:	401d      	ands	r5, r3
    5e16:	076b      	lsls	r3, r5, #29
    5e18:	4a23      	ldr	r2, [pc, #140]	; (5ea8 <spi_format+0x164>)
    5e1a:	680d      	ldr	r5, [r1, #0]
    5e1c:	4015      	ands	r5, r2
    5e1e:	431d      	orrs	r5, r3
    5e20:	600d      	str	r5, [r1, #0]
    5e22:	2c00      	cmp	r4, #0
    5e24:	d032      	beq.n	5e8c <spi_format+0x148>
    5e26:	4e1c      	ldr	r6, [pc, #112]	; (5e98 <spi_format+0x154>)
    5e28:	4d1c      	ldr	r5, [pc, #112]	; (5e9c <spi_format+0x158>)
    5e2a:	e003      	b.n	5e34 <spi_format+0xf0>
    5e2c:	6822      	ldr	r2, [r4, #0]
    5e2e:	8b53      	ldrh	r3, [r2, #26]
    5e30:	0bdb      	lsrs	r3, r3, #15
    5e32:	d00a      	beq.n	5e4a <spi_format+0x106>
    5e34:	2c00      	cmp	r4, #0
    5e36:	d1f9      	bne.n	5e2c <spi_format+0xe8>
    5e38:	2244      	movs	r2, #68	; 0x44
    5e3a:	1c30      	adds	r0, r6, #0
    5e3c:	1c29      	adds	r1, r5, #0
    5e3e:	f7ff f8a3 	bl	4f88 <mbed_assert_internal>
    5e42:	6822      	ldr	r2, [r4, #0]
    5e44:	8b53      	ldrh	r3, [r2, #26]
    5e46:	0bdb      	lsrs	r3, r3, #15
    5e48:	d1f4      	bne.n	5e34 <spi_format+0xf0>
    5e4a:	6811      	ldr	r1, [r2, #0]
    5e4c:	3302      	adds	r3, #2
    5e4e:	430b      	orrs	r3, r1
    5e50:	6013      	str	r3, [r2, #0]
    5e52:	bc0c      	pop	{r2, r3}
    5e54:	4690      	mov	r8, r2
    5e56:	4699      	mov	r9, r3
    5e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5e5a:	221c      	movs	r2, #28
    5e5c:	6821      	ldr	r1, [r4, #0]
    5e5e:	680b      	ldr	r3, [r1, #0]
    5e60:	4393      	bics	r3, r2
    5e62:	3a10      	subs	r2, #16
    5e64:	4313      	orrs	r3, r2
    5e66:	600b      	str	r3, [r1, #0]
    5e68:	2301      	movs	r3, #1
    5e6a:	7123      	strb	r3, [r4, #4]
    5e6c:	4699      	mov	r9, r3
    5e6e:	e7a2      	b.n	5db6 <spi_format+0x72>
    5e70:	2296      	movs	r2, #150	; 0x96
    5e72:	4f09      	ldr	r7, [pc, #36]	; (5e98 <spi_format+0x154>)
    5e74:	4e09      	ldr	r6, [pc, #36]	; (5e9c <spi_format+0x158>)
    5e76:	1c38      	adds	r0, r7, #0
    5e78:	1c31      	adds	r1, r6, #0
    5e7a:	32ff      	adds	r2, #255	; 0xff
    5e7c:	f7ff f884 	bl	4f88 <mbed_assert_internal>
    5e80:	1c38      	adds	r0, r7, #0
    5e82:	1c31      	adds	r1, r6, #0
    5e84:	225e      	movs	r2, #94	; 0x5e
    5e86:	f7ff f87f 	bl	4f88 <mbed_assert_internal>
    5e8a:	e766      	b.n	5d5a <spi_format+0x16>
    5e8c:	4802      	ldr	r0, [pc, #8]	; (5e98 <spi_format+0x154>)
    5e8e:	4903      	ldr	r1, [pc, #12]	; (5e9c <spi_format+0x158>)
    5e90:	2252      	movs	r2, #82	; 0x52
    5e92:	f7ff f879 	bl	4f88 <mbed_assert_internal>
    5e96:	e7c6      	b.n	5e26 <spi_format+0xe2>
    5e98:	0000ef30 	.word	0x0000ef30
    5e9c:	0000f7b0 	.word	0x0000f7b0
    5ea0:	ffccffff 	.word	0xffccffff
    5ea4:	efffffff 	.word	0xefffffff
    5ea8:	dfffffff 	.word	0xdfffffff

00005eac <spi_frequency>:
    5eac:	b5f0      	push	{r4, r5, r6, r7, lr}
    5eae:	b083      	sub	sp, #12
    5eb0:	2300      	movs	r3, #0
    5eb2:	466a      	mov	r2, sp
    5eb4:	1c04      	adds	r4, r0, #0
    5eb6:	1c0d      	adds	r5, r1, #0
    5eb8:	80d3      	strh	r3, [r2, #6]
    5eba:	2800      	cmp	r0, #0
    5ebc:	d053      	beq.n	5f66 <spi_frequency+0xba>
    5ebe:	4f37      	ldr	r7, [pc, #220]	; (5f9c <spi_frequency+0xf0>)
    5ec0:	4e37      	ldr	r6, [pc, #220]	; (5fa0 <spi_frequency+0xf4>)
    5ec2:	e003      	b.n	5ecc <spi_frequency+0x20>
    5ec4:	6822      	ldr	r2, [r4, #0]
    5ec6:	8b53      	ldrh	r3, [r2, #26]
    5ec8:	0bdb      	lsrs	r3, r3, #15
    5eca:	d00a      	beq.n	5ee2 <spi_frequency+0x36>
    5ecc:	2c00      	cmp	r4, #0
    5ece:	d1f9      	bne.n	5ec4 <spi_frequency+0x18>
    5ed0:	2244      	movs	r2, #68	; 0x44
    5ed2:	1c38      	adds	r0, r7, #0
    5ed4:	1c31      	adds	r1, r6, #0
    5ed6:	f7ff f857 	bl	4f88 <mbed_assert_internal>
    5eda:	6822      	ldr	r2, [r4, #0]
    5edc:	8b53      	ldrh	r3, [r2, #26]
    5ede:	0bdb      	lsrs	r3, r3, #15
    5ee0:	d1f4      	bne.n	5ecc <spi_frequency+0x20>
    5ee2:	2102      	movs	r1, #2
    5ee4:	6813      	ldr	r3, [r2, #0]
    5ee6:	438b      	bics	r3, r1
    5ee8:	6013      	str	r3, [r2, #0]
    5eea:	6820      	ldr	r0, [r4, #0]
    5eec:	f7ff f9cc 	bl	5288 <_sercom_get_sercom_inst_index>
    5ef0:	3014      	adds	r0, #20
    5ef2:	b2c0      	uxtb	r0, r0
    5ef4:	f7fe faf8 	bl	44e8 <system_gclk_chan_get_hz>
    5ef8:	466b      	mov	r3, sp
    5efa:	1c01      	adds	r1, r0, #0
    5efc:	1d9a      	adds	r2, r3, #6
    5efe:	1c28      	adds	r0, r5, #0
    5f00:	f7ff f8c6 	bl	5090 <_sercom_get_sync_baud_val>
    5f04:	2800      	cmp	r0, #0
    5f06:	d11d      	bne.n	5f44 <spi_frequency+0x98>
    5f08:	466b      	mov	r3, sp
    5f0a:	6822      	ldr	r2, [r4, #0]
    5f0c:	799b      	ldrb	r3, [r3, #6]
    5f0e:	7313      	strb	r3, [r2, #12]
    5f10:	2c00      	cmp	r4, #0
    5f12:	d036      	beq.n	5f82 <spi_frequency+0xd6>
    5f14:	4e21      	ldr	r6, [pc, #132]	; (5f9c <spi_frequency+0xf0>)
    5f16:	4d22      	ldr	r5, [pc, #136]	; (5fa0 <spi_frequency+0xf4>)
    5f18:	e003      	b.n	5f22 <spi_frequency+0x76>
    5f1a:	6822      	ldr	r2, [r4, #0]
    5f1c:	8b53      	ldrh	r3, [r2, #26]
    5f1e:	0bdb      	lsrs	r3, r3, #15
    5f20:	d00a      	beq.n	5f38 <spi_frequency+0x8c>
    5f22:	2c00      	cmp	r4, #0
    5f24:	d1f9      	bne.n	5f1a <spi_frequency+0x6e>
    5f26:	2244      	movs	r2, #68	; 0x44
    5f28:	1c30      	adds	r0, r6, #0
    5f2a:	1c29      	adds	r1, r5, #0
    5f2c:	f7ff f82c 	bl	4f88 <mbed_assert_internal>
    5f30:	6822      	ldr	r2, [r4, #0]
    5f32:	8b53      	ldrh	r3, [r2, #26]
    5f34:	0bdb      	lsrs	r3, r3, #15
    5f36:	d1f4      	bne.n	5f22 <spi_frequency+0x76>
    5f38:	6811      	ldr	r1, [r2, #0]
    5f3a:	3302      	adds	r3, #2
    5f3c:	430b      	orrs	r3, r1
    5f3e:	6013      	str	r3, [r2, #0]
    5f40:	b003      	add	sp, #12
    5f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5f44:	2c00      	cmp	r4, #0
    5f46:	d022      	beq.n	5f8e <spi_frequency+0xe2>
    5f48:	4e14      	ldr	r6, [pc, #80]	; (5f9c <spi_frequency+0xf0>)
    5f4a:	4d15      	ldr	r5, [pc, #84]	; (5fa0 <spi_frequency+0xf4>)
    5f4c:	e003      	b.n	5f56 <spi_frequency+0xaa>
    5f4e:	6822      	ldr	r2, [r4, #0]
    5f50:	8b53      	ldrh	r3, [r2, #26]
    5f52:	0bdb      	lsrs	r3, r3, #15
    5f54:	d0f0      	beq.n	5f38 <spi_frequency+0x8c>
    5f56:	2c00      	cmp	r4, #0
    5f58:	d1f9      	bne.n	5f4e <spi_frequency+0xa2>
    5f5a:	1c30      	adds	r0, r6, #0
    5f5c:	1c29      	adds	r1, r5, #0
    5f5e:	2244      	movs	r2, #68	; 0x44
    5f60:	f7ff f812 	bl	4f88 <mbed_assert_internal>
    5f64:	e7f3      	b.n	5f4e <spi_frequency+0xa2>
    5f66:	22d0      	movs	r2, #208	; 0xd0
    5f68:	4f0c      	ldr	r7, [pc, #48]	; (5f9c <spi_frequency+0xf0>)
    5f6a:	4e0d      	ldr	r6, [pc, #52]	; (5fa0 <spi_frequency+0xf4>)
    5f6c:	1c38      	adds	r0, r7, #0
    5f6e:	1c31      	adds	r1, r6, #0
    5f70:	32ff      	adds	r2, #255	; 0xff
    5f72:	f7ff f809 	bl	4f88 <mbed_assert_internal>
    5f76:	1c38      	adds	r0, r7, #0
    5f78:	1c31      	adds	r1, r6, #0
    5f7a:	225e      	movs	r2, #94	; 0x5e
    5f7c:	f7ff f804 	bl	4f88 <mbed_assert_internal>
    5f80:	e79d      	b.n	5ebe <spi_frequency+0x12>
    5f82:	4806      	ldr	r0, [pc, #24]	; (5f9c <spi_frequency+0xf0>)
    5f84:	4906      	ldr	r1, [pc, #24]	; (5fa0 <spi_frequency+0xf4>)
    5f86:	2252      	movs	r2, #82	; 0x52
    5f88:	f7fe fffe 	bl	4f88 <mbed_assert_internal>
    5f8c:	e7c2      	b.n	5f14 <spi_frequency+0x68>
    5f8e:	4803      	ldr	r0, [pc, #12]	; (5f9c <spi_frequency+0xf0>)
    5f90:	4903      	ldr	r1, [pc, #12]	; (5fa0 <spi_frequency+0xf4>)
    5f92:	2252      	movs	r2, #82	; 0x52
    5f94:	f7fe fff8 	bl	4f88 <mbed_assert_internal>
    5f98:	e7d6      	b.n	5f48 <spi_frequency+0x9c>
    5f9a:	46c0      	nop			; (mov r8, r8)
    5f9c:	0000ef30 	.word	0x0000ef30
    5fa0:	0000f7b0 	.word	0x0000f7b0

00005fa4 <spi_master_write>:
    5fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
    5fa6:	4647      	mov	r7, r8
    5fa8:	1c04      	adds	r4, r0, #0
    5faa:	b480      	push	{r7}
    5fac:	1c0e      	adds	r6, r1, #0
    5fae:	2800      	cmp	r0, #0
    5fb0:	d052      	beq.n	6058 <spi_master_write+0xb4>
    5fb2:	7a63      	ldrb	r3, [r4, #9]
    5fb4:	2b05      	cmp	r3, #5
    5fb6:	d045      	beq.n	6044 <spi_master_write+0xa0>
    5fb8:	4b3a      	ldr	r3, [pc, #232]	; (60a4 <spi_master_write+0x100>)
    5fba:	4f3b      	ldr	r7, [pc, #236]	; (60a8 <spi_master_write+0x104>)
    5fbc:	4698      	mov	r8, r3
    5fbe:	2501      	movs	r5, #1
    5fc0:	e003      	b.n	5fca <spi_master_write+0x26>
    5fc2:	6823      	ldr	r3, [r4, #0]
    5fc4:	7e1a      	ldrb	r2, [r3, #24]
    5fc6:	4215      	tst	r5, r2
    5fc8:	d10a      	bne.n	5fe0 <spi_master_write+0x3c>
    5fca:	2c00      	cmp	r4, #0
    5fcc:	d1f9      	bne.n	5fc2 <spi_master_write+0x1e>
    5fce:	2273      	movs	r2, #115	; 0x73
    5fd0:	4640      	mov	r0, r8
    5fd2:	1c39      	adds	r1, r7, #0
    5fd4:	f7fe ffd8 	bl	4f88 <mbed_assert_internal>
    5fd8:	6823      	ldr	r3, [r4, #0]
    5fda:	7e1a      	ldrb	r2, [r3, #24]
    5fdc:	4215      	tst	r5, r2
    5fde:	d0f4      	beq.n	5fca <spi_master_write+0x26>
    5fe0:	2c00      	cmp	r4, #0
    5fe2:	d043      	beq.n	606c <spi_master_write+0xc8>
    5fe4:	7e1a      	ldrb	r2, [r3, #24]
    5fe6:	07d2      	lsls	r2, r2, #31
    5fe8:	d503      	bpl.n	5ff2 <spi_master_write+0x4e>
    5fea:	05f6      	lsls	r6, r6, #23
    5fec:	0df6      	lsrs	r6, r6, #23
    5fee:	629e      	str	r6, [r3, #40]	; 0x28
    5ff0:	6823      	ldr	r3, [r4, #0]
    5ff2:	685b      	ldr	r3, [r3, #4]
    5ff4:	039b      	lsls	r3, r3, #14
    5ff6:	d525      	bpl.n	6044 <spi_master_write+0xa0>
    5ff8:	4f2a      	ldr	r7, [pc, #168]	; (60a4 <spi_master_write+0x100>)
    5ffa:	4e2b      	ldr	r6, [pc, #172]	; (60a8 <spi_master_write+0x104>)
    5ffc:	2504      	movs	r5, #4
    5ffe:	e003      	b.n	6008 <spi_master_write+0x64>
    6000:	6823      	ldr	r3, [r4, #0]
    6002:	7e1a      	ldrb	r2, [r3, #24]
    6004:	4215      	tst	r5, r2
    6006:	d10a      	bne.n	601e <spi_master_write+0x7a>
    6008:	2c00      	cmp	r4, #0
    600a:	d1f9      	bne.n	6000 <spi_master_write+0x5c>
    600c:	227c      	movs	r2, #124	; 0x7c
    600e:	1c38      	adds	r0, r7, #0
    6010:	1c31      	adds	r1, r6, #0
    6012:	f7fe ffb9 	bl	4f88 <mbed_assert_internal>
    6016:	6823      	ldr	r3, [r4, #0]
    6018:	7e1a      	ldrb	r2, [r3, #24]
    601a:	4215      	tst	r5, r2
    601c:	d0f4      	beq.n	6008 <spi_master_write+0x64>
    601e:	2c00      	cmp	r4, #0
    6020:	d032      	beq.n	6088 <spi_master_write+0xe4>
    6022:	2204      	movs	r2, #4
    6024:	7e19      	ldrb	r1, [r3, #24]
    6026:	2000      	movs	r0, #0
    6028:	420a      	tst	r2, r1
    602a:	d00c      	beq.n	6046 <spi_master_write+0xa2>
    602c:	8b59      	ldrh	r1, [r3, #26]
    602e:	420a      	tst	r2, r1
    6030:	d10c      	bne.n	604c <spi_master_write+0xa8>
    6032:	2107      	movs	r1, #7
    6034:	685a      	ldr	r2, [r3, #4]
    6036:	400a      	ands	r2, r1
    6038:	2a01      	cmp	r2, #1
    603a:	d013      	beq.n	6064 <spi_master_write+0xc0>
    603c:	20ff      	movs	r0, #255	; 0xff
    603e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6040:	4018      	ands	r0, r3
    6042:	e000      	b.n	6046 <spi_master_write+0xa2>
    6044:	2000      	movs	r0, #0
    6046:	bc04      	pop	{r2}
    6048:	4690      	mov	r8, r2
    604a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    604c:	8b59      	ldrh	r1, [r3, #26]
    604e:	430a      	orrs	r2, r1
    6050:	b292      	uxth	r2, r2
    6052:	835a      	strh	r2, [r3, #26]
    6054:	6823      	ldr	r3, [r4, #0]
    6056:	e7ec      	b.n	6032 <spi_master_write+0x8e>
    6058:	4812      	ldr	r0, [pc, #72]	; (60a4 <spi_master_write+0x100>)
    605a:	4913      	ldr	r1, [pc, #76]	; (60a8 <spi_master_write+0x104>)
    605c:	4a13      	ldr	r2, [pc, #76]	; (60ac <spi_master_write+0x108>)
    605e:	f7fe ff93 	bl	4f88 <mbed_assert_internal>
    6062:	e7a6      	b.n	5fb2 <spi_master_write+0xe>
    6064:	6a98      	ldr	r0, [r3, #40]	; 0x28
    6066:	05c0      	lsls	r0, r0, #23
    6068:	0dc0      	lsrs	r0, r0, #23
    606a:	e7ec      	b.n	6046 <spi_master_write+0xa2>
    606c:	4f0d      	ldr	r7, [pc, #52]	; (60a4 <spi_master_write+0x100>)
    606e:	4d0e      	ldr	r5, [pc, #56]	; (60a8 <spi_master_write+0x104>)
    6070:	1c38      	adds	r0, r7, #0
    6072:	1c29      	adds	r1, r5, #0
    6074:	2285      	movs	r2, #133	; 0x85
    6076:	f7fe ff87 	bl	4f88 <mbed_assert_internal>
    607a:	1c38      	adds	r0, r7, #0
    607c:	1c29      	adds	r1, r5, #0
    607e:	2273      	movs	r2, #115	; 0x73
    6080:	f7fe ff82 	bl	4f88 <mbed_assert_internal>
    6084:	6823      	ldr	r3, [r4, #0]
    6086:	e7ad      	b.n	5fe4 <spi_master_write+0x40>
    6088:	4e06      	ldr	r6, [pc, #24]	; (60a4 <spi_master_write+0x100>)
    608a:	4d07      	ldr	r5, [pc, #28]	; (60a8 <spi_master_write+0x104>)
    608c:	1c30      	adds	r0, r6, #0
    608e:	1c29      	adds	r1, r5, #0
    6090:	2296      	movs	r2, #150	; 0x96
    6092:	f7fe ff79 	bl	4f88 <mbed_assert_internal>
    6096:	1c30      	adds	r0, r6, #0
    6098:	1c29      	adds	r1, r5, #0
    609a:	227c      	movs	r2, #124	; 0x7c
    609c:	f7fe ff74 	bl	4f88 <mbed_assert_internal>
    60a0:	6823      	ldr	r3, [r4, #0]
    60a2:	e7be      	b.n	6022 <spi_master_write+0x7e>
    60a4:	0000ef30 	.word	0x0000ef30
    60a8:	0000f7b0 	.word	0x0000f7b0
    60ac:	00000212 	.word	0x00000212

000060b0 <_ZN4mbed8FileBaseD1Ev>:
    60b0:	4b0a      	ldr	r3, [pc, #40]	; (60dc <_ZN4mbed8FileBaseD1Ev+0x2c>)
    60b2:	3308      	adds	r3, #8
    60b4:	6003      	str	r3, [r0, #0]
    60b6:	6883      	ldr	r3, [r0, #8]
    60b8:	2b00      	cmp	r3, #0
    60ba:	d00a      	beq.n	60d2 <_ZN4mbed8FileBaseD1Ev+0x22>
    60bc:	4b08      	ldr	r3, [pc, #32]	; (60e0 <_ZN4mbed8FileBaseD1Ev+0x30>)
    60be:	681a      	ldr	r2, [r3, #0]
    60c0:	4282      	cmp	r2, r0
    60c2:	d101      	bne.n	60c8 <_ZN4mbed8FileBaseD1Ev+0x18>
    60c4:	e006      	b.n	60d4 <_ZN4mbed8FileBaseD1Ev+0x24>
    60c6:	1c1a      	adds	r2, r3, #0
    60c8:	6853      	ldr	r3, [r2, #4]
    60ca:	4283      	cmp	r3, r0
    60cc:	d1fb      	bne.n	60c6 <_ZN4mbed8FileBaseD1Ev+0x16>
    60ce:	6843      	ldr	r3, [r0, #4]
    60d0:	6053      	str	r3, [r2, #4]
    60d2:	4770      	bx	lr
    60d4:	6842      	ldr	r2, [r0, #4]
    60d6:	601a      	str	r2, [r3, #0]
    60d8:	e7fb      	b.n	60d2 <_ZN4mbed8FileBaseD1Ev+0x22>
    60da:	46c0      	nop			; (mov r8, r8)
    60dc:	0000f828 	.word	0x0000f828
    60e0:	20004700 	.word	0x20004700

000060e4 <_ZN4mbed8FileBaseD0Ev>:
    60e4:	4b0d      	ldr	r3, [pc, #52]	; (611c <_ZN4mbed8FileBaseD0Ev+0x38>)
    60e6:	b510      	push	{r4, lr}
    60e8:	3308      	adds	r3, #8
    60ea:	6003      	str	r3, [r0, #0]
    60ec:	6883      	ldr	r3, [r0, #8]
    60ee:	1c04      	adds	r4, r0, #0
    60f0:	2b00      	cmp	r3, #0
    60f2:	d00a      	beq.n	610a <_ZN4mbed8FileBaseD0Ev+0x26>
    60f4:	4b0a      	ldr	r3, [pc, #40]	; (6120 <_ZN4mbed8FileBaseD0Ev+0x3c>)
    60f6:	681a      	ldr	r2, [r3, #0]
    60f8:	4290      	cmp	r0, r2
    60fa:	d101      	bne.n	6100 <_ZN4mbed8FileBaseD0Ev+0x1c>
    60fc:	e00a      	b.n	6114 <_ZN4mbed8FileBaseD0Ev+0x30>
    60fe:	1c1a      	adds	r2, r3, #0
    6100:	6853      	ldr	r3, [r2, #4]
    6102:	429c      	cmp	r4, r3
    6104:	d1fb      	bne.n	60fe <_ZN4mbed8FileBaseD0Ev+0x1a>
    6106:	6863      	ldr	r3, [r4, #4]
    6108:	6053      	str	r3, [r2, #4]
    610a:	1c20      	adds	r0, r4, #0
    610c:	f000 fab5 	bl	667a <_ZdlPv>
    6110:	1c20      	adds	r0, r4, #0
    6112:	bd10      	pop	{r4, pc}
    6114:	6842      	ldr	r2, [r0, #4]
    6116:	601a      	str	r2, [r3, #0]
    6118:	e7f7      	b.n	610a <_ZN4mbed8FileBaseD0Ev+0x26>
    611a:	46c0      	nop			; (mov r8, r8)
    611c:	0000f828 	.word	0x0000f828
    6120:	20004700 	.word	0x20004700

00006124 <_ZN4mbed8FileBaseC1EPKcNS_8PathTypeE>:
    6124:	4b06      	ldr	r3, [pc, #24]	; (6140 <_ZN4mbed8FileBaseC1EPKcNS_8PathTypeE+0x1c>)
    6126:	6081      	str	r1, [r0, #8]
    6128:	3308      	adds	r3, #8
    612a:	6003      	str	r3, [r0, #0]
    612c:	2300      	movs	r3, #0
    612e:	7302      	strb	r2, [r0, #12]
    6130:	6043      	str	r3, [r0, #4]
    6132:	2900      	cmp	r1, #0
    6134:	d003      	beq.n	613e <_ZN4mbed8FileBaseC1EPKcNS_8PathTypeE+0x1a>
    6136:	4b03      	ldr	r3, [pc, #12]	; (6144 <_ZN4mbed8FileBaseC1EPKcNS_8PathTypeE+0x20>)
    6138:	681a      	ldr	r2, [r3, #0]
    613a:	6018      	str	r0, [r3, #0]
    613c:	6042      	str	r2, [r0, #4]
    613e:	4770      	bx	lr
    6140:	0000f828 	.word	0x0000f828
    6144:	20004700 	.word	0x20004700

00006148 <_ZN4mbed8FileBase6lookupEPKcj>:
    6148:	4b0e      	ldr	r3, [pc, #56]	; (6184 <_ZN4mbed8FileBase6lookupEPKcj+0x3c>)
    614a:	b570      	push	{r4, r5, r6, lr}
    614c:	681c      	ldr	r4, [r3, #0]
    614e:	1c06      	adds	r6, r0, #0
    6150:	1c0d      	adds	r5, r1, #0
    6152:	2c00      	cmp	r4, #0
    6154:	d103      	bne.n	615e <_ZN4mbed8FileBase6lookupEPKcj+0x16>
    6156:	e012      	b.n	617e <_ZN4mbed8FileBase6lookupEPKcj+0x36>
    6158:	6864      	ldr	r4, [r4, #4]
    615a:	2c00      	cmp	r4, #0
    615c:	d00f      	beq.n	617e <_ZN4mbed8FileBase6lookupEPKcj+0x36>
    615e:	68a0      	ldr	r0, [r4, #8]
    6160:	2800      	cmp	r0, #0
    6162:	d0f9      	beq.n	6158 <_ZN4mbed8FileBase6lookupEPKcj+0x10>
    6164:	1c31      	adds	r1, r6, #0
    6166:	1c2a      	adds	r2, r5, #0
    6168:	f005 fa27 	bl	b5ba <strncmp>
    616c:	2800      	cmp	r0, #0
    616e:	d1f3      	bne.n	6158 <_ZN4mbed8FileBase6lookupEPKcj+0x10>
    6170:	68a0      	ldr	r0, [r4, #8]
    6172:	f005 fa1b 	bl	b5ac <strlen>
    6176:	42a8      	cmp	r0, r5
    6178:	d1ee      	bne.n	6158 <_ZN4mbed8FileBase6lookupEPKcj+0x10>
    617a:	1c20      	adds	r0, r4, #0
    617c:	e000      	b.n	6180 <_ZN4mbed8FileBase6lookupEPKcj+0x38>
    617e:	2000      	movs	r0, #0
    6180:	bd70      	pop	{r4, r5, r6, pc}
    6182:	46c0      	nop			; (mov r8, r8)
    6184:	20004700 	.word	0x20004700

00006188 <_ZN4mbed8FileBase11getPathTypeEv>:
    6188:	7b00      	ldrb	r0, [r0, #12]
    618a:	4770      	bx	lr

0000618c <_ZN4mbed8FileLikeC1EPKc>:
    618c:	4b07      	ldr	r3, [pc, #28]	; (61ac <_ZN4mbed8FileLikeC1EPKc+0x20>)
    618e:	b510      	push	{r4, lr}
    6190:	2200      	movs	r2, #0
    6192:	1c04      	adds	r4, r0, #0
    6194:	c008      	stmia	r0!, {r3}
    6196:	f7ff ffc5 	bl	6124 <_ZN4mbed8FileBaseC1EPKcNS_8PathTypeE>
    619a:	4b05      	ldr	r3, [pc, #20]	; (61b0 <_ZN4mbed8FileLikeC1EPKc+0x24>)
    619c:	1c20      	adds	r0, r4, #0
    619e:	1c1a      	adds	r2, r3, #0
    61a0:	3334      	adds	r3, #52	; 0x34
    61a2:	3208      	adds	r2, #8
    61a4:	6022      	str	r2, [r4, #0]
    61a6:	6063      	str	r3, [r4, #4]
    61a8:	bd10      	pop	{r4, pc}
    61aa:	46c0      	nop			; (mov r8, r8)
    61ac:	0000eef0 	.word	0x0000eef0
    61b0:	0000f838 	.word	0x0000f838

000061b4 <_ZN4mbed8FileLikeD1Ev>:
    61b4:	4b07      	ldr	r3, [pc, #28]	; (61d4 <_ZN4mbed8FileLikeD1Ev+0x20>)
    61b6:	b510      	push	{r4, lr}
    61b8:	1c1a      	adds	r2, r3, #0
    61ba:	1c04      	adds	r4, r0, #0
    61bc:	3208      	adds	r2, #8
    61be:	3334      	adds	r3, #52	; 0x34
    61c0:	6002      	str	r2, [r0, #0]
    61c2:	6043      	str	r3, [r0, #4]
    61c4:	3004      	adds	r0, #4
    61c6:	f7ff ff73 	bl	60b0 <_ZN4mbed8FileBaseD1Ev>
    61ca:	1c20      	adds	r0, r4, #0
    61cc:	f7fd fda6 	bl	3d1c <_ZN4mbed10FileHandleD1Ev>
    61d0:	1c20      	adds	r0, r4, #0
    61d2:	bd10      	pop	{r4, pc}
    61d4:	0000f838 	.word	0x0000f838

000061d8 <us_ticker_irq_handler>:
    61d8:	b508      	push	{r3, lr}
    61da:	4802      	ldr	r0, [pc, #8]	; (61e4 <us_ticker_irq_handler+0xc>)
    61dc:	f000 fa20 	bl	6620 <ticker_irq_handler>
    61e0:	bd08      	pop	{r3, pc}
    61e2:	46c0      	nop			; (mov r8, r8)
    61e4:	0000f888 	.word	0x0000f888

000061e8 <port_pin_set_config>:
    61e8:	2280      	movs	r2, #128	; 0x80
    61ea:	b500      	push	{lr}
    61ec:	b083      	sub	sp, #12
    61ee:	ab01      	add	r3, sp, #4
    61f0:	701a      	strb	r2, [r3, #0]
    61f2:	780a      	ldrb	r2, [r1, #0]
    61f4:	705a      	strb	r2, [r3, #1]
    61f6:	784a      	ldrb	r2, [r1, #1]
    61f8:	709a      	strb	r2, [r3, #2]
    61fa:	788a      	ldrb	r2, [r1, #2]
    61fc:	1c19      	adds	r1, r3, #0
    61fe:	70da      	strb	r2, [r3, #3]
    6200:	f7fe f848 	bl	4294 <system_pinmux_pin_set_config>
    6204:	b003      	add	sp, #12
    6206:	bd00      	pop	{pc}

00006208 <tc_register_callback>:
    6208:	1c93      	adds	r3, r2, #2
    620a:	009b      	lsls	r3, r3, #2
    620c:	5019      	str	r1, [r3, r0]
    620e:	2a02      	cmp	r2, #2
    6210:	d009      	beq.n	6226 <tc_register_callback+0x1e>
    6212:	2a03      	cmp	r2, #3
    6214:	d00c      	beq.n	6230 <tc_register_callback+0x28>
    6216:	2301      	movs	r3, #1
    6218:	4093      	lsls	r3, r2
    621a:	1c1a      	adds	r2, r3, #0
    621c:	7e03      	ldrb	r3, [r0, #24]
    621e:	431a      	orrs	r2, r3
    6220:	7602      	strb	r2, [r0, #24]
    6222:	2000      	movs	r0, #0
    6224:	4770      	bx	lr
    6226:	2310      	movs	r3, #16
    6228:	7e02      	ldrb	r2, [r0, #24]
    622a:	4313      	orrs	r3, r2
    622c:	7603      	strb	r3, [r0, #24]
    622e:	e7f8      	b.n	6222 <tc_register_callback+0x1a>
    6230:	2320      	movs	r3, #32
    6232:	7e02      	ldrb	r2, [r0, #24]
    6234:	4313      	orrs	r3, r2
    6236:	7603      	strb	r3, [r0, #24]
    6238:	e7f3      	b.n	6222 <tc_register_callback+0x1a>
    623a:	46c0      	nop			; (mov r8, r8)

0000623c <_tc_interrupt_handler>:
    623c:	b570      	push	{r4, r5, r6, lr}
    623e:	2601      	movs	r6, #1
    6240:	4b15      	ldr	r3, [pc, #84]	; (6298 <_tc_interrupt_handler+0x5c>)
    6242:	0080      	lsls	r0, r0, #2
    6244:	58c5      	ldr	r5, [r0, r3]
    6246:	682b      	ldr	r3, [r5, #0]
    6248:	7e2c      	ldrb	r4, [r5, #24]
    624a:	7b9b      	ldrb	r3, [r3, #14]
    624c:	401c      	ands	r4, r3
    624e:	7e6b      	ldrb	r3, [r5, #25]
    6250:	401c      	ands	r4, r3
    6252:	4226      	tst	r6, r4
    6254:	d11a      	bne.n	628c <_tc_interrupt_handler+0x50>
    6256:	2602      	movs	r6, #2
    6258:	4226      	tst	r6, r4
    625a:	d111      	bne.n	6280 <_tc_interrupt_handler+0x44>
    625c:	2610      	movs	r6, #16
    625e:	4226      	tst	r6, r4
    6260:	d108      	bne.n	6274 <_tc_interrupt_handler+0x38>
    6262:	2620      	movs	r6, #32
    6264:	4226      	tst	r6, r4
    6266:	d004      	beq.n	6272 <_tc_interrupt_handler+0x36>
    6268:	696b      	ldr	r3, [r5, #20]
    626a:	1c28      	adds	r0, r5, #0
    626c:	4798      	blx	r3
    626e:	682b      	ldr	r3, [r5, #0]
    6270:	739e      	strb	r6, [r3, #14]
    6272:	bd70      	pop	{r4, r5, r6, pc}
    6274:	692b      	ldr	r3, [r5, #16]
    6276:	1c28      	adds	r0, r5, #0
    6278:	4798      	blx	r3
    627a:	682b      	ldr	r3, [r5, #0]
    627c:	739e      	strb	r6, [r3, #14]
    627e:	e7f0      	b.n	6262 <_tc_interrupt_handler+0x26>
    6280:	68eb      	ldr	r3, [r5, #12]
    6282:	1c28      	adds	r0, r5, #0
    6284:	4798      	blx	r3
    6286:	682b      	ldr	r3, [r5, #0]
    6288:	739e      	strb	r6, [r3, #14]
    628a:	e7e7      	b.n	625c <_tc_interrupt_handler+0x20>
    628c:	68ab      	ldr	r3, [r5, #8]
    628e:	1c28      	adds	r0, r5, #0
    6290:	4798      	blx	r3
    6292:	682b      	ldr	r3, [r5, #0]
    6294:	739e      	strb	r6, [r3, #14]
    6296:	e7de      	b.n	6256 <_tc_interrupt_handler+0x1a>
    6298:	200047bc 	.word	0x200047bc

0000629c <TC3_Handler>:
    629c:	b508      	push	{r3, lr}
    629e:	2000      	movs	r0, #0
    62a0:	f7ff ffcc 	bl	623c <_tc_interrupt_handler>
    62a4:	bd08      	pop	{r3, pc}
    62a6:	46c0      	nop			; (mov r8, r8)

000062a8 <TC4_Handler>:
    62a8:	b508      	push	{r3, lr}
    62aa:	2001      	movs	r0, #1
    62ac:	f7ff ffc6 	bl	623c <_tc_interrupt_handler>
    62b0:	bd08      	pop	{r3, pc}
    62b2:	46c0      	nop			; (mov r8, r8)

000062b4 <TC5_Handler>:
    62b4:	b508      	push	{r3, lr}
    62b6:	2002      	movs	r0, #2
    62b8:	f7ff ffc0 	bl	623c <_tc_interrupt_handler>
    62bc:	bd08      	pop	{r3, pc}
    62be:	46c0      	nop			; (mov r8, r8)

000062c0 <_tc_get_inst_index>:
    62c0:	4b0e      	ldr	r3, [pc, #56]	; (62fc <_tc_get_inst_index+0x3c>)
    62c2:	1c01      	adds	r1, r0, #0
    62c4:	1c18      	adds	r0, r3, #0
    62c6:	b570      	push	{r4, r5, r6, lr}
    62c8:	b084      	sub	sp, #16
    62ca:	aa01      	add	r2, sp, #4
    62cc:	c870      	ldmia	r0!, {r4, r5, r6}
    62ce:	c270      	stmia	r2!, {r4, r5, r6}
    62d0:	9a01      	ldr	r2, [sp, #4]
    62d2:	428a      	cmp	r2, r1
    62d4:	d008      	beq.n	62e8 <_tc_get_inst_index+0x28>
    62d6:	685a      	ldr	r2, [r3, #4]
    62d8:	428a      	cmp	r2, r1
    62da:	d008      	beq.n	62ee <_tc_get_inst_index+0x2e>
    62dc:	689b      	ldr	r3, [r3, #8]
    62de:	2000      	movs	r0, #0
    62e0:	428b      	cmp	r3, r1
    62e2:	d007      	beq.n	62f4 <_tc_get_inst_index+0x34>
    62e4:	b004      	add	sp, #16
    62e6:	bd70      	pop	{r4, r5, r6, pc}
    62e8:	2000      	movs	r0, #0
    62ea:	b2c0      	uxtb	r0, r0
    62ec:	e7fa      	b.n	62e4 <_tc_get_inst_index+0x24>
    62ee:	2001      	movs	r0, #1
    62f0:	b2c0      	uxtb	r0, r0
    62f2:	e7f7      	b.n	62e4 <_tc_get_inst_index+0x24>
    62f4:	3002      	adds	r0, #2
    62f6:	b2c0      	uxtb	r0, r0
    62f8:	e7f4      	b.n	62e4 <_tc_get_inst_index+0x24>
    62fa:	46c0      	nop			; (mov r8, r8)
    62fc:	0000f890 	.word	0x0000f890

00006300 <tc_init>:
    6300:	b5f0      	push	{r4, r5, r6, r7, lr}
    6302:	4657      	mov	r7, sl
    6304:	464e      	mov	r6, r9
    6306:	4645      	mov	r5, r8
    6308:	4ca3      	ldr	r4, [pc, #652]	; (6598 <tc_init+0x298>)
    630a:	4691      	mov	r9, r2
    630c:	1c22      	adds	r2, r4, #0
    630e:	b4e0      	push	{r5, r6, r7}
    6310:	b086      	sub	sp, #24
    6312:	ab03      	add	r3, sp, #12
    6314:	1c05      	adds	r5, r0, #0
    6316:	1c0e      	adds	r6, r1, #0
    6318:	469a      	mov	sl, r3
    631a:	ca83      	ldmia	r2!, {r0, r1, r7}
    631c:	c383      	stmia	r3!, {r0, r1, r7}
    631e:	9b03      	ldr	r3, [sp, #12]
    6320:	429e      	cmp	r6, r3
    6322:	d100      	bne.n	6326 <tc_init+0x26>
    6324:	e10c      	b.n	6540 <tc_init+0x240>
    6326:	6863      	ldr	r3, [r4, #4]
    6328:	429e      	cmp	r6, r3
    632a:	d100      	bne.n	632e <tc_init+0x2e>
    632c:	e10b      	b.n	6546 <tc_init+0x246>
    632e:	2300      	movs	r3, #0
    6330:	4698      	mov	r8, r3
    6332:	68a3      	ldr	r3, [r4, #8]
    6334:	429e      	cmp	r6, r3
    6336:	d100      	bne.n	633a <tc_init+0x3a>
    6338:	e108      	b.n	654c <tc_init+0x24c>
    633a:	1c21      	adds	r1, r4, #0
    633c:	2203      	movs	r2, #3
    633e:	310c      	adds	r1, #12
    6340:	a801      	add	r0, sp, #4
    6342:	f003 fdb0 	bl	9ea6 <memcpy>
    6346:	1c21      	adds	r1, r4, #0
    6348:	2206      	movs	r2, #6
    634a:	3110      	adds	r1, #16
    634c:	4650      	mov	r0, sl
    634e:	f003 fdaa 	bl	9ea6 <memcpy>
    6352:	2300      	movs	r3, #0
    6354:	60ab      	str	r3, [r5, #8]
    6356:	60eb      	str	r3, [r5, #12]
    6358:	612b      	str	r3, [r5, #16]
    635a:	616b      	str	r3, [r5, #20]
    635c:	762b      	strb	r3, [r5, #24]
    635e:	766b      	strb	r3, [r5, #25]
    6360:	4643      	mov	r3, r8
    6362:	4a8e      	ldr	r2, [pc, #568]	; (659c <tc_init+0x29c>)
    6364:	009b      	lsls	r3, r3, #2
    6366:	509d      	str	r5, [r3, r2]
    6368:	464b      	mov	r3, r9
    636a:	602e      	str	r6, [r5, #0]
    636c:	789b      	ldrb	r3, [r3, #2]
    636e:	2b08      	cmp	r3, #8
    6370:	d00b      	beq.n	638a <tc_init+0x8a>
    6372:	712b      	strb	r3, [r5, #4]
    6374:	8833      	ldrh	r3, [r6, #0]
    6376:	2201      	movs	r2, #1
    6378:	2005      	movs	r0, #5
    637a:	07db      	lsls	r3, r3, #31
    637c:	d50a      	bpl.n	6394 <tc_init+0x94>
    637e:	b006      	add	sp, #24
    6380:	bc1c      	pop	{r2, r3, r4}
    6382:	4690      	mov	r8, r2
    6384:	4699      	mov	r9, r3
    6386:	46a2      	mov	sl, r4
    6388:	bdf0      	pop	{r4, r5, r6, r7, pc}
    638a:	4642      	mov	r2, r8
    638c:	2017      	movs	r0, #23
    638e:	07d2      	lsls	r2, r2, #31
    6390:	d5f5      	bpl.n	637e <tc_init+0x7e>
    6392:	e7ee      	b.n	6372 <tc_init+0x72>
    6394:	7bf3      	ldrb	r3, [r6, #15]
    6396:	3017      	adds	r0, #23
    6398:	06db      	lsls	r3, r3, #27
    639a:	d4f0      	bmi.n	637e <tc_init+0x7e>
    639c:	2102      	movs	r1, #2
    639e:	8833      	ldrh	r3, [r6, #0]
    63a0:	400b      	ands	r3, r1
    63a2:	d1ec      	bne.n	637e <tc_init+0x7e>
    63a4:	4649      	mov	r1, r9
    63a6:	7c09      	ldrb	r1, [r1, #16]
    63a8:	2900      	cmp	r1, #0
    63aa:	d000      	beq.n	63ae <tc_init+0xae>
    63ac:	e0d1      	b.n	6552 <tc_init+0x252>
    63ae:	464b      	mov	r3, r9
    63b0:	7f1b      	ldrb	r3, [r3, #28]
    63b2:	2b00      	cmp	r3, #0
    63b4:	d000      	beq.n	63b8 <tc_init+0xb8>
    63b6:	e0d8      	b.n	656a <tc_init+0x26a>
    63b8:	4641      	mov	r1, r8
    63ba:	4650      	mov	r0, sl
    63bc:	4a78      	ldr	r2, [pc, #480]	; (65a0 <tc_init+0x2a0>)
    63be:	0049      	lsls	r1, r1, #1
    63c0:	6a13      	ldr	r3, [r2, #32]
    63c2:	5a41      	ldrh	r1, [r0, r1]
    63c4:	430b      	orrs	r3, r1
    63c6:	6213      	str	r3, [r2, #32]
    63c8:	464b      	mov	r3, r9
    63ca:	789b      	ldrb	r3, [r3, #2]
    63cc:	2b08      	cmp	r3, #8
    63ce:	d100      	bne.n	63d2 <tc_init+0xd2>
    63d0:	e0da      	b.n	6588 <tc_init+0x288>
    63d2:	464b      	mov	r3, r9
    63d4:	466a      	mov	r2, sp
    63d6:	781b      	ldrb	r3, [r3, #0]
    63d8:	4669      	mov	r1, sp
    63da:	7013      	strb	r3, [r2, #0]
    63dc:	466b      	mov	r3, sp
    63de:	4642      	mov	r2, r8
    63e0:	3304      	adds	r3, #4
    63e2:	5c9c      	ldrb	r4, [r3, r2]
    63e4:	1c20      	adds	r0, r4, #0
    63e6:	f7fe f85f 	bl	44a8 <system_gclk_chan_set_config>
    63ea:	1c20      	adds	r0, r4, #0
    63ec:	f7fe f81e 	bl	442c <system_gclk_chan_enable>
    63f0:	464b      	mov	r3, r9
    63f2:	464a      	mov	r2, r9
    63f4:	8898      	ldrh	r0, [r3, #4]
    63f6:	891b      	ldrh	r3, [r3, #8]
    63f8:	4303      	orrs	r3, r0
    63fa:	7990      	ldrb	r0, [r2, #6]
    63fc:	7892      	ldrb	r2, [r2, #2]
    63fe:	4310      	orrs	r0, r2
    6400:	4318      	orrs	r0, r3
    6402:	464b      	mov	r3, r9
    6404:	785b      	ldrb	r3, [r3, #1]
    6406:	2b00      	cmp	r3, #0
    6408:	d002      	beq.n	6410 <tc_init+0x110>
    640a:	2380      	movs	r3, #128	; 0x80
    640c:	011b      	lsls	r3, r3, #4
    640e:	4318      	orrs	r0, r3
    6410:	227f      	movs	r2, #127	; 0x7f
    6412:	6829      	ldr	r1, [r5, #0]
    6414:	7bcb      	ldrb	r3, [r1, #15]
    6416:	4393      	bics	r3, r2
    6418:	d1fc      	bne.n	6414 <tc_init+0x114>
    641a:	464b      	mov	r3, r9
    641c:	8030      	strh	r0, [r6, #0]
    641e:	7b58      	ldrb	r0, [r3, #13]
    6420:	1e43      	subs	r3, r0, #1
    6422:	4198      	sbcs	r0, r3
    6424:	464b      	mov	r3, r9
    6426:	7b9b      	ldrb	r3, [r3, #14]
    6428:	0080      	lsls	r0, r0, #2
    642a:	2b00      	cmp	r3, #0
    642c:	d001      	beq.n	6432 <tc_init+0x132>
    642e:	2301      	movs	r3, #1
    6430:	4318      	orrs	r0, r3
    6432:	227f      	movs	r2, #127	; 0x7f
    6434:	6829      	ldr	r1, [r5, #0]
    6436:	7bcb      	ldrb	r3, [r1, #15]
    6438:	4393      	bics	r3, r2
    643a:	d1fc      	bne.n	6436 <tc_init+0x136>
    643c:	33ff      	adds	r3, #255	; 0xff
    643e:	7133      	strb	r3, [r6, #4]
    6440:	2800      	cmp	r0, #0
    6442:	d005      	beq.n	6450 <tc_init+0x150>
    6444:	227f      	movs	r2, #127	; 0x7f
    6446:	6829      	ldr	r1, [r5, #0]
    6448:	7bcb      	ldrb	r3, [r1, #15]
    644a:	4393      	bics	r3, r2
    644c:	d1fc      	bne.n	6448 <tc_init+0x148>
    644e:	7170      	strb	r0, [r6, #5]
    6450:	464b      	mov	r3, r9
    6452:	7a98      	ldrb	r0, [r3, #10]
    6454:	7adb      	ldrb	r3, [r3, #11]
    6456:	2b00      	cmp	r3, #0
    6458:	d001      	beq.n	645e <tc_init+0x15e>
    645a:	2310      	movs	r3, #16
    645c:	4318      	orrs	r0, r3
    645e:	464b      	mov	r3, r9
    6460:	7b1b      	ldrb	r3, [r3, #12]
    6462:	2b00      	cmp	r3, #0
    6464:	d001      	beq.n	646a <tc_init+0x16a>
    6466:	2320      	movs	r3, #32
    6468:	4318      	orrs	r0, r3
    646a:	227f      	movs	r2, #127	; 0x7f
    646c:	6829      	ldr	r1, [r5, #0]
    646e:	7bcb      	ldrb	r3, [r1, #15]
    6470:	4393      	bics	r3, r2
    6472:	d1fc      	bne.n	646e <tc_init+0x16e>
    6474:	217f      	movs	r1, #127	; 0x7f
    6476:	71b0      	strb	r0, [r6, #6]
    6478:	682a      	ldr	r2, [r5, #0]
    647a:	7bd3      	ldrb	r3, [r2, #15]
    647c:	438b      	bics	r3, r1
    647e:	d1fc      	bne.n	647a <tc_init+0x17a>
    6480:	792b      	ldrb	r3, [r5, #4]
    6482:	217f      	movs	r1, #127	; 0x7f
    6484:	2b04      	cmp	r3, #4
    6486:	d007      	beq.n	6498 <tc_init+0x198>
    6488:	217f      	movs	r1, #127	; 0x7f
    648a:	2b08      	cmp	r3, #8
    648c:	d040      	beq.n	6510 <tc_init+0x210>
    648e:	217f      	movs	r1, #127	; 0x7f
    6490:	2b00      	cmp	r3, #0
    6492:	d025      	beq.n	64e0 <tc_init+0x1e0>
    6494:	2017      	movs	r0, #23
    6496:	e772      	b.n	637e <tc_init+0x7e>
    6498:	7bd3      	ldrb	r3, [r2, #15]
    649a:	438b      	bics	r3, r1
    649c:	d1fc      	bne.n	6498 <tc_init+0x198>
    649e:	464a      	mov	r2, r9
    64a0:	3328      	adds	r3, #40	; 0x28
    64a2:	5cd3      	ldrb	r3, [r2, r3]
    64a4:	227f      	movs	r2, #127	; 0x7f
    64a6:	7433      	strb	r3, [r6, #16]
    64a8:	6829      	ldr	r1, [r5, #0]
    64aa:	7bcb      	ldrb	r3, [r1, #15]
    64ac:	4393      	bics	r3, r2
    64ae:	d1fc      	bne.n	64aa <tc_init+0x1aa>
    64b0:	464a      	mov	r2, r9
    64b2:	3329      	adds	r3, #41	; 0x29
    64b4:	5cd3      	ldrb	r3, [r2, r3]
    64b6:	227f      	movs	r2, #127	; 0x7f
    64b8:	7533      	strb	r3, [r6, #20]
    64ba:	6829      	ldr	r1, [r5, #0]
    64bc:	7bcb      	ldrb	r3, [r1, #15]
    64be:	4393      	bics	r3, r2
    64c0:	d1fc      	bne.n	64bc <tc_init+0x1bc>
    64c2:	464a      	mov	r2, r9
    64c4:	332a      	adds	r3, #42	; 0x2a
    64c6:	5cd3      	ldrb	r3, [r2, r3]
    64c8:	227f      	movs	r2, #127	; 0x7f
    64ca:	7633      	strb	r3, [r6, #24]
    64cc:	6829      	ldr	r1, [r5, #0]
    64ce:	7bcb      	ldrb	r3, [r1, #15]
    64d0:	4393      	bics	r3, r2
    64d2:	d1fc      	bne.n	64ce <tc_init+0x1ce>
    64d4:	464a      	mov	r2, r9
    64d6:	332b      	adds	r3, #43	; 0x2b
    64d8:	5cd3      	ldrb	r3, [r2, r3]
    64da:	2000      	movs	r0, #0
    64dc:	7673      	strb	r3, [r6, #25]
    64de:	e74e      	b.n	637e <tc_init+0x7e>
    64e0:	7bd3      	ldrb	r3, [r2, #15]
    64e2:	438b      	bics	r3, r1
    64e4:	d1fc      	bne.n	64e0 <tc_init+0x1e0>
    64e6:	464b      	mov	r3, r9
    64e8:	227f      	movs	r2, #127	; 0x7f
    64ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    64ec:	8233      	strh	r3, [r6, #16]
    64ee:	6829      	ldr	r1, [r5, #0]
    64f0:	7bcb      	ldrb	r3, [r1, #15]
    64f2:	4393      	bics	r3, r2
    64f4:	d1fc      	bne.n	64f0 <tc_init+0x1f0>
    64f6:	464b      	mov	r3, r9
    64f8:	227f      	movs	r2, #127	; 0x7f
    64fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    64fc:	8333      	strh	r3, [r6, #24]
    64fe:	6829      	ldr	r1, [r5, #0]
    6500:	7bcb      	ldrb	r3, [r1, #15]
    6502:	4393      	bics	r3, r2
    6504:	d1fc      	bne.n	6500 <tc_init+0x200>
    6506:	464b      	mov	r3, r9
    6508:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    650a:	2000      	movs	r0, #0
    650c:	8373      	strh	r3, [r6, #26]
    650e:	e736      	b.n	637e <tc_init+0x7e>
    6510:	7bd3      	ldrb	r3, [r2, #15]
    6512:	438b      	bics	r3, r1
    6514:	d1fc      	bne.n	6510 <tc_init+0x210>
    6516:	464b      	mov	r3, r9
    6518:	227f      	movs	r2, #127	; 0x7f
    651a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    651c:	6133      	str	r3, [r6, #16]
    651e:	6829      	ldr	r1, [r5, #0]
    6520:	7bcb      	ldrb	r3, [r1, #15]
    6522:	4393      	bics	r3, r2
    6524:	d1fc      	bne.n	6520 <tc_init+0x220>
    6526:	464b      	mov	r3, r9
    6528:	227f      	movs	r2, #127	; 0x7f
    652a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    652c:	61b3      	str	r3, [r6, #24]
    652e:	6829      	ldr	r1, [r5, #0]
    6530:	7bcb      	ldrb	r3, [r1, #15]
    6532:	4393      	bics	r3, r2
    6534:	d1fc      	bne.n	6530 <tc_init+0x230>
    6536:	464b      	mov	r3, r9
    6538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    653a:	2000      	movs	r0, #0
    653c:	61f3      	str	r3, [r6, #28]
    653e:	e71e      	b.n	637e <tc_init+0x7e>
    6540:	2300      	movs	r3, #0
    6542:	4698      	mov	r8, r3
    6544:	e6f9      	b.n	633a <tc_init+0x3a>
    6546:	2301      	movs	r3, #1
    6548:	4698      	mov	r8, r3
    654a:	e6f6      	b.n	633a <tc_init+0x3a>
    654c:	2302      	movs	r3, #2
    654e:	4698      	mov	r8, r3
    6550:	e6f3      	b.n	633a <tc_init+0x3a>
    6552:	a902      	add	r1, sp, #8
    6554:	70cb      	strb	r3, [r1, #3]
    6556:	464b      	mov	r3, r9
    6558:	7e1b      	ldrb	r3, [r3, #24]
    655a:	708a      	strb	r2, [r1, #2]
    655c:	700b      	strb	r3, [r1, #0]
    655e:	464b      	mov	r3, r9
    6560:	7d18      	ldrb	r0, [r3, #20]
    6562:	704a      	strb	r2, [r1, #1]
    6564:	f7fd fe96 	bl	4294 <system_pinmux_pin_set_config>
    6568:	e721      	b.n	63ae <tc_init+0xae>
    656a:	2301      	movs	r3, #1
    656c:	2200      	movs	r2, #0
    656e:	a902      	add	r1, sp, #8
    6570:	708b      	strb	r3, [r1, #2]
    6572:	704b      	strb	r3, [r1, #1]
    6574:	464b      	mov	r3, r9
    6576:	70ca      	strb	r2, [r1, #3]
    6578:	464a      	mov	r2, r9
    657a:	6a1b      	ldr	r3, [r3, #32]
    657c:	6a52      	ldr	r2, [r2, #36]	; 0x24
    657e:	b2d8      	uxtb	r0, r3
    6580:	700a      	strb	r2, [r1, #0]
    6582:	f7fd fe87 	bl	4294 <system_pinmux_pin_set_config>
    6586:	e717      	b.n	63b8 <tc_init+0xb8>
    6588:	4641      	mov	r1, r8
    658a:	3101      	adds	r1, #1
    658c:	0049      	lsls	r1, r1, #1
    658e:	6a13      	ldr	r3, [r2, #32]
    6590:	5a41      	ldrh	r1, [r0, r1]
    6592:	430b      	orrs	r3, r1
    6594:	6213      	str	r3, [r2, #32]
    6596:	e71c      	b.n	63d2 <tc_init+0xd2>
    6598:	0000f890 	.word	0x0000f890
    659c:	200047bc 	.word	0x200047bc
    65a0:	40000400 	.word	0x40000400

000065a4 <tc_get_count_value>:
    65a4:	217f      	movs	r1, #127	; 0x7f
    65a6:	6802      	ldr	r2, [r0, #0]
    65a8:	7bd3      	ldrb	r3, [r2, #15]
    65aa:	438b      	bics	r3, r1
    65ac:	d1fc      	bne.n	65a8 <tc_get_count_value+0x4>
    65ae:	7903      	ldrb	r3, [r0, #4]
    65b0:	2b04      	cmp	r3, #4
    65b2:	d00a      	beq.n	65ca <tc_get_count_value+0x26>
    65b4:	2b08      	cmp	r3, #8
    65b6:	d006      	beq.n	65c6 <tc_get_count_value+0x22>
    65b8:	2000      	movs	r0, #0
    65ba:	2b00      	cmp	r3, #0
    65bc:	d000      	beq.n	65c0 <tc_get_count_value+0x1c>
    65be:	4770      	bx	lr
    65c0:	8a10      	ldrh	r0, [r2, #16]
    65c2:	b280      	uxth	r0, r0
    65c4:	e7fb      	b.n	65be <tc_get_count_value+0x1a>
    65c6:	6910      	ldr	r0, [r2, #16]
    65c8:	e7f9      	b.n	65be <tc_get_count_value+0x1a>
    65ca:	7c10      	ldrb	r0, [r2, #16]
    65cc:	b2c0      	uxtb	r0, r0
    65ce:	e7f6      	b.n	65be <tc_get_count_value+0x1a>

000065d0 <tc_set_compare_value>:
    65d0:	b530      	push	{r4, r5, lr}
    65d2:	257f      	movs	r5, #127	; 0x7f
    65d4:	6804      	ldr	r4, [r0, #0]
    65d6:	7be3      	ldrb	r3, [r4, #15]
    65d8:	43ab      	bics	r3, r5
    65da:	d1fc      	bne.n	65d6 <tc_set_compare_value+0x6>
    65dc:	7903      	ldrb	r3, [r0, #4]
    65de:	2b04      	cmp	r3, #4
    65e0:	d016      	beq.n	6610 <tc_set_compare_value+0x40>
    65e2:	2b08      	cmp	r3, #8
    65e4:	d00c      	beq.n	6600 <tc_set_compare_value+0x30>
    65e6:	2017      	movs	r0, #23
    65e8:	2b00      	cmp	r3, #0
    65ea:	d000      	beq.n	65ee <tc_set_compare_value+0x1e>
    65ec:	bd30      	pop	{r4, r5, pc}
    65ee:	2017      	movs	r0, #23
    65f0:	2901      	cmp	r1, #1
    65f2:	d8fb      	bhi.n	65ec <tc_set_compare_value+0x1c>
    65f4:	310c      	adds	r1, #12
    65f6:	b292      	uxth	r2, r2
    65f8:	0049      	lsls	r1, r1, #1
    65fa:	530a      	strh	r2, [r1, r4]
    65fc:	2000      	movs	r0, #0
    65fe:	e7f5      	b.n	65ec <tc_set_compare_value+0x1c>
    6600:	2017      	movs	r0, #23
    6602:	2901      	cmp	r1, #1
    6604:	d8f2      	bhi.n	65ec <tc_set_compare_value+0x1c>
    6606:	3106      	adds	r1, #6
    6608:	0089      	lsls	r1, r1, #2
    660a:	510a      	str	r2, [r1, r4]
    660c:	2000      	movs	r0, #0
    660e:	e7ed      	b.n	65ec <tc_set_compare_value+0x1c>
    6610:	2017      	movs	r0, #23
    6612:	2901      	cmp	r1, #1
    6614:	d8ea      	bhi.n	65ec <tc_set_compare_value+0x1c>
    6616:	b2d2      	uxtb	r2, r2
    6618:	1861      	adds	r1, r4, r1
    661a:	760a      	strb	r2, [r1, #24]
    661c:	2000      	movs	r0, #0
    661e:	e7e5      	b.n	65ec <tc_set_compare_value+0x1c>

00006620 <ticker_irq_handler>:
    6620:	b538      	push	{r3, r4, r5, lr}
    6622:	6803      	ldr	r3, [r0, #0]
    6624:	1c05      	adds	r5, r0, #0
    6626:	68db      	ldr	r3, [r3, #12]
    6628:	4798      	blx	r3
    662a:	686b      	ldr	r3, [r5, #4]
    662c:	685b      	ldr	r3, [r3, #4]
    662e:	e00d      	b.n	664c <ticker_irq_handler+0x2c>
    6630:	681c      	ldr	r4, [r3, #0]
    6632:	682b      	ldr	r3, [r5, #0]
    6634:	685b      	ldr	r3, [r3, #4]
    6636:	4798      	blx	r3
    6638:	1a24      	subs	r4, r4, r0
    663a:	2c00      	cmp	r4, #0
    663c:	dc0c      	bgt.n	6658 <ticker_irq_handler+0x38>
    663e:	686a      	ldr	r2, [r5, #4]
    6640:	6851      	ldr	r1, [r2, #4]
    6642:	688b      	ldr	r3, [r1, #8]
    6644:	6053      	str	r3, [r2, #4]
    6646:	6812      	ldr	r2, [r2, #0]
    6648:	2a00      	cmp	r2, #0
    664a:	d10c      	bne.n	6666 <ticker_irq_handler+0x46>
    664c:	2b00      	cmp	r3, #0
    664e:	d1ef      	bne.n	6630 <ticker_irq_handler+0x10>
    6650:	682b      	ldr	r3, [r5, #0]
    6652:	689b      	ldr	r3, [r3, #8]
    6654:	4798      	blx	r3
    6656:	bd38      	pop	{r3, r4, r5, pc}
    6658:	686a      	ldr	r2, [r5, #4]
    665a:	682b      	ldr	r3, [r5, #0]
    665c:	6852      	ldr	r2, [r2, #4]
    665e:	691b      	ldr	r3, [r3, #16]
    6660:	6810      	ldr	r0, [r2, #0]
    6662:	4798      	blx	r3
    6664:	e7f7      	b.n	6656 <ticker_irq_handler+0x36>
    6666:	6848      	ldr	r0, [r1, #4]
    6668:	4790      	blx	r2
    666a:	e7de      	b.n	662a <ticker_irq_handler+0xa>

0000666c <__aeabi_atexit>:
    666c:	b508      	push	{r3, lr}
    666e:	1c03      	adds	r3, r0, #0
    6670:	1c08      	adds	r0, r1, #0
    6672:	1c19      	adds	r1, r3, #0
    6674:	f003 f836 	bl	96e4 <__cxa_atexit>
    6678:	bd08      	pop	{r3, pc}

0000667a <_ZdlPv>:
    667a:	b508      	push	{r3, lr}
    667c:	f003 fbfe 	bl	9e7c <free>
    6680:	bd08      	pop	{r3, pc}
	...

00006684 <__aeabi_uidiv>:
    6684:	2200      	movs	r2, #0
    6686:	0843      	lsrs	r3, r0, #1
    6688:	428b      	cmp	r3, r1
    668a:	d374      	bcc.n	6776 <__aeabi_uidiv+0xf2>
    668c:	0903      	lsrs	r3, r0, #4
    668e:	428b      	cmp	r3, r1
    6690:	d35f      	bcc.n	6752 <__aeabi_uidiv+0xce>
    6692:	0a03      	lsrs	r3, r0, #8
    6694:	428b      	cmp	r3, r1
    6696:	d344      	bcc.n	6722 <__aeabi_uidiv+0x9e>
    6698:	0b03      	lsrs	r3, r0, #12
    669a:	428b      	cmp	r3, r1
    669c:	d328      	bcc.n	66f0 <__aeabi_uidiv+0x6c>
    669e:	0c03      	lsrs	r3, r0, #16
    66a0:	428b      	cmp	r3, r1
    66a2:	d30d      	bcc.n	66c0 <__aeabi_uidiv+0x3c>
    66a4:	22ff      	movs	r2, #255	; 0xff
    66a6:	0209      	lsls	r1, r1, #8
    66a8:	ba12      	rev	r2, r2
    66aa:	0c03      	lsrs	r3, r0, #16
    66ac:	428b      	cmp	r3, r1
    66ae:	d302      	bcc.n	66b6 <__aeabi_uidiv+0x32>
    66b0:	1212      	asrs	r2, r2, #8
    66b2:	0209      	lsls	r1, r1, #8
    66b4:	d065      	beq.n	6782 <__aeabi_uidiv+0xfe>
    66b6:	0b03      	lsrs	r3, r0, #12
    66b8:	428b      	cmp	r3, r1
    66ba:	d319      	bcc.n	66f0 <__aeabi_uidiv+0x6c>
    66bc:	e000      	b.n	66c0 <__aeabi_uidiv+0x3c>
    66be:	0a09      	lsrs	r1, r1, #8
    66c0:	0bc3      	lsrs	r3, r0, #15
    66c2:	428b      	cmp	r3, r1
    66c4:	d301      	bcc.n	66ca <__aeabi_uidiv+0x46>
    66c6:	03cb      	lsls	r3, r1, #15
    66c8:	1ac0      	subs	r0, r0, r3
    66ca:	4152      	adcs	r2, r2
    66cc:	0b83      	lsrs	r3, r0, #14
    66ce:	428b      	cmp	r3, r1
    66d0:	d301      	bcc.n	66d6 <__aeabi_uidiv+0x52>
    66d2:	038b      	lsls	r3, r1, #14
    66d4:	1ac0      	subs	r0, r0, r3
    66d6:	4152      	adcs	r2, r2
    66d8:	0b43      	lsrs	r3, r0, #13
    66da:	428b      	cmp	r3, r1
    66dc:	d301      	bcc.n	66e2 <__aeabi_uidiv+0x5e>
    66de:	034b      	lsls	r3, r1, #13
    66e0:	1ac0      	subs	r0, r0, r3
    66e2:	4152      	adcs	r2, r2
    66e4:	0b03      	lsrs	r3, r0, #12
    66e6:	428b      	cmp	r3, r1
    66e8:	d301      	bcc.n	66ee <__aeabi_uidiv+0x6a>
    66ea:	030b      	lsls	r3, r1, #12
    66ec:	1ac0      	subs	r0, r0, r3
    66ee:	4152      	adcs	r2, r2
    66f0:	0ac3      	lsrs	r3, r0, #11
    66f2:	428b      	cmp	r3, r1
    66f4:	d301      	bcc.n	66fa <__aeabi_uidiv+0x76>
    66f6:	02cb      	lsls	r3, r1, #11
    66f8:	1ac0      	subs	r0, r0, r3
    66fa:	4152      	adcs	r2, r2
    66fc:	0a83      	lsrs	r3, r0, #10
    66fe:	428b      	cmp	r3, r1
    6700:	d301      	bcc.n	6706 <__aeabi_uidiv+0x82>
    6702:	028b      	lsls	r3, r1, #10
    6704:	1ac0      	subs	r0, r0, r3
    6706:	4152      	adcs	r2, r2
    6708:	0a43      	lsrs	r3, r0, #9
    670a:	428b      	cmp	r3, r1
    670c:	d301      	bcc.n	6712 <__aeabi_uidiv+0x8e>
    670e:	024b      	lsls	r3, r1, #9
    6710:	1ac0      	subs	r0, r0, r3
    6712:	4152      	adcs	r2, r2
    6714:	0a03      	lsrs	r3, r0, #8
    6716:	428b      	cmp	r3, r1
    6718:	d301      	bcc.n	671e <__aeabi_uidiv+0x9a>
    671a:	020b      	lsls	r3, r1, #8
    671c:	1ac0      	subs	r0, r0, r3
    671e:	4152      	adcs	r2, r2
    6720:	d2cd      	bcs.n	66be <__aeabi_uidiv+0x3a>
    6722:	09c3      	lsrs	r3, r0, #7
    6724:	428b      	cmp	r3, r1
    6726:	d301      	bcc.n	672c <__aeabi_uidiv+0xa8>
    6728:	01cb      	lsls	r3, r1, #7
    672a:	1ac0      	subs	r0, r0, r3
    672c:	4152      	adcs	r2, r2
    672e:	0983      	lsrs	r3, r0, #6
    6730:	428b      	cmp	r3, r1
    6732:	d301      	bcc.n	6738 <__aeabi_uidiv+0xb4>
    6734:	018b      	lsls	r3, r1, #6
    6736:	1ac0      	subs	r0, r0, r3
    6738:	4152      	adcs	r2, r2
    673a:	0943      	lsrs	r3, r0, #5
    673c:	428b      	cmp	r3, r1
    673e:	d301      	bcc.n	6744 <__aeabi_uidiv+0xc0>
    6740:	014b      	lsls	r3, r1, #5
    6742:	1ac0      	subs	r0, r0, r3
    6744:	4152      	adcs	r2, r2
    6746:	0903      	lsrs	r3, r0, #4
    6748:	428b      	cmp	r3, r1
    674a:	d301      	bcc.n	6750 <__aeabi_uidiv+0xcc>
    674c:	010b      	lsls	r3, r1, #4
    674e:	1ac0      	subs	r0, r0, r3
    6750:	4152      	adcs	r2, r2
    6752:	08c3      	lsrs	r3, r0, #3
    6754:	428b      	cmp	r3, r1
    6756:	d301      	bcc.n	675c <__aeabi_uidiv+0xd8>
    6758:	00cb      	lsls	r3, r1, #3
    675a:	1ac0      	subs	r0, r0, r3
    675c:	4152      	adcs	r2, r2
    675e:	0883      	lsrs	r3, r0, #2
    6760:	428b      	cmp	r3, r1
    6762:	d301      	bcc.n	6768 <__aeabi_uidiv+0xe4>
    6764:	008b      	lsls	r3, r1, #2
    6766:	1ac0      	subs	r0, r0, r3
    6768:	4152      	adcs	r2, r2
    676a:	0843      	lsrs	r3, r0, #1
    676c:	428b      	cmp	r3, r1
    676e:	d301      	bcc.n	6774 <__aeabi_uidiv+0xf0>
    6770:	004b      	lsls	r3, r1, #1
    6772:	1ac0      	subs	r0, r0, r3
    6774:	4152      	adcs	r2, r2
    6776:	1a41      	subs	r1, r0, r1
    6778:	d200      	bcs.n	677c <__aeabi_uidiv+0xf8>
    677a:	4601      	mov	r1, r0
    677c:	4152      	adcs	r2, r2
    677e:	4610      	mov	r0, r2
    6780:	4770      	bx	lr
    6782:	e7ff      	b.n	6784 <__aeabi_uidiv+0x100>
    6784:	b501      	push	{r0, lr}
    6786:	2000      	movs	r0, #0
    6788:	f000 f8fc 	bl	6984 <__aeabi_idiv0>
    678c:	bd02      	pop	{r1, pc}
    678e:	46c0      	nop			; (mov r8, r8)

00006790 <__aeabi_uidivmod>:
    6790:	2900      	cmp	r1, #0
    6792:	d0f7      	beq.n	6784 <__aeabi_uidiv+0x100>
    6794:	b503      	push	{r0, r1, lr}
    6796:	f7ff ff75 	bl	6684 <__aeabi_uidiv>
    679a:	bc0e      	pop	{r1, r2, r3}
    679c:	4342      	muls	r2, r0
    679e:	1a89      	subs	r1, r1, r2
    67a0:	4718      	bx	r3
    67a2:	46c0      	nop			; (mov r8, r8)

000067a4 <__aeabi_idiv>:
    67a4:	4603      	mov	r3, r0
    67a6:	430b      	orrs	r3, r1
    67a8:	d47f      	bmi.n	68aa <__aeabi_idiv+0x106>
    67aa:	2200      	movs	r2, #0
    67ac:	0843      	lsrs	r3, r0, #1
    67ae:	428b      	cmp	r3, r1
    67b0:	d374      	bcc.n	689c <__aeabi_idiv+0xf8>
    67b2:	0903      	lsrs	r3, r0, #4
    67b4:	428b      	cmp	r3, r1
    67b6:	d35f      	bcc.n	6878 <__aeabi_idiv+0xd4>
    67b8:	0a03      	lsrs	r3, r0, #8
    67ba:	428b      	cmp	r3, r1
    67bc:	d344      	bcc.n	6848 <__aeabi_idiv+0xa4>
    67be:	0b03      	lsrs	r3, r0, #12
    67c0:	428b      	cmp	r3, r1
    67c2:	d328      	bcc.n	6816 <__aeabi_idiv+0x72>
    67c4:	0c03      	lsrs	r3, r0, #16
    67c6:	428b      	cmp	r3, r1
    67c8:	d30d      	bcc.n	67e6 <__aeabi_idiv+0x42>
    67ca:	22ff      	movs	r2, #255	; 0xff
    67cc:	0209      	lsls	r1, r1, #8
    67ce:	ba12      	rev	r2, r2
    67d0:	0c03      	lsrs	r3, r0, #16
    67d2:	428b      	cmp	r3, r1
    67d4:	d302      	bcc.n	67dc <__aeabi_idiv+0x38>
    67d6:	1212      	asrs	r2, r2, #8
    67d8:	0209      	lsls	r1, r1, #8
    67da:	d065      	beq.n	68a8 <__aeabi_idiv+0x104>
    67dc:	0b03      	lsrs	r3, r0, #12
    67de:	428b      	cmp	r3, r1
    67e0:	d319      	bcc.n	6816 <__aeabi_idiv+0x72>
    67e2:	e000      	b.n	67e6 <__aeabi_idiv+0x42>
    67e4:	0a09      	lsrs	r1, r1, #8
    67e6:	0bc3      	lsrs	r3, r0, #15
    67e8:	428b      	cmp	r3, r1
    67ea:	d301      	bcc.n	67f0 <__aeabi_idiv+0x4c>
    67ec:	03cb      	lsls	r3, r1, #15
    67ee:	1ac0      	subs	r0, r0, r3
    67f0:	4152      	adcs	r2, r2
    67f2:	0b83      	lsrs	r3, r0, #14
    67f4:	428b      	cmp	r3, r1
    67f6:	d301      	bcc.n	67fc <__aeabi_idiv+0x58>
    67f8:	038b      	lsls	r3, r1, #14
    67fa:	1ac0      	subs	r0, r0, r3
    67fc:	4152      	adcs	r2, r2
    67fe:	0b43      	lsrs	r3, r0, #13
    6800:	428b      	cmp	r3, r1
    6802:	d301      	bcc.n	6808 <__aeabi_idiv+0x64>
    6804:	034b      	lsls	r3, r1, #13
    6806:	1ac0      	subs	r0, r0, r3
    6808:	4152      	adcs	r2, r2
    680a:	0b03      	lsrs	r3, r0, #12
    680c:	428b      	cmp	r3, r1
    680e:	d301      	bcc.n	6814 <__aeabi_idiv+0x70>
    6810:	030b      	lsls	r3, r1, #12
    6812:	1ac0      	subs	r0, r0, r3
    6814:	4152      	adcs	r2, r2
    6816:	0ac3      	lsrs	r3, r0, #11
    6818:	428b      	cmp	r3, r1
    681a:	d301      	bcc.n	6820 <__aeabi_idiv+0x7c>
    681c:	02cb      	lsls	r3, r1, #11
    681e:	1ac0      	subs	r0, r0, r3
    6820:	4152      	adcs	r2, r2
    6822:	0a83      	lsrs	r3, r0, #10
    6824:	428b      	cmp	r3, r1
    6826:	d301      	bcc.n	682c <__aeabi_idiv+0x88>
    6828:	028b      	lsls	r3, r1, #10
    682a:	1ac0      	subs	r0, r0, r3
    682c:	4152      	adcs	r2, r2
    682e:	0a43      	lsrs	r3, r0, #9
    6830:	428b      	cmp	r3, r1
    6832:	d301      	bcc.n	6838 <__aeabi_idiv+0x94>
    6834:	024b      	lsls	r3, r1, #9
    6836:	1ac0      	subs	r0, r0, r3
    6838:	4152      	adcs	r2, r2
    683a:	0a03      	lsrs	r3, r0, #8
    683c:	428b      	cmp	r3, r1
    683e:	d301      	bcc.n	6844 <__aeabi_idiv+0xa0>
    6840:	020b      	lsls	r3, r1, #8
    6842:	1ac0      	subs	r0, r0, r3
    6844:	4152      	adcs	r2, r2
    6846:	d2cd      	bcs.n	67e4 <__aeabi_idiv+0x40>
    6848:	09c3      	lsrs	r3, r0, #7
    684a:	428b      	cmp	r3, r1
    684c:	d301      	bcc.n	6852 <__aeabi_idiv+0xae>
    684e:	01cb      	lsls	r3, r1, #7
    6850:	1ac0      	subs	r0, r0, r3
    6852:	4152      	adcs	r2, r2
    6854:	0983      	lsrs	r3, r0, #6
    6856:	428b      	cmp	r3, r1
    6858:	d301      	bcc.n	685e <__aeabi_idiv+0xba>
    685a:	018b      	lsls	r3, r1, #6
    685c:	1ac0      	subs	r0, r0, r3
    685e:	4152      	adcs	r2, r2
    6860:	0943      	lsrs	r3, r0, #5
    6862:	428b      	cmp	r3, r1
    6864:	d301      	bcc.n	686a <__aeabi_idiv+0xc6>
    6866:	014b      	lsls	r3, r1, #5
    6868:	1ac0      	subs	r0, r0, r3
    686a:	4152      	adcs	r2, r2
    686c:	0903      	lsrs	r3, r0, #4
    686e:	428b      	cmp	r3, r1
    6870:	d301      	bcc.n	6876 <__aeabi_idiv+0xd2>
    6872:	010b      	lsls	r3, r1, #4
    6874:	1ac0      	subs	r0, r0, r3
    6876:	4152      	adcs	r2, r2
    6878:	08c3      	lsrs	r3, r0, #3
    687a:	428b      	cmp	r3, r1
    687c:	d301      	bcc.n	6882 <__aeabi_idiv+0xde>
    687e:	00cb      	lsls	r3, r1, #3
    6880:	1ac0      	subs	r0, r0, r3
    6882:	4152      	adcs	r2, r2
    6884:	0883      	lsrs	r3, r0, #2
    6886:	428b      	cmp	r3, r1
    6888:	d301      	bcc.n	688e <__aeabi_idiv+0xea>
    688a:	008b      	lsls	r3, r1, #2
    688c:	1ac0      	subs	r0, r0, r3
    688e:	4152      	adcs	r2, r2
    6890:	0843      	lsrs	r3, r0, #1
    6892:	428b      	cmp	r3, r1
    6894:	d301      	bcc.n	689a <__aeabi_idiv+0xf6>
    6896:	004b      	lsls	r3, r1, #1
    6898:	1ac0      	subs	r0, r0, r3
    689a:	4152      	adcs	r2, r2
    689c:	1a41      	subs	r1, r0, r1
    689e:	d200      	bcs.n	68a2 <__aeabi_idiv+0xfe>
    68a0:	4601      	mov	r1, r0
    68a2:	4152      	adcs	r2, r2
    68a4:	4610      	mov	r0, r2
    68a6:	4770      	bx	lr
    68a8:	e05d      	b.n	6966 <__aeabi_idiv+0x1c2>
    68aa:	0fca      	lsrs	r2, r1, #31
    68ac:	d000      	beq.n	68b0 <__aeabi_idiv+0x10c>
    68ae:	4249      	negs	r1, r1
    68b0:	1003      	asrs	r3, r0, #32
    68b2:	d300      	bcc.n	68b6 <__aeabi_idiv+0x112>
    68b4:	4240      	negs	r0, r0
    68b6:	4053      	eors	r3, r2
    68b8:	2200      	movs	r2, #0
    68ba:	469c      	mov	ip, r3
    68bc:	0903      	lsrs	r3, r0, #4
    68be:	428b      	cmp	r3, r1
    68c0:	d32d      	bcc.n	691e <__aeabi_idiv+0x17a>
    68c2:	0a03      	lsrs	r3, r0, #8
    68c4:	428b      	cmp	r3, r1
    68c6:	d312      	bcc.n	68ee <__aeabi_idiv+0x14a>
    68c8:	22fc      	movs	r2, #252	; 0xfc
    68ca:	0189      	lsls	r1, r1, #6
    68cc:	ba12      	rev	r2, r2
    68ce:	0a03      	lsrs	r3, r0, #8
    68d0:	428b      	cmp	r3, r1
    68d2:	d30c      	bcc.n	68ee <__aeabi_idiv+0x14a>
    68d4:	0189      	lsls	r1, r1, #6
    68d6:	1192      	asrs	r2, r2, #6
    68d8:	428b      	cmp	r3, r1
    68da:	d308      	bcc.n	68ee <__aeabi_idiv+0x14a>
    68dc:	0189      	lsls	r1, r1, #6
    68de:	1192      	asrs	r2, r2, #6
    68e0:	428b      	cmp	r3, r1
    68e2:	d304      	bcc.n	68ee <__aeabi_idiv+0x14a>
    68e4:	0189      	lsls	r1, r1, #6
    68e6:	d03a      	beq.n	695e <__aeabi_idiv+0x1ba>
    68e8:	1192      	asrs	r2, r2, #6
    68ea:	e000      	b.n	68ee <__aeabi_idiv+0x14a>
    68ec:	0989      	lsrs	r1, r1, #6
    68ee:	09c3      	lsrs	r3, r0, #7
    68f0:	428b      	cmp	r3, r1
    68f2:	d301      	bcc.n	68f8 <__aeabi_idiv+0x154>
    68f4:	01cb      	lsls	r3, r1, #7
    68f6:	1ac0      	subs	r0, r0, r3
    68f8:	4152      	adcs	r2, r2
    68fa:	0983      	lsrs	r3, r0, #6
    68fc:	428b      	cmp	r3, r1
    68fe:	d301      	bcc.n	6904 <__aeabi_idiv+0x160>
    6900:	018b      	lsls	r3, r1, #6
    6902:	1ac0      	subs	r0, r0, r3
    6904:	4152      	adcs	r2, r2
    6906:	0943      	lsrs	r3, r0, #5
    6908:	428b      	cmp	r3, r1
    690a:	d301      	bcc.n	6910 <__aeabi_idiv+0x16c>
    690c:	014b      	lsls	r3, r1, #5
    690e:	1ac0      	subs	r0, r0, r3
    6910:	4152      	adcs	r2, r2
    6912:	0903      	lsrs	r3, r0, #4
    6914:	428b      	cmp	r3, r1
    6916:	d301      	bcc.n	691c <__aeabi_idiv+0x178>
    6918:	010b      	lsls	r3, r1, #4
    691a:	1ac0      	subs	r0, r0, r3
    691c:	4152      	adcs	r2, r2
    691e:	08c3      	lsrs	r3, r0, #3
    6920:	428b      	cmp	r3, r1
    6922:	d301      	bcc.n	6928 <__aeabi_idiv+0x184>
    6924:	00cb      	lsls	r3, r1, #3
    6926:	1ac0      	subs	r0, r0, r3
    6928:	4152      	adcs	r2, r2
    692a:	0883      	lsrs	r3, r0, #2
    692c:	428b      	cmp	r3, r1
    692e:	d301      	bcc.n	6934 <__aeabi_idiv+0x190>
    6930:	008b      	lsls	r3, r1, #2
    6932:	1ac0      	subs	r0, r0, r3
    6934:	4152      	adcs	r2, r2
    6936:	d2d9      	bcs.n	68ec <__aeabi_idiv+0x148>
    6938:	0843      	lsrs	r3, r0, #1
    693a:	428b      	cmp	r3, r1
    693c:	d301      	bcc.n	6942 <__aeabi_idiv+0x19e>
    693e:	004b      	lsls	r3, r1, #1
    6940:	1ac0      	subs	r0, r0, r3
    6942:	4152      	adcs	r2, r2
    6944:	1a41      	subs	r1, r0, r1
    6946:	d200      	bcs.n	694a <__aeabi_idiv+0x1a6>
    6948:	4601      	mov	r1, r0
    694a:	4663      	mov	r3, ip
    694c:	4152      	adcs	r2, r2
    694e:	105b      	asrs	r3, r3, #1
    6950:	4610      	mov	r0, r2
    6952:	d301      	bcc.n	6958 <__aeabi_idiv+0x1b4>
    6954:	4240      	negs	r0, r0
    6956:	2b00      	cmp	r3, #0
    6958:	d500      	bpl.n	695c <__aeabi_idiv+0x1b8>
    695a:	4249      	negs	r1, r1
    695c:	4770      	bx	lr
    695e:	4663      	mov	r3, ip
    6960:	105b      	asrs	r3, r3, #1
    6962:	d300      	bcc.n	6966 <__aeabi_idiv+0x1c2>
    6964:	4240      	negs	r0, r0
    6966:	b501      	push	{r0, lr}
    6968:	2000      	movs	r0, #0
    696a:	f000 f80b 	bl	6984 <__aeabi_idiv0>
    696e:	bd02      	pop	{r1, pc}

00006970 <__aeabi_idivmod>:
    6970:	2900      	cmp	r1, #0
    6972:	d0f8      	beq.n	6966 <__aeabi_idiv+0x1c2>
    6974:	b503      	push	{r0, r1, lr}
    6976:	f7ff ff15 	bl	67a4 <__aeabi_idiv>
    697a:	bc0e      	pop	{r1, r2, r3}
    697c:	4342      	muls	r2, r0
    697e:	1a89      	subs	r1, r1, r2
    6980:	4718      	bx	r3
    6982:	46c0      	nop			; (mov r8, r8)

00006984 <__aeabi_idiv0>:
    6984:	4770      	bx	lr
    6986:	46c0      	nop			; (mov r8, r8)

00006988 <__aeabi_cdrcmple>:
    6988:	4684      	mov	ip, r0
    698a:	1c10      	adds	r0, r2, #0
    698c:	4662      	mov	r2, ip
    698e:	468c      	mov	ip, r1
    6990:	1c19      	adds	r1, r3, #0
    6992:	4663      	mov	r3, ip
    6994:	e000      	b.n	6998 <__aeabi_cdcmpeq>
    6996:	46c0      	nop			; (mov r8, r8)

00006998 <__aeabi_cdcmpeq>:
    6998:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    699a:	f001 fe83 	bl	86a4 <__ledf2>
    699e:	2800      	cmp	r0, #0
    69a0:	d401      	bmi.n	69a6 <__aeabi_cdcmpeq+0xe>
    69a2:	2100      	movs	r1, #0
    69a4:	42c8      	cmn	r0, r1
    69a6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000069a8 <__aeabi_dcmpeq>:
    69a8:	b510      	push	{r4, lr}
    69aa:	f001 fdc7 	bl	853c <__eqdf2>
    69ae:	4240      	negs	r0, r0
    69b0:	3001      	adds	r0, #1
    69b2:	bd10      	pop	{r4, pc}

000069b4 <__aeabi_dcmplt>:
    69b4:	b510      	push	{r4, lr}
    69b6:	f001 fe75 	bl	86a4 <__ledf2>
    69ba:	2800      	cmp	r0, #0
    69bc:	db01      	blt.n	69c2 <__aeabi_dcmplt+0xe>
    69be:	2000      	movs	r0, #0
    69c0:	bd10      	pop	{r4, pc}
    69c2:	2001      	movs	r0, #1
    69c4:	bd10      	pop	{r4, pc}
    69c6:	46c0      	nop			; (mov r8, r8)

000069c8 <__aeabi_dcmple>:
    69c8:	b510      	push	{r4, lr}
    69ca:	f001 fe6b 	bl	86a4 <__ledf2>
    69ce:	2800      	cmp	r0, #0
    69d0:	dd01      	ble.n	69d6 <__aeabi_dcmple+0xe>
    69d2:	2000      	movs	r0, #0
    69d4:	bd10      	pop	{r4, pc}
    69d6:	2001      	movs	r0, #1
    69d8:	bd10      	pop	{r4, pc}
    69da:	46c0      	nop			; (mov r8, r8)

000069dc <__aeabi_dcmpgt>:
    69dc:	b510      	push	{r4, lr}
    69de:	f001 fdf1 	bl	85c4 <__gedf2>
    69e2:	2800      	cmp	r0, #0
    69e4:	dc01      	bgt.n	69ea <__aeabi_dcmpgt+0xe>
    69e6:	2000      	movs	r0, #0
    69e8:	bd10      	pop	{r4, pc}
    69ea:	2001      	movs	r0, #1
    69ec:	bd10      	pop	{r4, pc}
    69ee:	46c0      	nop			; (mov r8, r8)

000069f0 <__aeabi_dcmpge>:
    69f0:	b510      	push	{r4, lr}
    69f2:	f001 fde7 	bl	85c4 <__gedf2>
    69f6:	2800      	cmp	r0, #0
    69f8:	da01      	bge.n	69fe <__aeabi_dcmpge+0xe>
    69fa:	2000      	movs	r0, #0
    69fc:	bd10      	pop	{r4, pc}
    69fe:	2001      	movs	r0, #1
    6a00:	bd10      	pop	{r4, pc}
    6a02:	46c0      	nop			; (mov r8, r8)

00006a04 <__aeabi_cfrcmple>:
    6a04:	4684      	mov	ip, r0
    6a06:	1c08      	adds	r0, r1, #0
    6a08:	4661      	mov	r1, ip
    6a0a:	e7ff      	b.n	6a0c <__aeabi_cfcmpeq>

00006a0c <__aeabi_cfcmpeq>:
    6a0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    6a0e:	f000 fba3 	bl	7158 <__lesf2>
    6a12:	2800      	cmp	r0, #0
    6a14:	d401      	bmi.n	6a1a <__aeabi_cfcmpeq+0xe>
    6a16:	2100      	movs	r1, #0
    6a18:	42c8      	cmn	r0, r1
    6a1a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00006a1c <__aeabi_fcmpeq>:
    6a1c:	b510      	push	{r4, lr}
    6a1e:	f000 fb27 	bl	7070 <__eqsf2>
    6a22:	4240      	negs	r0, r0
    6a24:	3001      	adds	r0, #1
    6a26:	bd10      	pop	{r4, pc}

00006a28 <__aeabi_fcmplt>:
    6a28:	b510      	push	{r4, lr}
    6a2a:	f000 fb95 	bl	7158 <__lesf2>
    6a2e:	2800      	cmp	r0, #0
    6a30:	db01      	blt.n	6a36 <__aeabi_fcmplt+0xe>
    6a32:	2000      	movs	r0, #0
    6a34:	bd10      	pop	{r4, pc}
    6a36:	2001      	movs	r0, #1
    6a38:	bd10      	pop	{r4, pc}
    6a3a:	46c0      	nop			; (mov r8, r8)

00006a3c <__aeabi_fcmple>:
    6a3c:	b510      	push	{r4, lr}
    6a3e:	f000 fb8b 	bl	7158 <__lesf2>
    6a42:	2800      	cmp	r0, #0
    6a44:	dd01      	ble.n	6a4a <__aeabi_fcmple+0xe>
    6a46:	2000      	movs	r0, #0
    6a48:	bd10      	pop	{r4, pc}
    6a4a:	2001      	movs	r0, #1
    6a4c:	bd10      	pop	{r4, pc}
    6a4e:	46c0      	nop			; (mov r8, r8)

00006a50 <__aeabi_fcmpgt>:
    6a50:	b510      	push	{r4, lr}
    6a52:	f000 fb37 	bl	70c4 <__gesf2>
    6a56:	2800      	cmp	r0, #0
    6a58:	dc01      	bgt.n	6a5e <__aeabi_fcmpgt+0xe>
    6a5a:	2000      	movs	r0, #0
    6a5c:	bd10      	pop	{r4, pc}
    6a5e:	2001      	movs	r0, #1
    6a60:	bd10      	pop	{r4, pc}
    6a62:	46c0      	nop			; (mov r8, r8)

00006a64 <__aeabi_fcmpge>:
    6a64:	b510      	push	{r4, lr}
    6a66:	f000 fb2d 	bl	70c4 <__gesf2>
    6a6a:	2800      	cmp	r0, #0
    6a6c:	da01      	bge.n	6a72 <__aeabi_fcmpge+0xe>
    6a6e:	2000      	movs	r0, #0
    6a70:	bd10      	pop	{r4, pc}
    6a72:	2001      	movs	r0, #1
    6a74:	bd10      	pop	{r4, pc}
    6a76:	46c0      	nop			; (mov r8, r8)

00006a78 <__aeabi_lmul>:
    6a78:	b5f0      	push	{r4, r5, r6, r7, lr}
    6a7a:	464f      	mov	r7, r9
    6a7c:	4646      	mov	r6, r8
    6a7e:	0405      	lsls	r5, r0, #16
    6a80:	0c2d      	lsrs	r5, r5, #16
    6a82:	1c2c      	adds	r4, r5, #0
    6a84:	b4c0      	push	{r6, r7}
    6a86:	0417      	lsls	r7, r2, #16
    6a88:	0c16      	lsrs	r6, r2, #16
    6a8a:	0c3f      	lsrs	r7, r7, #16
    6a8c:	4699      	mov	r9, r3
    6a8e:	0c03      	lsrs	r3, r0, #16
    6a90:	437c      	muls	r4, r7
    6a92:	4375      	muls	r5, r6
    6a94:	435f      	muls	r7, r3
    6a96:	4373      	muls	r3, r6
    6a98:	197d      	adds	r5, r7, r5
    6a9a:	0c26      	lsrs	r6, r4, #16
    6a9c:	19ad      	adds	r5, r5, r6
    6a9e:	469c      	mov	ip, r3
    6aa0:	42af      	cmp	r7, r5
    6aa2:	d903      	bls.n	6aac <__aeabi_lmul+0x34>
    6aa4:	2380      	movs	r3, #128	; 0x80
    6aa6:	025b      	lsls	r3, r3, #9
    6aa8:	4698      	mov	r8, r3
    6aaa:	44c4      	add	ip, r8
    6aac:	464b      	mov	r3, r9
    6aae:	4351      	muls	r1, r2
    6ab0:	4343      	muls	r3, r0
    6ab2:	0424      	lsls	r4, r4, #16
    6ab4:	0c2e      	lsrs	r6, r5, #16
    6ab6:	0c24      	lsrs	r4, r4, #16
    6ab8:	042d      	lsls	r5, r5, #16
    6aba:	4466      	add	r6, ip
    6abc:	192c      	adds	r4, r5, r4
    6abe:	1859      	adds	r1, r3, r1
    6ac0:	1989      	adds	r1, r1, r6
    6ac2:	1c20      	adds	r0, r4, #0
    6ac4:	bc0c      	pop	{r2, r3}
    6ac6:	4690      	mov	r8, r2
    6ac8:	4699      	mov	r9, r3
    6aca:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006acc <__aeabi_d2uiz>:
    6acc:	b538      	push	{r3, r4, r5, lr}
    6ace:	2200      	movs	r2, #0
    6ad0:	4b0c      	ldr	r3, [pc, #48]	; (6b04 <__aeabi_d2uiz+0x38>)
    6ad2:	1c04      	adds	r4, r0, #0
    6ad4:	1c0d      	adds	r5, r1, #0
    6ad6:	f7ff ff8b 	bl	69f0 <__aeabi_dcmpge>
    6ada:	2800      	cmp	r0, #0
    6adc:	d104      	bne.n	6ae8 <__aeabi_d2uiz+0x1c>
    6ade:	1c20      	adds	r0, r4, #0
    6ae0:	1c29      	adds	r1, r5, #0
    6ae2:	f002 fc59 	bl	9398 <__aeabi_d2iz>
    6ae6:	bd38      	pop	{r3, r4, r5, pc}
    6ae8:	4b06      	ldr	r3, [pc, #24]	; (6b04 <__aeabi_d2uiz+0x38>)
    6aea:	2200      	movs	r2, #0
    6aec:	1c20      	adds	r0, r4, #0
    6aee:	1c29      	adds	r1, r5, #0
    6af0:	f002 f8d8 	bl	8ca4 <__aeabi_dsub>
    6af4:	f002 fc50 	bl	9398 <__aeabi_d2iz>
    6af8:	2380      	movs	r3, #128	; 0x80
    6afa:	061b      	lsls	r3, r3, #24
    6afc:	469c      	mov	ip, r3
    6afe:	4460      	add	r0, ip
    6b00:	e7f1      	b.n	6ae6 <__aeabi_d2uiz+0x1a>
    6b02:	46c0      	nop			; (mov r8, r8)
    6b04:	41e00000 	.word	0x41e00000

00006b08 <__aeabi_fadd>:
    6b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6b0a:	004a      	lsls	r2, r1, #1
    6b0c:	0243      	lsls	r3, r0, #9
    6b0e:	0044      	lsls	r4, r0, #1
    6b10:	024e      	lsls	r6, r1, #9
    6b12:	0fc5      	lsrs	r5, r0, #31
    6b14:	0e24      	lsrs	r4, r4, #24
    6b16:	1c28      	adds	r0, r5, #0
    6b18:	099b      	lsrs	r3, r3, #6
    6b1a:	0e12      	lsrs	r2, r2, #24
    6b1c:	0fc9      	lsrs	r1, r1, #31
    6b1e:	09b7      	lsrs	r7, r6, #6
    6b20:	428d      	cmp	r5, r1
    6b22:	d040      	beq.n	6ba6 <__aeabi_fadd+0x9e>
    6b24:	1aa0      	subs	r0, r4, r2
    6b26:	2800      	cmp	r0, #0
    6b28:	dc00      	bgt.n	6b2c <__aeabi_fadd+0x24>
    6b2a:	e084      	b.n	6c36 <__aeabi_fadd+0x12e>
    6b2c:	2a00      	cmp	r2, #0
    6b2e:	d11c      	bne.n	6b6a <__aeabi_fadd+0x62>
    6b30:	2f00      	cmp	r7, #0
    6b32:	d15c      	bne.n	6bee <__aeabi_fadd+0xe6>
    6b34:	075a      	lsls	r2, r3, #29
    6b36:	d004      	beq.n	6b42 <__aeabi_fadd+0x3a>
    6b38:	220f      	movs	r2, #15
    6b3a:	401a      	ands	r2, r3
    6b3c:	2a04      	cmp	r2, #4
    6b3e:	d000      	beq.n	6b42 <__aeabi_fadd+0x3a>
    6b40:	3304      	adds	r3, #4
    6b42:	2280      	movs	r2, #128	; 0x80
    6b44:	04d2      	lsls	r2, r2, #19
    6b46:	401a      	ands	r2, r3
    6b48:	1c28      	adds	r0, r5, #0
    6b4a:	2a00      	cmp	r2, #0
    6b4c:	d024      	beq.n	6b98 <__aeabi_fadd+0x90>
    6b4e:	3401      	adds	r4, #1
    6b50:	2cff      	cmp	r4, #255	; 0xff
    6b52:	d100      	bne.n	6b56 <__aeabi_fadd+0x4e>
    6b54:	e07b      	b.n	6c4e <__aeabi_fadd+0x146>
    6b56:	019b      	lsls	r3, r3, #6
    6b58:	0a5b      	lsrs	r3, r3, #9
    6b5a:	b2e4      	uxtb	r4, r4
    6b5c:	025b      	lsls	r3, r3, #9
    6b5e:	05e4      	lsls	r4, r4, #23
    6b60:	0a5b      	lsrs	r3, r3, #9
    6b62:	4323      	orrs	r3, r4
    6b64:	07c0      	lsls	r0, r0, #31
    6b66:	4318      	orrs	r0, r3
    6b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6b6a:	2cff      	cmp	r4, #255	; 0xff
    6b6c:	d0e2      	beq.n	6b34 <__aeabi_fadd+0x2c>
    6b6e:	2280      	movs	r2, #128	; 0x80
    6b70:	04d2      	lsls	r2, r2, #19
    6b72:	4317      	orrs	r7, r2
    6b74:	2601      	movs	r6, #1
    6b76:	281b      	cmp	r0, #27
    6b78:	dc08      	bgt.n	6b8c <__aeabi_fadd+0x84>
    6b7a:	1c39      	adds	r1, r7, #0
    6b7c:	2220      	movs	r2, #32
    6b7e:	1c3e      	adds	r6, r7, #0
    6b80:	40c1      	lsrs	r1, r0
    6b82:	1a10      	subs	r0, r2, r0
    6b84:	4086      	lsls	r6, r0
    6b86:	1e77      	subs	r7, r6, #1
    6b88:	41be      	sbcs	r6, r7
    6b8a:	430e      	orrs	r6, r1
    6b8c:	1b9b      	subs	r3, r3, r6
    6b8e:	015a      	lsls	r2, r3, #5
    6b90:	d433      	bmi.n	6bfa <__aeabi_fadd+0xf2>
    6b92:	1c28      	adds	r0, r5, #0
    6b94:	075a      	lsls	r2, r3, #29
    6b96:	d1cf      	bne.n	6b38 <__aeabi_fadd+0x30>
    6b98:	08db      	lsrs	r3, r3, #3
    6b9a:	2cff      	cmp	r4, #255	; 0xff
    6b9c:	d01e      	beq.n	6bdc <__aeabi_fadd+0xd4>
    6b9e:	025b      	lsls	r3, r3, #9
    6ba0:	0a5b      	lsrs	r3, r3, #9
    6ba2:	b2e4      	uxtb	r4, r4
    6ba4:	e7da      	b.n	6b5c <__aeabi_fadd+0x54>
    6ba6:	1aa1      	subs	r1, r4, r2
    6ba8:	2900      	cmp	r1, #0
    6baa:	dd57      	ble.n	6c5c <__aeabi_fadd+0x154>
    6bac:	2a00      	cmp	r2, #0
    6bae:	d03a      	beq.n	6c26 <__aeabi_fadd+0x11e>
    6bb0:	2cff      	cmp	r4, #255	; 0xff
    6bb2:	d0bf      	beq.n	6b34 <__aeabi_fadd+0x2c>
    6bb4:	2280      	movs	r2, #128	; 0x80
    6bb6:	04d2      	lsls	r2, r2, #19
    6bb8:	4317      	orrs	r7, r2
    6bba:	2601      	movs	r6, #1
    6bbc:	291b      	cmp	r1, #27
    6bbe:	dd72      	ble.n	6ca6 <__aeabi_fadd+0x19e>
    6bc0:	199b      	adds	r3, r3, r6
    6bc2:	015a      	lsls	r2, r3, #5
    6bc4:	d5e5      	bpl.n	6b92 <__aeabi_fadd+0x8a>
    6bc6:	3401      	adds	r4, #1
    6bc8:	2cff      	cmp	r4, #255	; 0xff
    6bca:	d100      	bne.n	6bce <__aeabi_fadd+0xc6>
    6bcc:	e087      	b.n	6cde <__aeabi_fadd+0x1d6>
    6bce:	2101      	movs	r1, #1
    6bd0:	4a8a      	ldr	r2, [pc, #552]	; (6dfc <__aeabi_fadd+0x2f4>)
    6bd2:	4019      	ands	r1, r3
    6bd4:	4013      	ands	r3, r2
    6bd6:	085b      	lsrs	r3, r3, #1
    6bd8:	430b      	orrs	r3, r1
    6bda:	e7ab      	b.n	6b34 <__aeabi_fadd+0x2c>
    6bdc:	2b00      	cmp	r3, #0
    6bde:	d036      	beq.n	6c4e <__aeabi_fadd+0x146>
    6be0:	2280      	movs	r2, #128	; 0x80
    6be2:	03d2      	lsls	r2, r2, #15
    6be4:	4313      	orrs	r3, r2
    6be6:	025b      	lsls	r3, r3, #9
    6be8:	0a5b      	lsrs	r3, r3, #9
    6bea:	24ff      	movs	r4, #255	; 0xff
    6bec:	e7b6      	b.n	6b5c <__aeabi_fadd+0x54>
    6bee:	3801      	subs	r0, #1
    6bf0:	2800      	cmp	r0, #0
    6bf2:	d13f      	bne.n	6c74 <__aeabi_fadd+0x16c>
    6bf4:	1bdb      	subs	r3, r3, r7
    6bf6:	015a      	lsls	r2, r3, #5
    6bf8:	d5cb      	bpl.n	6b92 <__aeabi_fadd+0x8a>
    6bfa:	019b      	lsls	r3, r3, #6
    6bfc:	099e      	lsrs	r6, r3, #6
    6bfe:	1c30      	adds	r0, r6, #0
    6c00:	f002 fd52 	bl	96a8 <__clzsi2>
    6c04:	3805      	subs	r0, #5
    6c06:	4086      	lsls	r6, r0
    6c08:	4284      	cmp	r4, r0
    6c0a:	dc23      	bgt.n	6c54 <__aeabi_fadd+0x14c>
    6c0c:	1b00      	subs	r0, r0, r4
    6c0e:	241f      	movs	r4, #31
    6c10:	1c32      	adds	r2, r6, #0
    6c12:	1c43      	adds	r3, r0, #1
    6c14:	1a20      	subs	r0, r4, r0
    6c16:	40da      	lsrs	r2, r3
    6c18:	4086      	lsls	r6, r0
    6c1a:	1c13      	adds	r3, r2, #0
    6c1c:	1e74      	subs	r4, r6, #1
    6c1e:	41a6      	sbcs	r6, r4
    6c20:	2400      	movs	r4, #0
    6c22:	4333      	orrs	r3, r6
    6c24:	e786      	b.n	6b34 <__aeabi_fadd+0x2c>
    6c26:	2f00      	cmp	r7, #0
    6c28:	d100      	bne.n	6c2c <__aeabi_fadd+0x124>
    6c2a:	e783      	b.n	6b34 <__aeabi_fadd+0x2c>
    6c2c:	3901      	subs	r1, #1
    6c2e:	2900      	cmp	r1, #0
    6c30:	d150      	bne.n	6cd4 <__aeabi_fadd+0x1cc>
    6c32:	19db      	adds	r3, r3, r7
    6c34:	e7c5      	b.n	6bc2 <__aeabi_fadd+0xba>
    6c36:	2800      	cmp	r0, #0
    6c38:	d120      	bne.n	6c7c <__aeabi_fadd+0x174>
    6c3a:	1c62      	adds	r2, r4, #1
    6c3c:	b2d2      	uxtb	r2, r2
    6c3e:	2a01      	cmp	r2, #1
    6c40:	dd5e      	ble.n	6d00 <__aeabi_fadd+0x1f8>
    6c42:	1bde      	subs	r6, r3, r7
    6c44:	0172      	lsls	r2, r6, #5
    6c46:	d528      	bpl.n	6c9a <__aeabi_fadd+0x192>
    6c48:	1afe      	subs	r6, r7, r3
    6c4a:	1c0d      	adds	r5, r1, #0
    6c4c:	e7d7      	b.n	6bfe <__aeabi_fadd+0xf6>
    6c4e:	24ff      	movs	r4, #255	; 0xff
    6c50:	2300      	movs	r3, #0
    6c52:	e783      	b.n	6b5c <__aeabi_fadd+0x54>
    6c54:	4b69      	ldr	r3, [pc, #420]	; (6dfc <__aeabi_fadd+0x2f4>)
    6c56:	1a24      	subs	r4, r4, r0
    6c58:	4033      	ands	r3, r6
    6c5a:	e76b      	b.n	6b34 <__aeabi_fadd+0x2c>
    6c5c:	2900      	cmp	r1, #0
    6c5e:	d158      	bne.n	6d12 <__aeabi_fadd+0x20a>
    6c60:	1c62      	adds	r2, r4, #1
    6c62:	b2d1      	uxtb	r1, r2
    6c64:	2901      	cmp	r1, #1
    6c66:	dd3c      	ble.n	6ce2 <__aeabi_fadd+0x1da>
    6c68:	2aff      	cmp	r2, #255	; 0xff
    6c6a:	d037      	beq.n	6cdc <__aeabi_fadd+0x1d4>
    6c6c:	18fb      	adds	r3, r7, r3
    6c6e:	085b      	lsrs	r3, r3, #1
    6c70:	1c14      	adds	r4, r2, #0
    6c72:	e75f      	b.n	6b34 <__aeabi_fadd+0x2c>
    6c74:	2cff      	cmp	r4, #255	; 0xff
    6c76:	d000      	beq.n	6c7a <__aeabi_fadd+0x172>
    6c78:	e77c      	b.n	6b74 <__aeabi_fadd+0x6c>
    6c7a:	e75b      	b.n	6b34 <__aeabi_fadd+0x2c>
    6c7c:	2c00      	cmp	r4, #0
    6c7e:	d01e      	beq.n	6cbe <__aeabi_fadd+0x1b6>
    6c80:	2aff      	cmp	r2, #255	; 0xff
    6c82:	d023      	beq.n	6ccc <__aeabi_fadd+0x1c4>
    6c84:	2480      	movs	r4, #128	; 0x80
    6c86:	04e4      	lsls	r4, r4, #19
    6c88:	4240      	negs	r0, r0
    6c8a:	4323      	orrs	r3, r4
    6c8c:	281b      	cmp	r0, #27
    6c8e:	dd5b      	ble.n	6d48 <__aeabi_fadd+0x240>
    6c90:	2301      	movs	r3, #1
    6c92:	1afb      	subs	r3, r7, r3
    6c94:	1c14      	adds	r4, r2, #0
    6c96:	1c0d      	adds	r5, r1, #0
    6c98:	e7ad      	b.n	6bf6 <__aeabi_fadd+0xee>
    6c9a:	2e00      	cmp	r6, #0
    6c9c:	d1af      	bne.n	6bfe <__aeabi_fadd+0xf6>
    6c9e:	2300      	movs	r3, #0
    6ca0:	2000      	movs	r0, #0
    6ca2:	2400      	movs	r4, #0
    6ca4:	e778      	b.n	6b98 <__aeabi_fadd+0x90>
    6ca6:	1c3a      	adds	r2, r7, #0
    6ca8:	40ca      	lsrs	r2, r1
    6caa:	4694      	mov	ip, r2
    6cac:	2220      	movs	r2, #32
    6cae:	1c3e      	adds	r6, r7, #0
    6cb0:	1a51      	subs	r1, r2, r1
    6cb2:	408e      	lsls	r6, r1
    6cb4:	4662      	mov	r2, ip
    6cb6:	1e77      	subs	r7, r6, #1
    6cb8:	41be      	sbcs	r6, r7
    6cba:	4316      	orrs	r6, r2
    6cbc:	e780      	b.n	6bc0 <__aeabi_fadd+0xb8>
    6cbe:	2b00      	cmp	r3, #0
    6cc0:	d03e      	beq.n	6d40 <__aeabi_fadd+0x238>
    6cc2:	43c0      	mvns	r0, r0
    6cc4:	2800      	cmp	r0, #0
    6cc6:	d0e4      	beq.n	6c92 <__aeabi_fadd+0x18a>
    6cc8:	2aff      	cmp	r2, #255	; 0xff
    6cca:	d1df      	bne.n	6c8c <__aeabi_fadd+0x184>
    6ccc:	1c3b      	adds	r3, r7, #0
    6cce:	24ff      	movs	r4, #255	; 0xff
    6cd0:	1c0d      	adds	r5, r1, #0
    6cd2:	e72f      	b.n	6b34 <__aeabi_fadd+0x2c>
    6cd4:	2cff      	cmp	r4, #255	; 0xff
    6cd6:	d000      	beq.n	6cda <__aeabi_fadd+0x1d2>
    6cd8:	e76f      	b.n	6bba <__aeabi_fadd+0xb2>
    6cda:	e72b      	b.n	6b34 <__aeabi_fadd+0x2c>
    6cdc:	24ff      	movs	r4, #255	; 0xff
    6cde:	2300      	movs	r3, #0
    6ce0:	e75a      	b.n	6b98 <__aeabi_fadd+0x90>
    6ce2:	2c00      	cmp	r4, #0
    6ce4:	d15a      	bne.n	6d9c <__aeabi_fadd+0x294>
    6ce6:	2b00      	cmp	r3, #0
    6ce8:	d07f      	beq.n	6dea <__aeabi_fadd+0x2e2>
    6cea:	2f00      	cmp	r7, #0
    6cec:	d100      	bne.n	6cf0 <__aeabi_fadd+0x1e8>
    6cee:	e721      	b.n	6b34 <__aeabi_fadd+0x2c>
    6cf0:	19db      	adds	r3, r3, r7
    6cf2:	015a      	lsls	r2, r3, #5
    6cf4:	d400      	bmi.n	6cf8 <__aeabi_fadd+0x1f0>
    6cf6:	e74c      	b.n	6b92 <__aeabi_fadd+0x8a>
    6cf8:	4a40      	ldr	r2, [pc, #256]	; (6dfc <__aeabi_fadd+0x2f4>)
    6cfa:	3401      	adds	r4, #1
    6cfc:	4013      	ands	r3, r2
    6cfe:	e719      	b.n	6b34 <__aeabi_fadd+0x2c>
    6d00:	2c00      	cmp	r4, #0
    6d02:	d115      	bne.n	6d30 <__aeabi_fadd+0x228>
    6d04:	2b00      	cmp	r3, #0
    6d06:	d12f      	bne.n	6d68 <__aeabi_fadd+0x260>
    6d08:	2f00      	cmp	r7, #0
    6d0a:	d05d      	beq.n	6dc8 <__aeabi_fadd+0x2c0>
    6d0c:	1c3b      	adds	r3, r7, #0
    6d0e:	1c0d      	adds	r5, r1, #0
    6d10:	e710      	b.n	6b34 <__aeabi_fadd+0x2c>
    6d12:	2c00      	cmp	r4, #0
    6d14:	d121      	bne.n	6d5a <__aeabi_fadd+0x252>
    6d16:	2b00      	cmp	r3, #0
    6d18:	d053      	beq.n	6dc2 <__aeabi_fadd+0x2ba>
    6d1a:	43c9      	mvns	r1, r1
    6d1c:	2900      	cmp	r1, #0
    6d1e:	d004      	beq.n	6d2a <__aeabi_fadd+0x222>
    6d20:	2aff      	cmp	r2, #255	; 0xff
    6d22:	d04b      	beq.n	6dbc <__aeabi_fadd+0x2b4>
    6d24:	291b      	cmp	r1, #27
    6d26:	dd57      	ble.n	6dd8 <__aeabi_fadd+0x2d0>
    6d28:	2301      	movs	r3, #1
    6d2a:	19db      	adds	r3, r3, r7
    6d2c:	1c14      	adds	r4, r2, #0
    6d2e:	e748      	b.n	6bc2 <__aeabi_fadd+0xba>
    6d30:	2b00      	cmp	r3, #0
    6d32:	d122      	bne.n	6d7a <__aeabi_fadd+0x272>
    6d34:	2f00      	cmp	r7, #0
    6d36:	d04a      	beq.n	6dce <__aeabi_fadd+0x2c6>
    6d38:	1c3b      	adds	r3, r7, #0
    6d3a:	1c0d      	adds	r5, r1, #0
    6d3c:	24ff      	movs	r4, #255	; 0xff
    6d3e:	e6f9      	b.n	6b34 <__aeabi_fadd+0x2c>
    6d40:	1c3b      	adds	r3, r7, #0
    6d42:	1c14      	adds	r4, r2, #0
    6d44:	1c0d      	adds	r5, r1, #0
    6d46:	e6f5      	b.n	6b34 <__aeabi_fadd+0x2c>
    6d48:	1c1d      	adds	r5, r3, #0
    6d4a:	2420      	movs	r4, #32
    6d4c:	40c5      	lsrs	r5, r0
    6d4e:	1a20      	subs	r0, r4, r0
    6d50:	4083      	lsls	r3, r0
    6d52:	1e58      	subs	r0, r3, #1
    6d54:	4183      	sbcs	r3, r0
    6d56:	432b      	orrs	r3, r5
    6d58:	e79b      	b.n	6c92 <__aeabi_fadd+0x18a>
    6d5a:	2aff      	cmp	r2, #255	; 0xff
    6d5c:	d02e      	beq.n	6dbc <__aeabi_fadd+0x2b4>
    6d5e:	2480      	movs	r4, #128	; 0x80
    6d60:	04e4      	lsls	r4, r4, #19
    6d62:	4249      	negs	r1, r1
    6d64:	4323      	orrs	r3, r4
    6d66:	e7dd      	b.n	6d24 <__aeabi_fadd+0x21c>
    6d68:	2f00      	cmp	r7, #0
    6d6a:	d100      	bne.n	6d6e <__aeabi_fadd+0x266>
    6d6c:	e6e2      	b.n	6b34 <__aeabi_fadd+0x2c>
    6d6e:	1bda      	subs	r2, r3, r7
    6d70:	0150      	lsls	r0, r2, #5
    6d72:	d53c      	bpl.n	6dee <__aeabi_fadd+0x2e6>
    6d74:	1afb      	subs	r3, r7, r3
    6d76:	1c0d      	adds	r5, r1, #0
    6d78:	e6dc      	b.n	6b34 <__aeabi_fadd+0x2c>
    6d7a:	24ff      	movs	r4, #255	; 0xff
    6d7c:	2f00      	cmp	r7, #0
    6d7e:	d100      	bne.n	6d82 <__aeabi_fadd+0x27a>
    6d80:	e6d8      	b.n	6b34 <__aeabi_fadd+0x2c>
    6d82:	2280      	movs	r2, #128	; 0x80
    6d84:	08db      	lsrs	r3, r3, #3
    6d86:	03d2      	lsls	r2, r2, #15
    6d88:	4213      	tst	r3, r2
    6d8a:	d004      	beq.n	6d96 <__aeabi_fadd+0x28e>
    6d8c:	08fe      	lsrs	r6, r7, #3
    6d8e:	4216      	tst	r6, r2
    6d90:	d101      	bne.n	6d96 <__aeabi_fadd+0x28e>
    6d92:	1c33      	adds	r3, r6, #0
    6d94:	1c0d      	adds	r5, r1, #0
    6d96:	00db      	lsls	r3, r3, #3
    6d98:	24ff      	movs	r4, #255	; 0xff
    6d9a:	e6cb      	b.n	6b34 <__aeabi_fadd+0x2c>
    6d9c:	2b00      	cmp	r3, #0
    6d9e:	d00d      	beq.n	6dbc <__aeabi_fadd+0x2b4>
    6da0:	24ff      	movs	r4, #255	; 0xff
    6da2:	2f00      	cmp	r7, #0
    6da4:	d100      	bne.n	6da8 <__aeabi_fadd+0x2a0>
    6da6:	e6c5      	b.n	6b34 <__aeabi_fadd+0x2c>
    6da8:	2280      	movs	r2, #128	; 0x80
    6daa:	08db      	lsrs	r3, r3, #3
    6dac:	03d2      	lsls	r2, r2, #15
    6dae:	4213      	tst	r3, r2
    6db0:	d0f1      	beq.n	6d96 <__aeabi_fadd+0x28e>
    6db2:	08fe      	lsrs	r6, r7, #3
    6db4:	4216      	tst	r6, r2
    6db6:	d1ee      	bne.n	6d96 <__aeabi_fadd+0x28e>
    6db8:	1c33      	adds	r3, r6, #0
    6dba:	e7ec      	b.n	6d96 <__aeabi_fadd+0x28e>
    6dbc:	1c3b      	adds	r3, r7, #0
    6dbe:	24ff      	movs	r4, #255	; 0xff
    6dc0:	e6b8      	b.n	6b34 <__aeabi_fadd+0x2c>
    6dc2:	1c3b      	adds	r3, r7, #0
    6dc4:	1c14      	adds	r4, r2, #0
    6dc6:	e6b5      	b.n	6b34 <__aeabi_fadd+0x2c>
    6dc8:	1c23      	adds	r3, r4, #0
    6dca:	2000      	movs	r0, #0
    6dcc:	e6e4      	b.n	6b98 <__aeabi_fadd+0x90>
    6dce:	2380      	movs	r3, #128	; 0x80
    6dd0:	2000      	movs	r0, #0
    6dd2:	049b      	lsls	r3, r3, #18
    6dd4:	24ff      	movs	r4, #255	; 0xff
    6dd6:	e6df      	b.n	6b98 <__aeabi_fadd+0x90>
    6dd8:	1c1e      	adds	r6, r3, #0
    6dda:	2420      	movs	r4, #32
    6ddc:	40ce      	lsrs	r6, r1
    6dde:	1a61      	subs	r1, r4, r1
    6de0:	408b      	lsls	r3, r1
    6de2:	1e59      	subs	r1, r3, #1
    6de4:	418b      	sbcs	r3, r1
    6de6:	4333      	orrs	r3, r6
    6de8:	e79f      	b.n	6d2a <__aeabi_fadd+0x222>
    6dea:	1c3b      	adds	r3, r7, #0
    6dec:	e6a2      	b.n	6b34 <__aeabi_fadd+0x2c>
    6dee:	1e13      	subs	r3, r2, #0
    6df0:	d000      	beq.n	6df4 <__aeabi_fadd+0x2ec>
    6df2:	e6ce      	b.n	6b92 <__aeabi_fadd+0x8a>
    6df4:	2300      	movs	r3, #0
    6df6:	2000      	movs	r0, #0
    6df8:	e6ce      	b.n	6b98 <__aeabi_fadd+0x90>
    6dfa:	46c0      	nop			; (mov r8, r8)
    6dfc:	fbffffff 	.word	0xfbffffff

00006e00 <__aeabi_fdiv>:
    6e00:	b5f0      	push	{r4, r5, r6, r7, lr}
    6e02:	4656      	mov	r6, sl
    6e04:	464d      	mov	r5, r9
    6e06:	465f      	mov	r7, fp
    6e08:	4644      	mov	r4, r8
    6e0a:	b4f0      	push	{r4, r5, r6, r7}
    6e0c:	0243      	lsls	r3, r0, #9
    6e0e:	0045      	lsls	r5, r0, #1
    6e10:	0fc7      	lsrs	r7, r0, #31
    6e12:	b083      	sub	sp, #12
    6e14:	468a      	mov	sl, r1
    6e16:	0a5c      	lsrs	r4, r3, #9
    6e18:	0e2e      	lsrs	r6, r5, #24
    6e1a:	46b9      	mov	r9, r7
    6e1c:	d041      	beq.n	6ea2 <__aeabi_fdiv+0xa2>
    6e1e:	2eff      	cmp	r6, #255	; 0xff
    6e20:	d026      	beq.n	6e70 <__aeabi_fdiv+0x70>
    6e22:	2380      	movs	r3, #128	; 0x80
    6e24:	041b      	lsls	r3, r3, #16
    6e26:	4323      	orrs	r3, r4
    6e28:	00dc      	lsls	r4, r3, #3
    6e2a:	2300      	movs	r3, #0
    6e2c:	4698      	mov	r8, r3
    6e2e:	469b      	mov	fp, r3
    6e30:	3e7f      	subs	r6, #127	; 0x7f
    6e32:	4653      	mov	r3, sl
    6e34:	025b      	lsls	r3, r3, #9
    6e36:	0a5d      	lsrs	r5, r3, #9
    6e38:	4653      	mov	r3, sl
    6e3a:	005a      	lsls	r2, r3, #1
    6e3c:	0fdb      	lsrs	r3, r3, #31
    6e3e:	0e12      	lsrs	r2, r2, #24
    6e40:	469a      	mov	sl, r3
    6e42:	d039      	beq.n	6eb8 <__aeabi_fdiv+0xb8>
    6e44:	2aff      	cmp	r2, #255	; 0xff
    6e46:	d033      	beq.n	6eb0 <__aeabi_fdiv+0xb0>
    6e48:	2380      	movs	r3, #128	; 0x80
    6e4a:	041b      	lsls	r3, r3, #16
    6e4c:	432b      	orrs	r3, r5
    6e4e:	00dd      	lsls	r5, r3, #3
    6e50:	2300      	movs	r3, #0
    6e52:	3a7f      	subs	r2, #127	; 0x7f
    6e54:	4651      	mov	r1, sl
    6e56:	1ab2      	subs	r2, r6, r2
    6e58:	4646      	mov	r6, r8
    6e5a:	4079      	eors	r1, r7
    6e5c:	1c08      	adds	r0, r1, #0
    6e5e:	9201      	str	r2, [sp, #4]
    6e60:	431e      	orrs	r6, r3
    6e62:	2e0f      	cmp	r6, #15
    6e64:	d900      	bls.n	6e68 <__aeabi_fdiv+0x68>
    6e66:	e076      	b.n	6f56 <__aeabi_fdiv+0x156>
    6e68:	4a7e      	ldr	r2, [pc, #504]	; (7064 <__aeabi_fdiv+0x264>)
    6e6a:	00b6      	lsls	r6, r6, #2
    6e6c:	5996      	ldr	r6, [r2, r6]
    6e6e:	46b7      	mov	pc, r6
    6e70:	2c00      	cmp	r4, #0
    6e72:	d130      	bne.n	6ed6 <__aeabi_fdiv+0xd6>
    6e74:	2308      	movs	r3, #8
    6e76:	4698      	mov	r8, r3
    6e78:	3b06      	subs	r3, #6
    6e7a:	469b      	mov	fp, r3
    6e7c:	e7d9      	b.n	6e32 <__aeabi_fdiv+0x32>
    6e7e:	2380      	movs	r3, #128	; 0x80
    6e80:	2100      	movs	r1, #0
    6e82:	03db      	lsls	r3, r3, #15
    6e84:	24ff      	movs	r4, #255	; 0xff
    6e86:	025b      	lsls	r3, r3, #9
    6e88:	05e4      	lsls	r4, r4, #23
    6e8a:	0a5b      	lsrs	r3, r3, #9
    6e8c:	07c9      	lsls	r1, r1, #31
    6e8e:	4323      	orrs	r3, r4
    6e90:	430b      	orrs	r3, r1
    6e92:	1c18      	adds	r0, r3, #0
    6e94:	b003      	add	sp, #12
    6e96:	bc3c      	pop	{r2, r3, r4, r5}
    6e98:	4690      	mov	r8, r2
    6e9a:	4699      	mov	r9, r3
    6e9c:	46a2      	mov	sl, r4
    6e9e:	46ab      	mov	fp, r5
    6ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6ea2:	2c00      	cmp	r4, #0
    6ea4:	d128      	bne.n	6ef8 <__aeabi_fdiv+0xf8>
    6ea6:	2304      	movs	r3, #4
    6ea8:	4698      	mov	r8, r3
    6eaa:	3b03      	subs	r3, #3
    6eac:	469b      	mov	fp, r3
    6eae:	e7c0      	b.n	6e32 <__aeabi_fdiv+0x32>
    6eb0:	2d00      	cmp	r5, #0
    6eb2:	d11f      	bne.n	6ef4 <__aeabi_fdiv+0xf4>
    6eb4:	2302      	movs	r3, #2
    6eb6:	e002      	b.n	6ebe <__aeabi_fdiv+0xbe>
    6eb8:	2d00      	cmp	r5, #0
    6eba:	d111      	bne.n	6ee0 <__aeabi_fdiv+0xe0>
    6ebc:	2301      	movs	r3, #1
    6ebe:	1ab2      	subs	r2, r6, r2
    6ec0:	4650      	mov	r0, sl
    6ec2:	4646      	mov	r6, r8
    6ec4:	4078      	eors	r0, r7
    6ec6:	9201      	str	r2, [sp, #4]
    6ec8:	431e      	orrs	r6, r3
    6eca:	2e0f      	cmp	r6, #15
    6ecc:	d827      	bhi.n	6f1e <__aeabi_fdiv+0x11e>
    6ece:	4966      	ldr	r1, [pc, #408]	; (7068 <__aeabi_fdiv+0x268>)
    6ed0:	00b6      	lsls	r6, r6, #2
    6ed2:	5989      	ldr	r1, [r1, r6]
    6ed4:	468f      	mov	pc, r1
    6ed6:	230c      	movs	r3, #12
    6ed8:	4698      	mov	r8, r3
    6eda:	3b09      	subs	r3, #9
    6edc:	469b      	mov	fp, r3
    6ede:	e7a8      	b.n	6e32 <__aeabi_fdiv+0x32>
    6ee0:	1c28      	adds	r0, r5, #0
    6ee2:	f002 fbe1 	bl	96a8 <__clzsi2>
    6ee6:	2276      	movs	r2, #118	; 0x76
    6ee8:	1f43      	subs	r3, r0, #5
    6eea:	4252      	negs	r2, r2
    6eec:	409d      	lsls	r5, r3
    6eee:	1a12      	subs	r2, r2, r0
    6ef0:	2300      	movs	r3, #0
    6ef2:	e7af      	b.n	6e54 <__aeabi_fdiv+0x54>
    6ef4:	2303      	movs	r3, #3
    6ef6:	e7ad      	b.n	6e54 <__aeabi_fdiv+0x54>
    6ef8:	1c20      	adds	r0, r4, #0
    6efa:	f002 fbd5 	bl	96a8 <__clzsi2>
    6efe:	1f43      	subs	r3, r0, #5
    6f00:	409c      	lsls	r4, r3
    6f02:	2376      	movs	r3, #118	; 0x76
    6f04:	425b      	negs	r3, r3
    6f06:	1a1e      	subs	r6, r3, r0
    6f08:	2300      	movs	r3, #0
    6f0a:	4698      	mov	r8, r3
    6f0c:	469b      	mov	fp, r3
    6f0e:	e790      	b.n	6e32 <__aeabi_fdiv+0x32>
    6f10:	2500      	movs	r5, #0
    6f12:	46d1      	mov	r9, sl
    6f14:	469b      	mov	fp, r3
    6f16:	465b      	mov	r3, fp
    6f18:	4648      	mov	r0, r9
    6f1a:	2b02      	cmp	r3, #2
    6f1c:	d16f      	bne.n	6ffe <__aeabi_fdiv+0x1fe>
    6f1e:	2101      	movs	r1, #1
    6f20:	24ff      	movs	r4, #255	; 0xff
    6f22:	4001      	ands	r1, r0
    6f24:	2300      	movs	r3, #0
    6f26:	e7ae      	b.n	6e86 <__aeabi_fdiv+0x86>
    6f28:	237e      	movs	r3, #126	; 0x7e
    6f2a:	9a01      	ldr	r2, [sp, #4]
    6f2c:	425b      	negs	r3, r3
    6f2e:	1a9b      	subs	r3, r3, r2
    6f30:	2b1b      	cmp	r3, #27
    6f32:	dd6d      	ble.n	7010 <__aeabi_fdiv+0x210>
    6f34:	2101      	movs	r1, #1
    6f36:	464b      	mov	r3, r9
    6f38:	4019      	ands	r1, r3
    6f3a:	2400      	movs	r4, #0
    6f3c:	2300      	movs	r3, #0
    6f3e:	e7a2      	b.n	6e86 <__aeabi_fdiv+0x86>
    6f40:	2380      	movs	r3, #128	; 0x80
    6f42:	03db      	lsls	r3, r3, #15
    6f44:	421c      	tst	r4, r3
    6f46:	d149      	bne.n	6fdc <__aeabi_fdiv+0x1dc>
    6f48:	2380      	movs	r3, #128	; 0x80
    6f4a:	03db      	lsls	r3, r3, #15
    6f4c:	4323      	orrs	r3, r4
    6f4e:	025b      	lsls	r3, r3, #9
    6f50:	0a5b      	lsrs	r3, r3, #9
    6f52:	1c39      	adds	r1, r7, #0
    6f54:	e796      	b.n	6e84 <__aeabi_fdiv+0x84>
    6f56:	0163      	lsls	r3, r4, #5
    6f58:	016d      	lsls	r5, r5, #5
    6f5a:	42ab      	cmp	r3, r5
    6f5c:	d337      	bcc.n	6fce <__aeabi_fdiv+0x1ce>
    6f5e:	4689      	mov	r9, r1
    6f60:	201a      	movs	r0, #26
    6f62:	2101      	movs	r1, #1
    6f64:	1b5b      	subs	r3, r3, r5
    6f66:	2401      	movs	r4, #1
    6f68:	1c1e      	adds	r6, r3, #0
    6f6a:	0049      	lsls	r1, r1, #1
    6f6c:	005b      	lsls	r3, r3, #1
    6f6e:	2e00      	cmp	r6, #0
    6f70:	db01      	blt.n	6f76 <__aeabi_fdiv+0x176>
    6f72:	42ab      	cmp	r3, r5
    6f74:	d301      	bcc.n	6f7a <__aeabi_fdiv+0x17a>
    6f76:	1b5b      	subs	r3, r3, r5
    6f78:	4321      	orrs	r1, r4
    6f7a:	3801      	subs	r0, #1
    6f7c:	2800      	cmp	r0, #0
    6f7e:	d1f3      	bne.n	6f68 <__aeabi_fdiv+0x168>
    6f80:	1e58      	subs	r0, r3, #1
    6f82:	4183      	sbcs	r3, r0
    6f84:	430b      	orrs	r3, r1
    6f86:	1c1d      	adds	r5, r3, #0
    6f88:	9c01      	ldr	r4, [sp, #4]
    6f8a:	347f      	adds	r4, #127	; 0x7f
    6f8c:	2c00      	cmp	r4, #0
    6f8e:	ddcb      	ble.n	6f28 <__aeabi_fdiv+0x128>
    6f90:	076b      	lsls	r3, r5, #29
    6f92:	d004      	beq.n	6f9e <__aeabi_fdiv+0x19e>
    6f94:	230f      	movs	r3, #15
    6f96:	402b      	ands	r3, r5
    6f98:	2b04      	cmp	r3, #4
    6f9a:	d000      	beq.n	6f9e <__aeabi_fdiv+0x19e>
    6f9c:	3504      	adds	r5, #4
    6f9e:	012b      	lsls	r3, r5, #4
    6fa0:	d504      	bpl.n	6fac <__aeabi_fdiv+0x1ac>
    6fa2:	9a01      	ldr	r2, [sp, #4]
    6fa4:	4b31      	ldr	r3, [pc, #196]	; (706c <__aeabi_fdiv+0x26c>)
    6fa6:	3280      	adds	r2, #128	; 0x80
    6fa8:	1c14      	adds	r4, r2, #0
    6faa:	401d      	ands	r5, r3
    6fac:	2cfe      	cmp	r4, #254	; 0xfe
    6fae:	dd07      	ble.n	6fc0 <__aeabi_fdiv+0x1c0>
    6fb0:	464b      	mov	r3, r9
    6fb2:	2101      	movs	r1, #1
    6fb4:	24ff      	movs	r4, #255	; 0xff
    6fb6:	4019      	ands	r1, r3
    6fb8:	2300      	movs	r3, #0
    6fba:	e764      	b.n	6e86 <__aeabi_fdiv+0x86>
    6fbc:	1c25      	adds	r5, r4, #0
    6fbe:	e7aa      	b.n	6f16 <__aeabi_fdiv+0x116>
    6fc0:	2101      	movs	r1, #1
    6fc2:	464a      	mov	r2, r9
    6fc4:	01ab      	lsls	r3, r5, #6
    6fc6:	0a5b      	lsrs	r3, r3, #9
    6fc8:	b2e4      	uxtb	r4, r4
    6fca:	4011      	ands	r1, r2
    6fcc:	e75b      	b.n	6e86 <__aeabi_fdiv+0x86>
    6fce:	9a01      	ldr	r2, [sp, #4]
    6fd0:	4689      	mov	r9, r1
    6fd2:	3a01      	subs	r2, #1
    6fd4:	9201      	str	r2, [sp, #4]
    6fd6:	201b      	movs	r0, #27
    6fd8:	2100      	movs	r1, #0
    6fda:	e7c4      	b.n	6f66 <__aeabi_fdiv+0x166>
    6fdc:	421d      	tst	r5, r3
    6fde:	d007      	beq.n	6ff0 <__aeabi_fdiv+0x1f0>
    6fe0:	4323      	orrs	r3, r4
    6fe2:	025b      	lsls	r3, r3, #9
    6fe4:	0a5b      	lsrs	r3, r3, #9
    6fe6:	1c39      	adds	r1, r7, #0
    6fe8:	e74c      	b.n	6e84 <__aeabi_fdiv+0x84>
    6fea:	2500      	movs	r5, #0
    6fec:	0263      	lsls	r3, r4, #9
    6fee:	d5ab      	bpl.n	6f48 <__aeabi_fdiv+0x148>
    6ff0:	2380      	movs	r3, #128	; 0x80
    6ff2:	03db      	lsls	r3, r3, #15
    6ff4:	432b      	orrs	r3, r5
    6ff6:	025b      	lsls	r3, r3, #9
    6ff8:	0a5b      	lsrs	r3, r3, #9
    6ffa:	4651      	mov	r1, sl
    6ffc:	e742      	b.n	6e84 <__aeabi_fdiv+0x84>
    6ffe:	2b03      	cmp	r3, #3
    7000:	d025      	beq.n	704e <__aeabi_fdiv+0x24e>
    7002:	2b01      	cmp	r3, #1
    7004:	d1c0      	bne.n	6f88 <__aeabi_fdiv+0x188>
    7006:	2101      	movs	r1, #1
    7008:	2400      	movs	r4, #0
    700a:	4001      	ands	r1, r0
    700c:	2300      	movs	r3, #0
    700e:	e73a      	b.n	6e86 <__aeabi_fdiv+0x86>
    7010:	1c29      	adds	r1, r5, #0
    7012:	40d9      	lsrs	r1, r3
    7014:	1c2b      	adds	r3, r5, #0
    7016:	9a01      	ldr	r2, [sp, #4]
    7018:	329e      	adds	r2, #158	; 0x9e
    701a:	4093      	lsls	r3, r2
    701c:	1e5d      	subs	r5, r3, #1
    701e:	41ab      	sbcs	r3, r5
    7020:	430b      	orrs	r3, r1
    7022:	075a      	lsls	r2, r3, #29
    7024:	d004      	beq.n	7030 <__aeabi_fdiv+0x230>
    7026:	220f      	movs	r2, #15
    7028:	401a      	ands	r2, r3
    702a:	2a04      	cmp	r2, #4
    702c:	d000      	beq.n	7030 <__aeabi_fdiv+0x230>
    702e:	3304      	adds	r3, #4
    7030:	015a      	lsls	r2, r3, #5
    7032:	d505      	bpl.n	7040 <__aeabi_fdiv+0x240>
    7034:	464b      	mov	r3, r9
    7036:	2101      	movs	r1, #1
    7038:	2401      	movs	r4, #1
    703a:	4019      	ands	r1, r3
    703c:	2300      	movs	r3, #0
    703e:	e722      	b.n	6e86 <__aeabi_fdiv+0x86>
    7040:	2101      	movs	r1, #1
    7042:	464a      	mov	r2, r9
    7044:	019b      	lsls	r3, r3, #6
    7046:	0a5b      	lsrs	r3, r3, #9
    7048:	4011      	ands	r1, r2
    704a:	2400      	movs	r4, #0
    704c:	e71b      	b.n	6e86 <__aeabi_fdiv+0x86>
    704e:	2380      	movs	r3, #128	; 0x80
    7050:	2101      	movs	r1, #1
    7052:	464a      	mov	r2, r9
    7054:	03db      	lsls	r3, r3, #15
    7056:	432b      	orrs	r3, r5
    7058:	025b      	lsls	r3, r3, #9
    705a:	400a      	ands	r2, r1
    705c:	0a5b      	lsrs	r3, r3, #9
    705e:	1c11      	adds	r1, r2, #0
    7060:	e710      	b.n	6e84 <__aeabi_fdiv+0x84>
    7062:	46c0      	nop			; (mov r8, r8)
    7064:	0000f8a8 	.word	0x0000f8a8
    7068:	0000f8e8 	.word	0x0000f8e8
    706c:	f7ffffff 	.word	0xf7ffffff

00007070 <__eqsf2>:
    7070:	0243      	lsls	r3, r0, #9
    7072:	b570      	push	{r4, r5, r6, lr}
    7074:	0042      	lsls	r2, r0, #1
    7076:	004c      	lsls	r4, r1, #1
    7078:	0a5d      	lsrs	r5, r3, #9
    707a:	0fc3      	lsrs	r3, r0, #31
    707c:	0248      	lsls	r0, r1, #9
    707e:	0e12      	lsrs	r2, r2, #24
    7080:	0a46      	lsrs	r6, r0, #9
    7082:	0e24      	lsrs	r4, r4, #24
    7084:	0fc9      	lsrs	r1, r1, #31
    7086:	2aff      	cmp	r2, #255	; 0xff
    7088:	d005      	beq.n	7096 <__eqsf2+0x26>
    708a:	2cff      	cmp	r4, #255	; 0xff
    708c:	d008      	beq.n	70a0 <__eqsf2+0x30>
    708e:	2001      	movs	r0, #1
    7090:	42a2      	cmp	r2, r4
    7092:	d00b      	beq.n	70ac <__eqsf2+0x3c>
    7094:	bd70      	pop	{r4, r5, r6, pc}
    7096:	2001      	movs	r0, #1
    7098:	2d00      	cmp	r5, #0
    709a:	d1fb      	bne.n	7094 <__eqsf2+0x24>
    709c:	2cff      	cmp	r4, #255	; 0xff
    709e:	d1f6      	bne.n	708e <__eqsf2+0x1e>
    70a0:	2001      	movs	r0, #1
    70a2:	2e00      	cmp	r6, #0
    70a4:	d1f6      	bne.n	7094 <__eqsf2+0x24>
    70a6:	2001      	movs	r0, #1
    70a8:	42a2      	cmp	r2, r4
    70aa:	d1f3      	bne.n	7094 <__eqsf2+0x24>
    70ac:	42b5      	cmp	r5, r6
    70ae:	d1f1      	bne.n	7094 <__eqsf2+0x24>
    70b0:	428b      	cmp	r3, r1
    70b2:	d005      	beq.n	70c0 <__eqsf2+0x50>
    70b4:	2a00      	cmp	r2, #0
    70b6:	d1ed      	bne.n	7094 <__eqsf2+0x24>
    70b8:	1c28      	adds	r0, r5, #0
    70ba:	1e43      	subs	r3, r0, #1
    70bc:	4198      	sbcs	r0, r3
    70be:	e7e9      	b.n	7094 <__eqsf2+0x24>
    70c0:	2000      	movs	r0, #0
    70c2:	e7e7      	b.n	7094 <__eqsf2+0x24>

000070c4 <__gesf2>:
    70c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    70c6:	0243      	lsls	r3, r0, #9
    70c8:	024d      	lsls	r5, r1, #9
    70ca:	004a      	lsls	r2, r1, #1
    70cc:	0044      	lsls	r4, r0, #1
    70ce:	0a5e      	lsrs	r6, r3, #9
    70d0:	0e24      	lsrs	r4, r4, #24
    70d2:	0fc3      	lsrs	r3, r0, #31
    70d4:	0a6d      	lsrs	r5, r5, #9
    70d6:	0e12      	lsrs	r2, r2, #24
    70d8:	0fc9      	lsrs	r1, r1, #31
    70da:	2cff      	cmp	r4, #255	; 0xff
    70dc:	d00d      	beq.n	70fa <__gesf2+0x36>
    70de:	2aff      	cmp	r2, #255	; 0xff
    70e0:	d031      	beq.n	7146 <__gesf2+0x82>
    70e2:	2c00      	cmp	r4, #0
    70e4:	d10d      	bne.n	7102 <__gesf2+0x3e>
    70e6:	4277      	negs	r7, r6
    70e8:	4177      	adcs	r7, r6
    70ea:	2a00      	cmp	r2, #0
    70ec:	d123      	bne.n	7136 <__gesf2+0x72>
    70ee:	2d00      	cmp	r5, #0
    70f0:	d121      	bne.n	7136 <__gesf2+0x72>
    70f2:	2000      	movs	r0, #0
    70f4:	2f00      	cmp	r7, #0
    70f6:	d10b      	bne.n	7110 <__gesf2+0x4c>
    70f8:	e007      	b.n	710a <__gesf2+0x46>
    70fa:	2e00      	cmp	r6, #0
    70fc:	d128      	bne.n	7150 <__gesf2+0x8c>
    70fe:	2aff      	cmp	r2, #255	; 0xff
    7100:	d021      	beq.n	7146 <__gesf2+0x82>
    7102:	2a00      	cmp	r2, #0
    7104:	d005      	beq.n	7112 <__gesf2+0x4e>
    7106:	428b      	cmp	r3, r1
    7108:	d007      	beq.n	711a <__gesf2+0x56>
    710a:	4258      	negs	r0, r3
    710c:	2301      	movs	r3, #1
    710e:	4318      	orrs	r0, r3
    7110:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7112:	2d00      	cmp	r5, #0
    7114:	d0f9      	beq.n	710a <__gesf2+0x46>
    7116:	428b      	cmp	r3, r1
    7118:	d1f7      	bne.n	710a <__gesf2+0x46>
    711a:	4294      	cmp	r4, r2
    711c:	dcf5      	bgt.n	710a <__gesf2+0x46>
    711e:	db04      	blt.n	712a <__gesf2+0x66>
    7120:	42ae      	cmp	r6, r5
    7122:	d8f2      	bhi.n	710a <__gesf2+0x46>
    7124:	2000      	movs	r0, #0
    7126:	42ae      	cmp	r6, r5
    7128:	d2f2      	bcs.n	7110 <__gesf2+0x4c>
    712a:	4258      	negs	r0, r3
    712c:	4143      	adcs	r3, r0
    712e:	2001      	movs	r0, #1
    7130:	425b      	negs	r3, r3
    7132:	4318      	orrs	r0, r3
    7134:	e7ec      	b.n	7110 <__gesf2+0x4c>
    7136:	2f00      	cmp	r7, #0
    7138:	d0e5      	beq.n	7106 <__gesf2+0x42>
    713a:	4248      	negs	r0, r1
    713c:	4141      	adcs	r1, r0
    713e:	2001      	movs	r0, #1
    7140:	4249      	negs	r1, r1
    7142:	4308      	orrs	r0, r1
    7144:	e7e4      	b.n	7110 <__gesf2+0x4c>
    7146:	2d00      	cmp	r5, #0
    7148:	d102      	bne.n	7150 <__gesf2+0x8c>
    714a:	2c00      	cmp	r4, #0
    714c:	d0cb      	beq.n	70e6 <__gesf2+0x22>
    714e:	e7da      	b.n	7106 <__gesf2+0x42>
    7150:	2002      	movs	r0, #2
    7152:	4240      	negs	r0, r0
    7154:	e7dc      	b.n	7110 <__gesf2+0x4c>
    7156:	46c0      	nop			; (mov r8, r8)

00007158 <__lesf2>:
    7158:	0243      	lsls	r3, r0, #9
    715a:	b5f0      	push	{r4, r5, r6, r7, lr}
    715c:	0042      	lsls	r2, r0, #1
    715e:	004c      	lsls	r4, r1, #1
    7160:	0a5e      	lsrs	r6, r3, #9
    7162:	0fc3      	lsrs	r3, r0, #31
    7164:	0248      	lsls	r0, r1, #9
    7166:	0e12      	lsrs	r2, r2, #24
    7168:	0a45      	lsrs	r5, r0, #9
    716a:	0e24      	lsrs	r4, r4, #24
    716c:	0fc9      	lsrs	r1, r1, #31
    716e:	2aff      	cmp	r2, #255	; 0xff
    7170:	d00f      	beq.n	7192 <__lesf2+0x3a>
    7172:	2cff      	cmp	r4, #255	; 0xff
    7174:	d01a      	beq.n	71ac <__lesf2+0x54>
    7176:	2a00      	cmp	r2, #0
    7178:	d110      	bne.n	719c <__lesf2+0x44>
    717a:	4277      	negs	r7, r6
    717c:	4177      	adcs	r7, r6
    717e:	2c00      	cmp	r4, #0
    7180:	d029      	beq.n	71d6 <__lesf2+0x7e>
    7182:	2f00      	cmp	r7, #0
    7184:	d017      	beq.n	71b6 <__lesf2+0x5e>
    7186:	4248      	negs	r0, r1
    7188:	4141      	adcs	r1, r0
    718a:	2001      	movs	r0, #1
    718c:	4249      	negs	r1, r1
    718e:	4308      	orrs	r0, r1
    7190:	e00b      	b.n	71aa <__lesf2+0x52>
    7192:	2002      	movs	r0, #2
    7194:	2e00      	cmp	r6, #0
    7196:	d108      	bne.n	71aa <__lesf2+0x52>
    7198:	2cff      	cmp	r4, #255	; 0xff
    719a:	d007      	beq.n	71ac <__lesf2+0x54>
    719c:	2c00      	cmp	r4, #0
    719e:	d10a      	bne.n	71b6 <__lesf2+0x5e>
    71a0:	2d00      	cmp	r5, #0
    71a2:	d108      	bne.n	71b6 <__lesf2+0x5e>
    71a4:	4258      	negs	r0, r3
    71a6:	2301      	movs	r3, #1
    71a8:	4318      	orrs	r0, r3
    71aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    71ac:	2002      	movs	r0, #2
    71ae:	2d00      	cmp	r5, #0
    71b0:	d1fb      	bne.n	71aa <__lesf2+0x52>
    71b2:	2a00      	cmp	r2, #0
    71b4:	d0e1      	beq.n	717a <__lesf2+0x22>
    71b6:	428b      	cmp	r3, r1
    71b8:	d1f4      	bne.n	71a4 <__lesf2+0x4c>
    71ba:	42a2      	cmp	r2, r4
    71bc:	dcf2      	bgt.n	71a4 <__lesf2+0x4c>
    71be:	db04      	blt.n	71ca <__lesf2+0x72>
    71c0:	42ae      	cmp	r6, r5
    71c2:	d8ef      	bhi.n	71a4 <__lesf2+0x4c>
    71c4:	2000      	movs	r0, #0
    71c6:	42ae      	cmp	r6, r5
    71c8:	d2ef      	bcs.n	71aa <__lesf2+0x52>
    71ca:	4258      	negs	r0, r3
    71cc:	4143      	adcs	r3, r0
    71ce:	2001      	movs	r0, #1
    71d0:	425b      	negs	r3, r3
    71d2:	4318      	orrs	r0, r3
    71d4:	e7e9      	b.n	71aa <__lesf2+0x52>
    71d6:	2d00      	cmp	r5, #0
    71d8:	d1d3      	bne.n	7182 <__lesf2+0x2a>
    71da:	2000      	movs	r0, #0
    71dc:	2f00      	cmp	r7, #0
    71de:	d1e4      	bne.n	71aa <__lesf2+0x52>
    71e0:	e7e0      	b.n	71a4 <__lesf2+0x4c>
    71e2:	46c0      	nop			; (mov r8, r8)

000071e4 <__aeabi_fmul>:
    71e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    71e6:	465f      	mov	r7, fp
    71e8:	4656      	mov	r6, sl
    71ea:	464d      	mov	r5, r9
    71ec:	4644      	mov	r4, r8
    71ee:	b4f0      	push	{r4, r5, r6, r7}
    71f0:	0245      	lsls	r5, r0, #9
    71f2:	0046      	lsls	r6, r0, #1
    71f4:	0fc4      	lsrs	r4, r0, #31
    71f6:	b083      	sub	sp, #12
    71f8:	1c0f      	adds	r7, r1, #0
    71fa:	0a6d      	lsrs	r5, r5, #9
    71fc:	0e36      	lsrs	r6, r6, #24
    71fe:	46a3      	mov	fp, r4
    7200:	d045      	beq.n	728e <__aeabi_fmul+0xaa>
    7202:	2eff      	cmp	r6, #255	; 0xff
    7204:	d025      	beq.n	7252 <__aeabi_fmul+0x6e>
    7206:	2380      	movs	r3, #128	; 0x80
    7208:	041b      	lsls	r3, r3, #16
    720a:	431d      	orrs	r5, r3
    720c:	2300      	movs	r3, #0
    720e:	469a      	mov	sl, r3
    7210:	00ed      	lsls	r5, r5, #3
    7212:	3e7f      	subs	r6, #127	; 0x7f
    7214:	9301      	str	r3, [sp, #4]
    7216:	027b      	lsls	r3, r7, #9
    7218:	0a5b      	lsrs	r3, r3, #9
    721a:	4698      	mov	r8, r3
    721c:	0078      	lsls	r0, r7, #1
    721e:	0ffb      	lsrs	r3, r7, #31
    7220:	0e00      	lsrs	r0, r0, #24
    7222:	4699      	mov	r9, r3
    7224:	d040      	beq.n	72a8 <__aeabi_fmul+0xc4>
    7226:	28ff      	cmp	r0, #255	; 0xff
    7228:	d038      	beq.n	729c <__aeabi_fmul+0xb8>
    722a:	2380      	movs	r3, #128	; 0x80
    722c:	4642      	mov	r2, r8
    722e:	041b      	lsls	r3, r3, #16
    7230:	4313      	orrs	r3, r2
    7232:	00db      	lsls	r3, r3, #3
    7234:	4698      	mov	r8, r3
    7236:	2300      	movs	r3, #0
    7238:	387f      	subs	r0, #127	; 0x7f
    723a:	464a      	mov	r2, r9
    723c:	9f01      	ldr	r7, [sp, #4]
    723e:	1830      	adds	r0, r6, r0
    7240:	4062      	eors	r2, r4
    7242:	1c41      	adds	r1, r0, #1
    7244:	431f      	orrs	r7, r3
    7246:	2f0f      	cmp	r7, #15
    7248:	d869      	bhi.n	731e <__aeabi_fmul+0x13a>
    724a:	4e7d      	ldr	r6, [pc, #500]	; (7440 <__aeabi_fmul+0x25c>)
    724c:	00bf      	lsls	r7, r7, #2
    724e:	59f6      	ldr	r6, [r6, r7]
    7250:	46b7      	mov	pc, r6
    7252:	2d00      	cmp	r5, #0
    7254:	d145      	bne.n	72e2 <__aeabi_fmul+0xfe>
    7256:	2308      	movs	r3, #8
    7258:	9301      	str	r3, [sp, #4]
    725a:	3b06      	subs	r3, #6
    725c:	469a      	mov	sl, r3
    725e:	e7da      	b.n	7216 <__aeabi_fmul+0x32>
    7260:	4693      	mov	fp, r2
    7262:	4653      	mov	r3, sl
    7264:	2b02      	cmp	r3, #2
    7266:	d12f      	bne.n	72c8 <__aeabi_fmul+0xe4>
    7268:	465b      	mov	r3, fp
    726a:	2401      	movs	r4, #1
    726c:	2500      	movs	r5, #0
    726e:	401c      	ands	r4, r3
    7270:	23ff      	movs	r3, #255	; 0xff
    7272:	026d      	lsls	r5, r5, #9
    7274:	05db      	lsls	r3, r3, #23
    7276:	0a6d      	lsrs	r5, r5, #9
    7278:	07e4      	lsls	r4, r4, #31
    727a:	431d      	orrs	r5, r3
    727c:	4325      	orrs	r5, r4
    727e:	1c28      	adds	r0, r5, #0
    7280:	b003      	add	sp, #12
    7282:	bc3c      	pop	{r2, r3, r4, r5}
    7284:	4690      	mov	r8, r2
    7286:	4699      	mov	r9, r3
    7288:	46a2      	mov	sl, r4
    728a:	46ab      	mov	fp, r5
    728c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    728e:	2d00      	cmp	r5, #0
    7290:	d12c      	bne.n	72ec <__aeabi_fmul+0x108>
    7292:	2304      	movs	r3, #4
    7294:	9301      	str	r3, [sp, #4]
    7296:	3b03      	subs	r3, #3
    7298:	469a      	mov	sl, r3
    729a:	e7bc      	b.n	7216 <__aeabi_fmul+0x32>
    729c:	4643      	mov	r3, r8
    729e:	425a      	negs	r2, r3
    72a0:	4153      	adcs	r3, r2
    72a2:	2203      	movs	r2, #3
    72a4:	1ad3      	subs	r3, r2, r3
    72a6:	e7c8      	b.n	723a <__aeabi_fmul+0x56>
    72a8:	4642      	mov	r2, r8
    72aa:	2301      	movs	r3, #1
    72ac:	2a00      	cmp	r2, #0
    72ae:	d0c4      	beq.n	723a <__aeabi_fmul+0x56>
    72b0:	4640      	mov	r0, r8
    72b2:	f002 f9f9 	bl	96a8 <__clzsi2>
    72b6:	4642      	mov	r2, r8
    72b8:	1f43      	subs	r3, r0, #5
    72ba:	409a      	lsls	r2, r3
    72bc:	2376      	movs	r3, #118	; 0x76
    72be:	425b      	negs	r3, r3
    72c0:	1a18      	subs	r0, r3, r0
    72c2:	4690      	mov	r8, r2
    72c4:	2300      	movs	r3, #0
    72c6:	e7b8      	b.n	723a <__aeabi_fmul+0x56>
    72c8:	2b03      	cmp	r3, #3
    72ca:	d100      	bne.n	72ce <__aeabi_fmul+0xea>
    72cc:	e0ad      	b.n	742a <__aeabi_fmul+0x246>
    72ce:	2b01      	cmp	r3, #1
    72d0:	d000      	beq.n	72d4 <__aeabi_fmul+0xf0>
    72d2:	e08c      	b.n	73ee <__aeabi_fmul+0x20a>
    72d4:	465b      	mov	r3, fp
    72d6:	4654      	mov	r4, sl
    72d8:	401c      	ands	r4, r3
    72da:	b2e4      	uxtb	r4, r4
    72dc:	2300      	movs	r3, #0
    72de:	2500      	movs	r5, #0
    72e0:	e7c7      	b.n	7272 <__aeabi_fmul+0x8e>
    72e2:	230c      	movs	r3, #12
    72e4:	9301      	str	r3, [sp, #4]
    72e6:	3b09      	subs	r3, #9
    72e8:	469a      	mov	sl, r3
    72ea:	e794      	b.n	7216 <__aeabi_fmul+0x32>
    72ec:	1c28      	adds	r0, r5, #0
    72ee:	f002 f9db 	bl	96a8 <__clzsi2>
    72f2:	2676      	movs	r6, #118	; 0x76
    72f4:	1f43      	subs	r3, r0, #5
    72f6:	409d      	lsls	r5, r3
    72f8:	2300      	movs	r3, #0
    72fa:	4276      	negs	r6, r6
    72fc:	1a36      	subs	r6, r6, r0
    72fe:	9301      	str	r3, [sp, #4]
    7300:	469a      	mov	sl, r3
    7302:	e788      	b.n	7216 <__aeabi_fmul+0x32>
    7304:	2580      	movs	r5, #128	; 0x80
    7306:	2400      	movs	r4, #0
    7308:	03ed      	lsls	r5, r5, #15
    730a:	23ff      	movs	r3, #255	; 0xff
    730c:	e7b1      	b.n	7272 <__aeabi_fmul+0x8e>
    730e:	4645      	mov	r5, r8
    7310:	46cb      	mov	fp, r9
    7312:	469a      	mov	sl, r3
    7314:	e7a5      	b.n	7262 <__aeabi_fmul+0x7e>
    7316:	4645      	mov	r5, r8
    7318:	4693      	mov	fp, r2
    731a:	469a      	mov	sl, r3
    731c:	e7a1      	b.n	7262 <__aeabi_fmul+0x7e>
    731e:	4643      	mov	r3, r8
    7320:	042c      	lsls	r4, r5, #16
    7322:	0c1b      	lsrs	r3, r3, #16
    7324:	469c      	mov	ip, r3
    7326:	0c23      	lsrs	r3, r4, #16
    7328:	4644      	mov	r4, r8
    732a:	0426      	lsls	r6, r4, #16
    732c:	1c1c      	adds	r4, r3, #0
    732e:	0c36      	lsrs	r6, r6, #16
    7330:	0c2f      	lsrs	r7, r5, #16
    7332:	4374      	muls	r4, r6
    7334:	1c35      	adds	r5, r6, #0
    7336:	4666      	mov	r6, ip
    7338:	437d      	muls	r5, r7
    733a:	4373      	muls	r3, r6
    733c:	4377      	muls	r7, r6
    733e:	18eb      	adds	r3, r5, r3
    7340:	0c26      	lsrs	r6, r4, #16
    7342:	199e      	adds	r6, r3, r6
    7344:	42b5      	cmp	r5, r6
    7346:	d903      	bls.n	7350 <__aeabi_fmul+0x16c>
    7348:	2380      	movs	r3, #128	; 0x80
    734a:	025b      	lsls	r3, r3, #9
    734c:	469c      	mov	ip, r3
    734e:	4467      	add	r7, ip
    7350:	0424      	lsls	r4, r4, #16
    7352:	0433      	lsls	r3, r6, #16
    7354:	0c24      	lsrs	r4, r4, #16
    7356:	191b      	adds	r3, r3, r4
    7358:	019d      	lsls	r5, r3, #6
    735a:	1e6c      	subs	r4, r5, #1
    735c:	41a5      	sbcs	r5, r4
    735e:	0e9b      	lsrs	r3, r3, #26
    7360:	0c36      	lsrs	r6, r6, #16
    7362:	432b      	orrs	r3, r5
    7364:	19bd      	adds	r5, r7, r6
    7366:	01ad      	lsls	r5, r5, #6
    7368:	431d      	orrs	r5, r3
    736a:	012b      	lsls	r3, r5, #4
    736c:	d504      	bpl.n	7378 <__aeabi_fmul+0x194>
    736e:	2301      	movs	r3, #1
    7370:	0868      	lsrs	r0, r5, #1
    7372:	401d      	ands	r5, r3
    7374:	4305      	orrs	r5, r0
    7376:	1c08      	adds	r0, r1, #0
    7378:	1c03      	adds	r3, r0, #0
    737a:	337f      	adds	r3, #127	; 0x7f
    737c:	2b00      	cmp	r3, #0
    737e:	dd2c      	ble.n	73da <__aeabi_fmul+0x1f6>
    7380:	0769      	lsls	r1, r5, #29
    7382:	d004      	beq.n	738e <__aeabi_fmul+0x1aa>
    7384:	210f      	movs	r1, #15
    7386:	4029      	ands	r1, r5
    7388:	2904      	cmp	r1, #4
    738a:	d000      	beq.n	738e <__aeabi_fmul+0x1aa>
    738c:	3504      	adds	r5, #4
    738e:	0129      	lsls	r1, r5, #4
    7390:	d503      	bpl.n	739a <__aeabi_fmul+0x1b6>
    7392:	4b2c      	ldr	r3, [pc, #176]	; (7444 <__aeabi_fmul+0x260>)
    7394:	401d      	ands	r5, r3
    7396:	1c03      	adds	r3, r0, #0
    7398:	3380      	adds	r3, #128	; 0x80
    739a:	2bfe      	cmp	r3, #254	; 0xfe
    739c:	dd17      	ble.n	73ce <__aeabi_fmul+0x1ea>
    739e:	2401      	movs	r4, #1
    73a0:	23ff      	movs	r3, #255	; 0xff
    73a2:	4014      	ands	r4, r2
    73a4:	2500      	movs	r5, #0
    73a6:	e764      	b.n	7272 <__aeabi_fmul+0x8e>
    73a8:	2080      	movs	r0, #128	; 0x80
    73aa:	03c0      	lsls	r0, r0, #15
    73ac:	4205      	tst	r5, r0
    73ae:	d009      	beq.n	73c4 <__aeabi_fmul+0x1e0>
    73b0:	4643      	mov	r3, r8
    73b2:	4203      	tst	r3, r0
    73b4:	d106      	bne.n	73c4 <__aeabi_fmul+0x1e0>
    73b6:	4645      	mov	r5, r8
    73b8:	4305      	orrs	r5, r0
    73ba:	026d      	lsls	r5, r5, #9
    73bc:	0a6d      	lsrs	r5, r5, #9
    73be:	464c      	mov	r4, r9
    73c0:	23ff      	movs	r3, #255	; 0xff
    73c2:	e756      	b.n	7272 <__aeabi_fmul+0x8e>
    73c4:	4305      	orrs	r5, r0
    73c6:	026d      	lsls	r5, r5, #9
    73c8:	0a6d      	lsrs	r5, r5, #9
    73ca:	23ff      	movs	r3, #255	; 0xff
    73cc:	e751      	b.n	7272 <__aeabi_fmul+0x8e>
    73ce:	2401      	movs	r4, #1
    73d0:	01ad      	lsls	r5, r5, #6
    73d2:	0a6d      	lsrs	r5, r5, #9
    73d4:	b2db      	uxtb	r3, r3
    73d6:	4014      	ands	r4, r2
    73d8:	e74b      	b.n	7272 <__aeabi_fmul+0x8e>
    73da:	237e      	movs	r3, #126	; 0x7e
    73dc:	425b      	negs	r3, r3
    73de:	1a1b      	subs	r3, r3, r0
    73e0:	2b1b      	cmp	r3, #27
    73e2:	dd07      	ble.n	73f4 <__aeabi_fmul+0x210>
    73e4:	2401      	movs	r4, #1
    73e6:	2300      	movs	r3, #0
    73e8:	4014      	ands	r4, r2
    73ea:	2500      	movs	r5, #0
    73ec:	e741      	b.n	7272 <__aeabi_fmul+0x8e>
    73ee:	1c08      	adds	r0, r1, #0
    73f0:	465a      	mov	r2, fp
    73f2:	e7c1      	b.n	7378 <__aeabi_fmul+0x194>
    73f4:	309e      	adds	r0, #158	; 0x9e
    73f6:	1c29      	adds	r1, r5, #0
    73f8:	4085      	lsls	r5, r0
    73fa:	40d9      	lsrs	r1, r3
    73fc:	1e68      	subs	r0, r5, #1
    73fe:	4185      	sbcs	r5, r0
    7400:	430d      	orrs	r5, r1
    7402:	076b      	lsls	r3, r5, #29
    7404:	d004      	beq.n	7410 <__aeabi_fmul+0x22c>
    7406:	230f      	movs	r3, #15
    7408:	402b      	ands	r3, r5
    740a:	2b04      	cmp	r3, #4
    740c:	d000      	beq.n	7410 <__aeabi_fmul+0x22c>
    740e:	3504      	adds	r5, #4
    7410:	016b      	lsls	r3, r5, #5
    7412:	d504      	bpl.n	741e <__aeabi_fmul+0x23a>
    7414:	2401      	movs	r4, #1
    7416:	2301      	movs	r3, #1
    7418:	4014      	ands	r4, r2
    741a:	2500      	movs	r5, #0
    741c:	e729      	b.n	7272 <__aeabi_fmul+0x8e>
    741e:	2401      	movs	r4, #1
    7420:	01ad      	lsls	r5, r5, #6
    7422:	0a6d      	lsrs	r5, r5, #9
    7424:	4014      	ands	r4, r2
    7426:	2300      	movs	r3, #0
    7428:	e723      	b.n	7272 <__aeabi_fmul+0x8e>
    742a:	2380      	movs	r3, #128	; 0x80
    742c:	03db      	lsls	r3, r3, #15
    742e:	431d      	orrs	r5, r3
    7430:	2401      	movs	r4, #1
    7432:	465b      	mov	r3, fp
    7434:	026d      	lsls	r5, r5, #9
    7436:	4023      	ands	r3, r4
    7438:	1c1c      	adds	r4, r3, #0
    743a:	0a6d      	lsrs	r5, r5, #9
    743c:	23ff      	movs	r3, #255	; 0xff
    743e:	e718      	b.n	7272 <__aeabi_fmul+0x8e>
    7440:	0000f928 	.word	0x0000f928
    7444:	f7ffffff 	.word	0xf7ffffff

00007448 <__aeabi_fsub>:
    7448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    744a:	004a      	lsls	r2, r1, #1
    744c:	0243      	lsls	r3, r0, #9
    744e:	0044      	lsls	r4, r0, #1
    7450:	024d      	lsls	r5, r1, #9
    7452:	0fc0      	lsrs	r0, r0, #31
    7454:	0e24      	lsrs	r4, r4, #24
    7456:	1c06      	adds	r6, r0, #0
    7458:	099b      	lsrs	r3, r3, #6
    745a:	0e12      	lsrs	r2, r2, #24
    745c:	0fc9      	lsrs	r1, r1, #31
    745e:	09ad      	lsrs	r5, r5, #6
    7460:	2aff      	cmp	r2, #255	; 0xff
    7462:	d100      	bne.n	7466 <__aeabi_fsub+0x1e>
    7464:	e075      	b.n	7552 <__aeabi_fsub+0x10a>
    7466:	2701      	movs	r7, #1
    7468:	4079      	eors	r1, r7
    746a:	4288      	cmp	r0, r1
    746c:	d050      	beq.n	7510 <__aeabi_fsub+0xc8>
    746e:	1aa0      	subs	r0, r4, r2
    7470:	2800      	cmp	r0, #0
    7472:	dc00      	bgt.n	7476 <__aeabi_fsub+0x2e>
    7474:	e08f      	b.n	7596 <__aeabi_fsub+0x14e>
    7476:	2a00      	cmp	r2, #0
    7478:	d11e      	bne.n	74b8 <__aeabi_fsub+0x70>
    747a:	2d00      	cmp	r5, #0
    747c:	d000      	beq.n	7480 <__aeabi_fsub+0x38>
    747e:	e075      	b.n	756c <__aeabi_fsub+0x124>
    7480:	075a      	lsls	r2, r3, #29
    7482:	d004      	beq.n	748e <__aeabi_fsub+0x46>
    7484:	220f      	movs	r2, #15
    7486:	401a      	ands	r2, r3
    7488:	2a04      	cmp	r2, #4
    748a:	d000      	beq.n	748e <__aeabi_fsub+0x46>
    748c:	3304      	adds	r3, #4
    748e:	2280      	movs	r2, #128	; 0x80
    7490:	2001      	movs	r0, #1
    7492:	04d2      	lsls	r2, r2, #19
    7494:	401a      	ands	r2, r3
    7496:	4030      	ands	r0, r6
    7498:	2a00      	cmp	r2, #0
    749a:	d032      	beq.n	7502 <__aeabi_fsub+0xba>
    749c:	3401      	adds	r4, #1
    749e:	2cff      	cmp	r4, #255	; 0xff
    74a0:	d100      	bne.n	74a4 <__aeabi_fsub+0x5c>
    74a2:	e084      	b.n	75ae <__aeabi_fsub+0x166>
    74a4:	019b      	lsls	r3, r3, #6
    74a6:	0a5b      	lsrs	r3, r3, #9
    74a8:	b2e4      	uxtb	r4, r4
    74aa:	025b      	lsls	r3, r3, #9
    74ac:	05e4      	lsls	r4, r4, #23
    74ae:	0a5b      	lsrs	r3, r3, #9
    74b0:	4323      	orrs	r3, r4
    74b2:	07c0      	lsls	r0, r0, #31
    74b4:	4318      	orrs	r0, r3
    74b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    74b8:	2cff      	cmp	r4, #255	; 0xff
    74ba:	d0e1      	beq.n	7480 <__aeabi_fsub+0x38>
    74bc:	2280      	movs	r2, #128	; 0x80
    74be:	04d2      	lsls	r2, r2, #19
    74c0:	4315      	orrs	r5, r2
    74c2:	281b      	cmp	r0, #27
    74c4:	dd7a      	ble.n	75bc <__aeabi_fsub+0x174>
    74c6:	2501      	movs	r5, #1
    74c8:	1b5b      	subs	r3, r3, r5
    74ca:	015a      	lsls	r2, r3, #5
    74cc:	d55d      	bpl.n	758a <__aeabi_fsub+0x142>
    74ce:	019b      	lsls	r3, r3, #6
    74d0:	099f      	lsrs	r7, r3, #6
    74d2:	1c38      	adds	r0, r7, #0
    74d4:	f002 f8e8 	bl	96a8 <__clzsi2>
    74d8:	3805      	subs	r0, #5
    74da:	4087      	lsls	r7, r0
    74dc:	4284      	cmp	r4, r0
    74de:	dc69      	bgt.n	75b4 <__aeabi_fsub+0x16c>
    74e0:	1b00      	subs	r0, r0, r4
    74e2:	241f      	movs	r4, #31
    74e4:	1c3a      	adds	r2, r7, #0
    74e6:	1c43      	adds	r3, r0, #1
    74e8:	1a20      	subs	r0, r4, r0
    74ea:	40da      	lsrs	r2, r3
    74ec:	4087      	lsls	r7, r0
    74ee:	1c13      	adds	r3, r2, #0
    74f0:	1e7c      	subs	r4, r7, #1
    74f2:	41a7      	sbcs	r7, r4
    74f4:	2400      	movs	r4, #0
    74f6:	433b      	orrs	r3, r7
    74f8:	e7c2      	b.n	7480 <__aeabi_fsub+0x38>
    74fa:	1e13      	subs	r3, r2, #0
    74fc:	d145      	bne.n	758a <__aeabi_fsub+0x142>
    74fe:	2300      	movs	r3, #0
    7500:	2000      	movs	r0, #0
    7502:	08db      	lsrs	r3, r3, #3
    7504:	2cff      	cmp	r4, #255	; 0xff
    7506:	d028      	beq.n	755a <__aeabi_fsub+0x112>
    7508:	025b      	lsls	r3, r3, #9
    750a:	0a5b      	lsrs	r3, r3, #9
    750c:	b2e4      	uxtb	r4, r4
    750e:	e7cc      	b.n	74aa <__aeabi_fsub+0x62>
    7510:	1aa1      	subs	r1, r4, r2
    7512:	2900      	cmp	r1, #0
    7514:	dd5b      	ble.n	75ce <__aeabi_fsub+0x186>
    7516:	2a00      	cmp	r2, #0
    7518:	d02e      	beq.n	7578 <__aeabi_fsub+0x130>
    751a:	2cff      	cmp	r4, #255	; 0xff
    751c:	d0b0      	beq.n	7480 <__aeabi_fsub+0x38>
    751e:	2280      	movs	r2, #128	; 0x80
    7520:	04d2      	lsls	r2, r2, #19
    7522:	4315      	orrs	r5, r2
    7524:	291b      	cmp	r1, #27
    7526:	dc74      	bgt.n	7612 <__aeabi_fsub+0x1ca>
    7528:	1c2f      	adds	r7, r5, #0
    752a:	2220      	movs	r2, #32
    752c:	40cf      	lsrs	r7, r1
    752e:	1a51      	subs	r1, r2, r1
    7530:	408d      	lsls	r5, r1
    7532:	1e69      	subs	r1, r5, #1
    7534:	418d      	sbcs	r5, r1
    7536:	433d      	orrs	r5, r7
    7538:	195b      	adds	r3, r3, r5
    753a:	015a      	lsls	r2, r3, #5
    753c:	d525      	bpl.n	758a <__aeabi_fsub+0x142>
    753e:	3401      	adds	r4, #1
    7540:	2cff      	cmp	r4, #255	; 0xff
    7542:	d074      	beq.n	762e <__aeabi_fsub+0x1e6>
    7544:	2101      	movs	r1, #1
    7546:	4a7e      	ldr	r2, [pc, #504]	; (7740 <__aeabi_fsub+0x2f8>)
    7548:	4019      	ands	r1, r3
    754a:	4013      	ands	r3, r2
    754c:	085b      	lsrs	r3, r3, #1
    754e:	430b      	orrs	r3, r1
    7550:	e796      	b.n	7480 <__aeabi_fsub+0x38>
    7552:	2d00      	cmp	r5, #0
    7554:	d000      	beq.n	7558 <__aeabi_fsub+0x110>
    7556:	e788      	b.n	746a <__aeabi_fsub+0x22>
    7558:	e785      	b.n	7466 <__aeabi_fsub+0x1e>
    755a:	2b00      	cmp	r3, #0
    755c:	d027      	beq.n	75ae <__aeabi_fsub+0x166>
    755e:	2280      	movs	r2, #128	; 0x80
    7560:	03d2      	lsls	r2, r2, #15
    7562:	4313      	orrs	r3, r2
    7564:	025b      	lsls	r3, r3, #9
    7566:	0a5b      	lsrs	r3, r3, #9
    7568:	24ff      	movs	r4, #255	; 0xff
    756a:	e79e      	b.n	74aa <__aeabi_fsub+0x62>
    756c:	3801      	subs	r0, #1
    756e:	2800      	cmp	r0, #0
    7570:	d0aa      	beq.n	74c8 <__aeabi_fsub+0x80>
    7572:	2cff      	cmp	r4, #255	; 0xff
    7574:	d1a5      	bne.n	74c2 <__aeabi_fsub+0x7a>
    7576:	e783      	b.n	7480 <__aeabi_fsub+0x38>
    7578:	2d00      	cmp	r5, #0
    757a:	d100      	bne.n	757e <__aeabi_fsub+0x136>
    757c:	e780      	b.n	7480 <__aeabi_fsub+0x38>
    757e:	3901      	subs	r1, #1
    7580:	2900      	cmp	r1, #0
    7582:	d0d9      	beq.n	7538 <__aeabi_fsub+0xf0>
    7584:	2cff      	cmp	r4, #255	; 0xff
    7586:	d1cd      	bne.n	7524 <__aeabi_fsub+0xdc>
    7588:	e77a      	b.n	7480 <__aeabi_fsub+0x38>
    758a:	075a      	lsls	r2, r3, #29
    758c:	d000      	beq.n	7590 <__aeabi_fsub+0x148>
    758e:	e779      	b.n	7484 <__aeabi_fsub+0x3c>
    7590:	2001      	movs	r0, #1
    7592:	4030      	ands	r0, r6
    7594:	e7b5      	b.n	7502 <__aeabi_fsub+0xba>
    7596:	2800      	cmp	r0, #0
    7598:	d125      	bne.n	75e6 <__aeabi_fsub+0x19e>
    759a:	1c62      	adds	r2, r4, #1
    759c:	b2d2      	uxtb	r2, r2
    759e:	2a01      	cmp	r2, #1
    75a0:	dd55      	ble.n	764e <__aeabi_fsub+0x206>
    75a2:	1b5f      	subs	r7, r3, r5
    75a4:	017a      	lsls	r2, r7, #5
    75a6:	d52d      	bpl.n	7604 <__aeabi_fsub+0x1bc>
    75a8:	1aef      	subs	r7, r5, r3
    75aa:	1c0e      	adds	r6, r1, #0
    75ac:	e791      	b.n	74d2 <__aeabi_fsub+0x8a>
    75ae:	24ff      	movs	r4, #255	; 0xff
    75b0:	2300      	movs	r3, #0
    75b2:	e77a      	b.n	74aa <__aeabi_fsub+0x62>
    75b4:	4b62      	ldr	r3, [pc, #392]	; (7740 <__aeabi_fsub+0x2f8>)
    75b6:	1a24      	subs	r4, r4, r0
    75b8:	403b      	ands	r3, r7
    75ba:	e761      	b.n	7480 <__aeabi_fsub+0x38>
    75bc:	1c29      	adds	r1, r5, #0
    75be:	2220      	movs	r2, #32
    75c0:	40c1      	lsrs	r1, r0
    75c2:	1a10      	subs	r0, r2, r0
    75c4:	4085      	lsls	r5, r0
    75c6:	1e68      	subs	r0, r5, #1
    75c8:	4185      	sbcs	r5, r0
    75ca:	430d      	orrs	r5, r1
    75cc:	e77c      	b.n	74c8 <__aeabi_fsub+0x80>
    75ce:	2900      	cmp	r1, #0
    75d0:	d146      	bne.n	7660 <__aeabi_fsub+0x218>
    75d2:	1c62      	adds	r2, r4, #1
    75d4:	b2d1      	uxtb	r1, r2
    75d6:	2901      	cmp	r1, #1
    75d8:	dd2b      	ble.n	7632 <__aeabi_fsub+0x1ea>
    75da:	2aff      	cmp	r2, #255	; 0xff
    75dc:	d026      	beq.n	762c <__aeabi_fsub+0x1e4>
    75de:	18eb      	adds	r3, r5, r3
    75e0:	085b      	lsrs	r3, r3, #1
    75e2:	1c14      	adds	r4, r2, #0
    75e4:	e74c      	b.n	7480 <__aeabi_fsub+0x38>
    75e6:	2c00      	cmp	r4, #0
    75e8:	d015      	beq.n	7616 <__aeabi_fsub+0x1ce>
    75ea:	2aff      	cmp	r2, #255	; 0xff
    75ec:	d01a      	beq.n	7624 <__aeabi_fsub+0x1dc>
    75ee:	2480      	movs	r4, #128	; 0x80
    75f0:	04e4      	lsls	r4, r4, #19
    75f2:	4240      	negs	r0, r0
    75f4:	4323      	orrs	r3, r4
    75f6:	281b      	cmp	r0, #27
    75f8:	dd4d      	ble.n	7696 <__aeabi_fsub+0x24e>
    75fa:	2301      	movs	r3, #1
    75fc:	1aeb      	subs	r3, r5, r3
    75fe:	1c14      	adds	r4, r2, #0
    7600:	1c0e      	adds	r6, r1, #0
    7602:	e762      	b.n	74ca <__aeabi_fsub+0x82>
    7604:	2f00      	cmp	r7, #0
    7606:	d000      	beq.n	760a <__aeabi_fsub+0x1c2>
    7608:	e763      	b.n	74d2 <__aeabi_fsub+0x8a>
    760a:	2300      	movs	r3, #0
    760c:	2000      	movs	r0, #0
    760e:	2400      	movs	r4, #0
    7610:	e777      	b.n	7502 <__aeabi_fsub+0xba>
    7612:	2501      	movs	r5, #1
    7614:	e790      	b.n	7538 <__aeabi_fsub+0xf0>
    7616:	2b00      	cmp	r3, #0
    7618:	d039      	beq.n	768e <__aeabi_fsub+0x246>
    761a:	43c0      	mvns	r0, r0
    761c:	2800      	cmp	r0, #0
    761e:	d0ed      	beq.n	75fc <__aeabi_fsub+0x1b4>
    7620:	2aff      	cmp	r2, #255	; 0xff
    7622:	d1e8      	bne.n	75f6 <__aeabi_fsub+0x1ae>
    7624:	1c2b      	adds	r3, r5, #0
    7626:	24ff      	movs	r4, #255	; 0xff
    7628:	1c0e      	adds	r6, r1, #0
    762a:	e729      	b.n	7480 <__aeabi_fsub+0x38>
    762c:	24ff      	movs	r4, #255	; 0xff
    762e:	2300      	movs	r3, #0
    7630:	e767      	b.n	7502 <__aeabi_fsub+0xba>
    7632:	2c00      	cmp	r4, #0
    7634:	d15a      	bne.n	76ec <__aeabi_fsub+0x2a4>
    7636:	2b00      	cmp	r3, #0
    7638:	d07f      	beq.n	773a <__aeabi_fsub+0x2f2>
    763a:	2d00      	cmp	r5, #0
    763c:	d100      	bne.n	7640 <__aeabi_fsub+0x1f8>
    763e:	e71f      	b.n	7480 <__aeabi_fsub+0x38>
    7640:	195b      	adds	r3, r3, r5
    7642:	015a      	lsls	r2, r3, #5
    7644:	d5a1      	bpl.n	758a <__aeabi_fsub+0x142>
    7646:	4a3e      	ldr	r2, [pc, #248]	; (7740 <__aeabi_fsub+0x2f8>)
    7648:	3401      	adds	r4, #1
    764a:	4013      	ands	r3, r2
    764c:	e718      	b.n	7480 <__aeabi_fsub+0x38>
    764e:	2c00      	cmp	r4, #0
    7650:	d115      	bne.n	767e <__aeabi_fsub+0x236>
    7652:	2b00      	cmp	r3, #0
    7654:	d12f      	bne.n	76b6 <__aeabi_fsub+0x26e>
    7656:	2d00      	cmp	r5, #0
    7658:	d05e      	beq.n	7718 <__aeabi_fsub+0x2d0>
    765a:	1c2b      	adds	r3, r5, #0
    765c:	1c0e      	adds	r6, r1, #0
    765e:	e70f      	b.n	7480 <__aeabi_fsub+0x38>
    7660:	2c00      	cmp	r4, #0
    7662:	d121      	bne.n	76a8 <__aeabi_fsub+0x260>
    7664:	2b00      	cmp	r3, #0
    7666:	d054      	beq.n	7712 <__aeabi_fsub+0x2ca>
    7668:	43c9      	mvns	r1, r1
    766a:	2900      	cmp	r1, #0
    766c:	d004      	beq.n	7678 <__aeabi_fsub+0x230>
    766e:	2aff      	cmp	r2, #255	; 0xff
    7670:	d04c      	beq.n	770c <__aeabi_fsub+0x2c4>
    7672:	291b      	cmp	r1, #27
    7674:	dd58      	ble.n	7728 <__aeabi_fsub+0x2e0>
    7676:	2301      	movs	r3, #1
    7678:	195b      	adds	r3, r3, r5
    767a:	1c14      	adds	r4, r2, #0
    767c:	e75d      	b.n	753a <__aeabi_fsub+0xf2>
    767e:	2b00      	cmp	r3, #0
    7680:	d123      	bne.n	76ca <__aeabi_fsub+0x282>
    7682:	2d00      	cmp	r5, #0
    7684:	d04b      	beq.n	771e <__aeabi_fsub+0x2d6>
    7686:	1c2b      	adds	r3, r5, #0
    7688:	1c0e      	adds	r6, r1, #0
    768a:	24ff      	movs	r4, #255	; 0xff
    768c:	e6f8      	b.n	7480 <__aeabi_fsub+0x38>
    768e:	1c2b      	adds	r3, r5, #0
    7690:	1c14      	adds	r4, r2, #0
    7692:	1c0e      	adds	r6, r1, #0
    7694:	e6f4      	b.n	7480 <__aeabi_fsub+0x38>
    7696:	1c1e      	adds	r6, r3, #0
    7698:	2420      	movs	r4, #32
    769a:	40c6      	lsrs	r6, r0
    769c:	1a20      	subs	r0, r4, r0
    769e:	4083      	lsls	r3, r0
    76a0:	1e58      	subs	r0, r3, #1
    76a2:	4183      	sbcs	r3, r0
    76a4:	4333      	orrs	r3, r6
    76a6:	e7a9      	b.n	75fc <__aeabi_fsub+0x1b4>
    76a8:	2aff      	cmp	r2, #255	; 0xff
    76aa:	d02f      	beq.n	770c <__aeabi_fsub+0x2c4>
    76ac:	2480      	movs	r4, #128	; 0x80
    76ae:	04e4      	lsls	r4, r4, #19
    76b0:	4249      	negs	r1, r1
    76b2:	4323      	orrs	r3, r4
    76b4:	e7dd      	b.n	7672 <__aeabi_fsub+0x22a>
    76b6:	2d00      	cmp	r5, #0
    76b8:	d100      	bne.n	76bc <__aeabi_fsub+0x274>
    76ba:	e6e1      	b.n	7480 <__aeabi_fsub+0x38>
    76bc:	1b5a      	subs	r2, r3, r5
    76be:	0150      	lsls	r0, r2, #5
    76c0:	d400      	bmi.n	76c4 <__aeabi_fsub+0x27c>
    76c2:	e71a      	b.n	74fa <__aeabi_fsub+0xb2>
    76c4:	1aeb      	subs	r3, r5, r3
    76c6:	1c0e      	adds	r6, r1, #0
    76c8:	e6da      	b.n	7480 <__aeabi_fsub+0x38>
    76ca:	24ff      	movs	r4, #255	; 0xff
    76cc:	2d00      	cmp	r5, #0
    76ce:	d100      	bne.n	76d2 <__aeabi_fsub+0x28a>
    76d0:	e6d6      	b.n	7480 <__aeabi_fsub+0x38>
    76d2:	2280      	movs	r2, #128	; 0x80
    76d4:	08db      	lsrs	r3, r3, #3
    76d6:	03d2      	lsls	r2, r2, #15
    76d8:	4213      	tst	r3, r2
    76da:	d004      	beq.n	76e6 <__aeabi_fsub+0x29e>
    76dc:	08ed      	lsrs	r5, r5, #3
    76de:	4215      	tst	r5, r2
    76e0:	d101      	bne.n	76e6 <__aeabi_fsub+0x29e>
    76e2:	1c2b      	adds	r3, r5, #0
    76e4:	1c0e      	adds	r6, r1, #0
    76e6:	00db      	lsls	r3, r3, #3
    76e8:	24ff      	movs	r4, #255	; 0xff
    76ea:	e6c9      	b.n	7480 <__aeabi_fsub+0x38>
    76ec:	2b00      	cmp	r3, #0
    76ee:	d00d      	beq.n	770c <__aeabi_fsub+0x2c4>
    76f0:	24ff      	movs	r4, #255	; 0xff
    76f2:	2d00      	cmp	r5, #0
    76f4:	d100      	bne.n	76f8 <__aeabi_fsub+0x2b0>
    76f6:	e6c3      	b.n	7480 <__aeabi_fsub+0x38>
    76f8:	2280      	movs	r2, #128	; 0x80
    76fa:	08db      	lsrs	r3, r3, #3
    76fc:	03d2      	lsls	r2, r2, #15
    76fe:	4213      	tst	r3, r2
    7700:	d0f1      	beq.n	76e6 <__aeabi_fsub+0x29e>
    7702:	08ed      	lsrs	r5, r5, #3
    7704:	4215      	tst	r5, r2
    7706:	d1ee      	bne.n	76e6 <__aeabi_fsub+0x29e>
    7708:	1c2b      	adds	r3, r5, #0
    770a:	e7ec      	b.n	76e6 <__aeabi_fsub+0x29e>
    770c:	1c2b      	adds	r3, r5, #0
    770e:	24ff      	movs	r4, #255	; 0xff
    7710:	e6b6      	b.n	7480 <__aeabi_fsub+0x38>
    7712:	1c2b      	adds	r3, r5, #0
    7714:	1c14      	adds	r4, r2, #0
    7716:	e6b3      	b.n	7480 <__aeabi_fsub+0x38>
    7718:	1c23      	adds	r3, r4, #0
    771a:	2000      	movs	r0, #0
    771c:	e6f1      	b.n	7502 <__aeabi_fsub+0xba>
    771e:	2380      	movs	r3, #128	; 0x80
    7720:	2000      	movs	r0, #0
    7722:	049b      	lsls	r3, r3, #18
    7724:	24ff      	movs	r4, #255	; 0xff
    7726:	e6ec      	b.n	7502 <__aeabi_fsub+0xba>
    7728:	1c1f      	adds	r7, r3, #0
    772a:	2420      	movs	r4, #32
    772c:	40cf      	lsrs	r7, r1
    772e:	1a61      	subs	r1, r4, r1
    7730:	408b      	lsls	r3, r1
    7732:	1e59      	subs	r1, r3, #1
    7734:	418b      	sbcs	r3, r1
    7736:	433b      	orrs	r3, r7
    7738:	e79e      	b.n	7678 <__aeabi_fsub+0x230>
    773a:	1c2b      	adds	r3, r5, #0
    773c:	e6a0      	b.n	7480 <__aeabi_fsub+0x38>
    773e:	46c0      	nop			; (mov r8, r8)
    7740:	fbffffff 	.word	0xfbffffff

00007744 <__aeabi_f2iz>:
    7744:	0242      	lsls	r2, r0, #9
    7746:	0a51      	lsrs	r1, r2, #9
    7748:	0042      	lsls	r2, r0, #1
    774a:	0fc3      	lsrs	r3, r0, #31
    774c:	0e12      	lsrs	r2, r2, #24
    774e:	2000      	movs	r0, #0
    7750:	2a7e      	cmp	r2, #126	; 0x7e
    7752:	dd0d      	ble.n	7770 <__aeabi_f2iz+0x2c>
    7754:	2a9d      	cmp	r2, #157	; 0x9d
    7756:	dc0c      	bgt.n	7772 <__aeabi_f2iz+0x2e>
    7758:	2080      	movs	r0, #128	; 0x80
    775a:	0400      	lsls	r0, r0, #16
    775c:	4301      	orrs	r1, r0
    775e:	2a95      	cmp	r2, #149	; 0x95
    7760:	dc0a      	bgt.n	7778 <__aeabi_f2iz+0x34>
    7762:	2096      	movs	r0, #150	; 0x96
    7764:	1a82      	subs	r2, r0, r2
    7766:	40d1      	lsrs	r1, r2
    7768:	1c0a      	adds	r2, r1, #0
    776a:	4258      	negs	r0, r3
    776c:	4042      	eors	r2, r0
    776e:	18d0      	adds	r0, r2, r3
    7770:	4770      	bx	lr
    7772:	4a03      	ldr	r2, [pc, #12]	; (7780 <__aeabi_f2iz+0x3c>)
    7774:	1898      	adds	r0, r3, r2
    7776:	e7fb      	b.n	7770 <__aeabi_f2iz+0x2c>
    7778:	3a96      	subs	r2, #150	; 0x96
    777a:	4091      	lsls	r1, r2
    777c:	1c0a      	adds	r2, r1, #0
    777e:	e7f4      	b.n	776a <__aeabi_f2iz+0x26>
    7780:	7fffffff 	.word	0x7fffffff

00007784 <__aeabi_i2f>:
    7784:	b570      	push	{r4, r5, r6, lr}
    7786:	1e04      	subs	r4, r0, #0
    7788:	d039      	beq.n	77fe <__aeabi_i2f+0x7a>
    778a:	0fc5      	lsrs	r5, r0, #31
    778c:	d000      	beq.n	7790 <__aeabi_i2f+0xc>
    778e:	4244      	negs	r4, r0
    7790:	1c20      	adds	r0, r4, #0
    7792:	f001 ff89 	bl	96a8 <__clzsi2>
    7796:	239e      	movs	r3, #158	; 0x9e
    7798:	1c26      	adds	r6, r4, #0
    779a:	1a1b      	subs	r3, r3, r0
    779c:	2b96      	cmp	r3, #150	; 0x96
    779e:	dc07      	bgt.n	77b0 <__aeabi_i2f+0x2c>
    77a0:	2808      	cmp	r0, #8
    77a2:	dd01      	ble.n	77a8 <__aeabi_i2f+0x24>
    77a4:	3808      	subs	r0, #8
    77a6:	4084      	lsls	r4, r0
    77a8:	0264      	lsls	r4, r4, #9
    77aa:	0a64      	lsrs	r4, r4, #9
    77ac:	b2d8      	uxtb	r0, r3
    77ae:	e01e      	b.n	77ee <__aeabi_i2f+0x6a>
    77b0:	2b99      	cmp	r3, #153	; 0x99
    77b2:	dd0a      	ble.n	77ca <__aeabi_i2f+0x46>
    77b4:	2205      	movs	r2, #5
    77b6:	1c21      	adds	r1, r4, #0
    77b8:	1a12      	subs	r2, r2, r0
    77ba:	40d1      	lsrs	r1, r2
    77bc:	1c0a      	adds	r2, r1, #0
    77be:	1c01      	adds	r1, r0, #0
    77c0:	311b      	adds	r1, #27
    77c2:	408e      	lsls	r6, r1
    77c4:	1e71      	subs	r1, r6, #1
    77c6:	418e      	sbcs	r6, r1
    77c8:	4316      	orrs	r6, r2
    77ca:	2805      	cmp	r0, #5
    77cc:	dd01      	ble.n	77d2 <__aeabi_i2f+0x4e>
    77ce:	1f42      	subs	r2, r0, #5
    77d0:	4096      	lsls	r6, r2
    77d2:	4c0f      	ldr	r4, [pc, #60]	; (7810 <__aeabi_i2f+0x8c>)
    77d4:	4034      	ands	r4, r6
    77d6:	0772      	lsls	r2, r6, #29
    77d8:	d004      	beq.n	77e4 <__aeabi_i2f+0x60>
    77da:	220f      	movs	r2, #15
    77dc:	4016      	ands	r6, r2
    77de:	2e04      	cmp	r6, #4
    77e0:	d000      	beq.n	77e4 <__aeabi_i2f+0x60>
    77e2:	3404      	adds	r4, #4
    77e4:	0162      	lsls	r2, r4, #5
    77e6:	d40e      	bmi.n	7806 <__aeabi_i2f+0x82>
    77e8:	01a4      	lsls	r4, r4, #6
    77ea:	0a64      	lsrs	r4, r4, #9
    77ec:	b2d8      	uxtb	r0, r3
    77ee:	0264      	lsls	r4, r4, #9
    77f0:	05c0      	lsls	r0, r0, #23
    77f2:	0a64      	lsrs	r4, r4, #9
    77f4:	07ed      	lsls	r5, r5, #31
    77f6:	4304      	orrs	r4, r0
    77f8:	432c      	orrs	r4, r5
    77fa:	1c20      	adds	r0, r4, #0
    77fc:	bd70      	pop	{r4, r5, r6, pc}
    77fe:	2500      	movs	r5, #0
    7800:	2000      	movs	r0, #0
    7802:	2400      	movs	r4, #0
    7804:	e7f3      	b.n	77ee <__aeabi_i2f+0x6a>
    7806:	4b02      	ldr	r3, [pc, #8]	; (7810 <__aeabi_i2f+0x8c>)
    7808:	401c      	ands	r4, r3
    780a:	239f      	movs	r3, #159	; 0x9f
    780c:	1a1b      	subs	r3, r3, r0
    780e:	e7eb      	b.n	77e8 <__aeabi_i2f+0x64>
    7810:	fbffffff 	.word	0xfbffffff

00007814 <__aeabi_ui2f>:
    7814:	b510      	push	{r4, lr}
    7816:	1e04      	subs	r4, r0, #0
    7818:	d035      	beq.n	7886 <__aeabi_ui2f+0x72>
    781a:	f001 ff45 	bl	96a8 <__clzsi2>
    781e:	219e      	movs	r1, #158	; 0x9e
    7820:	1a09      	subs	r1, r1, r0
    7822:	2996      	cmp	r1, #150	; 0x96
    7824:	dc09      	bgt.n	783a <__aeabi_ui2f+0x26>
    7826:	2808      	cmp	r0, #8
    7828:	dd30      	ble.n	788c <__aeabi_ui2f+0x78>
    782a:	1c02      	adds	r2, r0, #0
    782c:	1c23      	adds	r3, r4, #0
    782e:	3a08      	subs	r2, #8
    7830:	4093      	lsls	r3, r2
    7832:	025b      	lsls	r3, r3, #9
    7834:	0a5b      	lsrs	r3, r3, #9
    7836:	b2c8      	uxtb	r0, r1
    7838:	e020      	b.n	787c <__aeabi_ui2f+0x68>
    783a:	2999      	cmp	r1, #153	; 0x99
    783c:	dd0c      	ble.n	7858 <__aeabi_ui2f+0x44>
    783e:	2205      	movs	r2, #5
    7840:	1c23      	adds	r3, r4, #0
    7842:	1a12      	subs	r2, r2, r0
    7844:	40d3      	lsrs	r3, r2
    7846:	1c1a      	adds	r2, r3, #0
    7848:	1c03      	adds	r3, r0, #0
    784a:	331b      	adds	r3, #27
    784c:	409c      	lsls	r4, r3
    784e:	1c23      	adds	r3, r4, #0
    7850:	1e5c      	subs	r4, r3, #1
    7852:	41a3      	sbcs	r3, r4
    7854:	4313      	orrs	r3, r2
    7856:	1c1c      	adds	r4, r3, #0
    7858:	2805      	cmp	r0, #5
    785a:	dd01      	ble.n	7860 <__aeabi_ui2f+0x4c>
    785c:	1f43      	subs	r3, r0, #5
    785e:	409c      	lsls	r4, r3
    7860:	4b0f      	ldr	r3, [pc, #60]	; (78a0 <__aeabi_ui2f+0x8c>)
    7862:	4023      	ands	r3, r4
    7864:	0762      	lsls	r2, r4, #29
    7866:	d004      	beq.n	7872 <__aeabi_ui2f+0x5e>
    7868:	220f      	movs	r2, #15
    786a:	4014      	ands	r4, r2
    786c:	2c04      	cmp	r4, #4
    786e:	d000      	beq.n	7872 <__aeabi_ui2f+0x5e>
    7870:	3304      	adds	r3, #4
    7872:	015a      	lsls	r2, r3, #5
    7874:	d40e      	bmi.n	7894 <__aeabi_ui2f+0x80>
    7876:	019b      	lsls	r3, r3, #6
    7878:	0a5b      	lsrs	r3, r3, #9
    787a:	b2c8      	uxtb	r0, r1
    787c:	025b      	lsls	r3, r3, #9
    787e:	0a5b      	lsrs	r3, r3, #9
    7880:	05c0      	lsls	r0, r0, #23
    7882:	4318      	orrs	r0, r3
    7884:	bd10      	pop	{r4, pc}
    7886:	2000      	movs	r0, #0
    7888:	2300      	movs	r3, #0
    788a:	e7f7      	b.n	787c <__aeabi_ui2f+0x68>
    788c:	0263      	lsls	r3, r4, #9
    788e:	0a5b      	lsrs	r3, r3, #9
    7890:	b2c8      	uxtb	r0, r1
    7892:	e7f3      	b.n	787c <__aeabi_ui2f+0x68>
    7894:	219f      	movs	r1, #159	; 0x9f
    7896:	4a02      	ldr	r2, [pc, #8]	; (78a0 <__aeabi_ui2f+0x8c>)
    7898:	1a09      	subs	r1, r1, r0
    789a:	4013      	ands	r3, r2
    789c:	e7eb      	b.n	7876 <__aeabi_ui2f+0x62>
    789e:	46c0      	nop			; (mov r8, r8)
    78a0:	fbffffff 	.word	0xfbffffff

000078a4 <__aeabi_dadd>:
    78a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    78a6:	4645      	mov	r5, r8
    78a8:	4657      	mov	r7, sl
    78aa:	464e      	mov	r6, r9
    78ac:	4694      	mov	ip, r2
    78ae:	004c      	lsls	r4, r1, #1
    78b0:	030a      	lsls	r2, r1, #12
    78b2:	0fc9      	lsrs	r1, r1, #31
    78b4:	b4e0      	push	{r5, r6, r7}
    78b6:	4688      	mov	r8, r1
    78b8:	1c0e      	adds	r6, r1, #0
    78ba:	0319      	lsls	r1, r3, #12
    78bc:	0f47      	lsrs	r7, r0, #29
    78be:	00c5      	lsls	r5, r0, #3
    78c0:	0a48      	lsrs	r0, r1, #9
    78c2:	4661      	mov	r1, ip
    78c4:	0f49      	lsrs	r1, r1, #29
    78c6:	4301      	orrs	r1, r0
    78c8:	4660      	mov	r0, ip
    78ca:	0a52      	lsrs	r2, r2, #9
    78cc:	4317      	orrs	r7, r2
    78ce:	00c0      	lsls	r0, r0, #3
    78d0:	005a      	lsls	r2, r3, #1
    78d2:	0d64      	lsrs	r4, r4, #21
    78d4:	0d52      	lsrs	r2, r2, #21
    78d6:	0fdb      	lsrs	r3, r3, #31
    78d8:	4684      	mov	ip, r0
    78da:	4598      	cmp	r8, r3
    78dc:	d100      	bne.n	78e0 <__aeabi_dadd+0x3c>
    78de:	e0a7      	b.n	7a30 <__aeabi_dadd+0x18c>
    78e0:	1aa0      	subs	r0, r4, r2
    78e2:	2800      	cmp	r0, #0
    78e4:	dc00      	bgt.n	78e8 <__aeabi_dadd+0x44>
    78e6:	e101      	b.n	7aec <__aeabi_dadd+0x248>
    78e8:	2a00      	cmp	r2, #0
    78ea:	d13d      	bne.n	7968 <__aeabi_dadd+0xc4>
    78ec:	4663      	mov	r3, ip
    78ee:	430b      	orrs	r3, r1
    78f0:	d000      	beq.n	78f4 <__aeabi_dadd+0x50>
    78f2:	e0d4      	b.n	7a9e <__aeabi_dadd+0x1fa>
    78f4:	076b      	lsls	r3, r5, #29
    78f6:	d100      	bne.n	78fa <__aeabi_dadd+0x56>
    78f8:	e088      	b.n	7a0c <__aeabi_dadd+0x168>
    78fa:	230f      	movs	r3, #15
    78fc:	402b      	ands	r3, r5
    78fe:	2b04      	cmp	r3, #4
    7900:	d100      	bne.n	7904 <__aeabi_dadd+0x60>
    7902:	e083      	b.n	7a0c <__aeabi_dadd+0x168>
    7904:	1d2a      	adds	r2, r5, #4
    7906:	42aa      	cmp	r2, r5
    7908:	41ad      	sbcs	r5, r5
    790a:	2380      	movs	r3, #128	; 0x80
    790c:	426d      	negs	r5, r5
    790e:	197f      	adds	r7, r7, r5
    7910:	041b      	lsls	r3, r3, #16
    7912:	403b      	ands	r3, r7
    7914:	4646      	mov	r6, r8
    7916:	1c15      	adds	r5, r2, #0
    7918:	2b00      	cmp	r3, #0
    791a:	d100      	bne.n	791e <__aeabi_dadd+0x7a>
    791c:	e07c      	b.n	7a18 <__aeabi_dadd+0x174>
    791e:	4bcc      	ldr	r3, [pc, #816]	; (7c50 <__aeabi_dadd+0x3ac>)
    7920:	3401      	adds	r4, #1
    7922:	429c      	cmp	r4, r3
    7924:	d100      	bne.n	7928 <__aeabi_dadd+0x84>
    7926:	e0fd      	b.n	7b24 <__aeabi_dadd+0x280>
    7928:	1c3a      	adds	r2, r7, #0
    792a:	4bca      	ldr	r3, [pc, #808]	; (7c54 <__aeabi_dadd+0x3b0>)
    792c:	08ed      	lsrs	r5, r5, #3
    792e:	401a      	ands	r2, r3
    7930:	0750      	lsls	r0, r2, #29
    7932:	0564      	lsls	r4, r4, #21
    7934:	0252      	lsls	r2, r2, #9
    7936:	4305      	orrs	r5, r0
    7938:	0b12      	lsrs	r2, r2, #12
    793a:	0d64      	lsrs	r4, r4, #21
    793c:	2100      	movs	r1, #0
    793e:	0312      	lsls	r2, r2, #12
    7940:	0d0b      	lsrs	r3, r1, #20
    7942:	051b      	lsls	r3, r3, #20
    7944:	0564      	lsls	r4, r4, #21
    7946:	0b12      	lsrs	r2, r2, #12
    7948:	431a      	orrs	r2, r3
    794a:	0863      	lsrs	r3, r4, #1
    794c:	4cc2      	ldr	r4, [pc, #776]	; (7c58 <__aeabi_dadd+0x3b4>)
    794e:	07f6      	lsls	r6, r6, #31
    7950:	4014      	ands	r4, r2
    7952:	431c      	orrs	r4, r3
    7954:	0064      	lsls	r4, r4, #1
    7956:	0864      	lsrs	r4, r4, #1
    7958:	4334      	orrs	r4, r6
    795a:	1c28      	adds	r0, r5, #0
    795c:	1c21      	adds	r1, r4, #0
    795e:	bc1c      	pop	{r2, r3, r4}
    7960:	4690      	mov	r8, r2
    7962:	4699      	mov	r9, r3
    7964:	46a2      	mov	sl, r4
    7966:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7968:	4bb9      	ldr	r3, [pc, #740]	; (7c50 <__aeabi_dadd+0x3ac>)
    796a:	429c      	cmp	r4, r3
    796c:	d0c2      	beq.n	78f4 <__aeabi_dadd+0x50>
    796e:	2380      	movs	r3, #128	; 0x80
    7970:	041b      	lsls	r3, r3, #16
    7972:	4319      	orrs	r1, r3
    7974:	2838      	cmp	r0, #56	; 0x38
    7976:	dd00      	ble.n	797a <__aeabi_dadd+0xd6>
    7978:	e0ec      	b.n	7b54 <__aeabi_dadd+0x2b0>
    797a:	281f      	cmp	r0, #31
    797c:	dd00      	ble.n	7980 <__aeabi_dadd+0xdc>
    797e:	e121      	b.n	7bc4 <__aeabi_dadd+0x320>
    7980:	2220      	movs	r2, #32
    7982:	1c0e      	adds	r6, r1, #0
    7984:	4663      	mov	r3, ip
    7986:	1a12      	subs	r2, r2, r0
    7988:	4096      	lsls	r6, r2
    798a:	40c3      	lsrs	r3, r0
    798c:	4333      	orrs	r3, r6
    798e:	4666      	mov	r6, ip
    7990:	4096      	lsls	r6, r2
    7992:	1c32      	adds	r2, r6, #0
    7994:	1e56      	subs	r6, r2, #1
    7996:	41b2      	sbcs	r2, r6
    7998:	4313      	orrs	r3, r2
    799a:	1c0a      	adds	r2, r1, #0
    799c:	40c2      	lsrs	r2, r0
    799e:	1aeb      	subs	r3, r5, r3
    79a0:	429d      	cmp	r5, r3
    79a2:	41b6      	sbcs	r6, r6
    79a4:	1c1d      	adds	r5, r3, #0
    79a6:	1aba      	subs	r2, r7, r2
    79a8:	4276      	negs	r6, r6
    79aa:	1b97      	subs	r7, r2, r6
    79ac:	023b      	lsls	r3, r7, #8
    79ae:	d400      	bmi.n	79b2 <__aeabi_dadd+0x10e>
    79b0:	e097      	b.n	7ae2 <__aeabi_dadd+0x23e>
    79b2:	027a      	lsls	r2, r7, #9
    79b4:	0a56      	lsrs	r6, r2, #9
    79b6:	2e00      	cmp	r6, #0
    79b8:	d100      	bne.n	79bc <__aeabi_dadd+0x118>
    79ba:	e0b6      	b.n	7b2a <__aeabi_dadd+0x286>
    79bc:	1c30      	adds	r0, r6, #0
    79be:	f001 fe73 	bl	96a8 <__clzsi2>
    79c2:	1c03      	adds	r3, r0, #0
    79c4:	3b08      	subs	r3, #8
    79c6:	2b1f      	cmp	r3, #31
    79c8:	dd00      	ble.n	79cc <__aeabi_dadd+0x128>
    79ca:	e0b7      	b.n	7b3c <__aeabi_dadd+0x298>
    79cc:	409e      	lsls	r6, r3
    79ce:	1c37      	adds	r7, r6, #0
    79d0:	2628      	movs	r6, #40	; 0x28
    79d2:	1c2a      	adds	r2, r5, #0
    79d4:	1a36      	subs	r6, r6, r0
    79d6:	40f2      	lsrs	r2, r6
    79d8:	1c16      	adds	r6, r2, #0
    79da:	409d      	lsls	r5, r3
    79dc:	433e      	orrs	r6, r7
    79de:	429c      	cmp	r4, r3
    79e0:	dd00      	ble.n	79e4 <__aeabi_dadd+0x140>
    79e2:	e0b2      	b.n	7b4a <__aeabi_dadd+0x2a6>
    79e4:	1b1c      	subs	r4, r3, r4
    79e6:	1c62      	adds	r2, r4, #1
    79e8:	2a1f      	cmp	r2, #31
    79ea:	dd00      	ble.n	79ee <__aeabi_dadd+0x14a>
    79ec:	e0d8      	b.n	7ba0 <__aeabi_dadd+0x2fc>
    79ee:	231f      	movs	r3, #31
    79f0:	1c29      	adds	r1, r5, #0
    79f2:	1b1c      	subs	r4, r3, r4
    79f4:	1c33      	adds	r3, r6, #0
    79f6:	40a5      	lsls	r5, r4
    79f8:	40a3      	lsls	r3, r4
    79fa:	40d1      	lsrs	r1, r2
    79fc:	1e6c      	subs	r4, r5, #1
    79fe:	41a5      	sbcs	r5, r4
    7a00:	40d6      	lsrs	r6, r2
    7a02:	4319      	orrs	r1, r3
    7a04:	430d      	orrs	r5, r1
    7a06:	1c37      	adds	r7, r6, #0
    7a08:	2400      	movs	r4, #0
    7a0a:	e773      	b.n	78f4 <__aeabi_dadd+0x50>
    7a0c:	2380      	movs	r3, #128	; 0x80
    7a0e:	041b      	lsls	r3, r3, #16
    7a10:	403b      	ands	r3, r7
    7a12:	4646      	mov	r6, r8
    7a14:	d000      	beq.n	7a18 <__aeabi_dadd+0x174>
    7a16:	e782      	b.n	791e <__aeabi_dadd+0x7a>
    7a18:	4b8d      	ldr	r3, [pc, #564]	; (7c50 <__aeabi_dadd+0x3ac>)
    7a1a:	08ed      	lsrs	r5, r5, #3
    7a1c:	0778      	lsls	r0, r7, #29
    7a1e:	4305      	orrs	r5, r0
    7a20:	08fa      	lsrs	r2, r7, #3
    7a22:	429c      	cmp	r4, r3
    7a24:	d032      	beq.n	7a8c <__aeabi_dadd+0x1e8>
    7a26:	0312      	lsls	r2, r2, #12
    7a28:	0564      	lsls	r4, r4, #21
    7a2a:	0b12      	lsrs	r2, r2, #12
    7a2c:	0d64      	lsrs	r4, r4, #21
    7a2e:	e785      	b.n	793c <__aeabi_dadd+0x98>
    7a30:	1aa3      	subs	r3, r4, r2
    7a32:	2b00      	cmp	r3, #0
    7a34:	dc00      	bgt.n	7a38 <__aeabi_dadd+0x194>
    7a36:	e094      	b.n	7b62 <__aeabi_dadd+0x2be>
    7a38:	2a00      	cmp	r2, #0
    7a3a:	d03c      	beq.n	7ab6 <__aeabi_dadd+0x212>
    7a3c:	4a84      	ldr	r2, [pc, #528]	; (7c50 <__aeabi_dadd+0x3ac>)
    7a3e:	4294      	cmp	r4, r2
    7a40:	d100      	bne.n	7a44 <__aeabi_dadd+0x1a0>
    7a42:	e757      	b.n	78f4 <__aeabi_dadd+0x50>
    7a44:	2280      	movs	r2, #128	; 0x80
    7a46:	0412      	lsls	r2, r2, #16
    7a48:	4311      	orrs	r1, r2
    7a4a:	2b38      	cmp	r3, #56	; 0x38
    7a4c:	dc00      	bgt.n	7a50 <__aeabi_dadd+0x1ac>
    7a4e:	e105      	b.n	7c5c <__aeabi_dadd+0x3b8>
    7a50:	4663      	mov	r3, ip
    7a52:	4319      	orrs	r1, r3
    7a54:	1e48      	subs	r0, r1, #1
    7a56:	4181      	sbcs	r1, r0
    7a58:	2200      	movs	r2, #0
    7a5a:	b2c8      	uxtb	r0, r1
    7a5c:	1940      	adds	r0, r0, r5
    7a5e:	42a8      	cmp	r0, r5
    7a60:	419b      	sbcs	r3, r3
    7a62:	1c05      	adds	r5, r0, #0
    7a64:	19d2      	adds	r2, r2, r7
    7a66:	425b      	negs	r3, r3
    7a68:	18d7      	adds	r7, r2, r3
    7a6a:	023b      	lsls	r3, r7, #8
    7a6c:	d539      	bpl.n	7ae2 <__aeabi_dadd+0x23e>
    7a6e:	4b78      	ldr	r3, [pc, #480]	; (7c50 <__aeabi_dadd+0x3ac>)
    7a70:	3401      	adds	r4, #1
    7a72:	429c      	cmp	r4, r3
    7a74:	d100      	bne.n	7a78 <__aeabi_dadd+0x1d4>
    7a76:	e14c      	b.n	7d12 <__aeabi_dadd+0x46e>
    7a78:	2001      	movs	r0, #1
    7a7a:	4a76      	ldr	r2, [pc, #472]	; (7c54 <__aeabi_dadd+0x3b0>)
    7a7c:	086b      	lsrs	r3, r5, #1
    7a7e:	403a      	ands	r2, r7
    7a80:	4028      	ands	r0, r5
    7a82:	4318      	orrs	r0, r3
    7a84:	07d5      	lsls	r5, r2, #31
    7a86:	4305      	orrs	r5, r0
    7a88:	0857      	lsrs	r7, r2, #1
    7a8a:	e733      	b.n	78f4 <__aeabi_dadd+0x50>
    7a8c:	1c2b      	adds	r3, r5, #0
    7a8e:	4313      	orrs	r3, r2
    7a90:	d048      	beq.n	7b24 <__aeabi_dadd+0x280>
    7a92:	2380      	movs	r3, #128	; 0x80
    7a94:	031b      	lsls	r3, r3, #12
    7a96:	431a      	orrs	r2, r3
    7a98:	0312      	lsls	r2, r2, #12
    7a9a:	0b12      	lsrs	r2, r2, #12
    7a9c:	e74e      	b.n	793c <__aeabi_dadd+0x98>
    7a9e:	3801      	subs	r0, #1
    7aa0:	2800      	cmp	r0, #0
    7aa2:	d178      	bne.n	7b96 <__aeabi_dadd+0x2f2>
    7aa4:	4663      	mov	r3, ip
    7aa6:	1aee      	subs	r6, r5, r3
    7aa8:	42b5      	cmp	r5, r6
    7aaa:	419b      	sbcs	r3, r3
    7aac:	1a7a      	subs	r2, r7, r1
    7aae:	425b      	negs	r3, r3
    7ab0:	1ad7      	subs	r7, r2, r3
    7ab2:	1c35      	adds	r5, r6, #0
    7ab4:	e77a      	b.n	79ac <__aeabi_dadd+0x108>
    7ab6:	1c02      	adds	r2, r0, #0
    7ab8:	430a      	orrs	r2, r1
    7aba:	d100      	bne.n	7abe <__aeabi_dadd+0x21a>
    7abc:	e71a      	b.n	78f4 <__aeabi_dadd+0x50>
    7abe:	3b01      	subs	r3, #1
    7ac0:	2b00      	cmp	r3, #0
    7ac2:	d000      	beq.n	7ac6 <__aeabi_dadd+0x222>
    7ac4:	e0f2      	b.n	7cac <__aeabi_dadd+0x408>
    7ac6:	1940      	adds	r0, r0, r5
    7ac8:	42a8      	cmp	r0, r5
    7aca:	419b      	sbcs	r3, r3
    7acc:	19ca      	adds	r2, r1, r7
    7ace:	425b      	negs	r3, r3
    7ad0:	18d7      	adds	r7, r2, r3
    7ad2:	1c05      	adds	r5, r0, #0
    7ad4:	e7c9      	b.n	7a6a <__aeabi_dadd+0x1c6>
    7ad6:	1c13      	adds	r3, r2, #0
    7ad8:	4333      	orrs	r3, r6
    7ada:	d100      	bne.n	7ade <__aeabi_dadd+0x23a>
    7adc:	e118      	b.n	7d10 <__aeabi_dadd+0x46c>
    7ade:	1c17      	adds	r7, r2, #0
    7ae0:	1c35      	adds	r5, r6, #0
    7ae2:	4646      	mov	r6, r8
    7ae4:	076b      	lsls	r3, r5, #29
    7ae6:	d000      	beq.n	7aea <__aeabi_dadd+0x246>
    7ae8:	e707      	b.n	78fa <__aeabi_dadd+0x56>
    7aea:	e795      	b.n	7a18 <__aeabi_dadd+0x174>
    7aec:	2800      	cmp	r0, #0
    7aee:	d17a      	bne.n	7be6 <__aeabi_dadd+0x342>
    7af0:	1c62      	adds	r2, r4, #1
    7af2:	0552      	lsls	r2, r2, #21
    7af4:	0d52      	lsrs	r2, r2, #21
    7af6:	2a01      	cmp	r2, #1
    7af8:	dc00      	bgt.n	7afc <__aeabi_dadd+0x258>
    7afa:	e0fb      	b.n	7cf4 <__aeabi_dadd+0x450>
    7afc:	4662      	mov	r2, ip
    7afe:	1aaa      	subs	r2, r5, r2
    7b00:	4295      	cmp	r5, r2
    7b02:	41b6      	sbcs	r6, r6
    7b04:	4691      	mov	r9, r2
    7b06:	1a78      	subs	r0, r7, r1
    7b08:	4272      	negs	r2, r6
    7b0a:	1a86      	subs	r6, r0, r2
    7b0c:	0232      	lsls	r2, r6, #8
    7b0e:	d400      	bmi.n	7b12 <__aeabi_dadd+0x26e>
    7b10:	e093      	b.n	7c3a <__aeabi_dadd+0x396>
    7b12:	4662      	mov	r2, ip
    7b14:	1b55      	subs	r5, r2, r5
    7b16:	45ac      	cmp	ip, r5
    7b18:	4180      	sbcs	r0, r0
    7b1a:	1bcf      	subs	r7, r1, r7
    7b1c:	4240      	negs	r0, r0
    7b1e:	1a3e      	subs	r6, r7, r0
    7b20:	4698      	mov	r8, r3
    7b22:	e748      	b.n	79b6 <__aeabi_dadd+0x112>
    7b24:	2200      	movs	r2, #0
    7b26:	2500      	movs	r5, #0
    7b28:	e708      	b.n	793c <__aeabi_dadd+0x98>
    7b2a:	1c28      	adds	r0, r5, #0
    7b2c:	f001 fdbc 	bl	96a8 <__clzsi2>
    7b30:	3020      	adds	r0, #32
    7b32:	1c03      	adds	r3, r0, #0
    7b34:	3b08      	subs	r3, #8
    7b36:	2b1f      	cmp	r3, #31
    7b38:	dc00      	bgt.n	7b3c <__aeabi_dadd+0x298>
    7b3a:	e747      	b.n	79cc <__aeabi_dadd+0x128>
    7b3c:	3828      	subs	r0, #40	; 0x28
    7b3e:	4085      	lsls	r5, r0
    7b40:	1c2e      	adds	r6, r5, #0
    7b42:	2500      	movs	r5, #0
    7b44:	429c      	cmp	r4, r3
    7b46:	dc00      	bgt.n	7b4a <__aeabi_dadd+0x2a6>
    7b48:	e74c      	b.n	79e4 <__aeabi_dadd+0x140>
    7b4a:	4a42      	ldr	r2, [pc, #264]	; (7c54 <__aeabi_dadd+0x3b0>)
    7b4c:	1ae4      	subs	r4, r4, r3
    7b4e:	4016      	ands	r6, r2
    7b50:	1c37      	adds	r7, r6, #0
    7b52:	e6cf      	b.n	78f4 <__aeabi_dadd+0x50>
    7b54:	4663      	mov	r3, ip
    7b56:	4319      	orrs	r1, r3
    7b58:	1e4b      	subs	r3, r1, #1
    7b5a:	4199      	sbcs	r1, r3
    7b5c:	2200      	movs	r2, #0
    7b5e:	b2cb      	uxtb	r3, r1
    7b60:	e71d      	b.n	799e <__aeabi_dadd+0xfa>
    7b62:	2b00      	cmp	r3, #0
    7b64:	d000      	beq.n	7b68 <__aeabi_dadd+0x2c4>
    7b66:	e0f2      	b.n	7d4e <__aeabi_dadd+0x4aa>
    7b68:	1c60      	adds	r0, r4, #1
    7b6a:	0543      	lsls	r3, r0, #21
    7b6c:	0d5b      	lsrs	r3, r3, #21
    7b6e:	2b01      	cmp	r3, #1
    7b70:	dc00      	bgt.n	7b74 <__aeabi_dadd+0x2d0>
    7b72:	e0a4      	b.n	7cbe <__aeabi_dadd+0x41a>
    7b74:	4b36      	ldr	r3, [pc, #216]	; (7c50 <__aeabi_dadd+0x3ac>)
    7b76:	4298      	cmp	r0, r3
    7b78:	d100      	bne.n	7b7c <__aeabi_dadd+0x2d8>
    7b7a:	e121      	b.n	7dc0 <__aeabi_dadd+0x51c>
    7b7c:	4663      	mov	r3, ip
    7b7e:	195c      	adds	r4, r3, r5
    7b80:	42ac      	cmp	r4, r5
    7b82:	419b      	sbcs	r3, r3
    7b84:	19cf      	adds	r7, r1, r7
    7b86:	425b      	negs	r3, r3
    7b88:	18fa      	adds	r2, r7, r3
    7b8a:	0864      	lsrs	r4, r4, #1
    7b8c:	07d5      	lsls	r5, r2, #31
    7b8e:	4325      	orrs	r5, r4
    7b90:	0857      	lsrs	r7, r2, #1
    7b92:	1c04      	adds	r4, r0, #0
    7b94:	e6ae      	b.n	78f4 <__aeabi_dadd+0x50>
    7b96:	4b2e      	ldr	r3, [pc, #184]	; (7c50 <__aeabi_dadd+0x3ac>)
    7b98:	429c      	cmp	r4, r3
    7b9a:	d000      	beq.n	7b9e <__aeabi_dadd+0x2fa>
    7b9c:	e6ea      	b.n	7974 <__aeabi_dadd+0xd0>
    7b9e:	e6a9      	b.n	78f4 <__aeabi_dadd+0x50>
    7ba0:	1c21      	adds	r1, r4, #0
    7ba2:	1c33      	adds	r3, r6, #0
    7ba4:	391f      	subs	r1, #31
    7ba6:	40cb      	lsrs	r3, r1
    7ba8:	1c19      	adds	r1, r3, #0
    7baa:	2a20      	cmp	r2, #32
    7bac:	d100      	bne.n	7bb0 <__aeabi_dadd+0x30c>
    7bae:	e082      	b.n	7cb6 <__aeabi_dadd+0x412>
    7bb0:	233f      	movs	r3, #63	; 0x3f
    7bb2:	1b1c      	subs	r4, r3, r4
    7bb4:	40a6      	lsls	r6, r4
    7bb6:	4335      	orrs	r5, r6
    7bb8:	1e6e      	subs	r6, r5, #1
    7bba:	41b5      	sbcs	r5, r6
    7bbc:	2700      	movs	r7, #0
    7bbe:	430d      	orrs	r5, r1
    7bc0:	2400      	movs	r4, #0
    7bc2:	e78e      	b.n	7ae2 <__aeabi_dadd+0x23e>
    7bc4:	1c03      	adds	r3, r0, #0
    7bc6:	1c0e      	adds	r6, r1, #0
    7bc8:	3b20      	subs	r3, #32
    7bca:	40de      	lsrs	r6, r3
    7bcc:	2820      	cmp	r0, #32
    7bce:	d074      	beq.n	7cba <__aeabi_dadd+0x416>
    7bd0:	2340      	movs	r3, #64	; 0x40
    7bd2:	1a1b      	subs	r3, r3, r0
    7bd4:	4099      	lsls	r1, r3
    7bd6:	1c0b      	adds	r3, r1, #0
    7bd8:	4662      	mov	r2, ip
    7bda:	4313      	orrs	r3, r2
    7bdc:	1e59      	subs	r1, r3, #1
    7bde:	418b      	sbcs	r3, r1
    7be0:	2200      	movs	r2, #0
    7be2:	4333      	orrs	r3, r6
    7be4:	e6db      	b.n	799e <__aeabi_dadd+0xfa>
    7be6:	2c00      	cmp	r4, #0
    7be8:	d050      	beq.n	7c8c <__aeabi_dadd+0x3e8>
    7bea:	4c19      	ldr	r4, [pc, #100]	; (7c50 <__aeabi_dadd+0x3ac>)
    7bec:	42a2      	cmp	r2, r4
    7bee:	d100      	bne.n	7bf2 <__aeabi_dadd+0x34e>
    7bf0:	e0a8      	b.n	7d44 <__aeabi_dadd+0x4a0>
    7bf2:	2480      	movs	r4, #128	; 0x80
    7bf4:	0424      	lsls	r4, r4, #16
    7bf6:	4240      	negs	r0, r0
    7bf8:	4327      	orrs	r7, r4
    7bfa:	2838      	cmp	r0, #56	; 0x38
    7bfc:	dd00      	ble.n	7c00 <__aeabi_dadd+0x35c>
    7bfe:	e0d9      	b.n	7db4 <__aeabi_dadd+0x510>
    7c00:	281f      	cmp	r0, #31
    7c02:	dd00      	ble.n	7c06 <__aeabi_dadd+0x362>
    7c04:	e139      	b.n	7e7a <__aeabi_dadd+0x5d6>
    7c06:	2420      	movs	r4, #32
    7c08:	1c3e      	adds	r6, r7, #0
    7c0a:	1a24      	subs	r4, r4, r0
    7c0c:	40a6      	lsls	r6, r4
    7c0e:	46b0      	mov	r8, r6
    7c10:	1c2e      	adds	r6, r5, #0
    7c12:	46a1      	mov	r9, r4
    7c14:	40c6      	lsrs	r6, r0
    7c16:	4644      	mov	r4, r8
    7c18:	4326      	orrs	r6, r4
    7c1a:	464c      	mov	r4, r9
    7c1c:	40a5      	lsls	r5, r4
    7c1e:	1e6c      	subs	r4, r5, #1
    7c20:	41a5      	sbcs	r5, r4
    7c22:	40c7      	lsrs	r7, r0
    7c24:	4335      	orrs	r5, r6
    7c26:	4660      	mov	r0, ip
    7c28:	1b45      	subs	r5, r0, r5
    7c2a:	1bcf      	subs	r7, r1, r7
    7c2c:	45ac      	cmp	ip, r5
    7c2e:	4189      	sbcs	r1, r1
    7c30:	4249      	negs	r1, r1
    7c32:	1a7f      	subs	r7, r7, r1
    7c34:	1c14      	adds	r4, r2, #0
    7c36:	4698      	mov	r8, r3
    7c38:	e6b8      	b.n	79ac <__aeabi_dadd+0x108>
    7c3a:	464b      	mov	r3, r9
    7c3c:	464d      	mov	r5, r9
    7c3e:	4333      	orrs	r3, r6
    7c40:	d000      	beq.n	7c44 <__aeabi_dadd+0x3a0>
    7c42:	e6b8      	b.n	79b6 <__aeabi_dadd+0x112>
    7c44:	2600      	movs	r6, #0
    7c46:	2700      	movs	r7, #0
    7c48:	2400      	movs	r4, #0
    7c4a:	2500      	movs	r5, #0
    7c4c:	e6e4      	b.n	7a18 <__aeabi_dadd+0x174>
    7c4e:	46c0      	nop			; (mov r8, r8)
    7c50:	000007ff 	.word	0x000007ff
    7c54:	ff7fffff 	.word	0xff7fffff
    7c58:	800fffff 	.word	0x800fffff
    7c5c:	2b1f      	cmp	r3, #31
    7c5e:	dc5b      	bgt.n	7d18 <__aeabi_dadd+0x474>
    7c60:	2220      	movs	r2, #32
    7c62:	1c08      	adds	r0, r1, #0
    7c64:	1ad2      	subs	r2, r2, r3
    7c66:	4090      	lsls	r0, r2
    7c68:	4681      	mov	r9, r0
    7c6a:	4660      	mov	r0, ip
    7c6c:	4692      	mov	sl, r2
    7c6e:	40d8      	lsrs	r0, r3
    7c70:	464a      	mov	r2, r9
    7c72:	4310      	orrs	r0, r2
    7c74:	4681      	mov	r9, r0
    7c76:	4652      	mov	r2, sl
    7c78:	4660      	mov	r0, ip
    7c7a:	4090      	lsls	r0, r2
    7c7c:	1c02      	adds	r2, r0, #0
    7c7e:	1e50      	subs	r0, r2, #1
    7c80:	4182      	sbcs	r2, r0
    7c82:	4648      	mov	r0, r9
    7c84:	4310      	orrs	r0, r2
    7c86:	1c0a      	adds	r2, r1, #0
    7c88:	40da      	lsrs	r2, r3
    7c8a:	e6e7      	b.n	7a5c <__aeabi_dadd+0x1b8>
    7c8c:	1c3c      	adds	r4, r7, #0
    7c8e:	432c      	orrs	r4, r5
    7c90:	d058      	beq.n	7d44 <__aeabi_dadd+0x4a0>
    7c92:	43c0      	mvns	r0, r0
    7c94:	2800      	cmp	r0, #0
    7c96:	d151      	bne.n	7d3c <__aeabi_dadd+0x498>
    7c98:	4660      	mov	r0, ip
    7c9a:	1b45      	subs	r5, r0, r5
    7c9c:	45ac      	cmp	ip, r5
    7c9e:	4180      	sbcs	r0, r0
    7ca0:	1bcf      	subs	r7, r1, r7
    7ca2:	4240      	negs	r0, r0
    7ca4:	1a3f      	subs	r7, r7, r0
    7ca6:	1c14      	adds	r4, r2, #0
    7ca8:	4698      	mov	r8, r3
    7caa:	e67f      	b.n	79ac <__aeabi_dadd+0x108>
    7cac:	4a8f      	ldr	r2, [pc, #572]	; (7eec <__aeabi_dadd+0x648>)
    7cae:	4294      	cmp	r4, r2
    7cb0:	d000      	beq.n	7cb4 <__aeabi_dadd+0x410>
    7cb2:	e6ca      	b.n	7a4a <__aeabi_dadd+0x1a6>
    7cb4:	e61e      	b.n	78f4 <__aeabi_dadd+0x50>
    7cb6:	2600      	movs	r6, #0
    7cb8:	e77d      	b.n	7bb6 <__aeabi_dadd+0x312>
    7cba:	2300      	movs	r3, #0
    7cbc:	e78c      	b.n	7bd8 <__aeabi_dadd+0x334>
    7cbe:	1c3b      	adds	r3, r7, #0
    7cc0:	432b      	orrs	r3, r5
    7cc2:	2c00      	cmp	r4, #0
    7cc4:	d000      	beq.n	7cc8 <__aeabi_dadd+0x424>
    7cc6:	e0bd      	b.n	7e44 <__aeabi_dadd+0x5a0>
    7cc8:	2b00      	cmp	r3, #0
    7cca:	d100      	bne.n	7cce <__aeabi_dadd+0x42a>
    7ccc:	e0f5      	b.n	7eba <__aeabi_dadd+0x616>
    7cce:	4663      	mov	r3, ip
    7cd0:	430b      	orrs	r3, r1
    7cd2:	d100      	bne.n	7cd6 <__aeabi_dadd+0x432>
    7cd4:	e60e      	b.n	78f4 <__aeabi_dadd+0x50>
    7cd6:	4663      	mov	r3, ip
    7cd8:	195b      	adds	r3, r3, r5
    7cda:	42ab      	cmp	r3, r5
    7cdc:	4180      	sbcs	r0, r0
    7cde:	19ca      	adds	r2, r1, r7
    7ce0:	4240      	negs	r0, r0
    7ce2:	1817      	adds	r7, r2, r0
    7ce4:	023a      	lsls	r2, r7, #8
    7ce6:	d400      	bmi.n	7cea <__aeabi_dadd+0x446>
    7ce8:	e0fc      	b.n	7ee4 <__aeabi_dadd+0x640>
    7cea:	4a81      	ldr	r2, [pc, #516]	; (7ef0 <__aeabi_dadd+0x64c>)
    7cec:	1c1d      	adds	r5, r3, #0
    7cee:	4017      	ands	r7, r2
    7cf0:	3401      	adds	r4, #1
    7cf2:	e5ff      	b.n	78f4 <__aeabi_dadd+0x50>
    7cf4:	1c3a      	adds	r2, r7, #0
    7cf6:	432a      	orrs	r2, r5
    7cf8:	2c00      	cmp	r4, #0
    7cfa:	d151      	bne.n	7da0 <__aeabi_dadd+0x4fc>
    7cfc:	2a00      	cmp	r2, #0
    7cfe:	d000      	beq.n	7d02 <__aeabi_dadd+0x45e>
    7d00:	e085      	b.n	7e0e <__aeabi_dadd+0x56a>
    7d02:	4662      	mov	r2, ip
    7d04:	430a      	orrs	r2, r1
    7d06:	d003      	beq.n	7d10 <__aeabi_dadd+0x46c>
    7d08:	1c0f      	adds	r7, r1, #0
    7d0a:	4665      	mov	r5, ip
    7d0c:	4698      	mov	r8, r3
    7d0e:	e5f1      	b.n	78f4 <__aeabi_dadd+0x50>
    7d10:	2600      	movs	r6, #0
    7d12:	2700      	movs	r7, #0
    7d14:	2500      	movs	r5, #0
    7d16:	e67f      	b.n	7a18 <__aeabi_dadd+0x174>
    7d18:	1c18      	adds	r0, r3, #0
    7d1a:	1c0a      	adds	r2, r1, #0
    7d1c:	3820      	subs	r0, #32
    7d1e:	40c2      	lsrs	r2, r0
    7d20:	2b20      	cmp	r3, #32
    7d22:	d100      	bne.n	7d26 <__aeabi_dadd+0x482>
    7d24:	e0a7      	b.n	7e76 <__aeabi_dadd+0x5d2>
    7d26:	2040      	movs	r0, #64	; 0x40
    7d28:	1ac0      	subs	r0, r0, r3
    7d2a:	4081      	lsls	r1, r0
    7d2c:	1c08      	adds	r0, r1, #0
    7d2e:	4663      	mov	r3, ip
    7d30:	4318      	orrs	r0, r3
    7d32:	1e41      	subs	r1, r0, #1
    7d34:	4188      	sbcs	r0, r1
    7d36:	4310      	orrs	r0, r2
    7d38:	2200      	movs	r2, #0
    7d3a:	e68f      	b.n	7a5c <__aeabi_dadd+0x1b8>
    7d3c:	4c6b      	ldr	r4, [pc, #428]	; (7eec <__aeabi_dadd+0x648>)
    7d3e:	42a2      	cmp	r2, r4
    7d40:	d000      	beq.n	7d44 <__aeabi_dadd+0x4a0>
    7d42:	e75a      	b.n	7bfa <__aeabi_dadd+0x356>
    7d44:	1c0f      	adds	r7, r1, #0
    7d46:	4665      	mov	r5, ip
    7d48:	1c14      	adds	r4, r2, #0
    7d4a:	4698      	mov	r8, r3
    7d4c:	e5d2      	b.n	78f4 <__aeabi_dadd+0x50>
    7d4e:	2c00      	cmp	r4, #0
    7d50:	d13a      	bne.n	7dc8 <__aeabi_dadd+0x524>
    7d52:	1c38      	adds	r0, r7, #0
    7d54:	4328      	orrs	r0, r5
    7d56:	d071      	beq.n	7e3c <__aeabi_dadd+0x598>
    7d58:	43db      	mvns	r3, r3
    7d5a:	2b00      	cmp	r3, #0
    7d5c:	d018      	beq.n	7d90 <__aeabi_dadd+0x4ec>
    7d5e:	4863      	ldr	r0, [pc, #396]	; (7eec <__aeabi_dadd+0x648>)
    7d60:	4282      	cmp	r2, r0
    7d62:	d06b      	beq.n	7e3c <__aeabi_dadd+0x598>
    7d64:	2b38      	cmp	r3, #56	; 0x38
    7d66:	dd00      	ble.n	7d6a <__aeabi_dadd+0x4c6>
    7d68:	e09d      	b.n	7ea6 <__aeabi_dadd+0x602>
    7d6a:	2b1f      	cmp	r3, #31
    7d6c:	dd00      	ble.n	7d70 <__aeabi_dadd+0x4cc>
    7d6e:	e0a7      	b.n	7ec0 <__aeabi_dadd+0x61c>
    7d70:	2020      	movs	r0, #32
    7d72:	1c3c      	adds	r4, r7, #0
    7d74:	1ac0      	subs	r0, r0, r3
    7d76:	4084      	lsls	r4, r0
    7d78:	46a1      	mov	r9, r4
    7d7a:	1c2c      	adds	r4, r5, #0
    7d7c:	4682      	mov	sl, r0
    7d7e:	40dc      	lsrs	r4, r3
    7d80:	4648      	mov	r0, r9
    7d82:	4304      	orrs	r4, r0
    7d84:	4650      	mov	r0, sl
    7d86:	4085      	lsls	r5, r0
    7d88:	1e68      	subs	r0, r5, #1
    7d8a:	4185      	sbcs	r5, r0
    7d8c:	40df      	lsrs	r7, r3
    7d8e:	4325      	orrs	r5, r4
    7d90:	4465      	add	r5, ip
    7d92:	4565      	cmp	r5, ip
    7d94:	419b      	sbcs	r3, r3
    7d96:	187f      	adds	r7, r7, r1
    7d98:	425b      	negs	r3, r3
    7d9a:	18ff      	adds	r7, r7, r3
    7d9c:	1c14      	adds	r4, r2, #0
    7d9e:	e664      	b.n	7a6a <__aeabi_dadd+0x1c6>
    7da0:	2a00      	cmp	r2, #0
    7da2:	d119      	bne.n	7dd8 <__aeabi_dadd+0x534>
    7da4:	4662      	mov	r2, ip
    7da6:	430a      	orrs	r2, r1
    7da8:	d077      	beq.n	7e9a <__aeabi_dadd+0x5f6>
    7daa:	1c0f      	adds	r7, r1, #0
    7dac:	4665      	mov	r5, ip
    7dae:	4698      	mov	r8, r3
    7db0:	4c4e      	ldr	r4, [pc, #312]	; (7eec <__aeabi_dadd+0x648>)
    7db2:	e59f      	b.n	78f4 <__aeabi_dadd+0x50>
    7db4:	433d      	orrs	r5, r7
    7db6:	1e6f      	subs	r7, r5, #1
    7db8:	41bd      	sbcs	r5, r7
    7dba:	2700      	movs	r7, #0
    7dbc:	b2ed      	uxtb	r5, r5
    7dbe:	e732      	b.n	7c26 <__aeabi_dadd+0x382>
    7dc0:	1c04      	adds	r4, r0, #0
    7dc2:	2700      	movs	r7, #0
    7dc4:	2500      	movs	r5, #0
    7dc6:	e627      	b.n	7a18 <__aeabi_dadd+0x174>
    7dc8:	4848      	ldr	r0, [pc, #288]	; (7eec <__aeabi_dadd+0x648>)
    7dca:	4282      	cmp	r2, r0
    7dcc:	d036      	beq.n	7e3c <__aeabi_dadd+0x598>
    7dce:	2080      	movs	r0, #128	; 0x80
    7dd0:	0400      	lsls	r0, r0, #16
    7dd2:	425b      	negs	r3, r3
    7dd4:	4307      	orrs	r7, r0
    7dd6:	e7c5      	b.n	7d64 <__aeabi_dadd+0x4c0>
    7dd8:	4662      	mov	r2, ip
    7dda:	430a      	orrs	r2, r1
    7ddc:	d049      	beq.n	7e72 <__aeabi_dadd+0x5ce>
    7dde:	2480      	movs	r4, #128	; 0x80
    7de0:	08ed      	lsrs	r5, r5, #3
    7de2:	0778      	lsls	r0, r7, #29
    7de4:	08fa      	lsrs	r2, r7, #3
    7de6:	0324      	lsls	r4, r4, #12
    7de8:	4328      	orrs	r0, r5
    7dea:	4222      	tst	r2, r4
    7dec:	d009      	beq.n	7e02 <__aeabi_dadd+0x55e>
    7dee:	08ce      	lsrs	r6, r1, #3
    7df0:	4226      	tst	r6, r4
    7df2:	d106      	bne.n	7e02 <__aeabi_dadd+0x55e>
    7df4:	4662      	mov	r2, ip
    7df6:	074f      	lsls	r7, r1, #29
    7df8:	1c38      	adds	r0, r7, #0
    7dfa:	08d2      	lsrs	r2, r2, #3
    7dfc:	4310      	orrs	r0, r2
    7dfe:	4698      	mov	r8, r3
    7e00:	1c32      	adds	r2, r6, #0
    7e02:	00d2      	lsls	r2, r2, #3
    7e04:	0f47      	lsrs	r7, r0, #29
    7e06:	4317      	orrs	r7, r2
    7e08:	00c5      	lsls	r5, r0, #3
    7e0a:	4c38      	ldr	r4, [pc, #224]	; (7eec <__aeabi_dadd+0x648>)
    7e0c:	e572      	b.n	78f4 <__aeabi_dadd+0x50>
    7e0e:	4662      	mov	r2, ip
    7e10:	430a      	orrs	r2, r1
    7e12:	d100      	bne.n	7e16 <__aeabi_dadd+0x572>
    7e14:	e56e      	b.n	78f4 <__aeabi_dadd+0x50>
    7e16:	4662      	mov	r2, ip
    7e18:	1aae      	subs	r6, r5, r2
    7e1a:	42b5      	cmp	r5, r6
    7e1c:	4192      	sbcs	r2, r2
    7e1e:	1a78      	subs	r0, r7, r1
    7e20:	4252      	negs	r2, r2
    7e22:	1a82      	subs	r2, r0, r2
    7e24:	0210      	lsls	r0, r2, #8
    7e26:	d400      	bmi.n	7e2a <__aeabi_dadd+0x586>
    7e28:	e655      	b.n	7ad6 <__aeabi_dadd+0x232>
    7e2a:	4662      	mov	r2, ip
    7e2c:	1b55      	subs	r5, r2, r5
    7e2e:	45ac      	cmp	ip, r5
    7e30:	4180      	sbcs	r0, r0
    7e32:	1bca      	subs	r2, r1, r7
    7e34:	4240      	negs	r0, r0
    7e36:	1a17      	subs	r7, r2, r0
    7e38:	4698      	mov	r8, r3
    7e3a:	e55b      	b.n	78f4 <__aeabi_dadd+0x50>
    7e3c:	1c0f      	adds	r7, r1, #0
    7e3e:	4665      	mov	r5, ip
    7e40:	1c14      	adds	r4, r2, #0
    7e42:	e557      	b.n	78f4 <__aeabi_dadd+0x50>
    7e44:	2b00      	cmp	r3, #0
    7e46:	d034      	beq.n	7eb2 <__aeabi_dadd+0x60e>
    7e48:	4663      	mov	r3, ip
    7e4a:	430b      	orrs	r3, r1
    7e4c:	d011      	beq.n	7e72 <__aeabi_dadd+0x5ce>
    7e4e:	2480      	movs	r4, #128	; 0x80
    7e50:	08ed      	lsrs	r5, r5, #3
    7e52:	0778      	lsls	r0, r7, #29
    7e54:	08fa      	lsrs	r2, r7, #3
    7e56:	0324      	lsls	r4, r4, #12
    7e58:	4328      	orrs	r0, r5
    7e5a:	4222      	tst	r2, r4
    7e5c:	d0d1      	beq.n	7e02 <__aeabi_dadd+0x55e>
    7e5e:	08cb      	lsrs	r3, r1, #3
    7e60:	4223      	tst	r3, r4
    7e62:	d1ce      	bne.n	7e02 <__aeabi_dadd+0x55e>
    7e64:	4662      	mov	r2, ip
    7e66:	074f      	lsls	r7, r1, #29
    7e68:	1c38      	adds	r0, r7, #0
    7e6a:	08d2      	lsrs	r2, r2, #3
    7e6c:	4310      	orrs	r0, r2
    7e6e:	1c1a      	adds	r2, r3, #0
    7e70:	e7c7      	b.n	7e02 <__aeabi_dadd+0x55e>
    7e72:	4c1e      	ldr	r4, [pc, #120]	; (7eec <__aeabi_dadd+0x648>)
    7e74:	e53e      	b.n	78f4 <__aeabi_dadd+0x50>
    7e76:	2000      	movs	r0, #0
    7e78:	e759      	b.n	7d2e <__aeabi_dadd+0x48a>
    7e7a:	1c04      	adds	r4, r0, #0
    7e7c:	1c3e      	adds	r6, r7, #0
    7e7e:	3c20      	subs	r4, #32
    7e80:	40e6      	lsrs	r6, r4
    7e82:	1c34      	adds	r4, r6, #0
    7e84:	2820      	cmp	r0, #32
    7e86:	d02b      	beq.n	7ee0 <__aeabi_dadd+0x63c>
    7e88:	2640      	movs	r6, #64	; 0x40
    7e8a:	1a30      	subs	r0, r6, r0
    7e8c:	4087      	lsls	r7, r0
    7e8e:	433d      	orrs	r5, r7
    7e90:	1e6f      	subs	r7, r5, #1
    7e92:	41bd      	sbcs	r5, r7
    7e94:	2700      	movs	r7, #0
    7e96:	4325      	orrs	r5, r4
    7e98:	e6c5      	b.n	7c26 <__aeabi_dadd+0x382>
    7e9a:	2780      	movs	r7, #128	; 0x80
    7e9c:	2600      	movs	r6, #0
    7e9e:	03ff      	lsls	r7, r7, #15
    7ea0:	4c12      	ldr	r4, [pc, #72]	; (7eec <__aeabi_dadd+0x648>)
    7ea2:	2500      	movs	r5, #0
    7ea4:	e5b8      	b.n	7a18 <__aeabi_dadd+0x174>
    7ea6:	433d      	orrs	r5, r7
    7ea8:	1e6f      	subs	r7, r5, #1
    7eaa:	41bd      	sbcs	r5, r7
    7eac:	2700      	movs	r7, #0
    7eae:	b2ed      	uxtb	r5, r5
    7eb0:	e76e      	b.n	7d90 <__aeabi_dadd+0x4ec>
    7eb2:	1c0f      	adds	r7, r1, #0
    7eb4:	4665      	mov	r5, ip
    7eb6:	4c0d      	ldr	r4, [pc, #52]	; (7eec <__aeabi_dadd+0x648>)
    7eb8:	e51c      	b.n	78f4 <__aeabi_dadd+0x50>
    7eba:	1c0f      	adds	r7, r1, #0
    7ebc:	4665      	mov	r5, ip
    7ebe:	e519      	b.n	78f4 <__aeabi_dadd+0x50>
    7ec0:	1c1c      	adds	r4, r3, #0
    7ec2:	1c38      	adds	r0, r7, #0
    7ec4:	3c20      	subs	r4, #32
    7ec6:	40e0      	lsrs	r0, r4
    7ec8:	1c04      	adds	r4, r0, #0
    7eca:	2b20      	cmp	r3, #32
    7ecc:	d00c      	beq.n	7ee8 <__aeabi_dadd+0x644>
    7ece:	2040      	movs	r0, #64	; 0x40
    7ed0:	1ac3      	subs	r3, r0, r3
    7ed2:	409f      	lsls	r7, r3
    7ed4:	433d      	orrs	r5, r7
    7ed6:	1e6f      	subs	r7, r5, #1
    7ed8:	41bd      	sbcs	r5, r7
    7eda:	2700      	movs	r7, #0
    7edc:	4325      	orrs	r5, r4
    7ede:	e757      	b.n	7d90 <__aeabi_dadd+0x4ec>
    7ee0:	2700      	movs	r7, #0
    7ee2:	e7d4      	b.n	7e8e <__aeabi_dadd+0x5ea>
    7ee4:	1c1d      	adds	r5, r3, #0
    7ee6:	e5fc      	b.n	7ae2 <__aeabi_dadd+0x23e>
    7ee8:	2700      	movs	r7, #0
    7eea:	e7f3      	b.n	7ed4 <__aeabi_dadd+0x630>
    7eec:	000007ff 	.word	0x000007ff
    7ef0:	ff7fffff 	.word	0xff7fffff

00007ef4 <__aeabi_ddiv>:
    7ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
    7ef6:	465f      	mov	r7, fp
    7ef8:	4656      	mov	r6, sl
    7efa:	464d      	mov	r5, r9
    7efc:	4644      	mov	r4, r8
    7efe:	b4f0      	push	{r4, r5, r6, r7}
    7f00:	030f      	lsls	r7, r1, #12
    7f02:	b087      	sub	sp, #28
    7f04:	4698      	mov	r8, r3
    7f06:	004d      	lsls	r5, r1, #1
    7f08:	0b3b      	lsrs	r3, r7, #12
    7f0a:	0fcc      	lsrs	r4, r1, #31
    7f0c:	1c06      	adds	r6, r0, #0
    7f0e:	4692      	mov	sl, r2
    7f10:	4681      	mov	r9, r0
    7f12:	469b      	mov	fp, r3
    7f14:	0d6d      	lsrs	r5, r5, #21
    7f16:	9401      	str	r4, [sp, #4]
    7f18:	d06b      	beq.n	7ff2 <__aeabi_ddiv+0xfe>
    7f1a:	4b66      	ldr	r3, [pc, #408]	; (80b4 <__aeabi_ddiv+0x1c0>)
    7f1c:	429d      	cmp	r5, r3
    7f1e:	d035      	beq.n	7f8c <__aeabi_ddiv+0x98>
    7f20:	2780      	movs	r7, #128	; 0x80
    7f22:	465b      	mov	r3, fp
    7f24:	037f      	lsls	r7, r7, #13
    7f26:	431f      	orrs	r7, r3
    7f28:	00f3      	lsls	r3, r6, #3
    7f2a:	4699      	mov	r9, r3
    7f2c:	4b62      	ldr	r3, [pc, #392]	; (80b8 <__aeabi_ddiv+0x1c4>)
    7f2e:	00ff      	lsls	r7, r7, #3
    7f30:	0f40      	lsrs	r0, r0, #29
    7f32:	469c      	mov	ip, r3
    7f34:	4307      	orrs	r7, r0
    7f36:	2300      	movs	r3, #0
    7f38:	46bb      	mov	fp, r7
    7f3a:	2600      	movs	r6, #0
    7f3c:	4465      	add	r5, ip
    7f3e:	9300      	str	r3, [sp, #0]
    7f40:	4642      	mov	r2, r8
    7f42:	0317      	lsls	r7, r2, #12
    7f44:	0050      	lsls	r0, r2, #1
    7f46:	0fd2      	lsrs	r2, r2, #31
    7f48:	4653      	mov	r3, sl
    7f4a:	0b3f      	lsrs	r7, r7, #12
    7f4c:	0d40      	lsrs	r0, r0, #21
    7f4e:	4690      	mov	r8, r2
    7f50:	d100      	bne.n	7f54 <__aeabi_ddiv+0x60>
    7f52:	e072      	b.n	803a <__aeabi_ddiv+0x146>
    7f54:	4a57      	ldr	r2, [pc, #348]	; (80b4 <__aeabi_ddiv+0x1c0>)
    7f56:	4290      	cmp	r0, r2
    7f58:	d067      	beq.n	802a <__aeabi_ddiv+0x136>
    7f5a:	2380      	movs	r3, #128	; 0x80
    7f5c:	035b      	lsls	r3, r3, #13
    7f5e:	431f      	orrs	r7, r3
    7f60:	4653      	mov	r3, sl
    7f62:	4a55      	ldr	r2, [pc, #340]	; (80b8 <__aeabi_ddiv+0x1c4>)
    7f64:	0f5b      	lsrs	r3, r3, #29
    7f66:	00ff      	lsls	r7, r7, #3
    7f68:	431f      	orrs	r7, r3
    7f6a:	4694      	mov	ip, r2
    7f6c:	4653      	mov	r3, sl
    7f6e:	2100      	movs	r1, #0
    7f70:	00db      	lsls	r3, r3, #3
    7f72:	4460      	add	r0, ip
    7f74:	4642      	mov	r2, r8
    7f76:	4062      	eors	r2, r4
    7f78:	4692      	mov	sl, r2
    7f7a:	1a2d      	subs	r5, r5, r0
    7f7c:	430e      	orrs	r6, r1
    7f7e:	2e0f      	cmp	r6, #15
    7f80:	d900      	bls.n	7f84 <__aeabi_ddiv+0x90>
    7f82:	e0a1      	b.n	80c8 <__aeabi_ddiv+0x1d4>
    7f84:	484d      	ldr	r0, [pc, #308]	; (80bc <__aeabi_ddiv+0x1c8>)
    7f86:	00b6      	lsls	r6, r6, #2
    7f88:	5980      	ldr	r0, [r0, r6]
    7f8a:	4687      	mov	pc, r0
    7f8c:	465b      	mov	r3, fp
    7f8e:	431e      	orrs	r6, r3
    7f90:	d000      	beq.n	7f94 <__aeabi_ddiv+0xa0>
    7f92:	e076      	b.n	8082 <__aeabi_ddiv+0x18e>
    7f94:	2300      	movs	r3, #0
    7f96:	469b      	mov	fp, r3
    7f98:	4699      	mov	r9, r3
    7f9a:	3302      	adds	r3, #2
    7f9c:	2608      	movs	r6, #8
    7f9e:	9300      	str	r3, [sp, #0]
    7fa0:	e7ce      	b.n	7f40 <__aeabi_ddiv+0x4c>
    7fa2:	4699      	mov	r9, r3
    7fa4:	4643      	mov	r3, r8
    7fa6:	46bb      	mov	fp, r7
    7fa8:	9301      	str	r3, [sp, #4]
    7faa:	9100      	str	r1, [sp, #0]
    7fac:	9b00      	ldr	r3, [sp, #0]
    7fae:	2b02      	cmp	r3, #2
    7fb0:	d16b      	bne.n	808a <__aeabi_ddiv+0x196>
    7fb2:	9b01      	ldr	r3, [sp, #4]
    7fb4:	469a      	mov	sl, r3
    7fb6:	2100      	movs	r1, #0
    7fb8:	4653      	mov	r3, sl
    7fba:	2201      	movs	r2, #1
    7fbc:	2700      	movs	r7, #0
    7fbe:	4689      	mov	r9, r1
    7fc0:	401a      	ands	r2, r3
    7fc2:	4b3c      	ldr	r3, [pc, #240]	; (80b4 <__aeabi_ddiv+0x1c0>)
    7fc4:	2100      	movs	r1, #0
    7fc6:	033f      	lsls	r7, r7, #12
    7fc8:	0d0c      	lsrs	r4, r1, #20
    7fca:	0524      	lsls	r4, r4, #20
    7fcc:	0b3f      	lsrs	r7, r7, #12
    7fce:	4327      	orrs	r7, r4
    7fd0:	4c3b      	ldr	r4, [pc, #236]	; (80c0 <__aeabi_ddiv+0x1cc>)
    7fd2:	051b      	lsls	r3, r3, #20
    7fd4:	4027      	ands	r7, r4
    7fd6:	431f      	orrs	r7, r3
    7fd8:	007f      	lsls	r7, r7, #1
    7fda:	07d2      	lsls	r2, r2, #31
    7fdc:	087f      	lsrs	r7, r7, #1
    7fde:	4317      	orrs	r7, r2
    7fe0:	4648      	mov	r0, r9
    7fe2:	1c39      	adds	r1, r7, #0
    7fe4:	b007      	add	sp, #28
    7fe6:	bc3c      	pop	{r2, r3, r4, r5}
    7fe8:	4690      	mov	r8, r2
    7fea:	4699      	mov	r9, r3
    7fec:	46a2      	mov	sl, r4
    7fee:	46ab      	mov	fp, r5
    7ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7ff2:	4303      	orrs	r3, r0
    7ff4:	d03e      	beq.n	8074 <__aeabi_ddiv+0x180>
    7ff6:	465b      	mov	r3, fp
    7ff8:	2b00      	cmp	r3, #0
    7ffa:	d100      	bne.n	7ffe <__aeabi_ddiv+0x10a>
    7ffc:	e19c      	b.n	8338 <__aeabi_ddiv+0x444>
    7ffe:	4658      	mov	r0, fp
    8000:	f001 fb52 	bl	96a8 <__clzsi2>
    8004:	2328      	movs	r3, #40	; 0x28
    8006:	1c31      	adds	r1, r6, #0
    8008:	1a1b      	subs	r3, r3, r0
    800a:	1c02      	adds	r2, r0, #0
    800c:	465f      	mov	r7, fp
    800e:	40d9      	lsrs	r1, r3
    8010:	3a08      	subs	r2, #8
    8012:	4097      	lsls	r7, r2
    8014:	1c0b      	adds	r3, r1, #0
    8016:	4096      	lsls	r6, r2
    8018:	433b      	orrs	r3, r7
    801a:	469b      	mov	fp, r3
    801c:	46b1      	mov	r9, r6
    801e:	2300      	movs	r3, #0
    8020:	4d28      	ldr	r5, [pc, #160]	; (80c4 <__aeabi_ddiv+0x1d0>)
    8022:	2600      	movs	r6, #0
    8024:	1a2d      	subs	r5, r5, r0
    8026:	9300      	str	r3, [sp, #0]
    8028:	e78a      	b.n	7f40 <__aeabi_ddiv+0x4c>
    802a:	4652      	mov	r2, sl
    802c:	2103      	movs	r1, #3
    802e:	433a      	orrs	r2, r7
    8030:	d1a0      	bne.n	7f74 <__aeabi_ddiv+0x80>
    8032:	2700      	movs	r7, #0
    8034:	2300      	movs	r3, #0
    8036:	2102      	movs	r1, #2
    8038:	e79c      	b.n	7f74 <__aeabi_ddiv+0x80>
    803a:	4652      	mov	r2, sl
    803c:	433a      	orrs	r2, r7
    803e:	d015      	beq.n	806c <__aeabi_ddiv+0x178>
    8040:	2f00      	cmp	r7, #0
    8042:	d100      	bne.n	8046 <__aeabi_ddiv+0x152>
    8044:	e185      	b.n	8352 <__aeabi_ddiv+0x45e>
    8046:	1c38      	adds	r0, r7, #0
    8048:	f001 fb2e 	bl	96a8 <__clzsi2>
    804c:	1c02      	adds	r2, r0, #0
    804e:	2128      	movs	r1, #40	; 0x28
    8050:	4650      	mov	r0, sl
    8052:	1a89      	subs	r1, r1, r2
    8054:	1c13      	adds	r3, r2, #0
    8056:	40c8      	lsrs	r0, r1
    8058:	4651      	mov	r1, sl
    805a:	3b08      	subs	r3, #8
    805c:	4099      	lsls	r1, r3
    805e:	409f      	lsls	r7, r3
    8060:	1c0b      	adds	r3, r1, #0
    8062:	4307      	orrs	r7, r0
    8064:	4817      	ldr	r0, [pc, #92]	; (80c4 <__aeabi_ddiv+0x1d0>)
    8066:	2100      	movs	r1, #0
    8068:	1a80      	subs	r0, r0, r2
    806a:	e783      	b.n	7f74 <__aeabi_ddiv+0x80>
    806c:	2700      	movs	r7, #0
    806e:	2300      	movs	r3, #0
    8070:	2101      	movs	r1, #1
    8072:	e77f      	b.n	7f74 <__aeabi_ddiv+0x80>
    8074:	2300      	movs	r3, #0
    8076:	469b      	mov	fp, r3
    8078:	4699      	mov	r9, r3
    807a:	3301      	adds	r3, #1
    807c:	2604      	movs	r6, #4
    807e:	9300      	str	r3, [sp, #0]
    8080:	e75e      	b.n	7f40 <__aeabi_ddiv+0x4c>
    8082:	2303      	movs	r3, #3
    8084:	260c      	movs	r6, #12
    8086:	9300      	str	r3, [sp, #0]
    8088:	e75a      	b.n	7f40 <__aeabi_ddiv+0x4c>
    808a:	2b03      	cmp	r3, #3
    808c:	d100      	bne.n	8090 <__aeabi_ddiv+0x19c>
    808e:	e23c      	b.n	850a <__aeabi_ddiv+0x616>
    8090:	2b01      	cmp	r3, #1
    8092:	d000      	beq.n	8096 <__aeabi_ddiv+0x1a2>
    8094:	e1bf      	b.n	8416 <__aeabi_ddiv+0x522>
    8096:	1c1a      	adds	r2, r3, #0
    8098:	9b01      	ldr	r3, [sp, #4]
    809a:	401a      	ands	r2, r3
    809c:	2100      	movs	r1, #0
    809e:	2300      	movs	r3, #0
    80a0:	2700      	movs	r7, #0
    80a2:	4689      	mov	r9, r1
    80a4:	e78e      	b.n	7fc4 <__aeabi_ddiv+0xd0>
    80a6:	2300      	movs	r3, #0
    80a8:	2780      	movs	r7, #128	; 0x80
    80aa:	4699      	mov	r9, r3
    80ac:	2200      	movs	r2, #0
    80ae:	033f      	lsls	r7, r7, #12
    80b0:	4b00      	ldr	r3, [pc, #0]	; (80b4 <__aeabi_ddiv+0x1c0>)
    80b2:	e787      	b.n	7fc4 <__aeabi_ddiv+0xd0>
    80b4:	000007ff 	.word	0x000007ff
    80b8:	fffffc01 	.word	0xfffffc01
    80bc:	0000f968 	.word	0x0000f968
    80c0:	800fffff 	.word	0x800fffff
    80c4:	fffffc0d 	.word	0xfffffc0d
    80c8:	45bb      	cmp	fp, r7
    80ca:	d900      	bls.n	80ce <__aeabi_ddiv+0x1da>
    80cc:	e151      	b.n	8372 <__aeabi_ddiv+0x47e>
    80ce:	d100      	bne.n	80d2 <__aeabi_ddiv+0x1de>
    80d0:	e14c      	b.n	836c <__aeabi_ddiv+0x478>
    80d2:	464a      	mov	r2, r9
    80d4:	9203      	str	r2, [sp, #12]
    80d6:	2200      	movs	r2, #0
    80d8:	465c      	mov	r4, fp
    80da:	4690      	mov	r8, r2
    80dc:	3d01      	subs	r5, #1
    80de:	0e18      	lsrs	r0, r3, #24
    80e0:	023f      	lsls	r7, r7, #8
    80e2:	4338      	orrs	r0, r7
    80e4:	021b      	lsls	r3, r3, #8
    80e6:	9301      	str	r3, [sp, #4]
    80e8:	0c03      	lsrs	r3, r0, #16
    80ea:	4699      	mov	r9, r3
    80ec:	0403      	lsls	r3, r0, #16
    80ee:	0c1b      	lsrs	r3, r3, #16
    80f0:	4649      	mov	r1, r9
    80f2:	1c06      	adds	r6, r0, #0
    80f4:	1c20      	adds	r0, r4, #0
    80f6:	1c1f      	adds	r7, r3, #0
    80f8:	9300      	str	r3, [sp, #0]
    80fa:	f7fe fac3 	bl	6684 <__aeabi_uidiv>
    80fe:	1c02      	adds	r2, r0, #0
    8100:	437a      	muls	r2, r7
    8102:	9002      	str	r0, [sp, #8]
    8104:	4649      	mov	r1, r9
    8106:	1c20      	adds	r0, r4, #0
    8108:	1c17      	adds	r7, r2, #0
    810a:	f7fe fb41 	bl	6790 <__aeabi_uidivmod>
    810e:	9b03      	ldr	r3, [sp, #12]
    8110:	0409      	lsls	r1, r1, #16
    8112:	0c1b      	lsrs	r3, r3, #16
    8114:	4319      	orrs	r1, r3
    8116:	428f      	cmp	r7, r1
    8118:	d90c      	bls.n	8134 <__aeabi_ddiv+0x240>
    811a:	9b02      	ldr	r3, [sp, #8]
    811c:	1989      	adds	r1, r1, r6
    811e:	3b01      	subs	r3, #1
    8120:	428e      	cmp	r6, r1
    8122:	d900      	bls.n	8126 <__aeabi_ddiv+0x232>
    8124:	e152      	b.n	83cc <__aeabi_ddiv+0x4d8>
    8126:	428f      	cmp	r7, r1
    8128:	d800      	bhi.n	812c <__aeabi_ddiv+0x238>
    812a:	e14f      	b.n	83cc <__aeabi_ddiv+0x4d8>
    812c:	9b02      	ldr	r3, [sp, #8]
    812e:	1989      	adds	r1, r1, r6
    8130:	3b02      	subs	r3, #2
    8132:	9302      	str	r3, [sp, #8]
    8134:	1bcc      	subs	r4, r1, r7
    8136:	1c20      	adds	r0, r4, #0
    8138:	4649      	mov	r1, r9
    813a:	f7fe faa3 	bl	6684 <__aeabi_uidiv>
    813e:	9f00      	ldr	r7, [sp, #0]
    8140:	4683      	mov	fp, r0
    8142:	4347      	muls	r7, r0
    8144:	4649      	mov	r1, r9
    8146:	1c20      	adds	r0, r4, #0
    8148:	f7fe fb22 	bl	6790 <__aeabi_uidivmod>
    814c:	9a03      	ldr	r2, [sp, #12]
    814e:	040b      	lsls	r3, r1, #16
    8150:	0414      	lsls	r4, r2, #16
    8152:	0c24      	lsrs	r4, r4, #16
    8154:	4323      	orrs	r3, r4
    8156:	429f      	cmp	r7, r3
    8158:	d90d      	bls.n	8176 <__aeabi_ddiv+0x282>
    815a:	465a      	mov	r2, fp
    815c:	199b      	adds	r3, r3, r6
    815e:	3a01      	subs	r2, #1
    8160:	429e      	cmp	r6, r3
    8162:	d900      	bls.n	8166 <__aeabi_ddiv+0x272>
    8164:	e130      	b.n	83c8 <__aeabi_ddiv+0x4d4>
    8166:	429f      	cmp	r7, r3
    8168:	d800      	bhi.n	816c <__aeabi_ddiv+0x278>
    816a:	e12d      	b.n	83c8 <__aeabi_ddiv+0x4d4>
    816c:	2202      	movs	r2, #2
    816e:	4252      	negs	r2, r2
    8170:	4694      	mov	ip, r2
    8172:	199b      	adds	r3, r3, r6
    8174:	44e3      	add	fp, ip
    8176:	9a02      	ldr	r2, [sp, #8]
    8178:	1bdb      	subs	r3, r3, r7
    817a:	0417      	lsls	r7, r2, #16
    817c:	465a      	mov	r2, fp
    817e:	433a      	orrs	r2, r7
    8180:	4693      	mov	fp, r2
    8182:	9c01      	ldr	r4, [sp, #4]
    8184:	0c17      	lsrs	r7, r2, #16
    8186:	0c22      	lsrs	r2, r4, #16
    8188:	1c10      	adds	r0, r2, #0
    818a:	9204      	str	r2, [sp, #16]
    818c:	465a      	mov	r2, fp
    818e:	0411      	lsls	r1, r2, #16
    8190:	0422      	lsls	r2, r4, #16
    8192:	0c12      	lsrs	r2, r2, #16
    8194:	1c14      	adds	r4, r2, #0
    8196:	0c09      	lsrs	r1, r1, #16
    8198:	437c      	muls	r4, r7
    819a:	9205      	str	r2, [sp, #20]
    819c:	434a      	muls	r2, r1
    819e:	4341      	muls	r1, r0
    81a0:	4347      	muls	r7, r0
    81a2:	1861      	adds	r1, r4, r1
    81a4:	0c10      	lsrs	r0, r2, #16
    81a6:	1809      	adds	r1, r1, r0
    81a8:	428c      	cmp	r4, r1
    81aa:	d903      	bls.n	81b4 <__aeabi_ddiv+0x2c0>
    81ac:	2080      	movs	r0, #128	; 0x80
    81ae:	0240      	lsls	r0, r0, #9
    81b0:	4684      	mov	ip, r0
    81b2:	4467      	add	r7, ip
    81b4:	0c0c      	lsrs	r4, r1, #16
    81b6:	0412      	lsls	r2, r2, #16
    81b8:	0408      	lsls	r0, r1, #16
    81ba:	0c12      	lsrs	r2, r2, #16
    81bc:	193c      	adds	r4, r7, r4
    81be:	1881      	adds	r1, r0, r2
    81c0:	42a3      	cmp	r3, r4
    81c2:	d200      	bcs.n	81c6 <__aeabi_ddiv+0x2d2>
    81c4:	e0e5      	b.n	8392 <__aeabi_ddiv+0x49e>
    81c6:	d100      	bne.n	81ca <__aeabi_ddiv+0x2d6>
    81c8:	e0df      	b.n	838a <__aeabi_ddiv+0x496>
    81ca:	1b1f      	subs	r7, r3, r4
    81cc:	4643      	mov	r3, r8
    81ce:	1a5c      	subs	r4, r3, r1
    81d0:	45a0      	cmp	r8, r4
    81d2:	4192      	sbcs	r2, r2
    81d4:	4252      	negs	r2, r2
    81d6:	1abf      	subs	r7, r7, r2
    81d8:	42b7      	cmp	r7, r6
    81da:	d100      	bne.n	81de <__aeabi_ddiv+0x2ea>
    81dc:	e10e      	b.n	83fc <__aeabi_ddiv+0x508>
    81de:	1c38      	adds	r0, r7, #0
    81e0:	4649      	mov	r1, r9
    81e2:	f7fe fa4f 	bl	6684 <__aeabi_uidiv>
    81e6:	9b00      	ldr	r3, [sp, #0]
    81e8:	9002      	str	r0, [sp, #8]
    81ea:	4343      	muls	r3, r0
    81ec:	4649      	mov	r1, r9
    81ee:	1c38      	adds	r0, r7, #0
    81f0:	4698      	mov	r8, r3
    81f2:	f7fe facd 	bl	6790 <__aeabi_uidivmod>
    81f6:	0c23      	lsrs	r3, r4, #16
    81f8:	040f      	lsls	r7, r1, #16
    81fa:	431f      	orrs	r7, r3
    81fc:	45b8      	cmp	r8, r7
    81fe:	d90c      	bls.n	821a <__aeabi_ddiv+0x326>
    8200:	9b02      	ldr	r3, [sp, #8]
    8202:	19bf      	adds	r7, r7, r6
    8204:	3b01      	subs	r3, #1
    8206:	42be      	cmp	r6, r7
    8208:	d900      	bls.n	820c <__aeabi_ddiv+0x318>
    820a:	e0fb      	b.n	8404 <__aeabi_ddiv+0x510>
    820c:	45b8      	cmp	r8, r7
    820e:	d800      	bhi.n	8212 <__aeabi_ddiv+0x31e>
    8210:	e0f8      	b.n	8404 <__aeabi_ddiv+0x510>
    8212:	9b02      	ldr	r3, [sp, #8]
    8214:	19bf      	adds	r7, r7, r6
    8216:	3b02      	subs	r3, #2
    8218:	9302      	str	r3, [sp, #8]
    821a:	4643      	mov	r3, r8
    821c:	1aff      	subs	r7, r7, r3
    821e:	4649      	mov	r1, r9
    8220:	1c38      	adds	r0, r7, #0
    8222:	f7fe fa2f 	bl	6684 <__aeabi_uidiv>
    8226:	9b00      	ldr	r3, [sp, #0]
    8228:	9003      	str	r0, [sp, #12]
    822a:	4343      	muls	r3, r0
    822c:	4649      	mov	r1, r9
    822e:	1c38      	adds	r0, r7, #0
    8230:	4698      	mov	r8, r3
    8232:	f7fe faad 	bl	6790 <__aeabi_uidivmod>
    8236:	0424      	lsls	r4, r4, #16
    8238:	0409      	lsls	r1, r1, #16
    823a:	0c24      	lsrs	r4, r4, #16
    823c:	4321      	orrs	r1, r4
    823e:	4588      	cmp	r8, r1
    8240:	d90c      	bls.n	825c <__aeabi_ddiv+0x368>
    8242:	9b03      	ldr	r3, [sp, #12]
    8244:	1989      	adds	r1, r1, r6
    8246:	3b01      	subs	r3, #1
    8248:	428e      	cmp	r6, r1
    824a:	d900      	bls.n	824e <__aeabi_ddiv+0x35a>
    824c:	e0dc      	b.n	8408 <__aeabi_ddiv+0x514>
    824e:	4588      	cmp	r8, r1
    8250:	d800      	bhi.n	8254 <__aeabi_ddiv+0x360>
    8252:	e0d9      	b.n	8408 <__aeabi_ddiv+0x514>
    8254:	9b03      	ldr	r3, [sp, #12]
    8256:	1989      	adds	r1, r1, r6
    8258:	3b02      	subs	r3, #2
    825a:	9303      	str	r3, [sp, #12]
    825c:	4643      	mov	r3, r8
    825e:	1ac9      	subs	r1, r1, r3
    8260:	9b02      	ldr	r3, [sp, #8]
    8262:	9a03      	ldr	r2, [sp, #12]
    8264:	041b      	lsls	r3, r3, #16
    8266:	9c05      	ldr	r4, [sp, #20]
    8268:	431a      	orrs	r2, r3
    826a:	0c10      	lsrs	r0, r2, #16
    826c:	0413      	lsls	r3, r2, #16
    826e:	4691      	mov	r9, r2
    8270:	1c22      	adds	r2, r4, #0
    8272:	9f04      	ldr	r7, [sp, #16]
    8274:	0c1b      	lsrs	r3, r3, #16
    8276:	435a      	muls	r2, r3
    8278:	4344      	muls	r4, r0
    827a:	437b      	muls	r3, r7
    827c:	4378      	muls	r0, r7
    827e:	18e3      	adds	r3, r4, r3
    8280:	0c17      	lsrs	r7, r2, #16
    8282:	19db      	adds	r3, r3, r7
    8284:	429c      	cmp	r4, r3
    8286:	d903      	bls.n	8290 <__aeabi_ddiv+0x39c>
    8288:	2480      	movs	r4, #128	; 0x80
    828a:	0264      	lsls	r4, r4, #9
    828c:	46a4      	mov	ip, r4
    828e:	4460      	add	r0, ip
    8290:	0c1c      	lsrs	r4, r3, #16
    8292:	0412      	lsls	r2, r2, #16
    8294:	041b      	lsls	r3, r3, #16
    8296:	0c12      	lsrs	r2, r2, #16
    8298:	1900      	adds	r0, r0, r4
    829a:	189b      	adds	r3, r3, r2
    829c:	4281      	cmp	r1, r0
    829e:	d200      	bcs.n	82a2 <__aeabi_ddiv+0x3ae>
    82a0:	e096      	b.n	83d0 <__aeabi_ddiv+0x4dc>
    82a2:	d100      	bne.n	82a6 <__aeabi_ddiv+0x3b2>
    82a4:	e0fc      	b.n	84a0 <__aeabi_ddiv+0x5ac>
    82a6:	464a      	mov	r2, r9
    82a8:	2301      	movs	r3, #1
    82aa:	431a      	orrs	r2, r3
    82ac:	4691      	mov	r9, r2
    82ae:	4b9b      	ldr	r3, [pc, #620]	; (851c <__aeabi_ddiv+0x628>)
    82b0:	18eb      	adds	r3, r5, r3
    82b2:	2b00      	cmp	r3, #0
    82b4:	dc00      	bgt.n	82b8 <__aeabi_ddiv+0x3c4>
    82b6:	e099      	b.n	83ec <__aeabi_ddiv+0x4f8>
    82b8:	464a      	mov	r2, r9
    82ba:	0752      	lsls	r2, r2, #29
    82bc:	d00a      	beq.n	82d4 <__aeabi_ddiv+0x3e0>
    82be:	220f      	movs	r2, #15
    82c0:	4649      	mov	r1, r9
    82c2:	400a      	ands	r2, r1
    82c4:	2a04      	cmp	r2, #4
    82c6:	d005      	beq.n	82d4 <__aeabi_ddiv+0x3e0>
    82c8:	3104      	adds	r1, #4
    82ca:	4549      	cmp	r1, r9
    82cc:	4192      	sbcs	r2, r2
    82ce:	4689      	mov	r9, r1
    82d0:	4252      	negs	r2, r2
    82d2:	4493      	add	fp, r2
    82d4:	465a      	mov	r2, fp
    82d6:	01d2      	lsls	r2, r2, #7
    82d8:	d506      	bpl.n	82e8 <__aeabi_ddiv+0x3f4>
    82da:	465a      	mov	r2, fp
    82dc:	4b90      	ldr	r3, [pc, #576]	; (8520 <__aeabi_ddiv+0x62c>)
    82de:	401a      	ands	r2, r3
    82e0:	2380      	movs	r3, #128	; 0x80
    82e2:	4693      	mov	fp, r2
    82e4:	00db      	lsls	r3, r3, #3
    82e6:	18eb      	adds	r3, r5, r3
    82e8:	4a8e      	ldr	r2, [pc, #568]	; (8524 <__aeabi_ddiv+0x630>)
    82ea:	4293      	cmp	r3, r2
    82ec:	dd00      	ble.n	82f0 <__aeabi_ddiv+0x3fc>
    82ee:	e662      	b.n	7fb6 <__aeabi_ddiv+0xc2>
    82f0:	464a      	mov	r2, r9
    82f2:	4659      	mov	r1, fp
    82f4:	08d2      	lsrs	r2, r2, #3
    82f6:	0749      	lsls	r1, r1, #29
    82f8:	4311      	orrs	r1, r2
    82fa:	465a      	mov	r2, fp
    82fc:	4689      	mov	r9, r1
    82fe:	0257      	lsls	r7, r2, #9
    8300:	4651      	mov	r1, sl
    8302:	2201      	movs	r2, #1
    8304:	055b      	lsls	r3, r3, #21
    8306:	0b3f      	lsrs	r7, r7, #12
    8308:	0d5b      	lsrs	r3, r3, #21
    830a:	400a      	ands	r2, r1
    830c:	e65a      	b.n	7fc4 <__aeabi_ddiv+0xd0>
    830e:	2080      	movs	r0, #128	; 0x80
    8310:	465a      	mov	r2, fp
    8312:	0300      	lsls	r0, r0, #12
    8314:	4202      	tst	r2, r0
    8316:	d008      	beq.n	832a <__aeabi_ddiv+0x436>
    8318:	4207      	tst	r7, r0
    831a:	d106      	bne.n	832a <__aeabi_ddiv+0x436>
    831c:	4307      	orrs	r7, r0
    831e:	033f      	lsls	r7, r7, #12
    8320:	4699      	mov	r9, r3
    8322:	0b3f      	lsrs	r7, r7, #12
    8324:	4642      	mov	r2, r8
    8326:	4b80      	ldr	r3, [pc, #512]	; (8528 <__aeabi_ddiv+0x634>)
    8328:	e64c      	b.n	7fc4 <__aeabi_ddiv+0xd0>
    832a:	465f      	mov	r7, fp
    832c:	4307      	orrs	r7, r0
    832e:	033f      	lsls	r7, r7, #12
    8330:	0b3f      	lsrs	r7, r7, #12
    8332:	1c22      	adds	r2, r4, #0
    8334:	4b7c      	ldr	r3, [pc, #496]	; (8528 <__aeabi_ddiv+0x634>)
    8336:	e645      	b.n	7fc4 <__aeabi_ddiv+0xd0>
    8338:	f001 f9b6 	bl	96a8 <__clzsi2>
    833c:	1c03      	adds	r3, r0, #0
    833e:	3020      	adds	r0, #32
    8340:	2827      	cmp	r0, #39	; 0x27
    8342:	dc00      	bgt.n	8346 <__aeabi_ddiv+0x452>
    8344:	e65e      	b.n	8004 <__aeabi_ddiv+0x110>
    8346:	3b08      	subs	r3, #8
    8348:	409e      	lsls	r6, r3
    834a:	2300      	movs	r3, #0
    834c:	46b3      	mov	fp, r6
    834e:	4699      	mov	r9, r3
    8350:	e665      	b.n	801e <__aeabi_ddiv+0x12a>
    8352:	4650      	mov	r0, sl
    8354:	f001 f9a8 	bl	96a8 <__clzsi2>
    8358:	1c02      	adds	r2, r0, #0
    835a:	3220      	adds	r2, #32
    835c:	2a27      	cmp	r2, #39	; 0x27
    835e:	dc00      	bgt.n	8362 <__aeabi_ddiv+0x46e>
    8360:	e675      	b.n	804e <__aeabi_ddiv+0x15a>
    8362:	4657      	mov	r7, sl
    8364:	3808      	subs	r0, #8
    8366:	4087      	lsls	r7, r0
    8368:	2300      	movs	r3, #0
    836a:	e67b      	b.n	8064 <__aeabi_ddiv+0x170>
    836c:	4599      	cmp	r9, r3
    836e:	d200      	bcs.n	8372 <__aeabi_ddiv+0x47e>
    8370:	e6af      	b.n	80d2 <__aeabi_ddiv+0x1de>
    8372:	465a      	mov	r2, fp
    8374:	4659      	mov	r1, fp
    8376:	0854      	lsrs	r4, r2, #1
    8378:	464a      	mov	r2, r9
    837a:	07c8      	lsls	r0, r1, #31
    837c:	0852      	lsrs	r2, r2, #1
    837e:	4302      	orrs	r2, r0
    8380:	9203      	str	r2, [sp, #12]
    8382:	464a      	mov	r2, r9
    8384:	07d2      	lsls	r2, r2, #31
    8386:	4690      	mov	r8, r2
    8388:	e6a9      	b.n	80de <__aeabi_ddiv+0x1ea>
    838a:	2700      	movs	r7, #0
    838c:	4588      	cmp	r8, r1
    838e:	d300      	bcc.n	8392 <__aeabi_ddiv+0x49e>
    8390:	e71c      	b.n	81cc <__aeabi_ddiv+0x2d8>
    8392:	9f01      	ldr	r7, [sp, #4]
    8394:	465a      	mov	r2, fp
    8396:	46bc      	mov	ip, r7
    8398:	44e0      	add	r8, ip
    839a:	45b8      	cmp	r8, r7
    839c:	41bf      	sbcs	r7, r7
    839e:	427f      	negs	r7, r7
    83a0:	19bf      	adds	r7, r7, r6
    83a2:	18ff      	adds	r7, r7, r3
    83a4:	3a01      	subs	r2, #1
    83a6:	42be      	cmp	r6, r7
    83a8:	d206      	bcs.n	83b8 <__aeabi_ddiv+0x4c4>
    83aa:	42bc      	cmp	r4, r7
    83ac:	d85f      	bhi.n	846e <__aeabi_ddiv+0x57a>
    83ae:	d100      	bne.n	83b2 <__aeabi_ddiv+0x4be>
    83b0:	e09f      	b.n	84f2 <__aeabi_ddiv+0x5fe>
    83b2:	1b3f      	subs	r7, r7, r4
    83b4:	4693      	mov	fp, r2
    83b6:	e709      	b.n	81cc <__aeabi_ddiv+0x2d8>
    83b8:	42b7      	cmp	r7, r6
    83ba:	d1fa      	bne.n	83b2 <__aeabi_ddiv+0x4be>
    83bc:	9b01      	ldr	r3, [sp, #4]
    83be:	4543      	cmp	r3, r8
    83c0:	d9f3      	bls.n	83aa <__aeabi_ddiv+0x4b6>
    83c2:	1b37      	subs	r7, r6, r4
    83c4:	4693      	mov	fp, r2
    83c6:	e701      	b.n	81cc <__aeabi_ddiv+0x2d8>
    83c8:	4693      	mov	fp, r2
    83ca:	e6d4      	b.n	8176 <__aeabi_ddiv+0x282>
    83cc:	9302      	str	r3, [sp, #8]
    83ce:	e6b1      	b.n	8134 <__aeabi_ddiv+0x240>
    83d0:	464a      	mov	r2, r9
    83d2:	1989      	adds	r1, r1, r6
    83d4:	3a01      	subs	r2, #1
    83d6:	428e      	cmp	r6, r1
    83d8:	d918      	bls.n	840c <__aeabi_ddiv+0x518>
    83da:	4691      	mov	r9, r2
    83dc:	4281      	cmp	r1, r0
    83de:	d000      	beq.n	83e2 <__aeabi_ddiv+0x4ee>
    83e0:	e761      	b.n	82a6 <__aeabi_ddiv+0x3b2>
    83e2:	9a01      	ldr	r2, [sp, #4]
    83e4:	429a      	cmp	r2, r3
    83e6:	d000      	beq.n	83ea <__aeabi_ddiv+0x4f6>
    83e8:	e75d      	b.n	82a6 <__aeabi_ddiv+0x3b2>
    83ea:	e760      	b.n	82ae <__aeabi_ddiv+0x3ba>
    83ec:	4f4f      	ldr	r7, [pc, #316]	; (852c <__aeabi_ddiv+0x638>)
    83ee:	1b7f      	subs	r7, r7, r5
    83f0:	2f38      	cmp	r7, #56	; 0x38
    83f2:	dd13      	ble.n	841c <__aeabi_ddiv+0x528>
    83f4:	2201      	movs	r2, #1
    83f6:	4653      	mov	r3, sl
    83f8:	401a      	ands	r2, r3
    83fa:	e64f      	b.n	809c <__aeabi_ddiv+0x1a8>
    83fc:	2301      	movs	r3, #1
    83fe:	425b      	negs	r3, r3
    8400:	4699      	mov	r9, r3
    8402:	e754      	b.n	82ae <__aeabi_ddiv+0x3ba>
    8404:	9302      	str	r3, [sp, #8]
    8406:	e708      	b.n	821a <__aeabi_ddiv+0x326>
    8408:	9303      	str	r3, [sp, #12]
    840a:	e727      	b.n	825c <__aeabi_ddiv+0x368>
    840c:	4288      	cmp	r0, r1
    840e:	d83c      	bhi.n	848a <__aeabi_ddiv+0x596>
    8410:	d074      	beq.n	84fc <__aeabi_ddiv+0x608>
    8412:	4691      	mov	r9, r2
    8414:	e747      	b.n	82a6 <__aeabi_ddiv+0x3b2>
    8416:	9b01      	ldr	r3, [sp, #4]
    8418:	469a      	mov	sl, r3
    841a:	e748      	b.n	82ae <__aeabi_ddiv+0x3ba>
    841c:	2f1f      	cmp	r7, #31
    841e:	dc44      	bgt.n	84aa <__aeabi_ddiv+0x5b6>
    8420:	4b43      	ldr	r3, [pc, #268]	; (8530 <__aeabi_ddiv+0x63c>)
    8422:	464a      	mov	r2, r9
    8424:	469c      	mov	ip, r3
    8426:	465b      	mov	r3, fp
    8428:	4465      	add	r5, ip
    842a:	40fa      	lsrs	r2, r7
    842c:	40ab      	lsls	r3, r5
    842e:	4313      	orrs	r3, r2
    8430:	464a      	mov	r2, r9
    8432:	40aa      	lsls	r2, r5
    8434:	1c15      	adds	r5, r2, #0
    8436:	1e6a      	subs	r2, r5, #1
    8438:	4195      	sbcs	r5, r2
    843a:	465a      	mov	r2, fp
    843c:	40fa      	lsrs	r2, r7
    843e:	432b      	orrs	r3, r5
    8440:	1c17      	adds	r7, r2, #0
    8442:	075a      	lsls	r2, r3, #29
    8444:	d009      	beq.n	845a <__aeabi_ddiv+0x566>
    8446:	220f      	movs	r2, #15
    8448:	401a      	ands	r2, r3
    844a:	2a04      	cmp	r2, #4
    844c:	d005      	beq.n	845a <__aeabi_ddiv+0x566>
    844e:	1d1a      	adds	r2, r3, #4
    8450:	429a      	cmp	r2, r3
    8452:	419b      	sbcs	r3, r3
    8454:	425b      	negs	r3, r3
    8456:	18ff      	adds	r7, r7, r3
    8458:	1c13      	adds	r3, r2, #0
    845a:	023a      	lsls	r2, r7, #8
    845c:	d53e      	bpl.n	84dc <__aeabi_ddiv+0x5e8>
    845e:	4653      	mov	r3, sl
    8460:	2201      	movs	r2, #1
    8462:	2100      	movs	r1, #0
    8464:	401a      	ands	r2, r3
    8466:	2700      	movs	r7, #0
    8468:	2301      	movs	r3, #1
    846a:	4689      	mov	r9, r1
    846c:	e5aa      	b.n	7fc4 <__aeabi_ddiv+0xd0>
    846e:	2302      	movs	r3, #2
    8470:	425b      	negs	r3, r3
    8472:	469c      	mov	ip, r3
    8474:	9a01      	ldr	r2, [sp, #4]
    8476:	44e3      	add	fp, ip
    8478:	4694      	mov	ip, r2
    847a:	44e0      	add	r8, ip
    847c:	4590      	cmp	r8, r2
    847e:	419b      	sbcs	r3, r3
    8480:	425b      	negs	r3, r3
    8482:	199b      	adds	r3, r3, r6
    8484:	19df      	adds	r7, r3, r7
    8486:	1b3f      	subs	r7, r7, r4
    8488:	e6a0      	b.n	81cc <__aeabi_ddiv+0x2d8>
    848a:	9f01      	ldr	r7, [sp, #4]
    848c:	464a      	mov	r2, r9
    848e:	007c      	lsls	r4, r7, #1
    8490:	42bc      	cmp	r4, r7
    8492:	41bf      	sbcs	r7, r7
    8494:	427f      	negs	r7, r7
    8496:	19bf      	adds	r7, r7, r6
    8498:	3a02      	subs	r2, #2
    849a:	19c9      	adds	r1, r1, r7
    849c:	9401      	str	r4, [sp, #4]
    849e:	e79c      	b.n	83da <__aeabi_ddiv+0x4e6>
    84a0:	2b00      	cmp	r3, #0
    84a2:	d195      	bne.n	83d0 <__aeabi_ddiv+0x4dc>
    84a4:	2200      	movs	r2, #0
    84a6:	9201      	str	r2, [sp, #4]
    84a8:	e79b      	b.n	83e2 <__aeabi_ddiv+0x4ee>
    84aa:	465a      	mov	r2, fp
    84ac:	4b21      	ldr	r3, [pc, #132]	; (8534 <__aeabi_ddiv+0x640>)
    84ae:	1b5b      	subs	r3, r3, r5
    84b0:	40da      	lsrs	r2, r3
    84b2:	2f20      	cmp	r7, #32
    84b4:	d027      	beq.n	8506 <__aeabi_ddiv+0x612>
    84b6:	4b20      	ldr	r3, [pc, #128]	; (8538 <__aeabi_ddiv+0x644>)
    84b8:	469c      	mov	ip, r3
    84ba:	465b      	mov	r3, fp
    84bc:	4465      	add	r5, ip
    84be:	40ab      	lsls	r3, r5
    84c0:	4649      	mov	r1, r9
    84c2:	430b      	orrs	r3, r1
    84c4:	1e59      	subs	r1, r3, #1
    84c6:	418b      	sbcs	r3, r1
    84c8:	4313      	orrs	r3, r2
    84ca:	2207      	movs	r2, #7
    84cc:	2700      	movs	r7, #0
    84ce:	401a      	ands	r2, r3
    84d0:	d007      	beq.n	84e2 <__aeabi_ddiv+0x5ee>
    84d2:	220f      	movs	r2, #15
    84d4:	2700      	movs	r7, #0
    84d6:	401a      	ands	r2, r3
    84d8:	2a04      	cmp	r2, #4
    84da:	d1b8      	bne.n	844e <__aeabi_ddiv+0x55a>
    84dc:	077a      	lsls	r2, r7, #29
    84de:	027f      	lsls	r7, r7, #9
    84e0:	0b3f      	lsrs	r7, r7, #12
    84e2:	08db      	lsrs	r3, r3, #3
    84e4:	4313      	orrs	r3, r2
    84e6:	4699      	mov	r9, r3
    84e8:	2201      	movs	r2, #1
    84ea:	4653      	mov	r3, sl
    84ec:	401a      	ands	r2, r3
    84ee:	2300      	movs	r3, #0
    84f0:	e568      	b.n	7fc4 <__aeabi_ddiv+0xd0>
    84f2:	4541      	cmp	r1, r8
    84f4:	d8bb      	bhi.n	846e <__aeabi_ddiv+0x57a>
    84f6:	4693      	mov	fp, r2
    84f8:	2700      	movs	r7, #0
    84fa:	e667      	b.n	81cc <__aeabi_ddiv+0x2d8>
    84fc:	9c01      	ldr	r4, [sp, #4]
    84fe:	429c      	cmp	r4, r3
    8500:	d3c3      	bcc.n	848a <__aeabi_ddiv+0x596>
    8502:	4691      	mov	r9, r2
    8504:	e76d      	b.n	83e2 <__aeabi_ddiv+0x4ee>
    8506:	2300      	movs	r3, #0
    8508:	e7da      	b.n	84c0 <__aeabi_ddiv+0x5cc>
    850a:	2780      	movs	r7, #128	; 0x80
    850c:	465b      	mov	r3, fp
    850e:	033f      	lsls	r7, r7, #12
    8510:	431f      	orrs	r7, r3
    8512:	033f      	lsls	r7, r7, #12
    8514:	0b3f      	lsrs	r7, r7, #12
    8516:	9a01      	ldr	r2, [sp, #4]
    8518:	4b03      	ldr	r3, [pc, #12]	; (8528 <__aeabi_ddiv+0x634>)
    851a:	e553      	b.n	7fc4 <__aeabi_ddiv+0xd0>
    851c:	000003ff 	.word	0x000003ff
    8520:	feffffff 	.word	0xfeffffff
    8524:	000007fe 	.word	0x000007fe
    8528:	000007ff 	.word	0x000007ff
    852c:	fffffc02 	.word	0xfffffc02
    8530:	0000041e 	.word	0x0000041e
    8534:	fffffbe2 	.word	0xfffffbe2
    8538:	0000043e 	.word	0x0000043e

0000853c <__eqdf2>:
    853c:	b5f0      	push	{r4, r5, r6, r7, lr}
    853e:	465f      	mov	r7, fp
    8540:	464d      	mov	r5, r9
    8542:	4644      	mov	r4, r8
    8544:	4656      	mov	r6, sl
    8546:	b4f0      	push	{r4, r5, r6, r7}
    8548:	031f      	lsls	r7, r3, #12
    854a:	005c      	lsls	r4, r3, #1
    854c:	0fdb      	lsrs	r3, r3, #31
    854e:	4699      	mov	r9, r3
    8550:	4b1b      	ldr	r3, [pc, #108]	; (85c0 <__eqdf2+0x84>)
    8552:	030e      	lsls	r6, r1, #12
    8554:	004d      	lsls	r5, r1, #1
    8556:	0fc9      	lsrs	r1, r1, #31
    8558:	4684      	mov	ip, r0
    855a:	0b36      	lsrs	r6, r6, #12
    855c:	0d6d      	lsrs	r5, r5, #21
    855e:	468b      	mov	fp, r1
    8560:	4690      	mov	r8, r2
    8562:	0b3f      	lsrs	r7, r7, #12
    8564:	0d64      	lsrs	r4, r4, #21
    8566:	429d      	cmp	r5, r3
    8568:	d00c      	beq.n	8584 <__eqdf2+0x48>
    856a:	4b15      	ldr	r3, [pc, #84]	; (85c0 <__eqdf2+0x84>)
    856c:	429c      	cmp	r4, r3
    856e:	d010      	beq.n	8592 <__eqdf2+0x56>
    8570:	2301      	movs	r3, #1
    8572:	42a5      	cmp	r5, r4
    8574:	d014      	beq.n	85a0 <__eqdf2+0x64>
    8576:	1c18      	adds	r0, r3, #0
    8578:	bc3c      	pop	{r2, r3, r4, r5}
    857a:	4690      	mov	r8, r2
    857c:	4699      	mov	r9, r3
    857e:	46a2      	mov	sl, r4
    8580:	46ab      	mov	fp, r5
    8582:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8584:	1c31      	adds	r1, r6, #0
    8586:	2301      	movs	r3, #1
    8588:	4301      	orrs	r1, r0
    858a:	d1f4      	bne.n	8576 <__eqdf2+0x3a>
    858c:	4b0c      	ldr	r3, [pc, #48]	; (85c0 <__eqdf2+0x84>)
    858e:	429c      	cmp	r4, r3
    8590:	d1ee      	bne.n	8570 <__eqdf2+0x34>
    8592:	433a      	orrs	r2, r7
    8594:	2301      	movs	r3, #1
    8596:	2a00      	cmp	r2, #0
    8598:	d1ed      	bne.n	8576 <__eqdf2+0x3a>
    859a:	2301      	movs	r3, #1
    859c:	42a5      	cmp	r5, r4
    859e:	d1ea      	bne.n	8576 <__eqdf2+0x3a>
    85a0:	42be      	cmp	r6, r7
    85a2:	d1e8      	bne.n	8576 <__eqdf2+0x3a>
    85a4:	45c4      	cmp	ip, r8
    85a6:	d1e6      	bne.n	8576 <__eqdf2+0x3a>
    85a8:	45cb      	cmp	fp, r9
    85aa:	d006      	beq.n	85ba <__eqdf2+0x7e>
    85ac:	2d00      	cmp	r5, #0
    85ae:	d1e2      	bne.n	8576 <__eqdf2+0x3a>
    85b0:	4330      	orrs	r0, r6
    85b2:	1c03      	adds	r3, r0, #0
    85b4:	1e58      	subs	r0, r3, #1
    85b6:	4183      	sbcs	r3, r0
    85b8:	e7dd      	b.n	8576 <__eqdf2+0x3a>
    85ba:	2300      	movs	r3, #0
    85bc:	e7db      	b.n	8576 <__eqdf2+0x3a>
    85be:	46c0      	nop			; (mov r8, r8)
    85c0:	000007ff 	.word	0x000007ff

000085c4 <__gedf2>:
    85c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    85c6:	4657      	mov	r7, sl
    85c8:	4645      	mov	r5, r8
    85ca:	464e      	mov	r6, r9
    85cc:	b4e0      	push	{r5, r6, r7}
    85ce:	030f      	lsls	r7, r1, #12
    85d0:	004e      	lsls	r6, r1, #1
    85d2:	0fc9      	lsrs	r1, r1, #31
    85d4:	468a      	mov	sl, r1
    85d6:	4932      	ldr	r1, [pc, #200]	; (86a0 <__gedf2+0xdc>)
    85d8:	031d      	lsls	r5, r3, #12
    85da:	005c      	lsls	r4, r3, #1
    85dc:	4684      	mov	ip, r0
    85de:	0b3f      	lsrs	r7, r7, #12
    85e0:	0d76      	lsrs	r6, r6, #21
    85e2:	4690      	mov	r8, r2
    85e4:	0b2d      	lsrs	r5, r5, #12
    85e6:	0d64      	lsrs	r4, r4, #21
    85e8:	0fdb      	lsrs	r3, r3, #31
    85ea:	428e      	cmp	r6, r1
    85ec:	d00f      	beq.n	860e <__gedf2+0x4a>
    85ee:	428c      	cmp	r4, r1
    85f0:	d039      	beq.n	8666 <__gedf2+0xa2>
    85f2:	2e00      	cmp	r6, #0
    85f4:	d110      	bne.n	8618 <__gedf2+0x54>
    85f6:	4338      	orrs	r0, r7
    85f8:	4241      	negs	r1, r0
    85fa:	4141      	adcs	r1, r0
    85fc:	4689      	mov	r9, r1
    85fe:	2c00      	cmp	r4, #0
    8600:	d127      	bne.n	8652 <__gedf2+0x8e>
    8602:	432a      	orrs	r2, r5
    8604:	d125      	bne.n	8652 <__gedf2+0x8e>
    8606:	2000      	movs	r0, #0
    8608:	2900      	cmp	r1, #0
    860a:	d10e      	bne.n	862a <__gedf2+0x66>
    860c:	e008      	b.n	8620 <__gedf2+0x5c>
    860e:	1c39      	adds	r1, r7, #0
    8610:	4301      	orrs	r1, r0
    8612:	d12e      	bne.n	8672 <__gedf2+0xae>
    8614:	42b4      	cmp	r4, r6
    8616:	d026      	beq.n	8666 <__gedf2+0xa2>
    8618:	2c00      	cmp	r4, #0
    861a:	d00b      	beq.n	8634 <__gedf2+0x70>
    861c:	459a      	cmp	sl, r3
    861e:	d00d      	beq.n	863c <__gedf2+0x78>
    8620:	4653      	mov	r3, sl
    8622:	4259      	negs	r1, r3
    8624:	2301      	movs	r3, #1
    8626:	4319      	orrs	r1, r3
    8628:	1c08      	adds	r0, r1, #0
    862a:	bc1c      	pop	{r2, r3, r4}
    862c:	4690      	mov	r8, r2
    862e:	4699      	mov	r9, r3
    8630:	46a2      	mov	sl, r4
    8632:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8634:	432a      	orrs	r2, r5
    8636:	d0f3      	beq.n	8620 <__gedf2+0x5c>
    8638:	459a      	cmp	sl, r3
    863a:	d1f1      	bne.n	8620 <__gedf2+0x5c>
    863c:	42a6      	cmp	r6, r4
    863e:	dcef      	bgt.n	8620 <__gedf2+0x5c>
    8640:	da1a      	bge.n	8678 <__gedf2+0xb4>
    8642:	4650      	mov	r0, sl
    8644:	4241      	negs	r1, r0
    8646:	4148      	adcs	r0, r1
    8648:	2301      	movs	r3, #1
    864a:	4241      	negs	r1, r0
    864c:	4319      	orrs	r1, r3
    864e:	1c08      	adds	r0, r1, #0
    8650:	e7eb      	b.n	862a <__gedf2+0x66>
    8652:	464a      	mov	r2, r9
    8654:	2a00      	cmp	r2, #0
    8656:	d0e1      	beq.n	861c <__gedf2+0x58>
    8658:	4258      	negs	r0, r3
    865a:	4158      	adcs	r0, r3
    865c:	2201      	movs	r2, #1
    865e:	4241      	negs	r1, r0
    8660:	4311      	orrs	r1, r2
    8662:	1c08      	adds	r0, r1, #0
    8664:	e7e1      	b.n	862a <__gedf2+0x66>
    8666:	1c29      	adds	r1, r5, #0
    8668:	4311      	orrs	r1, r2
    866a:	d102      	bne.n	8672 <__gedf2+0xae>
    866c:	2e00      	cmp	r6, #0
    866e:	d0c2      	beq.n	85f6 <__gedf2+0x32>
    8670:	e7d4      	b.n	861c <__gedf2+0x58>
    8672:	2002      	movs	r0, #2
    8674:	4240      	negs	r0, r0
    8676:	e7d8      	b.n	862a <__gedf2+0x66>
    8678:	42af      	cmp	r7, r5
    867a:	d8d1      	bhi.n	8620 <__gedf2+0x5c>
    867c:	d009      	beq.n	8692 <__gedf2+0xce>
    867e:	2000      	movs	r0, #0
    8680:	42af      	cmp	r7, r5
    8682:	d2d2      	bcs.n	862a <__gedf2+0x66>
    8684:	4650      	mov	r0, sl
    8686:	4241      	negs	r1, r0
    8688:	4148      	adcs	r0, r1
    868a:	2301      	movs	r3, #1
    868c:	4240      	negs	r0, r0
    868e:	4318      	orrs	r0, r3
    8690:	e7cb      	b.n	862a <__gedf2+0x66>
    8692:	45c4      	cmp	ip, r8
    8694:	d8c4      	bhi.n	8620 <__gedf2+0x5c>
    8696:	2000      	movs	r0, #0
    8698:	45c4      	cmp	ip, r8
    869a:	d3f3      	bcc.n	8684 <__gedf2+0xc0>
    869c:	e7c5      	b.n	862a <__gedf2+0x66>
    869e:	46c0      	nop			; (mov r8, r8)
    86a0:	000007ff 	.word	0x000007ff

000086a4 <__ledf2>:
    86a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    86a6:	465f      	mov	r7, fp
    86a8:	464d      	mov	r5, r9
    86aa:	4644      	mov	r4, r8
    86ac:	4656      	mov	r6, sl
    86ae:	4680      	mov	r8, r0
    86b0:	b4f0      	push	{r4, r5, r6, r7}
    86b2:	1c06      	adds	r6, r0, #0
    86b4:	0308      	lsls	r0, r1, #12
    86b6:	0b00      	lsrs	r0, r0, #12
    86b8:	4684      	mov	ip, r0
    86ba:	482c      	ldr	r0, [pc, #176]	; (876c <__ledf2+0xc8>)
    86bc:	004c      	lsls	r4, r1, #1
    86be:	031f      	lsls	r7, r3, #12
    86c0:	005d      	lsls	r5, r3, #1
    86c2:	0fc9      	lsrs	r1, r1, #31
    86c4:	0d64      	lsrs	r4, r4, #21
    86c6:	468b      	mov	fp, r1
    86c8:	4691      	mov	r9, r2
    86ca:	0b3f      	lsrs	r7, r7, #12
    86cc:	0d6d      	lsrs	r5, r5, #21
    86ce:	0fdb      	lsrs	r3, r3, #31
    86d0:	4284      	cmp	r4, r0
    86d2:	d012      	beq.n	86fa <__ledf2+0x56>
    86d4:	4285      	cmp	r5, r0
    86d6:	d025      	beq.n	8724 <__ledf2+0x80>
    86d8:	2c00      	cmp	r4, #0
    86da:	d114      	bne.n	8706 <__ledf2+0x62>
    86dc:	4661      	mov	r1, ip
    86de:	430e      	orrs	r6, r1
    86e0:	4270      	negs	r0, r6
    86e2:	4146      	adcs	r6, r0
    86e4:	2d00      	cmp	r5, #0
    86e6:	d035      	beq.n	8754 <__ledf2+0xb0>
    86e8:	2e00      	cmp	r6, #0
    86ea:	d021      	beq.n	8730 <__ledf2+0x8c>
    86ec:	4258      	negs	r0, r3
    86ee:	4158      	adcs	r0, r3
    86f0:	2101      	movs	r1, #1
    86f2:	4243      	negs	r3, r0
    86f4:	430b      	orrs	r3, r1
    86f6:	1c18      	adds	r0, r3, #0
    86f8:	e00e      	b.n	8718 <__ledf2+0x74>
    86fa:	4661      	mov	r1, ip
    86fc:	2002      	movs	r0, #2
    86fe:	4331      	orrs	r1, r6
    8700:	d10a      	bne.n	8718 <__ledf2+0x74>
    8702:	42a5      	cmp	r5, r4
    8704:	d00e      	beq.n	8724 <__ledf2+0x80>
    8706:	2d00      	cmp	r5, #0
    8708:	d112      	bne.n	8730 <__ledf2+0x8c>
    870a:	433a      	orrs	r2, r7
    870c:	d110      	bne.n	8730 <__ledf2+0x8c>
    870e:	465b      	mov	r3, fp
    8710:	4259      	negs	r1, r3
    8712:	2301      	movs	r3, #1
    8714:	4319      	orrs	r1, r3
    8716:	1c08      	adds	r0, r1, #0
    8718:	bc3c      	pop	{r2, r3, r4, r5}
    871a:	4690      	mov	r8, r2
    871c:	4699      	mov	r9, r3
    871e:	46a2      	mov	sl, r4
    8720:	46ab      	mov	fp, r5
    8722:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8724:	1c39      	adds	r1, r7, #0
    8726:	2002      	movs	r0, #2
    8728:	4311      	orrs	r1, r2
    872a:	d1f5      	bne.n	8718 <__ledf2+0x74>
    872c:	2c00      	cmp	r4, #0
    872e:	d0d5      	beq.n	86dc <__ledf2+0x38>
    8730:	459b      	cmp	fp, r3
    8732:	d1ec      	bne.n	870e <__ledf2+0x6a>
    8734:	42ac      	cmp	r4, r5
    8736:	dcea      	bgt.n	870e <__ledf2+0x6a>
    8738:	db05      	blt.n	8746 <__ledf2+0xa2>
    873a:	45bc      	cmp	ip, r7
    873c:	d8e7      	bhi.n	870e <__ledf2+0x6a>
    873e:	d00f      	beq.n	8760 <__ledf2+0xbc>
    8740:	2000      	movs	r0, #0
    8742:	45bc      	cmp	ip, r7
    8744:	d2e8      	bcs.n	8718 <__ledf2+0x74>
    8746:	4658      	mov	r0, fp
    8748:	4241      	negs	r1, r0
    874a:	4148      	adcs	r0, r1
    874c:	4241      	negs	r1, r0
    874e:	2001      	movs	r0, #1
    8750:	4308      	orrs	r0, r1
    8752:	e7e1      	b.n	8718 <__ledf2+0x74>
    8754:	433a      	orrs	r2, r7
    8756:	d1c7      	bne.n	86e8 <__ledf2+0x44>
    8758:	2000      	movs	r0, #0
    875a:	2e00      	cmp	r6, #0
    875c:	d1dc      	bne.n	8718 <__ledf2+0x74>
    875e:	e7d6      	b.n	870e <__ledf2+0x6a>
    8760:	45c8      	cmp	r8, r9
    8762:	d8d4      	bhi.n	870e <__ledf2+0x6a>
    8764:	2000      	movs	r0, #0
    8766:	45c8      	cmp	r8, r9
    8768:	d3ed      	bcc.n	8746 <__ledf2+0xa2>
    876a:	e7d5      	b.n	8718 <__ledf2+0x74>
    876c:	000007ff 	.word	0x000007ff

00008770 <__aeabi_dmul>:
    8770:	b5f0      	push	{r4, r5, r6, r7, lr}
    8772:	465f      	mov	r7, fp
    8774:	4656      	mov	r6, sl
    8776:	464d      	mov	r5, r9
    8778:	4644      	mov	r4, r8
    877a:	b4f0      	push	{r4, r5, r6, r7}
    877c:	1c05      	adds	r5, r0, #0
    877e:	1c06      	adds	r6, r0, #0
    8780:	0308      	lsls	r0, r1, #12
    8782:	b087      	sub	sp, #28
    8784:	4699      	mov	r9, r3
    8786:	004f      	lsls	r7, r1, #1
    8788:	0b03      	lsrs	r3, r0, #12
    878a:	0fcc      	lsrs	r4, r1, #31
    878c:	4692      	mov	sl, r2
    878e:	469b      	mov	fp, r3
    8790:	0d7f      	lsrs	r7, r7, #21
    8792:	9401      	str	r4, [sp, #4]
    8794:	d067      	beq.n	8866 <__aeabi_dmul+0xf6>
    8796:	4b6c      	ldr	r3, [pc, #432]	; (8948 <__aeabi_dmul+0x1d8>)
    8798:	429f      	cmp	r7, r3
    879a:	d036      	beq.n	880a <__aeabi_dmul+0x9a>
    879c:	2080      	movs	r0, #128	; 0x80
    879e:	465b      	mov	r3, fp
    87a0:	0340      	lsls	r0, r0, #13
    87a2:	4318      	orrs	r0, r3
    87a4:	00c0      	lsls	r0, r0, #3
    87a6:	0f6b      	lsrs	r3, r5, #29
    87a8:	4318      	orrs	r0, r3
    87aa:	4b68      	ldr	r3, [pc, #416]	; (894c <__aeabi_dmul+0x1dc>)
    87ac:	4683      	mov	fp, r0
    87ae:	469c      	mov	ip, r3
    87b0:	2300      	movs	r3, #0
    87b2:	4698      	mov	r8, r3
    87b4:	00ee      	lsls	r6, r5, #3
    87b6:	4467      	add	r7, ip
    87b8:	9300      	str	r3, [sp, #0]
    87ba:	464b      	mov	r3, r9
    87bc:	4649      	mov	r1, r9
    87be:	031d      	lsls	r5, r3, #12
    87c0:	0fc9      	lsrs	r1, r1, #31
    87c2:	005b      	lsls	r3, r3, #1
    87c4:	4652      	mov	r2, sl
    87c6:	0b2d      	lsrs	r5, r5, #12
    87c8:	0d5b      	lsrs	r3, r3, #21
    87ca:	4689      	mov	r9, r1
    87cc:	d100      	bne.n	87d0 <__aeabi_dmul+0x60>
    87ce:	e06e      	b.n	88ae <__aeabi_dmul+0x13e>
    87d0:	495d      	ldr	r1, [pc, #372]	; (8948 <__aeabi_dmul+0x1d8>)
    87d2:	428b      	cmp	r3, r1
    87d4:	d064      	beq.n	88a0 <__aeabi_dmul+0x130>
    87d6:	2080      	movs	r0, #128	; 0x80
    87d8:	495c      	ldr	r1, [pc, #368]	; (894c <__aeabi_dmul+0x1dc>)
    87da:	0340      	lsls	r0, r0, #13
    87dc:	468c      	mov	ip, r1
    87de:	2100      	movs	r1, #0
    87e0:	4305      	orrs	r5, r0
    87e2:	00ed      	lsls	r5, r5, #3
    87e4:	0f50      	lsrs	r0, r2, #29
    87e6:	4305      	orrs	r5, r0
    87e8:	00d2      	lsls	r2, r2, #3
    87ea:	4463      	add	r3, ip
    87ec:	4648      	mov	r0, r9
    87ee:	18ff      	adds	r7, r7, r3
    87f0:	1c7b      	adds	r3, r7, #1
    87f2:	469a      	mov	sl, r3
    87f4:	9b00      	ldr	r3, [sp, #0]
    87f6:	4060      	eors	r0, r4
    87f8:	9002      	str	r0, [sp, #8]
    87fa:	430b      	orrs	r3, r1
    87fc:	2b0f      	cmp	r3, #15
    87fe:	d900      	bls.n	8802 <__aeabi_dmul+0x92>
    8800:	e0ac      	b.n	895c <__aeabi_dmul+0x1ec>
    8802:	4853      	ldr	r0, [pc, #332]	; (8950 <__aeabi_dmul+0x1e0>)
    8804:	009b      	lsls	r3, r3, #2
    8806:	58c3      	ldr	r3, [r0, r3]
    8808:	469f      	mov	pc, r3
    880a:	465b      	mov	r3, fp
    880c:	431d      	orrs	r5, r3
    880e:	d000      	beq.n	8812 <__aeabi_dmul+0xa2>
    8810:	e082      	b.n	8918 <__aeabi_dmul+0x1a8>
    8812:	2308      	movs	r3, #8
    8814:	9300      	str	r3, [sp, #0]
    8816:	2300      	movs	r3, #0
    8818:	469b      	mov	fp, r3
    881a:	3302      	adds	r3, #2
    881c:	2600      	movs	r6, #0
    881e:	4698      	mov	r8, r3
    8820:	e7cb      	b.n	87ba <__aeabi_dmul+0x4a>
    8822:	9b02      	ldr	r3, [sp, #8]
    8824:	9301      	str	r3, [sp, #4]
    8826:	4643      	mov	r3, r8
    8828:	2b02      	cmp	r3, #2
    882a:	d159      	bne.n	88e0 <__aeabi_dmul+0x170>
    882c:	2401      	movs	r4, #1
    882e:	2500      	movs	r5, #0
    8830:	2600      	movs	r6, #0
    8832:	9b01      	ldr	r3, [sp, #4]
    8834:	401c      	ands	r4, r3
    8836:	4b44      	ldr	r3, [pc, #272]	; (8948 <__aeabi_dmul+0x1d8>)
    8838:	2100      	movs	r1, #0
    883a:	032d      	lsls	r5, r5, #12
    883c:	0d0a      	lsrs	r2, r1, #20
    883e:	0512      	lsls	r2, r2, #20
    8840:	0b2d      	lsrs	r5, r5, #12
    8842:	4315      	orrs	r5, r2
    8844:	4a43      	ldr	r2, [pc, #268]	; (8954 <__aeabi_dmul+0x1e4>)
    8846:	051b      	lsls	r3, r3, #20
    8848:	4015      	ands	r5, r2
    884a:	431d      	orrs	r5, r3
    884c:	006d      	lsls	r5, r5, #1
    884e:	07e4      	lsls	r4, r4, #31
    8850:	086d      	lsrs	r5, r5, #1
    8852:	4325      	orrs	r5, r4
    8854:	1c30      	adds	r0, r6, #0
    8856:	1c29      	adds	r1, r5, #0
    8858:	b007      	add	sp, #28
    885a:	bc3c      	pop	{r2, r3, r4, r5}
    885c:	4690      	mov	r8, r2
    885e:	4699      	mov	r9, r3
    8860:	46a2      	mov	sl, r4
    8862:	46ab      	mov	fp, r5
    8864:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8866:	432b      	orrs	r3, r5
    8868:	d04e      	beq.n	8908 <__aeabi_dmul+0x198>
    886a:	465b      	mov	r3, fp
    886c:	2b00      	cmp	r3, #0
    886e:	d100      	bne.n	8872 <__aeabi_dmul+0x102>
    8870:	e185      	b.n	8b7e <__aeabi_dmul+0x40e>
    8872:	4658      	mov	r0, fp
    8874:	f000 ff18 	bl	96a8 <__clzsi2>
    8878:	1c02      	adds	r2, r0, #0
    887a:	2328      	movs	r3, #40	; 0x28
    887c:	1c29      	adds	r1, r5, #0
    887e:	1a9b      	subs	r3, r3, r2
    8880:	1c16      	adds	r6, r2, #0
    8882:	4658      	mov	r0, fp
    8884:	40d9      	lsrs	r1, r3
    8886:	3e08      	subs	r6, #8
    8888:	40b0      	lsls	r0, r6
    888a:	1c0b      	adds	r3, r1, #0
    888c:	40b5      	lsls	r5, r6
    888e:	4303      	orrs	r3, r0
    8890:	469b      	mov	fp, r3
    8892:	1c2e      	adds	r6, r5, #0
    8894:	2300      	movs	r3, #0
    8896:	4f30      	ldr	r7, [pc, #192]	; (8958 <__aeabi_dmul+0x1e8>)
    8898:	9300      	str	r3, [sp, #0]
    889a:	1abf      	subs	r7, r7, r2
    889c:	4698      	mov	r8, r3
    889e:	e78c      	b.n	87ba <__aeabi_dmul+0x4a>
    88a0:	4651      	mov	r1, sl
    88a2:	4329      	orrs	r1, r5
    88a4:	d12e      	bne.n	8904 <__aeabi_dmul+0x194>
    88a6:	2500      	movs	r5, #0
    88a8:	2200      	movs	r2, #0
    88aa:	2102      	movs	r1, #2
    88ac:	e79e      	b.n	87ec <__aeabi_dmul+0x7c>
    88ae:	4651      	mov	r1, sl
    88b0:	4329      	orrs	r1, r5
    88b2:	d023      	beq.n	88fc <__aeabi_dmul+0x18c>
    88b4:	2d00      	cmp	r5, #0
    88b6:	d100      	bne.n	88ba <__aeabi_dmul+0x14a>
    88b8:	e154      	b.n	8b64 <__aeabi_dmul+0x3f4>
    88ba:	1c28      	adds	r0, r5, #0
    88bc:	f000 fef4 	bl	96a8 <__clzsi2>
    88c0:	1c03      	adds	r3, r0, #0
    88c2:	2128      	movs	r1, #40	; 0x28
    88c4:	4650      	mov	r0, sl
    88c6:	1ac9      	subs	r1, r1, r3
    88c8:	1c1a      	adds	r2, r3, #0
    88ca:	40c8      	lsrs	r0, r1
    88cc:	4651      	mov	r1, sl
    88ce:	3a08      	subs	r2, #8
    88d0:	4091      	lsls	r1, r2
    88d2:	4095      	lsls	r5, r2
    88d4:	1c0a      	adds	r2, r1, #0
    88d6:	4305      	orrs	r5, r0
    88d8:	481f      	ldr	r0, [pc, #124]	; (8958 <__aeabi_dmul+0x1e8>)
    88da:	2100      	movs	r1, #0
    88dc:	1ac3      	subs	r3, r0, r3
    88de:	e785      	b.n	87ec <__aeabi_dmul+0x7c>
    88e0:	2b03      	cmp	r3, #3
    88e2:	d100      	bne.n	88e6 <__aeabi_dmul+0x176>
    88e4:	e1c2      	b.n	8c6c <__aeabi_dmul+0x4fc>
    88e6:	2b01      	cmp	r3, #1
    88e8:	d000      	beq.n	88ec <__aeabi_dmul+0x17c>
    88ea:	e16d      	b.n	8bc8 <__aeabi_dmul+0x458>
    88ec:	4644      	mov	r4, r8
    88ee:	9b01      	ldr	r3, [sp, #4]
    88f0:	2500      	movs	r5, #0
    88f2:	401c      	ands	r4, r3
    88f4:	b2e4      	uxtb	r4, r4
    88f6:	2300      	movs	r3, #0
    88f8:	2600      	movs	r6, #0
    88fa:	e79d      	b.n	8838 <__aeabi_dmul+0xc8>
    88fc:	2500      	movs	r5, #0
    88fe:	2200      	movs	r2, #0
    8900:	2101      	movs	r1, #1
    8902:	e773      	b.n	87ec <__aeabi_dmul+0x7c>
    8904:	2103      	movs	r1, #3
    8906:	e771      	b.n	87ec <__aeabi_dmul+0x7c>
    8908:	2304      	movs	r3, #4
    890a:	9300      	str	r3, [sp, #0]
    890c:	2300      	movs	r3, #0
    890e:	469b      	mov	fp, r3
    8910:	3301      	adds	r3, #1
    8912:	2600      	movs	r6, #0
    8914:	4698      	mov	r8, r3
    8916:	e750      	b.n	87ba <__aeabi_dmul+0x4a>
    8918:	230c      	movs	r3, #12
    891a:	9300      	str	r3, [sp, #0]
    891c:	3b09      	subs	r3, #9
    891e:	4698      	mov	r8, r3
    8920:	e74b      	b.n	87ba <__aeabi_dmul+0x4a>
    8922:	2580      	movs	r5, #128	; 0x80
    8924:	2400      	movs	r4, #0
    8926:	032d      	lsls	r5, r5, #12
    8928:	2600      	movs	r6, #0
    892a:	4b07      	ldr	r3, [pc, #28]	; (8948 <__aeabi_dmul+0x1d8>)
    892c:	e784      	b.n	8838 <__aeabi_dmul+0xc8>
    892e:	464b      	mov	r3, r9
    8930:	46ab      	mov	fp, r5
    8932:	1c16      	adds	r6, r2, #0
    8934:	9301      	str	r3, [sp, #4]
    8936:	4688      	mov	r8, r1
    8938:	e775      	b.n	8826 <__aeabi_dmul+0xb6>
    893a:	9b02      	ldr	r3, [sp, #8]
    893c:	46ab      	mov	fp, r5
    893e:	1c16      	adds	r6, r2, #0
    8940:	9301      	str	r3, [sp, #4]
    8942:	4688      	mov	r8, r1
    8944:	e76f      	b.n	8826 <__aeabi_dmul+0xb6>
    8946:	46c0      	nop			; (mov r8, r8)
    8948:	000007ff 	.word	0x000007ff
    894c:	fffffc01 	.word	0xfffffc01
    8950:	0000f9a8 	.word	0x0000f9a8
    8954:	800fffff 	.word	0x800fffff
    8958:	fffffc0d 	.word	0xfffffc0d
    895c:	0c33      	lsrs	r3, r6, #16
    895e:	0436      	lsls	r6, r6, #16
    8960:	0c36      	lsrs	r6, r6, #16
    8962:	469c      	mov	ip, r3
    8964:	1c33      	adds	r3, r6, #0
    8966:	0c14      	lsrs	r4, r2, #16
    8968:	0412      	lsls	r2, r2, #16
    896a:	0c12      	lsrs	r2, r2, #16
    896c:	4353      	muls	r3, r2
    896e:	4698      	mov	r8, r3
    8970:	4663      	mov	r3, ip
    8972:	4353      	muls	r3, r2
    8974:	4699      	mov	r9, r3
    8976:	4663      	mov	r3, ip
    8978:	4363      	muls	r3, r4
    897a:	9301      	str	r3, [sp, #4]
    897c:	1c33      	adds	r3, r6, #0
    897e:	4641      	mov	r1, r8
    8980:	4363      	muls	r3, r4
    8982:	0c09      	lsrs	r1, r1, #16
    8984:	444b      	add	r3, r9
    8986:	185b      	adds	r3, r3, r1
    8988:	4599      	cmp	r9, r3
    898a:	d905      	bls.n	8998 <__aeabi_dmul+0x228>
    898c:	2080      	movs	r0, #128	; 0x80
    898e:	0240      	lsls	r0, r0, #9
    8990:	4681      	mov	r9, r0
    8992:	9901      	ldr	r1, [sp, #4]
    8994:	4449      	add	r1, r9
    8996:	9101      	str	r1, [sp, #4]
    8998:	0c19      	lsrs	r1, r3, #16
    899a:	9103      	str	r1, [sp, #12]
    899c:	4641      	mov	r1, r8
    899e:	0409      	lsls	r1, r1, #16
    89a0:	0c09      	lsrs	r1, r1, #16
    89a2:	041b      	lsls	r3, r3, #16
    89a4:	185b      	adds	r3, r3, r1
    89a6:	9304      	str	r3, [sp, #16]
    89a8:	0c2b      	lsrs	r3, r5, #16
    89aa:	4698      	mov	r8, r3
    89ac:	1c33      	adds	r3, r6, #0
    89ae:	042d      	lsls	r5, r5, #16
    89b0:	0c29      	lsrs	r1, r5, #16
    89b2:	434b      	muls	r3, r1
    89b4:	4660      	mov	r0, ip
    89b6:	9300      	str	r3, [sp, #0]
    89b8:	4643      	mov	r3, r8
    89ba:	4665      	mov	r5, ip
    89bc:	4358      	muls	r0, r3
    89be:	435e      	muls	r6, r3
    89c0:	9b00      	ldr	r3, [sp, #0]
    89c2:	434d      	muls	r5, r1
    89c4:	0c1b      	lsrs	r3, r3, #16
    89c6:	4699      	mov	r9, r3
    89c8:	19ae      	adds	r6, r5, r6
    89ca:	444e      	add	r6, r9
    89cc:	4684      	mov	ip, r0
    89ce:	42b5      	cmp	r5, r6
    89d0:	d903      	bls.n	89da <__aeabi_dmul+0x26a>
    89d2:	2380      	movs	r3, #128	; 0x80
    89d4:	025b      	lsls	r3, r3, #9
    89d6:	4699      	mov	r9, r3
    89d8:	44cc      	add	ip, r9
    89da:	0c35      	lsrs	r5, r6, #16
    89dc:	1c2b      	adds	r3, r5, #0
    89de:	9803      	ldr	r0, [sp, #12]
    89e0:	4463      	add	r3, ip
    89e2:	4684      	mov	ip, r0
    89e4:	9305      	str	r3, [sp, #20]
    89e6:	9b00      	ldr	r3, [sp, #0]
    89e8:	0436      	lsls	r6, r6, #16
    89ea:	041b      	lsls	r3, r3, #16
    89ec:	0c1b      	lsrs	r3, r3, #16
    89ee:	18f3      	adds	r3, r6, r3
    89f0:	449c      	add	ip, r3
    89f2:	4660      	mov	r0, ip
    89f4:	9003      	str	r0, [sp, #12]
    89f6:	4658      	mov	r0, fp
    89f8:	0405      	lsls	r5, r0, #16
    89fa:	0c06      	lsrs	r6, r0, #16
    89fc:	0c28      	lsrs	r0, r5, #16
    89fe:	4684      	mov	ip, r0
    8a00:	4350      	muls	r0, r2
    8a02:	1c35      	adds	r5, r6, #0
    8a04:	4681      	mov	r9, r0
    8a06:	4660      	mov	r0, ip
    8a08:	4365      	muls	r5, r4
    8a0a:	4344      	muls	r4, r0
    8a0c:	4648      	mov	r0, r9
    8a0e:	0c00      	lsrs	r0, r0, #16
    8a10:	4683      	mov	fp, r0
    8a12:	4372      	muls	r2, r6
    8a14:	1914      	adds	r4, r2, r4
    8a16:	445c      	add	r4, fp
    8a18:	42a2      	cmp	r2, r4
    8a1a:	d903      	bls.n	8a24 <__aeabi_dmul+0x2b4>
    8a1c:	2280      	movs	r2, #128	; 0x80
    8a1e:	0252      	lsls	r2, r2, #9
    8a20:	4693      	mov	fp, r2
    8a22:	445d      	add	r5, fp
    8a24:	0c22      	lsrs	r2, r4, #16
    8a26:	18ad      	adds	r5, r5, r2
    8a28:	464a      	mov	r2, r9
    8a2a:	0412      	lsls	r2, r2, #16
    8a2c:	0c12      	lsrs	r2, r2, #16
    8a2e:	0424      	lsls	r4, r4, #16
    8a30:	4640      	mov	r0, r8
    8a32:	18a4      	adds	r4, r4, r2
    8a34:	4662      	mov	r2, ip
    8a36:	434a      	muls	r2, r1
    8a38:	4371      	muls	r1, r6
    8a3a:	4346      	muls	r6, r0
    8a3c:	4660      	mov	r0, ip
    8a3e:	9600      	str	r6, [sp, #0]
    8a40:	4646      	mov	r6, r8
    8a42:	4370      	muls	r0, r6
    8a44:	4680      	mov	r8, r0
    8a46:	0c10      	lsrs	r0, r2, #16
    8a48:	4684      	mov	ip, r0
    8a4a:	4488      	add	r8, r1
    8a4c:	44e0      	add	r8, ip
    8a4e:	4541      	cmp	r1, r8
    8a50:	d905      	bls.n	8a5e <__aeabi_dmul+0x2ee>
    8a52:	2180      	movs	r1, #128	; 0x80
    8a54:	0249      	lsls	r1, r1, #9
    8a56:	468c      	mov	ip, r1
    8a58:	9900      	ldr	r1, [sp, #0]
    8a5a:	4461      	add	r1, ip
    8a5c:	9100      	str	r1, [sp, #0]
    8a5e:	9801      	ldr	r0, [sp, #4]
    8a60:	9903      	ldr	r1, [sp, #12]
    8a62:	4684      	mov	ip, r0
    8a64:	4461      	add	r1, ip
    8a66:	4299      	cmp	r1, r3
    8a68:	419b      	sbcs	r3, r3
    8a6a:	425b      	negs	r3, r3
    8a6c:	4699      	mov	r9, r3
    8a6e:	9805      	ldr	r0, [sp, #20]
    8a70:	4643      	mov	r3, r8
    8a72:	4684      	mov	ip, r0
    8a74:	0412      	lsls	r2, r2, #16
    8a76:	0c12      	lsrs	r2, r2, #16
    8a78:	041b      	lsls	r3, r3, #16
    8a7a:	189b      	adds	r3, r3, r2
    8a7c:	4463      	add	r3, ip
    8a7e:	469c      	mov	ip, r3
    8a80:	46ab      	mov	fp, r5
    8a82:	4283      	cmp	r3, r0
    8a84:	419b      	sbcs	r3, r3
    8a86:	4640      	mov	r0, r8
    8a88:	190a      	adds	r2, r1, r4
    8a8a:	44cc      	add	ip, r9
    8a8c:	42a2      	cmp	r2, r4
    8a8e:	4189      	sbcs	r1, r1
    8a90:	44e3      	add	fp, ip
    8a92:	45cc      	cmp	ip, r9
    8a94:	41b6      	sbcs	r6, r6
    8a96:	465c      	mov	r4, fp
    8a98:	0c00      	lsrs	r0, r0, #16
    8a9a:	4680      	mov	r8, r0
    8a9c:	4249      	negs	r1, r1
    8a9e:	4276      	negs	r6, r6
    8aa0:	425b      	negs	r3, r3
    8aa2:	1864      	adds	r4, r4, r1
    8aa4:	4333      	orrs	r3, r6
    8aa6:	4498      	add	r8, r3
    8aa8:	428c      	cmp	r4, r1
    8aaa:	4189      	sbcs	r1, r1
    8aac:	45ab      	cmp	fp, r5
    8aae:	419b      	sbcs	r3, r3
    8ab0:	4249      	negs	r1, r1
    8ab2:	425b      	negs	r3, r3
    8ab4:	4319      	orrs	r1, r3
    8ab6:	1c0d      	adds	r5, r1, #0
    8ab8:	9b00      	ldr	r3, [sp, #0]
    8aba:	4445      	add	r5, r8
    8abc:	18ee      	adds	r6, r5, r3
    8abe:	0276      	lsls	r6, r6, #9
    8ac0:	0de5      	lsrs	r5, r4, #23
    8ac2:	432e      	orrs	r6, r5
    8ac4:	46b3      	mov	fp, r6
    8ac6:	9b04      	ldr	r3, [sp, #16]
    8ac8:	0256      	lsls	r6, r2, #9
    8aca:	431e      	orrs	r6, r3
    8acc:	1e73      	subs	r3, r6, #1
    8ace:	419e      	sbcs	r6, r3
    8ad0:	465b      	mov	r3, fp
    8ad2:	0dd2      	lsrs	r2, r2, #23
    8ad4:	4332      	orrs	r2, r6
    8ad6:	0266      	lsls	r6, r4, #9
    8ad8:	4316      	orrs	r6, r2
    8ada:	01db      	lsls	r3, r3, #7
    8adc:	d50a      	bpl.n	8af4 <__aeabi_dmul+0x384>
    8ade:	2301      	movs	r3, #1
    8ae0:	4033      	ands	r3, r6
    8ae2:	0876      	lsrs	r6, r6, #1
    8ae4:	431e      	orrs	r6, r3
    8ae6:	465b      	mov	r3, fp
    8ae8:	07db      	lsls	r3, r3, #31
    8aea:	431e      	orrs	r6, r3
    8aec:	465b      	mov	r3, fp
    8aee:	085b      	lsrs	r3, r3, #1
    8af0:	469b      	mov	fp, r3
    8af2:	4657      	mov	r7, sl
    8af4:	4b63      	ldr	r3, [pc, #396]	; (8c84 <__aeabi_dmul+0x514>)
    8af6:	18fb      	adds	r3, r7, r3
    8af8:	2b00      	cmp	r3, #0
    8afa:	dd5a      	ble.n	8bb2 <__aeabi_dmul+0x442>
    8afc:	0772      	lsls	r2, r6, #29
    8afe:	d009      	beq.n	8b14 <__aeabi_dmul+0x3a4>
    8b00:	220f      	movs	r2, #15
    8b02:	4032      	ands	r2, r6
    8b04:	2a04      	cmp	r2, #4
    8b06:	d005      	beq.n	8b14 <__aeabi_dmul+0x3a4>
    8b08:	1d32      	adds	r2, r6, #4
    8b0a:	42b2      	cmp	r2, r6
    8b0c:	41b6      	sbcs	r6, r6
    8b0e:	4276      	negs	r6, r6
    8b10:	44b3      	add	fp, r6
    8b12:	1c16      	adds	r6, r2, #0
    8b14:	465a      	mov	r2, fp
    8b16:	01d2      	lsls	r2, r2, #7
    8b18:	d506      	bpl.n	8b28 <__aeabi_dmul+0x3b8>
    8b1a:	465a      	mov	r2, fp
    8b1c:	4b5a      	ldr	r3, [pc, #360]	; (8c88 <__aeabi_dmul+0x518>)
    8b1e:	401a      	ands	r2, r3
    8b20:	2380      	movs	r3, #128	; 0x80
    8b22:	4693      	mov	fp, r2
    8b24:	00db      	lsls	r3, r3, #3
    8b26:	18fb      	adds	r3, r7, r3
    8b28:	4a58      	ldr	r2, [pc, #352]	; (8c8c <__aeabi_dmul+0x51c>)
    8b2a:	4293      	cmp	r3, r2
    8b2c:	dd34      	ble.n	8b98 <__aeabi_dmul+0x428>
    8b2e:	2401      	movs	r4, #1
    8b30:	9b02      	ldr	r3, [sp, #8]
    8b32:	2500      	movs	r5, #0
    8b34:	401c      	ands	r4, r3
    8b36:	2600      	movs	r6, #0
    8b38:	4b55      	ldr	r3, [pc, #340]	; (8c90 <__aeabi_dmul+0x520>)
    8b3a:	e67d      	b.n	8838 <__aeabi_dmul+0xc8>
    8b3c:	2080      	movs	r0, #128	; 0x80
    8b3e:	465b      	mov	r3, fp
    8b40:	0300      	lsls	r0, r0, #12
    8b42:	4203      	tst	r3, r0
    8b44:	d008      	beq.n	8b58 <__aeabi_dmul+0x3e8>
    8b46:	4205      	tst	r5, r0
    8b48:	d106      	bne.n	8b58 <__aeabi_dmul+0x3e8>
    8b4a:	4305      	orrs	r5, r0
    8b4c:	032d      	lsls	r5, r5, #12
    8b4e:	0b2d      	lsrs	r5, r5, #12
    8b50:	464c      	mov	r4, r9
    8b52:	1c16      	adds	r6, r2, #0
    8b54:	4b4e      	ldr	r3, [pc, #312]	; (8c90 <__aeabi_dmul+0x520>)
    8b56:	e66f      	b.n	8838 <__aeabi_dmul+0xc8>
    8b58:	465d      	mov	r5, fp
    8b5a:	4305      	orrs	r5, r0
    8b5c:	032d      	lsls	r5, r5, #12
    8b5e:	0b2d      	lsrs	r5, r5, #12
    8b60:	4b4b      	ldr	r3, [pc, #300]	; (8c90 <__aeabi_dmul+0x520>)
    8b62:	e669      	b.n	8838 <__aeabi_dmul+0xc8>
    8b64:	4650      	mov	r0, sl
    8b66:	f000 fd9f 	bl	96a8 <__clzsi2>
    8b6a:	1c03      	adds	r3, r0, #0
    8b6c:	3320      	adds	r3, #32
    8b6e:	2b27      	cmp	r3, #39	; 0x27
    8b70:	dc00      	bgt.n	8b74 <__aeabi_dmul+0x404>
    8b72:	e6a6      	b.n	88c2 <__aeabi_dmul+0x152>
    8b74:	4655      	mov	r5, sl
    8b76:	3808      	subs	r0, #8
    8b78:	4085      	lsls	r5, r0
    8b7a:	2200      	movs	r2, #0
    8b7c:	e6ac      	b.n	88d8 <__aeabi_dmul+0x168>
    8b7e:	1c28      	adds	r0, r5, #0
    8b80:	f000 fd92 	bl	96a8 <__clzsi2>
    8b84:	1c02      	adds	r2, r0, #0
    8b86:	3220      	adds	r2, #32
    8b88:	2a27      	cmp	r2, #39	; 0x27
    8b8a:	dc00      	bgt.n	8b8e <__aeabi_dmul+0x41e>
    8b8c:	e675      	b.n	887a <__aeabi_dmul+0x10a>
    8b8e:	3808      	subs	r0, #8
    8b90:	4085      	lsls	r5, r0
    8b92:	2600      	movs	r6, #0
    8b94:	46ab      	mov	fp, r5
    8b96:	e67d      	b.n	8894 <__aeabi_dmul+0x124>
    8b98:	465a      	mov	r2, fp
    8b9a:	08f6      	lsrs	r6, r6, #3
    8b9c:	0752      	lsls	r2, r2, #29
    8b9e:	4316      	orrs	r6, r2
    8ba0:	465a      	mov	r2, fp
    8ba2:	2401      	movs	r4, #1
    8ba4:	0255      	lsls	r5, r2, #9
    8ba6:	9a02      	ldr	r2, [sp, #8]
    8ba8:	055b      	lsls	r3, r3, #21
    8baa:	0b2d      	lsrs	r5, r5, #12
    8bac:	0d5b      	lsrs	r3, r3, #21
    8bae:	4014      	ands	r4, r2
    8bb0:	e642      	b.n	8838 <__aeabi_dmul+0xc8>
    8bb2:	4d38      	ldr	r5, [pc, #224]	; (8c94 <__aeabi_dmul+0x524>)
    8bb4:	1bed      	subs	r5, r5, r7
    8bb6:	2d38      	cmp	r5, #56	; 0x38
    8bb8:	dd0a      	ble.n	8bd0 <__aeabi_dmul+0x460>
    8bba:	2401      	movs	r4, #1
    8bbc:	9b02      	ldr	r3, [sp, #8]
    8bbe:	2500      	movs	r5, #0
    8bc0:	401c      	ands	r4, r3
    8bc2:	2600      	movs	r6, #0
    8bc4:	2300      	movs	r3, #0
    8bc6:	e637      	b.n	8838 <__aeabi_dmul+0xc8>
    8bc8:	9b01      	ldr	r3, [sp, #4]
    8bca:	4657      	mov	r7, sl
    8bcc:	9302      	str	r3, [sp, #8]
    8bce:	e791      	b.n	8af4 <__aeabi_dmul+0x384>
    8bd0:	2d1f      	cmp	r5, #31
    8bd2:	dc25      	bgt.n	8c20 <__aeabi_dmul+0x4b0>
    8bd4:	4b30      	ldr	r3, [pc, #192]	; (8c98 <__aeabi_dmul+0x528>)
    8bd6:	1c32      	adds	r2, r6, #0
    8bd8:	469c      	mov	ip, r3
    8bda:	4467      	add	r7, ip
    8bdc:	40be      	lsls	r6, r7
    8bde:	465b      	mov	r3, fp
    8be0:	40bb      	lsls	r3, r7
    8be2:	1c37      	adds	r7, r6, #0
    8be4:	40ea      	lsrs	r2, r5
    8be6:	1e7e      	subs	r6, r7, #1
    8be8:	41b7      	sbcs	r7, r6
    8bea:	4313      	orrs	r3, r2
    8bec:	433b      	orrs	r3, r7
    8bee:	1c1e      	adds	r6, r3, #0
    8bf0:	465b      	mov	r3, fp
    8bf2:	40eb      	lsrs	r3, r5
    8bf4:	1c1d      	adds	r5, r3, #0
    8bf6:	0773      	lsls	r3, r6, #29
    8bf8:	d009      	beq.n	8c0e <__aeabi_dmul+0x49e>
    8bfa:	230f      	movs	r3, #15
    8bfc:	4033      	ands	r3, r6
    8bfe:	2b04      	cmp	r3, #4
    8c00:	d005      	beq.n	8c0e <__aeabi_dmul+0x49e>
    8c02:	1d33      	adds	r3, r6, #4
    8c04:	42b3      	cmp	r3, r6
    8c06:	41b6      	sbcs	r6, r6
    8c08:	4276      	negs	r6, r6
    8c0a:	19ad      	adds	r5, r5, r6
    8c0c:	1c1e      	adds	r6, r3, #0
    8c0e:	022b      	lsls	r3, r5, #8
    8c10:	d520      	bpl.n	8c54 <__aeabi_dmul+0x4e4>
    8c12:	2401      	movs	r4, #1
    8c14:	9b02      	ldr	r3, [sp, #8]
    8c16:	2500      	movs	r5, #0
    8c18:	401c      	ands	r4, r3
    8c1a:	2600      	movs	r6, #0
    8c1c:	2301      	movs	r3, #1
    8c1e:	e60b      	b.n	8838 <__aeabi_dmul+0xc8>
    8c20:	465a      	mov	r2, fp
    8c22:	4b1e      	ldr	r3, [pc, #120]	; (8c9c <__aeabi_dmul+0x52c>)
    8c24:	1bdb      	subs	r3, r3, r7
    8c26:	40da      	lsrs	r2, r3
    8c28:	1c13      	adds	r3, r2, #0
    8c2a:	2d20      	cmp	r5, #32
    8c2c:	d01c      	beq.n	8c68 <__aeabi_dmul+0x4f8>
    8c2e:	4a1c      	ldr	r2, [pc, #112]	; (8ca0 <__aeabi_dmul+0x530>)
    8c30:	4694      	mov	ip, r2
    8c32:	465a      	mov	r2, fp
    8c34:	4467      	add	r7, ip
    8c36:	40ba      	lsls	r2, r7
    8c38:	1c17      	adds	r7, r2, #0
    8c3a:	433e      	orrs	r6, r7
    8c3c:	1e72      	subs	r2, r6, #1
    8c3e:	4196      	sbcs	r6, r2
    8c40:	431e      	orrs	r6, r3
    8c42:	2307      	movs	r3, #7
    8c44:	2500      	movs	r5, #0
    8c46:	4033      	ands	r3, r6
    8c48:	d007      	beq.n	8c5a <__aeabi_dmul+0x4ea>
    8c4a:	230f      	movs	r3, #15
    8c4c:	2500      	movs	r5, #0
    8c4e:	4033      	ands	r3, r6
    8c50:	2b04      	cmp	r3, #4
    8c52:	d1d6      	bne.n	8c02 <__aeabi_dmul+0x492>
    8c54:	076b      	lsls	r3, r5, #29
    8c56:	026d      	lsls	r5, r5, #9
    8c58:	0b2d      	lsrs	r5, r5, #12
    8c5a:	2401      	movs	r4, #1
    8c5c:	08f6      	lsrs	r6, r6, #3
    8c5e:	431e      	orrs	r6, r3
    8c60:	9b02      	ldr	r3, [sp, #8]
    8c62:	401c      	ands	r4, r3
    8c64:	2300      	movs	r3, #0
    8c66:	e5e7      	b.n	8838 <__aeabi_dmul+0xc8>
    8c68:	2700      	movs	r7, #0
    8c6a:	e7e6      	b.n	8c3a <__aeabi_dmul+0x4ca>
    8c6c:	2580      	movs	r5, #128	; 0x80
    8c6e:	465b      	mov	r3, fp
    8c70:	2401      	movs	r4, #1
    8c72:	032d      	lsls	r5, r5, #12
    8c74:	431d      	orrs	r5, r3
    8c76:	9b01      	ldr	r3, [sp, #4]
    8c78:	032d      	lsls	r5, r5, #12
    8c7a:	4023      	ands	r3, r4
    8c7c:	1c1c      	adds	r4, r3, #0
    8c7e:	0b2d      	lsrs	r5, r5, #12
    8c80:	4b03      	ldr	r3, [pc, #12]	; (8c90 <__aeabi_dmul+0x520>)
    8c82:	e5d9      	b.n	8838 <__aeabi_dmul+0xc8>
    8c84:	000003ff 	.word	0x000003ff
    8c88:	feffffff 	.word	0xfeffffff
    8c8c:	000007fe 	.word	0x000007fe
    8c90:	000007ff 	.word	0x000007ff
    8c94:	fffffc02 	.word	0xfffffc02
    8c98:	0000041e 	.word	0x0000041e
    8c9c:	fffffbe2 	.word	0xfffffbe2
    8ca0:	0000043e 	.word	0x0000043e

00008ca4 <__aeabi_dsub>:
    8ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
    8ca6:	464d      	mov	r5, r9
    8ca8:	4644      	mov	r4, r8
    8caa:	465f      	mov	r7, fp
    8cac:	4656      	mov	r6, sl
    8cae:	b4f0      	push	{r4, r5, r6, r7}
    8cb0:	1c0e      	adds	r6, r1, #0
    8cb2:	1c11      	adds	r1, r2, #0
    8cb4:	0332      	lsls	r2, r6, #12
    8cb6:	0a52      	lsrs	r2, r2, #9
    8cb8:	0f47      	lsrs	r7, r0, #29
    8cba:	4317      	orrs	r7, r2
    8cbc:	00c5      	lsls	r5, r0, #3
    8cbe:	031a      	lsls	r2, r3, #12
    8cc0:	0058      	lsls	r0, r3, #1
    8cc2:	0fdb      	lsrs	r3, r3, #31
    8cc4:	4699      	mov	r9, r3
    8cc6:	0a52      	lsrs	r2, r2, #9
    8cc8:	0f4b      	lsrs	r3, r1, #29
    8cca:	b083      	sub	sp, #12
    8ccc:	431a      	orrs	r2, r3
    8cce:	00cb      	lsls	r3, r1, #3
    8cd0:	9301      	str	r3, [sp, #4]
    8cd2:	4bcf      	ldr	r3, [pc, #828]	; (9010 <__aeabi_dsub+0x36c>)
    8cd4:	0074      	lsls	r4, r6, #1
    8cd6:	0ff6      	lsrs	r6, r6, #31
    8cd8:	0d64      	lsrs	r4, r4, #21
    8cda:	46b0      	mov	r8, r6
    8cdc:	0d40      	lsrs	r0, r0, #21
    8cde:	4298      	cmp	r0, r3
    8ce0:	d100      	bne.n	8ce4 <__aeabi_dsub+0x40>
    8ce2:	e0e8      	b.n	8eb6 <__aeabi_dsub+0x212>
    8ce4:	2301      	movs	r3, #1
    8ce6:	4649      	mov	r1, r9
    8ce8:	4059      	eors	r1, r3
    8cea:	1c0b      	adds	r3, r1, #0
    8cec:	429e      	cmp	r6, r3
    8cee:	d100      	bne.n	8cf2 <__aeabi_dsub+0x4e>
    8cf0:	e0b1      	b.n	8e56 <__aeabi_dsub+0x1b2>
    8cf2:	1a26      	subs	r6, r4, r0
    8cf4:	2e00      	cmp	r6, #0
    8cf6:	dc00      	bgt.n	8cfa <__aeabi_dsub+0x56>
    8cf8:	e11c      	b.n	8f34 <__aeabi_dsub+0x290>
    8cfa:	2800      	cmp	r0, #0
    8cfc:	d142      	bne.n	8d84 <__aeabi_dsub+0xe0>
    8cfe:	1c13      	adds	r3, r2, #0
    8d00:	9901      	ldr	r1, [sp, #4]
    8d02:	430b      	orrs	r3, r1
    8d04:	d000      	beq.n	8d08 <__aeabi_dsub+0x64>
    8d06:	e0e6      	b.n	8ed6 <__aeabi_dsub+0x232>
    8d08:	076b      	lsls	r3, r5, #29
    8d0a:	d100      	bne.n	8d0e <__aeabi_dsub+0x6a>
    8d0c:	e08e      	b.n	8e2c <__aeabi_dsub+0x188>
    8d0e:	230f      	movs	r3, #15
    8d10:	402b      	ands	r3, r5
    8d12:	2b04      	cmp	r3, #4
    8d14:	d100      	bne.n	8d18 <__aeabi_dsub+0x74>
    8d16:	e089      	b.n	8e2c <__aeabi_dsub+0x188>
    8d18:	1d2a      	adds	r2, r5, #4
    8d1a:	42aa      	cmp	r2, r5
    8d1c:	41ad      	sbcs	r5, r5
    8d1e:	2380      	movs	r3, #128	; 0x80
    8d20:	2601      	movs	r6, #1
    8d22:	4641      	mov	r1, r8
    8d24:	426d      	negs	r5, r5
    8d26:	197f      	adds	r7, r7, r5
    8d28:	041b      	lsls	r3, r3, #16
    8d2a:	403b      	ands	r3, r7
    8d2c:	400e      	ands	r6, r1
    8d2e:	1c15      	adds	r5, r2, #0
    8d30:	2b00      	cmp	r3, #0
    8d32:	d100      	bne.n	8d36 <__aeabi_dsub+0x92>
    8d34:	e083      	b.n	8e3e <__aeabi_dsub+0x19a>
    8d36:	4bb6      	ldr	r3, [pc, #728]	; (9010 <__aeabi_dsub+0x36c>)
    8d38:	3401      	adds	r4, #1
    8d3a:	429c      	cmp	r4, r3
    8d3c:	d100      	bne.n	8d40 <__aeabi_dsub+0x9c>
    8d3e:	e116      	b.n	8f6e <__aeabi_dsub+0x2ca>
    8d40:	1c3a      	adds	r2, r7, #0
    8d42:	4bb4      	ldr	r3, [pc, #720]	; (9014 <__aeabi_dsub+0x370>)
    8d44:	08ed      	lsrs	r5, r5, #3
    8d46:	401a      	ands	r2, r3
    8d48:	0750      	lsls	r0, r2, #29
    8d4a:	0564      	lsls	r4, r4, #21
    8d4c:	0252      	lsls	r2, r2, #9
    8d4e:	4305      	orrs	r5, r0
    8d50:	0b12      	lsrs	r2, r2, #12
    8d52:	0d64      	lsrs	r4, r4, #21
    8d54:	2100      	movs	r1, #0
    8d56:	0312      	lsls	r2, r2, #12
    8d58:	0d0b      	lsrs	r3, r1, #20
    8d5a:	051b      	lsls	r3, r3, #20
    8d5c:	0564      	lsls	r4, r4, #21
    8d5e:	0b12      	lsrs	r2, r2, #12
    8d60:	431a      	orrs	r2, r3
    8d62:	0863      	lsrs	r3, r4, #1
    8d64:	4cac      	ldr	r4, [pc, #688]	; (9018 <__aeabi_dsub+0x374>)
    8d66:	07f6      	lsls	r6, r6, #31
    8d68:	4014      	ands	r4, r2
    8d6a:	431c      	orrs	r4, r3
    8d6c:	0064      	lsls	r4, r4, #1
    8d6e:	0864      	lsrs	r4, r4, #1
    8d70:	4334      	orrs	r4, r6
    8d72:	1c28      	adds	r0, r5, #0
    8d74:	1c21      	adds	r1, r4, #0
    8d76:	b003      	add	sp, #12
    8d78:	bc3c      	pop	{r2, r3, r4, r5}
    8d7a:	4690      	mov	r8, r2
    8d7c:	4699      	mov	r9, r3
    8d7e:	46a2      	mov	sl, r4
    8d80:	46ab      	mov	fp, r5
    8d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8d84:	4ba2      	ldr	r3, [pc, #648]	; (9010 <__aeabi_dsub+0x36c>)
    8d86:	429c      	cmp	r4, r3
    8d88:	d0be      	beq.n	8d08 <__aeabi_dsub+0x64>
    8d8a:	2380      	movs	r3, #128	; 0x80
    8d8c:	041b      	lsls	r3, r3, #16
    8d8e:	431a      	orrs	r2, r3
    8d90:	2e38      	cmp	r6, #56	; 0x38
    8d92:	dd00      	ble.n	8d96 <__aeabi_dsub+0xf2>
    8d94:	e103      	b.n	8f9e <__aeabi_dsub+0x2fa>
    8d96:	2e1f      	cmp	r6, #31
    8d98:	dd00      	ble.n	8d9c <__aeabi_dsub+0xf8>
    8d9a:	e13f      	b.n	901c <__aeabi_dsub+0x378>
    8d9c:	2020      	movs	r0, #32
    8d9e:	1b83      	subs	r3, r0, r6
    8da0:	4699      	mov	r9, r3
    8da2:	1c13      	adds	r3, r2, #0
    8da4:	4649      	mov	r1, r9
    8da6:	408b      	lsls	r3, r1
    8da8:	469c      	mov	ip, r3
    8daa:	9b01      	ldr	r3, [sp, #4]
    8dac:	4660      	mov	r0, ip
    8dae:	40f3      	lsrs	r3, r6
    8db0:	4303      	orrs	r3, r0
    8db2:	9801      	ldr	r0, [sp, #4]
    8db4:	40f2      	lsrs	r2, r6
    8db6:	4088      	lsls	r0, r1
    8db8:	1c01      	adds	r1, r0, #0
    8dba:	1e48      	subs	r0, r1, #1
    8dbc:	4181      	sbcs	r1, r0
    8dbe:	430b      	orrs	r3, r1
    8dc0:	1aeb      	subs	r3, r5, r3
    8dc2:	429d      	cmp	r5, r3
    8dc4:	4180      	sbcs	r0, r0
    8dc6:	1c1d      	adds	r5, r3, #0
    8dc8:	1aba      	subs	r2, r7, r2
    8dca:	4240      	negs	r0, r0
    8dcc:	1a17      	subs	r7, r2, r0
    8dce:	023b      	lsls	r3, r7, #8
    8dd0:	d400      	bmi.n	8dd4 <__aeabi_dsub+0x130>
    8dd2:	e0a8      	b.n	8f26 <__aeabi_dsub+0x282>
    8dd4:	027a      	lsls	r2, r7, #9
    8dd6:	0a56      	lsrs	r6, r2, #9
    8dd8:	2e00      	cmp	r6, #0
    8dda:	d100      	bne.n	8dde <__aeabi_dsub+0x13a>
    8ddc:	e0ca      	b.n	8f74 <__aeabi_dsub+0x2d0>
    8dde:	1c30      	adds	r0, r6, #0
    8de0:	f000 fc62 	bl	96a8 <__clzsi2>
    8de4:	1c03      	adds	r3, r0, #0
    8de6:	3b08      	subs	r3, #8
    8de8:	2b1f      	cmp	r3, #31
    8dea:	dd00      	ble.n	8dee <__aeabi_dsub+0x14a>
    8dec:	e0cb      	b.n	8f86 <__aeabi_dsub+0x2e2>
    8dee:	2228      	movs	r2, #40	; 0x28
    8df0:	1c29      	adds	r1, r5, #0
    8df2:	1a12      	subs	r2, r2, r0
    8df4:	40d1      	lsrs	r1, r2
    8df6:	409e      	lsls	r6, r3
    8df8:	1c0a      	adds	r2, r1, #0
    8dfa:	409d      	lsls	r5, r3
    8dfc:	4332      	orrs	r2, r6
    8dfe:	429c      	cmp	r4, r3
    8e00:	dd00      	ble.n	8e04 <__aeabi_dsub+0x160>
    8e02:	e0c8      	b.n	8f96 <__aeabi_dsub+0x2f2>
    8e04:	1b1c      	subs	r4, r3, r4
    8e06:	1c67      	adds	r7, r4, #1
    8e08:	2f1f      	cmp	r7, #31
    8e0a:	dd00      	ble.n	8e0e <__aeabi_dsub+0x16a>
    8e0c:	e0ed      	b.n	8fea <__aeabi_dsub+0x346>
    8e0e:	231f      	movs	r3, #31
    8e10:	1c29      	adds	r1, r5, #0
    8e12:	1b1c      	subs	r4, r3, r4
    8e14:	1c13      	adds	r3, r2, #0
    8e16:	40a5      	lsls	r5, r4
    8e18:	40a3      	lsls	r3, r4
    8e1a:	40f9      	lsrs	r1, r7
    8e1c:	1e6c      	subs	r4, r5, #1
    8e1e:	41a5      	sbcs	r5, r4
    8e20:	40fa      	lsrs	r2, r7
    8e22:	4319      	orrs	r1, r3
    8e24:	430d      	orrs	r5, r1
    8e26:	1c17      	adds	r7, r2, #0
    8e28:	2400      	movs	r4, #0
    8e2a:	e76d      	b.n	8d08 <__aeabi_dsub+0x64>
    8e2c:	2380      	movs	r3, #128	; 0x80
    8e2e:	2601      	movs	r6, #1
    8e30:	4642      	mov	r2, r8
    8e32:	041b      	lsls	r3, r3, #16
    8e34:	403b      	ands	r3, r7
    8e36:	4016      	ands	r6, r2
    8e38:	2b00      	cmp	r3, #0
    8e3a:	d000      	beq.n	8e3e <__aeabi_dsub+0x19a>
    8e3c:	e77b      	b.n	8d36 <__aeabi_dsub+0x92>
    8e3e:	4b74      	ldr	r3, [pc, #464]	; (9010 <__aeabi_dsub+0x36c>)
    8e40:	08ed      	lsrs	r5, r5, #3
    8e42:	0778      	lsls	r0, r7, #29
    8e44:	4305      	orrs	r5, r0
    8e46:	08fa      	lsrs	r2, r7, #3
    8e48:	429c      	cmp	r4, r3
    8e4a:	d03b      	beq.n	8ec4 <__aeabi_dsub+0x220>
    8e4c:	0312      	lsls	r2, r2, #12
    8e4e:	0564      	lsls	r4, r4, #21
    8e50:	0b12      	lsrs	r2, r2, #12
    8e52:	0d64      	lsrs	r4, r4, #21
    8e54:	e77e      	b.n	8d54 <__aeabi_dsub+0xb0>
    8e56:	1a23      	subs	r3, r4, r0
    8e58:	469a      	mov	sl, r3
    8e5a:	2b00      	cmp	r3, #0
    8e5c:	dc00      	bgt.n	8e60 <__aeabi_dsub+0x1bc>
    8e5e:	e0a5      	b.n	8fac <__aeabi_dsub+0x308>
    8e60:	2800      	cmp	r0, #0
    8e62:	d044      	beq.n	8eee <__aeabi_dsub+0x24a>
    8e64:	486a      	ldr	r0, [pc, #424]	; (9010 <__aeabi_dsub+0x36c>)
    8e66:	4284      	cmp	r4, r0
    8e68:	d100      	bne.n	8e6c <__aeabi_dsub+0x1c8>
    8e6a:	e74d      	b.n	8d08 <__aeabi_dsub+0x64>
    8e6c:	2080      	movs	r0, #128	; 0x80
    8e6e:	0400      	lsls	r0, r0, #16
    8e70:	4302      	orrs	r2, r0
    8e72:	4653      	mov	r3, sl
    8e74:	2b38      	cmp	r3, #56	; 0x38
    8e76:	dc00      	bgt.n	8e7a <__aeabi_dsub+0x1d6>
    8e78:	e11c      	b.n	90b4 <__aeabi_dsub+0x410>
    8e7a:	9b01      	ldr	r3, [sp, #4]
    8e7c:	431a      	orrs	r2, r3
    8e7e:	1e51      	subs	r1, r2, #1
    8e80:	418a      	sbcs	r2, r1
    8e82:	b2d1      	uxtb	r1, r2
    8e84:	2200      	movs	r2, #0
    8e86:	1949      	adds	r1, r1, r5
    8e88:	42a9      	cmp	r1, r5
    8e8a:	4180      	sbcs	r0, r0
    8e8c:	1c0d      	adds	r5, r1, #0
    8e8e:	19d2      	adds	r2, r2, r7
    8e90:	4240      	negs	r0, r0
    8e92:	1817      	adds	r7, r2, r0
    8e94:	023b      	lsls	r3, r7, #8
    8e96:	d546      	bpl.n	8f26 <__aeabi_dsub+0x282>
    8e98:	4b5d      	ldr	r3, [pc, #372]	; (9010 <__aeabi_dsub+0x36c>)
    8e9a:	3401      	adds	r4, #1
    8e9c:	429c      	cmp	r4, r3
    8e9e:	d100      	bne.n	8ea2 <__aeabi_dsub+0x1fe>
    8ea0:	e169      	b.n	9176 <__aeabi_dsub+0x4d2>
    8ea2:	2001      	movs	r0, #1
    8ea4:	4a5b      	ldr	r2, [pc, #364]	; (9014 <__aeabi_dsub+0x370>)
    8ea6:	086b      	lsrs	r3, r5, #1
    8ea8:	403a      	ands	r2, r7
    8eaa:	4028      	ands	r0, r5
    8eac:	4318      	orrs	r0, r3
    8eae:	07d5      	lsls	r5, r2, #31
    8eb0:	4305      	orrs	r5, r0
    8eb2:	0857      	lsrs	r7, r2, #1
    8eb4:	e728      	b.n	8d08 <__aeabi_dsub+0x64>
    8eb6:	1c13      	adds	r3, r2, #0
    8eb8:	9901      	ldr	r1, [sp, #4]
    8eba:	430b      	orrs	r3, r1
    8ebc:	d100      	bne.n	8ec0 <__aeabi_dsub+0x21c>
    8ebe:	e711      	b.n	8ce4 <__aeabi_dsub+0x40>
    8ec0:	464b      	mov	r3, r9
    8ec2:	e713      	b.n	8cec <__aeabi_dsub+0x48>
    8ec4:	1c2b      	adds	r3, r5, #0
    8ec6:	4313      	orrs	r3, r2
    8ec8:	d051      	beq.n	8f6e <__aeabi_dsub+0x2ca>
    8eca:	2380      	movs	r3, #128	; 0x80
    8ecc:	031b      	lsls	r3, r3, #12
    8ece:	431a      	orrs	r2, r3
    8ed0:	0312      	lsls	r2, r2, #12
    8ed2:	0b12      	lsrs	r2, r2, #12
    8ed4:	e73e      	b.n	8d54 <__aeabi_dsub+0xb0>
    8ed6:	3e01      	subs	r6, #1
    8ed8:	2e00      	cmp	r6, #0
    8eda:	d000      	beq.n	8ede <__aeabi_dsub+0x23a>
    8edc:	e080      	b.n	8fe0 <__aeabi_dsub+0x33c>
    8ede:	1a69      	subs	r1, r5, r1
    8ee0:	428d      	cmp	r5, r1
    8ee2:	419b      	sbcs	r3, r3
    8ee4:	1aba      	subs	r2, r7, r2
    8ee6:	425b      	negs	r3, r3
    8ee8:	1ad7      	subs	r7, r2, r3
    8eea:	1c0d      	adds	r5, r1, #0
    8eec:	e76f      	b.n	8dce <__aeabi_dsub+0x12a>
    8eee:	1c10      	adds	r0, r2, #0
    8ef0:	9b01      	ldr	r3, [sp, #4]
    8ef2:	4318      	orrs	r0, r3
    8ef4:	d100      	bne.n	8ef8 <__aeabi_dsub+0x254>
    8ef6:	e707      	b.n	8d08 <__aeabi_dsub+0x64>
    8ef8:	2301      	movs	r3, #1
    8efa:	425b      	negs	r3, r3
    8efc:	469c      	mov	ip, r3
    8efe:	44e2      	add	sl, ip
    8f00:	4653      	mov	r3, sl
    8f02:	2b00      	cmp	r3, #0
    8f04:	d000      	beq.n	8f08 <__aeabi_dsub+0x264>
    8f06:	e102      	b.n	910e <__aeabi_dsub+0x46a>
    8f08:	9b01      	ldr	r3, [sp, #4]
    8f0a:	19d2      	adds	r2, r2, r7
    8f0c:	1959      	adds	r1, r3, r5
    8f0e:	42a9      	cmp	r1, r5
    8f10:	419b      	sbcs	r3, r3
    8f12:	425b      	negs	r3, r3
    8f14:	18d7      	adds	r7, r2, r3
    8f16:	1c0d      	adds	r5, r1, #0
    8f18:	e7bc      	b.n	8e94 <__aeabi_dsub+0x1f0>
    8f1a:	4663      	mov	r3, ip
    8f1c:	4303      	orrs	r3, r0
    8f1e:	d100      	bne.n	8f22 <__aeabi_dsub+0x27e>
    8f20:	e128      	b.n	9174 <__aeabi_dsub+0x4d0>
    8f22:	1c07      	adds	r7, r0, #0
    8f24:	4665      	mov	r5, ip
    8f26:	076b      	lsls	r3, r5, #29
    8f28:	d000      	beq.n	8f2c <__aeabi_dsub+0x288>
    8f2a:	e6f0      	b.n	8d0e <__aeabi_dsub+0x6a>
    8f2c:	2601      	movs	r6, #1
    8f2e:	4643      	mov	r3, r8
    8f30:	401e      	ands	r6, r3
    8f32:	e784      	b.n	8e3e <__aeabi_dsub+0x19a>
    8f34:	2e00      	cmp	r6, #0
    8f36:	d000      	beq.n	8f3a <__aeabi_dsub+0x296>
    8f38:	e081      	b.n	903e <__aeabi_dsub+0x39a>
    8f3a:	1c60      	adds	r0, r4, #1
    8f3c:	0540      	lsls	r0, r0, #21
    8f3e:	0d40      	lsrs	r0, r0, #21
    8f40:	2801      	cmp	r0, #1
    8f42:	dc00      	bgt.n	8f46 <__aeabi_dsub+0x2a2>
    8f44:	e107      	b.n	9156 <__aeabi_dsub+0x4b2>
    8f46:	9901      	ldr	r1, [sp, #4]
    8f48:	1a68      	subs	r0, r5, r1
    8f4a:	4684      	mov	ip, r0
    8f4c:	4565      	cmp	r5, ip
    8f4e:	41b6      	sbcs	r6, r6
    8f50:	1ab8      	subs	r0, r7, r2
    8f52:	4276      	negs	r6, r6
    8f54:	1b86      	subs	r6, r0, r6
    8f56:	0230      	lsls	r0, r6, #8
    8f58:	d400      	bmi.n	8f5c <__aeabi_dsub+0x2b8>
    8f5a:	e0a1      	b.n	90a0 <__aeabi_dsub+0x3fc>
    8f5c:	468c      	mov	ip, r1
    8f5e:	1b4d      	subs	r5, r1, r5
    8f60:	45ac      	cmp	ip, r5
    8f62:	4189      	sbcs	r1, r1
    8f64:	1bd2      	subs	r2, r2, r7
    8f66:	4249      	negs	r1, r1
    8f68:	1a56      	subs	r6, r2, r1
    8f6a:	4698      	mov	r8, r3
    8f6c:	e734      	b.n	8dd8 <__aeabi_dsub+0x134>
    8f6e:	2200      	movs	r2, #0
    8f70:	2500      	movs	r5, #0
    8f72:	e6ef      	b.n	8d54 <__aeabi_dsub+0xb0>
    8f74:	1c28      	adds	r0, r5, #0
    8f76:	f000 fb97 	bl	96a8 <__clzsi2>
    8f7a:	3020      	adds	r0, #32
    8f7c:	1c03      	adds	r3, r0, #0
    8f7e:	3b08      	subs	r3, #8
    8f80:	2b1f      	cmp	r3, #31
    8f82:	dc00      	bgt.n	8f86 <__aeabi_dsub+0x2e2>
    8f84:	e733      	b.n	8dee <__aeabi_dsub+0x14a>
    8f86:	1c02      	adds	r2, r0, #0
    8f88:	3a28      	subs	r2, #40	; 0x28
    8f8a:	4095      	lsls	r5, r2
    8f8c:	1c2a      	adds	r2, r5, #0
    8f8e:	2500      	movs	r5, #0
    8f90:	429c      	cmp	r4, r3
    8f92:	dc00      	bgt.n	8f96 <__aeabi_dsub+0x2f2>
    8f94:	e736      	b.n	8e04 <__aeabi_dsub+0x160>
    8f96:	4f1f      	ldr	r7, [pc, #124]	; (9014 <__aeabi_dsub+0x370>)
    8f98:	1ae4      	subs	r4, r4, r3
    8f9a:	4017      	ands	r7, r2
    8f9c:	e6b4      	b.n	8d08 <__aeabi_dsub+0x64>
    8f9e:	9b01      	ldr	r3, [sp, #4]
    8fa0:	431a      	orrs	r2, r3
    8fa2:	1e51      	subs	r1, r2, #1
    8fa4:	418a      	sbcs	r2, r1
    8fa6:	b2d3      	uxtb	r3, r2
    8fa8:	2200      	movs	r2, #0
    8faa:	e709      	b.n	8dc0 <__aeabi_dsub+0x11c>
    8fac:	2b00      	cmp	r3, #0
    8fae:	d000      	beq.n	8fb2 <__aeabi_dsub+0x30e>
    8fb0:	e101      	b.n	91b6 <__aeabi_dsub+0x512>
    8fb2:	1c60      	adds	r0, r4, #1
    8fb4:	0543      	lsls	r3, r0, #21
    8fb6:	0d5b      	lsrs	r3, r3, #21
    8fb8:	2b01      	cmp	r3, #1
    8fba:	dc00      	bgt.n	8fbe <__aeabi_dsub+0x31a>
    8fbc:	e0b0      	b.n	9120 <__aeabi_dsub+0x47c>
    8fbe:	4b14      	ldr	r3, [pc, #80]	; (9010 <__aeabi_dsub+0x36c>)
    8fc0:	4298      	cmp	r0, r3
    8fc2:	d100      	bne.n	8fc6 <__aeabi_dsub+0x322>
    8fc4:	e11e      	b.n	9204 <__aeabi_dsub+0x560>
    8fc6:	9b01      	ldr	r3, [sp, #4]
    8fc8:	19d2      	adds	r2, r2, r7
    8fca:	1959      	adds	r1, r3, r5
    8fcc:	42a9      	cmp	r1, r5
    8fce:	419b      	sbcs	r3, r3
    8fd0:	425b      	negs	r3, r3
    8fd2:	18d2      	adds	r2, r2, r3
    8fd4:	0849      	lsrs	r1, r1, #1
    8fd6:	07d5      	lsls	r5, r2, #31
    8fd8:	430d      	orrs	r5, r1
    8fda:	0857      	lsrs	r7, r2, #1
    8fdc:	1c04      	adds	r4, r0, #0
    8fde:	e693      	b.n	8d08 <__aeabi_dsub+0x64>
    8fe0:	4b0b      	ldr	r3, [pc, #44]	; (9010 <__aeabi_dsub+0x36c>)
    8fe2:	429c      	cmp	r4, r3
    8fe4:	d000      	beq.n	8fe8 <__aeabi_dsub+0x344>
    8fe6:	e6d3      	b.n	8d90 <__aeabi_dsub+0xec>
    8fe8:	e68e      	b.n	8d08 <__aeabi_dsub+0x64>
    8fea:	1c21      	adds	r1, r4, #0
    8fec:	1c13      	adds	r3, r2, #0
    8fee:	391f      	subs	r1, #31
    8ff0:	40cb      	lsrs	r3, r1
    8ff2:	1c19      	adds	r1, r3, #0
    8ff4:	2f20      	cmp	r7, #32
    8ff6:	d100      	bne.n	8ffa <__aeabi_dsub+0x356>
    8ff8:	e08e      	b.n	9118 <__aeabi_dsub+0x474>
    8ffa:	233f      	movs	r3, #63	; 0x3f
    8ffc:	1b1c      	subs	r4, r3, r4
    8ffe:	40a2      	lsls	r2, r4
    9000:	4315      	orrs	r5, r2
    9002:	1e6a      	subs	r2, r5, #1
    9004:	4195      	sbcs	r5, r2
    9006:	2700      	movs	r7, #0
    9008:	430d      	orrs	r5, r1
    900a:	2400      	movs	r4, #0
    900c:	e78b      	b.n	8f26 <__aeabi_dsub+0x282>
    900e:	46c0      	nop			; (mov r8, r8)
    9010:	000007ff 	.word	0x000007ff
    9014:	ff7fffff 	.word	0xff7fffff
    9018:	800fffff 	.word	0x800fffff
    901c:	1c33      	adds	r3, r6, #0
    901e:	1c10      	adds	r0, r2, #0
    9020:	3b20      	subs	r3, #32
    9022:	40d8      	lsrs	r0, r3
    9024:	2e20      	cmp	r6, #32
    9026:	d079      	beq.n	911c <__aeabi_dsub+0x478>
    9028:	2340      	movs	r3, #64	; 0x40
    902a:	1b9b      	subs	r3, r3, r6
    902c:	409a      	lsls	r2, r3
    902e:	1c13      	adds	r3, r2, #0
    9030:	9a01      	ldr	r2, [sp, #4]
    9032:	4313      	orrs	r3, r2
    9034:	1e59      	subs	r1, r3, #1
    9036:	418b      	sbcs	r3, r1
    9038:	2200      	movs	r2, #0
    903a:	4303      	orrs	r3, r0
    903c:	e6c0      	b.n	8dc0 <__aeabi_dsub+0x11c>
    903e:	2c00      	cmp	r4, #0
    9040:	d053      	beq.n	90ea <__aeabi_dsub+0x446>
    9042:	4cc7      	ldr	r4, [pc, #796]	; (9360 <__aeabi_dsub+0x6bc>)
    9044:	42a0      	cmp	r0, r4
    9046:	d100      	bne.n	904a <__aeabi_dsub+0x3a6>
    9048:	e0b0      	b.n	91ac <__aeabi_dsub+0x508>
    904a:	2480      	movs	r4, #128	; 0x80
    904c:	4271      	negs	r1, r6
    904e:	4689      	mov	r9, r1
    9050:	0424      	lsls	r4, r4, #16
    9052:	4327      	orrs	r7, r4
    9054:	4649      	mov	r1, r9
    9056:	2938      	cmp	r1, #56	; 0x38
    9058:	dd00      	ble.n	905c <__aeabi_dsub+0x3b8>
    905a:	e0cd      	b.n	91f8 <__aeabi_dsub+0x554>
    905c:	291f      	cmp	r1, #31
    905e:	dd00      	ble.n	9062 <__aeabi_dsub+0x3be>
    9060:	e159      	b.n	9316 <__aeabi_dsub+0x672>
    9062:	2420      	movs	r4, #32
    9064:	1c3e      	adds	r6, r7, #0
    9066:	1a61      	subs	r1, r4, r1
    9068:	408e      	lsls	r6, r1
    906a:	468a      	mov	sl, r1
    906c:	46b0      	mov	r8, r6
    906e:	4649      	mov	r1, r9
    9070:	1c2e      	adds	r6, r5, #0
    9072:	40ce      	lsrs	r6, r1
    9074:	4651      	mov	r1, sl
    9076:	46b4      	mov	ip, r6
    9078:	408d      	lsls	r5, r1
    907a:	4664      	mov	r4, ip
    907c:	4646      	mov	r6, r8
    907e:	4649      	mov	r1, r9
    9080:	4326      	orrs	r6, r4
    9082:	1e6c      	subs	r4, r5, #1
    9084:	41a5      	sbcs	r5, r4
    9086:	40cf      	lsrs	r7, r1
    9088:	4335      	orrs	r5, r6
    908a:	9901      	ldr	r1, [sp, #4]
    908c:	1bd7      	subs	r7, r2, r7
    908e:	468c      	mov	ip, r1
    9090:	1b4d      	subs	r5, r1, r5
    9092:	45ac      	cmp	ip, r5
    9094:	4192      	sbcs	r2, r2
    9096:	4252      	negs	r2, r2
    9098:	1abf      	subs	r7, r7, r2
    909a:	1c04      	adds	r4, r0, #0
    909c:	4698      	mov	r8, r3
    909e:	e696      	b.n	8dce <__aeabi_dsub+0x12a>
    90a0:	4663      	mov	r3, ip
    90a2:	4665      	mov	r5, ip
    90a4:	4333      	orrs	r3, r6
    90a6:	d000      	beq.n	90aa <__aeabi_dsub+0x406>
    90a8:	e696      	b.n	8dd8 <__aeabi_dsub+0x134>
    90aa:	2600      	movs	r6, #0
    90ac:	2700      	movs	r7, #0
    90ae:	2400      	movs	r4, #0
    90b0:	2500      	movs	r5, #0
    90b2:	e6c4      	b.n	8e3e <__aeabi_dsub+0x19a>
    90b4:	2b1f      	cmp	r3, #31
    90b6:	dc61      	bgt.n	917c <__aeabi_dsub+0x4d8>
    90b8:	2020      	movs	r0, #32
    90ba:	1ac3      	subs	r3, r0, r3
    90bc:	469b      	mov	fp, r3
    90be:	1c13      	adds	r3, r2, #0
    90c0:	4659      	mov	r1, fp
    90c2:	408b      	lsls	r3, r1
    90c4:	4651      	mov	r1, sl
    90c6:	4699      	mov	r9, r3
    90c8:	9b01      	ldr	r3, [sp, #4]
    90ca:	40cb      	lsrs	r3, r1
    90cc:	469c      	mov	ip, r3
    90ce:	464b      	mov	r3, r9
    90d0:	4660      	mov	r0, ip
    90d2:	4303      	orrs	r3, r0
    90d4:	469c      	mov	ip, r3
    90d6:	465b      	mov	r3, fp
    90d8:	9901      	ldr	r1, [sp, #4]
    90da:	4099      	lsls	r1, r3
    90dc:	4663      	mov	r3, ip
    90de:	1e48      	subs	r0, r1, #1
    90e0:	4181      	sbcs	r1, r0
    90e2:	4319      	orrs	r1, r3
    90e4:	4653      	mov	r3, sl
    90e6:	40da      	lsrs	r2, r3
    90e8:	e6cd      	b.n	8e86 <__aeabi_dsub+0x1e2>
    90ea:	1c3c      	adds	r4, r7, #0
    90ec:	432c      	orrs	r4, r5
    90ee:	d05d      	beq.n	91ac <__aeabi_dsub+0x508>
    90f0:	43f1      	mvns	r1, r6
    90f2:	4689      	mov	r9, r1
    90f4:	2900      	cmp	r1, #0
    90f6:	d155      	bne.n	91a4 <__aeabi_dsub+0x500>
    90f8:	9901      	ldr	r1, [sp, #4]
    90fa:	1bd2      	subs	r2, r2, r7
    90fc:	468c      	mov	ip, r1
    90fe:	1b4d      	subs	r5, r1, r5
    9100:	45ac      	cmp	ip, r5
    9102:	4189      	sbcs	r1, r1
    9104:	4249      	negs	r1, r1
    9106:	1a57      	subs	r7, r2, r1
    9108:	1c04      	adds	r4, r0, #0
    910a:	4698      	mov	r8, r3
    910c:	e65f      	b.n	8dce <__aeabi_dsub+0x12a>
    910e:	4894      	ldr	r0, [pc, #592]	; (9360 <__aeabi_dsub+0x6bc>)
    9110:	4284      	cmp	r4, r0
    9112:	d000      	beq.n	9116 <__aeabi_dsub+0x472>
    9114:	e6ad      	b.n	8e72 <__aeabi_dsub+0x1ce>
    9116:	e5f7      	b.n	8d08 <__aeabi_dsub+0x64>
    9118:	2200      	movs	r2, #0
    911a:	e771      	b.n	9000 <__aeabi_dsub+0x35c>
    911c:	2300      	movs	r3, #0
    911e:	e787      	b.n	9030 <__aeabi_dsub+0x38c>
    9120:	1c3b      	adds	r3, r7, #0
    9122:	432b      	orrs	r3, r5
    9124:	2c00      	cmp	r4, #0
    9126:	d000      	beq.n	912a <__aeabi_dsub+0x486>
    9128:	e0da      	b.n	92e0 <__aeabi_dsub+0x63c>
    912a:	2b00      	cmp	r3, #0
    912c:	d100      	bne.n	9130 <__aeabi_dsub+0x48c>
    912e:	e113      	b.n	9358 <__aeabi_dsub+0x6b4>
    9130:	1c13      	adds	r3, r2, #0
    9132:	9901      	ldr	r1, [sp, #4]
    9134:	430b      	orrs	r3, r1
    9136:	d100      	bne.n	913a <__aeabi_dsub+0x496>
    9138:	e5e6      	b.n	8d08 <__aeabi_dsub+0x64>
    913a:	1949      	adds	r1, r1, r5
    913c:	42a9      	cmp	r1, r5
    913e:	419b      	sbcs	r3, r3
    9140:	19d2      	adds	r2, r2, r7
    9142:	425b      	negs	r3, r3
    9144:	18d7      	adds	r7, r2, r3
    9146:	023b      	lsls	r3, r7, #8
    9148:	d400      	bmi.n	914c <__aeabi_dsub+0x4a8>
    914a:	e121      	b.n	9390 <__aeabi_dsub+0x6ec>
    914c:	4b85      	ldr	r3, [pc, #532]	; (9364 <__aeabi_dsub+0x6c0>)
    914e:	1c0d      	adds	r5, r1, #0
    9150:	401f      	ands	r7, r3
    9152:	1c04      	adds	r4, r0, #0
    9154:	e5d8      	b.n	8d08 <__aeabi_dsub+0x64>
    9156:	1c38      	adds	r0, r7, #0
    9158:	4328      	orrs	r0, r5
    915a:	2c00      	cmp	r4, #0
    915c:	d140      	bne.n	91e0 <__aeabi_dsub+0x53c>
    915e:	2800      	cmp	r0, #0
    9160:	d000      	beq.n	9164 <__aeabi_dsub+0x4c0>
    9162:	e083      	b.n	926c <__aeabi_dsub+0x5c8>
    9164:	1c10      	adds	r0, r2, #0
    9166:	9901      	ldr	r1, [sp, #4]
    9168:	4308      	orrs	r0, r1
    916a:	d003      	beq.n	9174 <__aeabi_dsub+0x4d0>
    916c:	1c17      	adds	r7, r2, #0
    916e:	1c0d      	adds	r5, r1, #0
    9170:	4698      	mov	r8, r3
    9172:	e5c9      	b.n	8d08 <__aeabi_dsub+0x64>
    9174:	2600      	movs	r6, #0
    9176:	2700      	movs	r7, #0
    9178:	2500      	movs	r5, #0
    917a:	e660      	b.n	8e3e <__aeabi_dsub+0x19a>
    917c:	4650      	mov	r0, sl
    917e:	1c13      	adds	r3, r2, #0
    9180:	3820      	subs	r0, #32
    9182:	40c3      	lsrs	r3, r0
    9184:	1c18      	adds	r0, r3, #0
    9186:	4653      	mov	r3, sl
    9188:	2b20      	cmp	r3, #32
    918a:	d100      	bne.n	918e <__aeabi_dsub+0x4ea>
    918c:	e0c1      	b.n	9312 <__aeabi_dsub+0x66e>
    918e:	2340      	movs	r3, #64	; 0x40
    9190:	4651      	mov	r1, sl
    9192:	1a5b      	subs	r3, r3, r1
    9194:	409a      	lsls	r2, r3
    9196:	9901      	ldr	r1, [sp, #4]
    9198:	4311      	orrs	r1, r2
    919a:	1e4a      	subs	r2, r1, #1
    919c:	4191      	sbcs	r1, r2
    919e:	2200      	movs	r2, #0
    91a0:	4301      	orrs	r1, r0
    91a2:	e670      	b.n	8e86 <__aeabi_dsub+0x1e2>
    91a4:	4c6e      	ldr	r4, [pc, #440]	; (9360 <__aeabi_dsub+0x6bc>)
    91a6:	42a0      	cmp	r0, r4
    91a8:	d000      	beq.n	91ac <__aeabi_dsub+0x508>
    91aa:	e753      	b.n	9054 <__aeabi_dsub+0x3b0>
    91ac:	1c17      	adds	r7, r2, #0
    91ae:	9d01      	ldr	r5, [sp, #4]
    91b0:	1c04      	adds	r4, r0, #0
    91b2:	4698      	mov	r8, r3
    91b4:	e5a8      	b.n	8d08 <__aeabi_dsub+0x64>
    91b6:	2c00      	cmp	r4, #0
    91b8:	d128      	bne.n	920c <__aeabi_dsub+0x568>
    91ba:	1c3c      	adds	r4, r7, #0
    91bc:	432c      	orrs	r4, r5
    91be:	d100      	bne.n	91c2 <__aeabi_dsub+0x51e>
    91c0:	e08a      	b.n	92d8 <__aeabi_dsub+0x634>
    91c2:	43db      	mvns	r3, r3
    91c4:	469a      	mov	sl, r3
    91c6:	2b00      	cmp	r3, #0
    91c8:	d000      	beq.n	91cc <__aeabi_dsub+0x528>
    91ca:	e082      	b.n	92d2 <__aeabi_dsub+0x62e>
    91cc:	9b01      	ldr	r3, [sp, #4]
    91ce:	19d2      	adds	r2, r2, r7
    91d0:	469c      	mov	ip, r3
    91d2:	4465      	add	r5, ip
    91d4:	429d      	cmp	r5, r3
    91d6:	4189      	sbcs	r1, r1
    91d8:	4249      	negs	r1, r1
    91da:	1857      	adds	r7, r2, r1
    91dc:	1c04      	adds	r4, r0, #0
    91de:	e659      	b.n	8e94 <__aeabi_dsub+0x1f0>
    91e0:	2800      	cmp	r0, #0
    91e2:	d15b      	bne.n	929c <__aeabi_dsub+0x5f8>
    91e4:	1c10      	adds	r0, r2, #0
    91e6:	9901      	ldr	r1, [sp, #4]
    91e8:	4308      	orrs	r0, r1
    91ea:	d100      	bne.n	91ee <__aeabi_dsub+0x54a>
    91ec:	e0a4      	b.n	9338 <__aeabi_dsub+0x694>
    91ee:	1c17      	adds	r7, r2, #0
    91f0:	1c0d      	adds	r5, r1, #0
    91f2:	4698      	mov	r8, r3
    91f4:	4c5a      	ldr	r4, [pc, #360]	; (9360 <__aeabi_dsub+0x6bc>)
    91f6:	e587      	b.n	8d08 <__aeabi_dsub+0x64>
    91f8:	433d      	orrs	r5, r7
    91fa:	1e6f      	subs	r7, r5, #1
    91fc:	41bd      	sbcs	r5, r7
    91fe:	2700      	movs	r7, #0
    9200:	b2ed      	uxtb	r5, r5
    9202:	e742      	b.n	908a <__aeabi_dsub+0x3e6>
    9204:	1c04      	adds	r4, r0, #0
    9206:	2700      	movs	r7, #0
    9208:	2500      	movs	r5, #0
    920a:	e618      	b.n	8e3e <__aeabi_dsub+0x19a>
    920c:	4c54      	ldr	r4, [pc, #336]	; (9360 <__aeabi_dsub+0x6bc>)
    920e:	42a0      	cmp	r0, r4
    9210:	d062      	beq.n	92d8 <__aeabi_dsub+0x634>
    9212:	4653      	mov	r3, sl
    9214:	2480      	movs	r4, #128	; 0x80
    9216:	425b      	negs	r3, r3
    9218:	469a      	mov	sl, r3
    921a:	0424      	lsls	r4, r4, #16
    921c:	4327      	orrs	r7, r4
    921e:	4653      	mov	r3, sl
    9220:	2b38      	cmp	r3, #56	; 0x38
    9222:	dd00      	ble.n	9226 <__aeabi_dsub+0x582>
    9224:	e08e      	b.n	9344 <__aeabi_dsub+0x6a0>
    9226:	2b1f      	cmp	r3, #31
    9228:	dd00      	ble.n	922c <__aeabi_dsub+0x588>
    922a:	e09d      	b.n	9368 <__aeabi_dsub+0x6c4>
    922c:	2420      	movs	r4, #32
    922e:	1ae3      	subs	r3, r4, r3
    9230:	469b      	mov	fp, r3
    9232:	1c3b      	adds	r3, r7, #0
    9234:	4659      	mov	r1, fp
    9236:	408b      	lsls	r3, r1
    9238:	4651      	mov	r1, sl
    923a:	4699      	mov	r9, r3
    923c:	1c2b      	adds	r3, r5, #0
    923e:	40cb      	lsrs	r3, r1
    9240:	469c      	mov	ip, r3
    9242:	464b      	mov	r3, r9
    9244:	4664      	mov	r4, ip
    9246:	4323      	orrs	r3, r4
    9248:	469c      	mov	ip, r3
    924a:	465b      	mov	r3, fp
    924c:	409d      	lsls	r5, r3
    924e:	4663      	mov	r3, ip
    9250:	1e6c      	subs	r4, r5, #1
    9252:	41a5      	sbcs	r5, r4
    9254:	40cf      	lsrs	r7, r1
    9256:	431d      	orrs	r5, r3
    9258:	9b01      	ldr	r3, [sp, #4]
    925a:	18bf      	adds	r7, r7, r2
    925c:	469c      	mov	ip, r3
    925e:	4465      	add	r5, ip
    9260:	429d      	cmp	r5, r3
    9262:	4192      	sbcs	r2, r2
    9264:	4252      	negs	r2, r2
    9266:	18bf      	adds	r7, r7, r2
    9268:	1c04      	adds	r4, r0, #0
    926a:	e613      	b.n	8e94 <__aeabi_dsub+0x1f0>
    926c:	1c10      	adds	r0, r2, #0
    926e:	9901      	ldr	r1, [sp, #4]
    9270:	4308      	orrs	r0, r1
    9272:	d100      	bne.n	9276 <__aeabi_dsub+0x5d2>
    9274:	e548      	b.n	8d08 <__aeabi_dsub+0x64>
    9276:	1a68      	subs	r0, r5, r1
    9278:	4684      	mov	ip, r0
    927a:	4285      	cmp	r5, r0
    927c:	4180      	sbcs	r0, r0
    927e:	1abe      	subs	r6, r7, r2
    9280:	4240      	negs	r0, r0
    9282:	1a30      	subs	r0, r6, r0
    9284:	0206      	lsls	r6, r0, #8
    9286:	d400      	bmi.n	928a <__aeabi_dsub+0x5e6>
    9288:	e647      	b.n	8f1a <__aeabi_dsub+0x276>
    928a:	468c      	mov	ip, r1
    928c:	1b4d      	subs	r5, r1, r5
    928e:	45ac      	cmp	ip, r5
    9290:	4189      	sbcs	r1, r1
    9292:	1bd2      	subs	r2, r2, r7
    9294:	4249      	negs	r1, r1
    9296:	1a57      	subs	r7, r2, r1
    9298:	4698      	mov	r8, r3
    929a:	e535      	b.n	8d08 <__aeabi_dsub+0x64>
    929c:	1c10      	adds	r0, r2, #0
    929e:	9901      	ldr	r1, [sp, #4]
    92a0:	4308      	orrs	r0, r1
    92a2:	d034      	beq.n	930e <__aeabi_dsub+0x66a>
    92a4:	2480      	movs	r4, #128	; 0x80
    92a6:	0778      	lsls	r0, r7, #29
    92a8:	08ed      	lsrs	r5, r5, #3
    92aa:	08ff      	lsrs	r7, r7, #3
    92ac:	0324      	lsls	r4, r4, #12
    92ae:	4328      	orrs	r0, r5
    92b0:	4227      	tst	r7, r4
    92b2:	d008      	beq.n	92c6 <__aeabi_dsub+0x622>
    92b4:	08d6      	lsrs	r6, r2, #3
    92b6:	4226      	tst	r6, r4
    92b8:	d105      	bne.n	92c6 <__aeabi_dsub+0x622>
    92ba:	08c9      	lsrs	r1, r1, #3
    92bc:	0752      	lsls	r2, r2, #29
    92be:	430a      	orrs	r2, r1
    92c0:	1c10      	adds	r0, r2, #0
    92c2:	1c37      	adds	r7, r6, #0
    92c4:	4698      	mov	r8, r3
    92c6:	00ff      	lsls	r7, r7, #3
    92c8:	0f42      	lsrs	r2, r0, #29
    92ca:	4317      	orrs	r7, r2
    92cc:	00c5      	lsls	r5, r0, #3
    92ce:	4c24      	ldr	r4, [pc, #144]	; (9360 <__aeabi_dsub+0x6bc>)
    92d0:	e51a      	b.n	8d08 <__aeabi_dsub+0x64>
    92d2:	4c23      	ldr	r4, [pc, #140]	; (9360 <__aeabi_dsub+0x6bc>)
    92d4:	42a0      	cmp	r0, r4
    92d6:	d1a2      	bne.n	921e <__aeabi_dsub+0x57a>
    92d8:	1c17      	adds	r7, r2, #0
    92da:	9d01      	ldr	r5, [sp, #4]
    92dc:	1c04      	adds	r4, r0, #0
    92de:	e513      	b.n	8d08 <__aeabi_dsub+0x64>
    92e0:	2b00      	cmp	r3, #0
    92e2:	d035      	beq.n	9350 <__aeabi_dsub+0x6ac>
    92e4:	1c13      	adds	r3, r2, #0
    92e6:	9901      	ldr	r1, [sp, #4]
    92e8:	430b      	orrs	r3, r1
    92ea:	d010      	beq.n	930e <__aeabi_dsub+0x66a>
    92ec:	2480      	movs	r4, #128	; 0x80
    92ee:	0778      	lsls	r0, r7, #29
    92f0:	08ed      	lsrs	r5, r5, #3
    92f2:	08ff      	lsrs	r7, r7, #3
    92f4:	0324      	lsls	r4, r4, #12
    92f6:	4328      	orrs	r0, r5
    92f8:	4227      	tst	r7, r4
    92fa:	d0e4      	beq.n	92c6 <__aeabi_dsub+0x622>
    92fc:	08d3      	lsrs	r3, r2, #3
    92fe:	4223      	tst	r3, r4
    9300:	d1e1      	bne.n	92c6 <__aeabi_dsub+0x622>
    9302:	08c9      	lsrs	r1, r1, #3
    9304:	0752      	lsls	r2, r2, #29
    9306:	430a      	orrs	r2, r1
    9308:	1c10      	adds	r0, r2, #0
    930a:	1c1f      	adds	r7, r3, #0
    930c:	e7db      	b.n	92c6 <__aeabi_dsub+0x622>
    930e:	4c14      	ldr	r4, [pc, #80]	; (9360 <__aeabi_dsub+0x6bc>)
    9310:	e4fa      	b.n	8d08 <__aeabi_dsub+0x64>
    9312:	2200      	movs	r2, #0
    9314:	e73f      	b.n	9196 <__aeabi_dsub+0x4f2>
    9316:	464c      	mov	r4, r9
    9318:	1c3e      	adds	r6, r7, #0
    931a:	3c20      	subs	r4, #32
    931c:	40e6      	lsrs	r6, r4
    931e:	4649      	mov	r1, r9
    9320:	1c34      	adds	r4, r6, #0
    9322:	2920      	cmp	r1, #32
    9324:	d032      	beq.n	938c <__aeabi_dsub+0x6e8>
    9326:	2640      	movs	r6, #64	; 0x40
    9328:	1a76      	subs	r6, r6, r1
    932a:	40b7      	lsls	r7, r6
    932c:	433d      	orrs	r5, r7
    932e:	1e6f      	subs	r7, r5, #1
    9330:	41bd      	sbcs	r5, r7
    9332:	2700      	movs	r7, #0
    9334:	4325      	orrs	r5, r4
    9336:	e6a8      	b.n	908a <__aeabi_dsub+0x3e6>
    9338:	2780      	movs	r7, #128	; 0x80
    933a:	2600      	movs	r6, #0
    933c:	03ff      	lsls	r7, r7, #15
    933e:	4c08      	ldr	r4, [pc, #32]	; (9360 <__aeabi_dsub+0x6bc>)
    9340:	2500      	movs	r5, #0
    9342:	e57c      	b.n	8e3e <__aeabi_dsub+0x19a>
    9344:	433d      	orrs	r5, r7
    9346:	1e6f      	subs	r7, r5, #1
    9348:	41bd      	sbcs	r5, r7
    934a:	2700      	movs	r7, #0
    934c:	b2ed      	uxtb	r5, r5
    934e:	e783      	b.n	9258 <__aeabi_dsub+0x5b4>
    9350:	1c17      	adds	r7, r2, #0
    9352:	9d01      	ldr	r5, [sp, #4]
    9354:	4c02      	ldr	r4, [pc, #8]	; (9360 <__aeabi_dsub+0x6bc>)
    9356:	e4d7      	b.n	8d08 <__aeabi_dsub+0x64>
    9358:	1c17      	adds	r7, r2, #0
    935a:	9d01      	ldr	r5, [sp, #4]
    935c:	e4d4      	b.n	8d08 <__aeabi_dsub+0x64>
    935e:	46c0      	nop			; (mov r8, r8)
    9360:	000007ff 	.word	0x000007ff
    9364:	ff7fffff 	.word	0xff7fffff
    9368:	4654      	mov	r4, sl
    936a:	1c3b      	adds	r3, r7, #0
    936c:	3c20      	subs	r4, #32
    936e:	40e3      	lsrs	r3, r4
    9370:	1c1c      	adds	r4, r3, #0
    9372:	4653      	mov	r3, sl
    9374:	2b20      	cmp	r3, #32
    9376:	d00d      	beq.n	9394 <__aeabi_dsub+0x6f0>
    9378:	2340      	movs	r3, #64	; 0x40
    937a:	4651      	mov	r1, sl
    937c:	1a5b      	subs	r3, r3, r1
    937e:	409f      	lsls	r7, r3
    9380:	433d      	orrs	r5, r7
    9382:	1e6f      	subs	r7, r5, #1
    9384:	41bd      	sbcs	r5, r7
    9386:	2700      	movs	r7, #0
    9388:	4325      	orrs	r5, r4
    938a:	e765      	b.n	9258 <__aeabi_dsub+0x5b4>
    938c:	2700      	movs	r7, #0
    938e:	e7cd      	b.n	932c <__aeabi_dsub+0x688>
    9390:	1c0d      	adds	r5, r1, #0
    9392:	e5c8      	b.n	8f26 <__aeabi_dsub+0x282>
    9394:	2700      	movs	r7, #0
    9396:	e7f3      	b.n	9380 <__aeabi_dsub+0x6dc>

00009398 <__aeabi_d2iz>:
    9398:	030b      	lsls	r3, r1, #12
    939a:	b530      	push	{r4, r5, lr}
    939c:	4c13      	ldr	r4, [pc, #76]	; (93ec <__aeabi_d2iz+0x54>)
    939e:	0b1a      	lsrs	r2, r3, #12
    93a0:	004b      	lsls	r3, r1, #1
    93a2:	1c05      	adds	r5, r0, #0
    93a4:	0d5b      	lsrs	r3, r3, #21
    93a6:	0fc9      	lsrs	r1, r1, #31
    93a8:	2000      	movs	r0, #0
    93aa:	42a3      	cmp	r3, r4
    93ac:	dd10      	ble.n	93d0 <__aeabi_d2iz+0x38>
    93ae:	4810      	ldr	r0, [pc, #64]	; (93f0 <__aeabi_d2iz+0x58>)
    93b0:	4283      	cmp	r3, r0
    93b2:	dc0e      	bgt.n	93d2 <__aeabi_d2iz+0x3a>
    93b4:	2080      	movs	r0, #128	; 0x80
    93b6:	4c0f      	ldr	r4, [pc, #60]	; (93f4 <__aeabi_d2iz+0x5c>)
    93b8:	0340      	lsls	r0, r0, #13
    93ba:	4302      	orrs	r2, r0
    93bc:	1ae4      	subs	r4, r4, r3
    93be:	2c1f      	cmp	r4, #31
    93c0:	dd0a      	ble.n	93d8 <__aeabi_d2iz+0x40>
    93c2:	480d      	ldr	r0, [pc, #52]	; (93f8 <__aeabi_d2iz+0x60>)
    93c4:	1ac3      	subs	r3, r0, r3
    93c6:	40da      	lsrs	r2, r3
    93c8:	1c13      	adds	r3, r2, #0
    93ca:	4248      	negs	r0, r1
    93cc:	4043      	eors	r3, r0
    93ce:	1858      	adds	r0, r3, r1
    93d0:	bd30      	pop	{r4, r5, pc}
    93d2:	4b0a      	ldr	r3, [pc, #40]	; (93fc <__aeabi_d2iz+0x64>)
    93d4:	18c8      	adds	r0, r1, r3
    93d6:	e7fb      	b.n	93d0 <__aeabi_d2iz+0x38>
    93d8:	1c28      	adds	r0, r5, #0
    93da:	40e0      	lsrs	r0, r4
    93dc:	4c08      	ldr	r4, [pc, #32]	; (9400 <__aeabi_d2iz+0x68>)
    93de:	46a4      	mov	ip, r4
    93e0:	4463      	add	r3, ip
    93e2:	409a      	lsls	r2, r3
    93e4:	1c13      	adds	r3, r2, #0
    93e6:	4303      	orrs	r3, r0
    93e8:	e7ef      	b.n	93ca <__aeabi_d2iz+0x32>
    93ea:	46c0      	nop			; (mov r8, r8)
    93ec:	000003fe 	.word	0x000003fe
    93f0:	0000041d 	.word	0x0000041d
    93f4:	00000433 	.word	0x00000433
    93f8:	00000413 	.word	0x00000413
    93fc:	7fffffff 	.word	0x7fffffff
    9400:	fffffbed 	.word	0xfffffbed

00009404 <__aeabi_i2d>:
    9404:	b538      	push	{r3, r4, r5, lr}
    9406:	1e04      	subs	r4, r0, #0
    9408:	d016      	beq.n	9438 <__aeabi_i2d+0x34>
    940a:	0fc5      	lsrs	r5, r0, #31
    940c:	d000      	beq.n	9410 <__aeabi_i2d+0xc>
    940e:	4244      	negs	r4, r0
    9410:	1c20      	adds	r0, r4, #0
    9412:	f000 f949 	bl	96a8 <__clzsi2>
    9416:	4b17      	ldr	r3, [pc, #92]	; (9474 <__aeabi_i2d+0x70>)
    9418:	1a1b      	subs	r3, r3, r0
    941a:	280a      	cmp	r0, #10
    941c:	dc21      	bgt.n	9462 <__aeabi_i2d+0x5e>
    941e:	1c02      	adds	r2, r0, #0
    9420:	1c21      	adds	r1, r4, #0
    9422:	3215      	adds	r2, #21
    9424:	4091      	lsls	r1, r2
    9426:	1c0a      	adds	r2, r1, #0
    9428:	210b      	movs	r1, #11
    942a:	1a08      	subs	r0, r1, r0
    942c:	40c4      	lsrs	r4, r0
    942e:	055b      	lsls	r3, r3, #21
    9430:	0324      	lsls	r4, r4, #12
    9432:	0b24      	lsrs	r4, r4, #12
    9434:	0d5b      	lsrs	r3, r3, #21
    9436:	e003      	b.n	9440 <__aeabi_i2d+0x3c>
    9438:	2500      	movs	r5, #0
    943a:	2300      	movs	r3, #0
    943c:	2400      	movs	r4, #0
    943e:	2200      	movs	r2, #0
    9440:	2100      	movs	r1, #0
    9442:	1c10      	adds	r0, r2, #0
    9444:	0324      	lsls	r4, r4, #12
    9446:	0d0a      	lsrs	r2, r1, #20
    9448:	0512      	lsls	r2, r2, #20
    944a:	0b24      	lsrs	r4, r4, #12
    944c:	4314      	orrs	r4, r2
    944e:	4a0a      	ldr	r2, [pc, #40]	; (9478 <__aeabi_i2d+0x74>)
    9450:	051b      	lsls	r3, r3, #20
    9452:	4014      	ands	r4, r2
    9454:	431c      	orrs	r4, r3
    9456:	0064      	lsls	r4, r4, #1
    9458:	07ed      	lsls	r5, r5, #31
    945a:	0864      	lsrs	r4, r4, #1
    945c:	432c      	orrs	r4, r5
    945e:	1c21      	adds	r1, r4, #0
    9460:	bd38      	pop	{r3, r4, r5, pc}
    9462:	380b      	subs	r0, #11
    9464:	4084      	lsls	r4, r0
    9466:	055b      	lsls	r3, r3, #21
    9468:	0324      	lsls	r4, r4, #12
    946a:	0b24      	lsrs	r4, r4, #12
    946c:	0d5b      	lsrs	r3, r3, #21
    946e:	2200      	movs	r2, #0
    9470:	e7e6      	b.n	9440 <__aeabi_i2d+0x3c>
    9472:	46c0      	nop			; (mov r8, r8)
    9474:	0000041e 	.word	0x0000041e
    9478:	800fffff 	.word	0x800fffff

0000947c <__aeabi_ui2d>:
    947c:	b510      	push	{r4, lr}
    947e:	1e04      	subs	r4, r0, #0
    9480:	d010      	beq.n	94a4 <__aeabi_ui2d+0x28>
    9482:	f000 f911 	bl	96a8 <__clzsi2>
    9486:	4a14      	ldr	r2, [pc, #80]	; (94d8 <__aeabi_ui2d+0x5c>)
    9488:	1a12      	subs	r2, r2, r0
    948a:	280a      	cmp	r0, #10
    948c:	dc1a      	bgt.n	94c4 <__aeabi_ui2d+0x48>
    948e:	230b      	movs	r3, #11
    9490:	1c21      	adds	r1, r4, #0
    9492:	1a1b      	subs	r3, r3, r0
    9494:	40d9      	lsrs	r1, r3
    9496:	3015      	adds	r0, #21
    9498:	030b      	lsls	r3, r1, #12
    949a:	0552      	lsls	r2, r2, #21
    949c:	4084      	lsls	r4, r0
    949e:	0b1b      	lsrs	r3, r3, #12
    94a0:	0d52      	lsrs	r2, r2, #21
    94a2:	e001      	b.n	94a8 <__aeabi_ui2d+0x2c>
    94a4:	2200      	movs	r2, #0
    94a6:	2300      	movs	r3, #0
    94a8:	2100      	movs	r1, #0
    94aa:	031b      	lsls	r3, r3, #12
    94ac:	1c20      	adds	r0, r4, #0
    94ae:	0b1c      	lsrs	r4, r3, #12
    94b0:	0d0b      	lsrs	r3, r1, #20
    94b2:	051b      	lsls	r3, r3, #20
    94b4:	4323      	orrs	r3, r4
    94b6:	4c09      	ldr	r4, [pc, #36]	; (94dc <__aeabi_ui2d+0x60>)
    94b8:	0512      	lsls	r2, r2, #20
    94ba:	4023      	ands	r3, r4
    94bc:	4313      	orrs	r3, r2
    94be:	005b      	lsls	r3, r3, #1
    94c0:	0859      	lsrs	r1, r3, #1
    94c2:	bd10      	pop	{r4, pc}
    94c4:	1c03      	adds	r3, r0, #0
    94c6:	3b0b      	subs	r3, #11
    94c8:	409c      	lsls	r4, r3
    94ca:	0552      	lsls	r2, r2, #21
    94cc:	0323      	lsls	r3, r4, #12
    94ce:	0b1b      	lsrs	r3, r3, #12
    94d0:	0d52      	lsrs	r2, r2, #21
    94d2:	2400      	movs	r4, #0
    94d4:	e7e8      	b.n	94a8 <__aeabi_ui2d+0x2c>
    94d6:	46c0      	nop			; (mov r8, r8)
    94d8:	0000041e 	.word	0x0000041e
    94dc:	800fffff 	.word	0x800fffff

000094e0 <__aeabi_f2d>:
    94e0:	0042      	lsls	r2, r0, #1
    94e2:	0e12      	lsrs	r2, r2, #24
    94e4:	1c51      	adds	r1, r2, #1
    94e6:	b538      	push	{r3, r4, r5, lr}
    94e8:	b2c9      	uxtb	r1, r1
    94ea:	0243      	lsls	r3, r0, #9
    94ec:	0a5d      	lsrs	r5, r3, #9
    94ee:	0fc4      	lsrs	r4, r0, #31
    94f0:	2901      	cmp	r1, #1
    94f2:	dd15      	ble.n	9520 <__aeabi_f2d+0x40>
    94f4:	21e0      	movs	r1, #224	; 0xe0
    94f6:	0089      	lsls	r1, r1, #2
    94f8:	468c      	mov	ip, r1
    94fa:	076d      	lsls	r5, r5, #29
    94fc:	0b1b      	lsrs	r3, r3, #12
    94fe:	4462      	add	r2, ip
    9500:	2100      	movs	r1, #0
    9502:	1c28      	adds	r0, r5, #0
    9504:	0d0d      	lsrs	r5, r1, #20
    9506:	052d      	lsls	r5, r5, #20
    9508:	432b      	orrs	r3, r5
    950a:	4d1c      	ldr	r5, [pc, #112]	; (957c <__aeabi_f2d+0x9c>)
    950c:	0552      	lsls	r2, r2, #21
    950e:	402b      	ands	r3, r5
    9510:	0852      	lsrs	r2, r2, #1
    9512:	4313      	orrs	r3, r2
    9514:	005b      	lsls	r3, r3, #1
    9516:	07e4      	lsls	r4, r4, #31
    9518:	085b      	lsrs	r3, r3, #1
    951a:	4323      	orrs	r3, r4
    951c:	1c19      	adds	r1, r3, #0
    951e:	bd38      	pop	{r3, r4, r5, pc}
    9520:	2a00      	cmp	r2, #0
    9522:	d115      	bne.n	9550 <__aeabi_f2d+0x70>
    9524:	2d00      	cmp	r5, #0
    9526:	d01f      	beq.n	9568 <__aeabi_f2d+0x88>
    9528:	1c28      	adds	r0, r5, #0
    952a:	f000 f8bd 	bl	96a8 <__clzsi2>
    952e:	280a      	cmp	r0, #10
    9530:	dc1d      	bgt.n	956e <__aeabi_f2d+0x8e>
    9532:	230b      	movs	r3, #11
    9534:	1c2a      	adds	r2, r5, #0
    9536:	1a1b      	subs	r3, r3, r0
    9538:	40da      	lsrs	r2, r3
    953a:	1c13      	adds	r3, r2, #0
    953c:	1c02      	adds	r2, r0, #0
    953e:	3215      	adds	r2, #21
    9540:	4095      	lsls	r5, r2
    9542:	4a0f      	ldr	r2, [pc, #60]	; (9580 <__aeabi_f2d+0xa0>)
    9544:	031b      	lsls	r3, r3, #12
    9546:	1a12      	subs	r2, r2, r0
    9548:	0552      	lsls	r2, r2, #21
    954a:	0b1b      	lsrs	r3, r3, #12
    954c:	0d52      	lsrs	r2, r2, #21
    954e:	e7d7      	b.n	9500 <__aeabi_f2d+0x20>
    9550:	2d00      	cmp	r5, #0
    9552:	d006      	beq.n	9562 <__aeabi_f2d+0x82>
    9554:	2280      	movs	r2, #128	; 0x80
    9556:	0b1b      	lsrs	r3, r3, #12
    9558:	0312      	lsls	r2, r2, #12
    955a:	4313      	orrs	r3, r2
    955c:	076d      	lsls	r5, r5, #29
    955e:	4a09      	ldr	r2, [pc, #36]	; (9584 <__aeabi_f2d+0xa4>)
    9560:	e7ce      	b.n	9500 <__aeabi_f2d+0x20>
    9562:	4a08      	ldr	r2, [pc, #32]	; (9584 <__aeabi_f2d+0xa4>)
    9564:	2300      	movs	r3, #0
    9566:	e7cb      	b.n	9500 <__aeabi_f2d+0x20>
    9568:	2200      	movs	r2, #0
    956a:	2300      	movs	r3, #0
    956c:	e7c8      	b.n	9500 <__aeabi_f2d+0x20>
    956e:	1c03      	adds	r3, r0, #0
    9570:	3b0b      	subs	r3, #11
    9572:	409d      	lsls	r5, r3
    9574:	1c2b      	adds	r3, r5, #0
    9576:	2500      	movs	r5, #0
    9578:	e7e3      	b.n	9542 <__aeabi_f2d+0x62>
    957a:	46c0      	nop			; (mov r8, r8)
    957c:	800fffff 	.word	0x800fffff
    9580:	00000389 	.word	0x00000389
    9584:	000007ff 	.word	0x000007ff

00009588 <__aeabi_d2f>:
    9588:	b570      	push	{r4, r5, r6, lr}
    958a:	030b      	lsls	r3, r1, #12
    958c:	004d      	lsls	r5, r1, #1
    958e:	0f44      	lsrs	r4, r0, #29
    9590:	0d6d      	lsrs	r5, r5, #21
    9592:	0a5b      	lsrs	r3, r3, #9
    9594:	4323      	orrs	r3, r4
    9596:	1c6c      	adds	r4, r5, #1
    9598:	0564      	lsls	r4, r4, #21
    959a:	0fc9      	lsrs	r1, r1, #31
    959c:	00c2      	lsls	r2, r0, #3
    959e:	0d64      	lsrs	r4, r4, #21
    95a0:	2c01      	cmp	r4, #1
    95a2:	dd2a      	ble.n	95fa <__aeabi_d2f+0x72>
    95a4:	4c3b      	ldr	r4, [pc, #236]	; (9694 <__aeabi_d2f+0x10c>)
    95a6:	192c      	adds	r4, r5, r4
    95a8:	2cfe      	cmp	r4, #254	; 0xfe
    95aa:	dc1a      	bgt.n	95e2 <__aeabi_d2f+0x5a>
    95ac:	2c00      	cmp	r4, #0
    95ae:	dd35      	ble.n	961c <__aeabi_d2f+0x94>
    95b0:	0180      	lsls	r0, r0, #6
    95b2:	1e45      	subs	r5, r0, #1
    95b4:	41a8      	sbcs	r0, r5
    95b6:	00db      	lsls	r3, r3, #3
    95b8:	4303      	orrs	r3, r0
    95ba:	0f52      	lsrs	r2, r2, #29
    95bc:	4313      	orrs	r3, r2
    95be:	075a      	lsls	r2, r3, #29
    95c0:	d004      	beq.n	95cc <__aeabi_d2f+0x44>
    95c2:	220f      	movs	r2, #15
    95c4:	401a      	ands	r2, r3
    95c6:	2a04      	cmp	r2, #4
    95c8:	d000      	beq.n	95cc <__aeabi_d2f+0x44>
    95ca:	3304      	adds	r3, #4
    95cc:	2280      	movs	r2, #128	; 0x80
    95ce:	04d2      	lsls	r2, r2, #19
    95d0:	401a      	ands	r2, r3
    95d2:	d027      	beq.n	9624 <__aeabi_d2f+0x9c>
    95d4:	3401      	adds	r4, #1
    95d6:	2cff      	cmp	r4, #255	; 0xff
    95d8:	d003      	beq.n	95e2 <__aeabi_d2f+0x5a>
    95da:	019b      	lsls	r3, r3, #6
    95dc:	0a5b      	lsrs	r3, r3, #9
    95de:	b2e4      	uxtb	r4, r4
    95e0:	e001      	b.n	95e6 <__aeabi_d2f+0x5e>
    95e2:	24ff      	movs	r4, #255	; 0xff
    95e4:	2300      	movs	r3, #0
    95e6:	025b      	lsls	r3, r3, #9
    95e8:	05e4      	lsls	r4, r4, #23
    95ea:	0a5b      	lsrs	r3, r3, #9
    95ec:	4323      	orrs	r3, r4
    95ee:	005b      	lsls	r3, r3, #1
    95f0:	07c9      	lsls	r1, r1, #31
    95f2:	085b      	lsrs	r3, r3, #1
    95f4:	430b      	orrs	r3, r1
    95f6:	1c18      	adds	r0, r3, #0
    95f8:	bd70      	pop	{r4, r5, r6, pc}
    95fa:	2d00      	cmp	r5, #0
    95fc:	d106      	bne.n	960c <__aeabi_d2f+0x84>
    95fe:	4313      	orrs	r3, r2
    9600:	d10e      	bne.n	9620 <__aeabi_d2f+0x98>
    9602:	2400      	movs	r4, #0
    9604:	025b      	lsls	r3, r3, #9
    9606:	0a5b      	lsrs	r3, r3, #9
    9608:	b2e4      	uxtb	r4, r4
    960a:	e7ec      	b.n	95e6 <__aeabi_d2f+0x5e>
    960c:	431a      	orrs	r2, r3
    960e:	d0e8      	beq.n	95e2 <__aeabi_d2f+0x5a>
    9610:	2080      	movs	r0, #128	; 0x80
    9612:	00db      	lsls	r3, r3, #3
    9614:	0480      	lsls	r0, r0, #18
    9616:	4303      	orrs	r3, r0
    9618:	24ff      	movs	r4, #255	; 0xff
    961a:	e7d0      	b.n	95be <__aeabi_d2f+0x36>
    961c:	3417      	adds	r4, #23
    961e:	da0c      	bge.n	963a <__aeabi_d2f+0xb2>
    9620:	2305      	movs	r3, #5
    9622:	2400      	movs	r4, #0
    9624:	08db      	lsrs	r3, r3, #3
    9626:	2cff      	cmp	r4, #255	; 0xff
    9628:	d1ec      	bne.n	9604 <__aeabi_d2f+0x7c>
    962a:	2b00      	cmp	r3, #0
    962c:	d02d      	beq.n	968a <__aeabi_d2f+0x102>
    962e:	2280      	movs	r2, #128	; 0x80
    9630:	03d2      	lsls	r2, r2, #15
    9632:	4313      	orrs	r3, r2
    9634:	025b      	lsls	r3, r3, #9
    9636:	0a5b      	lsrs	r3, r3, #9
    9638:	e7d5      	b.n	95e6 <__aeabi_d2f+0x5e>
    963a:	2480      	movs	r4, #128	; 0x80
    963c:	4816      	ldr	r0, [pc, #88]	; (9698 <__aeabi_d2f+0x110>)
    963e:	0424      	lsls	r4, r4, #16
    9640:	4323      	orrs	r3, r4
    9642:	1b40      	subs	r0, r0, r5
    9644:	281f      	cmp	r0, #31
    9646:	dc0d      	bgt.n	9664 <__aeabi_d2f+0xdc>
    9648:	4c14      	ldr	r4, [pc, #80]	; (969c <__aeabi_d2f+0x114>)
    964a:	46a4      	mov	ip, r4
    964c:	4465      	add	r5, ip
    964e:	40ab      	lsls	r3, r5
    9650:	1c1c      	adds	r4, r3, #0
    9652:	1c13      	adds	r3, r2, #0
    9654:	40ab      	lsls	r3, r5
    9656:	1e5d      	subs	r5, r3, #1
    9658:	41ab      	sbcs	r3, r5
    965a:	40c2      	lsrs	r2, r0
    965c:	4323      	orrs	r3, r4
    965e:	4313      	orrs	r3, r2
    9660:	2400      	movs	r4, #0
    9662:	e7ac      	b.n	95be <__aeabi_d2f+0x36>
    9664:	1c1e      	adds	r6, r3, #0
    9666:	4c0e      	ldr	r4, [pc, #56]	; (96a0 <__aeabi_d2f+0x118>)
    9668:	1b64      	subs	r4, r4, r5
    966a:	40e6      	lsrs	r6, r4
    966c:	1c34      	adds	r4, r6, #0
    966e:	2820      	cmp	r0, #32
    9670:	d00d      	beq.n	968e <__aeabi_d2f+0x106>
    9672:	480c      	ldr	r0, [pc, #48]	; (96a4 <__aeabi_d2f+0x11c>)
    9674:	4684      	mov	ip, r0
    9676:	4465      	add	r5, ip
    9678:	40ab      	lsls	r3, r5
    967a:	1c1d      	adds	r5, r3, #0
    967c:	432a      	orrs	r2, r5
    967e:	1e53      	subs	r3, r2, #1
    9680:	419a      	sbcs	r2, r3
    9682:	1c13      	adds	r3, r2, #0
    9684:	4323      	orrs	r3, r4
    9686:	2400      	movs	r4, #0
    9688:	e799      	b.n	95be <__aeabi_d2f+0x36>
    968a:	2300      	movs	r3, #0
    968c:	e7ab      	b.n	95e6 <__aeabi_d2f+0x5e>
    968e:	2500      	movs	r5, #0
    9690:	e7f4      	b.n	967c <__aeabi_d2f+0xf4>
    9692:	46c0      	nop			; (mov r8, r8)
    9694:	fffffc80 	.word	0xfffffc80
    9698:	0000039e 	.word	0x0000039e
    969c:	fffffc82 	.word	0xfffffc82
    96a0:	0000037e 	.word	0x0000037e
    96a4:	fffffca2 	.word	0xfffffca2

000096a8 <__clzsi2>:
    96a8:	211c      	movs	r1, #28
    96aa:	2301      	movs	r3, #1
    96ac:	041b      	lsls	r3, r3, #16
    96ae:	4298      	cmp	r0, r3
    96b0:	d301      	bcc.n	96b6 <__clzsi2+0xe>
    96b2:	0c00      	lsrs	r0, r0, #16
    96b4:	3910      	subs	r1, #16
    96b6:	0a1b      	lsrs	r3, r3, #8
    96b8:	4298      	cmp	r0, r3
    96ba:	d301      	bcc.n	96c0 <__clzsi2+0x18>
    96bc:	0a00      	lsrs	r0, r0, #8
    96be:	3908      	subs	r1, #8
    96c0:	091b      	lsrs	r3, r3, #4
    96c2:	4298      	cmp	r0, r3
    96c4:	d301      	bcc.n	96ca <__clzsi2+0x22>
    96c6:	0900      	lsrs	r0, r0, #4
    96c8:	3904      	subs	r1, #4
    96ca:	a202      	add	r2, pc, #8	; (adr r2, 96d4 <__clzsi2+0x2c>)
    96cc:	5c10      	ldrb	r0, [r2, r0]
    96ce:	1840      	adds	r0, r0, r1
    96d0:	4770      	bx	lr
    96d2:	46c0      	nop			; (mov r8, r8)
    96d4:	02020304 	.word	0x02020304
    96d8:	01010101 	.word	0x01010101
	...

000096e4 <__cxa_atexit>:
    96e4:	4b05      	ldr	r3, [pc, #20]	; (96fc <__cxa_atexit+0x18>)
    96e6:	b510      	push	{r4, lr}
    96e8:	1c04      	adds	r4, r0, #0
    96ea:	1e18      	subs	r0, r3, #0
    96ec:	d005      	beq.n	96fa <__cxa_atexit+0x16>
    96ee:	1c13      	adds	r3, r2, #0
    96f0:	2002      	movs	r0, #2
    96f2:	1c0a      	adds	r2, r1, #0
    96f4:	1c21      	adds	r1, r4, #0
    96f6:	e000      	b.n	96fa <__cxa_atexit+0x16>
    96f8:	bf00      	nop
    96fa:	bd10      	pop	{r4, pc}
    96fc:	00000000 	.word	0x00000000

00009700 <__errno>:
    9700:	4b01      	ldr	r3, [pc, #4]	; (9708 <__errno+0x8>)
    9702:	6818      	ldr	r0, [r3, #0]
    9704:	4770      	bx	lr
    9706:	46c0      	nop			; (mov r8, r8)
    9708:	20000134 	.word	0x20000134

0000970c <exit>:
    970c:	4b08      	ldr	r3, [pc, #32]	; (9730 <exit+0x24>)
    970e:	b510      	push	{r4, lr}
    9710:	1c04      	adds	r4, r0, #0
    9712:	2b00      	cmp	r3, #0
    9714:	d002      	beq.n	971c <exit+0x10>
    9716:	2100      	movs	r1, #0
    9718:	e000      	b.n	971c <exit+0x10>
    971a:	bf00      	nop
    971c:	4b05      	ldr	r3, [pc, #20]	; (9734 <exit+0x28>)
    971e:	6818      	ldr	r0, [r3, #0]
    9720:	6a83      	ldr	r3, [r0, #40]	; 0x28
    9722:	2b00      	cmp	r3, #0
    9724:	d000      	beq.n	9728 <exit+0x1c>
    9726:	4798      	blx	r3
    9728:	1c20      	adds	r0, r4, #0
    972a:	f7fa fc4b 	bl	3fc4 <_exit>
    972e:	46c0      	nop			; (mov r8, r8)
    9730:	00000000 	.word	0x00000000
    9734:	0000fa4c 	.word	0x0000fa4c

00009738 <_fclose_r>:
    9738:	b570      	push	{r4, r5, r6, lr}
    973a:	1c05      	adds	r5, r0, #0
    973c:	1e0c      	subs	r4, r1, #0
    973e:	d101      	bne.n	9744 <_fclose_r+0xc>
    9740:	2000      	movs	r0, #0
    9742:	e049      	b.n	97d8 <_fclose_r+0xa0>
    9744:	2800      	cmp	r0, #0
    9746:	d004      	beq.n	9752 <_fclose_r+0x1a>
    9748:	6983      	ldr	r3, [r0, #24]
    974a:	2b00      	cmp	r3, #0
    974c:	d101      	bne.n	9752 <_fclose_r+0x1a>
    974e:	f000 f961 	bl	9a14 <__sinit>
    9752:	4b22      	ldr	r3, [pc, #136]	; (97dc <_fclose_r+0xa4>)
    9754:	429c      	cmp	r4, r3
    9756:	d101      	bne.n	975c <_fclose_r+0x24>
    9758:	686c      	ldr	r4, [r5, #4]
    975a:	e008      	b.n	976e <_fclose_r+0x36>
    975c:	4b20      	ldr	r3, [pc, #128]	; (97e0 <_fclose_r+0xa8>)
    975e:	429c      	cmp	r4, r3
    9760:	d101      	bne.n	9766 <_fclose_r+0x2e>
    9762:	68ac      	ldr	r4, [r5, #8]
    9764:	e003      	b.n	976e <_fclose_r+0x36>
    9766:	4b1f      	ldr	r3, [pc, #124]	; (97e4 <_fclose_r+0xac>)
    9768:	429c      	cmp	r4, r3
    976a:	d100      	bne.n	976e <_fclose_r+0x36>
    976c:	68ec      	ldr	r4, [r5, #12]
    976e:	220c      	movs	r2, #12
    9770:	5ea3      	ldrsh	r3, [r4, r2]
    9772:	2b00      	cmp	r3, #0
    9774:	d0e4      	beq.n	9740 <_fclose_r+0x8>
    9776:	1c28      	adds	r0, r5, #0
    9778:	1c21      	adds	r1, r4, #0
    977a:	f000 f83f 	bl	97fc <__sflush_r>
    977e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    9780:	1c06      	adds	r6, r0, #0
    9782:	2b00      	cmp	r3, #0
    9784:	d006      	beq.n	9794 <_fclose_r+0x5c>
    9786:	1c28      	adds	r0, r5, #0
    9788:	6a21      	ldr	r1, [r4, #32]
    978a:	4798      	blx	r3
    978c:	2800      	cmp	r0, #0
    978e:	da01      	bge.n	9794 <_fclose_r+0x5c>
    9790:	2601      	movs	r6, #1
    9792:	4276      	negs	r6, r6
    9794:	89a3      	ldrh	r3, [r4, #12]
    9796:	061b      	lsls	r3, r3, #24
    9798:	d503      	bpl.n	97a2 <_fclose_r+0x6a>
    979a:	1c28      	adds	r0, r5, #0
    979c:	6921      	ldr	r1, [r4, #16]
    979e:	f000 fb93 	bl	9ec8 <_free_r>
    97a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    97a4:	2900      	cmp	r1, #0
    97a6:	d008      	beq.n	97ba <_fclose_r+0x82>
    97a8:	1c23      	adds	r3, r4, #0
    97aa:	3344      	adds	r3, #68	; 0x44
    97ac:	4299      	cmp	r1, r3
    97ae:	d002      	beq.n	97b6 <_fclose_r+0x7e>
    97b0:	1c28      	adds	r0, r5, #0
    97b2:	f000 fb89 	bl	9ec8 <_free_r>
    97b6:	2300      	movs	r3, #0
    97b8:	6363      	str	r3, [r4, #52]	; 0x34
    97ba:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    97bc:	2900      	cmp	r1, #0
    97be:	d004      	beq.n	97ca <_fclose_r+0x92>
    97c0:	1c28      	adds	r0, r5, #0
    97c2:	f000 fb81 	bl	9ec8 <_free_r>
    97c6:	2300      	movs	r3, #0
    97c8:	64a3      	str	r3, [r4, #72]	; 0x48
    97ca:	f000 f993 	bl	9af4 <__sfp_lock_acquire>
    97ce:	2300      	movs	r3, #0
    97d0:	81a3      	strh	r3, [r4, #12]
    97d2:	f000 f990 	bl	9af6 <__sfp_lock_release>
    97d6:	1c30      	adds	r0, r6, #0
    97d8:	bd70      	pop	{r4, r5, r6, pc}
    97da:	46c0      	nop			; (mov r8, r8)
    97dc:	0000f9e8 	.word	0x0000f9e8
    97e0:	0000fa08 	.word	0x0000fa08
    97e4:	0000fa28 	.word	0x0000fa28

000097e8 <fclose>:
    97e8:	b508      	push	{r3, lr}
    97ea:	4b03      	ldr	r3, [pc, #12]	; (97f8 <fclose+0x10>)
    97ec:	1c01      	adds	r1, r0, #0
    97ee:	6818      	ldr	r0, [r3, #0]
    97f0:	f7ff ffa2 	bl	9738 <_fclose_r>
    97f4:	bd08      	pop	{r3, pc}
    97f6:	46c0      	nop			; (mov r8, r8)
    97f8:	20000134 	.word	0x20000134

000097fc <__sflush_r>:
    97fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    97fe:	898a      	ldrh	r2, [r1, #12]
    9800:	1c05      	adds	r5, r0, #0
    9802:	1c0c      	adds	r4, r1, #0
    9804:	0713      	lsls	r3, r2, #28
    9806:	d45e      	bmi.n	98c6 <__sflush_r+0xca>
    9808:	684b      	ldr	r3, [r1, #4]
    980a:	2b00      	cmp	r3, #0
    980c:	dc02      	bgt.n	9814 <__sflush_r+0x18>
    980e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    9810:	2b00      	cmp	r3, #0
    9812:	dd1a      	ble.n	984a <__sflush_r+0x4e>
    9814:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    9816:	2f00      	cmp	r7, #0
    9818:	d017      	beq.n	984a <__sflush_r+0x4e>
    981a:	2300      	movs	r3, #0
    981c:	682e      	ldr	r6, [r5, #0]
    981e:	602b      	str	r3, [r5, #0]
    9820:	2380      	movs	r3, #128	; 0x80
    9822:	015b      	lsls	r3, r3, #5
    9824:	401a      	ands	r2, r3
    9826:	d001      	beq.n	982c <__sflush_r+0x30>
    9828:	6d62      	ldr	r2, [r4, #84]	; 0x54
    982a:	e015      	b.n	9858 <__sflush_r+0x5c>
    982c:	1c28      	adds	r0, r5, #0
    982e:	6a21      	ldr	r1, [r4, #32]
    9830:	2301      	movs	r3, #1
    9832:	47b8      	blx	r7
    9834:	1c02      	adds	r2, r0, #0
    9836:	1c43      	adds	r3, r0, #1
    9838:	d10e      	bne.n	9858 <__sflush_r+0x5c>
    983a:	682b      	ldr	r3, [r5, #0]
    983c:	2b00      	cmp	r3, #0
    983e:	d00b      	beq.n	9858 <__sflush_r+0x5c>
    9840:	2b1d      	cmp	r3, #29
    9842:	d001      	beq.n	9848 <__sflush_r+0x4c>
    9844:	2b16      	cmp	r3, #22
    9846:	d102      	bne.n	984e <__sflush_r+0x52>
    9848:	602e      	str	r6, [r5, #0]
    984a:	2000      	movs	r0, #0
    984c:	e05e      	b.n	990c <__sflush_r+0x110>
    984e:	2140      	movs	r1, #64	; 0x40
    9850:	89a3      	ldrh	r3, [r4, #12]
    9852:	430b      	orrs	r3, r1
    9854:	81a3      	strh	r3, [r4, #12]
    9856:	e059      	b.n	990c <__sflush_r+0x110>
    9858:	89a3      	ldrh	r3, [r4, #12]
    985a:	075b      	lsls	r3, r3, #29
    985c:	d506      	bpl.n	986c <__sflush_r+0x70>
    985e:	6863      	ldr	r3, [r4, #4]
    9860:	1ad2      	subs	r2, r2, r3
    9862:	6b63      	ldr	r3, [r4, #52]	; 0x34
    9864:	2b00      	cmp	r3, #0
    9866:	d001      	beq.n	986c <__sflush_r+0x70>
    9868:	6c23      	ldr	r3, [r4, #64]	; 0x40
    986a:	1ad2      	subs	r2, r2, r3
    986c:	2300      	movs	r3, #0
    986e:	1c28      	adds	r0, r5, #0
    9870:	6a21      	ldr	r1, [r4, #32]
    9872:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    9874:	47b8      	blx	r7
    9876:	89a3      	ldrh	r3, [r4, #12]
    9878:	1c42      	adds	r2, r0, #1
    987a:	d106      	bne.n	988a <__sflush_r+0x8e>
    987c:	682a      	ldr	r2, [r5, #0]
    987e:	2a00      	cmp	r2, #0
    9880:	d003      	beq.n	988a <__sflush_r+0x8e>
    9882:	2a1d      	cmp	r2, #29
    9884:	d001      	beq.n	988a <__sflush_r+0x8e>
    9886:	2a16      	cmp	r2, #22
    9888:	d119      	bne.n	98be <__sflush_r+0xc2>
    988a:	2200      	movs	r2, #0
    988c:	6062      	str	r2, [r4, #4]
    988e:	6922      	ldr	r2, [r4, #16]
    9890:	6022      	str	r2, [r4, #0]
    9892:	04db      	lsls	r3, r3, #19
    9894:	d505      	bpl.n	98a2 <__sflush_r+0xa6>
    9896:	1c43      	adds	r3, r0, #1
    9898:	d102      	bne.n	98a0 <__sflush_r+0xa4>
    989a:	682b      	ldr	r3, [r5, #0]
    989c:	2b00      	cmp	r3, #0
    989e:	d100      	bne.n	98a2 <__sflush_r+0xa6>
    98a0:	6560      	str	r0, [r4, #84]	; 0x54
    98a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    98a4:	602e      	str	r6, [r5, #0]
    98a6:	2900      	cmp	r1, #0
    98a8:	d0cf      	beq.n	984a <__sflush_r+0x4e>
    98aa:	1c23      	adds	r3, r4, #0
    98ac:	3344      	adds	r3, #68	; 0x44
    98ae:	4299      	cmp	r1, r3
    98b0:	d002      	beq.n	98b8 <__sflush_r+0xbc>
    98b2:	1c28      	adds	r0, r5, #0
    98b4:	f000 fb08 	bl	9ec8 <_free_r>
    98b8:	2000      	movs	r0, #0
    98ba:	6360      	str	r0, [r4, #52]	; 0x34
    98bc:	e026      	b.n	990c <__sflush_r+0x110>
    98be:	2240      	movs	r2, #64	; 0x40
    98c0:	4313      	orrs	r3, r2
    98c2:	81a3      	strh	r3, [r4, #12]
    98c4:	e022      	b.n	990c <__sflush_r+0x110>
    98c6:	690f      	ldr	r7, [r1, #16]
    98c8:	2f00      	cmp	r7, #0
    98ca:	d0be      	beq.n	984a <__sflush_r+0x4e>
    98cc:	680b      	ldr	r3, [r1, #0]
    98ce:	600f      	str	r7, [r1, #0]
    98d0:	1bdb      	subs	r3, r3, r7
    98d2:	9301      	str	r3, [sp, #4]
    98d4:	2300      	movs	r3, #0
    98d6:	0792      	lsls	r2, r2, #30
    98d8:	d100      	bne.n	98dc <__sflush_r+0xe0>
    98da:	694b      	ldr	r3, [r1, #20]
    98dc:	60a3      	str	r3, [r4, #8]
    98de:	9b01      	ldr	r3, [sp, #4]
    98e0:	2b00      	cmp	r3, #0
    98e2:	ddb2      	ble.n	984a <__sflush_r+0x4e>
    98e4:	1c28      	adds	r0, r5, #0
    98e6:	6a21      	ldr	r1, [r4, #32]
    98e8:	1c3a      	adds	r2, r7, #0
    98ea:	9b01      	ldr	r3, [sp, #4]
    98ec:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    98ee:	47b0      	blx	r6
    98f0:	2800      	cmp	r0, #0
    98f2:	dc06      	bgt.n	9902 <__sflush_r+0x106>
    98f4:	2240      	movs	r2, #64	; 0x40
    98f6:	2001      	movs	r0, #1
    98f8:	89a3      	ldrh	r3, [r4, #12]
    98fa:	4240      	negs	r0, r0
    98fc:	4313      	orrs	r3, r2
    98fe:	81a3      	strh	r3, [r4, #12]
    9900:	e004      	b.n	990c <__sflush_r+0x110>
    9902:	9b01      	ldr	r3, [sp, #4]
    9904:	183f      	adds	r7, r7, r0
    9906:	1a1b      	subs	r3, r3, r0
    9908:	9301      	str	r3, [sp, #4]
    990a:	e7e8      	b.n	98de <__sflush_r+0xe2>
    990c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00009910 <_fflush_r>:
    9910:	b538      	push	{r3, r4, r5, lr}
    9912:	690b      	ldr	r3, [r1, #16]
    9914:	1c05      	adds	r5, r0, #0
    9916:	1c0c      	adds	r4, r1, #0
    9918:	2b00      	cmp	r3, #0
    991a:	d101      	bne.n	9920 <_fflush_r+0x10>
    991c:	2000      	movs	r0, #0
    991e:	e01c      	b.n	995a <_fflush_r+0x4a>
    9920:	2800      	cmp	r0, #0
    9922:	d004      	beq.n	992e <_fflush_r+0x1e>
    9924:	6983      	ldr	r3, [r0, #24]
    9926:	2b00      	cmp	r3, #0
    9928:	d101      	bne.n	992e <_fflush_r+0x1e>
    992a:	f000 f873 	bl	9a14 <__sinit>
    992e:	4b0b      	ldr	r3, [pc, #44]	; (995c <_fflush_r+0x4c>)
    9930:	429c      	cmp	r4, r3
    9932:	d101      	bne.n	9938 <_fflush_r+0x28>
    9934:	686c      	ldr	r4, [r5, #4]
    9936:	e008      	b.n	994a <_fflush_r+0x3a>
    9938:	4b09      	ldr	r3, [pc, #36]	; (9960 <_fflush_r+0x50>)
    993a:	429c      	cmp	r4, r3
    993c:	d101      	bne.n	9942 <_fflush_r+0x32>
    993e:	68ac      	ldr	r4, [r5, #8]
    9940:	e003      	b.n	994a <_fflush_r+0x3a>
    9942:	4b08      	ldr	r3, [pc, #32]	; (9964 <_fflush_r+0x54>)
    9944:	429c      	cmp	r4, r3
    9946:	d100      	bne.n	994a <_fflush_r+0x3a>
    9948:	68ec      	ldr	r4, [r5, #12]
    994a:	220c      	movs	r2, #12
    994c:	5ea3      	ldrsh	r3, [r4, r2]
    994e:	2b00      	cmp	r3, #0
    9950:	d0e4      	beq.n	991c <_fflush_r+0xc>
    9952:	1c28      	adds	r0, r5, #0
    9954:	1c21      	adds	r1, r4, #0
    9956:	f7ff ff51 	bl	97fc <__sflush_r>
    995a:	bd38      	pop	{r3, r4, r5, pc}
    995c:	0000f9e8 	.word	0x0000f9e8
    9960:	0000fa08 	.word	0x0000fa08
    9964:	0000fa28 	.word	0x0000fa28

00009968 <fflush>:
    9968:	b508      	push	{r3, lr}
    996a:	1e01      	subs	r1, r0, #0
    996c:	d105      	bne.n	997a <fflush+0x12>
    996e:	4b05      	ldr	r3, [pc, #20]	; (9984 <fflush+0x1c>)
    9970:	4905      	ldr	r1, [pc, #20]	; (9988 <fflush+0x20>)
    9972:	6818      	ldr	r0, [r3, #0]
    9974:	f000 f9d8 	bl	9d28 <_fwalk_reent>
    9978:	e003      	b.n	9982 <fflush+0x1a>
    997a:	4b04      	ldr	r3, [pc, #16]	; (998c <fflush+0x24>)
    997c:	6818      	ldr	r0, [r3, #0]
    997e:	f7ff ffc7 	bl	9910 <_fflush_r>
    9982:	bd08      	pop	{r3, pc}
    9984:	0000fa4c 	.word	0x0000fa4c
    9988:	00009911 	.word	0x00009911
    998c:	20000134 	.word	0x20000134

00009990 <_cleanup_r>:
    9990:	b508      	push	{r3, lr}
    9992:	4902      	ldr	r1, [pc, #8]	; (999c <_cleanup_r+0xc>)
    9994:	f000 f9c8 	bl	9d28 <_fwalk_reent>
    9998:	bd08      	pop	{r3, pc}
    999a:	46c0      	nop			; (mov r8, r8)
    999c:	00009911 	.word	0x00009911

000099a0 <std.isra.0>:
    99a0:	2300      	movs	r3, #0
    99a2:	b510      	push	{r4, lr}
    99a4:	1c04      	adds	r4, r0, #0
    99a6:	6003      	str	r3, [r0, #0]
    99a8:	6043      	str	r3, [r0, #4]
    99aa:	6083      	str	r3, [r0, #8]
    99ac:	8181      	strh	r1, [r0, #12]
    99ae:	6643      	str	r3, [r0, #100]	; 0x64
    99b0:	81c2      	strh	r2, [r0, #14]
    99b2:	6103      	str	r3, [r0, #16]
    99b4:	6143      	str	r3, [r0, #20]
    99b6:	6183      	str	r3, [r0, #24]
    99b8:	1c19      	adds	r1, r3, #0
    99ba:	2208      	movs	r2, #8
    99bc:	305c      	adds	r0, #92	; 0x5c
    99be:	f000 fa7b 	bl	9eb8 <memset>
    99c2:	4b05      	ldr	r3, [pc, #20]	; (99d8 <std.isra.0+0x38>)
    99c4:	6224      	str	r4, [r4, #32]
    99c6:	6263      	str	r3, [r4, #36]	; 0x24
    99c8:	4b04      	ldr	r3, [pc, #16]	; (99dc <std.isra.0+0x3c>)
    99ca:	62a3      	str	r3, [r4, #40]	; 0x28
    99cc:	4b04      	ldr	r3, [pc, #16]	; (99e0 <std.isra.0+0x40>)
    99ce:	62e3      	str	r3, [r4, #44]	; 0x2c
    99d0:	4b04      	ldr	r3, [pc, #16]	; (99e4 <std.isra.0+0x44>)
    99d2:	6323      	str	r3, [r4, #48]	; 0x30
    99d4:	bd10      	pop	{r4, pc}
    99d6:	46c0      	nop			; (mov r8, r8)
    99d8:	0000b4fd 	.word	0x0000b4fd
    99dc:	0000b529 	.word	0x0000b529
    99e0:	0000b561 	.word	0x0000b561
    99e4:	0000b58d 	.word	0x0000b58d

000099e8 <__sfmoreglue>:
    99e8:	b570      	push	{r4, r5, r6, lr}
    99ea:	2568      	movs	r5, #104	; 0x68
    99ec:	1e4b      	subs	r3, r1, #1
    99ee:	435d      	muls	r5, r3
    99f0:	1c0e      	adds	r6, r1, #0
    99f2:	1c29      	adds	r1, r5, #0
    99f4:	3174      	adds	r1, #116	; 0x74
    99f6:	f000 faad 	bl	9f54 <_malloc_r>
    99fa:	1e04      	subs	r4, r0, #0
    99fc:	d008      	beq.n	9a10 <__sfmoreglue+0x28>
    99fe:	2100      	movs	r1, #0
    9a00:	1c2a      	adds	r2, r5, #0
    9a02:	6001      	str	r1, [r0, #0]
    9a04:	6046      	str	r6, [r0, #4]
    9a06:	300c      	adds	r0, #12
    9a08:	60a0      	str	r0, [r4, #8]
    9a0a:	3268      	adds	r2, #104	; 0x68
    9a0c:	f000 fa54 	bl	9eb8 <memset>
    9a10:	1c20      	adds	r0, r4, #0
    9a12:	bd70      	pop	{r4, r5, r6, pc}

00009a14 <__sinit>:
    9a14:	6983      	ldr	r3, [r0, #24]
    9a16:	b513      	push	{r0, r1, r4, lr}
    9a18:	2b00      	cmp	r3, #0
    9a1a:	d128      	bne.n	9a6e <__sinit+0x5a>
    9a1c:	6483      	str	r3, [r0, #72]	; 0x48
    9a1e:	64c3      	str	r3, [r0, #76]	; 0x4c
    9a20:	6503      	str	r3, [r0, #80]	; 0x50
    9a22:	4b13      	ldr	r3, [pc, #76]	; (9a70 <__sinit+0x5c>)
    9a24:	4a13      	ldr	r2, [pc, #76]	; (9a74 <__sinit+0x60>)
    9a26:	681b      	ldr	r3, [r3, #0]
    9a28:	6282      	str	r2, [r0, #40]	; 0x28
    9a2a:	9301      	str	r3, [sp, #4]
    9a2c:	4298      	cmp	r0, r3
    9a2e:	d101      	bne.n	9a34 <__sinit+0x20>
    9a30:	2301      	movs	r3, #1
    9a32:	6183      	str	r3, [r0, #24]
    9a34:	1c04      	adds	r4, r0, #0
    9a36:	f000 f81f 	bl	9a78 <__sfp>
    9a3a:	6060      	str	r0, [r4, #4]
    9a3c:	1c20      	adds	r0, r4, #0
    9a3e:	f000 f81b 	bl	9a78 <__sfp>
    9a42:	60a0      	str	r0, [r4, #8]
    9a44:	1c20      	adds	r0, r4, #0
    9a46:	f000 f817 	bl	9a78 <__sfp>
    9a4a:	2104      	movs	r1, #4
    9a4c:	60e0      	str	r0, [r4, #12]
    9a4e:	2200      	movs	r2, #0
    9a50:	6860      	ldr	r0, [r4, #4]
    9a52:	f7ff ffa5 	bl	99a0 <std.isra.0>
    9a56:	68a0      	ldr	r0, [r4, #8]
    9a58:	2109      	movs	r1, #9
    9a5a:	2201      	movs	r2, #1
    9a5c:	f7ff ffa0 	bl	99a0 <std.isra.0>
    9a60:	68e0      	ldr	r0, [r4, #12]
    9a62:	2112      	movs	r1, #18
    9a64:	2202      	movs	r2, #2
    9a66:	f7ff ff9b 	bl	99a0 <std.isra.0>
    9a6a:	2301      	movs	r3, #1
    9a6c:	61a3      	str	r3, [r4, #24]
    9a6e:	bd13      	pop	{r0, r1, r4, pc}
    9a70:	0000fa4c 	.word	0x0000fa4c
    9a74:	00009991 	.word	0x00009991

00009a78 <__sfp>:
    9a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9a7a:	4b1d      	ldr	r3, [pc, #116]	; (9af0 <__sfp+0x78>)
    9a7c:	1c06      	adds	r6, r0, #0
    9a7e:	681d      	ldr	r5, [r3, #0]
    9a80:	69ab      	ldr	r3, [r5, #24]
    9a82:	2b00      	cmp	r3, #0
    9a84:	d102      	bne.n	9a8c <__sfp+0x14>
    9a86:	1c28      	adds	r0, r5, #0
    9a88:	f7ff ffc4 	bl	9a14 <__sinit>
    9a8c:	3548      	adds	r5, #72	; 0x48
    9a8e:	68ac      	ldr	r4, [r5, #8]
    9a90:	686b      	ldr	r3, [r5, #4]
    9a92:	3b01      	subs	r3, #1
    9a94:	d405      	bmi.n	9aa2 <__sfp+0x2a>
    9a96:	220c      	movs	r2, #12
    9a98:	5ea7      	ldrsh	r7, [r4, r2]
    9a9a:	2f00      	cmp	r7, #0
    9a9c:	d010      	beq.n	9ac0 <__sfp+0x48>
    9a9e:	3468      	adds	r4, #104	; 0x68
    9aa0:	e7f7      	b.n	9a92 <__sfp+0x1a>
    9aa2:	682b      	ldr	r3, [r5, #0]
    9aa4:	2b00      	cmp	r3, #0
    9aa6:	d106      	bne.n	9ab6 <__sfp+0x3e>
    9aa8:	1c30      	adds	r0, r6, #0
    9aaa:	2104      	movs	r1, #4
    9aac:	f7ff ff9c 	bl	99e8 <__sfmoreglue>
    9ab0:	6028      	str	r0, [r5, #0]
    9ab2:	2800      	cmp	r0, #0
    9ab4:	d001      	beq.n	9aba <__sfp+0x42>
    9ab6:	682d      	ldr	r5, [r5, #0]
    9ab8:	e7e9      	b.n	9a8e <__sfp+0x16>
    9aba:	230c      	movs	r3, #12
    9abc:	6033      	str	r3, [r6, #0]
    9abe:	e016      	b.n	9aee <__sfp+0x76>
    9ac0:	2301      	movs	r3, #1
    9ac2:	1c20      	adds	r0, r4, #0
    9ac4:	425b      	negs	r3, r3
    9ac6:	81e3      	strh	r3, [r4, #14]
    9ac8:	3302      	adds	r3, #2
    9aca:	81a3      	strh	r3, [r4, #12]
    9acc:	6667      	str	r7, [r4, #100]	; 0x64
    9ace:	6027      	str	r7, [r4, #0]
    9ad0:	60a7      	str	r7, [r4, #8]
    9ad2:	6067      	str	r7, [r4, #4]
    9ad4:	6127      	str	r7, [r4, #16]
    9ad6:	6167      	str	r7, [r4, #20]
    9ad8:	61a7      	str	r7, [r4, #24]
    9ada:	305c      	adds	r0, #92	; 0x5c
    9adc:	1c39      	adds	r1, r7, #0
    9ade:	2208      	movs	r2, #8
    9ae0:	f000 f9ea 	bl	9eb8 <memset>
    9ae4:	1c20      	adds	r0, r4, #0
    9ae6:	6367      	str	r7, [r4, #52]	; 0x34
    9ae8:	63a7      	str	r7, [r4, #56]	; 0x38
    9aea:	64a7      	str	r7, [r4, #72]	; 0x48
    9aec:	64e7      	str	r7, [r4, #76]	; 0x4c
    9aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9af0:	0000fa4c 	.word	0x0000fa4c

00009af4 <__sfp_lock_acquire>:
    9af4:	4770      	bx	lr

00009af6 <__sfp_lock_release>:
    9af6:	4770      	bx	lr

00009af8 <_fopen_r>:
    9af8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9afa:	1c0f      	adds	r7, r1, #0
    9afc:	1c11      	adds	r1, r2, #0
    9afe:	aa01      	add	r2, sp, #4
    9b00:	1c05      	adds	r5, r0, #0
    9b02:	f003 fc91 	bl	d428 <__sflags>
    9b06:	1e06      	subs	r6, r0, #0
    9b08:	d101      	bne.n	9b0e <_fopen_r+0x16>
    9b0a:	2400      	movs	r4, #0
    9b0c:	e027      	b.n	9b5e <_fopen_r+0x66>
    9b0e:	1c28      	adds	r0, r5, #0
    9b10:	f7ff ffb2 	bl	9a78 <__sfp>
    9b14:	1e04      	subs	r4, r0, #0
    9b16:	d0f8      	beq.n	9b0a <_fopen_r+0x12>
    9b18:	23db      	movs	r3, #219	; 0xdb
    9b1a:	1c28      	adds	r0, r5, #0
    9b1c:	1c39      	adds	r1, r7, #0
    9b1e:	9a01      	ldr	r2, [sp, #4]
    9b20:	005b      	lsls	r3, r3, #1
    9b22:	f001 fb51 	bl	b1c8 <_open_r>
    9b26:	2800      	cmp	r0, #0
    9b28:	da06      	bge.n	9b38 <_fopen_r+0x40>
    9b2a:	2500      	movs	r5, #0
    9b2c:	f7ff ffe2 	bl	9af4 <__sfp_lock_acquire>
    9b30:	81a5      	strh	r5, [r4, #12]
    9b32:	f7ff ffe0 	bl	9af6 <__sfp_lock_release>
    9b36:	e7e8      	b.n	9b0a <_fopen_r+0x12>
    9b38:	4b0a      	ldr	r3, [pc, #40]	; (9b64 <_fopen_r+0x6c>)
    9b3a:	81e0      	strh	r0, [r4, #14]
    9b3c:	6263      	str	r3, [r4, #36]	; 0x24
    9b3e:	4b0a      	ldr	r3, [pc, #40]	; (9b68 <_fopen_r+0x70>)
    9b40:	81a6      	strh	r6, [r4, #12]
    9b42:	62a3      	str	r3, [r4, #40]	; 0x28
    9b44:	4b09      	ldr	r3, [pc, #36]	; (9b6c <_fopen_r+0x74>)
    9b46:	6224      	str	r4, [r4, #32]
    9b48:	62e3      	str	r3, [r4, #44]	; 0x2c
    9b4a:	4b09      	ldr	r3, [pc, #36]	; (9b70 <_fopen_r+0x78>)
    9b4c:	6323      	str	r3, [r4, #48]	; 0x30
    9b4e:	05f3      	lsls	r3, r6, #23
    9b50:	d505      	bpl.n	9b5e <_fopen_r+0x66>
    9b52:	1c28      	adds	r0, r5, #0
    9b54:	1c21      	adds	r1, r4, #0
    9b56:	2200      	movs	r2, #0
    9b58:	2302      	movs	r3, #2
    9b5a:	f000 f849 	bl	9bf0 <_fseek_r>
    9b5e:	1c20      	adds	r0, r4, #0
    9b60:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    9b62:	46c0      	nop			; (mov r8, r8)
    9b64:	0000b4fd 	.word	0x0000b4fd
    9b68:	0000b529 	.word	0x0000b529
    9b6c:	0000b561 	.word	0x0000b561
    9b70:	0000b58d 	.word	0x0000b58d

00009b74 <fopen>:
    9b74:	b508      	push	{r3, lr}
    9b76:	1c03      	adds	r3, r0, #0
    9b78:	1c0a      	adds	r2, r1, #0
    9b7a:	4903      	ldr	r1, [pc, #12]	; (9b88 <fopen+0x14>)
    9b7c:	6808      	ldr	r0, [r1, #0]
    9b7e:	1c19      	adds	r1, r3, #0
    9b80:	f7ff ffba 	bl	9af8 <_fopen_r>
    9b84:	bd08      	pop	{r3, pc}
    9b86:	46c0      	nop			; (mov r8, r8)
    9b88:	20000134 	.word	0x20000134

00009b8c <_fputc_r>:
    9b8c:	b570      	push	{r4, r5, r6, lr}
    9b8e:	1c05      	adds	r5, r0, #0
    9b90:	1c0e      	adds	r6, r1, #0
    9b92:	1c14      	adds	r4, r2, #0
    9b94:	2800      	cmp	r0, #0
    9b96:	d004      	beq.n	9ba2 <_fputc_r+0x16>
    9b98:	6983      	ldr	r3, [r0, #24]
    9b9a:	2b00      	cmp	r3, #0
    9b9c:	d101      	bne.n	9ba2 <_fputc_r+0x16>
    9b9e:	f7ff ff39 	bl	9a14 <__sinit>
    9ba2:	4b0a      	ldr	r3, [pc, #40]	; (9bcc <_fputc_r+0x40>)
    9ba4:	429c      	cmp	r4, r3
    9ba6:	d101      	bne.n	9bac <_fputc_r+0x20>
    9ba8:	686c      	ldr	r4, [r5, #4]
    9baa:	e008      	b.n	9bbe <_fputc_r+0x32>
    9bac:	4b08      	ldr	r3, [pc, #32]	; (9bd0 <_fputc_r+0x44>)
    9bae:	429c      	cmp	r4, r3
    9bb0:	d101      	bne.n	9bb6 <_fputc_r+0x2a>
    9bb2:	68ac      	ldr	r4, [r5, #8]
    9bb4:	e003      	b.n	9bbe <_fputc_r+0x32>
    9bb6:	4b07      	ldr	r3, [pc, #28]	; (9bd4 <_fputc_r+0x48>)
    9bb8:	429c      	cmp	r4, r3
    9bba:	d100      	bne.n	9bbe <_fputc_r+0x32>
    9bbc:	68ec      	ldr	r4, [r5, #12]
    9bbe:	1c28      	adds	r0, r5, #0
    9bc0:	1c31      	adds	r1, r6, #0
    9bc2:	1c22      	adds	r2, r4, #0
    9bc4:	f001 fb14 	bl	b1f0 <_putc_r>
    9bc8:	bd70      	pop	{r4, r5, r6, pc}
    9bca:	46c0      	nop			; (mov r8, r8)
    9bcc:	0000f9e8 	.word	0x0000f9e8
    9bd0:	0000fa08 	.word	0x0000fa08
    9bd4:	0000fa28 	.word	0x0000fa28

00009bd8 <fputc>:
    9bd8:	b508      	push	{r3, lr}
    9bda:	1c03      	adds	r3, r0, #0
    9bdc:	1c0a      	adds	r2, r1, #0
    9bde:	4903      	ldr	r1, [pc, #12]	; (9bec <fputc+0x14>)
    9be0:	6808      	ldr	r0, [r1, #0]
    9be2:	1c19      	adds	r1, r3, #0
    9be4:	f7ff ffd2 	bl	9b8c <_fputc_r>
    9be8:	bd08      	pop	{r3, pc}
    9bea:	46c0      	nop			; (mov r8, r8)
    9bec:	20000134 	.word	0x20000134

00009bf0 <_fseek_r>:
    9bf0:	b508      	push	{r3, lr}
    9bf2:	f000 f801 	bl	9bf8 <_fseeko_r>
    9bf6:	bd08      	pop	{r3, pc}

00009bf8 <_fseeko_r>:
    9bf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9bfa:	1c05      	adds	r5, r0, #0
    9bfc:	1c0c      	adds	r4, r1, #0
    9bfe:	9201      	str	r2, [sp, #4]
    9c00:	1c1e      	adds	r6, r3, #0
    9c02:	2800      	cmp	r0, #0
    9c04:	d004      	beq.n	9c10 <_fseeko_r+0x18>
    9c06:	6983      	ldr	r3, [r0, #24]
    9c08:	2b00      	cmp	r3, #0
    9c0a:	d101      	bne.n	9c10 <_fseeko_r+0x18>
    9c0c:	f7ff ff02 	bl	9a14 <__sinit>
    9c10:	4b41      	ldr	r3, [pc, #260]	; (9d18 <_fseeko_r+0x120>)
    9c12:	429c      	cmp	r4, r3
    9c14:	d101      	bne.n	9c1a <_fseeko_r+0x22>
    9c16:	686c      	ldr	r4, [r5, #4]
    9c18:	e008      	b.n	9c2c <_fseeko_r+0x34>
    9c1a:	4b40      	ldr	r3, [pc, #256]	; (9d1c <_fseeko_r+0x124>)
    9c1c:	429c      	cmp	r4, r3
    9c1e:	d101      	bne.n	9c24 <_fseeko_r+0x2c>
    9c20:	68ac      	ldr	r4, [r5, #8]
    9c22:	e003      	b.n	9c2c <_fseeko_r+0x34>
    9c24:	4b3e      	ldr	r3, [pc, #248]	; (9d20 <_fseeko_r+0x128>)
    9c26:	429c      	cmp	r4, r3
    9c28:	d100      	bne.n	9c2c <_fseeko_r+0x34>
    9c2a:	68ec      	ldr	r4, [r5, #12]
    9c2c:	2284      	movs	r2, #132	; 0x84
    9c2e:	89a3      	ldrh	r3, [r4, #12]
    9c30:	0052      	lsls	r2, r2, #1
    9c32:	4013      	ands	r3, r2
    9c34:	4293      	cmp	r3, r2
    9c36:	d103      	bne.n	9c40 <_fseeko_r+0x48>
    9c38:	1c28      	adds	r0, r5, #0
    9c3a:	1c21      	adds	r1, r4, #0
    9c3c:	f7ff fe68 	bl	9910 <_fflush_r>
    9c40:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    9c42:	9300      	str	r3, [sp, #0]
    9c44:	2b00      	cmp	r3, #0
    9c46:	d101      	bne.n	9c4c <_fseeko_r+0x54>
    9c48:	331d      	adds	r3, #29
    9c4a:	e031      	b.n	9cb0 <_fseeko_r+0xb8>
    9c4c:	2e01      	cmp	r6, #1
    9c4e:	d005      	beq.n	9c5c <_fseeko_r+0x64>
    9c50:	2e02      	cmp	r6, #2
    9c52:	d031      	beq.n	9cb8 <_fseeko_r+0xc0>
    9c54:	2316      	movs	r3, #22
    9c56:	2e00      	cmp	r6, #0
    9c58:	d12a      	bne.n	9cb0 <_fseeko_r+0xb8>
    9c5a:	e02d      	b.n	9cb8 <_fseeko_r+0xc0>
    9c5c:	1c28      	adds	r0, r5, #0
    9c5e:	1c21      	adds	r1, r4, #0
    9c60:	f7ff fe56 	bl	9910 <_fflush_r>
    9c64:	2380      	movs	r3, #128	; 0x80
    9c66:	89a2      	ldrh	r2, [r4, #12]
    9c68:	015b      	lsls	r3, r3, #5
    9c6a:	401a      	ands	r2, r3
    9c6c:	d001      	beq.n	9c72 <_fseeko_r+0x7a>
    9c6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
    9c70:	e006      	b.n	9c80 <_fseeko_r+0x88>
    9c72:	1c33      	adds	r3, r6, #0
    9c74:	1c28      	adds	r0, r5, #0
    9c76:	6a21      	ldr	r1, [r4, #32]
    9c78:	9e00      	ldr	r6, [sp, #0]
    9c7a:	47b0      	blx	r6
    9c7c:	1c43      	adds	r3, r0, #1
    9c7e:	d018      	beq.n	9cb2 <_fseeko_r+0xba>
    9c80:	89a3      	ldrh	r3, [r4, #12]
    9c82:	075a      	lsls	r2, r3, #29
    9c84:	d507      	bpl.n	9c96 <_fseeko_r+0x9e>
    9c86:	6863      	ldr	r3, [r4, #4]
    9c88:	1ac0      	subs	r0, r0, r3
    9c8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    9c8c:	2b00      	cmp	r3, #0
    9c8e:	d00a      	beq.n	9ca6 <_fseeko_r+0xae>
    9c90:	6c23      	ldr	r3, [r4, #64]	; 0x40
    9c92:	1ac0      	subs	r0, r0, r3
    9c94:	e007      	b.n	9ca6 <_fseeko_r+0xae>
    9c96:	071b      	lsls	r3, r3, #28
    9c98:	d505      	bpl.n	9ca6 <_fseeko_r+0xae>
    9c9a:	6823      	ldr	r3, [r4, #0]
    9c9c:	2b00      	cmp	r3, #0
    9c9e:	d002      	beq.n	9ca6 <_fseeko_r+0xae>
    9ca0:	6922      	ldr	r2, [r4, #16]
    9ca2:	1a9b      	subs	r3, r3, r2
    9ca4:	18c0      	adds	r0, r0, r3
    9ca6:	9b01      	ldr	r3, [sp, #4]
    9ca8:	2600      	movs	r6, #0
    9caa:	181b      	adds	r3, r3, r0
    9cac:	9301      	str	r3, [sp, #4]
    9cae:	e003      	b.n	9cb8 <_fseeko_r+0xc0>
    9cb0:	602b      	str	r3, [r5, #0]
    9cb2:	2701      	movs	r7, #1
    9cb4:	427f      	negs	r7, r7
    9cb6:	e02d      	b.n	9d14 <_fseeko_r+0x11c>
    9cb8:	6923      	ldr	r3, [r4, #16]
    9cba:	2b00      	cmp	r3, #0
    9cbc:	d103      	bne.n	9cc6 <_fseeko_r+0xce>
    9cbe:	1c28      	adds	r0, r5, #0
    9cc0:	1c21      	adds	r1, r4, #0
    9cc2:	f000 f879 	bl	9db8 <__smakebuf_r>
    9cc6:	1c28      	adds	r0, r5, #0
    9cc8:	1c21      	adds	r1, r4, #0
    9cca:	f7ff fe21 	bl	9910 <_fflush_r>
    9cce:	1e07      	subs	r7, r0, #0
    9cd0:	d1ef      	bne.n	9cb2 <_fseeko_r+0xba>
    9cd2:	1c33      	adds	r3, r6, #0
    9cd4:	1c28      	adds	r0, r5, #0
    9cd6:	6a21      	ldr	r1, [r4, #32]
    9cd8:	9a01      	ldr	r2, [sp, #4]
    9cda:	9e00      	ldr	r6, [sp, #0]
    9cdc:	47b0      	blx	r6
    9cde:	1c43      	adds	r3, r0, #1
    9ce0:	d0e7      	beq.n	9cb2 <_fseeko_r+0xba>
    9ce2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    9ce4:	2900      	cmp	r1, #0
    9ce6:	d008      	beq.n	9cfa <_fseeko_r+0x102>
    9ce8:	1c23      	adds	r3, r4, #0
    9cea:	3344      	adds	r3, #68	; 0x44
    9cec:	4299      	cmp	r1, r3
    9cee:	d002      	beq.n	9cf6 <_fseeko_r+0xfe>
    9cf0:	1c28      	adds	r0, r5, #0
    9cf2:	f000 f8e9 	bl	9ec8 <_free_r>
    9cf6:	2300      	movs	r3, #0
    9cf8:	6363      	str	r3, [r4, #52]	; 0x34
    9cfa:	2100      	movs	r1, #0
    9cfc:	1c20      	adds	r0, r4, #0
    9cfe:	6923      	ldr	r3, [r4, #16]
    9d00:	89a2      	ldrh	r2, [r4, #12]
    9d02:	6023      	str	r3, [r4, #0]
    9d04:	4b07      	ldr	r3, [pc, #28]	; (9d24 <_fseeko_r+0x12c>)
    9d06:	6061      	str	r1, [r4, #4]
    9d08:	4013      	ands	r3, r2
    9d0a:	81a3      	strh	r3, [r4, #12]
    9d0c:	305c      	adds	r0, #92	; 0x5c
    9d0e:	2208      	movs	r2, #8
    9d10:	f000 f8d2 	bl	9eb8 <memset>
    9d14:	1c38      	adds	r0, r7, #0
    9d16:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    9d18:	0000f9e8 	.word	0x0000f9e8
    9d1c:	0000fa08 	.word	0x0000fa08
    9d20:	0000fa28 	.word	0x0000fa28
    9d24:	fffff7df 	.word	0xfffff7df

00009d28 <_fwalk_reent>:
    9d28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9d2a:	1c04      	adds	r4, r0, #0
    9d2c:	1c07      	adds	r7, r0, #0
    9d2e:	2600      	movs	r6, #0
    9d30:	9101      	str	r1, [sp, #4]
    9d32:	3448      	adds	r4, #72	; 0x48
    9d34:	2c00      	cmp	r4, #0
    9d36:	d016      	beq.n	9d66 <_fwalk_reent+0x3e>
    9d38:	6863      	ldr	r3, [r4, #4]
    9d3a:	68a5      	ldr	r5, [r4, #8]
    9d3c:	9300      	str	r3, [sp, #0]
    9d3e:	9b00      	ldr	r3, [sp, #0]
    9d40:	3b01      	subs	r3, #1
    9d42:	9300      	str	r3, [sp, #0]
    9d44:	d40d      	bmi.n	9d62 <_fwalk_reent+0x3a>
    9d46:	89ab      	ldrh	r3, [r5, #12]
    9d48:	2b01      	cmp	r3, #1
    9d4a:	d908      	bls.n	9d5e <_fwalk_reent+0x36>
    9d4c:	220e      	movs	r2, #14
    9d4e:	5eab      	ldrsh	r3, [r5, r2]
    9d50:	3301      	adds	r3, #1
    9d52:	d004      	beq.n	9d5e <_fwalk_reent+0x36>
    9d54:	1c38      	adds	r0, r7, #0
    9d56:	1c29      	adds	r1, r5, #0
    9d58:	9b01      	ldr	r3, [sp, #4]
    9d5a:	4798      	blx	r3
    9d5c:	4306      	orrs	r6, r0
    9d5e:	3568      	adds	r5, #104	; 0x68
    9d60:	e7ed      	b.n	9d3e <_fwalk_reent+0x16>
    9d62:	6824      	ldr	r4, [r4, #0]
    9d64:	e7e6      	b.n	9d34 <_fwalk_reent+0xc>
    9d66:	1c30      	adds	r0, r6, #0
    9d68:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00009d6c <__libc_init_array>:
    9d6c:	4b0e      	ldr	r3, [pc, #56]	; (9da8 <__libc_init_array+0x3c>)
    9d6e:	b570      	push	{r4, r5, r6, lr}
    9d70:	2500      	movs	r5, #0
    9d72:	1c1e      	adds	r6, r3, #0
    9d74:	4c0d      	ldr	r4, [pc, #52]	; (9dac <__libc_init_array+0x40>)
    9d76:	1ae4      	subs	r4, r4, r3
    9d78:	10a4      	asrs	r4, r4, #2
    9d7a:	42a5      	cmp	r5, r4
    9d7c:	d004      	beq.n	9d88 <__libc_init_array+0x1c>
    9d7e:	00ab      	lsls	r3, r5, #2
    9d80:	58f3      	ldr	r3, [r6, r3]
    9d82:	4798      	blx	r3
    9d84:	3501      	adds	r5, #1
    9d86:	e7f8      	b.n	9d7a <__libc_init_array+0xe>
    9d88:	f005 ffd0 	bl	fd2c <_init>
    9d8c:	4b08      	ldr	r3, [pc, #32]	; (9db0 <__libc_init_array+0x44>)
    9d8e:	2500      	movs	r5, #0
    9d90:	1c1e      	adds	r6, r3, #0
    9d92:	4c08      	ldr	r4, [pc, #32]	; (9db4 <__libc_init_array+0x48>)
    9d94:	1ae4      	subs	r4, r4, r3
    9d96:	10a4      	asrs	r4, r4, #2
    9d98:	42a5      	cmp	r5, r4
    9d9a:	d004      	beq.n	9da6 <__libc_init_array+0x3a>
    9d9c:	00ab      	lsls	r3, r5, #2
    9d9e:	58f3      	ldr	r3, [r6, r3]
    9da0:	4798      	blx	r3
    9da2:	3501      	adds	r5, #1
    9da4:	e7f8      	b.n	9d98 <__libc_init_array+0x2c>
    9da6:	bd70      	pop	{r4, r5, r6, pc}
    9da8:	0000fd38 	.word	0x0000fd38
    9dac:	0000fd38 	.word	0x0000fd38
    9db0:	0000fd38 	.word	0x0000fd38
    9db4:	0000fd4c 	.word	0x0000fd4c

00009db8 <__smakebuf_r>:
    9db8:	b5f0      	push	{r4, r5, r6, r7, lr}
    9dba:	898b      	ldrh	r3, [r1, #12]
    9dbc:	b091      	sub	sp, #68	; 0x44
    9dbe:	079b      	lsls	r3, r3, #30
    9dc0:	d506      	bpl.n	9dd0 <__smakebuf_r+0x18>
    9dc2:	1c0b      	adds	r3, r1, #0
    9dc4:	3347      	adds	r3, #71	; 0x47
    9dc6:	600b      	str	r3, [r1, #0]
    9dc8:	610b      	str	r3, [r1, #16]
    9dca:	2301      	movs	r3, #1
    9dcc:	614b      	str	r3, [r1, #20]
    9dce:	e045      	b.n	9e5c <__smakebuf_r+0xa4>
    9dd0:	1c0c      	adds	r4, r1, #0
    9dd2:	230e      	movs	r3, #14
    9dd4:	5ec9      	ldrsh	r1, [r1, r3]
    9dd6:	1c06      	adds	r6, r0, #0
    9dd8:	2900      	cmp	r1, #0
    9dda:	da04      	bge.n	9de6 <__smakebuf_r+0x2e>
    9ddc:	2380      	movs	r3, #128	; 0x80
    9dde:	89a5      	ldrh	r5, [r4, #12]
    9de0:	401d      	ands	r5, r3
    9de2:	d110      	bne.n	9e06 <__smakebuf_r+0x4e>
    9de4:	e00c      	b.n	9e00 <__smakebuf_r+0x48>
    9de6:	aa01      	add	r2, sp, #4
    9de8:	f003 fb56 	bl	d498 <_fstat_r>
    9dec:	2800      	cmp	r0, #0
    9dee:	dbf5      	blt.n	9ddc <__smakebuf_r+0x24>
    9df0:	23f0      	movs	r3, #240	; 0xf0
    9df2:	9d02      	ldr	r5, [sp, #8]
    9df4:	021b      	lsls	r3, r3, #8
    9df6:	401d      	ands	r5, r3
    9df8:	4b19      	ldr	r3, [pc, #100]	; (9e60 <__smakebuf_r+0xa8>)
    9dfa:	18ed      	adds	r5, r5, r3
    9dfc:	426b      	negs	r3, r5
    9dfe:	415d      	adcs	r5, r3
    9e00:	2780      	movs	r7, #128	; 0x80
    9e02:	00ff      	lsls	r7, r7, #3
    9e04:	e001      	b.n	9e0a <__smakebuf_r+0x52>
    9e06:	2500      	movs	r5, #0
    9e08:	2740      	movs	r7, #64	; 0x40
    9e0a:	1c30      	adds	r0, r6, #0
    9e0c:	1c39      	adds	r1, r7, #0
    9e0e:	f000 f8a1 	bl	9f54 <_malloc_r>
    9e12:	2800      	cmp	r0, #0
    9e14:	d10c      	bne.n	9e30 <__smakebuf_r+0x78>
    9e16:	89a3      	ldrh	r3, [r4, #12]
    9e18:	059a      	lsls	r2, r3, #22
    9e1a:	d41f      	bmi.n	9e5c <__smakebuf_r+0xa4>
    9e1c:	2202      	movs	r2, #2
    9e1e:	4313      	orrs	r3, r2
    9e20:	81a3      	strh	r3, [r4, #12]
    9e22:	1c23      	adds	r3, r4, #0
    9e24:	3347      	adds	r3, #71	; 0x47
    9e26:	6023      	str	r3, [r4, #0]
    9e28:	6123      	str	r3, [r4, #16]
    9e2a:	2301      	movs	r3, #1
    9e2c:	6163      	str	r3, [r4, #20]
    9e2e:	e015      	b.n	9e5c <__smakebuf_r+0xa4>
    9e30:	2280      	movs	r2, #128	; 0x80
    9e32:	4b0c      	ldr	r3, [pc, #48]	; (9e64 <__smakebuf_r+0xac>)
    9e34:	62b3      	str	r3, [r6, #40]	; 0x28
    9e36:	89a3      	ldrh	r3, [r4, #12]
    9e38:	6020      	str	r0, [r4, #0]
    9e3a:	4313      	orrs	r3, r2
    9e3c:	81a3      	strh	r3, [r4, #12]
    9e3e:	6120      	str	r0, [r4, #16]
    9e40:	6167      	str	r7, [r4, #20]
    9e42:	2d00      	cmp	r5, #0
    9e44:	d00a      	beq.n	9e5c <__smakebuf_r+0xa4>
    9e46:	230e      	movs	r3, #14
    9e48:	5ee1      	ldrsh	r1, [r4, r3]
    9e4a:	1c30      	adds	r0, r6, #0
    9e4c:	f003 fe4e 	bl	daec <_isatty_r>
    9e50:	2800      	cmp	r0, #0
    9e52:	d003      	beq.n	9e5c <__smakebuf_r+0xa4>
    9e54:	2201      	movs	r2, #1
    9e56:	89a3      	ldrh	r3, [r4, #12]
    9e58:	4313      	orrs	r3, r2
    9e5a:	81a3      	strh	r3, [r4, #12]
    9e5c:	b011      	add	sp, #68	; 0x44
    9e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9e60:	ffffe000 	.word	0xffffe000
    9e64:	00009991 	.word	0x00009991

00009e68 <malloc>:
    9e68:	b508      	push	{r3, lr}
    9e6a:	4b03      	ldr	r3, [pc, #12]	; (9e78 <malloc+0x10>)
    9e6c:	1c01      	adds	r1, r0, #0
    9e6e:	6818      	ldr	r0, [r3, #0]
    9e70:	f000 f870 	bl	9f54 <_malloc_r>
    9e74:	bd08      	pop	{r3, pc}
    9e76:	46c0      	nop			; (mov r8, r8)
    9e78:	20000134 	.word	0x20000134

00009e7c <free>:
    9e7c:	b508      	push	{r3, lr}
    9e7e:	4b03      	ldr	r3, [pc, #12]	; (9e8c <free+0x10>)
    9e80:	1c01      	adds	r1, r0, #0
    9e82:	6818      	ldr	r0, [r3, #0]
    9e84:	f000 f820 	bl	9ec8 <_free_r>
    9e88:	bd08      	pop	{r3, pc}
    9e8a:	46c0      	nop			; (mov r8, r8)
    9e8c:	20000134 	.word	0x20000134

00009e90 <memchr>:
    9e90:	b2c9      	uxtb	r1, r1
    9e92:	1882      	adds	r2, r0, r2
    9e94:	4290      	cmp	r0, r2
    9e96:	d004      	beq.n	9ea2 <memchr+0x12>
    9e98:	7803      	ldrb	r3, [r0, #0]
    9e9a:	428b      	cmp	r3, r1
    9e9c:	d002      	beq.n	9ea4 <memchr+0x14>
    9e9e:	3001      	adds	r0, #1
    9ea0:	e7f8      	b.n	9e94 <memchr+0x4>
    9ea2:	2000      	movs	r0, #0
    9ea4:	4770      	bx	lr

00009ea6 <memcpy>:
    9ea6:	2300      	movs	r3, #0
    9ea8:	b510      	push	{r4, lr}
    9eaa:	4293      	cmp	r3, r2
    9eac:	d003      	beq.n	9eb6 <memcpy+0x10>
    9eae:	5ccc      	ldrb	r4, [r1, r3]
    9eb0:	54c4      	strb	r4, [r0, r3]
    9eb2:	3301      	adds	r3, #1
    9eb4:	e7f9      	b.n	9eaa <memcpy+0x4>
    9eb6:	bd10      	pop	{r4, pc}

00009eb8 <memset>:
    9eb8:	1c03      	adds	r3, r0, #0
    9eba:	1882      	adds	r2, r0, r2
    9ebc:	4293      	cmp	r3, r2
    9ebe:	d002      	beq.n	9ec6 <memset+0xe>
    9ec0:	7019      	strb	r1, [r3, #0]
    9ec2:	3301      	adds	r3, #1
    9ec4:	e7fa      	b.n	9ebc <memset+0x4>
    9ec6:	4770      	bx	lr

00009ec8 <_free_r>:
    9ec8:	b530      	push	{r4, r5, lr}
    9eca:	2900      	cmp	r1, #0
    9ecc:	d03e      	beq.n	9f4c <_free_r+0x84>
    9ece:	3904      	subs	r1, #4
    9ed0:	680b      	ldr	r3, [r1, #0]
    9ed2:	2b00      	cmp	r3, #0
    9ed4:	da00      	bge.n	9ed8 <_free_r+0x10>
    9ed6:	18c9      	adds	r1, r1, r3
    9ed8:	4a1d      	ldr	r2, [pc, #116]	; (9f50 <_free_r+0x88>)
    9eda:	6813      	ldr	r3, [r2, #0]
    9edc:	1c14      	adds	r4, r2, #0
    9ede:	2b00      	cmp	r3, #0
    9ee0:	d102      	bne.n	9ee8 <_free_r+0x20>
    9ee2:	604b      	str	r3, [r1, #4]
    9ee4:	6011      	str	r1, [r2, #0]
    9ee6:	e031      	b.n	9f4c <_free_r+0x84>
    9ee8:	4299      	cmp	r1, r3
    9eea:	d20d      	bcs.n	9f08 <_free_r+0x40>
    9eec:	6808      	ldr	r0, [r1, #0]
    9eee:	180a      	adds	r2, r1, r0
    9ef0:	429a      	cmp	r2, r3
    9ef2:	d103      	bne.n	9efc <_free_r+0x34>
    9ef4:	6813      	ldr	r3, [r2, #0]
    9ef6:	18c3      	adds	r3, r0, r3
    9ef8:	600b      	str	r3, [r1, #0]
    9efa:	6853      	ldr	r3, [r2, #4]
    9efc:	604b      	str	r3, [r1, #4]
    9efe:	6021      	str	r1, [r4, #0]
    9f00:	e024      	b.n	9f4c <_free_r+0x84>
    9f02:	428a      	cmp	r2, r1
    9f04:	d803      	bhi.n	9f0e <_free_r+0x46>
    9f06:	1c13      	adds	r3, r2, #0
    9f08:	685a      	ldr	r2, [r3, #4]
    9f0a:	2a00      	cmp	r2, #0
    9f0c:	d1f9      	bne.n	9f02 <_free_r+0x3a>
    9f0e:	681d      	ldr	r5, [r3, #0]
    9f10:	195c      	adds	r4, r3, r5
    9f12:	428c      	cmp	r4, r1
    9f14:	d10b      	bne.n	9f2e <_free_r+0x66>
    9f16:	6809      	ldr	r1, [r1, #0]
    9f18:	1869      	adds	r1, r5, r1
    9f1a:	1858      	adds	r0, r3, r1
    9f1c:	6019      	str	r1, [r3, #0]
    9f1e:	4290      	cmp	r0, r2
    9f20:	d114      	bne.n	9f4c <_free_r+0x84>
    9f22:	6810      	ldr	r0, [r2, #0]
    9f24:	6852      	ldr	r2, [r2, #4]
    9f26:	1809      	adds	r1, r1, r0
    9f28:	6019      	str	r1, [r3, #0]
    9f2a:	605a      	str	r2, [r3, #4]
    9f2c:	e00e      	b.n	9f4c <_free_r+0x84>
    9f2e:	428c      	cmp	r4, r1
    9f30:	d902      	bls.n	9f38 <_free_r+0x70>
    9f32:	230c      	movs	r3, #12
    9f34:	6003      	str	r3, [r0, #0]
    9f36:	e009      	b.n	9f4c <_free_r+0x84>
    9f38:	6808      	ldr	r0, [r1, #0]
    9f3a:	180c      	adds	r4, r1, r0
    9f3c:	4294      	cmp	r4, r2
    9f3e:	d103      	bne.n	9f48 <_free_r+0x80>
    9f40:	6814      	ldr	r4, [r2, #0]
    9f42:	6852      	ldr	r2, [r2, #4]
    9f44:	1900      	adds	r0, r0, r4
    9f46:	6008      	str	r0, [r1, #0]
    9f48:	604a      	str	r2, [r1, #4]
    9f4a:	6059      	str	r1, [r3, #4]
    9f4c:	bd30      	pop	{r4, r5, pc}
    9f4e:	46c0      	nop			; (mov r8, r8)
    9f50:	20004710 	.word	0x20004710

00009f54 <_malloc_r>:
    9f54:	2303      	movs	r3, #3
    9f56:	b570      	push	{r4, r5, r6, lr}
    9f58:	1ccc      	adds	r4, r1, #3
    9f5a:	439c      	bics	r4, r3
    9f5c:	3408      	adds	r4, #8
    9f5e:	1c05      	adds	r5, r0, #0
    9f60:	2c0c      	cmp	r4, #12
    9f62:	d201      	bcs.n	9f68 <_malloc_r+0x14>
    9f64:	240c      	movs	r4, #12
    9f66:	e005      	b.n	9f74 <_malloc_r+0x20>
    9f68:	2c00      	cmp	r4, #0
    9f6a:	da03      	bge.n	9f74 <_malloc_r+0x20>
    9f6c:	230c      	movs	r3, #12
    9f6e:	2000      	movs	r0, #0
    9f70:	602b      	str	r3, [r5, #0]
    9f72:	e042      	b.n	9ffa <_malloc_r+0xa6>
    9f74:	428c      	cmp	r4, r1
    9f76:	d3f9      	bcc.n	9f6c <_malloc_r+0x18>
    9f78:	4a20      	ldr	r2, [pc, #128]	; (9ffc <_malloc_r+0xa8>)
    9f7a:	6813      	ldr	r3, [r2, #0]
    9f7c:	1c10      	adds	r0, r2, #0
    9f7e:	1c19      	adds	r1, r3, #0
    9f80:	2900      	cmp	r1, #0
    9f82:	d013      	beq.n	9fac <_malloc_r+0x58>
    9f84:	680a      	ldr	r2, [r1, #0]
    9f86:	1b12      	subs	r2, r2, r4
    9f88:	d40d      	bmi.n	9fa6 <_malloc_r+0x52>
    9f8a:	2a0b      	cmp	r2, #11
    9f8c:	d902      	bls.n	9f94 <_malloc_r+0x40>
    9f8e:	600a      	str	r2, [r1, #0]
    9f90:	188b      	adds	r3, r1, r2
    9f92:	e01f      	b.n	9fd4 <_malloc_r+0x80>
    9f94:	428b      	cmp	r3, r1
    9f96:	d102      	bne.n	9f9e <_malloc_r+0x4a>
    9f98:	685a      	ldr	r2, [r3, #4]
    9f9a:	6002      	str	r2, [r0, #0]
    9f9c:	e01b      	b.n	9fd6 <_malloc_r+0x82>
    9f9e:	684a      	ldr	r2, [r1, #4]
    9fa0:	605a      	str	r2, [r3, #4]
    9fa2:	1c0b      	adds	r3, r1, #0
    9fa4:	e017      	b.n	9fd6 <_malloc_r+0x82>
    9fa6:	1c0b      	adds	r3, r1, #0
    9fa8:	6849      	ldr	r1, [r1, #4]
    9faa:	e7e9      	b.n	9f80 <_malloc_r+0x2c>
    9fac:	4e14      	ldr	r6, [pc, #80]	; (a000 <_malloc_r+0xac>)
    9fae:	6833      	ldr	r3, [r6, #0]
    9fb0:	2b00      	cmp	r3, #0
    9fb2:	d103      	bne.n	9fbc <_malloc_r+0x68>
    9fb4:	1c28      	adds	r0, r5, #0
    9fb6:	f001 f97f 	bl	b2b8 <_sbrk_r>
    9fba:	6030      	str	r0, [r6, #0]
    9fbc:	1c28      	adds	r0, r5, #0
    9fbe:	1c21      	adds	r1, r4, #0
    9fc0:	f001 f97a 	bl	b2b8 <_sbrk_r>
    9fc4:	1c03      	adds	r3, r0, #0
    9fc6:	1c42      	adds	r2, r0, #1
    9fc8:	d0d0      	beq.n	9f6c <_malloc_r+0x18>
    9fca:	2203      	movs	r2, #3
    9fcc:	1cc6      	adds	r6, r0, #3
    9fce:	4396      	bics	r6, r2
    9fd0:	4286      	cmp	r6, r0
    9fd2:	d10a      	bne.n	9fea <_malloc_r+0x96>
    9fd4:	601c      	str	r4, [r3, #0]
    9fd6:	1c18      	adds	r0, r3, #0
    9fd8:	2107      	movs	r1, #7
    9fda:	300b      	adds	r0, #11
    9fdc:	1d1a      	adds	r2, r3, #4
    9fde:	4388      	bics	r0, r1
    9fe0:	1a82      	subs	r2, r0, r2
    9fe2:	d00a      	beq.n	9ffa <_malloc_r+0xa6>
    9fe4:	4251      	negs	r1, r2
    9fe6:	5099      	str	r1, [r3, r2]
    9fe8:	e007      	b.n	9ffa <_malloc_r+0xa6>
    9fea:	1a31      	subs	r1, r6, r0
    9fec:	1c28      	adds	r0, r5, #0
    9fee:	f001 f963 	bl	b2b8 <_sbrk_r>
    9ff2:	1c43      	adds	r3, r0, #1
    9ff4:	d0ba      	beq.n	9f6c <_malloc_r+0x18>
    9ff6:	1c33      	adds	r3, r6, #0
    9ff8:	e7ec      	b.n	9fd4 <_malloc_r+0x80>
    9ffa:	bd70      	pop	{r4, r5, r6, pc}
    9ffc:	20004710 	.word	0x20004710
    a000:	2000470c 	.word	0x2000470c

0000a004 <__sfputc_r>:
    a004:	6893      	ldr	r3, [r2, #8]
    a006:	b510      	push	{r4, lr}
    a008:	3b01      	subs	r3, #1
    a00a:	6093      	str	r3, [r2, #8]
    a00c:	2b00      	cmp	r3, #0
    a00e:	da05      	bge.n	a01c <__sfputc_r+0x18>
    a010:	6994      	ldr	r4, [r2, #24]
    a012:	42a3      	cmp	r3, r4
    a014:	db08      	blt.n	a028 <__sfputc_r+0x24>
    a016:	b2cb      	uxtb	r3, r1
    a018:	2b0a      	cmp	r3, #10
    a01a:	d005      	beq.n	a028 <__sfputc_r+0x24>
    a01c:	6813      	ldr	r3, [r2, #0]
    a01e:	1c58      	adds	r0, r3, #1
    a020:	6010      	str	r0, [r2, #0]
    a022:	7019      	strb	r1, [r3, #0]
    a024:	b2c8      	uxtb	r0, r1
    a026:	e001      	b.n	a02c <__sfputc_r+0x28>
    a028:	f002 fa84 	bl	c534 <__swbuf_r>
    a02c:	bd10      	pop	{r4, pc}

0000a02e <__sfputs_r>:
    a02e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a030:	1c06      	adds	r6, r0, #0
    a032:	1c0f      	adds	r7, r1, #0
    a034:	1c14      	adds	r4, r2, #0
    a036:	18d5      	adds	r5, r2, r3
    a038:	42ac      	cmp	r4, r5
    a03a:	d008      	beq.n	a04e <__sfputs_r+0x20>
    a03c:	7821      	ldrb	r1, [r4, #0]
    a03e:	1c30      	adds	r0, r6, #0
    a040:	1c3a      	adds	r2, r7, #0
    a042:	f7ff ffdf 	bl	a004 <__sfputc_r>
    a046:	3401      	adds	r4, #1
    a048:	1c43      	adds	r3, r0, #1
    a04a:	d1f5      	bne.n	a038 <__sfputs_r+0xa>
    a04c:	e000      	b.n	a050 <__sfputs_r+0x22>
    a04e:	2000      	movs	r0, #0
    a050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000a054 <_vfiprintf_r>:
    a054:	b5f0      	push	{r4, r5, r6, r7, lr}
    a056:	b09f      	sub	sp, #124	; 0x7c
    a058:	1c06      	adds	r6, r0, #0
    a05a:	1c0f      	adds	r7, r1, #0
    a05c:	9202      	str	r2, [sp, #8]
    a05e:	9305      	str	r3, [sp, #20]
    a060:	2800      	cmp	r0, #0
    a062:	d004      	beq.n	a06e <_vfiprintf_r+0x1a>
    a064:	6983      	ldr	r3, [r0, #24]
    a066:	2b00      	cmp	r3, #0
    a068:	d101      	bne.n	a06e <_vfiprintf_r+0x1a>
    a06a:	f7ff fcd3 	bl	9a14 <__sinit>
    a06e:	4b79      	ldr	r3, [pc, #484]	; (a254 <_vfiprintf_r+0x200>)
    a070:	429f      	cmp	r7, r3
    a072:	d101      	bne.n	a078 <_vfiprintf_r+0x24>
    a074:	6877      	ldr	r7, [r6, #4]
    a076:	e008      	b.n	a08a <_vfiprintf_r+0x36>
    a078:	4b77      	ldr	r3, [pc, #476]	; (a258 <_vfiprintf_r+0x204>)
    a07a:	429f      	cmp	r7, r3
    a07c:	d101      	bne.n	a082 <_vfiprintf_r+0x2e>
    a07e:	68b7      	ldr	r7, [r6, #8]
    a080:	e003      	b.n	a08a <_vfiprintf_r+0x36>
    a082:	4b76      	ldr	r3, [pc, #472]	; (a25c <_vfiprintf_r+0x208>)
    a084:	429f      	cmp	r7, r3
    a086:	d100      	bne.n	a08a <_vfiprintf_r+0x36>
    a088:	68f7      	ldr	r7, [r6, #12]
    a08a:	89bb      	ldrh	r3, [r7, #12]
    a08c:	071b      	lsls	r3, r3, #28
    a08e:	d50a      	bpl.n	a0a6 <_vfiprintf_r+0x52>
    a090:	693b      	ldr	r3, [r7, #16]
    a092:	2b00      	cmp	r3, #0
    a094:	d007      	beq.n	a0a6 <_vfiprintf_r+0x52>
    a096:	2300      	movs	r3, #0
    a098:	ad06      	add	r5, sp, #24
    a09a:	616b      	str	r3, [r5, #20]
    a09c:	3320      	adds	r3, #32
    a09e:	766b      	strb	r3, [r5, #25]
    a0a0:	3310      	adds	r3, #16
    a0a2:	76ab      	strb	r3, [r5, #26]
    a0a4:	e03d      	b.n	a122 <_vfiprintf_r+0xce>
    a0a6:	1c30      	adds	r0, r6, #0
    a0a8:	1c39      	adds	r1, r7, #0
    a0aa:	f002 faaf 	bl	c60c <__swsetup_r>
    a0ae:	2800      	cmp	r0, #0
    a0b0:	d0f1      	beq.n	a096 <_vfiprintf_r+0x42>
    a0b2:	2001      	movs	r0, #1
    a0b4:	4240      	negs	r0, r0
    a0b6:	e0ca      	b.n	a24e <_vfiprintf_r+0x1fa>
    a0b8:	9a05      	ldr	r2, [sp, #20]
    a0ba:	1d11      	adds	r1, r2, #4
    a0bc:	6812      	ldr	r2, [r2, #0]
    a0be:	9105      	str	r1, [sp, #20]
    a0c0:	2a00      	cmp	r2, #0
    a0c2:	db7e      	blt.n	a1c2 <_vfiprintf_r+0x16e>
    a0c4:	9209      	str	r2, [sp, #36]	; 0x24
    a0c6:	3401      	adds	r4, #1
    a0c8:	7823      	ldrb	r3, [r4, #0]
    a0ca:	2b2e      	cmp	r3, #46	; 0x2e
    a0cc:	d100      	bne.n	a0d0 <_vfiprintf_r+0x7c>
    a0ce:	e089      	b.n	a1e4 <_vfiprintf_r+0x190>
    a0d0:	7821      	ldrb	r1, [r4, #0]
    a0d2:	4863      	ldr	r0, [pc, #396]	; (a260 <_vfiprintf_r+0x20c>)
    a0d4:	2203      	movs	r2, #3
    a0d6:	f7ff fedb 	bl	9e90 <memchr>
    a0da:	2800      	cmp	r0, #0
    a0dc:	d008      	beq.n	a0f0 <_vfiprintf_r+0x9c>
    a0de:	4b60      	ldr	r3, [pc, #384]	; (a260 <_vfiprintf_r+0x20c>)
    a0e0:	3401      	adds	r4, #1
    a0e2:	1ac0      	subs	r0, r0, r3
    a0e4:	2340      	movs	r3, #64	; 0x40
    a0e6:	4083      	lsls	r3, r0
    a0e8:	1c18      	adds	r0, r3, #0
    a0ea:	682b      	ldr	r3, [r5, #0]
    a0ec:	4318      	orrs	r0, r3
    a0ee:	6028      	str	r0, [r5, #0]
    a0f0:	7821      	ldrb	r1, [r4, #0]
    a0f2:	1c63      	adds	r3, r4, #1
    a0f4:	485b      	ldr	r0, [pc, #364]	; (a264 <_vfiprintf_r+0x210>)
    a0f6:	2206      	movs	r2, #6
    a0f8:	9302      	str	r3, [sp, #8]
    a0fa:	7629      	strb	r1, [r5, #24]
    a0fc:	f7ff fec8 	bl	9e90 <memchr>
    a100:	2800      	cmp	r0, #0
    a102:	d100      	bne.n	a106 <_vfiprintf_r+0xb2>
    a104:	e091      	b.n	a22a <_vfiprintf_r+0x1d6>
    a106:	4b58      	ldr	r3, [pc, #352]	; (a268 <_vfiprintf_r+0x214>)
    a108:	2b00      	cmp	r3, #0
    a10a:	d000      	beq.n	a10e <_vfiprintf_r+0xba>
    a10c:	e084      	b.n	a218 <_vfiprintf_r+0x1c4>
    a10e:	2207      	movs	r2, #7
    a110:	9b05      	ldr	r3, [sp, #20]
    a112:	3307      	adds	r3, #7
    a114:	4393      	bics	r3, r2
    a116:	3308      	adds	r3, #8
    a118:	9305      	str	r3, [sp, #20]
    a11a:	696b      	ldr	r3, [r5, #20]
    a11c:	9a03      	ldr	r2, [sp, #12]
    a11e:	189b      	adds	r3, r3, r2
    a120:	616b      	str	r3, [r5, #20]
    a122:	9c02      	ldr	r4, [sp, #8]
    a124:	7823      	ldrb	r3, [r4, #0]
    a126:	2b00      	cmp	r3, #0
    a128:	d104      	bne.n	a134 <_vfiprintf_r+0xe0>
    a12a:	9b02      	ldr	r3, [sp, #8]
    a12c:	1ae3      	subs	r3, r4, r3
    a12e:	9304      	str	r3, [sp, #16]
    a130:	d011      	beq.n	a156 <_vfiprintf_r+0x102>
    a132:	e003      	b.n	a13c <_vfiprintf_r+0xe8>
    a134:	2b25      	cmp	r3, #37	; 0x25
    a136:	d0f8      	beq.n	a12a <_vfiprintf_r+0xd6>
    a138:	3401      	adds	r4, #1
    a13a:	e7f3      	b.n	a124 <_vfiprintf_r+0xd0>
    a13c:	9b04      	ldr	r3, [sp, #16]
    a13e:	1c30      	adds	r0, r6, #0
    a140:	1c39      	adds	r1, r7, #0
    a142:	9a02      	ldr	r2, [sp, #8]
    a144:	f7ff ff73 	bl	a02e <__sfputs_r>
    a148:	1c43      	adds	r3, r0, #1
    a14a:	d07b      	beq.n	a244 <_vfiprintf_r+0x1f0>
    a14c:	696a      	ldr	r2, [r5, #20]
    a14e:	9b04      	ldr	r3, [sp, #16]
    a150:	4694      	mov	ip, r2
    a152:	4463      	add	r3, ip
    a154:	616b      	str	r3, [r5, #20]
    a156:	7823      	ldrb	r3, [r4, #0]
    a158:	2b00      	cmp	r3, #0
    a15a:	d073      	beq.n	a244 <_vfiprintf_r+0x1f0>
    a15c:	2201      	movs	r2, #1
    a15e:	2300      	movs	r3, #0
    a160:	4252      	negs	r2, r2
    a162:	606a      	str	r2, [r5, #4]
    a164:	a902      	add	r1, sp, #8
    a166:	3254      	adds	r2, #84	; 0x54
    a168:	1852      	adds	r2, r2, r1
    a16a:	3401      	adds	r4, #1
    a16c:	602b      	str	r3, [r5, #0]
    a16e:	60eb      	str	r3, [r5, #12]
    a170:	60ab      	str	r3, [r5, #8]
    a172:	7013      	strb	r3, [r2, #0]
    a174:	65ab      	str	r3, [r5, #88]	; 0x58
    a176:	7821      	ldrb	r1, [r4, #0]
    a178:	483c      	ldr	r0, [pc, #240]	; (a26c <_vfiprintf_r+0x218>)
    a17a:	2205      	movs	r2, #5
    a17c:	f7ff fe88 	bl	9e90 <memchr>
    a180:	2800      	cmp	r0, #0
    a182:	d009      	beq.n	a198 <_vfiprintf_r+0x144>
    a184:	4b39      	ldr	r3, [pc, #228]	; (a26c <_vfiprintf_r+0x218>)
    a186:	3401      	adds	r4, #1
    a188:	1ac0      	subs	r0, r0, r3
    a18a:	2301      	movs	r3, #1
    a18c:	4083      	lsls	r3, r0
    a18e:	1c18      	adds	r0, r3, #0
    a190:	682b      	ldr	r3, [r5, #0]
    a192:	4318      	orrs	r0, r3
    a194:	6028      	str	r0, [r5, #0]
    a196:	e7ee      	b.n	a176 <_vfiprintf_r+0x122>
    a198:	682b      	ldr	r3, [r5, #0]
    a19a:	06da      	lsls	r2, r3, #27
    a19c:	d504      	bpl.n	a1a8 <_vfiprintf_r+0x154>
    a19e:	2253      	movs	r2, #83	; 0x53
    a1a0:	2120      	movs	r1, #32
    a1a2:	a802      	add	r0, sp, #8
    a1a4:	1812      	adds	r2, r2, r0
    a1a6:	7011      	strb	r1, [r2, #0]
    a1a8:	071a      	lsls	r2, r3, #28
    a1aa:	d504      	bpl.n	a1b6 <_vfiprintf_r+0x162>
    a1ac:	2253      	movs	r2, #83	; 0x53
    a1ae:	212b      	movs	r1, #43	; 0x2b
    a1b0:	a802      	add	r0, sp, #8
    a1b2:	1812      	adds	r2, r2, r0
    a1b4:	7011      	strb	r1, [r2, #0]
    a1b6:	7822      	ldrb	r2, [r4, #0]
    a1b8:	2a2a      	cmp	r2, #42	; 0x2a
    a1ba:	d100      	bne.n	a1be <_vfiprintf_r+0x16a>
    a1bc:	e77c      	b.n	a0b8 <_vfiprintf_r+0x64>
    a1be:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a1c0:	e005      	b.n	a1ce <_vfiprintf_r+0x17a>
    a1c2:	4252      	negs	r2, r2
    a1c4:	60ea      	str	r2, [r5, #12]
    a1c6:	2202      	movs	r2, #2
    a1c8:	4313      	orrs	r3, r2
    a1ca:	602b      	str	r3, [r5, #0]
    a1cc:	e77b      	b.n	a0c6 <_vfiprintf_r+0x72>
    a1ce:	7822      	ldrb	r2, [r4, #0]
    a1d0:	3a30      	subs	r2, #48	; 0x30
    a1d2:	2a09      	cmp	r2, #9
    a1d4:	d804      	bhi.n	a1e0 <_vfiprintf_r+0x18c>
    a1d6:	210a      	movs	r1, #10
    a1d8:	434b      	muls	r3, r1
    a1da:	3401      	adds	r4, #1
    a1dc:	189b      	adds	r3, r3, r2
    a1de:	e7f6      	b.n	a1ce <_vfiprintf_r+0x17a>
    a1e0:	9309      	str	r3, [sp, #36]	; 0x24
    a1e2:	e771      	b.n	a0c8 <_vfiprintf_r+0x74>
    a1e4:	7863      	ldrb	r3, [r4, #1]
    a1e6:	2b2a      	cmp	r3, #42	; 0x2a
    a1e8:	d109      	bne.n	a1fe <_vfiprintf_r+0x1aa>
    a1ea:	9b05      	ldr	r3, [sp, #20]
    a1ec:	3402      	adds	r4, #2
    a1ee:	1d1a      	adds	r2, r3, #4
    a1f0:	681b      	ldr	r3, [r3, #0]
    a1f2:	9205      	str	r2, [sp, #20]
    a1f4:	2b00      	cmp	r3, #0
    a1f6:	da0d      	bge.n	a214 <_vfiprintf_r+0x1c0>
    a1f8:	2301      	movs	r3, #1
    a1fa:	425b      	negs	r3, r3
    a1fc:	e00a      	b.n	a214 <_vfiprintf_r+0x1c0>
    a1fe:	2300      	movs	r3, #0
    a200:	3401      	adds	r4, #1
    a202:	7822      	ldrb	r2, [r4, #0]
    a204:	3a30      	subs	r2, #48	; 0x30
    a206:	2a09      	cmp	r2, #9
    a208:	d804      	bhi.n	a214 <_vfiprintf_r+0x1c0>
    a20a:	210a      	movs	r1, #10
    a20c:	434b      	muls	r3, r1
    a20e:	3401      	adds	r4, #1
    a210:	189b      	adds	r3, r3, r2
    a212:	e7f6      	b.n	a202 <_vfiprintf_r+0x1ae>
    a214:	9307      	str	r3, [sp, #28]
    a216:	e75b      	b.n	a0d0 <_vfiprintf_r+0x7c>
    a218:	ab05      	add	r3, sp, #20
    a21a:	9300      	str	r3, [sp, #0]
    a21c:	1c30      	adds	r0, r6, #0
    a21e:	1c29      	adds	r1, r5, #0
    a220:	1c3a      	adds	r2, r7, #0
    a222:	4b13      	ldr	r3, [pc, #76]	; (a270 <_vfiprintf_r+0x21c>)
    a224:	f000 f8ca 	bl	a3bc <_printf_float>
    a228:	e007      	b.n	a23a <_vfiprintf_r+0x1e6>
    a22a:	ab05      	add	r3, sp, #20
    a22c:	9300      	str	r3, [sp, #0]
    a22e:	1c30      	adds	r0, r6, #0
    a230:	1c29      	adds	r1, r5, #0
    a232:	1c3a      	adds	r2, r7, #0
    a234:	4b0e      	ldr	r3, [pc, #56]	; (a270 <_vfiprintf_r+0x21c>)
    a236:	f000 fb6d 	bl	a914 <_printf_i>
    a23a:	9003      	str	r0, [sp, #12]
    a23c:	9b03      	ldr	r3, [sp, #12]
    a23e:	3301      	adds	r3, #1
    a240:	d000      	beq.n	a244 <_vfiprintf_r+0x1f0>
    a242:	e76a      	b.n	a11a <_vfiprintf_r+0xc6>
    a244:	89bb      	ldrh	r3, [r7, #12]
    a246:	065b      	lsls	r3, r3, #25
    a248:	d500      	bpl.n	a24c <_vfiprintf_r+0x1f8>
    a24a:	e732      	b.n	a0b2 <_vfiprintf_r+0x5e>
    a24c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    a24e:	b01f      	add	sp, #124	; 0x7c
    a250:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a252:	46c0      	nop			; (mov r8, r8)
    a254:	0000f9e8 	.word	0x0000f9e8
    a258:	0000fa08 	.word	0x0000fa08
    a25c:	0000fa28 	.word	0x0000fa28
    a260:	0000fa56 	.word	0x0000fa56
    a264:	0000fa5a 	.word	0x0000fa5a
    a268:	0000a3bd 	.word	0x0000a3bd
    a26c:	0000fa50 	.word	0x0000fa50
    a270:	0000a02f 	.word	0x0000a02f

0000a274 <vfiprintf>:
    a274:	b538      	push	{r3, r4, r5, lr}
    a276:	1c05      	adds	r5, r0, #0
    a278:	1c0c      	adds	r4, r1, #0
    a27a:	1c13      	adds	r3, r2, #0
    a27c:	4a03      	ldr	r2, [pc, #12]	; (a28c <vfiprintf+0x18>)
    a27e:	1c29      	adds	r1, r5, #0
    a280:	6810      	ldr	r0, [r2, #0]
    a282:	1c22      	adds	r2, r4, #0
    a284:	f7ff fee6 	bl	a054 <_vfiprintf_r>
    a288:	bd38      	pop	{r3, r4, r5, pc}
    a28a:	46c0      	nop			; (mov r8, r8)
    a28c:	20000134 	.word	0x20000134

0000a290 <__cvt>:
    a290:	b5f0      	push	{r4, r5, r6, r7, lr}
    a292:	b08b      	sub	sp, #44	; 0x2c
    a294:	1c14      	adds	r4, r2, #0
    a296:	1e1d      	subs	r5, r3, #0
    a298:	9912      	ldr	r1, [sp, #72]	; 0x48
    a29a:	da06      	bge.n	a2aa <__cvt+0x1a>
    a29c:	2480      	movs	r4, #128	; 0x80
    a29e:	0624      	lsls	r4, r4, #24
    a2a0:	192b      	adds	r3, r5, r4
    a2a2:	1c1d      	adds	r5, r3, #0
    a2a4:	1c14      	adds	r4, r2, #0
    a2a6:	232d      	movs	r3, #45	; 0x2d
    a2a8:	e000      	b.n	a2ac <__cvt+0x1c>
    a2aa:	2300      	movs	r3, #0
    a2ac:	700b      	strb	r3, [r1, #0]
    a2ae:	2320      	movs	r3, #32
    a2b0:	9e14      	ldr	r6, [sp, #80]	; 0x50
    a2b2:	2203      	movs	r2, #3
    a2b4:	439e      	bics	r6, r3
    a2b6:	2e46      	cmp	r6, #70	; 0x46
    a2b8:	d007      	beq.n	a2ca <__cvt+0x3a>
    a2ba:	1c33      	adds	r3, r6, #0
    a2bc:	3b45      	subs	r3, #69	; 0x45
    a2be:	4259      	negs	r1, r3
    a2c0:	414b      	adcs	r3, r1
    a2c2:	9910      	ldr	r1, [sp, #64]	; 0x40
    a2c4:	3a01      	subs	r2, #1
    a2c6:	18cb      	adds	r3, r1, r3
    a2c8:	9310      	str	r3, [sp, #64]	; 0x40
    a2ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a2cc:	9200      	str	r2, [sp, #0]
    a2ce:	9301      	str	r3, [sp, #4]
    a2d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    a2d2:	1c22      	adds	r2, r4, #0
    a2d4:	9302      	str	r3, [sp, #8]
    a2d6:	ab08      	add	r3, sp, #32
    a2d8:	9303      	str	r3, [sp, #12]
    a2da:	ab09      	add	r3, sp, #36	; 0x24
    a2dc:	9304      	str	r3, [sp, #16]
    a2de:	1c2b      	adds	r3, r5, #0
    a2e0:	f002 faa2 	bl	c828 <_dtoa_r>
    a2e4:	1c07      	adds	r7, r0, #0
    a2e6:	2e47      	cmp	r6, #71	; 0x47
    a2e8:	d102      	bne.n	a2f0 <__cvt+0x60>
    a2ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a2ec:	07db      	lsls	r3, r3, #31
    a2ee:	d52c      	bpl.n	a34a <__cvt+0xba>
    a2f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a2f2:	18fb      	adds	r3, r7, r3
    a2f4:	9307      	str	r3, [sp, #28]
    a2f6:	2e46      	cmp	r6, #70	; 0x46
    a2f8:	d114      	bne.n	a324 <__cvt+0x94>
    a2fa:	783b      	ldrb	r3, [r7, #0]
    a2fc:	2b30      	cmp	r3, #48	; 0x30
    a2fe:	d10c      	bne.n	a31a <__cvt+0x8a>
    a300:	1c20      	adds	r0, r4, #0
    a302:	1c29      	adds	r1, r5, #0
    a304:	2200      	movs	r2, #0
    a306:	2300      	movs	r3, #0
    a308:	f7fc fb4e 	bl	69a8 <__aeabi_dcmpeq>
    a30c:	2800      	cmp	r0, #0
    a30e:	d104      	bne.n	a31a <__cvt+0x8a>
    a310:	2301      	movs	r3, #1
    a312:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a314:	1a9b      	subs	r3, r3, r2
    a316:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    a318:	6013      	str	r3, [r2, #0]
    a31a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    a31c:	9a07      	ldr	r2, [sp, #28]
    a31e:	681b      	ldr	r3, [r3, #0]
    a320:	18d3      	adds	r3, r2, r3
    a322:	9307      	str	r3, [sp, #28]
    a324:	1c20      	adds	r0, r4, #0
    a326:	1c29      	adds	r1, r5, #0
    a328:	2200      	movs	r2, #0
    a32a:	2300      	movs	r3, #0
    a32c:	f7fc fb3c 	bl	69a8 <__aeabi_dcmpeq>
    a330:	2800      	cmp	r0, #0
    a332:	d001      	beq.n	a338 <__cvt+0xa8>
    a334:	9b07      	ldr	r3, [sp, #28]
    a336:	9309      	str	r3, [sp, #36]	; 0x24
    a338:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a33a:	9a07      	ldr	r2, [sp, #28]
    a33c:	4293      	cmp	r3, r2
    a33e:	d204      	bcs.n	a34a <__cvt+0xba>
    a340:	1c5a      	adds	r2, r3, #1
    a342:	9209      	str	r2, [sp, #36]	; 0x24
    a344:	2230      	movs	r2, #48	; 0x30
    a346:	701a      	strb	r2, [r3, #0]
    a348:	e7f6      	b.n	a338 <__cvt+0xa8>
    a34a:	1c38      	adds	r0, r7, #0
    a34c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a34e:	9a15      	ldr	r2, [sp, #84]	; 0x54
    a350:	1bdb      	subs	r3, r3, r7
    a352:	6013      	str	r3, [r2, #0]
    a354:	b00b      	add	sp, #44	; 0x2c
    a356:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000a358 <__exponent>:
    a358:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a35a:	232b      	movs	r3, #43	; 0x2b
    a35c:	1c07      	adds	r7, r0, #0
    a35e:	1c0c      	adds	r4, r1, #0
    a360:	7002      	strb	r2, [r0, #0]
    a362:	1c86      	adds	r6, r0, #2
    a364:	2900      	cmp	r1, #0
    a366:	da01      	bge.n	a36c <__exponent+0x14>
    a368:	232d      	movs	r3, #45	; 0x2d
    a36a:	424c      	negs	r4, r1
    a36c:	707b      	strb	r3, [r7, #1]
    a36e:	2c09      	cmp	r4, #9
    a370:	dd1c      	ble.n	a3ac <__exponent+0x54>
    a372:	466b      	mov	r3, sp
    a374:	1ddd      	adds	r5, r3, #7
    a376:	1c20      	adds	r0, r4, #0
    a378:	210a      	movs	r1, #10
    a37a:	f7fc faf9 	bl	6970 <__aeabi_idivmod>
    a37e:	3d01      	subs	r5, #1
    a380:	3130      	adds	r1, #48	; 0x30
    a382:	7029      	strb	r1, [r5, #0]
    a384:	1c20      	adds	r0, r4, #0
    a386:	210a      	movs	r1, #10
    a388:	f7fc fa0c 	bl	67a4 <__aeabi_idiv>
    a38c:	1e04      	subs	r4, r0, #0
    a38e:	2c09      	cmp	r4, #9
    a390:	dcf1      	bgt.n	a376 <__exponent+0x1e>
    a392:	3d01      	subs	r5, #1
    a394:	3430      	adds	r4, #48	; 0x30
    a396:	702c      	strb	r4, [r5, #0]
    a398:	466b      	mov	r3, sp
    a39a:	3307      	adds	r3, #7
    a39c:	1c30      	adds	r0, r6, #0
    a39e:	42ab      	cmp	r3, r5
    a3a0:	d909      	bls.n	a3b6 <__exponent+0x5e>
    a3a2:	782b      	ldrb	r3, [r5, #0]
    a3a4:	3501      	adds	r5, #1
    a3a6:	7033      	strb	r3, [r6, #0]
    a3a8:	3601      	adds	r6, #1
    a3aa:	e7f5      	b.n	a398 <__exponent+0x40>
    a3ac:	2330      	movs	r3, #48	; 0x30
    a3ae:	18e4      	adds	r4, r4, r3
    a3b0:	7033      	strb	r3, [r6, #0]
    a3b2:	1cb0      	adds	r0, r6, #2
    a3b4:	7074      	strb	r4, [r6, #1]
    a3b6:	1bc0      	subs	r0, r0, r7
    a3b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

0000a3bc <_printf_float>:
    a3bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    a3be:	b093      	sub	sp, #76	; 0x4c
    a3c0:	1c0c      	adds	r4, r1, #0
    a3c2:	9208      	str	r2, [sp, #32]
    a3c4:	9309      	str	r3, [sp, #36]	; 0x24
    a3c6:	9e18      	ldr	r6, [sp, #96]	; 0x60
    a3c8:	1c05      	adds	r5, r0, #0
    a3ca:	f003 fba1 	bl	db10 <_localeconv_r>
    a3ce:	6803      	ldr	r3, [r0, #0]
    a3d0:	1c18      	adds	r0, r3, #0
    a3d2:	930b      	str	r3, [sp, #44]	; 0x2c
    a3d4:	f001 f8ea 	bl	b5ac <strlen>
    a3d8:	2300      	movs	r3, #0
    a3da:	6821      	ldr	r1, [r4, #0]
    a3dc:	9310      	str	r3, [sp, #64]	; 0x40
    a3de:	900c      	str	r0, [sp, #48]	; 0x30
    a3e0:	7e27      	ldrb	r7, [r4, #24]
    a3e2:	6833      	ldr	r3, [r6, #0]
    a3e4:	2207      	movs	r2, #7
    a3e6:	05c9      	lsls	r1, r1, #23
    a3e8:	d501      	bpl.n	a3ee <_printf_float+0x32>
    a3ea:	189b      	adds	r3, r3, r2
    a3ec:	e000      	b.n	a3f0 <_printf_float+0x34>
    a3ee:	3307      	adds	r3, #7
    a3f0:	4393      	bics	r3, r2
    a3f2:	1c1a      	adds	r2, r3, #0
    a3f4:	3208      	adds	r2, #8
    a3f6:	6032      	str	r2, [r6, #0]
    a3f8:	681a      	ldr	r2, [r3, #0]
    a3fa:	685b      	ldr	r3, [r3, #4]
    a3fc:	64a2      	str	r2, [r4, #72]	; 0x48
    a3fe:	64e3      	str	r3, [r4, #76]	; 0x4c
    a400:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    a402:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    a404:	f000 ff30 	bl	b268 <__fpclassifyd>
    a408:	2801      	cmp	r0, #1
    a40a:	d118      	bne.n	a43e <_printf_float+0x82>
    a40c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    a40e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    a410:	2200      	movs	r2, #0
    a412:	2300      	movs	r3, #0
    a414:	f7fc face 	bl	69b4 <__aeabi_dcmplt>
    a418:	2800      	cmp	r0, #0
    a41a:	d003      	beq.n	a424 <_printf_float+0x68>
    a41c:	1c23      	adds	r3, r4, #0
    a41e:	222d      	movs	r2, #45	; 0x2d
    a420:	3343      	adds	r3, #67	; 0x43
    a422:	701a      	strb	r2, [r3, #0]
    a424:	4bb6      	ldr	r3, [pc, #728]	; (a700 <_printf_float+0x344>)
    a426:	930a      	str	r3, [sp, #40]	; 0x28
    a428:	2f47      	cmp	r7, #71	; 0x47
    a42a:	d901      	bls.n	a430 <_printf_float+0x74>
    a42c:	4bb5      	ldr	r3, [pc, #724]	; (a704 <_printf_float+0x348>)
    a42e:	930a      	str	r3, [sp, #40]	; 0x28
    a430:	2303      	movs	r3, #3
    a432:	6822      	ldr	r2, [r4, #0]
    a434:	6123      	str	r3, [r4, #16]
    a436:	3301      	adds	r3, #1
    a438:	439a      	bics	r2, r3
    a43a:	6022      	str	r2, [r4, #0]
    a43c:	e012      	b.n	a464 <_printf_float+0xa8>
    a43e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    a440:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    a442:	f000 ff11 	bl	b268 <__fpclassifyd>
    a446:	6826      	ldr	r6, [r4, #0]
    a448:	2800      	cmp	r0, #0
    a44a:	d10d      	bne.n	a468 <_printf_float+0xac>
    a44c:	4bae      	ldr	r3, [pc, #696]	; (a708 <_printf_float+0x34c>)
    a44e:	930a      	str	r3, [sp, #40]	; 0x28
    a450:	2f47      	cmp	r7, #71	; 0x47
    a452:	d901      	bls.n	a458 <_printf_float+0x9c>
    a454:	4bad      	ldr	r3, [pc, #692]	; (a70c <_printf_float+0x350>)
    a456:	930a      	str	r3, [sp, #40]	; 0x28
    a458:	2303      	movs	r3, #3
    a45a:	1c31      	adds	r1, r6, #0
    a45c:	6123      	str	r3, [r4, #16]
    a45e:	3301      	adds	r3, #1
    a460:	4399      	bics	r1, r3
    a462:	6021      	str	r1, [r4, #0]
    a464:	2600      	movs	r6, #0
    a466:	e080      	b.n	a56a <_printf_float+0x1ae>
    a468:	2180      	movs	r1, #128	; 0x80
    a46a:	6860      	ldr	r0, [r4, #4]
    a46c:	00c9      	lsls	r1, r1, #3
    a46e:	1c43      	adds	r3, r0, #1
    a470:	d101      	bne.n	a476 <_printf_float+0xba>
    a472:	2306      	movs	r3, #6
    a474:	e009      	b.n	a48a <_printf_float+0xce>
    a476:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    a478:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    a47a:	2f67      	cmp	r7, #103	; 0x67
    a47c:	d001      	beq.n	a482 <_printf_float+0xc6>
    a47e:	2f47      	cmp	r7, #71	; 0x47
    a480:	d104      	bne.n	a48c <_printf_float+0xd0>
    a482:	2800      	cmp	r0, #0
    a484:	d000      	beq.n	a488 <_printf_float+0xcc>
    a486:	e1c0      	b.n	a80a <_printf_float+0x44e>
    a488:	2301      	movs	r3, #1
    a48a:	6063      	str	r3, [r4, #4]
    a48c:	6863      	ldr	r3, [r4, #4]
    a48e:	4331      	orrs	r1, r6
    a490:	9300      	str	r3, [sp, #0]
    a492:	2323      	movs	r3, #35	; 0x23
    a494:	6021      	str	r1, [r4, #0]
    a496:	9101      	str	r1, [sp, #4]
    a498:	2100      	movs	r1, #0
    a49a:	aa06      	add	r2, sp, #24
    a49c:	189b      	adds	r3, r3, r2
    a49e:	9302      	str	r3, [sp, #8]
    a4a0:	ab0f      	add	r3, sp, #60	; 0x3c
    a4a2:	9303      	str	r3, [sp, #12]
    a4a4:	ab10      	add	r3, sp, #64	; 0x40
    a4a6:	9305      	str	r3, [sp, #20]
    a4a8:	9704      	str	r7, [sp, #16]
    a4aa:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    a4ac:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    a4ae:	9106      	str	r1, [sp, #24]
    a4b0:	1c28      	adds	r0, r5, #0
    a4b2:	f7ff feed 	bl	a290 <__cvt>
    a4b6:	2320      	movs	r3, #32
    a4b8:	1c3a      	adds	r2, r7, #0
    a4ba:	900a      	str	r0, [sp, #40]	; 0x28
    a4bc:	439a      	bics	r2, r3
    a4be:	2a47      	cmp	r2, #71	; 0x47
    a4c0:	d107      	bne.n	a4d2 <_printf_float+0x116>
    a4c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a4c4:	1cda      	adds	r2, r3, #3
    a4c6:	db02      	blt.n	a4ce <_printf_float+0x112>
    a4c8:	6862      	ldr	r2, [r4, #4]
    a4ca:	4293      	cmp	r3, r2
    a4cc:	dd2d      	ble.n	a52a <_printf_float+0x16e>
    a4ce:	3f02      	subs	r7, #2
    a4d0:	b2ff      	uxtb	r7, r7
    a4d2:	990f      	ldr	r1, [sp, #60]	; 0x3c
    a4d4:	2f65      	cmp	r7, #101	; 0x65
    a4d6:	d812      	bhi.n	a4fe <_printf_float+0x142>
    a4d8:	1c20      	adds	r0, r4, #0
    a4da:	3901      	subs	r1, #1
    a4dc:	1c3a      	adds	r2, r7, #0
    a4de:	3050      	adds	r0, #80	; 0x50
    a4e0:	910f      	str	r1, [sp, #60]	; 0x3c
    a4e2:	f7ff ff39 	bl	a358 <__exponent>
    a4e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a4e8:	1c06      	adds	r6, r0, #0
    a4ea:	1883      	adds	r3, r0, r2
    a4ec:	6123      	str	r3, [r4, #16]
    a4ee:	2a01      	cmp	r2, #1
    a4f0:	dc02      	bgt.n	a4f8 <_printf_float+0x13c>
    a4f2:	6822      	ldr	r2, [r4, #0]
    a4f4:	07d2      	lsls	r2, r2, #31
    a4f6:	d52e      	bpl.n	a556 <_printf_float+0x19a>
    a4f8:	3301      	adds	r3, #1
    a4fa:	6123      	str	r3, [r4, #16]
    a4fc:	e02b      	b.n	a556 <_printf_float+0x19a>
    a4fe:	2f66      	cmp	r7, #102	; 0x66
    a500:	d114      	bne.n	a52c <_printf_float+0x170>
    a502:	6863      	ldr	r3, [r4, #4]
    a504:	2900      	cmp	r1, #0
    a506:	dd08      	ble.n	a51a <_printf_float+0x15e>
    a508:	6121      	str	r1, [r4, #16]
    a50a:	2b00      	cmp	r3, #0
    a50c:	d102      	bne.n	a514 <_printf_float+0x158>
    a50e:	6822      	ldr	r2, [r4, #0]
    a510:	07d2      	lsls	r2, r2, #31
    a512:	d51d      	bpl.n	a550 <_printf_float+0x194>
    a514:	3301      	adds	r3, #1
    a516:	18cb      	adds	r3, r1, r3
    a518:	e011      	b.n	a53e <_printf_float+0x182>
    a51a:	2b00      	cmp	r3, #0
    a51c:	d103      	bne.n	a526 <_printf_float+0x16a>
    a51e:	2201      	movs	r2, #1
    a520:	6821      	ldr	r1, [r4, #0]
    a522:	4211      	tst	r1, r2
    a524:	d013      	beq.n	a54e <_printf_float+0x192>
    a526:	1c9a      	adds	r2, r3, #2
    a528:	e011      	b.n	a54e <_printf_float+0x192>
    a52a:	2767      	movs	r7, #103	; 0x67
    a52c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a52e:	9810      	ldr	r0, [sp, #64]	; 0x40
    a530:	4283      	cmp	r3, r0
    a532:	db06      	blt.n	a542 <_printf_float+0x186>
    a534:	6822      	ldr	r2, [r4, #0]
    a536:	6123      	str	r3, [r4, #16]
    a538:	07d2      	lsls	r2, r2, #31
    a53a:	d509      	bpl.n	a550 <_printf_float+0x194>
    a53c:	3301      	adds	r3, #1
    a53e:	6123      	str	r3, [r4, #16]
    a540:	e006      	b.n	a550 <_printf_float+0x194>
    a542:	2201      	movs	r2, #1
    a544:	2b00      	cmp	r3, #0
    a546:	dc01      	bgt.n	a54c <_printf_float+0x190>
    a548:	2102      	movs	r1, #2
    a54a:	1aca      	subs	r2, r1, r3
    a54c:	1882      	adds	r2, r0, r2
    a54e:	6122      	str	r2, [r4, #16]
    a550:	2600      	movs	r6, #0
    a552:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a554:	65a3      	str	r3, [r4, #88]	; 0x58
    a556:	2323      	movs	r3, #35	; 0x23
    a558:	aa06      	add	r2, sp, #24
    a55a:	189b      	adds	r3, r3, r2
    a55c:	781b      	ldrb	r3, [r3, #0]
    a55e:	2b00      	cmp	r3, #0
    a560:	d003      	beq.n	a56a <_printf_float+0x1ae>
    a562:	1c23      	adds	r3, r4, #0
    a564:	222d      	movs	r2, #45	; 0x2d
    a566:	3343      	adds	r3, #67	; 0x43
    a568:	701a      	strb	r2, [r3, #0]
    a56a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a56c:	1c28      	adds	r0, r5, #0
    a56e:	9300      	str	r3, [sp, #0]
    a570:	1c21      	adds	r1, r4, #0
    a572:	9b08      	ldr	r3, [sp, #32]
    a574:	aa11      	add	r2, sp, #68	; 0x44
    a576:	f000 f95f 	bl	a838 <_printf_common>
    a57a:	1c43      	adds	r3, r0, #1
    a57c:	d102      	bne.n	a584 <_printf_float+0x1c8>
    a57e:	2001      	movs	r0, #1
    a580:	4240      	negs	r0, r0
    a582:	e156      	b.n	a832 <_printf_float+0x476>
    a584:	6822      	ldr	r2, [r4, #0]
    a586:	0553      	lsls	r3, r2, #21
    a588:	d404      	bmi.n	a594 <_printf_float+0x1d8>
    a58a:	1c28      	adds	r0, r5, #0
    a58c:	9908      	ldr	r1, [sp, #32]
    a58e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a590:	6923      	ldr	r3, [r4, #16]
    a592:	e116      	b.n	a7c2 <_printf_float+0x406>
    a594:	2f65      	cmp	r7, #101	; 0x65
    a596:	d800      	bhi.n	a59a <_printf_float+0x1de>
    a598:	e0d4      	b.n	a744 <_printf_float+0x388>
    a59a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    a59c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    a59e:	2200      	movs	r2, #0
    a5a0:	2300      	movs	r3, #0
    a5a2:	f7fc fa01 	bl	69a8 <__aeabi_dcmpeq>
    a5a6:	2800      	cmp	r0, #0
    a5a8:	d02b      	beq.n	a602 <_printf_float+0x246>
    a5aa:	2301      	movs	r3, #1
    a5ac:	1c28      	adds	r0, r5, #0
    a5ae:	9908      	ldr	r1, [sp, #32]
    a5b0:	4a57      	ldr	r2, [pc, #348]	; (a710 <_printf_float+0x354>)
    a5b2:	9e09      	ldr	r6, [sp, #36]	; 0x24
    a5b4:	47b0      	blx	r6
    a5b6:	1c43      	adds	r3, r0, #1
    a5b8:	d0e1      	beq.n	a57e <_printf_float+0x1c2>
    a5ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a5bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a5be:	4293      	cmp	r3, r2
    a5c0:	db07      	blt.n	a5d2 <_printf_float+0x216>
    a5c2:	6823      	ldr	r3, [r4, #0]
    a5c4:	07db      	lsls	r3, r3, #31
    a5c6:	d404      	bmi.n	a5d2 <_printf_float+0x216>
    a5c8:	6823      	ldr	r3, [r4, #0]
    a5ca:	079b      	lsls	r3, r3, #30
    a5cc:	d500      	bpl.n	a5d0 <_printf_float+0x214>
    a5ce:	e11a      	b.n	a806 <_printf_float+0x44a>
    a5d0:	e113      	b.n	a7fa <_printf_float+0x43e>
    a5d2:	9e09      	ldr	r6, [sp, #36]	; 0x24
    a5d4:	1c28      	adds	r0, r5, #0
    a5d6:	9908      	ldr	r1, [sp, #32]
    a5d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a5da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a5dc:	47b0      	blx	r6
    a5de:	2600      	movs	r6, #0
    a5e0:	1c43      	adds	r3, r0, #1
    a5e2:	d0cc      	beq.n	a57e <_printf_float+0x1c2>
    a5e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a5e6:	3b01      	subs	r3, #1
    a5e8:	429e      	cmp	r6, r3
    a5ea:	daed      	bge.n	a5c8 <_printf_float+0x20c>
    a5ec:	1c22      	adds	r2, r4, #0
    a5ee:	2301      	movs	r3, #1
    a5f0:	1c28      	adds	r0, r5, #0
    a5f2:	9908      	ldr	r1, [sp, #32]
    a5f4:	321a      	adds	r2, #26
    a5f6:	9f09      	ldr	r7, [sp, #36]	; 0x24
    a5f8:	47b8      	blx	r7
    a5fa:	1c43      	adds	r3, r0, #1
    a5fc:	d0bf      	beq.n	a57e <_printf_float+0x1c2>
    a5fe:	3601      	adds	r6, #1
    a600:	e7f0      	b.n	a5e4 <_printf_float+0x228>
    a602:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a604:	2b00      	cmp	r3, #0
    a606:	dc2b      	bgt.n	a660 <_printf_float+0x2a4>
    a608:	2301      	movs	r3, #1
    a60a:	1c28      	adds	r0, r5, #0
    a60c:	9908      	ldr	r1, [sp, #32]
    a60e:	4a40      	ldr	r2, [pc, #256]	; (a710 <_printf_float+0x354>)
    a610:	9e09      	ldr	r6, [sp, #36]	; 0x24
    a612:	47b0      	blx	r6
    a614:	1c43      	adds	r3, r0, #1
    a616:	d0b2      	beq.n	a57e <_printf_float+0x1c2>
    a618:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a61a:	2b00      	cmp	r3, #0
    a61c:	d105      	bne.n	a62a <_printf_float+0x26e>
    a61e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a620:	2b00      	cmp	r3, #0
    a622:	d102      	bne.n	a62a <_printf_float+0x26e>
    a624:	6823      	ldr	r3, [r4, #0]
    a626:	07db      	lsls	r3, r3, #31
    a628:	d5ce      	bpl.n	a5c8 <_printf_float+0x20c>
    a62a:	9e09      	ldr	r6, [sp, #36]	; 0x24
    a62c:	1c28      	adds	r0, r5, #0
    a62e:	9908      	ldr	r1, [sp, #32]
    a630:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a632:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a634:	47b0      	blx	r6
    a636:	2600      	movs	r6, #0
    a638:	1c43      	adds	r3, r0, #1
    a63a:	d0a0      	beq.n	a57e <_printf_float+0x1c2>
    a63c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a63e:	1c28      	adds	r0, r5, #0
    a640:	425b      	negs	r3, r3
    a642:	9908      	ldr	r1, [sp, #32]
    a644:	429e      	cmp	r6, r3
    a646:	da08      	bge.n	a65a <_printf_float+0x29e>
    a648:	1c22      	adds	r2, r4, #0
    a64a:	2301      	movs	r3, #1
    a64c:	321a      	adds	r2, #26
    a64e:	9f09      	ldr	r7, [sp, #36]	; 0x24
    a650:	47b8      	blx	r7
    a652:	1c43      	adds	r3, r0, #1
    a654:	d093      	beq.n	a57e <_printf_float+0x1c2>
    a656:	3601      	adds	r6, #1
    a658:	e7f0      	b.n	a63c <_printf_float+0x280>
    a65a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a65c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a65e:	e0b0      	b.n	a7c2 <_printf_float+0x406>
    a660:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a662:	6da6      	ldr	r6, [r4, #88]	; 0x58
    a664:	429e      	cmp	r6, r3
    a666:	dd00      	ble.n	a66a <_printf_float+0x2ae>
    a668:	1c1e      	adds	r6, r3, #0
    a66a:	2e00      	cmp	r6, #0
    a66c:	dc01      	bgt.n	a672 <_printf_float+0x2b6>
    a66e:	2300      	movs	r3, #0
    a670:	e014      	b.n	a69c <_printf_float+0x2e0>
    a672:	1c33      	adds	r3, r6, #0
    a674:	1c28      	adds	r0, r5, #0
    a676:	9908      	ldr	r1, [sp, #32]
    a678:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a67a:	9f09      	ldr	r7, [sp, #36]	; 0x24
    a67c:	47b8      	blx	r7
    a67e:	1c43      	adds	r3, r0, #1
    a680:	d1f5      	bne.n	a66e <_printf_float+0x2b2>
    a682:	e77c      	b.n	a57e <_printf_float+0x1c2>
    a684:	1c22      	adds	r2, r4, #0
    a686:	2301      	movs	r3, #1
    a688:	1c28      	adds	r0, r5, #0
    a68a:	9908      	ldr	r1, [sp, #32]
    a68c:	321a      	adds	r2, #26
    a68e:	9f09      	ldr	r7, [sp, #36]	; 0x24
    a690:	47b8      	blx	r7
    a692:	1c43      	adds	r3, r0, #1
    a694:	d100      	bne.n	a698 <_printf_float+0x2dc>
    a696:	e772      	b.n	a57e <_printf_float+0x1c2>
    a698:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a69a:	3301      	adds	r3, #1
    a69c:	930d      	str	r3, [sp, #52]	; 0x34
    a69e:	43f3      	mvns	r3, r6
    a6a0:	6da2      	ldr	r2, [r4, #88]	; 0x58
    a6a2:	17db      	asrs	r3, r3, #31
    a6a4:	990d      	ldr	r1, [sp, #52]	; 0x34
    a6a6:	4033      	ands	r3, r6
    a6a8:	1ad3      	subs	r3, r2, r3
    a6aa:	4299      	cmp	r1, r3
    a6ac:	dbea      	blt.n	a684 <_printf_float+0x2c8>
    a6ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a6b0:	189e      	adds	r6, r3, r2
    a6b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a6b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a6b6:	4293      	cmp	r3, r2
    a6b8:	db0e      	blt.n	a6d8 <_printf_float+0x31c>
    a6ba:	6823      	ldr	r3, [r4, #0]
    a6bc:	07db      	lsls	r3, r3, #31
    a6be:	d40b      	bmi.n	a6d8 <_printf_float+0x31c>
    a6c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a6c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a6c4:	18d7      	adds	r7, r2, r3
    a6c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    a6c8:	1bbf      	subs	r7, r7, r6
    a6ca:	1a9b      	subs	r3, r3, r2
    a6cc:	429f      	cmp	r7, r3
    a6ce:	dd00      	ble.n	a6d2 <_printf_float+0x316>
    a6d0:	1c1f      	adds	r7, r3, #0
    a6d2:	2f00      	cmp	r7, #0
    a6d4:	dc09      	bgt.n	a6ea <_printf_float+0x32e>
    a6d6:	e011      	b.n	a6fc <_printf_float+0x340>
    a6d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a6da:	1c28      	adds	r0, r5, #0
    a6dc:	9908      	ldr	r1, [sp, #32]
    a6de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a6e0:	9f09      	ldr	r7, [sp, #36]	; 0x24
    a6e2:	47b8      	blx	r7
    a6e4:	1c43      	adds	r3, r0, #1
    a6e6:	d1eb      	bne.n	a6c0 <_printf_float+0x304>
    a6e8:	e749      	b.n	a57e <_printf_float+0x1c2>
    a6ea:	1c32      	adds	r2, r6, #0
    a6ec:	1c3b      	adds	r3, r7, #0
    a6ee:	1c28      	adds	r0, r5, #0
    a6f0:	9908      	ldr	r1, [sp, #32]
    a6f2:	9e09      	ldr	r6, [sp, #36]	; 0x24
    a6f4:	47b0      	blx	r6
    a6f6:	1c43      	adds	r3, r0, #1
    a6f8:	d100      	bne.n	a6fc <_printf_float+0x340>
    a6fa:	e740      	b.n	a57e <_printf_float+0x1c2>
    a6fc:	2300      	movs	r3, #0
    a6fe:	e015      	b.n	a72c <_printf_float+0x370>
    a700:	0000fa61 	.word	0x0000fa61
    a704:	0000fa65 	.word	0x0000fa65
    a708:	0000fa69 	.word	0x0000fa69
    a70c:	0000fa6d 	.word	0x0000fa6d
    a710:	0000faba 	.word	0x0000faba
    a714:	1c22      	adds	r2, r4, #0
    a716:	2301      	movs	r3, #1
    a718:	1c28      	adds	r0, r5, #0
    a71a:	9908      	ldr	r1, [sp, #32]
    a71c:	321a      	adds	r2, #26
    a71e:	9e09      	ldr	r6, [sp, #36]	; 0x24
    a720:	47b0      	blx	r6
    a722:	1c43      	adds	r3, r0, #1
    a724:	d100      	bne.n	a728 <_printf_float+0x36c>
    a726:	e72a      	b.n	a57e <_printf_float+0x1c2>
    a728:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a72a:	3301      	adds	r3, #1
    a72c:	930a      	str	r3, [sp, #40]	; 0x28
    a72e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    a730:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a732:	1a9a      	subs	r2, r3, r2
    a734:	43fb      	mvns	r3, r7
    a736:	17db      	asrs	r3, r3, #31
    a738:	403b      	ands	r3, r7
    a73a:	1ad3      	subs	r3, r2, r3
    a73c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a73e:	429a      	cmp	r2, r3
    a740:	dbe8      	blt.n	a714 <_printf_float+0x358>
    a742:	e741      	b.n	a5c8 <_printf_float+0x20c>
    a744:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a746:	1c28      	adds	r0, r5, #0
    a748:	9908      	ldr	r1, [sp, #32]
    a74a:	2b01      	cmp	r3, #1
    a74c:	dc02      	bgt.n	a754 <_printf_float+0x398>
    a74e:	2301      	movs	r3, #1
    a750:	421a      	tst	r2, r3
    a752:	d03c      	beq.n	a7ce <_printf_float+0x412>
    a754:	2301      	movs	r3, #1
    a756:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a758:	9f09      	ldr	r7, [sp, #36]	; 0x24
    a75a:	47b8      	blx	r7
    a75c:	1c43      	adds	r3, r0, #1
    a75e:	d100      	bne.n	a762 <_printf_float+0x3a6>
    a760:	e70d      	b.n	a57e <_printf_float+0x1c2>
    a762:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a764:	1c28      	adds	r0, r5, #0
    a766:	9908      	ldr	r1, [sp, #32]
    a768:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a76a:	9f09      	ldr	r7, [sp, #36]	; 0x24
    a76c:	47b8      	blx	r7
    a76e:	1c43      	adds	r3, r0, #1
    a770:	d100      	bne.n	a774 <_printf_float+0x3b8>
    a772:	e704      	b.n	a57e <_printf_float+0x1c2>
    a774:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    a776:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    a778:	2300      	movs	r3, #0
    a77a:	2200      	movs	r2, #0
    a77c:	f7fc f914 	bl	69a8 <__aeabi_dcmpeq>
    a780:	2300      	movs	r3, #0
    a782:	2800      	cmp	r0, #0
    a784:	d112      	bne.n	a7ac <_printf_float+0x3f0>
    a786:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a788:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a78a:	3201      	adds	r2, #1
    a78c:	3b01      	subs	r3, #1
    a78e:	1c28      	adds	r0, r5, #0
    a790:	9908      	ldr	r1, [sp, #32]
    a792:	e01d      	b.n	a7d0 <_printf_float+0x414>
    a794:	1c22      	adds	r2, r4, #0
    a796:	2301      	movs	r3, #1
    a798:	1c28      	adds	r0, r5, #0
    a79a:	9908      	ldr	r1, [sp, #32]
    a79c:	321a      	adds	r2, #26
    a79e:	9f09      	ldr	r7, [sp, #36]	; 0x24
    a7a0:	47b8      	blx	r7
    a7a2:	1c43      	adds	r3, r0, #1
    a7a4:	d100      	bne.n	a7a8 <_printf_float+0x3ec>
    a7a6:	e6ea      	b.n	a57e <_printf_float+0x1c2>
    a7a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a7aa:	3301      	adds	r3, #1
    a7ac:	930a      	str	r3, [sp, #40]	; 0x28
    a7ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a7b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a7b2:	3b01      	subs	r3, #1
    a7b4:	429a      	cmp	r2, r3
    a7b6:	dbed      	blt.n	a794 <_printf_float+0x3d8>
    a7b8:	1c22      	adds	r2, r4, #0
    a7ba:	1c28      	adds	r0, r5, #0
    a7bc:	1c33      	adds	r3, r6, #0
    a7be:	9908      	ldr	r1, [sp, #32]
    a7c0:	3250      	adds	r2, #80	; 0x50
    a7c2:	9e09      	ldr	r6, [sp, #36]	; 0x24
    a7c4:	47b0      	blx	r6
    a7c6:	1c43      	adds	r3, r0, #1
    a7c8:	d000      	beq.n	a7cc <_printf_float+0x410>
    a7ca:	e6fd      	b.n	a5c8 <_printf_float+0x20c>
    a7cc:	e6d7      	b.n	a57e <_printf_float+0x1c2>
    a7ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a7d0:	9f09      	ldr	r7, [sp, #36]	; 0x24
    a7d2:	47b8      	blx	r7
    a7d4:	1c43      	adds	r3, r0, #1
    a7d6:	d1ef      	bne.n	a7b8 <_printf_float+0x3fc>
    a7d8:	e6d1      	b.n	a57e <_printf_float+0x1c2>
    a7da:	1c22      	adds	r2, r4, #0
    a7dc:	2301      	movs	r3, #1
    a7de:	1c28      	adds	r0, r5, #0
    a7e0:	9908      	ldr	r1, [sp, #32]
    a7e2:	3219      	adds	r2, #25
    a7e4:	9f09      	ldr	r7, [sp, #36]	; 0x24
    a7e6:	47b8      	blx	r7
    a7e8:	1c43      	adds	r3, r0, #1
    a7ea:	d100      	bne.n	a7ee <_printf_float+0x432>
    a7ec:	e6c7      	b.n	a57e <_printf_float+0x1c2>
    a7ee:	3601      	adds	r6, #1
    a7f0:	68e3      	ldr	r3, [r4, #12]
    a7f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
    a7f4:	1a9b      	subs	r3, r3, r2
    a7f6:	429e      	cmp	r6, r3
    a7f8:	dbef      	blt.n	a7da <_printf_float+0x41e>
    a7fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a7fc:	68e0      	ldr	r0, [r4, #12]
    a7fe:	4298      	cmp	r0, r3
    a800:	da17      	bge.n	a832 <_printf_float+0x476>
    a802:	1c18      	adds	r0, r3, #0
    a804:	e015      	b.n	a832 <_printf_float+0x476>
    a806:	2600      	movs	r6, #0
    a808:	e7f2      	b.n	a7f0 <_printf_float+0x434>
    a80a:	4331      	orrs	r1, r6
    a80c:	6021      	str	r1, [r4, #0]
    a80e:	9101      	str	r1, [sp, #4]
    a810:	2123      	movs	r1, #35	; 0x23
    a812:	9000      	str	r0, [sp, #0]
    a814:	a806      	add	r0, sp, #24
    a816:	1809      	adds	r1, r1, r0
    a818:	9102      	str	r1, [sp, #8]
    a81a:	a90f      	add	r1, sp, #60	; 0x3c
    a81c:	9103      	str	r1, [sp, #12]
    a81e:	a910      	add	r1, sp, #64	; 0x40
    a820:	9105      	str	r1, [sp, #20]
    a822:	2100      	movs	r1, #0
    a824:	9704      	str	r7, [sp, #16]
    a826:	9106      	str	r1, [sp, #24]
    a828:	1c28      	adds	r0, r5, #0
    a82a:	f7ff fd31 	bl	a290 <__cvt>
    a82e:	900a      	str	r0, [sp, #40]	; 0x28
    a830:	e647      	b.n	a4c2 <_printf_float+0x106>
    a832:	b013      	add	sp, #76	; 0x4c
    a834:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a836:	46c0      	nop			; (mov r8, r8)

0000a838 <_printf_common>:
    a838:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a83a:	1c17      	adds	r7, r2, #0
    a83c:	9301      	str	r3, [sp, #4]
    a83e:	690a      	ldr	r2, [r1, #16]
    a840:	688b      	ldr	r3, [r1, #8]
    a842:	9000      	str	r0, [sp, #0]
    a844:	1c0c      	adds	r4, r1, #0
    a846:	4293      	cmp	r3, r2
    a848:	da00      	bge.n	a84c <_printf_common+0x14>
    a84a:	1c13      	adds	r3, r2, #0
    a84c:	1c22      	adds	r2, r4, #0
    a84e:	603b      	str	r3, [r7, #0]
    a850:	3243      	adds	r2, #67	; 0x43
    a852:	7812      	ldrb	r2, [r2, #0]
    a854:	2a00      	cmp	r2, #0
    a856:	d001      	beq.n	a85c <_printf_common+0x24>
    a858:	3301      	adds	r3, #1
    a85a:	603b      	str	r3, [r7, #0]
    a85c:	6823      	ldr	r3, [r4, #0]
    a85e:	069b      	lsls	r3, r3, #26
    a860:	d502      	bpl.n	a868 <_printf_common+0x30>
    a862:	683b      	ldr	r3, [r7, #0]
    a864:	3302      	adds	r3, #2
    a866:	603b      	str	r3, [r7, #0]
    a868:	2506      	movs	r5, #6
    a86a:	6823      	ldr	r3, [r4, #0]
    a86c:	401d      	ands	r5, r3
    a86e:	d01e      	beq.n	a8ae <_printf_common+0x76>
    a870:	1c23      	adds	r3, r4, #0
    a872:	3343      	adds	r3, #67	; 0x43
    a874:	781b      	ldrb	r3, [r3, #0]
    a876:	1e5a      	subs	r2, r3, #1
    a878:	4193      	sbcs	r3, r2
    a87a:	6822      	ldr	r2, [r4, #0]
    a87c:	0692      	lsls	r2, r2, #26
    a87e:	d51c      	bpl.n	a8ba <_printf_common+0x82>
    a880:	2030      	movs	r0, #48	; 0x30
    a882:	18e1      	adds	r1, r4, r3
    a884:	3140      	adds	r1, #64	; 0x40
    a886:	70c8      	strb	r0, [r1, #3]
    a888:	1c21      	adds	r1, r4, #0
    a88a:	1c5a      	adds	r2, r3, #1
    a88c:	3145      	adds	r1, #69	; 0x45
    a88e:	7809      	ldrb	r1, [r1, #0]
    a890:	18a2      	adds	r2, r4, r2
    a892:	3240      	adds	r2, #64	; 0x40
    a894:	3302      	adds	r3, #2
    a896:	70d1      	strb	r1, [r2, #3]
    a898:	e00f      	b.n	a8ba <_printf_common+0x82>
    a89a:	1c22      	adds	r2, r4, #0
    a89c:	2301      	movs	r3, #1
    a89e:	9800      	ldr	r0, [sp, #0]
    a8a0:	9901      	ldr	r1, [sp, #4]
    a8a2:	3219      	adds	r2, #25
    a8a4:	9e08      	ldr	r6, [sp, #32]
    a8a6:	47b0      	blx	r6
    a8a8:	1c43      	adds	r3, r0, #1
    a8aa:	d00e      	beq.n	a8ca <_printf_common+0x92>
    a8ac:	3501      	adds	r5, #1
    a8ae:	68e3      	ldr	r3, [r4, #12]
    a8b0:	683a      	ldr	r2, [r7, #0]
    a8b2:	1a9b      	subs	r3, r3, r2
    a8b4:	429d      	cmp	r5, r3
    a8b6:	dbf0      	blt.n	a89a <_printf_common+0x62>
    a8b8:	e7da      	b.n	a870 <_printf_common+0x38>
    a8ba:	1c22      	adds	r2, r4, #0
    a8bc:	9800      	ldr	r0, [sp, #0]
    a8be:	9901      	ldr	r1, [sp, #4]
    a8c0:	3243      	adds	r2, #67	; 0x43
    a8c2:	9d08      	ldr	r5, [sp, #32]
    a8c4:	47a8      	blx	r5
    a8c6:	1c43      	adds	r3, r0, #1
    a8c8:	d102      	bne.n	a8d0 <_printf_common+0x98>
    a8ca:	2001      	movs	r0, #1
    a8cc:	4240      	negs	r0, r0
    a8ce:	e020      	b.n	a912 <_printf_common+0xda>
    a8d0:	2306      	movs	r3, #6
    a8d2:	6820      	ldr	r0, [r4, #0]
    a8d4:	68e1      	ldr	r1, [r4, #12]
    a8d6:	683a      	ldr	r2, [r7, #0]
    a8d8:	4003      	ands	r3, r0
    a8da:	2500      	movs	r5, #0
    a8dc:	2b04      	cmp	r3, #4
    a8de:	d103      	bne.n	a8e8 <_printf_common+0xb0>
    a8e0:	1a8d      	subs	r5, r1, r2
    a8e2:	43eb      	mvns	r3, r5
    a8e4:	17db      	asrs	r3, r3, #31
    a8e6:	401d      	ands	r5, r3
    a8e8:	68a3      	ldr	r3, [r4, #8]
    a8ea:	6922      	ldr	r2, [r4, #16]
    a8ec:	4293      	cmp	r3, r2
    a8ee:	dd01      	ble.n	a8f4 <_printf_common+0xbc>
    a8f0:	1a9b      	subs	r3, r3, r2
    a8f2:	18ed      	adds	r5, r5, r3
    a8f4:	2700      	movs	r7, #0
    a8f6:	42af      	cmp	r7, r5
    a8f8:	da0a      	bge.n	a910 <_printf_common+0xd8>
    a8fa:	1c22      	adds	r2, r4, #0
    a8fc:	2301      	movs	r3, #1
    a8fe:	9800      	ldr	r0, [sp, #0]
    a900:	9901      	ldr	r1, [sp, #4]
    a902:	321a      	adds	r2, #26
    a904:	9e08      	ldr	r6, [sp, #32]
    a906:	47b0      	blx	r6
    a908:	1c43      	adds	r3, r0, #1
    a90a:	d0de      	beq.n	a8ca <_printf_common+0x92>
    a90c:	3701      	adds	r7, #1
    a90e:	e7f2      	b.n	a8f6 <_printf_common+0xbe>
    a910:	2000      	movs	r0, #0
    a912:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000a914 <_printf_i>:
    a914:	b5f0      	push	{r4, r5, r6, r7, lr}
    a916:	b08b      	sub	sp, #44	; 0x2c
    a918:	9206      	str	r2, [sp, #24]
    a91a:	1c0a      	adds	r2, r1, #0
    a91c:	3243      	adds	r2, #67	; 0x43
    a91e:	9307      	str	r3, [sp, #28]
    a920:	9005      	str	r0, [sp, #20]
    a922:	9204      	str	r2, [sp, #16]
    a924:	7e0a      	ldrb	r2, [r1, #24]
    a926:	1c0c      	adds	r4, r1, #0
    a928:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a92a:	2a6e      	cmp	r2, #110	; 0x6e
    a92c:	d100      	bne.n	a930 <_printf_i+0x1c>
    a92e:	e0a8      	b.n	aa82 <_printf_i+0x16e>
    a930:	d811      	bhi.n	a956 <_printf_i+0x42>
    a932:	2a63      	cmp	r2, #99	; 0x63
    a934:	d022      	beq.n	a97c <_printf_i+0x68>
    a936:	d809      	bhi.n	a94c <_printf_i+0x38>
    a938:	2a00      	cmp	r2, #0
    a93a:	d100      	bne.n	a93e <_printf_i+0x2a>
    a93c:	e0b2      	b.n	aaa4 <_printf_i+0x190>
    a93e:	2a58      	cmp	r2, #88	; 0x58
    a940:	d000      	beq.n	a944 <_printf_i+0x30>
    a942:	e0c2      	b.n	aaca <_printf_i+0x1b6>
    a944:	3145      	adds	r1, #69	; 0x45
    a946:	700a      	strb	r2, [r1, #0]
    a948:	4a7c      	ldr	r2, [pc, #496]	; (ab3c <_printf_i+0x228>)
    a94a:	e04f      	b.n	a9ec <_printf_i+0xd8>
    a94c:	2a64      	cmp	r2, #100	; 0x64
    a94e:	d01d      	beq.n	a98c <_printf_i+0x78>
    a950:	2a69      	cmp	r2, #105	; 0x69
    a952:	d01b      	beq.n	a98c <_printf_i+0x78>
    a954:	e0b9      	b.n	aaca <_printf_i+0x1b6>
    a956:	2a73      	cmp	r2, #115	; 0x73
    a958:	d100      	bne.n	a95c <_printf_i+0x48>
    a95a:	e0a7      	b.n	aaac <_printf_i+0x198>
    a95c:	d809      	bhi.n	a972 <_printf_i+0x5e>
    a95e:	2a6f      	cmp	r2, #111	; 0x6f
    a960:	d029      	beq.n	a9b6 <_printf_i+0xa2>
    a962:	2a70      	cmp	r2, #112	; 0x70
    a964:	d000      	beq.n	a968 <_printf_i+0x54>
    a966:	e0b0      	b.n	aaca <_printf_i+0x1b6>
    a968:	2220      	movs	r2, #32
    a96a:	6809      	ldr	r1, [r1, #0]
    a96c:	430a      	orrs	r2, r1
    a96e:	6022      	str	r2, [r4, #0]
    a970:	e037      	b.n	a9e2 <_printf_i+0xce>
    a972:	2a75      	cmp	r2, #117	; 0x75
    a974:	d01f      	beq.n	a9b6 <_printf_i+0xa2>
    a976:	2a78      	cmp	r2, #120	; 0x78
    a978:	d033      	beq.n	a9e2 <_printf_i+0xce>
    a97a:	e0a6      	b.n	aaca <_printf_i+0x1b6>
    a97c:	1c0e      	adds	r6, r1, #0
    a97e:	681a      	ldr	r2, [r3, #0]
    a980:	3642      	adds	r6, #66	; 0x42
    a982:	1d11      	adds	r1, r2, #4
    a984:	6019      	str	r1, [r3, #0]
    a986:	6813      	ldr	r3, [r2, #0]
    a988:	7033      	strb	r3, [r6, #0]
    a98a:	e0a1      	b.n	aad0 <_printf_i+0x1bc>
    a98c:	6821      	ldr	r1, [r4, #0]
    a98e:	681a      	ldr	r2, [r3, #0]
    a990:	0608      	lsls	r0, r1, #24
    a992:	d406      	bmi.n	a9a2 <_printf_i+0x8e>
    a994:	0649      	lsls	r1, r1, #25
    a996:	d504      	bpl.n	a9a2 <_printf_i+0x8e>
    a998:	1d11      	adds	r1, r2, #4
    a99a:	6019      	str	r1, [r3, #0]
    a99c:	2300      	movs	r3, #0
    a99e:	5ed5      	ldrsh	r5, [r2, r3]
    a9a0:	e002      	b.n	a9a8 <_printf_i+0x94>
    a9a2:	1d11      	adds	r1, r2, #4
    a9a4:	6019      	str	r1, [r3, #0]
    a9a6:	6815      	ldr	r5, [r2, #0]
    a9a8:	2d00      	cmp	r5, #0
    a9aa:	da3b      	bge.n	aa24 <_printf_i+0x110>
    a9ac:	232d      	movs	r3, #45	; 0x2d
    a9ae:	9a04      	ldr	r2, [sp, #16]
    a9b0:	426d      	negs	r5, r5
    a9b2:	7013      	strb	r3, [r2, #0]
    a9b4:	e036      	b.n	aa24 <_printf_i+0x110>
    a9b6:	6821      	ldr	r1, [r4, #0]
    a9b8:	681a      	ldr	r2, [r3, #0]
    a9ba:	0608      	lsls	r0, r1, #24
    a9bc:	d406      	bmi.n	a9cc <_printf_i+0xb8>
    a9be:	0649      	lsls	r1, r1, #25
    a9c0:	d504      	bpl.n	a9cc <_printf_i+0xb8>
    a9c2:	6815      	ldr	r5, [r2, #0]
    a9c4:	1d11      	adds	r1, r2, #4
    a9c6:	6019      	str	r1, [r3, #0]
    a9c8:	b2ad      	uxth	r5, r5
    a9ca:	e002      	b.n	a9d2 <_printf_i+0xbe>
    a9cc:	1d11      	adds	r1, r2, #4
    a9ce:	6019      	str	r1, [r3, #0]
    a9d0:	6815      	ldr	r5, [r2, #0]
    a9d2:	4b5a      	ldr	r3, [pc, #360]	; (ab3c <_printf_i+0x228>)
    a9d4:	7e22      	ldrb	r2, [r4, #24]
    a9d6:	9303      	str	r3, [sp, #12]
    a9d8:	270a      	movs	r7, #10
    a9da:	2a6f      	cmp	r2, #111	; 0x6f
    a9dc:	d11d      	bne.n	aa1a <_printf_i+0x106>
    a9de:	2708      	movs	r7, #8
    a9e0:	e01b      	b.n	aa1a <_printf_i+0x106>
    a9e2:	1c22      	adds	r2, r4, #0
    a9e4:	2178      	movs	r1, #120	; 0x78
    a9e6:	3245      	adds	r2, #69	; 0x45
    a9e8:	7011      	strb	r1, [r2, #0]
    a9ea:	4a55      	ldr	r2, [pc, #340]	; (ab40 <_printf_i+0x22c>)
    a9ec:	6819      	ldr	r1, [r3, #0]
    a9ee:	9203      	str	r2, [sp, #12]
    a9f0:	1d08      	adds	r0, r1, #4
    a9f2:	6822      	ldr	r2, [r4, #0]
    a9f4:	6018      	str	r0, [r3, #0]
    a9f6:	680d      	ldr	r5, [r1, #0]
    a9f8:	0610      	lsls	r0, r2, #24
    a9fa:	d402      	bmi.n	aa02 <_printf_i+0xee>
    a9fc:	0650      	lsls	r0, r2, #25
    a9fe:	d500      	bpl.n	aa02 <_printf_i+0xee>
    aa00:	b2ad      	uxth	r5, r5
    aa02:	07d3      	lsls	r3, r2, #31
    aa04:	d502      	bpl.n	aa0c <_printf_i+0xf8>
    aa06:	2320      	movs	r3, #32
    aa08:	431a      	orrs	r2, r3
    aa0a:	6022      	str	r2, [r4, #0]
    aa0c:	2710      	movs	r7, #16
    aa0e:	2d00      	cmp	r5, #0
    aa10:	d103      	bne.n	aa1a <_printf_i+0x106>
    aa12:	2320      	movs	r3, #32
    aa14:	6822      	ldr	r2, [r4, #0]
    aa16:	439a      	bics	r2, r3
    aa18:	6022      	str	r2, [r4, #0]
    aa1a:	1c23      	adds	r3, r4, #0
    aa1c:	2200      	movs	r2, #0
    aa1e:	3343      	adds	r3, #67	; 0x43
    aa20:	701a      	strb	r2, [r3, #0]
    aa22:	e002      	b.n	aa2a <_printf_i+0x116>
    aa24:	270a      	movs	r7, #10
    aa26:	4b45      	ldr	r3, [pc, #276]	; (ab3c <_printf_i+0x228>)
    aa28:	9303      	str	r3, [sp, #12]
    aa2a:	6863      	ldr	r3, [r4, #4]
    aa2c:	60a3      	str	r3, [r4, #8]
    aa2e:	2b00      	cmp	r3, #0
    aa30:	db03      	blt.n	aa3a <_printf_i+0x126>
    aa32:	2204      	movs	r2, #4
    aa34:	6821      	ldr	r1, [r4, #0]
    aa36:	4391      	bics	r1, r2
    aa38:	6021      	str	r1, [r4, #0]
    aa3a:	2d00      	cmp	r5, #0
    aa3c:	d102      	bne.n	aa44 <_printf_i+0x130>
    aa3e:	9e04      	ldr	r6, [sp, #16]
    aa40:	2b00      	cmp	r3, #0
    aa42:	d00e      	beq.n	aa62 <_printf_i+0x14e>
    aa44:	9e04      	ldr	r6, [sp, #16]
    aa46:	1c28      	adds	r0, r5, #0
    aa48:	1c39      	adds	r1, r7, #0
    aa4a:	f7fb fea1 	bl	6790 <__aeabi_uidivmod>
    aa4e:	9b03      	ldr	r3, [sp, #12]
    aa50:	3e01      	subs	r6, #1
    aa52:	5c5b      	ldrb	r3, [r3, r1]
    aa54:	1c28      	adds	r0, r5, #0
    aa56:	7033      	strb	r3, [r6, #0]
    aa58:	1c39      	adds	r1, r7, #0
    aa5a:	f7fb fe13 	bl	6684 <__aeabi_uidiv>
    aa5e:	1e05      	subs	r5, r0, #0
    aa60:	d1f1      	bne.n	aa46 <_printf_i+0x132>
    aa62:	2f08      	cmp	r7, #8
    aa64:	d109      	bne.n	aa7a <_printf_i+0x166>
    aa66:	6823      	ldr	r3, [r4, #0]
    aa68:	07db      	lsls	r3, r3, #31
    aa6a:	d506      	bpl.n	aa7a <_printf_i+0x166>
    aa6c:	6863      	ldr	r3, [r4, #4]
    aa6e:	6922      	ldr	r2, [r4, #16]
    aa70:	4293      	cmp	r3, r2
    aa72:	dc02      	bgt.n	aa7a <_printf_i+0x166>
    aa74:	2330      	movs	r3, #48	; 0x30
    aa76:	3e01      	subs	r6, #1
    aa78:	7033      	strb	r3, [r6, #0]
    aa7a:	9b04      	ldr	r3, [sp, #16]
    aa7c:	1b9b      	subs	r3, r3, r6
    aa7e:	6123      	str	r3, [r4, #16]
    aa80:	e02b      	b.n	aada <_printf_i+0x1c6>
    aa82:	6809      	ldr	r1, [r1, #0]
    aa84:	681a      	ldr	r2, [r3, #0]
    aa86:	0608      	lsls	r0, r1, #24
    aa88:	d407      	bmi.n	aa9a <_printf_i+0x186>
    aa8a:	0649      	lsls	r1, r1, #25
    aa8c:	d505      	bpl.n	aa9a <_printf_i+0x186>
    aa8e:	1d11      	adds	r1, r2, #4
    aa90:	6019      	str	r1, [r3, #0]
    aa92:	6813      	ldr	r3, [r2, #0]
    aa94:	8aa2      	ldrh	r2, [r4, #20]
    aa96:	801a      	strh	r2, [r3, #0]
    aa98:	e004      	b.n	aaa4 <_printf_i+0x190>
    aa9a:	1d11      	adds	r1, r2, #4
    aa9c:	6019      	str	r1, [r3, #0]
    aa9e:	6813      	ldr	r3, [r2, #0]
    aaa0:	6962      	ldr	r2, [r4, #20]
    aaa2:	601a      	str	r2, [r3, #0]
    aaa4:	2300      	movs	r3, #0
    aaa6:	9e04      	ldr	r6, [sp, #16]
    aaa8:	6123      	str	r3, [r4, #16]
    aaaa:	e016      	b.n	aada <_printf_i+0x1c6>
    aaac:	681a      	ldr	r2, [r3, #0]
    aaae:	1d11      	adds	r1, r2, #4
    aab0:	6019      	str	r1, [r3, #0]
    aab2:	6816      	ldr	r6, [r2, #0]
    aab4:	2100      	movs	r1, #0
    aab6:	1c30      	adds	r0, r6, #0
    aab8:	6862      	ldr	r2, [r4, #4]
    aaba:	f7ff f9e9 	bl	9e90 <memchr>
    aabe:	2800      	cmp	r0, #0
    aac0:	d001      	beq.n	aac6 <_printf_i+0x1b2>
    aac2:	1b80      	subs	r0, r0, r6
    aac4:	6060      	str	r0, [r4, #4]
    aac6:	6863      	ldr	r3, [r4, #4]
    aac8:	e003      	b.n	aad2 <_printf_i+0x1be>
    aaca:	1c26      	adds	r6, r4, #0
    aacc:	3642      	adds	r6, #66	; 0x42
    aace:	7032      	strb	r2, [r6, #0]
    aad0:	2301      	movs	r3, #1
    aad2:	6123      	str	r3, [r4, #16]
    aad4:	2300      	movs	r3, #0
    aad6:	9a04      	ldr	r2, [sp, #16]
    aad8:	7013      	strb	r3, [r2, #0]
    aada:	9b07      	ldr	r3, [sp, #28]
    aadc:	9805      	ldr	r0, [sp, #20]
    aade:	9300      	str	r3, [sp, #0]
    aae0:	1c21      	adds	r1, r4, #0
    aae2:	9b06      	ldr	r3, [sp, #24]
    aae4:	aa09      	add	r2, sp, #36	; 0x24
    aae6:	f7ff fea7 	bl	a838 <_printf_common>
    aaea:	1c43      	adds	r3, r0, #1
    aaec:	d102      	bne.n	aaf4 <_printf_i+0x1e0>
    aaee:	2001      	movs	r0, #1
    aaf0:	4240      	negs	r0, r0
    aaf2:	e021      	b.n	ab38 <_printf_i+0x224>
    aaf4:	6923      	ldr	r3, [r4, #16]
    aaf6:	9805      	ldr	r0, [sp, #20]
    aaf8:	9906      	ldr	r1, [sp, #24]
    aafa:	1c32      	adds	r2, r6, #0
    aafc:	9d07      	ldr	r5, [sp, #28]
    aafe:	47a8      	blx	r5
    ab00:	1c43      	adds	r3, r0, #1
    ab02:	d0f4      	beq.n	aaee <_printf_i+0x1da>
    ab04:	6823      	ldr	r3, [r4, #0]
    ab06:	079b      	lsls	r3, r3, #30
    ab08:	d405      	bmi.n	ab16 <_printf_i+0x202>
    ab0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ab0c:	68e0      	ldr	r0, [r4, #12]
    ab0e:	4298      	cmp	r0, r3
    ab10:	da12      	bge.n	ab38 <_printf_i+0x224>
    ab12:	1c18      	adds	r0, r3, #0
    ab14:	e010      	b.n	ab38 <_printf_i+0x224>
    ab16:	2500      	movs	r5, #0
    ab18:	68e3      	ldr	r3, [r4, #12]
    ab1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ab1c:	1a9b      	subs	r3, r3, r2
    ab1e:	429d      	cmp	r5, r3
    ab20:	daf3      	bge.n	ab0a <_printf_i+0x1f6>
    ab22:	1c22      	adds	r2, r4, #0
    ab24:	2301      	movs	r3, #1
    ab26:	9805      	ldr	r0, [sp, #20]
    ab28:	9906      	ldr	r1, [sp, #24]
    ab2a:	3219      	adds	r2, #25
    ab2c:	9e07      	ldr	r6, [sp, #28]
    ab2e:	47b0      	blx	r6
    ab30:	1c43      	adds	r3, r0, #1
    ab32:	d0dc      	beq.n	aaee <_printf_i+0x1da>
    ab34:	3501      	adds	r5, #1
    ab36:	e7ef      	b.n	ab18 <_printf_i+0x204>
    ab38:	b00b      	add	sp, #44	; 0x2c
    ab3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ab3c:	0000fa71 	.word	0x0000fa71
    ab40:	0000fa82 	.word	0x0000fa82

0000ab44 <_scanf_float>:
    ab44:	b5f0      	push	{r4, r5, r6, r7, lr}
    ab46:	1c15      	adds	r5, r2, #0
    ab48:	2200      	movs	r2, #0
    ab4a:	b08b      	sub	sp, #44	; 0x2c
    ab4c:	9306      	str	r3, [sp, #24]
    ab4e:	688b      	ldr	r3, [r1, #8]
    ab50:	9205      	str	r2, [sp, #20]
    ab52:	325d      	adds	r2, #93	; 0x5d
    ab54:	1c0e      	adds	r6, r1, #0
    ab56:	32ff      	adds	r2, #255	; 0xff
    ab58:	1e59      	subs	r1, r3, #1
    ab5a:	9002      	str	r0, [sp, #8]
    ab5c:	4291      	cmp	r1, r2
    ab5e:	d905      	bls.n	ab6c <_scanf_float+0x28>
    ab60:	3b5e      	subs	r3, #94	; 0x5e
    ab62:	3bff      	subs	r3, #255	; 0xff
    ab64:	9305      	str	r3, [sp, #20]
    ab66:	235e      	movs	r3, #94	; 0x5e
    ab68:	33ff      	adds	r3, #255	; 0xff
    ab6a:	60b3      	str	r3, [r6, #8]
    ab6c:	23f0      	movs	r3, #240	; 0xf0
    ab6e:	6832      	ldr	r2, [r6, #0]
    ab70:	00db      	lsls	r3, r3, #3
    ab72:	4313      	orrs	r3, r2
    ab74:	6033      	str	r3, [r6, #0]
    ab76:	1c33      	adds	r3, r6, #0
    ab78:	2400      	movs	r4, #0
    ab7a:	331c      	adds	r3, #28
    ab7c:	1c1f      	adds	r7, r3, #0
    ab7e:	9304      	str	r3, [sp, #16]
    ab80:	9403      	str	r4, [sp, #12]
    ab82:	9409      	str	r4, [sp, #36]	; 0x24
    ab84:	9408      	str	r4, [sp, #32]
    ab86:	9400      	str	r4, [sp, #0]
    ab88:	9407      	str	r4, [sp, #28]
    ab8a:	68b2      	ldr	r2, [r6, #8]
    ab8c:	2a00      	cmp	r2, #0
    ab8e:	d100      	bne.n	ab92 <_scanf_float+0x4e>
    ab90:	e0e1      	b.n	ad56 <_scanf_float+0x212>
    ab92:	682b      	ldr	r3, [r5, #0]
    ab94:	781b      	ldrb	r3, [r3, #0]
    ab96:	2b49      	cmp	r3, #73	; 0x49
    ab98:	d077      	beq.n	ac8a <_scanf_float+0x146>
    ab9a:	d818      	bhi.n	abce <_scanf_float+0x8a>
    ab9c:	2b39      	cmp	r3, #57	; 0x39
    ab9e:	d80d      	bhi.n	abbc <_scanf_float+0x78>
    aba0:	2b31      	cmp	r3, #49	; 0x31
    aba2:	d242      	bcs.n	ac2a <_scanf_float+0xe6>
    aba4:	2b2d      	cmp	r3, #45	; 0x2d
    aba6:	d049      	beq.n	ac3c <_scanf_float+0xf8>
    aba8:	d802      	bhi.n	abb0 <_scanf_float+0x6c>
    abaa:	2b2b      	cmp	r3, #43	; 0x2b
    abac:	d046      	beq.n	ac3c <_scanf_float+0xf8>
    abae:	e0d2      	b.n	ad56 <_scanf_float+0x212>
    abb0:	2b2e      	cmp	r3, #46	; 0x2e
    abb2:	d100      	bne.n	abb6 <_scanf_float+0x72>
    abb4:	e08d      	b.n	acd2 <_scanf_float+0x18e>
    abb6:	2b30      	cmp	r3, #48	; 0x30
    abb8:	d025      	beq.n	ac06 <_scanf_float+0xc2>
    abba:	e0cc      	b.n	ad56 <_scanf_float+0x212>
    abbc:	2b45      	cmp	r3, #69	; 0x45
    abbe:	d100      	bne.n	abc2 <_scanf_float+0x7e>
    abc0:	e090      	b.n	ace4 <_scanf_float+0x1a0>
    abc2:	2b46      	cmp	r3, #70	; 0x46
    abc4:	d079      	beq.n	acba <_scanf_float+0x176>
    abc6:	2b41      	cmp	r3, #65	; 0x41
    abc8:	d000      	beq.n	abcc <_scanf_float+0x88>
    abca:	e0c4      	b.n	ad56 <_scanf_float+0x212>
    abcc:	e058      	b.n	ac80 <_scanf_float+0x13c>
    abce:	2b65      	cmp	r3, #101	; 0x65
    abd0:	d100      	bne.n	abd4 <_scanf_float+0x90>
    abd2:	e087      	b.n	ace4 <_scanf_float+0x1a0>
    abd4:	d80a      	bhi.n	abec <_scanf_float+0xa8>
    abd6:	2b54      	cmp	r3, #84	; 0x54
    abd8:	d073      	beq.n	acc2 <_scanf_float+0x17e>
    abda:	d802      	bhi.n	abe2 <_scanf_float+0x9e>
    abdc:	2b4e      	cmp	r3, #78	; 0x4e
    abde:	d035      	beq.n	ac4c <_scanf_float+0x108>
    abe0:	e0b9      	b.n	ad56 <_scanf_float+0x212>
    abe2:	2b59      	cmp	r3, #89	; 0x59
    abe4:	d071      	beq.n	acca <_scanf_float+0x186>
    abe6:	2b61      	cmp	r3, #97	; 0x61
    abe8:	d04a      	beq.n	ac80 <_scanf_float+0x13c>
    abea:	e0b4      	b.n	ad56 <_scanf_float+0x212>
    abec:	2b6e      	cmp	r3, #110	; 0x6e
    abee:	d02d      	beq.n	ac4c <_scanf_float+0x108>
    abf0:	d804      	bhi.n	abfc <_scanf_float+0xb8>
    abf2:	2b66      	cmp	r3, #102	; 0x66
    abf4:	d061      	beq.n	acba <_scanf_float+0x176>
    abf6:	2b69      	cmp	r3, #105	; 0x69
    abf8:	d047      	beq.n	ac8a <_scanf_float+0x146>
    abfa:	e0ac      	b.n	ad56 <_scanf_float+0x212>
    abfc:	2b74      	cmp	r3, #116	; 0x74
    abfe:	d060      	beq.n	acc2 <_scanf_float+0x17e>
    ac00:	2b79      	cmp	r3, #121	; 0x79
    ac02:	d062      	beq.n	acca <_scanf_float+0x186>
    ac04:	e0a7      	b.n	ad56 <_scanf_float+0x212>
    ac06:	6831      	ldr	r1, [r6, #0]
    ac08:	05c8      	lsls	r0, r1, #23
    ac0a:	d50e      	bpl.n	ac2a <_scanf_float+0xe6>
    ac0c:	2380      	movs	r3, #128	; 0x80
    ac0e:	4399      	bics	r1, r3
    ac10:	9b00      	ldr	r3, [sp, #0]
    ac12:	6031      	str	r1, [r6, #0]
    ac14:	3301      	adds	r3, #1
    ac16:	9300      	str	r3, [sp, #0]
    ac18:	9b05      	ldr	r3, [sp, #20]
    ac1a:	2b00      	cmp	r3, #0
    ac1c:	d100      	bne.n	ac20 <_scanf_float+0xdc>
    ac1e:	e082      	b.n	ad26 <_scanf_float+0x1e2>
    ac20:	3b01      	subs	r3, #1
    ac22:	3201      	adds	r2, #1
    ac24:	9305      	str	r3, [sp, #20]
    ac26:	60b2      	str	r2, [r6, #8]
    ac28:	e07d      	b.n	ad26 <_scanf_float+0x1e2>
    ac2a:	9a03      	ldr	r2, [sp, #12]
    ac2c:	1912      	adds	r2, r2, r4
    ac2e:	2a00      	cmp	r2, #0
    ac30:	d000      	beq.n	ac34 <_scanf_float+0xf0>
    ac32:	e090      	b.n	ad56 <_scanf_float+0x212>
    ac34:	4ab3      	ldr	r2, [pc, #716]	; (af04 <_scanf_float+0x3c0>)
    ac36:	6831      	ldr	r1, [r6, #0]
    ac38:	400a      	ands	r2, r1
    ac3a:	e005      	b.n	ac48 <_scanf_float+0x104>
    ac3c:	2180      	movs	r1, #128	; 0x80
    ac3e:	6832      	ldr	r2, [r6, #0]
    ac40:	420a      	tst	r2, r1
    ac42:	d100      	bne.n	ac46 <_scanf_float+0x102>
    ac44:	e087      	b.n	ad56 <_scanf_float+0x212>
    ac46:	438a      	bics	r2, r1
    ac48:	6032      	str	r2, [r6, #0]
    ac4a:	e06a      	b.n	ad22 <_scanf_float+0x1de>
    ac4c:	9a03      	ldr	r2, [sp, #12]
    ac4e:	2a00      	cmp	r2, #0
    ac50:	d10e      	bne.n	ac70 <_scanf_float+0x12c>
    ac52:	9a00      	ldr	r2, [sp, #0]
    ac54:	2a00      	cmp	r2, #0
    ac56:	d10e      	bne.n	ac76 <_scanf_float+0x132>
    ac58:	6831      	ldr	r1, [r6, #0]
    ac5a:	22e0      	movs	r2, #224	; 0xe0
    ac5c:	1c08      	adds	r0, r1, #0
    ac5e:	00d2      	lsls	r2, r2, #3
    ac60:	4010      	ands	r0, r2
    ac62:	4290      	cmp	r0, r2
    ac64:	d107      	bne.n	ac76 <_scanf_float+0x132>
    ac66:	4aa8      	ldr	r2, [pc, #672]	; (af08 <_scanf_float+0x3c4>)
    ac68:	400a      	ands	r2, r1
    ac6a:	6032      	str	r2, [r6, #0]
    ac6c:	2201      	movs	r2, #1
    ac6e:	e057      	b.n	ad20 <_scanf_float+0x1dc>
    ac70:	9a03      	ldr	r2, [sp, #12]
    ac72:	2a02      	cmp	r2, #2
    ac74:	d053      	beq.n	ad1e <_scanf_float+0x1da>
    ac76:	2c01      	cmp	r4, #1
    ac78:	d01c      	beq.n	acb4 <_scanf_float+0x170>
    ac7a:	2c04      	cmp	r4, #4
    ac7c:	d01a      	beq.n	acb4 <_scanf_float+0x170>
    ac7e:	e06a      	b.n	ad56 <_scanf_float+0x212>
    ac80:	9a03      	ldr	r2, [sp, #12]
    ac82:	2a01      	cmp	r2, #1
    ac84:	d167      	bne.n	ad56 <_scanf_float+0x212>
    ac86:	2202      	movs	r2, #2
    ac88:	e04a      	b.n	ad20 <_scanf_float+0x1dc>
    ac8a:	2c00      	cmp	r4, #0
    ac8c:	d10e      	bne.n	acac <_scanf_float+0x168>
    ac8e:	9a00      	ldr	r2, [sp, #0]
    ac90:	2a00      	cmp	r2, #0
    ac92:	d163      	bne.n	ad5c <_scanf_float+0x218>
    ac94:	6831      	ldr	r1, [r6, #0]
    ac96:	22e0      	movs	r2, #224	; 0xe0
    ac98:	1c08      	adds	r0, r1, #0
    ac9a:	00d2      	lsls	r2, r2, #3
    ac9c:	4010      	ands	r0, r2
    ac9e:	4290      	cmp	r0, r2
    aca0:	d160      	bne.n	ad64 <_scanf_float+0x220>
    aca2:	4a99      	ldr	r2, [pc, #612]	; (af08 <_scanf_float+0x3c4>)
    aca4:	3401      	adds	r4, #1
    aca6:	400a      	ands	r2, r1
    aca8:	6032      	str	r2, [r6, #0]
    acaa:	e03a      	b.n	ad22 <_scanf_float+0x1de>
    acac:	21fd      	movs	r1, #253	; 0xfd
    acae:	1ee2      	subs	r2, r4, #3
    acb0:	420a      	tst	r2, r1
    acb2:	d150      	bne.n	ad56 <_scanf_float+0x212>
    acb4:	3401      	adds	r4, #1
    acb6:	b2e4      	uxtb	r4, r4
    acb8:	e033      	b.n	ad22 <_scanf_float+0x1de>
    acba:	2c02      	cmp	r4, #2
    acbc:	d14b      	bne.n	ad56 <_scanf_float+0x212>
    acbe:	2403      	movs	r4, #3
    acc0:	e02f      	b.n	ad22 <_scanf_float+0x1de>
    acc2:	2c06      	cmp	r4, #6
    acc4:	d147      	bne.n	ad56 <_scanf_float+0x212>
    acc6:	2407      	movs	r4, #7
    acc8:	e02b      	b.n	ad22 <_scanf_float+0x1de>
    acca:	2c07      	cmp	r4, #7
    accc:	d143      	bne.n	ad56 <_scanf_float+0x212>
    acce:	2408      	movs	r4, #8
    acd0:	e027      	b.n	ad22 <_scanf_float+0x1de>
    acd2:	6831      	ldr	r1, [r6, #0]
    acd4:	058a      	lsls	r2, r1, #22
    acd6:	d53e      	bpl.n	ad56 <_scanf_float+0x212>
    acd8:	4a8c      	ldr	r2, [pc, #560]	; (af0c <_scanf_float+0x3c8>)
    acda:	400a      	ands	r2, r1
    acdc:	6032      	str	r2, [r6, #0]
    acde:	9a00      	ldr	r2, [sp, #0]
    ace0:	9207      	str	r2, [sp, #28]
    ace2:	e01e      	b.n	ad22 <_scanf_float+0x1de>
    ace4:	22a0      	movs	r2, #160	; 0xa0
    ace6:	2080      	movs	r0, #128	; 0x80
    ace8:	6831      	ldr	r1, [r6, #0]
    acea:	00d2      	lsls	r2, r2, #3
    acec:	400a      	ands	r2, r1
    acee:	00c0      	lsls	r0, r0, #3
    acf0:	4282      	cmp	r2, r0
    acf2:	d004      	beq.n	acfe <_scanf_float+0x1ba>
    acf4:	4201      	tst	r1, r0
    acf6:	d02e      	beq.n	ad56 <_scanf_float+0x212>
    acf8:	9a00      	ldr	r2, [sp, #0]
    acfa:	2a00      	cmp	r2, #0
    acfc:	d032      	beq.n	ad64 <_scanf_float+0x220>
    acfe:	058a      	lsls	r2, r1, #22
    ad00:	d404      	bmi.n	ad0c <_scanf_float+0x1c8>
    ad02:	9a00      	ldr	r2, [sp, #0]
    ad04:	9807      	ldr	r0, [sp, #28]
    ad06:	9709      	str	r7, [sp, #36]	; 0x24
    ad08:	1a12      	subs	r2, r2, r0
    ad0a:	9208      	str	r2, [sp, #32]
    ad0c:	4a7e      	ldr	r2, [pc, #504]	; (af08 <_scanf_float+0x3c4>)
    ad0e:	400a      	ands	r2, r1
    ad10:	21c0      	movs	r1, #192	; 0xc0
    ad12:	0049      	lsls	r1, r1, #1
    ad14:	430a      	orrs	r2, r1
    ad16:	6032      	str	r2, [r6, #0]
    ad18:	2200      	movs	r2, #0
    ad1a:	9200      	str	r2, [sp, #0]
    ad1c:	e001      	b.n	ad22 <_scanf_float+0x1de>
    ad1e:	2203      	movs	r2, #3
    ad20:	9203      	str	r2, [sp, #12]
    ad22:	703b      	strb	r3, [r7, #0]
    ad24:	3701      	adds	r7, #1
    ad26:	68b3      	ldr	r3, [r6, #8]
    ad28:	3b01      	subs	r3, #1
    ad2a:	60b3      	str	r3, [r6, #8]
    ad2c:	6933      	ldr	r3, [r6, #16]
    ad2e:	3301      	adds	r3, #1
    ad30:	6133      	str	r3, [r6, #16]
    ad32:	686b      	ldr	r3, [r5, #4]
    ad34:	3b01      	subs	r3, #1
    ad36:	606b      	str	r3, [r5, #4]
    ad38:	2b00      	cmp	r3, #0
    ad3a:	dd03      	ble.n	ad44 <_scanf_float+0x200>
    ad3c:	682b      	ldr	r3, [r5, #0]
    ad3e:	3301      	adds	r3, #1
    ad40:	602b      	str	r3, [r5, #0]
    ad42:	e722      	b.n	ab8a <_scanf_float+0x46>
    ad44:	23c0      	movs	r3, #192	; 0xc0
    ad46:	005b      	lsls	r3, r3, #1
    ad48:	58f3      	ldr	r3, [r6, r3]
    ad4a:	9802      	ldr	r0, [sp, #8]
    ad4c:	1c29      	adds	r1, r5, #0
    ad4e:	4798      	blx	r3
    ad50:	2800      	cmp	r0, #0
    ad52:	d100      	bne.n	ad56 <_scanf_float+0x212>
    ad54:	e719      	b.n	ab8a <_scanf_float+0x46>
    ad56:	9b00      	ldr	r3, [sp, #0]
    ad58:	2b00      	cmp	r3, #0
    ad5a:	d003      	beq.n	ad64 <_scanf_float+0x220>
    ad5c:	6832      	ldr	r2, [r6, #0]
    ad5e:	4b6c      	ldr	r3, [pc, #432]	; (af10 <_scanf_float+0x3cc>)
    ad60:	4013      	ands	r3, r2
    ad62:	6033      	str	r3, [r6, #0]
    ad64:	9b03      	ldr	r3, [sp, #12]
    ad66:	3b01      	subs	r3, #1
    ad68:	2b01      	cmp	r3, #1
    ad6a:	d810      	bhi.n	ad8e <_scanf_float+0x24a>
    ad6c:	9b04      	ldr	r3, [sp, #16]
    ad6e:	429f      	cmp	r7, r3
    ad70:	d90b      	bls.n	ad8a <_scanf_float+0x246>
    ad72:	23be      	movs	r3, #190	; 0xbe
    ad74:	3f01      	subs	r7, #1
    ad76:	005b      	lsls	r3, r3, #1
    ad78:	58f3      	ldr	r3, [r6, r3]
    ad7a:	7839      	ldrb	r1, [r7, #0]
    ad7c:	9802      	ldr	r0, [sp, #8]
    ad7e:	1c2a      	adds	r2, r5, #0
    ad80:	4798      	blx	r3
    ad82:	6933      	ldr	r3, [r6, #16]
    ad84:	3b01      	subs	r3, #1
    ad86:	6133      	str	r3, [r6, #16]
    ad88:	e7f0      	b.n	ad6c <_scanf_float+0x228>
    ad8a:	2401      	movs	r4, #1
    ad8c:	e0b7      	b.n	aefe <_scanf_float+0x3ba>
    ad8e:	1e63      	subs	r3, r4, #1
    ad90:	2b06      	cmp	r3, #6
    ad92:	d82a      	bhi.n	adea <_scanf_float+0x2a6>
    ad94:	2c02      	cmp	r4, #2
    ad96:	d919      	bls.n	adcc <_scanf_float+0x288>
    ad98:	9405      	str	r4, [sp, #20]
    ad9a:	9703      	str	r7, [sp, #12]
    ad9c:	9b05      	ldr	r3, [sp, #20]
    ad9e:	3b01      	subs	r3, #1
    ada0:	b2db      	uxtb	r3, r3
    ada2:	9305      	str	r3, [sp, #20]
    ada4:	2b02      	cmp	r3, #2
    ada6:	d00d      	beq.n	adc4 <_scanf_float+0x280>
    ada8:	9b03      	ldr	r3, [sp, #12]
    adaa:	9802      	ldr	r0, [sp, #8]
    adac:	3b01      	subs	r3, #1
    adae:	9303      	str	r3, [sp, #12]
    adb0:	7819      	ldrb	r1, [r3, #0]
    adb2:	23be      	movs	r3, #190	; 0xbe
    adb4:	005b      	lsls	r3, r3, #1
    adb6:	58f3      	ldr	r3, [r6, r3]
    adb8:	1c2a      	adds	r2, r5, #0
    adba:	4798      	blx	r3
    adbc:	6933      	ldr	r3, [r6, #16]
    adbe:	3b01      	subs	r3, #1
    adc0:	6133      	str	r3, [r6, #16]
    adc2:	e7eb      	b.n	ad9c <_scanf_float+0x258>
    adc4:	3c03      	subs	r4, #3
    adc6:	b2e4      	uxtb	r4, r4
    adc8:	1b3f      	subs	r7, r7, r4
    adca:	e00e      	b.n	adea <_scanf_float+0x2a6>
    adcc:	9b04      	ldr	r3, [sp, #16]
    adce:	429f      	cmp	r7, r3
    add0:	d9db      	bls.n	ad8a <_scanf_float+0x246>
    add2:	23be      	movs	r3, #190	; 0xbe
    add4:	3f01      	subs	r7, #1
    add6:	005b      	lsls	r3, r3, #1
    add8:	58f3      	ldr	r3, [r6, r3]
    adda:	7839      	ldrb	r1, [r7, #0]
    addc:	9802      	ldr	r0, [sp, #8]
    adde:	1c2a      	adds	r2, r5, #0
    ade0:	4798      	blx	r3
    ade2:	6933      	ldr	r3, [r6, #16]
    ade4:	3b01      	subs	r3, #1
    ade6:	6133      	str	r3, [r6, #16]
    ade8:	e7f0      	b.n	adcc <_scanf_float+0x288>
    adea:	6833      	ldr	r3, [r6, #0]
    adec:	05da      	lsls	r2, r3, #23
    adee:	d52b      	bpl.n	ae48 <_scanf_float+0x304>
    adf0:	055b      	lsls	r3, r3, #21
    adf2:	d50e      	bpl.n	ae12 <_scanf_float+0x2ce>
    adf4:	9b04      	ldr	r3, [sp, #16]
    adf6:	429f      	cmp	r7, r3
    adf8:	d9c7      	bls.n	ad8a <_scanf_float+0x246>
    adfa:	23be      	movs	r3, #190	; 0xbe
    adfc:	3f01      	subs	r7, #1
    adfe:	005b      	lsls	r3, r3, #1
    ae00:	58f3      	ldr	r3, [r6, r3]
    ae02:	7839      	ldrb	r1, [r7, #0]
    ae04:	9802      	ldr	r0, [sp, #8]
    ae06:	1c2a      	adds	r2, r5, #0
    ae08:	4798      	blx	r3
    ae0a:	6933      	ldr	r3, [r6, #16]
    ae0c:	3b01      	subs	r3, #1
    ae0e:	6133      	str	r3, [r6, #16]
    ae10:	e7f0      	b.n	adf4 <_scanf_float+0x2b0>
    ae12:	6933      	ldr	r3, [r6, #16]
    ae14:	1e7c      	subs	r4, r7, #1
    ae16:	7821      	ldrb	r1, [r4, #0]
    ae18:	3b01      	subs	r3, #1
    ae1a:	6133      	str	r3, [r6, #16]
    ae1c:	2965      	cmp	r1, #101	; 0x65
    ae1e:	d00c      	beq.n	ae3a <_scanf_float+0x2f6>
    ae20:	2945      	cmp	r1, #69	; 0x45
    ae22:	d00a      	beq.n	ae3a <_scanf_float+0x2f6>
    ae24:	23be      	movs	r3, #190	; 0xbe
    ae26:	005b      	lsls	r3, r3, #1
    ae28:	58f3      	ldr	r3, [r6, r3]
    ae2a:	9802      	ldr	r0, [sp, #8]
    ae2c:	1c2a      	adds	r2, r5, #0
    ae2e:	4798      	blx	r3
    ae30:	6933      	ldr	r3, [r6, #16]
    ae32:	1ebc      	subs	r4, r7, #2
    ae34:	3b01      	subs	r3, #1
    ae36:	7821      	ldrb	r1, [r4, #0]
    ae38:	6133      	str	r3, [r6, #16]
    ae3a:	23be      	movs	r3, #190	; 0xbe
    ae3c:	005b      	lsls	r3, r3, #1
    ae3e:	58f3      	ldr	r3, [r6, r3]
    ae40:	9802      	ldr	r0, [sp, #8]
    ae42:	1c2a      	adds	r2, r5, #0
    ae44:	4798      	blx	r3
    ae46:	1c27      	adds	r7, r4, #0
    ae48:	2410      	movs	r4, #16
    ae4a:	6833      	ldr	r3, [r6, #0]
    ae4c:	401c      	ands	r4, r3
    ae4e:	d155      	bne.n	aefc <_scanf_float+0x3b8>
    ae50:	23c0      	movs	r3, #192	; 0xc0
    ae52:	703c      	strb	r4, [r7, #0]
    ae54:	6832      	ldr	r2, [r6, #0]
    ae56:	00db      	lsls	r3, r3, #3
    ae58:	4013      	ands	r3, r2
    ae5a:	2280      	movs	r2, #128	; 0x80
    ae5c:	00d2      	lsls	r2, r2, #3
    ae5e:	4293      	cmp	r3, r2
    ae60:	d106      	bne.n	ae70 <_scanf_float+0x32c>
    ae62:	9a07      	ldr	r2, [sp, #28]
    ae64:	9b00      	ldr	r3, [sp, #0]
    ae66:	1a9b      	subs	r3, r3, r2
    ae68:	425a      	negs	r2, r3
    ae6a:	2b00      	cmp	r3, #0
    ae6c:	d10d      	bne.n	ae8a <_scanf_float+0x346>
    ae6e:	e018      	b.n	aea2 <_scanf_float+0x35e>
    ae70:	9b08      	ldr	r3, [sp, #32]
    ae72:	2b00      	cmp	r3, #0
    ae74:	d015      	beq.n	aea2 <_scanf_float+0x35e>
    ae76:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ae78:	1c22      	adds	r2, r4, #0
    ae7a:	1c59      	adds	r1, r3, #1
    ae7c:	9802      	ldr	r0, [sp, #8]
    ae7e:	230a      	movs	r3, #10
    ae80:	f001 fa08 	bl	c294 <_strtol_r>
    ae84:	9b08      	ldr	r3, [sp, #32]
    ae86:	9f09      	ldr	r7, [sp, #36]	; 0x24
    ae88:	1ac2      	subs	r2, r0, r3
    ae8a:	1c33      	adds	r3, r6, #0
    ae8c:	3370      	adds	r3, #112	; 0x70
    ae8e:	33ff      	adds	r3, #255	; 0xff
    ae90:	429f      	cmp	r7, r3
    ae92:	d302      	bcc.n	ae9a <_scanf_float+0x356>
    ae94:	1c37      	adds	r7, r6, #0
    ae96:	376f      	adds	r7, #111	; 0x6f
    ae98:	37ff      	adds	r7, #255	; 0xff
    ae9a:	1c38      	adds	r0, r7, #0
    ae9c:	491d      	ldr	r1, [pc, #116]	; (af14 <_scanf_float+0x3d0>)
    ae9e:	f000 fae3 	bl	b468 <siprintf>
    aea2:	2200      	movs	r2, #0
    aea4:	9802      	ldr	r0, [sp, #8]
    aea6:	9904      	ldr	r1, [sp, #16]
    aea8:	f000 fbda 	bl	b660 <_strtod_r>
    aeac:	9b06      	ldr	r3, [sp, #24]
    aeae:	6832      	ldr	r2, [r6, #0]
    aeb0:	9000      	str	r0, [sp, #0]
    aeb2:	9101      	str	r1, [sp, #4]
    aeb4:	681b      	ldr	r3, [r3, #0]
    aeb6:	0791      	lsls	r1, r2, #30
    aeb8:	d401      	bmi.n	aebe <_scanf_float+0x37a>
    aeba:	0752      	lsls	r2, r2, #29
    aebc:	d508      	bpl.n	aed0 <_scanf_float+0x38c>
    aebe:	9906      	ldr	r1, [sp, #24]
    aec0:	1d1a      	adds	r2, r3, #4
    aec2:	600a      	str	r2, [r1, #0]
    aec4:	681b      	ldr	r3, [r3, #0]
    aec6:	9900      	ldr	r1, [sp, #0]
    aec8:	9a01      	ldr	r2, [sp, #4]
    aeca:	6019      	str	r1, [r3, #0]
    aecc:	605a      	str	r2, [r3, #4]
    aece:	e011      	b.n	aef4 <_scanf_float+0x3b0>
    aed0:	9906      	ldr	r1, [sp, #24]
    aed2:	1d1a      	adds	r2, r3, #4
    aed4:	600a      	str	r2, [r1, #0]
    aed6:	9800      	ldr	r0, [sp, #0]
    aed8:	9901      	ldr	r1, [sp, #4]
    aeda:	681d      	ldr	r5, [r3, #0]
    aedc:	f000 f9c4 	bl	b268 <__fpclassifyd>
    aee0:	2800      	cmp	r0, #0
    aee2:	d102      	bne.n	aeea <_scanf_float+0x3a6>
    aee4:	f000 fabc 	bl	b460 <nanf>
    aee8:	e003      	b.n	aef2 <_scanf_float+0x3ae>
    aeea:	9800      	ldr	r0, [sp, #0]
    aeec:	9901      	ldr	r1, [sp, #4]
    aeee:	f7fe fb4b 	bl	9588 <__aeabi_d2f>
    aef2:	6028      	str	r0, [r5, #0]
    aef4:	68f3      	ldr	r3, [r6, #12]
    aef6:	3301      	adds	r3, #1
    aef8:	60f3      	str	r3, [r6, #12]
    aefa:	e000      	b.n	aefe <_scanf_float+0x3ba>
    aefc:	2400      	movs	r4, #0
    aefe:	1c20      	adds	r0, r4, #0
    af00:	b00b      	add	sp, #44	; 0x2c
    af02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    af04:	fffffe7f 	.word	0xfffffe7f
    af08:	fffff87f 	.word	0xfffff87f
    af0c:	fffffd7f 	.word	0xfffffd7f
    af10:	fffffeff 	.word	0xfffffeff
    af14:	0000fa93 	.word	0x0000fa93

0000af18 <_scanf_chars>:
    af18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    af1a:	1c15      	adds	r5, r2, #0
    af1c:	688a      	ldr	r2, [r1, #8]
    af1e:	9001      	str	r0, [sp, #4]
    af20:	1c0c      	adds	r4, r1, #0
    af22:	2a00      	cmp	r2, #0
    af24:	d106      	bne.n	af34 <_scanf_chars+0x1c>
    af26:	698a      	ldr	r2, [r1, #24]
    af28:	1e51      	subs	r1, r2, #1
    af2a:	418a      	sbcs	r2, r1
    af2c:	2101      	movs	r1, #1
    af2e:	4252      	negs	r2, r2
    af30:	430a      	orrs	r2, r1
    af32:	60a2      	str	r2, [r4, #8]
    af34:	6822      	ldr	r2, [r4, #0]
    af36:	06d2      	lsls	r2, r2, #27
    af38:	d403      	bmi.n	af42 <_scanf_chars+0x2a>
    af3a:	681a      	ldr	r2, [r3, #0]
    af3c:	1d11      	adds	r1, r2, #4
    af3e:	6019      	str	r1, [r3, #0]
    af40:	6817      	ldr	r7, [r2, #0]
    af42:	2600      	movs	r6, #0
    af44:	69a0      	ldr	r0, [r4, #24]
    af46:	2800      	cmp	r0, #0
    af48:	d11d      	bne.n	af86 <_scanf_chars+0x6e>
    af4a:	6823      	ldr	r3, [r4, #0]
    af4c:	3601      	adds	r6, #1
    af4e:	06db      	lsls	r3, r3, #27
    af50:	d403      	bmi.n	af5a <_scanf_chars+0x42>
    af52:	682b      	ldr	r3, [r5, #0]
    af54:	781b      	ldrb	r3, [r3, #0]
    af56:	703b      	strb	r3, [r7, #0]
    af58:	3701      	adds	r7, #1
    af5a:	682a      	ldr	r2, [r5, #0]
    af5c:	686b      	ldr	r3, [r5, #4]
    af5e:	3201      	adds	r2, #1
    af60:	602a      	str	r2, [r5, #0]
    af62:	68a2      	ldr	r2, [r4, #8]
    af64:	3b01      	subs	r3, #1
    af66:	3a01      	subs	r2, #1
    af68:	606b      	str	r3, [r5, #4]
    af6a:	60a2      	str	r2, [r4, #8]
    af6c:	2a00      	cmp	r2, #0
    af6e:	d01f      	beq.n	afb0 <_scanf_chars+0x98>
    af70:	2b00      	cmp	r3, #0
    af72:	dce7      	bgt.n	af44 <_scanf_chars+0x2c>
    af74:	23c0      	movs	r3, #192	; 0xc0
    af76:	005b      	lsls	r3, r3, #1
    af78:	58e3      	ldr	r3, [r4, r3]
    af7a:	9801      	ldr	r0, [sp, #4]
    af7c:	1c29      	adds	r1, r5, #0
    af7e:	4798      	blx	r3
    af80:	2800      	cmp	r0, #0
    af82:	d0df      	beq.n	af44 <_scanf_chars+0x2c>
    af84:	e014      	b.n	afb0 <_scanf_chars+0x98>
    af86:	2801      	cmp	r0, #1
    af88:	d108      	bne.n	af9c <_scanf_chars+0x84>
    af8a:	682b      	ldr	r3, [r5, #0]
    af8c:	6962      	ldr	r2, [r4, #20]
    af8e:	781b      	ldrb	r3, [r3, #0]
    af90:	5cd3      	ldrb	r3, [r2, r3]
    af92:	2b00      	cmp	r3, #0
    af94:	d1d9      	bne.n	af4a <_scanf_chars+0x32>
    af96:	2e00      	cmp	r6, #0
    af98:	d019      	beq.n	afce <_scanf_chars+0xb6>
    af9a:	e009      	b.n	afb0 <_scanf_chars+0x98>
    af9c:	2802      	cmp	r0, #2
    af9e:	d107      	bne.n	afb0 <_scanf_chars+0x98>
    afa0:	682b      	ldr	r3, [r5, #0]
    afa2:	4a0b      	ldr	r2, [pc, #44]	; (afd0 <_scanf_chars+0xb8>)
    afa4:	781b      	ldrb	r3, [r3, #0]
    afa6:	6812      	ldr	r2, [r2, #0]
    afa8:	18d3      	adds	r3, r2, r3
    afaa:	785b      	ldrb	r3, [r3, #1]
    afac:	071b      	lsls	r3, r3, #28
    afae:	d5cc      	bpl.n	af4a <_scanf_chars+0x32>
    afb0:	2310      	movs	r3, #16
    afb2:	6822      	ldr	r2, [r4, #0]
    afb4:	4013      	ands	r3, r2
    afb6:	d106      	bne.n	afc6 <_scanf_chars+0xae>
    afb8:	68e2      	ldr	r2, [r4, #12]
    afba:	3201      	adds	r2, #1
    afbc:	60e2      	str	r2, [r4, #12]
    afbe:	69a2      	ldr	r2, [r4, #24]
    afc0:	2a00      	cmp	r2, #0
    afc2:	d000      	beq.n	afc6 <_scanf_chars+0xae>
    afc4:	703b      	strb	r3, [r7, #0]
    afc6:	2000      	movs	r0, #0
    afc8:	6923      	ldr	r3, [r4, #16]
    afca:	199e      	adds	r6, r3, r6
    afcc:	6126      	str	r6, [r4, #16]
    afce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    afd0:	20000138 	.word	0x20000138

0000afd4 <_scanf_i>:
    afd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    afd6:	1c0c      	adds	r4, r1, #0
    afd8:	b08b      	sub	sp, #44	; 0x2c
    afda:	9301      	str	r3, [sp, #4]
    afdc:	4b74      	ldr	r3, [pc, #464]	; (b1b0 <_scanf_i+0x1dc>)
    afde:	9004      	str	r0, [sp, #16]
    afe0:	1c16      	adds	r6, r2, #0
    afe2:	aa07      	add	r2, sp, #28
    afe4:	cb23      	ldmia	r3!, {r0, r1, r5}
    afe6:	c223      	stmia	r2!, {r0, r1, r5}
    afe8:	4b72      	ldr	r3, [pc, #456]	; (b1b4 <_scanf_i+0x1e0>)
    afea:	9305      	str	r3, [sp, #20]
    afec:	69a3      	ldr	r3, [r4, #24]
    afee:	2b03      	cmp	r3, #3
    aff0:	d001      	beq.n	aff6 <_scanf_i+0x22>
    aff2:	4b71      	ldr	r3, [pc, #452]	; (b1b8 <_scanf_i+0x1e4>)
    aff4:	9305      	str	r3, [sp, #20]
    aff6:	2200      	movs	r2, #0
    aff8:	68a3      	ldr	r3, [r4, #8]
    affa:	9203      	str	r2, [sp, #12]
    affc:	325d      	adds	r2, #93	; 0x5d
    affe:	1e59      	subs	r1, r3, #1
    b000:	32ff      	adds	r2, #255	; 0xff
    b002:	4291      	cmp	r1, r2
    b004:	d905      	bls.n	b012 <_scanf_i+0x3e>
    b006:	3b5e      	subs	r3, #94	; 0x5e
    b008:	3bff      	subs	r3, #255	; 0xff
    b00a:	9303      	str	r3, [sp, #12]
    b00c:	235e      	movs	r3, #94	; 0x5e
    b00e:	33ff      	adds	r3, #255	; 0xff
    b010:	60a3      	str	r3, [r4, #8]
    b012:	1c23      	adds	r3, r4, #0
    b014:	331c      	adds	r3, #28
    b016:	9300      	str	r3, [sp, #0]
    b018:	23d0      	movs	r3, #208	; 0xd0
    b01a:	2700      	movs	r7, #0
    b01c:	6822      	ldr	r2, [r4, #0]
    b01e:	011b      	lsls	r3, r3, #4
    b020:	4313      	orrs	r3, r2
    b022:	6023      	str	r3, [r4, #0]
    b024:	9b00      	ldr	r3, [sp, #0]
    b026:	9302      	str	r3, [sp, #8]
    b028:	6832      	ldr	r2, [r6, #0]
    b02a:	00bb      	lsls	r3, r7, #2
    b02c:	7811      	ldrb	r1, [r2, #0]
    b02e:	aa07      	add	r2, sp, #28
    b030:	5898      	ldr	r0, [r3, r2]
    b032:	2202      	movs	r2, #2
    b034:	f7fe ff2c 	bl	9e90 <memchr>
    b038:	2800      	cmp	r0, #0
    b03a:	d039      	beq.n	b0b0 <_scanf_i+0xdc>
    b03c:	2f01      	cmp	r7, #1
    b03e:	d10d      	bne.n	b05c <_scanf_i+0x88>
    b040:	6863      	ldr	r3, [r4, #4]
    b042:	2b00      	cmp	r3, #0
    b044:	d106      	bne.n	b054 <_scanf_i+0x80>
    b046:	3308      	adds	r3, #8
    b048:	6822      	ldr	r2, [r4, #0]
    b04a:	6063      	str	r3, [r4, #4]
    b04c:	33f9      	adds	r3, #249	; 0xf9
    b04e:	33ff      	adds	r3, #255	; 0xff
    b050:	4313      	orrs	r3, r2
    b052:	6023      	str	r3, [r4, #0]
    b054:	4b59      	ldr	r3, [pc, #356]	; (b1bc <_scanf_i+0x1e8>)
    b056:	6822      	ldr	r2, [r4, #0]
    b058:	4013      	ands	r3, r2
    b05a:	e00d      	b.n	b078 <_scanf_i+0xa4>
    b05c:	2f02      	cmp	r7, #2
    b05e:	d10c      	bne.n	b07a <_scanf_i+0xa6>
    b060:	22c0      	movs	r2, #192	; 0xc0
    b062:	2180      	movs	r1, #128	; 0x80
    b064:	6823      	ldr	r3, [r4, #0]
    b066:	00d2      	lsls	r2, r2, #3
    b068:	401a      	ands	r2, r3
    b06a:	0089      	lsls	r1, r1, #2
    b06c:	428a      	cmp	r2, r1
    b06e:	d122      	bne.n	b0b6 <_scanf_i+0xe2>
    b070:	2210      	movs	r2, #16
    b072:	6062      	str	r2, [r4, #4]
    b074:	32f0      	adds	r2, #240	; 0xf0
    b076:	4313      	orrs	r3, r2
    b078:	6023      	str	r3, [r4, #0]
    b07a:	68a3      	ldr	r3, [r4, #8]
    b07c:	1e5a      	subs	r2, r3, #1
    b07e:	60a2      	str	r2, [r4, #8]
    b080:	2b00      	cmp	r3, #0
    b082:	d015      	beq.n	b0b0 <_scanf_i+0xdc>
    b084:	9b02      	ldr	r3, [sp, #8]
    b086:	1c5d      	adds	r5, r3, #1
    b088:	6833      	ldr	r3, [r6, #0]
    b08a:	1c5a      	adds	r2, r3, #1
    b08c:	6032      	str	r2, [r6, #0]
    b08e:	781b      	ldrb	r3, [r3, #0]
    b090:	9a02      	ldr	r2, [sp, #8]
    b092:	9502      	str	r5, [sp, #8]
    b094:	7013      	strb	r3, [r2, #0]
    b096:	6873      	ldr	r3, [r6, #4]
    b098:	3b01      	subs	r3, #1
    b09a:	6073      	str	r3, [r6, #4]
    b09c:	2b00      	cmp	r3, #0
    b09e:	dc07      	bgt.n	b0b0 <_scanf_i+0xdc>
    b0a0:	23c0      	movs	r3, #192	; 0xc0
    b0a2:	005b      	lsls	r3, r3, #1
    b0a4:	58e3      	ldr	r3, [r4, r3]
    b0a6:	9804      	ldr	r0, [sp, #16]
    b0a8:	1c31      	adds	r1, r6, #0
    b0aa:	4798      	blx	r3
    b0ac:	2800      	cmp	r0, #0
    b0ae:	d144      	bne.n	b13a <_scanf_i+0x166>
    b0b0:	3701      	adds	r7, #1
    b0b2:	2f03      	cmp	r7, #3
    b0b4:	d1b8      	bne.n	b028 <_scanf_i+0x54>
    b0b6:	6863      	ldr	r3, [r4, #4]
    b0b8:	2b00      	cmp	r3, #0
    b0ba:	d101      	bne.n	b0c0 <_scanf_i+0xec>
    b0bc:	330a      	adds	r3, #10
    b0be:	6063      	str	r3, [r4, #4]
    b0c0:	2110      	movs	r1, #16
    b0c2:	2700      	movs	r7, #0
    b0c4:	6863      	ldr	r3, [r4, #4]
    b0c6:	6960      	ldr	r0, [r4, #20]
    b0c8:	1ac9      	subs	r1, r1, r3
    b0ca:	4b3d      	ldr	r3, [pc, #244]	; (b1c0 <_scanf_i+0x1ec>)
    b0cc:	18c9      	adds	r1, r1, r3
    b0ce:	f000 f905 	bl	b2dc <__sccl>
    b0d2:	9d02      	ldr	r5, [sp, #8]
    b0d4:	68a3      	ldr	r3, [r4, #8]
    b0d6:	2b00      	cmp	r3, #0
    b0d8:	d030      	beq.n	b13c <_scanf_i+0x168>
    b0da:	6832      	ldr	r2, [r6, #0]
    b0dc:	6960      	ldr	r0, [r4, #20]
    b0de:	7811      	ldrb	r1, [r2, #0]
    b0e0:	5c40      	ldrb	r0, [r0, r1]
    b0e2:	2800      	cmp	r0, #0
    b0e4:	d02a      	beq.n	b13c <_scanf_i+0x168>
    b0e6:	2930      	cmp	r1, #48	; 0x30
    b0e8:	d10b      	bne.n	b102 <_scanf_i+0x12e>
    b0ea:	6821      	ldr	r1, [r4, #0]
    b0ec:	0509      	lsls	r1, r1, #20
    b0ee:	d508      	bpl.n	b102 <_scanf_i+0x12e>
    b0f0:	9a03      	ldr	r2, [sp, #12]
    b0f2:	3701      	adds	r7, #1
    b0f4:	2a00      	cmp	r2, #0
    b0f6:	d00b      	beq.n	b110 <_scanf_i+0x13c>
    b0f8:	3a01      	subs	r2, #1
    b0fa:	3301      	adds	r3, #1
    b0fc:	9203      	str	r2, [sp, #12]
    b0fe:	60a3      	str	r3, [r4, #8]
    b100:	e006      	b.n	b110 <_scanf_i+0x13c>
    b102:	6821      	ldr	r1, [r4, #0]
    b104:	4b2f      	ldr	r3, [pc, #188]	; (b1c4 <_scanf_i+0x1f0>)
    b106:	400b      	ands	r3, r1
    b108:	6023      	str	r3, [r4, #0]
    b10a:	7813      	ldrb	r3, [r2, #0]
    b10c:	702b      	strb	r3, [r5, #0]
    b10e:	3501      	adds	r5, #1
    b110:	6873      	ldr	r3, [r6, #4]
    b112:	3b01      	subs	r3, #1
    b114:	6073      	str	r3, [r6, #4]
    b116:	2b00      	cmp	r3, #0
    b118:	dd03      	ble.n	b122 <_scanf_i+0x14e>
    b11a:	6833      	ldr	r3, [r6, #0]
    b11c:	3301      	adds	r3, #1
    b11e:	6033      	str	r3, [r6, #0]
    b120:	e007      	b.n	b132 <_scanf_i+0x15e>
    b122:	23c0      	movs	r3, #192	; 0xc0
    b124:	005b      	lsls	r3, r3, #1
    b126:	58e3      	ldr	r3, [r4, r3]
    b128:	9804      	ldr	r0, [sp, #16]
    b12a:	1c31      	adds	r1, r6, #0
    b12c:	4798      	blx	r3
    b12e:	2800      	cmp	r0, #0
    b130:	d104      	bne.n	b13c <_scanf_i+0x168>
    b132:	68a3      	ldr	r3, [r4, #8]
    b134:	3b01      	subs	r3, #1
    b136:	60a3      	str	r3, [r4, #8]
    b138:	e7cc      	b.n	b0d4 <_scanf_i+0x100>
    b13a:	2700      	movs	r7, #0
    b13c:	6823      	ldr	r3, [r4, #0]
    b13e:	05db      	lsls	r3, r3, #23
    b140:	d50e      	bpl.n	b160 <_scanf_i+0x18c>
    b142:	9b00      	ldr	r3, [sp, #0]
    b144:	429d      	cmp	r5, r3
    b146:	d907      	bls.n	b158 <_scanf_i+0x184>
    b148:	23be      	movs	r3, #190	; 0xbe
    b14a:	3d01      	subs	r5, #1
    b14c:	005b      	lsls	r3, r3, #1
    b14e:	7829      	ldrb	r1, [r5, #0]
    b150:	58e3      	ldr	r3, [r4, r3]
    b152:	9804      	ldr	r0, [sp, #16]
    b154:	1c32      	adds	r2, r6, #0
    b156:	4798      	blx	r3
    b158:	9b00      	ldr	r3, [sp, #0]
    b15a:	2001      	movs	r0, #1
    b15c:	429d      	cmp	r5, r3
    b15e:	d025      	beq.n	b1ac <_scanf_i+0x1d8>
    b160:	2210      	movs	r2, #16
    b162:	6823      	ldr	r3, [r4, #0]
    b164:	401a      	ands	r2, r3
    b166:	d11a      	bne.n	b19e <_scanf_i+0x1ca>
    b168:	702a      	strb	r2, [r5, #0]
    b16a:	6863      	ldr	r3, [r4, #4]
    b16c:	9804      	ldr	r0, [sp, #16]
    b16e:	9900      	ldr	r1, [sp, #0]
    b170:	9e05      	ldr	r6, [sp, #20]
    b172:	47b0      	blx	r6
    b174:	9b01      	ldr	r3, [sp, #4]
    b176:	6822      	ldr	r2, [r4, #0]
    b178:	681b      	ldr	r3, [r3, #0]
    b17a:	0691      	lsls	r1, r2, #26
    b17c:	d407      	bmi.n	b18e <_scanf_i+0x1ba>
    b17e:	07d1      	lsls	r1, r2, #31
    b180:	d505      	bpl.n	b18e <_scanf_i+0x1ba>
    b182:	9901      	ldr	r1, [sp, #4]
    b184:	1d1a      	adds	r2, r3, #4
    b186:	600a      	str	r2, [r1, #0]
    b188:	681b      	ldr	r3, [r3, #0]
    b18a:	8018      	strh	r0, [r3, #0]
    b18c:	e004      	b.n	b198 <_scanf_i+0x1c4>
    b18e:	9901      	ldr	r1, [sp, #4]
    b190:	1d1a      	adds	r2, r3, #4
    b192:	600a      	str	r2, [r1, #0]
    b194:	681b      	ldr	r3, [r3, #0]
    b196:	6018      	str	r0, [r3, #0]
    b198:	68e3      	ldr	r3, [r4, #12]
    b19a:	3301      	adds	r3, #1
    b19c:	60e3      	str	r3, [r4, #12]
    b19e:	2000      	movs	r0, #0
    b1a0:	9b00      	ldr	r3, [sp, #0]
    b1a2:	1aed      	subs	r5, r5, r3
    b1a4:	6923      	ldr	r3, [r4, #16]
    b1a6:	19ed      	adds	r5, r5, r7
    b1a8:	195d      	adds	r5, r3, r5
    b1aa:	6125      	str	r5, [r4, #16]
    b1ac:	b00b      	add	sp, #44	; 0x2c
    b1ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b1b0:	0000fa98 	.word	0x0000fa98
    b1b4:	0000c295 	.word	0x0000c295
    b1b8:	0000c3b5 	.word	0x0000c3b5
    b1bc:	fffffaff 	.word	0xfffffaff
    b1c0:	0000faa4 	.word	0x0000faa4
    b1c4:	fffff6ff 	.word	0xfffff6ff

0000b1c8 <_open_r>:
    b1c8:	b538      	push	{r3, r4, r5, lr}
    b1ca:	1c05      	adds	r5, r0, #0
    b1cc:	2000      	movs	r0, #0
    b1ce:	4c07      	ldr	r4, [pc, #28]	; (b1ec <_open_r+0x24>)
    b1d0:	6020      	str	r0, [r4, #0]
    b1d2:	1c08      	adds	r0, r1, #0
    b1d4:	1c11      	adds	r1, r2, #0
    b1d6:	1c1a      	adds	r2, r3, #0
    b1d8:	f7f8 fdb8 	bl	3d4c <_open>
    b1dc:	1c43      	adds	r3, r0, #1
    b1de:	d103      	bne.n	b1e8 <_open_r+0x20>
    b1e0:	6823      	ldr	r3, [r4, #0]
    b1e2:	2b00      	cmp	r3, #0
    b1e4:	d000      	beq.n	b1e8 <_open_r+0x20>
    b1e6:	602b      	str	r3, [r5, #0]
    b1e8:	bd38      	pop	{r3, r4, r5, pc}
    b1ea:	46c0      	nop			; (mov r8, r8)
    b1ec:	200047c8 	.word	0x200047c8

0000b1f0 <_putc_r>:
    b1f0:	b570      	push	{r4, r5, r6, lr}
    b1f2:	1c05      	adds	r5, r0, #0
    b1f4:	1c0e      	adds	r6, r1, #0
    b1f6:	1c14      	adds	r4, r2, #0
    b1f8:	2800      	cmp	r0, #0
    b1fa:	d004      	beq.n	b206 <_putc_r+0x16>
    b1fc:	6983      	ldr	r3, [r0, #24]
    b1fe:	2b00      	cmp	r3, #0
    b200:	d101      	bne.n	b206 <_putc_r+0x16>
    b202:	f7fe fc07 	bl	9a14 <__sinit>
    b206:	4b15      	ldr	r3, [pc, #84]	; (b25c <_putc_r+0x6c>)
    b208:	429c      	cmp	r4, r3
    b20a:	d101      	bne.n	b210 <_putc_r+0x20>
    b20c:	686c      	ldr	r4, [r5, #4]
    b20e:	e008      	b.n	b222 <_putc_r+0x32>
    b210:	4b13      	ldr	r3, [pc, #76]	; (b260 <_putc_r+0x70>)
    b212:	429c      	cmp	r4, r3
    b214:	d101      	bne.n	b21a <_putc_r+0x2a>
    b216:	68ac      	ldr	r4, [r5, #8]
    b218:	e003      	b.n	b222 <_putc_r+0x32>
    b21a:	4b12      	ldr	r3, [pc, #72]	; (b264 <_putc_r+0x74>)
    b21c:	429c      	cmp	r4, r3
    b21e:	d100      	bne.n	b222 <_putc_r+0x32>
    b220:	68ec      	ldr	r4, [r5, #12]
    b222:	68a3      	ldr	r3, [r4, #8]
    b224:	3b01      	subs	r3, #1
    b226:	60a3      	str	r3, [r4, #8]
    b228:	2b00      	cmp	r3, #0
    b22a:	da10      	bge.n	b24e <_putc_r+0x5e>
    b22c:	69a2      	ldr	r2, [r4, #24]
    b22e:	4293      	cmp	r3, r2
    b230:	db07      	blt.n	b242 <_putc_r+0x52>
    b232:	6823      	ldr	r3, [r4, #0]
    b234:	701e      	strb	r6, [r3, #0]
    b236:	6823      	ldr	r3, [r4, #0]
    b238:	7819      	ldrb	r1, [r3, #0]
    b23a:	290a      	cmp	r1, #10
    b23c:	d10a      	bne.n	b254 <_putc_r+0x64>
    b23e:	1c28      	adds	r0, r5, #0
    b240:	e001      	b.n	b246 <_putc_r+0x56>
    b242:	1c28      	adds	r0, r5, #0
    b244:	1c31      	adds	r1, r6, #0
    b246:	1c22      	adds	r2, r4, #0
    b248:	f001 f974 	bl	c534 <__swbuf_r>
    b24c:	e005      	b.n	b25a <_putc_r+0x6a>
    b24e:	6823      	ldr	r3, [r4, #0]
    b250:	701e      	strb	r6, [r3, #0]
    b252:	6823      	ldr	r3, [r4, #0]
    b254:	1c5a      	adds	r2, r3, #1
    b256:	6022      	str	r2, [r4, #0]
    b258:	7818      	ldrb	r0, [r3, #0]
    b25a:	bd70      	pop	{r4, r5, r6, pc}
    b25c:	0000f9e8 	.word	0x0000f9e8
    b260:	0000fa08 	.word	0x0000fa08
    b264:	0000fa28 	.word	0x0000fa28

0000b268 <__fpclassifyd>:
    b268:	b530      	push	{r4, r5, lr}
    b26a:	1c0c      	adds	r4, r1, #0
    b26c:	2302      	movs	r3, #2
    b26e:	4304      	orrs	r4, r0
    b270:	d017      	beq.n	b2a2 <__fpclassifyd+0x3a>
    b272:	2480      	movs	r4, #128	; 0x80
    b274:	0624      	lsls	r4, r4, #24
    b276:	42a1      	cmp	r1, r4
    b278:	d101      	bne.n	b27e <__fpclassifyd+0x16>
    b27a:	2800      	cmp	r0, #0
    b27c:	d011      	beq.n	b2a2 <__fpclassifyd+0x3a>
    b27e:	4b0a      	ldr	r3, [pc, #40]	; (b2a8 <__fpclassifyd+0x40>)
    b280:	0049      	lsls	r1, r1, #1
    b282:	0849      	lsrs	r1, r1, #1
    b284:	4a09      	ldr	r2, [pc, #36]	; (b2ac <__fpclassifyd+0x44>)
    b286:	18cc      	adds	r4, r1, r3
    b288:	2304      	movs	r3, #4
    b28a:	4294      	cmp	r4, r2
    b28c:	d909      	bls.n	b2a2 <__fpclassifyd+0x3a>
    b28e:	4a08      	ldr	r2, [pc, #32]	; (b2b0 <__fpclassifyd+0x48>)
    b290:	3b01      	subs	r3, #1
    b292:	4291      	cmp	r1, r2
    b294:	d905      	bls.n	b2a2 <__fpclassifyd+0x3a>
    b296:	4a07      	ldr	r2, [pc, #28]	; (b2b4 <__fpclassifyd+0x4c>)
    b298:	2300      	movs	r3, #0
    b29a:	4291      	cmp	r1, r2
    b29c:	d101      	bne.n	b2a2 <__fpclassifyd+0x3a>
    b29e:	4243      	negs	r3, r0
    b2a0:	4143      	adcs	r3, r0
    b2a2:	1c18      	adds	r0, r3, #0
    b2a4:	bd30      	pop	{r4, r5, pc}
    b2a6:	46c0      	nop			; (mov r8, r8)
    b2a8:	fff00000 	.word	0xfff00000
    b2ac:	7fdfffff 	.word	0x7fdfffff
    b2b0:	000fffff 	.word	0x000fffff
    b2b4:	7ff00000 	.word	0x7ff00000

0000b2b8 <_sbrk_r>:
    b2b8:	b538      	push	{r3, r4, r5, lr}
    b2ba:	2300      	movs	r3, #0
    b2bc:	4c06      	ldr	r4, [pc, #24]	; (b2d8 <_sbrk_r+0x20>)
    b2be:	1c05      	adds	r5, r0, #0
    b2c0:	1c08      	adds	r0, r1, #0
    b2c2:	6023      	str	r3, [r4, #0]
    b2c4:	f7f8 fe6a 	bl	3f9c <_sbrk>
    b2c8:	1c43      	adds	r3, r0, #1
    b2ca:	d103      	bne.n	b2d4 <_sbrk_r+0x1c>
    b2cc:	6823      	ldr	r3, [r4, #0]
    b2ce:	2b00      	cmp	r3, #0
    b2d0:	d000      	beq.n	b2d4 <_sbrk_r+0x1c>
    b2d2:	602b      	str	r3, [r5, #0]
    b2d4:	bd38      	pop	{r3, r4, r5, pc}
    b2d6:	46c0      	nop			; (mov r8, r8)
    b2d8:	200047c8 	.word	0x200047c8

0000b2dc <__sccl>:
    b2dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    b2de:	780a      	ldrb	r2, [r1, #0]
    b2e0:	2a5e      	cmp	r2, #94	; 0x5e
    b2e2:	d002      	beq.n	b2ea <__sccl+0xe>
    b2e4:	1c4b      	adds	r3, r1, #1
    b2e6:	2400      	movs	r4, #0
    b2e8:	e002      	b.n	b2f0 <__sccl+0x14>
    b2ea:	2401      	movs	r4, #1
    b2ec:	784a      	ldrb	r2, [r1, #1]
    b2ee:	1c8b      	adds	r3, r1, #2
    b2f0:	1c01      	adds	r1, r0, #0
    b2f2:	1c45      	adds	r5, r0, #1
    b2f4:	35ff      	adds	r5, #255	; 0xff
    b2f6:	700c      	strb	r4, [r1, #0]
    b2f8:	3101      	adds	r1, #1
    b2fa:	42a9      	cmp	r1, r5
    b2fc:	d1fb      	bne.n	b2f6 <__sccl+0x1a>
    b2fe:	2a00      	cmp	r2, #0
    b300:	d101      	bne.n	b306 <__sccl+0x2a>
    b302:	1e58      	subs	r0, r3, #1
    b304:	e01c      	b.n	b340 <__sccl+0x64>
    b306:	2101      	movs	r1, #1
    b308:	1b0c      	subs	r4, r1, r4
    b30a:	b2e7      	uxtb	r7, r4
    b30c:	5487      	strb	r7, [r0, r2]
    b30e:	7819      	ldrb	r1, [r3, #0]
    b310:	1c5e      	adds	r6, r3, #1
    b312:	292d      	cmp	r1, #45	; 0x2d
    b314:	d006      	beq.n	b324 <__sccl+0x48>
    b316:	295d      	cmp	r1, #93	; 0x5d
    b318:	d00f      	beq.n	b33a <__sccl+0x5e>
    b31a:	2900      	cmp	r1, #0
    b31c:	d00f      	beq.n	b33e <__sccl+0x62>
    b31e:	1c0a      	adds	r2, r1, #0
    b320:	1c33      	adds	r3, r6, #0
    b322:	e7f2      	b.n	b30a <__sccl+0x2e>
    b324:	785d      	ldrb	r5, [r3, #1]
    b326:	2d5d      	cmp	r5, #93	; 0x5d
    b328:	d0f9      	beq.n	b31e <__sccl+0x42>
    b32a:	4295      	cmp	r5, r2
    b32c:	dbf7      	blt.n	b31e <__sccl+0x42>
    b32e:	3302      	adds	r3, #2
    b330:	3201      	adds	r2, #1
    b332:	5487      	strb	r7, [r0, r2]
    b334:	42aa      	cmp	r2, r5
    b336:	dbfb      	blt.n	b330 <__sccl+0x54>
    b338:	e7e9      	b.n	b30e <__sccl+0x32>
    b33a:	1c30      	adds	r0, r6, #0
    b33c:	e000      	b.n	b340 <__sccl+0x64>
    b33e:	1c18      	adds	r0, r3, #0
    b340:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000b342 <setbuf>:
    b342:	b508      	push	{r3, lr}
    b344:	424a      	negs	r2, r1
    b346:	414a      	adcs	r2, r1
    b348:	2380      	movs	r3, #128	; 0x80
    b34a:	0052      	lsls	r2, r2, #1
    b34c:	00db      	lsls	r3, r3, #3
    b34e:	f000 f801 	bl	b354 <setvbuf>
    b352:	bd08      	pop	{r3, pc}

0000b354 <setvbuf>:
    b354:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    b356:	1c1e      	adds	r6, r3, #0
    b358:	4b3c      	ldr	r3, [pc, #240]	; (b44c <setvbuf+0xf8>)
    b35a:	1c04      	adds	r4, r0, #0
    b35c:	681d      	ldr	r5, [r3, #0]
    b35e:	1c0f      	adds	r7, r1, #0
    b360:	9201      	str	r2, [sp, #4]
    b362:	2d00      	cmp	r5, #0
    b364:	d005      	beq.n	b372 <setvbuf+0x1e>
    b366:	69ab      	ldr	r3, [r5, #24]
    b368:	2b00      	cmp	r3, #0
    b36a:	d102      	bne.n	b372 <setvbuf+0x1e>
    b36c:	1c28      	adds	r0, r5, #0
    b36e:	f7fe fb51 	bl	9a14 <__sinit>
    b372:	4b37      	ldr	r3, [pc, #220]	; (b450 <setvbuf+0xfc>)
    b374:	429c      	cmp	r4, r3
    b376:	d101      	bne.n	b37c <setvbuf+0x28>
    b378:	686c      	ldr	r4, [r5, #4]
    b37a:	e008      	b.n	b38e <setvbuf+0x3a>
    b37c:	4b35      	ldr	r3, [pc, #212]	; (b454 <setvbuf+0x100>)
    b37e:	429c      	cmp	r4, r3
    b380:	d101      	bne.n	b386 <setvbuf+0x32>
    b382:	68ac      	ldr	r4, [r5, #8]
    b384:	e003      	b.n	b38e <setvbuf+0x3a>
    b386:	4b34      	ldr	r3, [pc, #208]	; (b458 <setvbuf+0x104>)
    b388:	429c      	cmp	r4, r3
    b38a:	d100      	bne.n	b38e <setvbuf+0x3a>
    b38c:	68ec      	ldr	r4, [r5, #12]
    b38e:	9b01      	ldr	r3, [sp, #4]
    b390:	2b02      	cmp	r3, #2
    b392:	d858      	bhi.n	b446 <setvbuf+0xf2>
    b394:	2e00      	cmp	r6, #0
    b396:	db56      	blt.n	b446 <setvbuf+0xf2>
    b398:	1c28      	adds	r0, r5, #0
    b39a:	1c21      	adds	r1, r4, #0
    b39c:	f7fe fab8 	bl	9910 <_fflush_r>
    b3a0:	2300      	movs	r3, #0
    b3a2:	6063      	str	r3, [r4, #4]
    b3a4:	61a3      	str	r3, [r4, #24]
    b3a6:	89a3      	ldrh	r3, [r4, #12]
    b3a8:	061b      	lsls	r3, r3, #24
    b3aa:	d503      	bpl.n	b3b4 <setvbuf+0x60>
    b3ac:	1c28      	adds	r0, r5, #0
    b3ae:	6921      	ldr	r1, [r4, #16]
    b3b0:	f7fe fd8a 	bl	9ec8 <_free_r>
    b3b4:	2283      	movs	r2, #131	; 0x83
    b3b6:	89a3      	ldrh	r3, [r4, #12]
    b3b8:	4393      	bics	r3, r2
    b3ba:	81a3      	strh	r3, [r4, #12]
    b3bc:	9b01      	ldr	r3, [sp, #4]
    b3be:	2b02      	cmp	r3, #2
    b3c0:	d013      	beq.n	b3ea <setvbuf+0x96>
    b3c2:	2f00      	cmp	r7, #0
    b3c4:	d125      	bne.n	b412 <setvbuf+0xbe>
    b3c6:	2e00      	cmp	r6, #0
    b3c8:	d101      	bne.n	b3ce <setvbuf+0x7a>
    b3ca:	2680      	movs	r6, #128	; 0x80
    b3cc:	00f6      	lsls	r6, r6, #3
    b3ce:	1c30      	adds	r0, r6, #0
    b3d0:	f7fe fd4a 	bl	9e68 <malloc>
    b3d4:	1e07      	subs	r7, r0, #0
    b3d6:	d118      	bne.n	b40a <setvbuf+0xb6>
    b3d8:	2080      	movs	r0, #128	; 0x80
    b3da:	00c0      	lsls	r0, r0, #3
    b3dc:	f7fe fd44 	bl	9e68 <malloc>
    b3e0:	1e07      	subs	r7, r0, #0
    b3e2:	d110      	bne.n	b406 <setvbuf+0xb2>
    b3e4:	2001      	movs	r0, #1
    b3e6:	4240      	negs	r0, r0
    b3e8:	e000      	b.n	b3ec <setvbuf+0x98>
    b3ea:	2000      	movs	r0, #0
    b3ec:	2202      	movs	r2, #2
    b3ee:	89a3      	ldrh	r3, [r4, #12]
    b3f0:	4313      	orrs	r3, r2
    b3f2:	81a3      	strh	r3, [r4, #12]
    b3f4:	2300      	movs	r3, #0
    b3f6:	60a3      	str	r3, [r4, #8]
    b3f8:	1c23      	adds	r3, r4, #0
    b3fa:	3347      	adds	r3, #71	; 0x47
    b3fc:	6023      	str	r3, [r4, #0]
    b3fe:	6123      	str	r3, [r4, #16]
    b400:	2301      	movs	r3, #1
    b402:	6163      	str	r3, [r4, #20]
    b404:	e021      	b.n	b44a <setvbuf+0xf6>
    b406:	2680      	movs	r6, #128	; 0x80
    b408:	00f6      	lsls	r6, r6, #3
    b40a:	2280      	movs	r2, #128	; 0x80
    b40c:	89a3      	ldrh	r3, [r4, #12]
    b40e:	4313      	orrs	r3, r2
    b410:	81a3      	strh	r3, [r4, #12]
    b412:	9b01      	ldr	r3, [sp, #4]
    b414:	2b01      	cmp	r3, #1
    b416:	d105      	bne.n	b424 <setvbuf+0xd0>
    b418:	89a3      	ldrh	r3, [r4, #12]
    b41a:	9a01      	ldr	r2, [sp, #4]
    b41c:	431a      	orrs	r2, r3
    b41e:	4273      	negs	r3, r6
    b420:	81a2      	strh	r2, [r4, #12]
    b422:	61a3      	str	r3, [r4, #24]
    b424:	4b0d      	ldr	r3, [pc, #52]	; (b45c <setvbuf+0x108>)
    b426:	2000      	movs	r0, #0
    b428:	62ab      	str	r3, [r5, #40]	; 0x28
    b42a:	89a2      	ldrh	r2, [r4, #12]
    b42c:	6027      	str	r7, [r4, #0]
    b42e:	6127      	str	r7, [r4, #16]
    b430:	6166      	str	r6, [r4, #20]
    b432:	0713      	lsls	r3, r2, #28
    b434:	d509      	bpl.n	b44a <setvbuf+0xf6>
    b436:	2303      	movs	r3, #3
    b438:	401a      	ands	r2, r3
    b43a:	4253      	negs	r3, r2
    b43c:	4153      	adcs	r3, r2
    b43e:	425b      	negs	r3, r3
    b440:	401e      	ands	r6, r3
    b442:	60a6      	str	r6, [r4, #8]
    b444:	e001      	b.n	b44a <setvbuf+0xf6>
    b446:	2001      	movs	r0, #1
    b448:	4240      	negs	r0, r0
    b44a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    b44c:	20000134 	.word	0x20000134
    b450:	0000f9e8 	.word	0x0000f9e8
    b454:	0000fa08 	.word	0x0000fa08
    b458:	0000fa28 	.word	0x0000fa28
    b45c:	00009991 	.word	0x00009991

0000b460 <nanf>:
    b460:	4800      	ldr	r0, [pc, #0]	; (b464 <nanf+0x4>)
    b462:	4770      	bx	lr
    b464:	7fc00000 	.word	0x7fc00000

0000b468 <siprintf>:
    b468:	b40e      	push	{r1, r2, r3}
    b46a:	b510      	push	{r4, lr}
    b46c:	b09d      	sub	sp, #116	; 0x74
    b46e:	a902      	add	r1, sp, #8
    b470:	9002      	str	r0, [sp, #8]
    b472:	6108      	str	r0, [r1, #16]
    b474:	480b      	ldr	r0, [pc, #44]	; (b4a4 <siprintf+0x3c>)
    b476:	2482      	movs	r4, #130	; 0x82
    b478:	6088      	str	r0, [r1, #8]
    b47a:	6148      	str	r0, [r1, #20]
    b47c:	2001      	movs	r0, #1
    b47e:	4240      	negs	r0, r0
    b480:	ab1f      	add	r3, sp, #124	; 0x7c
    b482:	81c8      	strh	r0, [r1, #14]
    b484:	4808      	ldr	r0, [pc, #32]	; (b4a8 <siprintf+0x40>)
    b486:	cb04      	ldmia	r3!, {r2}
    b488:	00a4      	lsls	r4, r4, #2
    b48a:	6800      	ldr	r0, [r0, #0]
    b48c:	9301      	str	r3, [sp, #4]
    b48e:	818c      	strh	r4, [r1, #12]
    b490:	f003 f802 	bl	e498 <_svfiprintf_r>
    b494:	2300      	movs	r3, #0
    b496:	9a02      	ldr	r2, [sp, #8]
    b498:	7013      	strb	r3, [r2, #0]
    b49a:	b01d      	add	sp, #116	; 0x74
    b49c:	bc10      	pop	{r4}
    b49e:	bc08      	pop	{r3}
    b4a0:	b003      	add	sp, #12
    b4a2:	4718      	bx	r3
    b4a4:	7fffffff 	.word	0x7fffffff
    b4a8:	20000134 	.word	0x20000134

0000b4ac <siscanf>:
    b4ac:	b40e      	push	{r1, r2, r3}
    b4ae:	2381      	movs	r3, #129	; 0x81
    b4b0:	b570      	push	{r4, r5, r6, lr}
    b4b2:	b09d      	sub	sp, #116	; 0x74
    b4b4:	ac02      	add	r4, sp, #8
    b4b6:	ad21      	add	r5, sp, #132	; 0x84
    b4b8:	009b      	lsls	r3, r3, #2
    b4ba:	cd40      	ldmia	r5!, {r6}
    b4bc:	81a3      	strh	r3, [r4, #12]
    b4be:	9002      	str	r0, [sp, #8]
    b4c0:	9006      	str	r0, [sp, #24]
    b4c2:	f000 f873 	bl	b5ac <strlen>
    b4c6:	4b0b      	ldr	r3, [pc, #44]	; (b4f4 <siscanf+0x48>)
    b4c8:	6060      	str	r0, [r4, #4]
    b4ca:	6263      	str	r3, [r4, #36]	; 0x24
    b4cc:	2300      	movs	r3, #0
    b4ce:	6363      	str	r3, [r4, #52]	; 0x34
    b4d0:	64a3      	str	r3, [r4, #72]	; 0x48
    b4d2:	3b01      	subs	r3, #1
    b4d4:	81e3      	strh	r3, [r4, #14]
    b4d6:	4b08      	ldr	r3, [pc, #32]	; (b4f8 <siscanf+0x4c>)
    b4d8:	6160      	str	r0, [r4, #20]
    b4da:	1c21      	adds	r1, r4, #0
    b4dc:	6818      	ldr	r0, [r3, #0]
    b4de:	1c32      	adds	r2, r6, #0
    b4e0:	1c2b      	adds	r3, r5, #0
    b4e2:	9501      	str	r5, [sp, #4]
    b4e4:	f003 f92a 	bl	e73c <__ssvfiscanf_r>
    b4e8:	b01d      	add	sp, #116	; 0x74
    b4ea:	bc70      	pop	{r4, r5, r6}
    b4ec:	bc08      	pop	{r3}
    b4ee:	b003      	add	sp, #12
    b4f0:	4718      	bx	r3
    b4f2:	46c0      	nop			; (mov r8, r8)
    b4f4:	0000b525 	.word	0x0000b525
    b4f8:	20000134 	.word	0x20000134

0000b4fc <__sread>:
    b4fc:	b538      	push	{r3, r4, r5, lr}
    b4fe:	1c0c      	adds	r4, r1, #0
    b500:	250e      	movs	r5, #14
    b502:	5f49      	ldrsh	r1, [r1, r5]
    b504:	f003 fa92 	bl	ea2c <_read_r>
    b508:	2800      	cmp	r0, #0
    b50a:	db03      	blt.n	b514 <__sread+0x18>
    b50c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    b50e:	181b      	adds	r3, r3, r0
    b510:	6563      	str	r3, [r4, #84]	; 0x54
    b512:	e003      	b.n	b51c <__sread+0x20>
    b514:	89a2      	ldrh	r2, [r4, #12]
    b516:	4b02      	ldr	r3, [pc, #8]	; (b520 <__sread+0x24>)
    b518:	4013      	ands	r3, r2
    b51a:	81a3      	strh	r3, [r4, #12]
    b51c:	bd38      	pop	{r3, r4, r5, pc}
    b51e:	46c0      	nop			; (mov r8, r8)
    b520:	ffffefff 	.word	0xffffefff

0000b524 <__seofread>:
    b524:	2000      	movs	r0, #0
    b526:	4770      	bx	lr

0000b528 <__swrite>:
    b528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b52a:	1c1e      	adds	r6, r3, #0
    b52c:	898b      	ldrh	r3, [r1, #12]
    b52e:	1c05      	adds	r5, r0, #0
    b530:	1c0c      	adds	r4, r1, #0
    b532:	1c17      	adds	r7, r2, #0
    b534:	05db      	lsls	r3, r3, #23
    b536:	d505      	bpl.n	b544 <__swrite+0x1c>
    b538:	230e      	movs	r3, #14
    b53a:	5ec9      	ldrsh	r1, [r1, r3]
    b53c:	2200      	movs	r2, #0
    b53e:	2302      	movs	r3, #2
    b540:	f002 faea 	bl	db18 <_lseek_r>
    b544:	89a2      	ldrh	r2, [r4, #12]
    b546:	4b05      	ldr	r3, [pc, #20]	; (b55c <__swrite+0x34>)
    b548:	1c28      	adds	r0, r5, #0
    b54a:	4013      	ands	r3, r2
    b54c:	81a3      	strh	r3, [r4, #12]
    b54e:	1c3a      	adds	r2, r7, #0
    b550:	230e      	movs	r3, #14
    b552:	5ee1      	ldrsh	r1, [r4, r3]
    b554:	1c33      	adds	r3, r6, #0
    b556:	f001 f845 	bl	c5e4 <_write_r>
    b55a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b55c:	ffffefff 	.word	0xffffefff

0000b560 <__sseek>:
    b560:	b538      	push	{r3, r4, r5, lr}
    b562:	1c0c      	adds	r4, r1, #0
    b564:	250e      	movs	r5, #14
    b566:	5f49      	ldrsh	r1, [r1, r5]
    b568:	f002 fad6 	bl	db18 <_lseek_r>
    b56c:	89a3      	ldrh	r3, [r4, #12]
    b56e:	1c42      	adds	r2, r0, #1
    b570:	d103      	bne.n	b57a <__sseek+0x1a>
    b572:	4a05      	ldr	r2, [pc, #20]	; (b588 <__sseek+0x28>)
    b574:	4013      	ands	r3, r2
    b576:	81a3      	strh	r3, [r4, #12]
    b578:	e004      	b.n	b584 <__sseek+0x24>
    b57a:	2280      	movs	r2, #128	; 0x80
    b57c:	0152      	lsls	r2, r2, #5
    b57e:	4313      	orrs	r3, r2
    b580:	81a3      	strh	r3, [r4, #12]
    b582:	6560      	str	r0, [r4, #84]	; 0x54
    b584:	bd38      	pop	{r3, r4, r5, pc}
    b586:	46c0      	nop			; (mov r8, r8)
    b588:	ffffefff 	.word	0xffffefff

0000b58c <__sclose>:
    b58c:	b508      	push	{r3, lr}
    b58e:	230e      	movs	r3, #14
    b590:	5ec9      	ldrsh	r1, [r1, r3]
    b592:	f001 f8af 	bl	c6f4 <_close_r>
    b596:	bd08      	pop	{r3, pc}

0000b598 <strcmp>:
    b598:	7802      	ldrb	r2, [r0, #0]
    b59a:	780b      	ldrb	r3, [r1, #0]
    b59c:	2a00      	cmp	r2, #0
    b59e:	d003      	beq.n	b5a8 <strcmp+0x10>
    b5a0:	3001      	adds	r0, #1
    b5a2:	3101      	adds	r1, #1
    b5a4:	429a      	cmp	r2, r3
    b5a6:	d0f7      	beq.n	b598 <strcmp>
    b5a8:	1ad0      	subs	r0, r2, r3
    b5aa:	4770      	bx	lr

0000b5ac <strlen>:
    b5ac:	2300      	movs	r3, #0
    b5ae:	5cc2      	ldrb	r2, [r0, r3]
    b5b0:	3301      	adds	r3, #1
    b5b2:	2a00      	cmp	r2, #0
    b5b4:	d1fb      	bne.n	b5ae <strlen+0x2>
    b5b6:	1e58      	subs	r0, r3, #1
    b5b8:	4770      	bx	lr

0000b5ba <strncmp>:
    b5ba:	2300      	movs	r3, #0
    b5bc:	b530      	push	{r4, r5, lr}
    b5be:	429a      	cmp	r2, r3
    b5c0:	d00d      	beq.n	b5de <strncmp+0x24>
    b5c2:	3a01      	subs	r2, #1
    b5c4:	5cc4      	ldrb	r4, [r0, r3]
    b5c6:	5ccd      	ldrb	r5, [r1, r3]
    b5c8:	42ac      	cmp	r4, r5
    b5ca:	d102      	bne.n	b5d2 <strncmp+0x18>
    b5cc:	4293      	cmp	r3, r2
    b5ce:	d102      	bne.n	b5d6 <strncmp+0x1c>
    b5d0:	1c25      	adds	r5, r4, #0
    b5d2:	1b63      	subs	r3, r4, r5
    b5d4:	e003      	b.n	b5de <strncmp+0x24>
    b5d6:	3301      	adds	r3, #1
    b5d8:	2c00      	cmp	r4, #0
    b5da:	d1f3      	bne.n	b5c4 <strncmp+0xa>
    b5dc:	e7f8      	b.n	b5d0 <strncmp+0x16>
    b5de:	1c18      	adds	r0, r3, #0
    b5e0:	bd30      	pop	{r4, r5, pc}

0000b5e2 <strncpy>:
    b5e2:	1c03      	adds	r3, r0, #0
    b5e4:	b530      	push	{r4, r5, lr}
    b5e6:	2a00      	cmp	r2, #0
    b5e8:	d007      	beq.n	b5fa <strncpy+0x18>
    b5ea:	780c      	ldrb	r4, [r1, #0]
    b5ec:	3301      	adds	r3, #1
    b5ee:	1e5d      	subs	r5, r3, #1
    b5f0:	3a01      	subs	r2, #1
    b5f2:	702c      	strb	r4, [r5, #0]
    b5f4:	3101      	adds	r1, #1
    b5f6:	2c00      	cmp	r4, #0
    b5f8:	d1f5      	bne.n	b5e6 <strncpy+0x4>
    b5fa:	189a      	adds	r2, r3, r2
    b5fc:	4293      	cmp	r3, r2
    b5fe:	d003      	beq.n	b608 <strncpy+0x26>
    b600:	2100      	movs	r1, #0
    b602:	7019      	strb	r1, [r3, #0]
    b604:	3301      	adds	r3, #1
    b606:	e7f9      	b.n	b5fc <strncpy+0x1a>
    b608:	bd30      	pop	{r4, r5, pc}

0000b60a <match>:
    b60a:	b530      	push	{r4, r5, lr}
    b60c:	6803      	ldr	r3, [r0, #0]
    b60e:	780c      	ldrb	r4, [r1, #0]
    b610:	3301      	adds	r3, #1
    b612:	2c00      	cmp	r4, #0
    b614:	d00a      	beq.n	b62c <match+0x22>
    b616:	781a      	ldrb	r2, [r3, #0]
    b618:	1c15      	adds	r5, r2, #0
    b61a:	3d41      	subs	r5, #65	; 0x41
    b61c:	2d19      	cmp	r5, #25
    b61e:	d800      	bhi.n	b622 <match+0x18>
    b620:	3220      	adds	r2, #32
    b622:	3101      	adds	r1, #1
    b624:	42a2      	cmp	r2, r4
    b626:	d0f2      	beq.n	b60e <match+0x4>
    b628:	2000      	movs	r0, #0
    b62a:	e001      	b.n	b630 <match+0x26>
    b62c:	6003      	str	r3, [r0, #0]
    b62e:	2001      	movs	r0, #1
    b630:	bd30      	pop	{r4, r5, pc}
	...

0000b634 <sulp>:
    b634:	b570      	push	{r4, r5, r6, lr}
    b636:	1c16      	adds	r6, r2, #0
    b638:	1c0d      	adds	r5, r1, #0
    b63a:	f002 fd6d 	bl	e118 <__ulp>
    b63e:	2e00      	cmp	r6, #0
    b640:	d00b      	beq.n	b65a <sulp+0x26>
    b642:	226b      	movs	r2, #107	; 0x6b
    b644:	006b      	lsls	r3, r5, #1
    b646:	0d5b      	lsrs	r3, r3, #21
    b648:	1ad3      	subs	r3, r2, r3
    b64a:	2b00      	cmp	r3, #0
    b64c:	dd05      	ble.n	b65a <sulp+0x26>
    b64e:	4d03      	ldr	r5, [pc, #12]	; (b65c <sulp+0x28>)
    b650:	051c      	lsls	r4, r3, #20
    b652:	2200      	movs	r2, #0
    b654:	1963      	adds	r3, r4, r5
    b656:	f7fd f88b 	bl	8770 <__aeabi_dmul>
    b65a:	bd70      	pop	{r4, r5, r6, pc}
    b65c:	3ff00000 	.word	0x3ff00000

0000b660 <_strtod_r>:
    b660:	2300      	movs	r3, #0
    b662:	b5f0      	push	{r4, r5, r6, r7, lr}
    b664:	b0a3      	sub	sp, #140	; 0x8c
    b666:	931e      	str	r3, [sp, #120]	; 0x78
    b668:	2600      	movs	r6, #0
    b66a:	2700      	movs	r7, #0
    b66c:	1c0b      	adds	r3, r1, #0
    b66e:	9003      	str	r0, [sp, #12]
    b670:	9106      	str	r1, [sp, #24]
    b672:	9219      	str	r2, [sp, #100]	; 0x64
    b674:	931d      	str	r3, [sp, #116]	; 0x74
    b676:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b678:	781a      	ldrb	r2, [r3, #0]
    b67a:	2a0d      	cmp	r2, #13
    b67c:	d805      	bhi.n	b68a <_strtod_r+0x2a>
    b67e:	2a09      	cmp	r2, #9
    b680:	d214      	bcs.n	b6ac <_strtod_r+0x4c>
    b682:	2a00      	cmp	r2, #0
    b684:	d100      	bne.n	b688 <_strtod_r+0x28>
    b686:	e1c3      	b.n	ba10 <_strtod_r+0x3b0>
    b688:	e012      	b.n	b6b0 <_strtod_r+0x50>
    b68a:	2a2b      	cmp	r2, #43	; 0x2b
    b68c:	d006      	beq.n	b69c <_strtod_r+0x3c>
    b68e:	2a2d      	cmp	r2, #45	; 0x2d
    b690:	d002      	beq.n	b698 <_strtod_r+0x38>
    b692:	2a20      	cmp	r2, #32
    b694:	d10c      	bne.n	b6b0 <_strtod_r+0x50>
    b696:	e009      	b.n	b6ac <_strtod_r+0x4c>
    b698:	2201      	movs	r2, #1
    b69a:	e000      	b.n	b69e <_strtod_r+0x3e>
    b69c:	2200      	movs	r2, #0
    b69e:	920d      	str	r2, [sp, #52]	; 0x34
    b6a0:	1c5a      	adds	r2, r3, #1
    b6a2:	921d      	str	r2, [sp, #116]	; 0x74
    b6a4:	785b      	ldrb	r3, [r3, #1]
    b6a6:	2b00      	cmp	r3, #0
    b6a8:	d104      	bne.n	b6b4 <_strtod_r+0x54>
    b6aa:	e1b1      	b.n	ba10 <_strtod_r+0x3b0>
    b6ac:	3301      	adds	r3, #1
    b6ae:	e7e1      	b.n	b674 <_strtod_r+0x14>
    b6b0:	2300      	movs	r3, #0
    b6b2:	930d      	str	r3, [sp, #52]	; 0x34
    b6b4:	2200      	movs	r2, #0
    b6b6:	9d1d      	ldr	r5, [sp, #116]	; 0x74
    b6b8:	920a      	str	r2, [sp, #40]	; 0x28
    b6ba:	782b      	ldrb	r3, [r5, #0]
    b6bc:	2b30      	cmp	r3, #48	; 0x30
    b6be:	d15d      	bne.n	b77c <_strtod_r+0x11c>
    b6c0:	786b      	ldrb	r3, [r5, #1]
    b6c2:	2b58      	cmp	r3, #88	; 0x58
    b6c4:	d001      	beq.n	b6ca <_strtod_r+0x6a>
    b6c6:	2b78      	cmp	r3, #120	; 0x78
    b6c8:	d14c      	bne.n	b764 <_strtod_r+0x104>
    b6ca:	ab1e      	add	r3, sp, #120	; 0x78
    b6cc:	9300      	str	r3, [sp, #0]
    b6ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b6d0:	9803      	ldr	r0, [sp, #12]
    b6d2:	9301      	str	r3, [sp, #4]
    b6d4:	a91d      	add	r1, sp, #116	; 0x74
    b6d6:	4ac2      	ldr	r2, [pc, #776]	; (b9e0 <_strtod_r+0x380>)
    b6d8:	ab1f      	add	r3, sp, #124	; 0x7c
    b6da:	f001 ff38 	bl	d54e <__gethex>
    b6de:	2407      	movs	r4, #7
    b6e0:	9004      	str	r0, [sp, #16]
    b6e2:	4004      	ands	r4, r0
    b6e4:	d101      	bne.n	b6ea <_strtod_r+0x8a>
    b6e6:	f000 fda7 	bl	c238 <_strtod_r+0xbd8>
    b6ea:	2c06      	cmp	r4, #6
    b6ec:	d105      	bne.n	b6fa <_strtod_r+0x9a>
    b6ee:	2300      	movs	r3, #0
    b6f0:	3501      	adds	r5, #1
    b6f2:	951d      	str	r5, [sp, #116]	; 0x74
    b6f4:	930d      	str	r3, [sp, #52]	; 0x34
    b6f6:	f000 fd9f 	bl	c238 <_strtod_r+0xbd8>
    b6fa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    b6fc:	2a00      	cmp	r2, #0
    b6fe:	d007      	beq.n	b710 <_strtod_r+0xb0>
    b700:	a820      	add	r0, sp, #128	; 0x80
    b702:	2135      	movs	r1, #53	; 0x35
    b704:	f002 fdfc 	bl	e300 <__copybits>
    b708:	9803      	ldr	r0, [sp, #12]
    b70a:	991e      	ldr	r1, [sp, #120]	; 0x78
    b70c:	f002 fa64 	bl	dbd8 <_Bfree>
    b710:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    b712:	2c06      	cmp	r4, #6
    b714:	d81c      	bhi.n	b750 <_strtod_r+0xf0>
    b716:	1c20      	adds	r0, r4, #0
    b718:	f003 f9a8 	bl	ea6c <__gnu_thumb1_case_uqi>
    b71c:	14070a04 	.word	0x14070a04
    b720:	0a17      	.short	0x0a17
    b722:	04          	.byte	0x04
    b723:	00          	.byte	0x00
    b724:	2700      	movs	r7, #0
    b726:	1c3e      	adds	r6, r7, #0
    b728:	e012      	b.n	b750 <_strtod_r+0xf0>
    b72a:	9e20      	ldr	r6, [sp, #128]	; 0x80
    b72c:	9f21      	ldr	r7, [sp, #132]	; 0x84
    b72e:	e00f      	b.n	b750 <_strtod_r+0xf0>
    b730:	4aac      	ldr	r2, [pc, #688]	; (b9e4 <_strtod_r+0x384>)
    b732:	9921      	ldr	r1, [sp, #132]	; 0x84
    b734:	189b      	adds	r3, r3, r2
    b736:	4aac      	ldr	r2, [pc, #688]	; (b9e8 <_strtod_r+0x388>)
    b738:	051b      	lsls	r3, r3, #20
    b73a:	400a      	ands	r2, r1
    b73c:	4313      	orrs	r3, r2
    b73e:	9e20      	ldr	r6, [sp, #128]	; 0x80
    b740:	1c1f      	adds	r7, r3, #0
    b742:	e005      	b.n	b750 <_strtod_r+0xf0>
    b744:	4fa9      	ldr	r7, [pc, #676]	; (b9ec <_strtod_r+0x38c>)
    b746:	2600      	movs	r6, #0
    b748:	e002      	b.n	b750 <_strtod_r+0xf0>
    b74a:	2601      	movs	r6, #1
    b74c:	4fa8      	ldr	r7, [pc, #672]	; (b9f0 <_strtod_r+0x390>)
    b74e:	4276      	negs	r6, r6
    b750:	9b04      	ldr	r3, [sp, #16]
    b752:	071b      	lsls	r3, r3, #28
    b754:	d401      	bmi.n	b75a <_strtod_r+0xfa>
    b756:	f000 fd6f 	bl	c238 <_strtod_r+0xbd8>
    b75a:	2380      	movs	r3, #128	; 0x80
    b75c:	061b      	lsls	r3, r3, #24
    b75e:	431f      	orrs	r7, r3
    b760:	f000 fd6a 	bl	c238 <_strtod_r+0xbd8>
    b764:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b766:	1c5a      	adds	r2, r3, #1
    b768:	921d      	str	r2, [sp, #116]	; 0x74
    b76a:	785b      	ldrb	r3, [r3, #1]
    b76c:	2b30      	cmp	r3, #48	; 0x30
    b76e:	d0f9      	beq.n	b764 <_strtod_r+0x104>
    b770:	2b00      	cmp	r3, #0
    b772:	d101      	bne.n	b778 <_strtod_r+0x118>
    b774:	f000 fd60 	bl	c238 <_strtod_r+0xbd8>
    b778:	2301      	movs	r3, #1
    b77a:	930a      	str	r3, [sp, #40]	; 0x28
    b77c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b77e:	930c      	str	r3, [sp, #48]	; 0x30
    b780:	2300      	movs	r3, #0
    b782:	9305      	str	r3, [sp, #20]
    b784:	9307      	str	r3, [sp, #28]
    b786:	9304      	str	r3, [sp, #16]
    b788:	9c1d      	ldr	r4, [sp, #116]	; 0x74
    b78a:	7823      	ldrb	r3, [r4, #0]
    b78c:	1c1a      	adds	r2, r3, #0
    b78e:	3a30      	subs	r2, #48	; 0x30
    b790:	9308      	str	r3, [sp, #32]
    b792:	b2d3      	uxtb	r3, r2
    b794:	2b09      	cmp	r3, #9
    b796:	d812      	bhi.n	b7be <_strtod_r+0x15e>
    b798:	9904      	ldr	r1, [sp, #16]
    b79a:	230a      	movs	r3, #10
    b79c:	2908      	cmp	r1, #8
    b79e:	dc04      	bgt.n	b7aa <_strtod_r+0x14a>
    b7a0:	9907      	ldr	r1, [sp, #28]
    b7a2:	434b      	muls	r3, r1
    b7a4:	18d3      	adds	r3, r2, r3
    b7a6:	9307      	str	r3, [sp, #28]
    b7a8:	e003      	b.n	b7b2 <_strtod_r+0x152>
    b7aa:	9905      	ldr	r1, [sp, #20]
    b7ac:	434b      	muls	r3, r1
    b7ae:	18d3      	adds	r3, r2, r3
    b7b0:	9305      	str	r3, [sp, #20]
    b7b2:	9b04      	ldr	r3, [sp, #16]
    b7b4:	3401      	adds	r4, #1
    b7b6:	3301      	adds	r3, #1
    b7b8:	9304      	str	r3, [sp, #16]
    b7ba:	941d      	str	r4, [sp, #116]	; 0x74
    b7bc:	e7e4      	b.n	b788 <_strtod_r+0x128>
    b7be:	9803      	ldr	r0, [sp, #12]
    b7c0:	f002 f9a6 	bl	db10 <_localeconv_r>
    b7c4:	6805      	ldr	r5, [r0, #0]
    b7c6:	9803      	ldr	r0, [sp, #12]
    b7c8:	f002 f9a2 	bl	db10 <_localeconv_r>
    b7cc:	6800      	ldr	r0, [r0, #0]
    b7ce:	f7ff feed 	bl	b5ac <strlen>
    b7d2:	1c29      	adds	r1, r5, #0
    b7d4:	1c02      	adds	r2, r0, #0
    b7d6:	1c20      	adds	r0, r4, #0
    b7d8:	f7ff feef 	bl	b5ba <strncmp>
    b7dc:	1e05      	subs	r5, r0, #0
    b7de:	d005      	beq.n	b7ec <_strtod_r+0x18c>
    b7e0:	2000      	movs	r0, #0
    b7e2:	9b08      	ldr	r3, [sp, #32]
    b7e4:	9c04      	ldr	r4, [sp, #16]
    b7e6:	1c01      	adds	r1, r0, #0
    b7e8:	9008      	str	r0, [sp, #32]
    b7ea:	e05a      	b.n	b8a2 <_strtod_r+0x242>
    b7ec:	9803      	ldr	r0, [sp, #12]
    b7ee:	f002 f98f 	bl	db10 <_localeconv_r>
    b7f2:	6800      	ldr	r0, [r0, #0]
    b7f4:	f7ff feda 	bl	b5ac <strlen>
    b7f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b7fa:	9a04      	ldr	r2, [sp, #16]
    b7fc:	1818      	adds	r0, r3, r0
    b7fe:	901d      	str	r0, [sp, #116]	; 0x74
    b800:	7803      	ldrb	r3, [r0, #0]
    b802:	1e10      	subs	r0, r2, #0
    b804:	d141      	bne.n	b88a <_strtod_r+0x22a>
    b806:	2b30      	cmp	r3, #48	; 0x30
    b808:	d105      	bne.n	b816 <_strtod_r+0x1b6>
    b80a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b80c:	3001      	adds	r0, #1
    b80e:	1c5a      	adds	r2, r3, #1
    b810:	921d      	str	r2, [sp, #116]	; 0x74
    b812:	785b      	ldrb	r3, [r3, #1]
    b814:	e7f7      	b.n	b806 <_strtod_r+0x1a6>
    b816:	1c1a      	adds	r2, r3, #0
    b818:	3a31      	subs	r2, #49	; 0x31
    b81a:	2a08      	cmp	r2, #8
    b81c:	d83d      	bhi.n	b89a <_strtod_r+0x23a>
    b81e:	1c01      	adds	r1, r0, #0
    b820:	2000      	movs	r0, #0
    b822:	1c04      	adds	r4, r0, #0
    b824:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    b826:	920c      	str	r2, [sp, #48]	; 0x30
    b828:	3b30      	subs	r3, #48	; 0x30
    b82a:	1c42      	adds	r2, r0, #1
    b82c:	2b00      	cmp	r3, #0
    b82e:	d026      	beq.n	b87e <_strtod_r+0x21e>
    b830:	1889      	adds	r1, r1, r2
    b832:	1c22      	adds	r2, r4, #0
    b834:	1900      	adds	r0, r0, r4
    b836:	4282      	cmp	r2, r0
    b838:	d00f      	beq.n	b85a <_strtod_r+0x1fa>
    b83a:	3201      	adds	r2, #1
    b83c:	1e54      	subs	r4, r2, #1
    b83e:	2c08      	cmp	r4, #8
    b840:	dc04      	bgt.n	b84c <_strtod_r+0x1ec>
    b842:	240a      	movs	r4, #10
    b844:	9d07      	ldr	r5, [sp, #28]
    b846:	4365      	muls	r5, r4
    b848:	9507      	str	r5, [sp, #28]
    b84a:	e7f4      	b.n	b836 <_strtod_r+0x1d6>
    b84c:	2a10      	cmp	r2, #16
    b84e:	dcf2      	bgt.n	b836 <_strtod_r+0x1d6>
    b850:	240a      	movs	r4, #10
    b852:	9d05      	ldr	r5, [sp, #20]
    b854:	4365      	muls	r5, r4
    b856:	9505      	str	r5, [sp, #20]
    b858:	e7ed      	b.n	b836 <_strtod_r+0x1d6>
    b85a:	1c54      	adds	r4, r2, #1
    b85c:	2a08      	cmp	r2, #8
    b85e:	dc06      	bgt.n	b86e <_strtod_r+0x20e>
    b860:	220a      	movs	r2, #10
    b862:	9807      	ldr	r0, [sp, #28]
    b864:	4342      	muls	r2, r0
    b866:	18d3      	adds	r3, r2, r3
    b868:	9307      	str	r3, [sp, #28]
    b86a:	2200      	movs	r2, #0
    b86c:	e007      	b.n	b87e <_strtod_r+0x21e>
    b86e:	2200      	movs	r2, #0
    b870:	2c10      	cmp	r4, #16
    b872:	dc04      	bgt.n	b87e <_strtod_r+0x21e>
    b874:	200a      	movs	r0, #10
    b876:	9d05      	ldr	r5, [sp, #20]
    b878:	4368      	muls	r0, r5
    b87a:	18c3      	adds	r3, r0, r3
    b87c:	9305      	str	r3, [sp, #20]
    b87e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b880:	1c58      	adds	r0, r3, #1
    b882:	901d      	str	r0, [sp, #116]	; 0x74
    b884:	785b      	ldrb	r3, [r3, #1]
    b886:	1c10      	adds	r0, r2, #0
    b888:	e002      	b.n	b890 <_strtod_r+0x230>
    b88a:	1c28      	adds	r0, r5, #0
    b88c:	1c29      	adds	r1, r5, #0
    b88e:	9c04      	ldr	r4, [sp, #16]
    b890:	1c1a      	adds	r2, r3, #0
    b892:	3a30      	subs	r2, #48	; 0x30
    b894:	2a09      	cmp	r2, #9
    b896:	d9c7      	bls.n	b828 <_strtod_r+0x1c8>
    b898:	e001      	b.n	b89e <_strtod_r+0x23e>
    b89a:	2400      	movs	r4, #0
    b89c:	1c21      	adds	r1, r4, #0
    b89e:	2201      	movs	r2, #1
    b8a0:	9208      	str	r2, [sp, #32]
    b8a2:	2220      	movs	r2, #32
    b8a4:	1c1d      	adds	r5, r3, #0
    b8a6:	4395      	bics	r5, r2
    b8a8:	2200      	movs	r2, #0
    b8aa:	2d45      	cmp	r5, #69	; 0x45
    b8ac:	d157      	bne.n	b95e <_strtod_r+0x2fe>
    b8ae:	1c23      	adds	r3, r4, #0
    b8b0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    b8b2:	4303      	orrs	r3, r0
    b8b4:	432b      	orrs	r3, r5
    b8b6:	4293      	cmp	r3, r2
    b8b8:	d100      	bne.n	b8bc <_strtod_r+0x25c>
    b8ba:	e0a9      	b.n	ba10 <_strtod_r+0x3b0>
    b8bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b8be:	9306      	str	r3, [sp, #24]
    b8c0:	3301      	adds	r3, #1
    b8c2:	931d      	str	r3, [sp, #116]	; 0x74
    b8c4:	9b06      	ldr	r3, [sp, #24]
    b8c6:	785b      	ldrb	r3, [r3, #1]
    b8c8:	2b2b      	cmp	r3, #43	; 0x2b
    b8ca:	d006      	beq.n	b8da <_strtod_r+0x27a>
    b8cc:	2b2d      	cmp	r3, #45	; 0x2d
    b8ce:	d001      	beq.n	b8d4 <_strtod_r+0x274>
    b8d0:	9209      	str	r2, [sp, #36]	; 0x24
    b8d2:	e008      	b.n	b8e6 <_strtod_r+0x286>
    b8d4:	2301      	movs	r3, #1
    b8d6:	9309      	str	r3, [sp, #36]	; 0x24
    b8d8:	e000      	b.n	b8dc <_strtod_r+0x27c>
    b8da:	9209      	str	r2, [sp, #36]	; 0x24
    b8dc:	9b06      	ldr	r3, [sp, #24]
    b8de:	3302      	adds	r3, #2
    b8e0:	931d      	str	r3, [sp, #116]	; 0x74
    b8e2:	9b06      	ldr	r3, [sp, #24]
    b8e4:	789b      	ldrb	r3, [r3, #2]
    b8e6:	1c1a      	adds	r2, r3, #0
    b8e8:	3a30      	subs	r2, #48	; 0x30
    b8ea:	2a09      	cmp	r2, #9
    b8ec:	d834      	bhi.n	b958 <_strtod_r+0x2f8>
    b8ee:	2b30      	cmp	r3, #48	; 0x30
    b8f0:	d104      	bne.n	b8fc <_strtod_r+0x29c>
    b8f2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b8f4:	1c5a      	adds	r2, r3, #1
    b8f6:	921d      	str	r2, [sp, #116]	; 0x74
    b8f8:	785b      	ldrb	r3, [r3, #1]
    b8fa:	e7f8      	b.n	b8ee <_strtod_r+0x28e>
    b8fc:	2531      	movs	r5, #49	; 0x31
    b8fe:	426d      	negs	r5, r5
    b900:	46ac      	mov	ip, r5
    b902:	449c      	add	ip, r3
    b904:	4665      	mov	r5, ip
    b906:	2200      	movs	r2, #0
    b908:	2d08      	cmp	r5, #8
    b90a:	d828      	bhi.n	b95e <_strtod_r+0x2fe>
    b90c:	3b30      	subs	r3, #48	; 0x30
    b90e:	930b      	str	r3, [sp, #44]	; 0x2c
    b910:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b912:	930e      	str	r3, [sp, #56]	; 0x38
    b914:	2530      	movs	r5, #48	; 0x30
    b916:	426d      	negs	r5, r5
    b918:	46ac      	mov	ip, r5
    b91a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b91c:	1c5a      	adds	r2, r3, #1
    b91e:	921d      	str	r2, [sp, #116]	; 0x74
    b920:	785b      	ldrb	r3, [r3, #1]
    b922:	449c      	add	ip, r3
    b924:	4665      	mov	r5, ip
    b926:	2d09      	cmp	r5, #9
    b928:	d806      	bhi.n	b938 <_strtod_r+0x2d8>
    b92a:	220a      	movs	r2, #10
    b92c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    b92e:	436a      	muls	r2, r5
    b930:	18d3      	adds	r3, r2, r3
    b932:	3b30      	subs	r3, #48	; 0x30
    b934:	930b      	str	r3, [sp, #44]	; 0x2c
    b936:	e7ed      	b.n	b914 <_strtod_r+0x2b4>
    b938:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    b93a:	1b52      	subs	r2, r2, r5
    b93c:	1e15      	subs	r5, r2, #0
    b93e:	4a2d      	ldr	r2, [pc, #180]	; (b9f4 <_strtod_r+0x394>)
    b940:	4694      	mov	ip, r2
    b942:	2d08      	cmp	r5, #8
    b944:	dc03      	bgt.n	b94e <_strtod_r+0x2ee>
    b946:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b948:	4562      	cmp	r2, ip
    b94a:	dd00      	ble.n	b94e <_strtod_r+0x2ee>
    b94c:	4662      	mov	r2, ip
    b94e:	9d09      	ldr	r5, [sp, #36]	; 0x24
    b950:	2d00      	cmp	r5, #0
    b952:	d004      	beq.n	b95e <_strtod_r+0x2fe>
    b954:	4252      	negs	r2, r2
    b956:	e002      	b.n	b95e <_strtod_r+0x2fe>
    b958:	9a06      	ldr	r2, [sp, #24]
    b95a:	921d      	str	r2, [sp, #116]	; 0x74
    b95c:	2200      	movs	r2, #0
    b95e:	2c00      	cmp	r4, #0
    b960:	d161      	bne.n	ba26 <_strtod_r+0x3c6>
    b962:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b964:	4310      	orrs	r0, r2
    b966:	d001      	beq.n	b96c <_strtod_r+0x30c>
    b968:	f000 fc66 	bl	c238 <_strtod_r+0xbd8>
    b96c:	9a08      	ldr	r2, [sp, #32]
    b96e:	2a00      	cmp	r2, #0
    b970:	d14e      	bne.n	ba10 <_strtod_r+0x3b0>
    b972:	2b4e      	cmp	r3, #78	; 0x4e
    b974:	d01c      	beq.n	b9b0 <_strtod_r+0x350>
    b976:	dc02      	bgt.n	b97e <_strtod_r+0x31e>
    b978:	2b49      	cmp	r3, #73	; 0x49
    b97a:	d005      	beq.n	b988 <_strtod_r+0x328>
    b97c:	e048      	b.n	ba10 <_strtod_r+0x3b0>
    b97e:	2b69      	cmp	r3, #105	; 0x69
    b980:	d002      	beq.n	b988 <_strtod_r+0x328>
    b982:	2b6e      	cmp	r3, #110	; 0x6e
    b984:	d014      	beq.n	b9b0 <_strtod_r+0x350>
    b986:	e043      	b.n	ba10 <_strtod_r+0x3b0>
    b988:	a81d      	add	r0, sp, #116	; 0x74
    b98a:	491b      	ldr	r1, [pc, #108]	; (b9f8 <_strtod_r+0x398>)
    b98c:	f7ff fe3d 	bl	b60a <match>
    b990:	2800      	cmp	r0, #0
    b992:	d03d      	beq.n	ba10 <_strtod_r+0x3b0>
    b994:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b996:	a81d      	add	r0, sp, #116	; 0x74
    b998:	3b01      	subs	r3, #1
    b99a:	4918      	ldr	r1, [pc, #96]	; (b9fc <_strtod_r+0x39c>)
    b99c:	931d      	str	r3, [sp, #116]	; 0x74
    b99e:	f7ff fe34 	bl	b60a <match>
    b9a2:	2800      	cmp	r0, #0
    b9a4:	d102      	bne.n	b9ac <_strtod_r+0x34c>
    b9a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b9a8:	3301      	adds	r3, #1
    b9aa:	931d      	str	r3, [sp, #116]	; 0x74
    b9ac:	4f0f      	ldr	r7, [pc, #60]	; (b9ec <_strtod_r+0x38c>)
    b9ae:	e02c      	b.n	ba0a <_strtod_r+0x3aa>
    b9b0:	a81d      	add	r0, sp, #116	; 0x74
    b9b2:	4913      	ldr	r1, [pc, #76]	; (ba00 <_strtod_r+0x3a0>)
    b9b4:	f7ff fe29 	bl	b60a <match>
    b9b8:	2800      	cmp	r0, #0
    b9ba:	d029      	beq.n	ba10 <_strtod_r+0x3b0>
    b9bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b9be:	781b      	ldrb	r3, [r3, #0]
    b9c0:	2b28      	cmp	r3, #40	; 0x28
    b9c2:	d121      	bne.n	ba08 <_strtod_r+0x3a8>
    b9c4:	a81d      	add	r0, sp, #116	; 0x74
    b9c6:	490f      	ldr	r1, [pc, #60]	; (ba04 <_strtod_r+0x3a4>)
    b9c8:	aa20      	add	r2, sp, #128	; 0x80
    b9ca:	f001 fff6 	bl	d9ba <__hexnan>
    b9ce:	2805      	cmp	r0, #5
    b9d0:	d11a      	bne.n	ba08 <_strtod_r+0x3a8>
    b9d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
    b9d4:	4a05      	ldr	r2, [pc, #20]	; (b9ec <_strtod_r+0x38c>)
    b9d6:	9e20      	ldr	r6, [sp, #128]	; 0x80
    b9d8:	431a      	orrs	r2, r3
    b9da:	1c17      	adds	r7, r2, #0
    b9dc:	f000 fc2c 	bl	c238 <_strtod_r+0xbd8>
    b9e0:	0000fb00 	.word	0x0000fb00
    b9e4:	00000433 	.word	0x00000433
    b9e8:	ffefffff 	.word	0xffefffff
    b9ec:	7ff00000 	.word	0x7ff00000
    b9f0:	7fffffff 	.word	0x7fffffff
    b9f4:	00004e1f 	.word	0x00004e1f
    b9f8:	0000fa66 	.word	0x0000fa66
    b9fc:	0000fc18 	.word	0x0000fc18
    ba00:	0000fa6e 	.word	0x0000fa6e
    ba04:	0000fac0 	.word	0x0000fac0
    ba08:	4f92      	ldr	r7, [pc, #584]	; (bc54 <_strtod_r+0x5f4>)
    ba0a:	2600      	movs	r6, #0
    ba0c:	f000 fc14 	bl	c238 <_strtod_r+0xbd8>
    ba10:	9b06      	ldr	r3, [sp, #24]
    ba12:	931d      	str	r3, [sp, #116]	; 0x74
    ba14:	2300      	movs	r3, #0
    ba16:	930d      	str	r3, [sp, #52]	; 0x34
    ba18:	9b19      	ldr	r3, [sp, #100]	; 0x64
    ba1a:	2b00      	cmp	r3, #0
    ba1c:	d001      	beq.n	ba22 <_strtod_r+0x3c2>
    ba1e:	f000 fc0e 	bl	c23e <_strtod_r+0xbde>
    ba22:	f000 fc17 	bl	c254 <_strtod_r+0xbf4>
    ba26:	1a53      	subs	r3, r2, r1
    ba28:	9309      	str	r3, [sp, #36]	; 0x24
    ba2a:	9b04      	ldr	r3, [sp, #16]
    ba2c:	2b00      	cmp	r3, #0
    ba2e:	d100      	bne.n	ba32 <_strtod_r+0x3d2>
    ba30:	9404      	str	r4, [sp, #16]
    ba32:	1e25      	subs	r5, r4, #0
    ba34:	2d10      	cmp	r5, #16
    ba36:	dd00      	ble.n	ba3a <_strtod_r+0x3da>
    ba38:	2510      	movs	r5, #16
    ba3a:	9807      	ldr	r0, [sp, #28]
    ba3c:	f7fd fd1e 	bl	947c <__aeabi_ui2d>
    ba40:	1c06      	adds	r6, r0, #0
    ba42:	1c0f      	adds	r7, r1, #0
    ba44:	2d09      	cmp	r5, #9
    ba46:	dd15      	ble.n	ba74 <_strtod_r+0x414>
    ba48:	1c2b      	adds	r3, r5, #0
    ba4a:	4a83      	ldr	r2, [pc, #524]	; (bc58 <_strtod_r+0x5f8>)
    ba4c:	3b09      	subs	r3, #9
    ba4e:	00db      	lsls	r3, r3, #3
    ba50:	18d3      	adds	r3, r2, r3
    ba52:	681a      	ldr	r2, [r3, #0]
    ba54:	685b      	ldr	r3, [r3, #4]
    ba56:	f7fc fe8b 	bl	8770 <__aeabi_dmul>
    ba5a:	1c06      	adds	r6, r0, #0
    ba5c:	9805      	ldr	r0, [sp, #20]
    ba5e:	1c0f      	adds	r7, r1, #0
    ba60:	f7fd fd0c 	bl	947c <__aeabi_ui2d>
    ba64:	1c02      	adds	r2, r0, #0
    ba66:	1c0b      	adds	r3, r1, #0
    ba68:	1c30      	adds	r0, r6, #0
    ba6a:	1c39      	adds	r1, r7, #0
    ba6c:	f7fb ff1a 	bl	78a4 <__aeabi_dadd>
    ba70:	1c06      	adds	r6, r0, #0
    ba72:	1c0f      	adds	r7, r1, #0
    ba74:	2c0f      	cmp	r4, #15
    ba76:	dc37      	bgt.n	bae8 <_strtod_r+0x488>
    ba78:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ba7a:	2b00      	cmp	r3, #0
    ba7c:	d100      	bne.n	ba80 <_strtod_r+0x420>
    ba7e:	e3db      	b.n	c238 <_strtod_r+0xbd8>
    ba80:	dd24      	ble.n	bacc <_strtod_r+0x46c>
    ba82:	2b16      	cmp	r3, #22
    ba84:	dc07      	bgt.n	ba96 <_strtod_r+0x436>
    ba86:	4974      	ldr	r1, [pc, #464]	; (bc58 <_strtod_r+0x5f8>)
    ba88:	00da      	lsls	r2, r3, #3
    ba8a:	188a      	adds	r2, r1, r2
    ba8c:	6810      	ldr	r0, [r2, #0]
    ba8e:	6851      	ldr	r1, [r2, #4]
    ba90:	1c3b      	adds	r3, r7, #0
    ba92:	1c32      	adds	r2, r6, #0
    ba94:	e015      	b.n	bac2 <_strtod_r+0x462>
    ba96:	2325      	movs	r3, #37	; 0x25
    ba98:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ba9a:	1b1b      	subs	r3, r3, r4
    ba9c:	429a      	cmp	r2, r3
    ba9e:	dc23      	bgt.n	bae8 <_strtod_r+0x488>
    baa0:	220f      	movs	r2, #15
    baa2:	4d6d      	ldr	r5, [pc, #436]	; (bc58 <_strtod_r+0x5f8>)
    baa4:	1b14      	subs	r4, r2, r4
    baa6:	00e3      	lsls	r3, r4, #3
    baa8:	18eb      	adds	r3, r5, r3
    baaa:	6818      	ldr	r0, [r3, #0]
    baac:	6859      	ldr	r1, [r3, #4]
    baae:	1c32      	adds	r2, r6, #0
    bab0:	1c3b      	adds	r3, r7, #0
    bab2:	f7fc fe5d 	bl	8770 <__aeabi_dmul>
    bab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bab8:	1b1c      	subs	r4, r3, r4
    baba:	00e4      	lsls	r4, r4, #3
    babc:	192d      	adds	r5, r5, r4
    babe:	682a      	ldr	r2, [r5, #0]
    bac0:	686b      	ldr	r3, [r5, #4]
    bac2:	f7fc fe55 	bl	8770 <__aeabi_dmul>
    bac6:	1c06      	adds	r6, r0, #0
    bac8:	1c0f      	adds	r7, r1, #0
    baca:	e3b5      	b.n	c238 <_strtod_r+0xbd8>
    bacc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bace:	3316      	adds	r3, #22
    bad0:	db0a      	blt.n	bae8 <_strtod_r+0x488>
    bad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bad4:	1c30      	adds	r0, r6, #0
    bad6:	00da      	lsls	r2, r3, #3
    bad8:	4b5f      	ldr	r3, [pc, #380]	; (bc58 <_strtod_r+0x5f8>)
    bada:	1c39      	adds	r1, r7, #0
    badc:	1a9a      	subs	r2, r3, r2
    bade:	6853      	ldr	r3, [r2, #4]
    bae0:	6812      	ldr	r2, [r2, #0]
    bae2:	f7fc fa07 	bl	7ef4 <__aeabi_ddiv>
    bae6:	e7ee      	b.n	bac6 <_strtod_r+0x466>
    bae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    baea:	1b65      	subs	r5, r4, r5
    baec:	195d      	adds	r5, r3, r5
    baee:	2d00      	cmp	r5, #0
    baf0:	dd59      	ble.n	bba6 <_strtod_r+0x546>
    baf2:	230f      	movs	r3, #15
    baf4:	402b      	ands	r3, r5
    baf6:	d00a      	beq.n	bb0e <_strtod_r+0x4ae>
    baf8:	4a57      	ldr	r2, [pc, #348]	; (bc58 <_strtod_r+0x5f8>)
    bafa:	00db      	lsls	r3, r3, #3
    bafc:	18d3      	adds	r3, r2, r3
    bafe:	6818      	ldr	r0, [r3, #0]
    bb00:	6859      	ldr	r1, [r3, #4]
    bb02:	1c32      	adds	r2, r6, #0
    bb04:	1c3b      	adds	r3, r7, #0
    bb06:	f7fc fe33 	bl	8770 <__aeabi_dmul>
    bb0a:	1c06      	adds	r6, r0, #0
    bb0c:	1c0f      	adds	r7, r1, #0
    bb0e:	230f      	movs	r3, #15
    bb10:	439d      	bics	r5, r3
    bb12:	d100      	bne.n	bb16 <_strtod_r+0x4b6>
    bb14:	e0b0      	b.n	bc78 <_strtod_r+0x618>
    bb16:	3326      	adds	r3, #38	; 0x26
    bb18:	33ff      	adds	r3, #255	; 0xff
    bb1a:	429d      	cmp	r5, r3
    bb1c:	dd0e      	ble.n	bb3c <_strtod_r+0x4dc>
    bb1e:	2300      	movs	r3, #0
    bb20:	9304      	str	r3, [sp, #16]
    bb22:	9305      	str	r3, [sp, #20]
    bb24:	930b      	str	r3, [sp, #44]	; 0x2c
    bb26:	9308      	str	r3, [sp, #32]
    bb28:	2322      	movs	r3, #34	; 0x22
    bb2a:	2600      	movs	r6, #0
    bb2c:	9a03      	ldr	r2, [sp, #12]
    bb2e:	4f4b      	ldr	r7, [pc, #300]	; (bc5c <_strtod_r+0x5fc>)
    bb30:	6013      	str	r3, [r2, #0]
    bb32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    bb34:	42b3      	cmp	r3, r6
    bb36:	d000      	beq.n	bb3a <_strtod_r+0x4da>
    bb38:	e36a      	b.n	c210 <_strtod_r+0xbb0>
    bb3a:	e37d      	b.n	c238 <_strtod_r+0xbd8>
    bb3c:	2300      	movs	r3, #0
    bb3e:	1c30      	adds	r0, r6, #0
    bb40:	1c39      	adds	r1, r7, #0
    bb42:	112d      	asrs	r5, r5, #4
    bb44:	9305      	str	r3, [sp, #20]
    bb46:	2d01      	cmp	r5, #1
    bb48:	dd0e      	ble.n	bb68 <_strtod_r+0x508>
    bb4a:	07eb      	lsls	r3, r5, #31
    bb4c:	d507      	bpl.n	bb5e <_strtod_r+0x4fe>
    bb4e:	9b05      	ldr	r3, [sp, #20]
    bb50:	00da      	lsls	r2, r3, #3
    bb52:	4b43      	ldr	r3, [pc, #268]	; (bc60 <_strtod_r+0x600>)
    bb54:	18d3      	adds	r3, r2, r3
    bb56:	681a      	ldr	r2, [r3, #0]
    bb58:	685b      	ldr	r3, [r3, #4]
    bb5a:	f7fc fe09 	bl	8770 <__aeabi_dmul>
    bb5e:	9b05      	ldr	r3, [sp, #20]
    bb60:	106d      	asrs	r5, r5, #1
    bb62:	3301      	adds	r3, #1
    bb64:	9305      	str	r3, [sp, #20]
    bb66:	e7ee      	b.n	bb46 <_strtod_r+0x4e6>
    bb68:	1c06      	adds	r6, r0, #0
    bb6a:	4b3e      	ldr	r3, [pc, #248]	; (bc64 <_strtod_r+0x604>)
    bb6c:	18cf      	adds	r7, r1, r3
    bb6e:	9b05      	ldr	r3, [sp, #20]
    bb70:	00da      	lsls	r2, r3, #3
    bb72:	4b3b      	ldr	r3, [pc, #236]	; (bc60 <_strtod_r+0x600>)
    bb74:	189b      	adds	r3, r3, r2
    bb76:	6818      	ldr	r0, [r3, #0]
    bb78:	6859      	ldr	r1, [r3, #4]
    bb7a:	1c32      	adds	r2, r6, #0
    bb7c:	1c3b      	adds	r3, r7, #0
    bb7e:	f7fc fdf7 	bl	8770 <__aeabi_dmul>
    bb82:	4b36      	ldr	r3, [pc, #216]	; (bc5c <_strtod_r+0x5fc>)
    bb84:	1c0f      	adds	r7, r1, #0
    bb86:	400b      	ands	r3, r1
    bb88:	4937      	ldr	r1, [pc, #220]	; (bc68 <_strtod_r+0x608>)
    bb8a:	1c06      	adds	r6, r0, #0
    bb8c:	428b      	cmp	r3, r1
    bb8e:	d8c6      	bhi.n	bb1e <_strtod_r+0x4be>
    bb90:	4936      	ldr	r1, [pc, #216]	; (bc6c <_strtod_r+0x60c>)
    bb92:	428b      	cmp	r3, r1
    bb94:	d903      	bls.n	bb9e <_strtod_r+0x53e>
    bb96:	2601      	movs	r6, #1
    bb98:	4f35      	ldr	r7, [pc, #212]	; (bc70 <_strtod_r+0x610>)
    bb9a:	4276      	negs	r6, r6
    bb9c:	e06c      	b.n	bc78 <_strtod_r+0x618>
    bb9e:	23d4      	movs	r3, #212	; 0xd4
    bba0:	049b      	lsls	r3, r3, #18
    bba2:	18ff      	adds	r7, r7, r3
    bba4:	e068      	b.n	bc78 <_strtod_r+0x618>
    bba6:	2d00      	cmp	r5, #0
    bba8:	d066      	beq.n	bc78 <_strtod_r+0x618>
    bbaa:	230f      	movs	r3, #15
    bbac:	426d      	negs	r5, r5
    bbae:	402b      	ands	r3, r5
    bbb0:	d00a      	beq.n	bbc8 <_strtod_r+0x568>
    bbb2:	4a29      	ldr	r2, [pc, #164]	; (bc58 <_strtod_r+0x5f8>)
    bbb4:	00db      	lsls	r3, r3, #3
    bbb6:	18d3      	adds	r3, r2, r3
    bbb8:	1c30      	adds	r0, r6, #0
    bbba:	681a      	ldr	r2, [r3, #0]
    bbbc:	685b      	ldr	r3, [r3, #4]
    bbbe:	1c39      	adds	r1, r7, #0
    bbc0:	f7fc f998 	bl	7ef4 <__aeabi_ddiv>
    bbc4:	1c06      	adds	r6, r0, #0
    bbc6:	1c0f      	adds	r7, r1, #0
    bbc8:	112d      	asrs	r5, r5, #4
    bbca:	d055      	beq.n	bc78 <_strtod_r+0x618>
    bbcc:	2d1f      	cmp	r5, #31
    bbce:	dd05      	ble.n	bbdc <_strtod_r+0x57c>
    bbd0:	2300      	movs	r3, #0
    bbd2:	9304      	str	r3, [sp, #16]
    bbd4:	9305      	str	r3, [sp, #20]
    bbd6:	930b      	str	r3, [sp, #44]	; 0x2c
    bbd8:	9308      	str	r3, [sp, #32]
    bbda:	e118      	b.n	be0e <_strtod_r+0x7ae>
    bbdc:	2300      	movs	r3, #0
    bbde:	9306      	str	r3, [sp, #24]
    bbe0:	06eb      	lsls	r3, r5, #27
    bbe2:	d501      	bpl.n	bbe8 <_strtod_r+0x588>
    bbe4:	236a      	movs	r3, #106	; 0x6a
    bbe6:	9306      	str	r3, [sp, #24]
    bbe8:	1c39      	adds	r1, r7, #0
    bbea:	1c30      	adds	r0, r6, #0
    bbec:	4e21      	ldr	r6, [pc, #132]	; (bc74 <_strtod_r+0x614>)
    bbee:	2d00      	cmp	r5, #0
    bbf0:	dd08      	ble.n	bc04 <_strtod_r+0x5a4>
    bbf2:	07eb      	lsls	r3, r5, #31
    bbf4:	d503      	bpl.n	bbfe <_strtod_r+0x59e>
    bbf6:	6832      	ldr	r2, [r6, #0]
    bbf8:	6873      	ldr	r3, [r6, #4]
    bbfa:	f7fc fdb9 	bl	8770 <__aeabi_dmul>
    bbfe:	106d      	asrs	r5, r5, #1
    bc00:	3608      	adds	r6, #8
    bc02:	e7f4      	b.n	bbee <_strtod_r+0x58e>
    bc04:	9b06      	ldr	r3, [sp, #24]
    bc06:	1c06      	adds	r6, r0, #0
    bc08:	1c0f      	adds	r7, r1, #0
    bc0a:	2b00      	cmp	r3, #0
    bc0c:	d019      	beq.n	bc42 <_strtod_r+0x5e2>
    bc0e:	226b      	movs	r2, #107	; 0x6b
    bc10:	004b      	lsls	r3, r1, #1
    bc12:	0d5b      	lsrs	r3, r3, #21
    bc14:	1c08      	adds	r0, r1, #0
    bc16:	1ad3      	subs	r3, r2, r3
    bc18:	2b00      	cmp	r3, #0
    bc1a:	dd12      	ble.n	bc42 <_strtod_r+0x5e2>
    bc1c:	2b1f      	cmp	r3, #31
    bc1e:	dd0c      	ble.n	bc3a <_strtod_r+0x5da>
    bc20:	2600      	movs	r6, #0
    bc22:	2b34      	cmp	r3, #52	; 0x34
    bc24:	dd02      	ble.n	bc2c <_strtod_r+0x5cc>
    bc26:	27dc      	movs	r7, #220	; 0xdc
    bc28:	04bf      	lsls	r7, r7, #18
    bc2a:	e00a      	b.n	bc42 <_strtod_r+0x5e2>
    bc2c:	2201      	movs	r2, #1
    bc2e:	3b20      	subs	r3, #32
    bc30:	4252      	negs	r2, r2
    bc32:	409a      	lsls	r2, r3
    bc34:	4010      	ands	r0, r2
    bc36:	1c07      	adds	r7, r0, #0
    bc38:	e003      	b.n	bc42 <_strtod_r+0x5e2>
    bc3a:	2201      	movs	r2, #1
    bc3c:	4252      	negs	r2, r2
    bc3e:	409a      	lsls	r2, r3
    bc40:	4016      	ands	r6, r2
    bc42:	1c30      	adds	r0, r6, #0
    bc44:	1c39      	adds	r1, r7, #0
    bc46:	2200      	movs	r2, #0
    bc48:	2300      	movs	r3, #0
    bc4a:	f7fa fead 	bl	69a8 <__aeabi_dcmpeq>
    bc4e:	2800      	cmp	r0, #0
    bc50:	d1be      	bne.n	bbd0 <_strtod_r+0x570>
    bc52:	e013      	b.n	bc7c <_strtod_r+0x61c>
    bc54:	fff80000 	.word	0xfff80000
    bc58:	0000fc30 	.word	0x0000fc30
    bc5c:	7ff00000 	.word	0x7ff00000
    bc60:	0000fcf8 	.word	0x0000fcf8
    bc64:	fcb00000 	.word	0xfcb00000
    bc68:	7ca00000 	.word	0x7ca00000
    bc6c:	7c900000 	.word	0x7c900000
    bc70:	7fefffff 	.word	0x7fefffff
    bc74:	0000fad8 	.word	0x0000fad8
    bc78:	2300      	movs	r3, #0
    bc7a:	9306      	str	r3, [sp, #24]
    bc7c:	9b07      	ldr	r3, [sp, #28]
    bc7e:	9803      	ldr	r0, [sp, #12]
    bc80:	9300      	str	r3, [sp, #0]
    bc82:	990c      	ldr	r1, [sp, #48]	; 0x30
    bc84:	9a04      	ldr	r2, [sp, #16]
    bc86:	1c23      	adds	r3, r4, #0
    bc88:	f001 fffb 	bl	dc82 <__s2b>
    bc8c:	900b      	str	r0, [sp, #44]	; 0x2c
    bc8e:	2800      	cmp	r0, #0
    bc90:	d100      	bne.n	bc94 <_strtod_r+0x634>
    bc92:	e744      	b.n	bb1e <_strtod_r+0x4be>
    bc94:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bc96:	9a09      	ldr	r2, [sp, #36]	; 0x24
    bc98:	425b      	negs	r3, r3
    bc9a:	17d2      	asrs	r2, r2, #31
    bc9c:	4013      	ands	r3, r2
    bc9e:	9313      	str	r3, [sp, #76]	; 0x4c
    bca0:	2300      	movs	r3, #0
    bca2:	9304      	str	r3, [sp, #16]
    bca4:	9305      	str	r3, [sp, #20]
    bca6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    bca8:	9803      	ldr	r0, [sp, #12]
    bcaa:	6859      	ldr	r1, [r3, #4]
    bcac:	f001 ff5c 	bl	db68 <_Balloc>
    bcb0:	9008      	str	r0, [sp, #32]
    bcb2:	2800      	cmp	r0, #0
    bcb4:	d100      	bne.n	bcb8 <_strtod_r+0x658>
    bcb6:	e737      	b.n	bb28 <_strtod_r+0x4c8>
    bcb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    bcba:	990b      	ldr	r1, [sp, #44]	; 0x2c
    bcbc:	691b      	ldr	r3, [r3, #16]
    bcbe:	310c      	adds	r1, #12
    bcc0:	1c9a      	adds	r2, r3, #2
    bcc2:	0092      	lsls	r2, r2, #2
    bcc4:	300c      	adds	r0, #12
    bcc6:	9307      	str	r3, [sp, #28]
    bcc8:	f7fe f8ed 	bl	9ea6 <memcpy>
    bccc:	ab1f      	add	r3, sp, #124	; 0x7c
    bcce:	9300      	str	r3, [sp, #0]
    bcd0:	ab20      	add	r3, sp, #128	; 0x80
    bcd2:	9301      	str	r3, [sp, #4]
    bcd4:	9803      	ldr	r0, [sp, #12]
    bcd6:	1c32      	adds	r2, r6, #0
    bcd8:	1c3b      	adds	r3, r7, #0
    bcda:	960e      	str	r6, [sp, #56]	; 0x38
    bcdc:	970f      	str	r7, [sp, #60]	; 0x3c
    bcde:	f002 fa91 	bl	e204 <__d2b>
    bce2:	901e      	str	r0, [sp, #120]	; 0x78
    bce4:	2800      	cmp	r0, #0
    bce6:	d100      	bne.n	bcea <_strtod_r+0x68a>
    bce8:	e71e      	b.n	bb28 <_strtod_r+0x4c8>
    bcea:	9803      	ldr	r0, [sp, #12]
    bcec:	2101      	movs	r1, #1
    bcee:	f002 f852 	bl	dd96 <__i2b>
    bcf2:	9005      	str	r0, [sp, #20]
    bcf4:	2800      	cmp	r0, #0
    bcf6:	d100      	bne.n	bcfa <_strtod_r+0x69a>
    bcf8:	e716      	b.n	bb28 <_strtod_r+0x4c8>
    bcfa:	2300      	movs	r3, #0
    bcfc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    bcfe:	930a      	str	r3, [sp, #40]	; 0x28
    bd00:	4293      	cmp	r3, r2
    bd02:	da00      	bge.n	bd06 <_strtod_r+0x6a6>
    bd04:	920a      	str	r2, [sp, #40]	; 0x28
    bd06:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    bd08:	2b00      	cmp	r3, #0
    bd0a:	da00      	bge.n	bd0e <_strtod_r+0x6ae>
    bd0c:	e089      	b.n	be22 <_strtod_r+0x7c2>
    bd0e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    bd10:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    bd12:	18d5      	adds	r5, r2, r3
    bd14:	9a06      	ldr	r2, [sp, #24]
    bd16:	9920      	ldr	r1, [sp, #128]	; 0x80
    bd18:	1a9b      	subs	r3, r3, r2
    bd1a:	2236      	movs	r2, #54	; 0x36
    bd1c:	185b      	adds	r3, r3, r1
    bd1e:	1a52      	subs	r2, r2, r1
    bd20:	49c8      	ldr	r1, [pc, #800]	; (c044 <_strtod_r+0x9e4>)
    bd22:	2001      	movs	r0, #1
    bd24:	428b      	cmp	r3, r1
    bd26:	db00      	blt.n	bd2a <_strtod_r+0x6ca>
    bd28:	e085      	b.n	be36 <_strtod_r+0x7d6>
    bd2a:	1ac9      	subs	r1, r1, r3
    bd2c:	1a52      	subs	r2, r2, r1
    bd2e:	291f      	cmp	r1, #31
    bd30:	dc7b      	bgt.n	be2a <_strtod_r+0x7ca>
    bd32:	4088      	lsls	r0, r1
    bd34:	2300      	movs	r3, #0
    bd36:	9018      	str	r0, [sp, #96]	; 0x60
    bd38:	9312      	str	r3, [sp, #72]	; 0x48
    bd3a:	18ab      	adds	r3, r5, r2
    bd3c:	9307      	str	r3, [sp, #28]
    bd3e:	9b06      	ldr	r3, [sp, #24]
    bd40:	18a4      	adds	r4, r4, r2
    bd42:	18e4      	adds	r4, r4, r3
    bd44:	9b07      	ldr	r3, [sp, #28]
    bd46:	42ab      	cmp	r3, r5
    bd48:	dd00      	ble.n	bd4c <_strtod_r+0x6ec>
    bd4a:	1c2b      	adds	r3, r5, #0
    bd4c:	42a3      	cmp	r3, r4
    bd4e:	dd00      	ble.n	bd52 <_strtod_r+0x6f2>
    bd50:	1c23      	adds	r3, r4, #0
    bd52:	2b00      	cmp	r3, #0
    bd54:	dd04      	ble.n	bd60 <_strtod_r+0x700>
    bd56:	9a07      	ldr	r2, [sp, #28]
    bd58:	1ae4      	subs	r4, r4, r3
    bd5a:	1ad2      	subs	r2, r2, r3
    bd5c:	9207      	str	r2, [sp, #28]
    bd5e:	1aed      	subs	r5, r5, r3
    bd60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    bd62:	2b00      	cmp	r3, #0
    bd64:	d16b      	bne.n	be3e <_strtod_r+0x7de>
    bd66:	9b07      	ldr	r3, [sp, #28]
    bd68:	2b00      	cmp	r3, #0
    bd6a:	dd00      	ble.n	bd6e <_strtod_r+0x70e>
    bd6c:	e080      	b.n	be70 <_strtod_r+0x810>
    bd6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bd70:	2b00      	cmp	r3, #0
    bd72:	d000      	beq.n	bd76 <_strtod_r+0x716>
    bd74:	e086      	b.n	be84 <_strtod_r+0x824>
    bd76:	2c00      	cmp	r4, #0
    bd78:	dd00      	ble.n	bd7c <_strtod_r+0x71c>
    bd7a:	e08d      	b.n	be98 <_strtod_r+0x838>
    bd7c:	2d00      	cmp	r5, #0
    bd7e:	dd00      	ble.n	bd82 <_strtod_r+0x722>
    bd80:	e094      	b.n	beac <_strtod_r+0x84c>
    bd82:	9803      	ldr	r0, [sp, #12]
    bd84:	991e      	ldr	r1, [sp, #120]	; 0x78
    bd86:	9a08      	ldr	r2, [sp, #32]
    bd88:	f002 f95b 	bl	e042 <__mdiff>
    bd8c:	9004      	str	r0, [sp, #16]
    bd8e:	2800      	cmp	r0, #0
    bd90:	d100      	bne.n	bd94 <_strtod_r+0x734>
    bd92:	e6c9      	b.n	bb28 <_strtod_r+0x4c8>
    bd94:	2200      	movs	r2, #0
    bd96:	68c3      	ldr	r3, [r0, #12]
    bd98:	9905      	ldr	r1, [sp, #20]
    bd9a:	60c2      	str	r2, [r0, #12]
    bd9c:	930c      	str	r3, [sp, #48]	; 0x30
    bd9e:	f002 f935 	bl	e00c <__mcmp>
    bda2:	2800      	cmp	r0, #0
    bda4:	db00      	blt.n	bda8 <_strtod_r+0x748>
    bda6:	e091      	b.n	becc <_strtod_r+0x86c>
    bda8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    bdaa:	2b00      	cmp	r3, #0
    bdac:	d000      	beq.n	bdb0 <_strtod_r+0x750>
    bdae:	e21a      	b.n	c1e6 <_strtod_r+0xb86>
    bdb0:	2e00      	cmp	r6, #0
    bdb2:	d000      	beq.n	bdb6 <_strtod_r+0x756>
    bdb4:	e217      	b.n	c1e6 <_strtod_r+0xb86>
    bdb6:	033b      	lsls	r3, r7, #12
    bdb8:	d000      	beq.n	bdbc <_strtod_r+0x75c>
    bdba:	e214      	b.n	c1e6 <_strtod_r+0xb86>
    bdbc:	22d6      	movs	r2, #214	; 0xd6
    bdbe:	4ba2      	ldr	r3, [pc, #648]	; (c048 <_strtod_r+0x9e8>)
    bdc0:	04d2      	lsls	r2, r2, #19
    bdc2:	403b      	ands	r3, r7
    bdc4:	4293      	cmp	r3, r2
    bdc6:	d800      	bhi.n	bdca <_strtod_r+0x76a>
    bdc8:	e20d      	b.n	c1e6 <_strtod_r+0xb86>
    bdca:	9b04      	ldr	r3, [sp, #16]
    bdcc:	695b      	ldr	r3, [r3, #20]
    bdce:	9307      	str	r3, [sp, #28]
    bdd0:	2b00      	cmp	r3, #0
    bdd2:	d075      	beq.n	bec0 <_strtod_r+0x860>
    bdd4:	9904      	ldr	r1, [sp, #16]
    bdd6:	9803      	ldr	r0, [sp, #12]
    bdd8:	2201      	movs	r2, #1
    bdda:	f002 f8c5 	bl	df68 <__lshift>
    bdde:	9905      	ldr	r1, [sp, #20]
    bde0:	9004      	str	r0, [sp, #16]
    bde2:	f002 f913 	bl	e00c <__mcmp>
    bde6:	2800      	cmp	r0, #0
    bde8:	dc00      	bgt.n	bdec <_strtod_r+0x78c>
    bdea:	e1fc      	b.n	c1e6 <_strtod_r+0xb86>
    bdec:	9a06      	ldr	r2, [sp, #24]
    bdee:	4b96      	ldr	r3, [pc, #600]	; (c048 <_strtod_r+0x9e8>)
    bdf0:	2a00      	cmp	r2, #0
    bdf2:	d100      	bne.n	bdf6 <_strtod_r+0x796>
    bdf4:	e09a      	b.n	bf2c <_strtod_r+0x8cc>
    bdf6:	1c1a      	adds	r2, r3, #0
    bdf8:	21d6      	movs	r1, #214	; 0xd6
    bdfa:	403a      	ands	r2, r7
    bdfc:	04c9      	lsls	r1, r1, #19
    bdfe:	428a      	cmp	r2, r1
    be00:	dd00      	ble.n	be04 <_strtod_r+0x7a4>
    be02:	e093      	b.n	bf2c <_strtod_r+0x8cc>
    be04:	23dc      	movs	r3, #220	; 0xdc
    be06:	049b      	lsls	r3, r3, #18
    be08:	429a      	cmp	r2, r3
    be0a:	dd00      	ble.n	be0e <_strtod_r+0x7ae>
    be0c:	e1ee      	b.n	c1ec <_strtod_r+0xb8c>
    be0e:	2322      	movs	r3, #34	; 0x22
    be10:	9a03      	ldr	r2, [sp, #12]
    be12:	2600      	movs	r6, #0
    be14:	6013      	str	r3, [r2, #0]
    be16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    be18:	2700      	movs	r7, #0
    be1a:	2b00      	cmp	r3, #0
    be1c:	d000      	beq.n	be20 <_strtod_r+0x7c0>
    be1e:	e1f7      	b.n	c210 <_strtod_r+0xbb0>
    be20:	e20a      	b.n	c238 <_strtod_r+0xbd8>
    be22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    be24:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    be26:	1ad4      	subs	r4, r2, r3
    be28:	e774      	b.n	bd14 <_strtod_r+0x6b4>
    be2a:	4988      	ldr	r1, [pc, #544]	; (c04c <_strtod_r+0x9ec>)
    be2c:	1acb      	subs	r3, r1, r3
    be2e:	1c01      	adds	r1, r0, #0
    be30:	4099      	lsls	r1, r3
    be32:	9112      	str	r1, [sp, #72]	; 0x48
    be34:	e001      	b.n	be3a <_strtod_r+0x7da>
    be36:	2300      	movs	r3, #0
    be38:	9312      	str	r3, [sp, #72]	; 0x48
    be3a:	9018      	str	r0, [sp, #96]	; 0x60
    be3c:	e77d      	b.n	bd3a <_strtod_r+0x6da>
    be3e:	1c1a      	adds	r2, r3, #0
    be40:	9803      	ldr	r0, [sp, #12]
    be42:	9905      	ldr	r1, [sp, #20]
    be44:	f002 f83e 	bl	dec4 <__pow5mult>
    be48:	9005      	str	r0, [sp, #20]
    be4a:	1e03      	subs	r3, r0, #0
    be4c:	d100      	bne.n	be50 <_strtod_r+0x7f0>
    be4e:	e66b      	b.n	bb28 <_strtod_r+0x4c8>
    be50:	9803      	ldr	r0, [sp, #12]
    be52:	1c19      	adds	r1, r3, #0
    be54:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    be56:	f001 ffa7 	bl	dda8 <__multiply>
    be5a:	900c      	str	r0, [sp, #48]	; 0x30
    be5c:	2800      	cmp	r0, #0
    be5e:	d100      	bne.n	be62 <_strtod_r+0x802>
    be60:	e662      	b.n	bb28 <_strtod_r+0x4c8>
    be62:	9803      	ldr	r0, [sp, #12]
    be64:	991e      	ldr	r1, [sp, #120]	; 0x78
    be66:	f001 feb7 	bl	dbd8 <_Bfree>
    be6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    be6c:	931e      	str	r3, [sp, #120]	; 0x78
    be6e:	e77a      	b.n	bd66 <_strtod_r+0x706>
    be70:	9803      	ldr	r0, [sp, #12]
    be72:	991e      	ldr	r1, [sp, #120]	; 0x78
    be74:	9a07      	ldr	r2, [sp, #28]
    be76:	f002 f877 	bl	df68 <__lshift>
    be7a:	901e      	str	r0, [sp, #120]	; 0x78
    be7c:	2800      	cmp	r0, #0
    be7e:	d000      	beq.n	be82 <_strtod_r+0x822>
    be80:	e775      	b.n	bd6e <_strtod_r+0x70e>
    be82:	e651      	b.n	bb28 <_strtod_r+0x4c8>
    be84:	9803      	ldr	r0, [sp, #12]
    be86:	9908      	ldr	r1, [sp, #32]
    be88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    be8a:	f002 f81b 	bl	dec4 <__pow5mult>
    be8e:	9008      	str	r0, [sp, #32]
    be90:	2800      	cmp	r0, #0
    be92:	d000      	beq.n	be96 <_strtod_r+0x836>
    be94:	e76f      	b.n	bd76 <_strtod_r+0x716>
    be96:	e647      	b.n	bb28 <_strtod_r+0x4c8>
    be98:	9803      	ldr	r0, [sp, #12]
    be9a:	9908      	ldr	r1, [sp, #32]
    be9c:	1c22      	adds	r2, r4, #0
    be9e:	f002 f863 	bl	df68 <__lshift>
    bea2:	9008      	str	r0, [sp, #32]
    bea4:	2800      	cmp	r0, #0
    bea6:	d000      	beq.n	beaa <_strtod_r+0x84a>
    bea8:	e768      	b.n	bd7c <_strtod_r+0x71c>
    beaa:	e63d      	b.n	bb28 <_strtod_r+0x4c8>
    beac:	9803      	ldr	r0, [sp, #12]
    beae:	9905      	ldr	r1, [sp, #20]
    beb0:	1c2a      	adds	r2, r5, #0
    beb2:	f002 f859 	bl	df68 <__lshift>
    beb6:	9005      	str	r0, [sp, #20]
    beb8:	2800      	cmp	r0, #0
    beba:	d000      	beq.n	bebe <_strtod_r+0x85e>
    bebc:	e761      	b.n	bd82 <_strtod_r+0x722>
    bebe:	e633      	b.n	bb28 <_strtod_r+0x4c8>
    bec0:	9b04      	ldr	r3, [sp, #16]
    bec2:	691b      	ldr	r3, [r3, #16]
    bec4:	9307      	str	r3, [sp, #28]
    bec6:	2b01      	cmp	r3, #1
    bec8:	dc84      	bgt.n	bdd4 <_strtod_r+0x774>
    beca:	e18c      	b.n	c1e6 <_strtod_r+0xb86>
    becc:	2800      	cmp	r0, #0
    bece:	d164      	bne.n	bf9a <_strtod_r+0x93a>
    bed0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    bed2:	033b      	lsls	r3, r7, #12
    bed4:	2a00      	cmp	r2, #0
    bed6:	d024      	beq.n	bf22 <_strtod_r+0x8c2>
    bed8:	4a5d      	ldr	r2, [pc, #372]	; (c050 <_strtod_r+0x9f0>)
    beda:	1c39      	adds	r1, r7, #0
    bedc:	0b1b      	lsrs	r3, r3, #12
    bede:	4293      	cmp	r3, r2
    bee0:	d12d      	bne.n	bf3e <_strtod_r+0x8de>
    bee2:	9a06      	ldr	r2, [sp, #24]
    bee4:	3801      	subs	r0, #1
    bee6:	1c34      	adds	r4, r6, #0
    bee8:	1c03      	adds	r3, r0, #0
    beea:	2a00      	cmp	r2, #0
    beec:	d00a      	beq.n	bf04 <_strtod_r+0x8a4>
    beee:	25d4      	movs	r5, #212	; 0xd4
    bef0:	4a55      	ldr	r2, [pc, #340]	; (c048 <_strtod_r+0x9e8>)
    bef2:	04ed      	lsls	r5, r5, #19
    bef4:	403a      	ands	r2, r7
    bef6:	42aa      	cmp	r2, r5
    bef8:	d804      	bhi.n	bf04 <_strtod_r+0x8a4>
    befa:	336c      	adds	r3, #108	; 0x6c
    befc:	0d12      	lsrs	r2, r2, #20
    befe:	1a9a      	subs	r2, r3, r2
    bf00:	1c03      	adds	r3, r0, #0
    bf02:	4093      	lsls	r3, r2
    bf04:	429c      	cmp	r4, r3
    bf06:	d11a      	bne.n	bf3e <_strtod_r+0x8de>
    bf08:	4b52      	ldr	r3, [pc, #328]	; (c054 <_strtod_r+0x9f4>)
    bf0a:	4299      	cmp	r1, r3
    bf0c:	d102      	bne.n	bf14 <_strtod_r+0x8b4>
    bf0e:	1c63      	adds	r3, r4, #1
    bf10:	d100      	bne.n	bf14 <_strtod_r+0x8b4>
    bf12:	e609      	b.n	bb28 <_strtod_r+0x4c8>
    bf14:	4b4c      	ldr	r3, [pc, #304]	; (c048 <_strtod_r+0x9e8>)
    bf16:	2600      	movs	r6, #0
    bf18:	4019      	ands	r1, r3
    bf1a:	2380      	movs	r3, #128	; 0x80
    bf1c:	035b      	lsls	r3, r3, #13
    bf1e:	18cf      	adds	r7, r1, r3
    bf20:	e161      	b.n	c1e6 <_strtod_r+0xb86>
    bf22:	2b00      	cmp	r3, #0
    bf24:	d10b      	bne.n	bf3e <_strtod_r+0x8de>
    bf26:	2e00      	cmp	r6, #0
    bf28:	d109      	bne.n	bf3e <_strtod_r+0x8de>
    bf2a:	e75f      	b.n	bdec <_strtod_r+0x78c>
    bf2c:	2601      	movs	r6, #1
    bf2e:	4a4a      	ldr	r2, [pc, #296]	; (c058 <_strtod_r+0x9f8>)
    bf30:	403b      	ands	r3, r7
    bf32:	189b      	adds	r3, r3, r2
    bf34:	4a46      	ldr	r2, [pc, #280]	; (c050 <_strtod_r+0x9f0>)
    bf36:	4276      	negs	r6, r6
    bf38:	431a      	orrs	r2, r3
    bf3a:	1c17      	adds	r7, r2, #0
    bf3c:	e153      	b.n	c1e6 <_strtod_r+0xb86>
    bf3e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    bf40:	2b00      	cmp	r3, #0
    bf42:	d003      	beq.n	bf4c <_strtod_r+0x8ec>
    bf44:	423b      	tst	r3, r7
    bf46:	d100      	bne.n	bf4a <_strtod_r+0x8ea>
    bf48:	e14d      	b.n	c1e6 <_strtod_r+0xb86>
    bf4a:	e003      	b.n	bf54 <_strtod_r+0x8f4>
    bf4c:	9b18      	ldr	r3, [sp, #96]	; 0x60
    bf4e:	4233      	tst	r3, r6
    bf50:	d100      	bne.n	bf54 <_strtod_r+0x8f4>
    bf52:	e148      	b.n	c1e6 <_strtod_r+0xb86>
    bf54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    bf56:	1c30      	adds	r0, r6, #0
    bf58:	1c39      	adds	r1, r7, #0
    bf5a:	9a06      	ldr	r2, [sp, #24]
    bf5c:	2b00      	cmp	r3, #0
    bf5e:	d00a      	beq.n	bf76 <_strtod_r+0x916>
    bf60:	f7ff fb68 	bl	b634 <sulp>
    bf64:	1c02      	adds	r2, r0, #0
    bf66:	1c0b      	adds	r3, r1, #0
    bf68:	980e      	ldr	r0, [sp, #56]	; 0x38
    bf6a:	990f      	ldr	r1, [sp, #60]	; 0x3c
    bf6c:	f7fb fc9a 	bl	78a4 <__aeabi_dadd>
    bf70:	1c06      	adds	r6, r0, #0
    bf72:	1c0f      	adds	r7, r1, #0
    bf74:	e137      	b.n	c1e6 <_strtod_r+0xb86>
    bf76:	f7ff fb5d 	bl	b634 <sulp>
    bf7a:	1c02      	adds	r2, r0, #0
    bf7c:	1c0b      	adds	r3, r1, #0
    bf7e:	980e      	ldr	r0, [sp, #56]	; 0x38
    bf80:	990f      	ldr	r1, [sp, #60]	; 0x3c
    bf82:	f7fc fe8f 	bl	8ca4 <__aeabi_dsub>
    bf86:	2200      	movs	r2, #0
    bf88:	2300      	movs	r3, #0
    bf8a:	1c06      	adds	r6, r0, #0
    bf8c:	1c0f      	adds	r7, r1, #0
    bf8e:	f7fa fd0b 	bl	69a8 <__aeabi_dcmpeq>
    bf92:	2800      	cmp	r0, #0
    bf94:	d000      	beq.n	bf98 <_strtod_r+0x938>
    bf96:	e73a      	b.n	be0e <_strtod_r+0x7ae>
    bf98:	e125      	b.n	c1e6 <_strtod_r+0xb86>
    bf9a:	9804      	ldr	r0, [sp, #16]
    bf9c:	9905      	ldr	r1, [sp, #20]
    bf9e:	f002 f985 	bl	e2ac <__ratio>
    bfa2:	2380      	movs	r3, #128	; 0x80
    bfa4:	2200      	movs	r2, #0
    bfa6:	05db      	lsls	r3, r3, #23
    bfa8:	1c04      	adds	r4, r0, #0
    bfaa:	1c0d      	adds	r5, r1, #0
    bfac:	f7fa fd0c 	bl	69c8 <__aeabi_dcmple>
    bfb0:	2800      	cmp	r0, #0
    bfb2:	d036      	beq.n	c022 <_strtod_r+0x9c2>
    bfb4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    bfb6:	2b00      	cmp	r3, #0
    bfb8:	d002      	beq.n	bfc0 <_strtod_r+0x960>
    bfba:	2400      	movs	r4, #0
    bfbc:	4d27      	ldr	r5, [pc, #156]	; (c05c <_strtod_r+0x9fc>)
    bfbe:	e00b      	b.n	bfd8 <_strtod_r+0x978>
    bfc0:	2e00      	cmp	r6, #0
    bfc2:	d102      	bne.n	bfca <_strtod_r+0x96a>
    bfc4:	033b      	lsls	r3, r7, #12
    bfc6:	d105      	bne.n	bfd4 <_strtod_r+0x974>
    bfc8:	e00b      	b.n	bfe2 <_strtod_r+0x982>
    bfca:	2e01      	cmp	r6, #1
    bfcc:	d102      	bne.n	bfd4 <_strtod_r+0x974>
    bfce:	2f00      	cmp	r7, #0
    bfd0:	d100      	bne.n	bfd4 <_strtod_r+0x974>
    bfd2:	e71c      	b.n	be0e <_strtod_r+0x7ae>
    bfd4:	2400      	movs	r4, #0
    bfd6:	4d22      	ldr	r5, [pc, #136]	; (c060 <_strtod_r+0xa00>)
    bfd8:	2300      	movs	r3, #0
    bfda:	9307      	str	r3, [sp, #28]
    bfdc:	4b1f      	ldr	r3, [pc, #124]	; (c05c <_strtod_r+0x9fc>)
    bfde:	930a      	str	r3, [sp, #40]	; 0x28
    bfe0:	e048      	b.n	c074 <_strtod_r+0xa14>
    bfe2:	1c20      	adds	r0, r4, #0
    bfe4:	1c29      	adds	r1, r5, #0
    bfe6:	2200      	movs	r2, #0
    bfe8:	4b1c      	ldr	r3, [pc, #112]	; (c05c <_strtod_r+0x9fc>)
    bfea:	f7fa fce3 	bl	69b4 <__aeabi_dcmplt>
    bfee:	2800      	cmp	r0, #0
    bff0:	d108      	bne.n	c004 <_strtod_r+0x9a4>
    bff2:	1c20      	adds	r0, r4, #0
    bff4:	1c29      	adds	r1, r5, #0
    bff6:	2200      	movs	r2, #0
    bff8:	4b1a      	ldr	r3, [pc, #104]	; (c064 <_strtod_r+0xa04>)
    bffa:	f7fc fbb9 	bl	8770 <__aeabi_dmul>
    bffe:	9007      	str	r0, [sp, #28]
    c000:	910a      	str	r1, [sp, #40]	; 0x28
    c002:	e003      	b.n	c00c <_strtod_r+0x9ac>
    c004:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c006:	9307      	str	r3, [sp, #28]
    c008:	4b16      	ldr	r3, [pc, #88]	; (c064 <_strtod_r+0xa04>)
    c00a:	930a      	str	r3, [sp, #40]	; 0x28
    c00c:	2280      	movs	r2, #128	; 0x80
    c00e:	0612      	lsls	r2, r2, #24
    c010:	4694      	mov	ip, r2
    c012:	9b07      	ldr	r3, [sp, #28]
    c014:	931a      	str	r3, [sp, #104]	; 0x68
    c016:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c018:	4463      	add	r3, ip
    c01a:	931b      	str	r3, [sp, #108]	; 0x6c
    c01c:	9c1a      	ldr	r4, [sp, #104]	; 0x68
    c01e:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
    c020:	e028      	b.n	c074 <_strtod_r+0xa14>
    c022:	4b10      	ldr	r3, [pc, #64]	; (c064 <_strtod_r+0xa04>)
    c024:	1c20      	adds	r0, r4, #0
    c026:	1c29      	adds	r1, r5, #0
    c028:	2200      	movs	r2, #0
    c02a:	f7fc fba1 	bl	8770 <__aeabi_dmul>
    c02e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c030:	9007      	str	r0, [sp, #28]
    c032:	910a      	str	r1, [sp, #40]	; 0x28
    c034:	2b00      	cmp	r3, #0
    c036:	d117      	bne.n	c068 <_strtod_r+0xa08>
    c038:	2380      	movs	r3, #128	; 0x80
    c03a:	061b      	lsls	r3, r3, #24
    c03c:	18cb      	adds	r3, r1, r3
    c03e:	9014      	str	r0, [sp, #80]	; 0x50
    c040:	9315      	str	r3, [sp, #84]	; 0x54
    c042:	e015      	b.n	c070 <_strtod_r+0xa10>
    c044:	fffffc03 	.word	0xfffffc03
    c048:	7ff00000 	.word	0x7ff00000
    c04c:	fffffbe3 	.word	0xfffffbe3
    c050:	000fffff 	.word	0x000fffff
    c054:	7fefffff 	.word	0x7fefffff
    c058:	fff00000 	.word	0xfff00000
    c05c:	3ff00000 	.word	0x3ff00000
    c060:	bff00000 	.word	0xbff00000
    c064:	3fe00000 	.word	0x3fe00000
    c068:	9a07      	ldr	r2, [sp, #28]
    c06a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c06c:	9214      	str	r2, [sp, #80]	; 0x50
    c06e:	9315      	str	r3, [sp, #84]	; 0x54
    c070:	9c14      	ldr	r4, [sp, #80]	; 0x50
    c072:	9d15      	ldr	r5, [sp, #84]	; 0x54
    c074:	4b7a      	ldr	r3, [pc, #488]	; (c260 <_strtod_r+0xc00>)
    c076:	403b      	ands	r3, r7
    c078:	9312      	str	r3, [sp, #72]	; 0x48
    c07a:	9a12      	ldr	r2, [sp, #72]	; 0x48
    c07c:	4b79      	ldr	r3, [pc, #484]	; (c264 <_strtod_r+0xc04>)
    c07e:	429a      	cmp	r2, r3
    c080:	d12b      	bne.n	c0da <_strtod_r+0xa7a>
    c082:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    c084:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c086:	9210      	str	r2, [sp, #64]	; 0x40
    c088:	9311      	str	r3, [sp, #68]	; 0x44
    c08a:	4b77      	ldr	r3, [pc, #476]	; (c268 <_strtod_r+0xc08>)
    c08c:	1c30      	adds	r0, r6, #0
    c08e:	18ff      	adds	r7, r7, r3
    c090:	1c39      	adds	r1, r7, #0
    c092:	f002 f841 	bl	e118 <__ulp>
    c096:	1c02      	adds	r2, r0, #0
    c098:	1c0b      	adds	r3, r1, #0
    c09a:	1c20      	adds	r0, r4, #0
    c09c:	1c29      	adds	r1, r5, #0
    c09e:	f7fc fb67 	bl	8770 <__aeabi_dmul>
    c0a2:	1c02      	adds	r2, r0, #0
    c0a4:	1c0b      	adds	r3, r1, #0
    c0a6:	1c30      	adds	r0, r6, #0
    c0a8:	1c39      	adds	r1, r7, #0
    c0aa:	f7fb fbfb 	bl	78a4 <__aeabi_dadd>
    c0ae:	4b6c      	ldr	r3, [pc, #432]	; (c260 <_strtod_r+0xc00>)
    c0b0:	4a6e      	ldr	r2, [pc, #440]	; (c26c <_strtod_r+0xc0c>)
    c0b2:	1c06      	adds	r6, r0, #0
    c0b4:	400b      	ands	r3, r1
    c0b6:	4293      	cmp	r3, r2
    c0b8:	d90b      	bls.n	c0d2 <_strtod_r+0xa72>
    c0ba:	4b6d      	ldr	r3, [pc, #436]	; (c270 <_strtod_r+0xc10>)
    c0bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
    c0be:	429a      	cmp	r2, r3
    c0c0:	d103      	bne.n	c0ca <_strtod_r+0xa6a>
    c0c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c0c4:	3301      	adds	r3, #1
    c0c6:	d100      	bne.n	c0ca <_strtod_r+0xa6a>
    c0c8:	e52e      	b.n	bb28 <_strtod_r+0x4c8>
    c0ca:	2601      	movs	r6, #1
    c0cc:	4f68      	ldr	r7, [pc, #416]	; (c270 <_strtod_r+0xc10>)
    c0ce:	4276      	negs	r6, r6
    c0d0:	e078      	b.n	c1c4 <_strtod_r+0xb64>
    c0d2:	23d4      	movs	r3, #212	; 0xd4
    c0d4:	049b      	lsls	r3, r3, #18
    c0d6:	18cf      	adds	r7, r1, r3
    c0d8:	e040      	b.n	c15c <_strtod_r+0xafc>
    c0da:	9b06      	ldr	r3, [sp, #24]
    c0dc:	2b00      	cmp	r3, #0
    c0de:	d02b      	beq.n	c138 <_strtod_r+0xad8>
    c0e0:	23d4      	movs	r3, #212	; 0xd4
    c0e2:	9a12      	ldr	r2, [sp, #72]	; 0x48
    c0e4:	04db      	lsls	r3, r3, #19
    c0e6:	429a      	cmp	r2, r3
    c0e8:	d826      	bhi.n	c138 <_strtod_r+0xad8>
    c0ea:	9807      	ldr	r0, [sp, #28]
    c0ec:	990a      	ldr	r1, [sp, #40]	; 0x28
    c0ee:	4a61      	ldr	r2, [pc, #388]	; (c274 <_strtod_r+0xc14>)
    c0f0:	4b61      	ldr	r3, [pc, #388]	; (c278 <_strtod_r+0xc18>)
    c0f2:	f7fa fc69 	bl	69c8 <__aeabi_dcmple>
    c0f6:	2800      	cmp	r0, #0
    c0f8:	d019      	beq.n	c12e <_strtod_r+0xace>
    c0fa:	9807      	ldr	r0, [sp, #28]
    c0fc:	990a      	ldr	r1, [sp, #40]	; 0x28
    c0fe:	f7fa fce5 	bl	6acc <__aeabi_d2uiz>
    c102:	2800      	cmp	r0, #0
    c104:	d100      	bne.n	c108 <_strtod_r+0xaa8>
    c106:	3001      	adds	r0, #1
    c108:	f7fd f9b8 	bl	947c <__aeabi_ui2d>
    c10c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c10e:	9007      	str	r0, [sp, #28]
    c110:	910a      	str	r1, [sp, #40]	; 0x28
    c112:	2b00      	cmp	r3, #0
    c114:	d105      	bne.n	c122 <_strtod_r+0xac2>
    c116:	2380      	movs	r3, #128	; 0x80
    c118:	061b      	lsls	r3, r3, #24
    c11a:	18cb      	adds	r3, r1, r3
    c11c:	9016      	str	r0, [sp, #88]	; 0x58
    c11e:	9317      	str	r3, [sp, #92]	; 0x5c
    c120:	e003      	b.n	c12a <_strtod_r+0xaca>
    c122:	9a07      	ldr	r2, [sp, #28]
    c124:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c126:	9216      	str	r2, [sp, #88]	; 0x58
    c128:	9317      	str	r3, [sp, #92]	; 0x5c
    c12a:	9c16      	ldr	r4, [sp, #88]	; 0x58
    c12c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    c12e:	23d6      	movs	r3, #214	; 0xd6
    c130:	9a12      	ldr	r2, [sp, #72]	; 0x48
    c132:	04db      	lsls	r3, r3, #19
    c134:	18eb      	adds	r3, r5, r3
    c136:	1a9d      	subs	r5, r3, r2
    c138:	980e      	ldr	r0, [sp, #56]	; 0x38
    c13a:	990f      	ldr	r1, [sp, #60]	; 0x3c
    c13c:	f001 ffec 	bl	e118 <__ulp>
    c140:	1c02      	adds	r2, r0, #0
    c142:	1c0b      	adds	r3, r1, #0
    c144:	1c20      	adds	r0, r4, #0
    c146:	1c29      	adds	r1, r5, #0
    c148:	f7fc fb12 	bl	8770 <__aeabi_dmul>
    c14c:	1c02      	adds	r2, r0, #0
    c14e:	1c0b      	adds	r3, r1, #0
    c150:	980e      	ldr	r0, [sp, #56]	; 0x38
    c152:	990f      	ldr	r1, [sp, #60]	; 0x3c
    c154:	f7fb fba6 	bl	78a4 <__aeabi_dadd>
    c158:	1c06      	adds	r6, r0, #0
    c15a:	1c0f      	adds	r7, r1, #0
    c15c:	9b06      	ldr	r3, [sp, #24]
    c15e:	970e      	str	r7, [sp, #56]	; 0x38
    c160:	2b00      	cmp	r3, #0
    c162:	d12f      	bne.n	c1c4 <_strtod_r+0xb64>
    c164:	4b3e      	ldr	r3, [pc, #248]	; (c260 <_strtod_r+0xc00>)
    c166:	9a12      	ldr	r2, [sp, #72]	; 0x48
    c168:	403b      	ands	r3, r7
    c16a:	429a      	cmp	r2, r3
    c16c:	d12a      	bne.n	c1c4 <_strtod_r+0xb64>
    c16e:	990a      	ldr	r1, [sp, #40]	; 0x28
    c170:	9807      	ldr	r0, [sp, #28]
    c172:	f7fd f911 	bl	9398 <__aeabi_d2iz>
    c176:	f7fd f945 	bl	9404 <__aeabi_i2d>
    c17a:	1c0b      	adds	r3, r1, #0
    c17c:	1c02      	adds	r2, r0, #0
    c17e:	990a      	ldr	r1, [sp, #40]	; 0x28
    c180:	9807      	ldr	r0, [sp, #28]
    c182:	f7fc fd8f 	bl	8ca4 <__aeabi_dsub>
    c186:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c188:	1c04      	adds	r4, r0, #0
    c18a:	1c0d      	adds	r5, r1, #0
    c18c:	2b00      	cmp	r3, #0
    c18e:	d104      	bne.n	c19a <_strtod_r+0xb3a>
    c190:	2e00      	cmp	r6, #0
    c192:	d102      	bne.n	c19a <_strtod_r+0xb3a>
    c194:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c196:	031b      	lsls	r3, r3, #12
    c198:	d00e      	beq.n	c1b8 <_strtod_r+0xb58>
    c19a:	1c20      	adds	r0, r4, #0
    c19c:	1c29      	adds	r1, r5, #0
    c19e:	4a37      	ldr	r2, [pc, #220]	; (c27c <_strtod_r+0xc1c>)
    c1a0:	4b37      	ldr	r3, [pc, #220]	; (c280 <_strtod_r+0xc20>)
    c1a2:	f7fa fc07 	bl	69b4 <__aeabi_dcmplt>
    c1a6:	2800      	cmp	r0, #0
    c1a8:	d132      	bne.n	c210 <_strtod_r+0xbb0>
    c1aa:	1c20      	adds	r0, r4, #0
    c1ac:	1c29      	adds	r1, r5, #0
    c1ae:	4a35      	ldr	r2, [pc, #212]	; (c284 <_strtod_r+0xc24>)
    c1b0:	4b35      	ldr	r3, [pc, #212]	; (c288 <_strtod_r+0xc28>)
    c1b2:	f7fa fc13 	bl	69dc <__aeabi_dcmpgt>
    c1b6:	e003      	b.n	c1c0 <_strtod_r+0xb60>
    c1b8:	4a30      	ldr	r2, [pc, #192]	; (c27c <_strtod_r+0xc1c>)
    c1ba:	4b34      	ldr	r3, [pc, #208]	; (c28c <_strtod_r+0xc2c>)
    c1bc:	f7fa fbfa 	bl	69b4 <__aeabi_dcmplt>
    c1c0:	2800      	cmp	r0, #0
    c1c2:	d125      	bne.n	c210 <_strtod_r+0xbb0>
    c1c4:	9803      	ldr	r0, [sp, #12]
    c1c6:	991e      	ldr	r1, [sp, #120]	; 0x78
    c1c8:	f001 fd06 	bl	dbd8 <_Bfree>
    c1cc:	9803      	ldr	r0, [sp, #12]
    c1ce:	9908      	ldr	r1, [sp, #32]
    c1d0:	f001 fd02 	bl	dbd8 <_Bfree>
    c1d4:	9803      	ldr	r0, [sp, #12]
    c1d6:	9905      	ldr	r1, [sp, #20]
    c1d8:	f001 fcfe 	bl	dbd8 <_Bfree>
    c1dc:	9803      	ldr	r0, [sp, #12]
    c1de:	9904      	ldr	r1, [sp, #16]
    c1e0:	f001 fcfa 	bl	dbd8 <_Bfree>
    c1e4:	e55f      	b.n	bca6 <_strtod_r+0x646>
    c1e6:	9b06      	ldr	r3, [sp, #24]
    c1e8:	2b00      	cmp	r3, #0
    c1ea:	d011      	beq.n	c210 <_strtod_r+0xbb0>
    c1ec:	4b28      	ldr	r3, [pc, #160]	; (c290 <_strtod_r+0xc30>)
    c1ee:	1c30      	adds	r0, r6, #0
    c1f0:	9311      	str	r3, [sp, #68]	; 0x44
    c1f2:	2300      	movs	r3, #0
    c1f4:	9310      	str	r3, [sp, #64]	; 0x40
    c1f6:	1c39      	adds	r1, r7, #0
    c1f8:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c1fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c1fc:	f7fc fab8 	bl	8770 <__aeabi_dmul>
    c200:	1c06      	adds	r6, r0, #0
    c202:	1e0f      	subs	r7, r1, #0
    c204:	d104      	bne.n	c210 <_strtod_r+0xbb0>
    c206:	2800      	cmp	r0, #0
    c208:	d102      	bne.n	c210 <_strtod_r+0xbb0>
    c20a:	2322      	movs	r3, #34	; 0x22
    c20c:	9a03      	ldr	r2, [sp, #12]
    c20e:	6013      	str	r3, [r2, #0]
    c210:	9803      	ldr	r0, [sp, #12]
    c212:	991e      	ldr	r1, [sp, #120]	; 0x78
    c214:	f001 fce0 	bl	dbd8 <_Bfree>
    c218:	9803      	ldr	r0, [sp, #12]
    c21a:	9908      	ldr	r1, [sp, #32]
    c21c:	f001 fcdc 	bl	dbd8 <_Bfree>
    c220:	9803      	ldr	r0, [sp, #12]
    c222:	9905      	ldr	r1, [sp, #20]
    c224:	f001 fcd8 	bl	dbd8 <_Bfree>
    c228:	9803      	ldr	r0, [sp, #12]
    c22a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    c22c:	f001 fcd4 	bl	dbd8 <_Bfree>
    c230:	9803      	ldr	r0, [sp, #12]
    c232:	9904      	ldr	r1, [sp, #16]
    c234:	f001 fcd0 	bl	dbd8 <_Bfree>
    c238:	9b19      	ldr	r3, [sp, #100]	; 0x64
    c23a:	2b00      	cmp	r3, #0
    c23c:	d002      	beq.n	c244 <_strtod_r+0xbe4>
    c23e:	9b19      	ldr	r3, [sp, #100]	; 0x64
    c240:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    c242:	601a      	str	r2, [r3, #0]
    c244:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c246:	2b00      	cmp	r3, #0
    c248:	d004      	beq.n	c254 <_strtod_r+0xbf4>
    c24a:	2380      	movs	r3, #128	; 0x80
    c24c:	061b      	lsls	r3, r3, #24
    c24e:	1c32      	adds	r2, r6, #0
    c250:	18fb      	adds	r3, r7, r3
    c252:	e001      	b.n	c258 <_strtod_r+0xbf8>
    c254:	1c32      	adds	r2, r6, #0
    c256:	1c3b      	adds	r3, r7, #0
    c258:	1c10      	adds	r0, r2, #0
    c25a:	1c19      	adds	r1, r3, #0
    c25c:	b023      	add	sp, #140	; 0x8c
    c25e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c260:	7ff00000 	.word	0x7ff00000
    c264:	7fe00000 	.word	0x7fe00000
    c268:	fcb00000 	.word	0xfcb00000
    c26c:	7c9fffff 	.word	0x7c9fffff
    c270:	7fefffff 	.word	0x7fefffff
    c274:	ffc00000 	.word	0xffc00000
    c278:	41dfffff 	.word	0x41dfffff
    c27c:	94a03595 	.word	0x94a03595
    c280:	3fdfffff 	.word	0x3fdfffff
    c284:	35afe535 	.word	0x35afe535
    c288:	3fe00000 	.word	0x3fe00000
    c28c:	3fcfffff 	.word	0x3fcfffff
    c290:	39500000 	.word	0x39500000

0000c294 <_strtol_r>:
    c294:	b5f0      	push	{r4, r5, r6, r7, lr}
    c296:	1c1e      	adds	r6, r3, #0
    c298:	4b44      	ldr	r3, [pc, #272]	; (c3ac <_strtol_r+0x118>)
    c29a:	b087      	sub	sp, #28
    c29c:	681b      	ldr	r3, [r3, #0]
    c29e:	9005      	str	r0, [sp, #20]
    c2a0:	9302      	str	r3, [sp, #8]
    c2a2:	1c0b      	adds	r3, r1, #0
    c2a4:	9103      	str	r1, [sp, #12]
    c2a6:	9201      	str	r2, [sp, #4]
    c2a8:	781c      	ldrb	r4, [r3, #0]
    c2aa:	9a02      	ldr	r2, [sp, #8]
    c2ac:	1c5d      	adds	r5, r3, #1
    c2ae:	1912      	adds	r2, r2, r4
    c2b0:	7850      	ldrb	r0, [r2, #1]
    c2b2:	2208      	movs	r2, #8
    c2b4:	4010      	ands	r0, r2
    c2b6:	d001      	beq.n	c2bc <_strtol_r+0x28>
    c2b8:	1c2b      	adds	r3, r5, #0
    c2ba:	e7f5      	b.n	c2a8 <_strtol_r+0x14>
    c2bc:	2c2d      	cmp	r4, #45	; 0x2d
    c2be:	d104      	bne.n	c2ca <_strtol_r+0x36>
    c2c0:	1c9d      	adds	r5, r3, #2
    c2c2:	785c      	ldrb	r4, [r3, #1]
    c2c4:	2301      	movs	r3, #1
    c2c6:	9300      	str	r3, [sp, #0]
    c2c8:	e004      	b.n	c2d4 <_strtol_r+0x40>
    c2ca:	9000      	str	r0, [sp, #0]
    c2cc:	2c2b      	cmp	r4, #43	; 0x2b
    c2ce:	d101      	bne.n	c2d4 <_strtol_r+0x40>
    c2d0:	785c      	ldrb	r4, [r3, #1]
    c2d2:	1c9d      	adds	r5, r3, #2
    c2d4:	2e00      	cmp	r6, #0
    c2d6:	d002      	beq.n	c2de <_strtol_r+0x4a>
    c2d8:	2e10      	cmp	r6, #16
    c2da:	d10a      	bne.n	c2f2 <_strtol_r+0x5e>
    c2dc:	e060      	b.n	c3a0 <_strtol_r+0x10c>
    c2de:	2c30      	cmp	r4, #48	; 0x30
    c2e0:	d15c      	bne.n	c39c <_strtol_r+0x108>
    c2e2:	2220      	movs	r2, #32
    c2e4:	782b      	ldrb	r3, [r5, #0]
    c2e6:	4393      	bics	r3, r2
    c2e8:	2b58      	cmp	r3, #88	; 0x58
    c2ea:	d152      	bne.n	c392 <_strtol_r+0xfe>
    c2ec:	2610      	movs	r6, #16
    c2ee:	786c      	ldrb	r4, [r5, #1]
    c2f0:	3502      	adds	r5, #2
    c2f2:	9f00      	ldr	r7, [sp, #0]
    c2f4:	1c31      	adds	r1, r6, #0
    c2f6:	1e7b      	subs	r3, r7, #1
    c2f8:	419f      	sbcs	r7, r3
    c2fa:	4b2d      	ldr	r3, [pc, #180]	; (c3b0 <_strtol_r+0x11c>)
    c2fc:	18ff      	adds	r7, r7, r3
    c2fe:	1c38      	adds	r0, r7, #0
    c300:	f7fa fa46 	bl	6790 <__aeabi_uidivmod>
    c304:	1c38      	adds	r0, r7, #0
    c306:	9104      	str	r1, [sp, #16]
    c308:	1c31      	adds	r1, r6, #0
    c30a:	f7fa f9bb 	bl	6684 <__aeabi_uidiv>
    c30e:	2200      	movs	r2, #0
    c310:	1c07      	adds	r7, r0, #0
    c312:	1c13      	adds	r3, r2, #0
    c314:	9902      	ldr	r1, [sp, #8]
    c316:	1909      	adds	r1, r1, r4
    c318:	7849      	ldrb	r1, [r1, #1]
    c31a:	0748      	lsls	r0, r1, #29
    c31c:	d501      	bpl.n	c322 <_strtol_r+0x8e>
    c31e:	3c30      	subs	r4, #48	; 0x30
    c320:	e007      	b.n	c332 <_strtol_r+0x9e>
    c322:	2003      	movs	r0, #3
    c324:	4008      	ands	r0, r1
    c326:	d017      	beq.n	c358 <_strtol_r+0xc4>
    c328:	2137      	movs	r1, #55	; 0x37
    c32a:	2801      	cmp	r0, #1
    c32c:	d000      	beq.n	c330 <_strtol_r+0x9c>
    c32e:	3120      	adds	r1, #32
    c330:	1a64      	subs	r4, r4, r1
    c332:	42b4      	cmp	r4, r6
    c334:	da10      	bge.n	c358 <_strtol_r+0xc4>
    c336:	1c51      	adds	r1, r2, #1
    c338:	d00b      	beq.n	c352 <_strtol_r+0xbe>
    c33a:	42bb      	cmp	r3, r7
    c33c:	d807      	bhi.n	c34e <_strtol_r+0xba>
    c33e:	d102      	bne.n	c346 <_strtol_r+0xb2>
    c340:	9a04      	ldr	r2, [sp, #16]
    c342:	4294      	cmp	r4, r2
    c344:	dc03      	bgt.n	c34e <_strtol_r+0xba>
    c346:	4373      	muls	r3, r6
    c348:	2201      	movs	r2, #1
    c34a:	18e3      	adds	r3, r4, r3
    c34c:	e001      	b.n	c352 <_strtol_r+0xbe>
    c34e:	2201      	movs	r2, #1
    c350:	4252      	negs	r2, r2
    c352:	782c      	ldrb	r4, [r5, #0]
    c354:	3501      	adds	r5, #1
    c356:	e7dd      	b.n	c314 <_strtol_r+0x80>
    c358:	1c18      	adds	r0, r3, #0
    c35a:	1c51      	adds	r1, r2, #1
    c35c:	d10b      	bne.n	c376 <_strtol_r+0xe2>
    c35e:	9800      	ldr	r0, [sp, #0]
    c360:	9a05      	ldr	r2, [sp, #20]
    c362:	1e43      	subs	r3, r0, #1
    c364:	4198      	sbcs	r0, r3
    c366:	4b12      	ldr	r3, [pc, #72]	; (c3b0 <_strtol_r+0x11c>)
    c368:	18c0      	adds	r0, r0, r3
    c36a:	2322      	movs	r3, #34	; 0x22
    c36c:	6013      	str	r3, [r2, #0]
    c36e:	9b01      	ldr	r3, [sp, #4]
    c370:	2b00      	cmp	r3, #0
    c372:	d10a      	bne.n	c38a <_strtol_r+0xf6>
    c374:	e017      	b.n	c3a6 <_strtol_r+0x112>
    c376:	9900      	ldr	r1, [sp, #0]
    c378:	2900      	cmp	r1, #0
    c37a:	d000      	beq.n	c37e <_strtol_r+0xea>
    c37c:	4258      	negs	r0, r3
    c37e:	9b01      	ldr	r3, [sp, #4]
    c380:	2b00      	cmp	r3, #0
    c382:	d010      	beq.n	c3a6 <_strtol_r+0x112>
    c384:	9b03      	ldr	r3, [sp, #12]
    c386:	2a00      	cmp	r2, #0
    c388:	d000      	beq.n	c38c <_strtol_r+0xf8>
    c38a:	1e6b      	subs	r3, r5, #1
    c38c:	9a01      	ldr	r2, [sp, #4]
    c38e:	6013      	str	r3, [r2, #0]
    c390:	e009      	b.n	c3a6 <_strtol_r+0x112>
    c392:	2430      	movs	r4, #48	; 0x30
    c394:	2e00      	cmp	r6, #0
    c396:	d1ac      	bne.n	c2f2 <_strtol_r+0x5e>
    c398:	2608      	movs	r6, #8
    c39a:	e7aa      	b.n	c2f2 <_strtol_r+0x5e>
    c39c:	260a      	movs	r6, #10
    c39e:	e7a8      	b.n	c2f2 <_strtol_r+0x5e>
    c3a0:	2c30      	cmp	r4, #48	; 0x30
    c3a2:	d1a6      	bne.n	c2f2 <_strtol_r+0x5e>
    c3a4:	e79d      	b.n	c2e2 <_strtol_r+0x4e>
    c3a6:	b007      	add	sp, #28
    c3a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c3aa:	46c0      	nop			; (mov r8, r8)
    c3ac:	20000138 	.word	0x20000138
    c3b0:	7fffffff 	.word	0x7fffffff

0000c3b4 <_strtoul_r>:
    c3b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    c3b6:	1c1e      	adds	r6, r3, #0
    c3b8:	4b3e      	ldr	r3, [pc, #248]	; (c4b4 <_strtoul_r+0x100>)
    c3ba:	b087      	sub	sp, #28
    c3bc:	681b      	ldr	r3, [r3, #0]
    c3be:	1c17      	adds	r7, r2, #0
    c3c0:	9302      	str	r3, [sp, #8]
    c3c2:	1c0b      	adds	r3, r1, #0
    c3c4:	9005      	str	r0, [sp, #20]
    c3c6:	9104      	str	r1, [sp, #16]
    c3c8:	781c      	ldrb	r4, [r3, #0]
    c3ca:	9a02      	ldr	r2, [sp, #8]
    c3cc:	1c5d      	adds	r5, r3, #1
    c3ce:	1912      	adds	r2, r2, r4
    c3d0:	7851      	ldrb	r1, [r2, #1]
    c3d2:	2208      	movs	r2, #8
    c3d4:	400a      	ands	r2, r1
    c3d6:	d001      	beq.n	c3dc <_strtoul_r+0x28>
    c3d8:	1c2b      	adds	r3, r5, #0
    c3da:	e7f5      	b.n	c3c8 <_strtoul_r+0x14>
    c3dc:	2c2d      	cmp	r4, #45	; 0x2d
    c3de:	d104      	bne.n	c3ea <_strtoul_r+0x36>
    c3e0:	1c9d      	adds	r5, r3, #2
    c3e2:	785c      	ldrb	r4, [r3, #1]
    c3e4:	2301      	movs	r3, #1
    c3e6:	9301      	str	r3, [sp, #4]
    c3e8:	e004      	b.n	c3f4 <_strtoul_r+0x40>
    c3ea:	9201      	str	r2, [sp, #4]
    c3ec:	2c2b      	cmp	r4, #43	; 0x2b
    c3ee:	d101      	bne.n	c3f4 <_strtoul_r+0x40>
    c3f0:	785c      	ldrb	r4, [r3, #1]
    c3f2:	1c9d      	adds	r5, r3, #2
    c3f4:	2e00      	cmp	r6, #0
    c3f6:	d002      	beq.n	c3fe <_strtoul_r+0x4a>
    c3f8:	2e10      	cmp	r6, #16
    c3fa:	d10a      	bne.n	c412 <_strtoul_r+0x5e>
    c3fc:	e054      	b.n	c4a8 <_strtoul_r+0xf4>
    c3fe:	2c30      	cmp	r4, #48	; 0x30
    c400:	d150      	bne.n	c4a4 <_strtoul_r+0xf0>
    c402:	2220      	movs	r2, #32
    c404:	782b      	ldrb	r3, [r5, #0]
    c406:	4393      	bics	r3, r2
    c408:	2b58      	cmp	r3, #88	; 0x58
    c40a:	d146      	bne.n	c49a <_strtoul_r+0xe6>
    c40c:	2610      	movs	r6, #16
    c40e:	786c      	ldrb	r4, [r5, #1]
    c410:	3502      	adds	r5, #2
    c412:	2001      	movs	r0, #1
    c414:	1c31      	adds	r1, r6, #0
    c416:	4240      	negs	r0, r0
    c418:	f7fa f934 	bl	6684 <__aeabi_uidiv>
    c41c:	9003      	str	r0, [sp, #12]
    c41e:	2001      	movs	r0, #1
    c420:	1c31      	adds	r1, r6, #0
    c422:	4240      	negs	r0, r0
    c424:	f7fa f9b4 	bl	6790 <__aeabi_uidivmod>
    c428:	2200      	movs	r2, #0
    c42a:	468c      	mov	ip, r1
    c42c:	1c13      	adds	r3, r2, #0
    c42e:	9902      	ldr	r1, [sp, #8]
    c430:	1909      	adds	r1, r1, r4
    c432:	7849      	ldrb	r1, [r1, #1]
    c434:	0748      	lsls	r0, r1, #29
    c436:	d501      	bpl.n	c43c <_strtoul_r+0x88>
    c438:	3c30      	subs	r4, #48	; 0x30
    c43a:	e007      	b.n	c44c <_strtoul_r+0x98>
    c43c:	2003      	movs	r0, #3
    c43e:	4008      	ands	r0, r1
    c440:	d017      	beq.n	c472 <_strtoul_r+0xbe>
    c442:	2137      	movs	r1, #55	; 0x37
    c444:	2801      	cmp	r0, #1
    c446:	d000      	beq.n	c44a <_strtoul_r+0x96>
    c448:	3120      	adds	r1, #32
    c44a:	1a64      	subs	r4, r4, r1
    c44c:	42b4      	cmp	r4, r6
    c44e:	da10      	bge.n	c472 <_strtoul_r+0xbe>
    c450:	1c51      	adds	r1, r2, #1
    c452:	d00b      	beq.n	c46c <_strtoul_r+0xb8>
    c454:	9a03      	ldr	r2, [sp, #12]
    c456:	4293      	cmp	r3, r2
    c458:	d806      	bhi.n	c468 <_strtoul_r+0xb4>
    c45a:	d101      	bne.n	c460 <_strtoul_r+0xac>
    c45c:	4564      	cmp	r4, ip
    c45e:	dc03      	bgt.n	c468 <_strtoul_r+0xb4>
    c460:	4373      	muls	r3, r6
    c462:	2201      	movs	r2, #1
    c464:	18e3      	adds	r3, r4, r3
    c466:	e001      	b.n	c46c <_strtoul_r+0xb8>
    c468:	2201      	movs	r2, #1
    c46a:	4252      	negs	r2, r2
    c46c:	782c      	ldrb	r4, [r5, #0]
    c46e:	3501      	adds	r5, #1
    c470:	e7dd      	b.n	c42e <_strtoul_r+0x7a>
    c472:	1c18      	adds	r0, r3, #0
    c474:	1c51      	adds	r1, r2, #1
    c476:	d104      	bne.n	c482 <_strtoul_r+0xce>
    c478:	2322      	movs	r3, #34	; 0x22
    c47a:	9905      	ldr	r1, [sp, #20]
    c47c:	1c10      	adds	r0, r2, #0
    c47e:	600b      	str	r3, [r1, #0]
    c480:	e003      	b.n	c48a <_strtoul_r+0xd6>
    c482:	9901      	ldr	r1, [sp, #4]
    c484:	2900      	cmp	r1, #0
    c486:	d000      	beq.n	c48a <_strtoul_r+0xd6>
    c488:	4258      	negs	r0, r3
    c48a:	2f00      	cmp	r7, #0
    c48c:	d00f      	beq.n	c4ae <_strtoul_r+0xfa>
    c48e:	9b04      	ldr	r3, [sp, #16]
    c490:	2a00      	cmp	r2, #0
    c492:	d000      	beq.n	c496 <_strtoul_r+0xe2>
    c494:	1e6b      	subs	r3, r5, #1
    c496:	603b      	str	r3, [r7, #0]
    c498:	e009      	b.n	c4ae <_strtoul_r+0xfa>
    c49a:	2430      	movs	r4, #48	; 0x30
    c49c:	2e00      	cmp	r6, #0
    c49e:	d1b8      	bne.n	c412 <_strtoul_r+0x5e>
    c4a0:	2608      	movs	r6, #8
    c4a2:	e7b6      	b.n	c412 <_strtoul_r+0x5e>
    c4a4:	260a      	movs	r6, #10
    c4a6:	e7b4      	b.n	c412 <_strtoul_r+0x5e>
    c4a8:	2c30      	cmp	r4, #48	; 0x30
    c4aa:	d1b2      	bne.n	c412 <_strtoul_r+0x5e>
    c4ac:	e7a9      	b.n	c402 <_strtoul_r+0x4e>
    c4ae:	b007      	add	sp, #28
    c4b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c4b2:	46c0      	nop			; (mov r8, r8)
    c4b4:	20000138 	.word	0x20000138

0000c4b8 <__submore>:
    c4b8:	1c0b      	adds	r3, r1, #0
    c4ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    c4bc:	6b4d      	ldr	r5, [r1, #52]	; 0x34
    c4be:	3344      	adds	r3, #68	; 0x44
    c4c0:	1c0c      	adds	r4, r1, #0
    c4c2:	429d      	cmp	r5, r3
    c4c4:	d11b      	bne.n	c4fe <__submore+0x46>
    c4c6:	2680      	movs	r6, #128	; 0x80
    c4c8:	00f6      	lsls	r6, r6, #3
    c4ca:	1c31      	adds	r1, r6, #0
    c4cc:	f7fd fd42 	bl	9f54 <_malloc_r>
    c4d0:	2800      	cmp	r0, #0
    c4d2:	d102      	bne.n	c4da <__submore+0x22>
    c4d4:	2001      	movs	r0, #1
    c4d6:	4240      	negs	r0, r0
    c4d8:	e025      	b.n	c526 <__submore+0x6e>
    c4da:	1c23      	adds	r3, r4, #0
    c4dc:	6360      	str	r0, [r4, #52]	; 0x34
    c4de:	63a6      	str	r6, [r4, #56]	; 0x38
    c4e0:	3346      	adds	r3, #70	; 0x46
    c4e2:	781a      	ldrb	r2, [r3, #0]
    c4e4:	4b10      	ldr	r3, [pc, #64]	; (c528 <__submore+0x70>)
    c4e6:	54c2      	strb	r2, [r0, r3]
    c4e8:	1c23      	adds	r3, r4, #0
    c4ea:	3345      	adds	r3, #69	; 0x45
    c4ec:	781a      	ldrb	r2, [r3, #0]
    c4ee:	4b0f      	ldr	r3, [pc, #60]	; (c52c <__submore+0x74>)
    c4f0:	54c2      	strb	r2, [r0, r3]
    c4f2:	782a      	ldrb	r2, [r5, #0]
    c4f4:	4b0e      	ldr	r3, [pc, #56]	; (c530 <__submore+0x78>)
    c4f6:	54c2      	strb	r2, [r0, r3]
    c4f8:	18c0      	adds	r0, r0, r3
    c4fa:	6020      	str	r0, [r4, #0]
    c4fc:	e012      	b.n	c524 <__submore+0x6c>
    c4fe:	6b8e      	ldr	r6, [r1, #56]	; 0x38
    c500:	1c29      	adds	r1, r5, #0
    c502:	0073      	lsls	r3, r6, #1
    c504:	1c1a      	adds	r2, r3, #0
    c506:	9301      	str	r3, [sp, #4]
    c508:	f001 ff3f 	bl	e38a <_realloc_r>
    c50c:	1e05      	subs	r5, r0, #0
    c50e:	d0e1      	beq.n	c4d4 <__submore+0x1c>
    c510:	1987      	adds	r7, r0, r6
    c512:	1c38      	adds	r0, r7, #0
    c514:	1c29      	adds	r1, r5, #0
    c516:	1c32      	adds	r2, r6, #0
    c518:	f7fd fcc5 	bl	9ea6 <memcpy>
    c51c:	9b01      	ldr	r3, [sp, #4]
    c51e:	6027      	str	r7, [r4, #0]
    c520:	6365      	str	r5, [r4, #52]	; 0x34
    c522:	63a3      	str	r3, [r4, #56]	; 0x38
    c524:	2000      	movs	r0, #0
    c526:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    c528:	000003ff 	.word	0x000003ff
    c52c:	000003fe 	.word	0x000003fe
    c530:	000003fd 	.word	0x000003fd

0000c534 <__swbuf_r>:
    c534:	b570      	push	{r4, r5, r6, lr}
    c536:	1c05      	adds	r5, r0, #0
    c538:	1c0e      	adds	r6, r1, #0
    c53a:	1c14      	adds	r4, r2, #0
    c53c:	2800      	cmp	r0, #0
    c53e:	d004      	beq.n	c54a <__swbuf_r+0x16>
    c540:	6983      	ldr	r3, [r0, #24]
    c542:	2b00      	cmp	r3, #0
    c544:	d101      	bne.n	c54a <__swbuf_r+0x16>
    c546:	f7fd fa65 	bl	9a14 <__sinit>
    c54a:	4b23      	ldr	r3, [pc, #140]	; (c5d8 <__swbuf_r+0xa4>)
    c54c:	429c      	cmp	r4, r3
    c54e:	d101      	bne.n	c554 <__swbuf_r+0x20>
    c550:	686c      	ldr	r4, [r5, #4]
    c552:	e008      	b.n	c566 <__swbuf_r+0x32>
    c554:	4b21      	ldr	r3, [pc, #132]	; (c5dc <__swbuf_r+0xa8>)
    c556:	429c      	cmp	r4, r3
    c558:	d101      	bne.n	c55e <__swbuf_r+0x2a>
    c55a:	68ac      	ldr	r4, [r5, #8]
    c55c:	e003      	b.n	c566 <__swbuf_r+0x32>
    c55e:	4b20      	ldr	r3, [pc, #128]	; (c5e0 <__swbuf_r+0xac>)
    c560:	429c      	cmp	r4, r3
    c562:	d100      	bne.n	c566 <__swbuf_r+0x32>
    c564:	68ec      	ldr	r4, [r5, #12]
    c566:	69a3      	ldr	r3, [r4, #24]
    c568:	60a3      	str	r3, [r4, #8]
    c56a:	89a3      	ldrh	r3, [r4, #12]
    c56c:	071b      	lsls	r3, r3, #28
    c56e:	d50a      	bpl.n	c586 <__swbuf_r+0x52>
    c570:	6923      	ldr	r3, [r4, #16]
    c572:	2b00      	cmp	r3, #0
    c574:	d007      	beq.n	c586 <__swbuf_r+0x52>
    c576:	6823      	ldr	r3, [r4, #0]
    c578:	6922      	ldr	r2, [r4, #16]
    c57a:	b2f6      	uxtb	r6, r6
    c57c:	1a98      	subs	r0, r3, r2
    c57e:	6963      	ldr	r3, [r4, #20]
    c580:	4298      	cmp	r0, r3
    c582:	db0f      	blt.n	c5a4 <__swbuf_r+0x70>
    c584:	e008      	b.n	c598 <__swbuf_r+0x64>
    c586:	1c28      	adds	r0, r5, #0
    c588:	1c21      	adds	r1, r4, #0
    c58a:	f000 f83f 	bl	c60c <__swsetup_r>
    c58e:	2800      	cmp	r0, #0
    c590:	d0f1      	beq.n	c576 <__swbuf_r+0x42>
    c592:	2001      	movs	r0, #1
    c594:	4240      	negs	r0, r0
    c596:	e01d      	b.n	c5d4 <__swbuf_r+0xa0>
    c598:	1c28      	adds	r0, r5, #0
    c59a:	1c21      	adds	r1, r4, #0
    c59c:	f7fd f9b8 	bl	9910 <_fflush_r>
    c5a0:	2800      	cmp	r0, #0
    c5a2:	d1f6      	bne.n	c592 <__swbuf_r+0x5e>
    c5a4:	68a3      	ldr	r3, [r4, #8]
    c5a6:	3001      	adds	r0, #1
    c5a8:	3b01      	subs	r3, #1
    c5aa:	60a3      	str	r3, [r4, #8]
    c5ac:	6823      	ldr	r3, [r4, #0]
    c5ae:	1c5a      	adds	r2, r3, #1
    c5b0:	6022      	str	r2, [r4, #0]
    c5b2:	701e      	strb	r6, [r3, #0]
    c5b4:	6963      	ldr	r3, [r4, #20]
    c5b6:	4298      	cmp	r0, r3
    c5b8:	d005      	beq.n	c5c6 <__swbuf_r+0x92>
    c5ba:	89a3      	ldrh	r3, [r4, #12]
    c5bc:	1c30      	adds	r0, r6, #0
    c5be:	07db      	lsls	r3, r3, #31
    c5c0:	d508      	bpl.n	c5d4 <__swbuf_r+0xa0>
    c5c2:	2e0a      	cmp	r6, #10
    c5c4:	d106      	bne.n	c5d4 <__swbuf_r+0xa0>
    c5c6:	1c28      	adds	r0, r5, #0
    c5c8:	1c21      	adds	r1, r4, #0
    c5ca:	f7fd f9a1 	bl	9910 <_fflush_r>
    c5ce:	2800      	cmp	r0, #0
    c5d0:	d1df      	bne.n	c592 <__swbuf_r+0x5e>
    c5d2:	1c30      	adds	r0, r6, #0
    c5d4:	bd70      	pop	{r4, r5, r6, pc}
    c5d6:	46c0      	nop			; (mov r8, r8)
    c5d8:	0000f9e8 	.word	0x0000f9e8
    c5dc:	0000fa08 	.word	0x0000fa08
    c5e0:	0000fa28 	.word	0x0000fa28

0000c5e4 <_write_r>:
    c5e4:	b538      	push	{r3, r4, r5, lr}
    c5e6:	1c05      	adds	r5, r0, #0
    c5e8:	2000      	movs	r0, #0
    c5ea:	4c07      	ldr	r4, [pc, #28]	; (c608 <_write_r+0x24>)
    c5ec:	6020      	str	r0, [r4, #0]
    c5ee:	1c08      	adds	r0, r1, #0
    c5f0:	1c11      	adds	r1, r2, #0
    c5f2:	1c1a      	adds	r2, r3, #0
    c5f4:	f7f7 fc3c 	bl	3e70 <_write>
    c5f8:	1c43      	adds	r3, r0, #1
    c5fa:	d103      	bne.n	c604 <_write_r+0x20>
    c5fc:	6823      	ldr	r3, [r4, #0]
    c5fe:	2b00      	cmp	r3, #0
    c600:	d000      	beq.n	c604 <_write_r+0x20>
    c602:	602b      	str	r3, [r5, #0]
    c604:	bd38      	pop	{r3, r4, r5, pc}
    c606:	46c0      	nop			; (mov r8, r8)
    c608:	200047c8 	.word	0x200047c8

0000c60c <__swsetup_r>:
    c60c:	4b35      	ldr	r3, [pc, #212]	; (c6e4 <__swsetup_r+0xd8>)
    c60e:	b570      	push	{r4, r5, r6, lr}
    c610:	681d      	ldr	r5, [r3, #0]
    c612:	1c06      	adds	r6, r0, #0
    c614:	1c0c      	adds	r4, r1, #0
    c616:	2d00      	cmp	r5, #0
    c618:	d005      	beq.n	c626 <__swsetup_r+0x1a>
    c61a:	69ab      	ldr	r3, [r5, #24]
    c61c:	2b00      	cmp	r3, #0
    c61e:	d102      	bne.n	c626 <__swsetup_r+0x1a>
    c620:	1c28      	adds	r0, r5, #0
    c622:	f7fd f9f7 	bl	9a14 <__sinit>
    c626:	4b30      	ldr	r3, [pc, #192]	; (c6e8 <__swsetup_r+0xdc>)
    c628:	429c      	cmp	r4, r3
    c62a:	d101      	bne.n	c630 <__swsetup_r+0x24>
    c62c:	686c      	ldr	r4, [r5, #4]
    c62e:	e008      	b.n	c642 <__swsetup_r+0x36>
    c630:	4b2e      	ldr	r3, [pc, #184]	; (c6ec <__swsetup_r+0xe0>)
    c632:	429c      	cmp	r4, r3
    c634:	d101      	bne.n	c63a <__swsetup_r+0x2e>
    c636:	68ac      	ldr	r4, [r5, #8]
    c638:	e003      	b.n	c642 <__swsetup_r+0x36>
    c63a:	4b2d      	ldr	r3, [pc, #180]	; (c6f0 <__swsetup_r+0xe4>)
    c63c:	429c      	cmp	r4, r3
    c63e:	d100      	bne.n	c642 <__swsetup_r+0x36>
    c640:	68ec      	ldr	r4, [r5, #12]
    c642:	89a3      	ldrh	r3, [r4, #12]
    c644:	b29a      	uxth	r2, r3
    c646:	0711      	lsls	r1, r2, #28
    c648:	d423      	bmi.n	c692 <__swsetup_r+0x86>
    c64a:	06d1      	lsls	r1, r2, #27
    c64c:	d407      	bmi.n	c65e <__swsetup_r+0x52>
    c64e:	2209      	movs	r2, #9
    c650:	2001      	movs	r0, #1
    c652:	6032      	str	r2, [r6, #0]
    c654:	3237      	adds	r2, #55	; 0x37
    c656:	4313      	orrs	r3, r2
    c658:	81a3      	strh	r3, [r4, #12]
    c65a:	4240      	negs	r0, r0
    c65c:	e040      	b.n	c6e0 <__swsetup_r+0xd4>
    c65e:	0753      	lsls	r3, r2, #29
    c660:	d513      	bpl.n	c68a <__swsetup_r+0x7e>
    c662:	6b61      	ldr	r1, [r4, #52]	; 0x34
    c664:	2900      	cmp	r1, #0
    c666:	d008      	beq.n	c67a <__swsetup_r+0x6e>
    c668:	1c23      	adds	r3, r4, #0
    c66a:	3344      	adds	r3, #68	; 0x44
    c66c:	4299      	cmp	r1, r3
    c66e:	d002      	beq.n	c676 <__swsetup_r+0x6a>
    c670:	1c30      	adds	r0, r6, #0
    c672:	f7fd fc29 	bl	9ec8 <_free_r>
    c676:	2300      	movs	r3, #0
    c678:	6363      	str	r3, [r4, #52]	; 0x34
    c67a:	2224      	movs	r2, #36	; 0x24
    c67c:	89a3      	ldrh	r3, [r4, #12]
    c67e:	4393      	bics	r3, r2
    c680:	81a3      	strh	r3, [r4, #12]
    c682:	2300      	movs	r3, #0
    c684:	6063      	str	r3, [r4, #4]
    c686:	6923      	ldr	r3, [r4, #16]
    c688:	6023      	str	r3, [r4, #0]
    c68a:	2208      	movs	r2, #8
    c68c:	89a3      	ldrh	r3, [r4, #12]
    c68e:	4313      	orrs	r3, r2
    c690:	81a3      	strh	r3, [r4, #12]
    c692:	6923      	ldr	r3, [r4, #16]
    c694:	2b00      	cmp	r3, #0
    c696:	d10b      	bne.n	c6b0 <__swsetup_r+0xa4>
    c698:	23a0      	movs	r3, #160	; 0xa0
    c69a:	89a2      	ldrh	r2, [r4, #12]
    c69c:	009b      	lsls	r3, r3, #2
    c69e:	4013      	ands	r3, r2
    c6a0:	2280      	movs	r2, #128	; 0x80
    c6a2:	0092      	lsls	r2, r2, #2
    c6a4:	4293      	cmp	r3, r2
    c6a6:	d003      	beq.n	c6b0 <__swsetup_r+0xa4>
    c6a8:	1c30      	adds	r0, r6, #0
    c6aa:	1c21      	adds	r1, r4, #0
    c6ac:	f7fd fb84 	bl	9db8 <__smakebuf_r>
    c6b0:	2301      	movs	r3, #1
    c6b2:	89a2      	ldrh	r2, [r4, #12]
    c6b4:	4013      	ands	r3, r2
    c6b6:	d005      	beq.n	c6c4 <__swsetup_r+0xb8>
    c6b8:	2300      	movs	r3, #0
    c6ba:	60a3      	str	r3, [r4, #8]
    c6bc:	6963      	ldr	r3, [r4, #20]
    c6be:	425b      	negs	r3, r3
    c6c0:	61a3      	str	r3, [r4, #24]
    c6c2:	e003      	b.n	c6cc <__swsetup_r+0xc0>
    c6c4:	0791      	lsls	r1, r2, #30
    c6c6:	d400      	bmi.n	c6ca <__swsetup_r+0xbe>
    c6c8:	6963      	ldr	r3, [r4, #20]
    c6ca:	60a3      	str	r3, [r4, #8]
    c6cc:	2000      	movs	r0, #0
    c6ce:	6923      	ldr	r3, [r4, #16]
    c6d0:	4283      	cmp	r3, r0
    c6d2:	d105      	bne.n	c6e0 <__swsetup_r+0xd4>
    c6d4:	0613      	lsls	r3, r2, #24
    c6d6:	d503      	bpl.n	c6e0 <__swsetup_r+0xd4>
    c6d8:	2340      	movs	r3, #64	; 0x40
    c6da:	431a      	orrs	r2, r3
    c6dc:	81a2      	strh	r2, [r4, #12]
    c6de:	3801      	subs	r0, #1
    c6e0:	bd70      	pop	{r4, r5, r6, pc}
    c6e2:	46c0      	nop			; (mov r8, r8)
    c6e4:	20000134 	.word	0x20000134
    c6e8:	0000f9e8 	.word	0x0000f9e8
    c6ec:	0000fa08 	.word	0x0000fa08
    c6f0:	0000fa28 	.word	0x0000fa28

0000c6f4 <_close_r>:
    c6f4:	b538      	push	{r3, r4, r5, lr}
    c6f6:	2300      	movs	r3, #0
    c6f8:	4c06      	ldr	r4, [pc, #24]	; (c714 <_close_r+0x20>)
    c6fa:	1c05      	adds	r5, r0, #0
    c6fc:	1c08      	adds	r0, r1, #0
    c6fe:	6023      	str	r3, [r4, #0]
    c700:	f7f7 fba0 	bl	3e44 <_close>
    c704:	1c43      	adds	r3, r0, #1
    c706:	d103      	bne.n	c710 <_close_r+0x1c>
    c708:	6823      	ldr	r3, [r4, #0]
    c70a:	2b00      	cmp	r3, #0
    c70c:	d000      	beq.n	c710 <_close_r+0x1c>
    c70e:	602b      	str	r3, [r5, #0]
    c710:	bd38      	pop	{r3, r4, r5, pc}
    c712:	46c0      	nop			; (mov r8, r8)
    c714:	200047c8 	.word	0x200047c8

0000c718 <quorem>:
    c718:	b5f0      	push	{r4, r5, r6, r7, lr}
    c71a:	6903      	ldr	r3, [r0, #16]
    c71c:	690c      	ldr	r4, [r1, #16]
    c71e:	b089      	sub	sp, #36	; 0x24
    c720:	2600      	movs	r6, #0
    c722:	42a3      	cmp	r3, r4
    c724:	db7c      	blt.n	c820 <quorem+0x108>
    c726:	1c0b      	adds	r3, r1, #0
    c728:	3c01      	subs	r4, #1
    c72a:	3314      	adds	r3, #20
    c72c:	00a5      	lsls	r5, r4, #2
    c72e:	9303      	str	r3, [sp, #12]
    c730:	195b      	adds	r3, r3, r5
    c732:	9304      	str	r3, [sp, #16]
    c734:	1c03      	adds	r3, r0, #0
    c736:	3314      	adds	r3, #20
    c738:	9301      	str	r3, [sp, #4]
    c73a:	195d      	adds	r5, r3, r5
    c73c:	9b04      	ldr	r3, [sp, #16]
    c73e:	9107      	str	r1, [sp, #28]
    c740:	681b      	ldr	r3, [r3, #0]
    c742:	9002      	str	r0, [sp, #8]
    c744:	1c59      	adds	r1, r3, #1
    c746:	6828      	ldr	r0, [r5, #0]
    c748:	9305      	str	r3, [sp, #20]
    c74a:	f7f9 ff9b 	bl	6684 <__aeabi_uidiv>
    c74e:	1e07      	subs	r7, r0, #0
    c750:	42b7      	cmp	r7, r6
    c752:	d035      	beq.n	c7c0 <quorem+0xa8>
    c754:	9b03      	ldr	r3, [sp, #12]
    c756:	9801      	ldr	r0, [sp, #4]
    c758:	469c      	mov	ip, r3
    c75a:	9605      	str	r6, [sp, #20]
    c75c:	4663      	mov	r3, ip
    c75e:	cb04      	ldmia	r3!, {r2}
    c760:	b291      	uxth	r1, r2
    c762:	4379      	muls	r1, r7
    c764:	0c12      	lsrs	r2, r2, #16
    c766:	437a      	muls	r2, r7
    c768:	1871      	adds	r1, r6, r1
    c76a:	0c0e      	lsrs	r6, r1, #16
    c76c:	469c      	mov	ip, r3
    c76e:	18b3      	adds	r3, r6, r2
    c770:	9306      	str	r3, [sp, #24]
    c772:	8802      	ldrh	r2, [r0, #0]
    c774:	0c1e      	lsrs	r6, r3, #16
    c776:	9b05      	ldr	r3, [sp, #20]
    c778:	b289      	uxth	r1, r1
    c77a:	18d2      	adds	r2, r2, r3
    c77c:	6803      	ldr	r3, [r0, #0]
    c77e:	1a52      	subs	r2, r2, r1
    c780:	0c19      	lsrs	r1, r3, #16
    c782:	466b      	mov	r3, sp
    c784:	8b1b      	ldrh	r3, [r3, #24]
    c786:	1acb      	subs	r3, r1, r3
    c788:	1411      	asrs	r1, r2, #16
    c78a:	185b      	adds	r3, r3, r1
    c78c:	1419      	asrs	r1, r3, #16
    c78e:	b292      	uxth	r2, r2
    c790:	041b      	lsls	r3, r3, #16
    c792:	431a      	orrs	r2, r3
    c794:	9b04      	ldr	r3, [sp, #16]
    c796:	9105      	str	r1, [sp, #20]
    c798:	c004      	stmia	r0!, {r2}
    c79a:	4563      	cmp	r3, ip
    c79c:	d2de      	bcs.n	c75c <quorem+0x44>
    c79e:	682b      	ldr	r3, [r5, #0]
    c7a0:	2b00      	cmp	r3, #0
    c7a2:	d10d      	bne.n	c7c0 <quorem+0xa8>
    c7a4:	1c23      	adds	r3, r4, #0
    c7a6:	9a01      	ldr	r2, [sp, #4]
    c7a8:	3d04      	subs	r5, #4
    c7aa:	4295      	cmp	r5, r2
    c7ac:	d803      	bhi.n	c7b6 <quorem+0x9e>
    c7ae:	9a02      	ldr	r2, [sp, #8]
    c7b0:	1c1c      	adds	r4, r3, #0
    c7b2:	6113      	str	r3, [r2, #16]
    c7b4:	e004      	b.n	c7c0 <quorem+0xa8>
    c7b6:	682a      	ldr	r2, [r5, #0]
    c7b8:	2a00      	cmp	r2, #0
    c7ba:	d1f8      	bne.n	c7ae <quorem+0x96>
    c7bc:	3b01      	subs	r3, #1
    c7be:	e7f2      	b.n	c7a6 <quorem+0x8e>
    c7c0:	9802      	ldr	r0, [sp, #8]
    c7c2:	9907      	ldr	r1, [sp, #28]
    c7c4:	f001 fc22 	bl	e00c <__mcmp>
    c7c8:	2800      	cmp	r0, #0
    c7ca:	db28      	blt.n	c81e <quorem+0x106>
    c7cc:	2000      	movs	r0, #0
    c7ce:	9901      	ldr	r1, [sp, #4]
    c7d0:	9a03      	ldr	r2, [sp, #12]
    c7d2:	3701      	adds	r7, #1
    c7d4:	ca20      	ldmia	r2!, {r5}
    c7d6:	880b      	ldrh	r3, [r1, #0]
    c7d8:	1818      	adds	r0, r3, r0
    c7da:	b2ab      	uxth	r3, r5
    c7dc:	1ac3      	subs	r3, r0, r3
    c7de:	6808      	ldr	r0, [r1, #0]
    c7e0:	0c2d      	lsrs	r5, r5, #16
    c7e2:	0c00      	lsrs	r0, r0, #16
    c7e4:	1b45      	subs	r5, r0, r5
    c7e6:	141e      	asrs	r6, r3, #16
    c7e8:	19ad      	adds	r5, r5, r6
    c7ea:	1428      	asrs	r0, r5, #16
    c7ec:	b29b      	uxth	r3, r3
    c7ee:	042d      	lsls	r5, r5, #16
    c7f0:	432b      	orrs	r3, r5
    c7f2:	c108      	stmia	r1!, {r3}
    c7f4:	9b04      	ldr	r3, [sp, #16]
    c7f6:	4293      	cmp	r3, r2
    c7f8:	d2ec      	bcs.n	c7d4 <quorem+0xbc>
    c7fa:	9a01      	ldr	r2, [sp, #4]
    c7fc:	00a3      	lsls	r3, r4, #2
    c7fe:	18d3      	adds	r3, r2, r3
    c800:	681a      	ldr	r2, [r3, #0]
    c802:	2a00      	cmp	r2, #0
    c804:	d10b      	bne.n	c81e <quorem+0x106>
    c806:	9a01      	ldr	r2, [sp, #4]
    c808:	3b04      	subs	r3, #4
    c80a:	4293      	cmp	r3, r2
    c80c:	d802      	bhi.n	c814 <quorem+0xfc>
    c80e:	9b02      	ldr	r3, [sp, #8]
    c810:	611c      	str	r4, [r3, #16]
    c812:	e004      	b.n	c81e <quorem+0x106>
    c814:	681a      	ldr	r2, [r3, #0]
    c816:	2a00      	cmp	r2, #0
    c818:	d1f9      	bne.n	c80e <quorem+0xf6>
    c81a:	3c01      	subs	r4, #1
    c81c:	e7f3      	b.n	c806 <quorem+0xee>
    c81e:	1c3e      	adds	r6, r7, #0
    c820:	1c30      	adds	r0, r6, #0
    c822:	b009      	add	sp, #36	; 0x24
    c824:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0000c828 <_dtoa_r>:
    c828:	b5f0      	push	{r4, r5, r6, r7, lr}
    c82a:	1c16      	adds	r6, r2, #0
    c82c:	1c1f      	adds	r7, r3, #0
    c82e:	6a44      	ldr	r4, [r0, #36]	; 0x24
    c830:	b09b      	sub	sp, #108	; 0x6c
    c832:	9008      	str	r0, [sp, #32]
    c834:	9d23      	ldr	r5, [sp, #140]	; 0x8c
    c836:	9606      	str	r6, [sp, #24]
    c838:	9707      	str	r7, [sp, #28]
    c83a:	2c00      	cmp	r4, #0
    c83c:	d108      	bne.n	c850 <_dtoa_r+0x28>
    c83e:	2010      	movs	r0, #16
    c840:	f7fd fb12 	bl	9e68 <malloc>
    c844:	9b08      	ldr	r3, [sp, #32]
    c846:	6258      	str	r0, [r3, #36]	; 0x24
    c848:	6044      	str	r4, [r0, #4]
    c84a:	6084      	str	r4, [r0, #8]
    c84c:	6004      	str	r4, [r0, #0]
    c84e:	60c4      	str	r4, [r0, #12]
    c850:	9b08      	ldr	r3, [sp, #32]
    c852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c854:	6819      	ldr	r1, [r3, #0]
    c856:	2900      	cmp	r1, #0
    c858:	d00b      	beq.n	c872 <_dtoa_r+0x4a>
    c85a:	685a      	ldr	r2, [r3, #4]
    c85c:	2301      	movs	r3, #1
    c85e:	4093      	lsls	r3, r2
    c860:	604a      	str	r2, [r1, #4]
    c862:	608b      	str	r3, [r1, #8]
    c864:	9808      	ldr	r0, [sp, #32]
    c866:	f001 f9b7 	bl	dbd8 <_Bfree>
    c86a:	2200      	movs	r2, #0
    c86c:	9b08      	ldr	r3, [sp, #32]
    c86e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c870:	601a      	str	r2, [r3, #0]
    c872:	9b07      	ldr	r3, [sp, #28]
    c874:	2b00      	cmp	r3, #0
    c876:	da05      	bge.n	c884 <_dtoa_r+0x5c>
    c878:	2301      	movs	r3, #1
    c87a:	602b      	str	r3, [r5, #0]
    c87c:	007b      	lsls	r3, r7, #1
    c87e:	085b      	lsrs	r3, r3, #1
    c880:	9307      	str	r3, [sp, #28]
    c882:	e001      	b.n	c888 <_dtoa_r+0x60>
    c884:	2300      	movs	r3, #0
    c886:	602b      	str	r3, [r5, #0]
    c888:	9c07      	ldr	r4, [sp, #28]
    c88a:	4bc6      	ldr	r3, [pc, #792]	; (cba4 <_dtoa_r+0x37c>)
    c88c:	1c22      	adds	r2, r4, #0
    c88e:	9317      	str	r3, [sp, #92]	; 0x5c
    c890:	401a      	ands	r2, r3
    c892:	429a      	cmp	r2, r3
    c894:	d119      	bne.n	c8ca <_dtoa_r+0xa2>
    c896:	4bc4      	ldr	r3, [pc, #784]	; (cba8 <_dtoa_r+0x380>)
    c898:	9a22      	ldr	r2, [sp, #136]	; 0x88
    c89a:	6013      	str	r3, [r2, #0]
    c89c:	9a06      	ldr	r2, [sp, #24]
    c89e:	4bc3      	ldr	r3, [pc, #780]	; (cbac <_dtoa_r+0x384>)
    c8a0:	2a00      	cmp	r2, #0
    c8a2:	d102      	bne.n	c8aa <_dtoa_r+0x82>
    c8a4:	0324      	lsls	r4, r4, #12
    c8a6:	d100      	bne.n	c8aa <_dtoa_r+0x82>
    c8a8:	4bc1      	ldr	r3, [pc, #772]	; (cbb0 <_dtoa_r+0x388>)
    c8aa:	9a24      	ldr	r2, [sp, #144]	; 0x90
    c8ac:	1c18      	adds	r0, r3, #0
    c8ae:	2a00      	cmp	r2, #0
    c8b0:	d101      	bne.n	c8b6 <_dtoa_r+0x8e>
    c8b2:	f000 fdb6 	bl	d422 <_dtoa_r+0xbfa>
    c8b6:	78d9      	ldrb	r1, [r3, #3]
    c8b8:	1cda      	adds	r2, r3, #3
    c8ba:	2900      	cmp	r1, #0
    c8bc:	d000      	beq.n	c8c0 <_dtoa_r+0x98>
    c8be:	3205      	adds	r2, #5
    c8c0:	9924      	ldr	r1, [sp, #144]	; 0x90
    c8c2:	1c18      	adds	r0, r3, #0
    c8c4:	600a      	str	r2, [r1, #0]
    c8c6:	f000 fdac 	bl	d422 <_dtoa_r+0xbfa>
    c8ca:	9e06      	ldr	r6, [sp, #24]
    c8cc:	9f07      	ldr	r7, [sp, #28]
    c8ce:	2200      	movs	r2, #0
    c8d0:	1c30      	adds	r0, r6, #0
    c8d2:	1c39      	adds	r1, r7, #0
    c8d4:	2300      	movs	r3, #0
    c8d6:	f7fa f867 	bl	69a8 <__aeabi_dcmpeq>
    c8da:	1e05      	subs	r5, r0, #0
    c8dc:	d00e      	beq.n	c8fc <_dtoa_r+0xd4>
    c8de:	2301      	movs	r3, #1
    c8e0:	9a22      	ldr	r2, [sp, #136]	; 0x88
    c8e2:	6013      	str	r3, [r2, #0]
    c8e4:	4bb3      	ldr	r3, [pc, #716]	; (cbb4 <_dtoa_r+0x38c>)
    c8e6:	9a24      	ldr	r2, [sp, #144]	; 0x90
    c8e8:	1c18      	adds	r0, r3, #0
    c8ea:	2a00      	cmp	r2, #0
    c8ec:	d101      	bne.n	c8f2 <_dtoa_r+0xca>
    c8ee:	f000 fd98 	bl	d422 <_dtoa_r+0xbfa>
    c8f2:	4ab1      	ldr	r2, [pc, #708]	; (cbb8 <_dtoa_r+0x390>)
    c8f4:	9924      	ldr	r1, [sp, #144]	; 0x90
    c8f6:	600a      	str	r2, [r1, #0]
    c8f8:	f000 fd93 	bl	d422 <_dtoa_r+0xbfa>
    c8fc:	ab19      	add	r3, sp, #100	; 0x64
    c8fe:	9300      	str	r3, [sp, #0]
    c900:	ab18      	add	r3, sp, #96	; 0x60
    c902:	9301      	str	r3, [sp, #4]
    c904:	9808      	ldr	r0, [sp, #32]
    c906:	1c32      	adds	r2, r6, #0
    c908:	1c3b      	adds	r3, r7, #0
    c90a:	f001 fc7b 	bl	e204 <__d2b>
    c90e:	0061      	lsls	r1, r4, #1
    c910:	900a      	str	r0, [sp, #40]	; 0x28
    c912:	0d49      	lsrs	r1, r1, #21
    c914:	d009      	beq.n	c92a <_dtoa_r+0x102>
    c916:	0338      	lsls	r0, r7, #12
    c918:	4ca8      	ldr	r4, [pc, #672]	; (cbbc <_dtoa_r+0x394>)
    c91a:	0b00      	lsrs	r0, r0, #12
    c91c:	4304      	orrs	r4, r0
    c91e:	48a8      	ldr	r0, [pc, #672]	; (cbc0 <_dtoa_r+0x398>)
    c920:	1c32      	adds	r2, r6, #0
    c922:	1c23      	adds	r3, r4, #0
    c924:	180e      	adds	r6, r1, r0
    c926:	9516      	str	r5, [sp, #88]	; 0x58
    c928:	e01c      	b.n	c964 <_dtoa_r+0x13c>
    c92a:	9b18      	ldr	r3, [sp, #96]	; 0x60
    c92c:	9a19      	ldr	r2, [sp, #100]	; 0x64
    c92e:	189e      	adds	r6, r3, r2
    c930:	4ba4      	ldr	r3, [pc, #656]	; (cbc4 <_dtoa_r+0x39c>)
    c932:	429e      	cmp	r6, r3
    c934:	db09      	blt.n	c94a <_dtoa_r+0x122>
    c936:	4ba4      	ldr	r3, [pc, #656]	; (cbc8 <_dtoa_r+0x3a0>)
    c938:	18f0      	adds	r0, r6, r3
    c93a:	9b06      	ldr	r3, [sp, #24]
    c93c:	40c3      	lsrs	r3, r0
    c93e:	1c18      	adds	r0, r3, #0
    c940:	4ba2      	ldr	r3, [pc, #648]	; (cbcc <_dtoa_r+0x3a4>)
    c942:	1b9b      	subs	r3, r3, r6
    c944:	409c      	lsls	r4, r3
    c946:	4320      	orrs	r0, r4
    c948:	e004      	b.n	c954 <_dtoa_r+0x12c>
    c94a:	48a1      	ldr	r0, [pc, #644]	; (cbd0 <_dtoa_r+0x3a8>)
    c94c:	9b06      	ldr	r3, [sp, #24]
    c94e:	1b80      	subs	r0, r0, r6
    c950:	4083      	lsls	r3, r0
    c952:	1c18      	adds	r0, r3, #0
    c954:	f7fc fd92 	bl	947c <__aeabi_ui2d>
    c958:	4c9e      	ldr	r4, [pc, #632]	; (cbd4 <_dtoa_r+0x3ac>)
    c95a:	1c02      	adds	r2, r0, #0
    c95c:	190b      	adds	r3, r1, r4
    c95e:	2101      	movs	r1, #1
    c960:	3e01      	subs	r6, #1
    c962:	9116      	str	r1, [sp, #88]	; 0x58
    c964:	1c10      	adds	r0, r2, #0
    c966:	1c19      	adds	r1, r3, #0
    c968:	2200      	movs	r2, #0
    c96a:	4b9b      	ldr	r3, [pc, #620]	; (cbd8 <_dtoa_r+0x3b0>)
    c96c:	f7fc f99a 	bl	8ca4 <__aeabi_dsub>
    c970:	4a9a      	ldr	r2, [pc, #616]	; (cbdc <_dtoa_r+0x3b4>)
    c972:	4b9b      	ldr	r3, [pc, #620]	; (cbe0 <_dtoa_r+0x3b8>)
    c974:	f7fb fefc 	bl	8770 <__aeabi_dmul>
    c978:	4a9a      	ldr	r2, [pc, #616]	; (cbe4 <_dtoa_r+0x3bc>)
    c97a:	4b9b      	ldr	r3, [pc, #620]	; (cbe8 <_dtoa_r+0x3c0>)
    c97c:	f7fa ff92 	bl	78a4 <__aeabi_dadd>
    c980:	1c04      	adds	r4, r0, #0
    c982:	1c30      	adds	r0, r6, #0
    c984:	1c0d      	adds	r5, r1, #0
    c986:	f7fc fd3d 	bl	9404 <__aeabi_i2d>
    c98a:	4a98      	ldr	r2, [pc, #608]	; (cbec <_dtoa_r+0x3c4>)
    c98c:	4b98      	ldr	r3, [pc, #608]	; (cbf0 <_dtoa_r+0x3c8>)
    c98e:	f7fb feef 	bl	8770 <__aeabi_dmul>
    c992:	1c02      	adds	r2, r0, #0
    c994:	1c0b      	adds	r3, r1, #0
    c996:	1c20      	adds	r0, r4, #0
    c998:	1c29      	adds	r1, r5, #0
    c99a:	f7fa ff83 	bl	78a4 <__aeabi_dadd>
    c99e:	1c04      	adds	r4, r0, #0
    c9a0:	1c0d      	adds	r5, r1, #0
    c9a2:	f7fc fcf9 	bl	9398 <__aeabi_d2iz>
    c9a6:	1c29      	adds	r1, r5, #0
    c9a8:	9003      	str	r0, [sp, #12]
    c9aa:	2200      	movs	r2, #0
    c9ac:	1c20      	adds	r0, r4, #0
    c9ae:	2300      	movs	r3, #0
    c9b0:	f7fa f800 	bl	69b4 <__aeabi_dcmplt>
    c9b4:	2800      	cmp	r0, #0
    c9b6:	d00d      	beq.n	c9d4 <_dtoa_r+0x1ac>
    c9b8:	9803      	ldr	r0, [sp, #12]
    c9ba:	f7fc fd23 	bl	9404 <__aeabi_i2d>
    c9be:	1c02      	adds	r2, r0, #0
    c9c0:	1c0b      	adds	r3, r1, #0
    c9c2:	1c20      	adds	r0, r4, #0
    c9c4:	1c29      	adds	r1, r5, #0
    c9c6:	f7f9 ffef 	bl	69a8 <__aeabi_dcmpeq>
    c9ca:	4243      	negs	r3, r0
    c9cc:	4143      	adcs	r3, r0
    c9ce:	9a03      	ldr	r2, [sp, #12]
    c9d0:	1ad3      	subs	r3, r2, r3
    c9d2:	9303      	str	r3, [sp, #12]
    c9d4:	2301      	movs	r3, #1
    c9d6:	9313      	str	r3, [sp, #76]	; 0x4c
    c9d8:	9b03      	ldr	r3, [sp, #12]
    c9da:	2b16      	cmp	r3, #22
    c9dc:	d811      	bhi.n	ca02 <_dtoa_r+0x1da>
    c9de:	4a85      	ldr	r2, [pc, #532]	; (cbf4 <_dtoa_r+0x3cc>)
    c9e0:	00db      	lsls	r3, r3, #3
    c9e2:	18d3      	adds	r3, r2, r3
    c9e4:	6818      	ldr	r0, [r3, #0]
    c9e6:	6859      	ldr	r1, [r3, #4]
    c9e8:	9a06      	ldr	r2, [sp, #24]
    c9ea:	9b07      	ldr	r3, [sp, #28]
    c9ec:	f7f9 fff6 	bl	69dc <__aeabi_dcmpgt>
    c9f0:	2800      	cmp	r0, #0
    c9f2:	d005      	beq.n	ca00 <_dtoa_r+0x1d8>
    c9f4:	9b03      	ldr	r3, [sp, #12]
    c9f6:	3b01      	subs	r3, #1
    c9f8:	9303      	str	r3, [sp, #12]
    c9fa:	2300      	movs	r3, #0
    c9fc:	9313      	str	r3, [sp, #76]	; 0x4c
    c9fe:	e000      	b.n	ca02 <_dtoa_r+0x1da>
    ca00:	9013      	str	r0, [sp, #76]	; 0x4c
    ca02:	9b18      	ldr	r3, [sp, #96]	; 0x60
    ca04:	1b9e      	subs	r6, r3, r6
    ca06:	2300      	movs	r3, #0
    ca08:	930d      	str	r3, [sp, #52]	; 0x34
    ca0a:	3e01      	subs	r6, #1
    ca0c:	960e      	str	r6, [sp, #56]	; 0x38
    ca0e:	d504      	bpl.n	ca1a <_dtoa_r+0x1f2>
    ca10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ca12:	425b      	negs	r3, r3
    ca14:	930d      	str	r3, [sp, #52]	; 0x34
    ca16:	2300      	movs	r3, #0
    ca18:	930e      	str	r3, [sp, #56]	; 0x38
    ca1a:	9b03      	ldr	r3, [sp, #12]
    ca1c:	2b00      	cmp	r3, #0
    ca1e:	db08      	blt.n	ca32 <_dtoa_r+0x20a>
    ca20:	9a03      	ldr	r2, [sp, #12]
    ca22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ca24:	4694      	mov	ip, r2
    ca26:	4463      	add	r3, ip
    ca28:	930e      	str	r3, [sp, #56]	; 0x38
    ca2a:	2300      	movs	r3, #0
    ca2c:	9212      	str	r2, [sp, #72]	; 0x48
    ca2e:	930f      	str	r3, [sp, #60]	; 0x3c
    ca30:	e007      	b.n	ca42 <_dtoa_r+0x21a>
    ca32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ca34:	9a03      	ldr	r2, [sp, #12]
    ca36:	1a9b      	subs	r3, r3, r2
    ca38:	930d      	str	r3, [sp, #52]	; 0x34
    ca3a:	4253      	negs	r3, r2
    ca3c:	930f      	str	r3, [sp, #60]	; 0x3c
    ca3e:	2300      	movs	r3, #0
    ca40:	9312      	str	r3, [sp, #72]	; 0x48
    ca42:	9b20      	ldr	r3, [sp, #128]	; 0x80
    ca44:	2501      	movs	r5, #1
    ca46:	2b09      	cmp	r3, #9
    ca48:	d827      	bhi.n	ca9a <_dtoa_r+0x272>
    ca4a:	2b05      	cmp	r3, #5
    ca4c:	dd02      	ble.n	ca54 <_dtoa_r+0x22c>
    ca4e:	2500      	movs	r5, #0
    ca50:	3b04      	subs	r3, #4
    ca52:	9320      	str	r3, [sp, #128]	; 0x80
    ca54:	9b20      	ldr	r3, [sp, #128]	; 0x80
    ca56:	1e98      	subs	r0, r3, #2
    ca58:	2803      	cmp	r0, #3
    ca5a:	d823      	bhi.n	caa4 <_dtoa_r+0x27c>
    ca5c:	f002 f806 	bl	ea6c <__gnu_thumb1_case_uqi>
    ca60:	10040e02 	.word	0x10040e02
    ca64:	2300      	movs	r3, #0
    ca66:	e000      	b.n	ca6a <_dtoa_r+0x242>
    ca68:	2301      	movs	r3, #1
    ca6a:	9310      	str	r3, [sp, #64]	; 0x40
    ca6c:	9b21      	ldr	r3, [sp, #132]	; 0x84
    ca6e:	2b00      	cmp	r3, #0
    ca70:	dc21      	bgt.n	cab6 <_dtoa_r+0x28e>
    ca72:	2301      	movs	r3, #1
    ca74:	930b      	str	r3, [sp, #44]	; 0x2c
    ca76:	9309      	str	r3, [sp, #36]	; 0x24
    ca78:	1c1a      	adds	r2, r3, #0
    ca7a:	e01a      	b.n	cab2 <_dtoa_r+0x28a>
    ca7c:	2300      	movs	r3, #0
    ca7e:	e000      	b.n	ca82 <_dtoa_r+0x25a>
    ca80:	2301      	movs	r3, #1
    ca82:	9a03      	ldr	r2, [sp, #12]
    ca84:	9310      	str	r3, [sp, #64]	; 0x40
    ca86:	4694      	mov	ip, r2
    ca88:	9b21      	ldr	r3, [sp, #132]	; 0x84
    ca8a:	4463      	add	r3, ip
    ca8c:	930b      	str	r3, [sp, #44]	; 0x2c
    ca8e:	3301      	adds	r3, #1
    ca90:	9309      	str	r3, [sp, #36]	; 0x24
    ca92:	2b00      	cmp	r3, #0
    ca94:	dc12      	bgt.n	cabc <_dtoa_r+0x294>
    ca96:	2301      	movs	r3, #1
    ca98:	e010      	b.n	cabc <_dtoa_r+0x294>
    ca9a:	2300      	movs	r3, #0
    ca9c:	9510      	str	r5, [sp, #64]	; 0x40
    ca9e:	9320      	str	r3, [sp, #128]	; 0x80
    caa0:	3b01      	subs	r3, #1
    caa2:	e002      	b.n	caaa <_dtoa_r+0x282>
    caa4:	2301      	movs	r3, #1
    caa6:	9310      	str	r3, [sp, #64]	; 0x40
    caa8:	3b02      	subs	r3, #2
    caaa:	2200      	movs	r2, #0
    caac:	930b      	str	r3, [sp, #44]	; 0x2c
    caae:	9309      	str	r3, [sp, #36]	; 0x24
    cab0:	3313      	adds	r3, #19
    cab2:	9221      	str	r2, [sp, #132]	; 0x84
    cab4:	e002      	b.n	cabc <_dtoa_r+0x294>
    cab6:	9b21      	ldr	r3, [sp, #132]	; 0x84
    cab8:	930b      	str	r3, [sp, #44]	; 0x2c
    caba:	9309      	str	r3, [sp, #36]	; 0x24
    cabc:	9a08      	ldr	r2, [sp, #32]
    cabe:	6a54      	ldr	r4, [r2, #36]	; 0x24
    cac0:	2200      	movs	r2, #0
    cac2:	6062      	str	r2, [r4, #4]
    cac4:	3204      	adds	r2, #4
    cac6:	1c11      	adds	r1, r2, #0
    cac8:	3114      	adds	r1, #20
    caca:	4299      	cmp	r1, r3
    cacc:	d804      	bhi.n	cad8 <_dtoa_r+0x2b0>
    cace:	6861      	ldr	r1, [r4, #4]
    cad0:	0052      	lsls	r2, r2, #1
    cad2:	3101      	adds	r1, #1
    cad4:	6061      	str	r1, [r4, #4]
    cad6:	e7f6      	b.n	cac6 <_dtoa_r+0x29e>
    cad8:	9808      	ldr	r0, [sp, #32]
    cada:	6861      	ldr	r1, [r4, #4]
    cadc:	f001 f844 	bl	db68 <_Balloc>
    cae0:	9b08      	ldr	r3, [sp, #32]
    cae2:	6020      	str	r0, [r4, #0]
    cae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    cae6:	681b      	ldr	r3, [r3, #0]
    cae8:	930c      	str	r3, [sp, #48]	; 0x30
    caea:	9b09      	ldr	r3, [sp, #36]	; 0x24
    caec:	2b0e      	cmp	r3, #14
    caee:	d900      	bls.n	caf2 <_dtoa_r+0x2ca>
    caf0:	e188      	b.n	ce04 <_dtoa_r+0x5dc>
    caf2:	2d00      	cmp	r5, #0
    caf4:	d100      	bne.n	caf8 <_dtoa_r+0x2d0>
    caf6:	e185      	b.n	ce04 <_dtoa_r+0x5dc>
    caf8:	9b06      	ldr	r3, [sp, #24]
    cafa:	9c07      	ldr	r4, [sp, #28]
    cafc:	9314      	str	r3, [sp, #80]	; 0x50
    cafe:	9415      	str	r4, [sp, #84]	; 0x54
    cb00:	9b03      	ldr	r3, [sp, #12]
    cb02:	2b00      	cmp	r3, #0
    cb04:	dd30      	ble.n	cb68 <_dtoa_r+0x340>
    cb06:	220f      	movs	r2, #15
    cb08:	493a      	ldr	r1, [pc, #232]	; (cbf4 <_dtoa_r+0x3cc>)
    cb0a:	4013      	ands	r3, r2
    cb0c:	00db      	lsls	r3, r3, #3
    cb0e:	18cb      	adds	r3, r1, r3
    cb10:	685c      	ldr	r4, [r3, #4]
    cb12:	681b      	ldr	r3, [r3, #0]
    cb14:	9304      	str	r3, [sp, #16]
    cb16:	9405      	str	r4, [sp, #20]
    cb18:	9b03      	ldr	r3, [sp, #12]
    cb1a:	2702      	movs	r7, #2
    cb1c:	111d      	asrs	r5, r3, #4
    cb1e:	06eb      	lsls	r3, r5, #27
    cb20:	d50a      	bpl.n	cb38 <_dtoa_r+0x310>
    cb22:	9814      	ldr	r0, [sp, #80]	; 0x50
    cb24:	9915      	ldr	r1, [sp, #84]	; 0x54
    cb26:	4b34      	ldr	r3, [pc, #208]	; (cbf8 <_dtoa_r+0x3d0>)
    cb28:	4015      	ands	r5, r2
    cb2a:	6a1a      	ldr	r2, [r3, #32]
    cb2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    cb2e:	f7fb f9e1 	bl	7ef4 <__aeabi_ddiv>
    cb32:	9006      	str	r0, [sp, #24]
    cb34:	9107      	str	r1, [sp, #28]
    cb36:	3701      	adds	r7, #1
    cb38:	4c2f      	ldr	r4, [pc, #188]	; (cbf8 <_dtoa_r+0x3d0>)
    cb3a:	2d00      	cmp	r5, #0
    cb3c:	d00d      	beq.n	cb5a <_dtoa_r+0x332>
    cb3e:	07eb      	lsls	r3, r5, #31
    cb40:	d508      	bpl.n	cb54 <_dtoa_r+0x32c>
    cb42:	9804      	ldr	r0, [sp, #16]
    cb44:	9905      	ldr	r1, [sp, #20]
    cb46:	6822      	ldr	r2, [r4, #0]
    cb48:	6863      	ldr	r3, [r4, #4]
    cb4a:	f7fb fe11 	bl	8770 <__aeabi_dmul>
    cb4e:	9004      	str	r0, [sp, #16]
    cb50:	9105      	str	r1, [sp, #20]
    cb52:	3701      	adds	r7, #1
    cb54:	106d      	asrs	r5, r5, #1
    cb56:	3408      	adds	r4, #8
    cb58:	e7ef      	b.n	cb3a <_dtoa_r+0x312>
    cb5a:	9806      	ldr	r0, [sp, #24]
    cb5c:	9907      	ldr	r1, [sp, #28]
    cb5e:	9a04      	ldr	r2, [sp, #16]
    cb60:	9b05      	ldr	r3, [sp, #20]
    cb62:	f7fb f9c7 	bl	7ef4 <__aeabi_ddiv>
    cb66:	e049      	b.n	cbfc <_dtoa_r+0x3d4>
    cb68:	9b03      	ldr	r3, [sp, #12]
    cb6a:	2702      	movs	r7, #2
    cb6c:	425d      	negs	r5, r3
    cb6e:	2d00      	cmp	r5, #0
    cb70:	d046      	beq.n	cc00 <_dtoa_r+0x3d8>
    cb72:	9814      	ldr	r0, [sp, #80]	; 0x50
    cb74:	9915      	ldr	r1, [sp, #84]	; 0x54
    cb76:	230f      	movs	r3, #15
    cb78:	4a1e      	ldr	r2, [pc, #120]	; (cbf4 <_dtoa_r+0x3cc>)
    cb7a:	402b      	ands	r3, r5
    cb7c:	00db      	lsls	r3, r3, #3
    cb7e:	18d3      	adds	r3, r2, r3
    cb80:	681a      	ldr	r2, [r3, #0]
    cb82:	685b      	ldr	r3, [r3, #4]
    cb84:	f7fb fdf4 	bl	8770 <__aeabi_dmul>
    cb88:	4c1b      	ldr	r4, [pc, #108]	; (cbf8 <_dtoa_r+0x3d0>)
    cb8a:	112d      	asrs	r5, r5, #4
    cb8c:	2d00      	cmp	r5, #0
    cb8e:	d035      	beq.n	cbfc <_dtoa_r+0x3d4>
    cb90:	07eb      	lsls	r3, r5, #31
    cb92:	d504      	bpl.n	cb9e <_dtoa_r+0x376>
    cb94:	6822      	ldr	r2, [r4, #0]
    cb96:	6863      	ldr	r3, [r4, #4]
    cb98:	3701      	adds	r7, #1
    cb9a:	f7fb fde9 	bl	8770 <__aeabi_dmul>
    cb9e:	106d      	asrs	r5, r5, #1
    cba0:	3408      	adds	r4, #8
    cba2:	e7f3      	b.n	cb8c <_dtoa_r+0x364>
    cba4:	7ff00000 	.word	0x7ff00000
    cba8:	0000270f 	.word	0x0000270f
    cbac:	0000fc1e 	.word	0x0000fc1e
    cbb0:	0000fc15 	.word	0x0000fc15
    cbb4:	0000faba 	.word	0x0000faba
    cbb8:	0000fabb 	.word	0x0000fabb
    cbbc:	3ff00000 	.word	0x3ff00000
    cbc0:	fffffc01 	.word	0xfffffc01
    cbc4:	fffffbef 	.word	0xfffffbef
    cbc8:	00000412 	.word	0x00000412
    cbcc:	fffffc0e 	.word	0xfffffc0e
    cbd0:	fffffbee 	.word	0xfffffbee
    cbd4:	fe100000 	.word	0xfe100000
    cbd8:	3ff80000 	.word	0x3ff80000
    cbdc:	636f4361 	.word	0x636f4361
    cbe0:	3fd287a7 	.word	0x3fd287a7
    cbe4:	8b60c8b3 	.word	0x8b60c8b3
    cbe8:	3fc68a28 	.word	0x3fc68a28
    cbec:	509f79fb 	.word	0x509f79fb
    cbf0:	3fd34413 	.word	0x3fd34413
    cbf4:	0000fc30 	.word	0x0000fc30
    cbf8:	0000fcf8 	.word	0x0000fcf8
    cbfc:	9006      	str	r0, [sp, #24]
    cbfe:	9107      	str	r1, [sp, #28]
    cc00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    cc02:	2b00      	cmp	r3, #0
    cc04:	d01e      	beq.n	cc44 <_dtoa_r+0x41c>
    cc06:	9c06      	ldr	r4, [sp, #24]
    cc08:	9d07      	ldr	r5, [sp, #28]
    cc0a:	2200      	movs	r2, #0
    cc0c:	1c20      	adds	r0, r4, #0
    cc0e:	1c29      	adds	r1, r5, #0
    cc10:	4bce      	ldr	r3, [pc, #824]	; (cf4c <_dtoa_r+0x724>)
    cc12:	f7f9 fecf 	bl	69b4 <__aeabi_dcmplt>
    cc16:	2800      	cmp	r0, #0
    cc18:	d014      	beq.n	cc44 <_dtoa_r+0x41c>
    cc1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cc1c:	2b00      	cmp	r3, #0
    cc1e:	d011      	beq.n	cc44 <_dtoa_r+0x41c>
    cc20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cc22:	2b00      	cmp	r3, #0
    cc24:	dc00      	bgt.n	cc28 <_dtoa_r+0x400>
    cc26:	e0e9      	b.n	cdfc <_dtoa_r+0x5d4>
    cc28:	9b03      	ldr	r3, [sp, #12]
    cc2a:	1c29      	adds	r1, r5, #0
    cc2c:	3b01      	subs	r3, #1
    cc2e:	9311      	str	r3, [sp, #68]	; 0x44
    cc30:	1c20      	adds	r0, r4, #0
    cc32:	2200      	movs	r2, #0
    cc34:	4bc6      	ldr	r3, [pc, #792]	; (cf50 <_dtoa_r+0x728>)
    cc36:	f7fb fd9b 	bl	8770 <__aeabi_dmul>
    cc3a:	3701      	adds	r7, #1
    cc3c:	9006      	str	r0, [sp, #24]
    cc3e:	9107      	str	r1, [sp, #28]
    cc40:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    cc42:	e002      	b.n	cc4a <_dtoa_r+0x422>
    cc44:	9b03      	ldr	r3, [sp, #12]
    cc46:	9d09      	ldr	r5, [sp, #36]	; 0x24
    cc48:	9311      	str	r3, [sp, #68]	; 0x44
    cc4a:	1c38      	adds	r0, r7, #0
    cc4c:	9b06      	ldr	r3, [sp, #24]
    cc4e:	9c07      	ldr	r4, [sp, #28]
    cc50:	9304      	str	r3, [sp, #16]
    cc52:	9405      	str	r4, [sp, #20]
    cc54:	f7fc fbd6 	bl	9404 <__aeabi_i2d>
    cc58:	9a04      	ldr	r2, [sp, #16]
    cc5a:	9b05      	ldr	r3, [sp, #20]
    cc5c:	f7fb fd88 	bl	8770 <__aeabi_dmul>
    cc60:	2200      	movs	r2, #0
    cc62:	4bbc      	ldr	r3, [pc, #752]	; (cf54 <_dtoa_r+0x72c>)
    cc64:	f7fa fe1e 	bl	78a4 <__aeabi_dadd>
    cc68:	9006      	str	r0, [sp, #24]
    cc6a:	9107      	str	r1, [sp, #28]
    cc6c:	9e06      	ldr	r6, [sp, #24]
    cc6e:	9f07      	ldr	r7, [sp, #28]
    cc70:	9b07      	ldr	r3, [sp, #28]
    cc72:	4ab9      	ldr	r2, [pc, #740]	; (cf58 <_dtoa_r+0x730>)
    cc74:	189c      	adds	r4, r3, r2
    cc76:	2d00      	cmp	r5, #0
    cc78:	d11c      	bne.n	ccb4 <_dtoa_r+0x48c>
    cc7a:	9804      	ldr	r0, [sp, #16]
    cc7c:	9905      	ldr	r1, [sp, #20]
    cc7e:	2200      	movs	r2, #0
    cc80:	4bb6      	ldr	r3, [pc, #728]	; (cf5c <_dtoa_r+0x734>)
    cc82:	f7fc f80f 	bl	8ca4 <__aeabi_dsub>
    cc86:	1c32      	adds	r2, r6, #0
    cc88:	1c23      	adds	r3, r4, #0
    cc8a:	9004      	str	r0, [sp, #16]
    cc8c:	9105      	str	r1, [sp, #20]
    cc8e:	f7f9 fea5 	bl	69dc <__aeabi_dcmpgt>
    cc92:	2800      	cmp	r0, #0
    cc94:	d000      	beq.n	cc98 <_dtoa_r+0x470>
    cc96:	e263      	b.n	d160 <_dtoa_r+0x938>
    cc98:	9804      	ldr	r0, [sp, #16]
    cc9a:	9905      	ldr	r1, [sp, #20]
    cc9c:	1c32      	adds	r2, r6, #0
    cc9e:	4eb0      	ldr	r6, [pc, #704]	; (cf60 <_dtoa_r+0x738>)
    cca0:	9c07      	ldr	r4, [sp, #28]
    cca2:	46b4      	mov	ip, r6
    cca4:	4464      	add	r4, ip
    cca6:	1c23      	adds	r3, r4, #0
    cca8:	f7f9 fe84 	bl	69b4 <__aeabi_dcmplt>
    ccac:	2800      	cmp	r0, #0
    ccae:	d000      	beq.n	ccb2 <_dtoa_r+0x48a>
    ccb0:	e24c      	b.n	d14c <_dtoa_r+0x924>
    ccb2:	e0a3      	b.n	cdfc <_dtoa_r+0x5d4>
    ccb4:	4aab      	ldr	r2, [pc, #684]	; (cf64 <_dtoa_r+0x73c>)
    ccb6:	1e6b      	subs	r3, r5, #1
    ccb8:	9910      	ldr	r1, [sp, #64]	; 0x40
    ccba:	00db      	lsls	r3, r3, #3
    ccbc:	18d3      	adds	r3, r2, r3
    ccbe:	2900      	cmp	r1, #0
    ccc0:	d04e      	beq.n	cd60 <_dtoa_r+0x538>
    ccc2:	681a      	ldr	r2, [r3, #0]
    ccc4:	685b      	ldr	r3, [r3, #4]
    ccc6:	2000      	movs	r0, #0
    ccc8:	49a7      	ldr	r1, [pc, #668]	; (cf68 <_dtoa_r+0x740>)
    ccca:	f7fb f913 	bl	7ef4 <__aeabi_ddiv>
    ccce:	1c32      	adds	r2, r6, #0
    ccd0:	1c23      	adds	r3, r4, #0
    ccd2:	f7fb ffe7 	bl	8ca4 <__aeabi_dsub>
    ccd6:	9e04      	ldr	r6, [sp, #16]
    ccd8:	9f05      	ldr	r7, [sp, #20]
    ccda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ccdc:	9006      	str	r0, [sp, #24]
    ccde:	9107      	str	r1, [sp, #28]
    cce0:	9304      	str	r3, [sp, #16]
    cce2:	1c39      	adds	r1, r7, #0
    cce4:	1c30      	adds	r0, r6, #0
    cce6:	f7fc fb57 	bl	9398 <__aeabi_d2iz>
    ccea:	1c04      	adds	r4, r0, #0
    ccec:	f7fc fb8a 	bl	9404 <__aeabi_i2d>
    ccf0:	1c02      	adds	r2, r0, #0
    ccf2:	1c0b      	adds	r3, r1, #0
    ccf4:	1c30      	adds	r0, r6, #0
    ccf6:	1c39      	adds	r1, r7, #0
    ccf8:	f7fb ffd4 	bl	8ca4 <__aeabi_dsub>
    ccfc:	9b04      	ldr	r3, [sp, #16]
    ccfe:	3430      	adds	r4, #48	; 0x30
    cd00:	3301      	adds	r3, #1
    cd02:	9304      	str	r3, [sp, #16]
    cd04:	3b01      	subs	r3, #1
    cd06:	701c      	strb	r4, [r3, #0]
    cd08:	9a06      	ldr	r2, [sp, #24]
    cd0a:	9b07      	ldr	r3, [sp, #28]
    cd0c:	1c06      	adds	r6, r0, #0
    cd0e:	1c0f      	adds	r7, r1, #0
    cd10:	f7f9 fe50 	bl	69b4 <__aeabi_dcmplt>
    cd14:	2800      	cmp	r0, #0
    cd16:	d000      	beq.n	cd1a <_dtoa_r+0x4f2>
    cd18:	e361      	b.n	d3de <_dtoa_r+0xbb6>
    cd1a:	1c32      	adds	r2, r6, #0
    cd1c:	1c3b      	adds	r3, r7, #0
    cd1e:	2000      	movs	r0, #0
    cd20:	498a      	ldr	r1, [pc, #552]	; (cf4c <_dtoa_r+0x724>)
    cd22:	f7fb ffbf 	bl	8ca4 <__aeabi_dsub>
    cd26:	9a06      	ldr	r2, [sp, #24]
    cd28:	9b07      	ldr	r3, [sp, #28]
    cd2a:	f7f9 fe43 	bl	69b4 <__aeabi_dcmplt>
    cd2e:	2800      	cmp	r0, #0
    cd30:	d000      	beq.n	cd34 <_dtoa_r+0x50c>
    cd32:	e0cd      	b.n	ced0 <_dtoa_r+0x6a8>
    cd34:	9b04      	ldr	r3, [sp, #16]
    cd36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    cd38:	1a9b      	subs	r3, r3, r2
    cd3a:	42ab      	cmp	r3, r5
    cd3c:	da5e      	bge.n	cdfc <_dtoa_r+0x5d4>
    cd3e:	9806      	ldr	r0, [sp, #24]
    cd40:	9907      	ldr	r1, [sp, #28]
    cd42:	2200      	movs	r2, #0
    cd44:	4b82      	ldr	r3, [pc, #520]	; (cf50 <_dtoa_r+0x728>)
    cd46:	f7fb fd13 	bl	8770 <__aeabi_dmul>
    cd4a:	2200      	movs	r2, #0
    cd4c:	9006      	str	r0, [sp, #24]
    cd4e:	9107      	str	r1, [sp, #28]
    cd50:	4b7f      	ldr	r3, [pc, #508]	; (cf50 <_dtoa_r+0x728>)
    cd52:	1c30      	adds	r0, r6, #0
    cd54:	1c39      	adds	r1, r7, #0
    cd56:	f7fb fd0b 	bl	8770 <__aeabi_dmul>
    cd5a:	1c06      	adds	r6, r0, #0
    cd5c:	1c0f      	adds	r7, r1, #0
    cd5e:	e7c0      	b.n	cce2 <_dtoa_r+0x4ba>
    cd60:	6818      	ldr	r0, [r3, #0]
    cd62:	6859      	ldr	r1, [r3, #4]
    cd64:	1c32      	adds	r2, r6, #0
    cd66:	1c23      	adds	r3, r4, #0
    cd68:	f7fb fd02 	bl	8770 <__aeabi_dmul>
    cd6c:	9e04      	ldr	r6, [sp, #16]
    cd6e:	9f05      	ldr	r7, [sp, #20]
    cd70:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    cd72:	9006      	str	r0, [sp, #24]
    cd74:	9107      	str	r1, [sp, #28]
    cd76:	1963      	adds	r3, r4, r5
    cd78:	9304      	str	r3, [sp, #16]
    cd7a:	1c39      	adds	r1, r7, #0
    cd7c:	1c30      	adds	r0, r6, #0
    cd7e:	f7fc fb0b 	bl	9398 <__aeabi_d2iz>
    cd82:	1c05      	adds	r5, r0, #0
    cd84:	f7fc fb3e 	bl	9404 <__aeabi_i2d>
    cd88:	1c0b      	adds	r3, r1, #0
    cd8a:	1c02      	adds	r2, r0, #0
    cd8c:	1c39      	adds	r1, r7, #0
    cd8e:	1c30      	adds	r0, r6, #0
    cd90:	f7fb ff88 	bl	8ca4 <__aeabi_dsub>
    cd94:	3530      	adds	r5, #48	; 0x30
    cd96:	9b04      	ldr	r3, [sp, #16]
    cd98:	7025      	strb	r5, [r4, #0]
    cd9a:	3401      	adds	r4, #1
    cd9c:	1c06      	adds	r6, r0, #0
    cd9e:	1c0f      	adds	r7, r1, #0
    cda0:	42a3      	cmp	r3, r4
    cda2:	d124      	bne.n	cdee <_dtoa_r+0x5c6>
    cda4:	2200      	movs	r2, #0
    cda6:	9806      	ldr	r0, [sp, #24]
    cda8:	9907      	ldr	r1, [sp, #28]
    cdaa:	4b6f      	ldr	r3, [pc, #444]	; (cf68 <_dtoa_r+0x740>)
    cdac:	f7fa fd7a 	bl	78a4 <__aeabi_dadd>
    cdb0:	1c02      	adds	r2, r0, #0
    cdb2:	1c0b      	adds	r3, r1, #0
    cdb4:	1c30      	adds	r0, r6, #0
    cdb6:	1c39      	adds	r1, r7, #0
    cdb8:	f7f9 fe10 	bl	69dc <__aeabi_dcmpgt>
    cdbc:	2800      	cmp	r0, #0
    cdbe:	d000      	beq.n	cdc2 <_dtoa_r+0x59a>
    cdc0:	e086      	b.n	ced0 <_dtoa_r+0x6a8>
    cdc2:	9a06      	ldr	r2, [sp, #24]
    cdc4:	9b07      	ldr	r3, [sp, #28]
    cdc6:	2000      	movs	r0, #0
    cdc8:	4967      	ldr	r1, [pc, #412]	; (cf68 <_dtoa_r+0x740>)
    cdca:	f7fb ff6b 	bl	8ca4 <__aeabi_dsub>
    cdce:	1c02      	adds	r2, r0, #0
    cdd0:	1c0b      	adds	r3, r1, #0
    cdd2:	1c30      	adds	r0, r6, #0
    cdd4:	1c39      	adds	r1, r7, #0
    cdd6:	f7f9 fded 	bl	69b4 <__aeabi_dcmplt>
    cdda:	2800      	cmp	r0, #0
    cddc:	d00e      	beq.n	cdfc <_dtoa_r+0x5d4>
    cdde:	9b04      	ldr	r3, [sp, #16]
    cde0:	3b01      	subs	r3, #1
    cde2:	781a      	ldrb	r2, [r3, #0]
    cde4:	2a30      	cmp	r2, #48	; 0x30
    cde6:	d000      	beq.n	cdea <_dtoa_r+0x5c2>
    cde8:	e2f9      	b.n	d3de <_dtoa_r+0xbb6>
    cdea:	9304      	str	r3, [sp, #16]
    cdec:	e7f7      	b.n	cdde <_dtoa_r+0x5b6>
    cdee:	2200      	movs	r2, #0
    cdf0:	4b57      	ldr	r3, [pc, #348]	; (cf50 <_dtoa_r+0x728>)
    cdf2:	f7fb fcbd 	bl	8770 <__aeabi_dmul>
    cdf6:	1c06      	adds	r6, r0, #0
    cdf8:	1c0f      	adds	r7, r1, #0
    cdfa:	e7be      	b.n	cd7a <_dtoa_r+0x552>
    cdfc:	9b14      	ldr	r3, [sp, #80]	; 0x50
    cdfe:	9c15      	ldr	r4, [sp, #84]	; 0x54
    ce00:	9306      	str	r3, [sp, #24]
    ce02:	9407      	str	r4, [sp, #28]
    ce04:	9b19      	ldr	r3, [sp, #100]	; 0x64
    ce06:	2b00      	cmp	r3, #0
    ce08:	da00      	bge.n	ce0c <_dtoa_r+0x5e4>
    ce0a:	e086      	b.n	cf1a <_dtoa_r+0x6f2>
    ce0c:	9a03      	ldr	r2, [sp, #12]
    ce0e:	2a0e      	cmp	r2, #14
    ce10:	dd00      	ble.n	ce14 <_dtoa_r+0x5ec>
    ce12:	e082      	b.n	cf1a <_dtoa_r+0x6f2>
    ce14:	00d3      	lsls	r3, r2, #3
    ce16:	4a53      	ldr	r2, [pc, #332]	; (cf64 <_dtoa_r+0x73c>)
    ce18:	18d3      	adds	r3, r2, r3
    ce1a:	681e      	ldr	r6, [r3, #0]
    ce1c:	685f      	ldr	r7, [r3, #4]
    ce1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
    ce20:	2b00      	cmp	r3, #0
    ce22:	da14      	bge.n	ce4e <_dtoa_r+0x626>
    ce24:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ce26:	2b00      	cmp	r3, #0
    ce28:	dc11      	bgt.n	ce4e <_dtoa_r+0x626>
    ce2a:	d000      	beq.n	ce2e <_dtoa_r+0x606>
    ce2c:	e190      	b.n	d150 <_dtoa_r+0x928>
    ce2e:	1c30      	adds	r0, r6, #0
    ce30:	1c39      	adds	r1, r7, #0
    ce32:	2200      	movs	r2, #0
    ce34:	4b49      	ldr	r3, [pc, #292]	; (cf5c <_dtoa_r+0x734>)
    ce36:	f7fb fc9b 	bl	8770 <__aeabi_dmul>
    ce3a:	9a06      	ldr	r2, [sp, #24]
    ce3c:	9b07      	ldr	r3, [sp, #28]
    ce3e:	f7f9 fdd7 	bl	69f0 <__aeabi_dcmpge>
    ce42:	9f09      	ldr	r7, [sp, #36]	; 0x24
    ce44:	1c3e      	adds	r6, r7, #0
    ce46:	2800      	cmp	r0, #0
    ce48:	d000      	beq.n	ce4c <_dtoa_r+0x624>
    ce4a:	e183      	b.n	d154 <_dtoa_r+0x92c>
    ce4c:	e18c      	b.n	d168 <_dtoa_r+0x940>
    ce4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ce50:	9c06      	ldr	r4, [sp, #24]
    ce52:	9d07      	ldr	r5, [sp, #28]
    ce54:	9304      	str	r3, [sp, #16]
    ce56:	1c32      	adds	r2, r6, #0
    ce58:	1c3b      	adds	r3, r7, #0
    ce5a:	1c20      	adds	r0, r4, #0
    ce5c:	1c29      	adds	r1, r5, #0
    ce5e:	f7fb f849 	bl	7ef4 <__aeabi_ddiv>
    ce62:	f7fc fa99 	bl	9398 <__aeabi_d2iz>
    ce66:	9006      	str	r0, [sp, #24]
    ce68:	f7fc facc 	bl	9404 <__aeabi_i2d>
    ce6c:	1c32      	adds	r2, r6, #0
    ce6e:	1c3b      	adds	r3, r7, #0
    ce70:	f7fb fc7e 	bl	8770 <__aeabi_dmul>
    ce74:	1c02      	adds	r2, r0, #0
    ce76:	1c0b      	adds	r3, r1, #0
    ce78:	1c20      	adds	r0, r4, #0
    ce7a:	1c29      	adds	r1, r5, #0
    ce7c:	f7fb ff12 	bl	8ca4 <__aeabi_dsub>
    ce80:	1c0b      	adds	r3, r1, #0
    ce82:	9904      	ldr	r1, [sp, #16]
    ce84:	1c02      	adds	r2, r0, #0
    ce86:	9806      	ldr	r0, [sp, #24]
    ce88:	3101      	adds	r1, #1
    ce8a:	9104      	str	r1, [sp, #16]
    ce8c:	3030      	adds	r0, #48	; 0x30
    ce8e:	3901      	subs	r1, #1
    ce90:	7008      	strb	r0, [r1, #0]
    ce92:	980c      	ldr	r0, [sp, #48]	; 0x30
    ce94:	9904      	ldr	r1, [sp, #16]
    ce96:	1a09      	subs	r1, r1, r0
    ce98:	9809      	ldr	r0, [sp, #36]	; 0x24
    ce9a:	4281      	cmp	r1, r0
    ce9c:	d12e      	bne.n	cefc <_dtoa_r+0x6d4>
    ce9e:	1c10      	adds	r0, r2, #0
    cea0:	1c19      	adds	r1, r3, #0
    cea2:	f7fa fcff 	bl	78a4 <__aeabi_dadd>
    cea6:	1c32      	adds	r2, r6, #0
    cea8:	1c3b      	adds	r3, r7, #0
    ceaa:	1c04      	adds	r4, r0, #0
    ceac:	1c0d      	adds	r5, r1, #0
    ceae:	f7f9 fd95 	bl	69dc <__aeabi_dcmpgt>
    ceb2:	2800      	cmp	r0, #0
    ceb4:	d110      	bne.n	ced8 <_dtoa_r+0x6b0>
    ceb6:	1c20      	adds	r0, r4, #0
    ceb8:	1c29      	adds	r1, r5, #0
    ceba:	1c32      	adds	r2, r6, #0
    cebc:	1c3b      	adds	r3, r7, #0
    cebe:	f7f9 fd73 	bl	69a8 <__aeabi_dcmpeq>
    cec2:	2800      	cmp	r0, #0
    cec4:	d100      	bne.n	cec8 <_dtoa_r+0x6a0>
    cec6:	e28c      	b.n	d3e2 <_dtoa_r+0xbba>
    cec8:	9b06      	ldr	r3, [sp, #24]
    ceca:	07db      	lsls	r3, r3, #31
    cecc:	d404      	bmi.n	ced8 <_dtoa_r+0x6b0>
    cece:	e288      	b.n	d3e2 <_dtoa_r+0xbba>
    ced0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ced2:	9303      	str	r3, [sp, #12]
    ced4:	e000      	b.n	ced8 <_dtoa_r+0x6b0>
    ced6:	9304      	str	r3, [sp, #16]
    ced8:	9b04      	ldr	r3, [sp, #16]
    ceda:	3b01      	subs	r3, #1
    cedc:	781a      	ldrb	r2, [r3, #0]
    cede:	2a39      	cmp	r2, #57	; 0x39
    cee0:	d108      	bne.n	cef4 <_dtoa_r+0x6cc>
    cee2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    cee4:	4293      	cmp	r3, r2
    cee6:	d1f6      	bne.n	ced6 <_dtoa_r+0x6ae>
    cee8:	9b03      	ldr	r3, [sp, #12]
    ceea:	3301      	adds	r3, #1
    ceec:	9303      	str	r3, [sp, #12]
    ceee:	2330      	movs	r3, #48	; 0x30
    cef0:	7013      	strb	r3, [r2, #0]
    cef2:	1c13      	adds	r3, r2, #0
    cef4:	781a      	ldrb	r2, [r3, #0]
    cef6:	3201      	adds	r2, #1
    cef8:	701a      	strb	r2, [r3, #0]
    cefa:	e272      	b.n	d3e2 <_dtoa_r+0xbba>
    cefc:	1c10      	adds	r0, r2, #0
    cefe:	1c19      	adds	r1, r3, #0
    cf00:	2200      	movs	r2, #0
    cf02:	4b13      	ldr	r3, [pc, #76]	; (cf50 <_dtoa_r+0x728>)
    cf04:	f7fb fc34 	bl	8770 <__aeabi_dmul>
    cf08:	2200      	movs	r2, #0
    cf0a:	2300      	movs	r3, #0
    cf0c:	1c04      	adds	r4, r0, #0
    cf0e:	1c0d      	adds	r5, r1, #0
    cf10:	f7f9 fd4a 	bl	69a8 <__aeabi_dcmpeq>
    cf14:	2800      	cmp	r0, #0
    cf16:	d09e      	beq.n	ce56 <_dtoa_r+0x62e>
    cf18:	e263      	b.n	d3e2 <_dtoa_r+0xbba>
    cf1a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cf1c:	2a00      	cmp	r2, #0
    cf1e:	d044      	beq.n	cfaa <_dtoa_r+0x782>
    cf20:	9a20      	ldr	r2, [sp, #128]	; 0x80
    cf22:	2a01      	cmp	r2, #1
    cf24:	dc0b      	bgt.n	cf3e <_dtoa_r+0x716>
    cf26:	9a16      	ldr	r2, [sp, #88]	; 0x58
    cf28:	2a00      	cmp	r2, #0
    cf2a:	d002      	beq.n	cf32 <_dtoa_r+0x70a>
    cf2c:	4a0f      	ldr	r2, [pc, #60]	; (cf6c <_dtoa_r+0x744>)
    cf2e:	189b      	adds	r3, r3, r2
    cf30:	e002      	b.n	cf38 <_dtoa_r+0x710>
    cf32:	2336      	movs	r3, #54	; 0x36
    cf34:	9a18      	ldr	r2, [sp, #96]	; 0x60
    cf36:	1a9b      	subs	r3, r3, r2
    cf38:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    cf3a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    cf3c:	e029      	b.n	cf92 <_dtoa_r+0x76a>
    cf3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cf40:	1e5d      	subs	r5, r3, #1
    cf42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cf44:	42ab      	cmp	r3, r5
    cf46:	db13      	blt.n	cf70 <_dtoa_r+0x748>
    cf48:	1b5d      	subs	r5, r3, r5
    cf4a:	e018      	b.n	cf7e <_dtoa_r+0x756>
    cf4c:	3ff00000 	.word	0x3ff00000
    cf50:	40240000 	.word	0x40240000
    cf54:	401c0000 	.word	0x401c0000
    cf58:	fcc00000 	.word	0xfcc00000
    cf5c:	40140000 	.word	0x40140000
    cf60:	7cc00000 	.word	0x7cc00000
    cf64:	0000fc30 	.word	0x0000fc30
    cf68:	3fe00000 	.word	0x3fe00000
    cf6c:	00000433 	.word	0x00000433
    cf70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cf72:	950f      	str	r5, [sp, #60]	; 0x3c
    cf74:	1aea      	subs	r2, r5, r3
    cf76:	2500      	movs	r5, #0
    cf78:	9b12      	ldr	r3, [sp, #72]	; 0x48
    cf7a:	189b      	adds	r3, r3, r2
    cf7c:	9312      	str	r3, [sp, #72]	; 0x48
    cf7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cf80:	2b00      	cmp	r3, #0
    cf82:	da04      	bge.n	cf8e <_dtoa_r+0x766>
    cf84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cf86:	9a09      	ldr	r2, [sp, #36]	; 0x24
    cf88:	1a9c      	subs	r4, r3, r2
    cf8a:	2300      	movs	r3, #0
    cf8c:	e001      	b.n	cf92 <_dtoa_r+0x76a>
    cf8e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    cf90:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cf92:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    cf94:	9808      	ldr	r0, [sp, #32]
    cf96:	18d2      	adds	r2, r2, r3
    cf98:	920d      	str	r2, [sp, #52]	; 0x34
    cf9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    cf9c:	2101      	movs	r1, #1
    cf9e:	18d3      	adds	r3, r2, r3
    cfa0:	930e      	str	r3, [sp, #56]	; 0x38
    cfa2:	f000 fef8 	bl	dd96 <__i2b>
    cfa6:	1c06      	adds	r6, r0, #0
    cfa8:	e002      	b.n	cfb0 <_dtoa_r+0x788>
    cfaa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    cfac:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    cfae:	9e10      	ldr	r6, [sp, #64]	; 0x40
    cfb0:	2c00      	cmp	r4, #0
    cfb2:	d00c      	beq.n	cfce <_dtoa_r+0x7a6>
    cfb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    cfb6:	2b00      	cmp	r3, #0
    cfb8:	dd09      	ble.n	cfce <_dtoa_r+0x7a6>
    cfba:	42a3      	cmp	r3, r4
    cfbc:	dd00      	ble.n	cfc0 <_dtoa_r+0x798>
    cfbe:	1c23      	adds	r3, r4, #0
    cfc0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    cfc2:	1ae4      	subs	r4, r4, r3
    cfc4:	1ad2      	subs	r2, r2, r3
    cfc6:	920d      	str	r2, [sp, #52]	; 0x34
    cfc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    cfca:	1ad3      	subs	r3, r2, r3
    cfcc:	930e      	str	r3, [sp, #56]	; 0x38
    cfce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cfd0:	2b00      	cmp	r3, #0
    cfd2:	dd21      	ble.n	d018 <_dtoa_r+0x7f0>
    cfd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cfd6:	2b00      	cmp	r3, #0
    cfd8:	d018      	beq.n	d00c <_dtoa_r+0x7e4>
    cfda:	2d00      	cmp	r5, #0
    cfdc:	dd10      	ble.n	d000 <_dtoa_r+0x7d8>
    cfde:	1c31      	adds	r1, r6, #0
    cfe0:	1c2a      	adds	r2, r5, #0
    cfe2:	9808      	ldr	r0, [sp, #32]
    cfe4:	f000 ff6e 	bl	dec4 <__pow5mult>
    cfe8:	1c06      	adds	r6, r0, #0
    cfea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    cfec:	1c31      	adds	r1, r6, #0
    cfee:	9808      	ldr	r0, [sp, #32]
    cff0:	f000 feda 	bl	dda8 <__multiply>
    cff4:	1c07      	adds	r7, r0, #0
    cff6:	990a      	ldr	r1, [sp, #40]	; 0x28
    cff8:	9808      	ldr	r0, [sp, #32]
    cffa:	f000 fded 	bl	dbd8 <_Bfree>
    cffe:	970a      	str	r7, [sp, #40]	; 0x28
    d000:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d002:	1b5a      	subs	r2, r3, r5
    d004:	d008      	beq.n	d018 <_dtoa_r+0x7f0>
    d006:	9808      	ldr	r0, [sp, #32]
    d008:	990a      	ldr	r1, [sp, #40]	; 0x28
    d00a:	e002      	b.n	d012 <_dtoa_r+0x7ea>
    d00c:	9808      	ldr	r0, [sp, #32]
    d00e:	990a      	ldr	r1, [sp, #40]	; 0x28
    d010:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    d012:	f000 ff57 	bl	dec4 <__pow5mult>
    d016:	900a      	str	r0, [sp, #40]	; 0x28
    d018:	9808      	ldr	r0, [sp, #32]
    d01a:	2101      	movs	r1, #1
    d01c:	f000 febb 	bl	dd96 <__i2b>
    d020:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d022:	1c07      	adds	r7, r0, #0
    d024:	2b00      	cmp	r3, #0
    d026:	dd0a      	ble.n	d03e <_dtoa_r+0x816>
    d028:	1c39      	adds	r1, r7, #0
    d02a:	1c1a      	adds	r2, r3, #0
    d02c:	9808      	ldr	r0, [sp, #32]
    d02e:	f000 ff49 	bl	dec4 <__pow5mult>
    d032:	9b20      	ldr	r3, [sp, #128]	; 0x80
    d034:	1c07      	adds	r7, r0, #0
    d036:	2500      	movs	r5, #0
    d038:	2b01      	cmp	r3, #1
    d03a:	dc1b      	bgt.n	d074 <_dtoa_r+0x84c>
    d03c:	e003      	b.n	d046 <_dtoa_r+0x81e>
    d03e:	9b20      	ldr	r3, [sp, #128]	; 0x80
    d040:	2500      	movs	r5, #0
    d042:	2b01      	cmp	r3, #1
    d044:	dc12      	bgt.n	d06c <_dtoa_r+0x844>
    d046:	2500      	movs	r5, #0
    d048:	9b06      	ldr	r3, [sp, #24]
    d04a:	42ab      	cmp	r3, r5
    d04c:	d10e      	bne.n	d06c <_dtoa_r+0x844>
    d04e:	9b07      	ldr	r3, [sp, #28]
    d050:	031b      	lsls	r3, r3, #12
    d052:	42ab      	cmp	r3, r5
    d054:	d10a      	bne.n	d06c <_dtoa_r+0x844>
    d056:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    d058:	9a07      	ldr	r2, [sp, #28]
    d05a:	4213      	tst	r3, r2
    d05c:	d006      	beq.n	d06c <_dtoa_r+0x844>
    d05e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d060:	3501      	adds	r5, #1
    d062:	3301      	adds	r3, #1
    d064:	930d      	str	r3, [sp, #52]	; 0x34
    d066:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d068:	3301      	adds	r3, #1
    d06a:	930e      	str	r3, [sp, #56]	; 0x38
    d06c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d06e:	2001      	movs	r0, #1
    d070:	2b00      	cmp	r3, #0
    d072:	d008      	beq.n	d086 <_dtoa_r+0x85e>
    d074:	693b      	ldr	r3, [r7, #16]
    d076:	3303      	adds	r3, #3
    d078:	009b      	lsls	r3, r3, #2
    d07a:	18fb      	adds	r3, r7, r3
    d07c:	6858      	ldr	r0, [r3, #4]
    d07e:	f000 fe40 	bl	dd02 <__hi0bits>
    d082:	2320      	movs	r3, #32
    d084:	1a18      	subs	r0, r3, r0
    d086:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d088:	18c0      	adds	r0, r0, r3
    d08a:	231f      	movs	r3, #31
    d08c:	4018      	ands	r0, r3
    d08e:	d009      	beq.n	d0a4 <_dtoa_r+0x87c>
    d090:	3301      	adds	r3, #1
    d092:	1a1b      	subs	r3, r3, r0
    d094:	2b04      	cmp	r3, #4
    d096:	dd02      	ble.n	d09e <_dtoa_r+0x876>
    d098:	231c      	movs	r3, #28
    d09a:	1a18      	subs	r0, r3, r0
    d09c:	e003      	b.n	d0a6 <_dtoa_r+0x87e>
    d09e:	2b04      	cmp	r3, #4
    d0a0:	d008      	beq.n	d0b4 <_dtoa_r+0x88c>
    d0a2:	1c18      	adds	r0, r3, #0
    d0a4:	301c      	adds	r0, #28
    d0a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d0a8:	1824      	adds	r4, r4, r0
    d0aa:	181b      	adds	r3, r3, r0
    d0ac:	930d      	str	r3, [sp, #52]	; 0x34
    d0ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d0b0:	181b      	adds	r3, r3, r0
    d0b2:	930e      	str	r3, [sp, #56]	; 0x38
    d0b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d0b6:	2b00      	cmp	r3, #0
    d0b8:	dd05      	ble.n	d0c6 <_dtoa_r+0x89e>
    d0ba:	9808      	ldr	r0, [sp, #32]
    d0bc:	990a      	ldr	r1, [sp, #40]	; 0x28
    d0be:	1c1a      	adds	r2, r3, #0
    d0c0:	f000 ff52 	bl	df68 <__lshift>
    d0c4:	900a      	str	r0, [sp, #40]	; 0x28
    d0c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d0c8:	2b00      	cmp	r3, #0
    d0ca:	dd05      	ble.n	d0d8 <_dtoa_r+0x8b0>
    d0cc:	1c39      	adds	r1, r7, #0
    d0ce:	9808      	ldr	r0, [sp, #32]
    d0d0:	1c1a      	adds	r2, r3, #0
    d0d2:	f000 ff49 	bl	df68 <__lshift>
    d0d6:	1c07      	adds	r7, r0, #0
    d0d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    d0da:	2b00      	cmp	r3, #0
    d0dc:	d01e      	beq.n	d11c <_dtoa_r+0x8f4>
    d0de:	980a      	ldr	r0, [sp, #40]	; 0x28
    d0e0:	1c39      	adds	r1, r7, #0
    d0e2:	f000 ff93 	bl	e00c <__mcmp>
    d0e6:	2800      	cmp	r0, #0
    d0e8:	da18      	bge.n	d11c <_dtoa_r+0x8f4>
    d0ea:	9b03      	ldr	r3, [sp, #12]
    d0ec:	9808      	ldr	r0, [sp, #32]
    d0ee:	3b01      	subs	r3, #1
    d0f0:	9303      	str	r3, [sp, #12]
    d0f2:	990a      	ldr	r1, [sp, #40]	; 0x28
    d0f4:	2300      	movs	r3, #0
    d0f6:	220a      	movs	r2, #10
    d0f8:	f000 fd87 	bl	dc0a <__multadd>
    d0fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d0fe:	900a      	str	r0, [sp, #40]	; 0x28
    d100:	2b00      	cmp	r3, #0
    d102:	d100      	bne.n	d106 <_dtoa_r+0x8de>
    d104:	e17f      	b.n	d406 <_dtoa_r+0xbde>
    d106:	1c31      	adds	r1, r6, #0
    d108:	2300      	movs	r3, #0
    d10a:	9808      	ldr	r0, [sp, #32]
    d10c:	220a      	movs	r2, #10
    d10e:	f000 fd7c 	bl	dc0a <__multadd>
    d112:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d114:	1c06      	adds	r6, r0, #0
    d116:	2b00      	cmp	r3, #0
    d118:	dc3c      	bgt.n	d194 <_dtoa_r+0x96c>
    d11a:	e17d      	b.n	d418 <_dtoa_r+0xbf0>
    d11c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d11e:	2b00      	cmp	r3, #0
    d120:	dc2e      	bgt.n	d180 <_dtoa_r+0x958>
    d122:	9b20      	ldr	r3, [sp, #128]	; 0x80
    d124:	2b02      	cmp	r3, #2
    d126:	dd2b      	ble.n	d180 <_dtoa_r+0x958>
    d128:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d12a:	930b      	str	r3, [sp, #44]	; 0x2c
    d12c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d12e:	2b00      	cmp	r3, #0
    d130:	d110      	bne.n	d154 <_dtoa_r+0x92c>
    d132:	1c39      	adds	r1, r7, #0
    d134:	9808      	ldr	r0, [sp, #32]
    d136:	2205      	movs	r2, #5
    d138:	f000 fd67 	bl	dc0a <__multadd>
    d13c:	1c07      	adds	r7, r0, #0
    d13e:	980a      	ldr	r0, [sp, #40]	; 0x28
    d140:	1c39      	adds	r1, r7, #0
    d142:	f000 ff63 	bl	e00c <__mcmp>
    d146:	2800      	cmp	r0, #0
    d148:	dc0e      	bgt.n	d168 <_dtoa_r+0x940>
    d14a:	e003      	b.n	d154 <_dtoa_r+0x92c>
    d14c:	1c2f      	adds	r7, r5, #0
    d14e:	e000      	b.n	d152 <_dtoa_r+0x92a>
    d150:	2700      	movs	r7, #0
    d152:	1c3e      	adds	r6, r7, #0
    d154:	9b21      	ldr	r3, [sp, #132]	; 0x84
    d156:	43db      	mvns	r3, r3
    d158:	9303      	str	r3, [sp, #12]
    d15a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d15c:	9304      	str	r3, [sp, #16]
    d15e:	e00c      	b.n	d17a <_dtoa_r+0x952>
    d160:	1c2f      	adds	r7, r5, #0
    d162:	1c2e      	adds	r6, r5, #0
    d164:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d166:	9303      	str	r3, [sp, #12]
    d168:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d16a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d16c:	3301      	adds	r3, #1
    d16e:	9304      	str	r3, [sp, #16]
    d170:	2331      	movs	r3, #49	; 0x31
    d172:	7013      	strb	r3, [r2, #0]
    d174:	9b03      	ldr	r3, [sp, #12]
    d176:	3301      	adds	r3, #1
    d178:	9303      	str	r3, [sp, #12]
    d17a:	9609      	str	r6, [sp, #36]	; 0x24
    d17c:	2600      	movs	r6, #0
    d17e:	e11a      	b.n	d3b6 <_dtoa_r+0xb8e>
    d180:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d182:	2b00      	cmp	r3, #0
    d184:	d104      	bne.n	d190 <_dtoa_r+0x968>
    d186:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d188:	930b      	str	r3, [sp, #44]	; 0x2c
    d18a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    d18c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    d18e:	e0d0      	b.n	d332 <_dtoa_r+0xb0a>
    d190:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d192:	930b      	str	r3, [sp, #44]	; 0x2c
    d194:	2c00      	cmp	r4, #0
    d196:	dd05      	ble.n	d1a4 <_dtoa_r+0x97c>
    d198:	1c31      	adds	r1, r6, #0
    d19a:	9808      	ldr	r0, [sp, #32]
    d19c:	1c22      	adds	r2, r4, #0
    d19e:	f000 fee3 	bl	df68 <__lshift>
    d1a2:	1c06      	adds	r6, r0, #0
    d1a4:	9609      	str	r6, [sp, #36]	; 0x24
    d1a6:	2d00      	cmp	r5, #0
    d1a8:	d012      	beq.n	d1d0 <_dtoa_r+0x9a8>
    d1aa:	6871      	ldr	r1, [r6, #4]
    d1ac:	9808      	ldr	r0, [sp, #32]
    d1ae:	f000 fcdb 	bl	db68 <_Balloc>
    d1b2:	1c31      	adds	r1, r6, #0
    d1b4:	1c04      	adds	r4, r0, #0
    d1b6:	6933      	ldr	r3, [r6, #16]
    d1b8:	310c      	adds	r1, #12
    d1ba:	1c9a      	adds	r2, r3, #2
    d1bc:	0092      	lsls	r2, r2, #2
    d1be:	300c      	adds	r0, #12
    d1c0:	f7fc fe71 	bl	9ea6 <memcpy>
    d1c4:	9808      	ldr	r0, [sp, #32]
    d1c6:	1c21      	adds	r1, r4, #0
    d1c8:	2201      	movs	r2, #1
    d1ca:	f000 fecd 	bl	df68 <__lshift>
    d1ce:	9009      	str	r0, [sp, #36]	; 0x24
    d1d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d1d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d1d4:	930e      	str	r3, [sp, #56]	; 0x38
    d1d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d1d8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    d1da:	3b01      	subs	r3, #1
    d1dc:	18d3      	adds	r3, r2, r3
    d1de:	9310      	str	r3, [sp, #64]	; 0x40
    d1e0:	1c39      	adds	r1, r7, #0
    d1e2:	1c20      	adds	r0, r4, #0
    d1e4:	f7ff fa98 	bl	c718 <quorem>
    d1e8:	1c03      	adds	r3, r0, #0
    d1ea:	900f      	str	r0, [sp, #60]	; 0x3c
    d1ec:	3330      	adds	r3, #48	; 0x30
    d1ee:	1c31      	adds	r1, r6, #0
    d1f0:	1c20      	adds	r0, r4, #0
    d1f2:	930d      	str	r3, [sp, #52]	; 0x34
    d1f4:	f000 ff0a 	bl	e00c <__mcmp>
    d1f8:	1c39      	adds	r1, r7, #0
    d1fa:	900b      	str	r0, [sp, #44]	; 0x2c
    d1fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d1fe:	9808      	ldr	r0, [sp, #32]
    d200:	f000 ff1f 	bl	e042 <__mdiff>
    d204:	2301      	movs	r3, #1
    d206:	9304      	str	r3, [sp, #16]
    d208:	68c3      	ldr	r3, [r0, #12]
    d20a:	1c05      	adds	r5, r0, #0
    d20c:	2b00      	cmp	r3, #0
    d20e:	d104      	bne.n	d21a <_dtoa_r+0x9f2>
    d210:	1c20      	adds	r0, r4, #0
    d212:	1c29      	adds	r1, r5, #0
    d214:	f000 fefa 	bl	e00c <__mcmp>
    d218:	9004      	str	r0, [sp, #16]
    d21a:	9808      	ldr	r0, [sp, #32]
    d21c:	1c29      	adds	r1, r5, #0
    d21e:	f000 fcdb 	bl	dbd8 <_Bfree>
    d222:	9b04      	ldr	r3, [sp, #16]
    d224:	9a20      	ldr	r2, [sp, #128]	; 0x80
    d226:	4313      	orrs	r3, r2
    d228:	d110      	bne.n	d24c <_dtoa_r+0xa24>
    d22a:	9a06      	ldr	r2, [sp, #24]
    d22c:	3301      	adds	r3, #1
    d22e:	4213      	tst	r3, r2
    d230:	d10c      	bne.n	d24c <_dtoa_r+0xa24>
    d232:	980d      	ldr	r0, [sp, #52]	; 0x34
    d234:	940a      	str	r4, [sp, #40]	; 0x28
    d236:	2839      	cmp	r0, #57	; 0x39
    d238:	d03d      	beq.n	d2b6 <_dtoa_r+0xa8e>
    d23a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d23c:	2b00      	cmp	r3, #0
    d23e:	dd01      	ble.n	d244 <_dtoa_r+0xa1c>
    d240:	980f      	ldr	r0, [sp, #60]	; 0x3c
    d242:	3031      	adds	r0, #49	; 0x31
    d244:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d246:	3301      	adds	r3, #1
    d248:	9304      	str	r3, [sp, #16]
    d24a:	e03e      	b.n	d2ca <_dtoa_r+0xaa2>
    d24c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d24e:	2b00      	cmp	r3, #0
    d250:	da05      	bge.n	d25e <_dtoa_r+0xa36>
    d252:	9b04      	ldr	r3, [sp, #16]
    d254:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    d256:	940a      	str	r4, [sp, #40]	; 0x28
    d258:	2b00      	cmp	r3, #0
    d25a:	dc09      	bgt.n	d270 <_dtoa_r+0xa48>
    d25c:	e01c      	b.n	d298 <_dtoa_r+0xa70>
    d25e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    d260:	9b20      	ldr	r3, [sp, #128]	; 0x80
    d262:	431d      	orrs	r5, r3
    d264:	d11e      	bne.n	d2a4 <_dtoa_r+0xa7c>
    d266:	2301      	movs	r3, #1
    d268:	9a06      	ldr	r2, [sp, #24]
    d26a:	4213      	tst	r3, r2
    d26c:	d11a      	bne.n	d2a4 <_dtoa_r+0xa7c>
    d26e:	e7f0      	b.n	d252 <_dtoa_r+0xa2a>
    d270:	1c21      	adds	r1, r4, #0
    d272:	9808      	ldr	r0, [sp, #32]
    d274:	2201      	movs	r2, #1
    d276:	f000 fe77 	bl	df68 <__lshift>
    d27a:	1c39      	adds	r1, r7, #0
    d27c:	900a      	str	r0, [sp, #40]	; 0x28
    d27e:	f000 fec5 	bl	e00c <__mcmp>
    d282:	2800      	cmp	r0, #0
    d284:	dc03      	bgt.n	d28e <_dtoa_r+0xa66>
    d286:	d107      	bne.n	d298 <_dtoa_r+0xa70>
    d288:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d28a:	07db      	lsls	r3, r3, #31
    d28c:	d504      	bpl.n	d298 <_dtoa_r+0xa70>
    d28e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d290:	2b39      	cmp	r3, #57	; 0x39
    d292:	d010      	beq.n	d2b6 <_dtoa_r+0xa8e>
    d294:	1c1d      	adds	r5, r3, #0
    d296:	3501      	adds	r5, #1
    d298:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d29a:	3301      	adds	r3, #1
    d29c:	9304      	str	r3, [sp, #16]
    d29e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d2a0:	701d      	strb	r5, [r3, #0]
    d2a2:	e088      	b.n	d3b6 <_dtoa_r+0xb8e>
    d2a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d2a6:	1c5d      	adds	r5, r3, #1
    d2a8:	9b04      	ldr	r3, [sp, #16]
    d2aa:	2b00      	cmp	r3, #0
    d2ac:	dd10      	ble.n	d2d0 <_dtoa_r+0xaa8>
    d2ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d2b0:	940a      	str	r4, [sp, #40]	; 0x28
    d2b2:	2b39      	cmp	r3, #57	; 0x39
    d2b4:	d106      	bne.n	d2c4 <_dtoa_r+0xa9c>
    d2b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d2b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    d2ba:	3301      	adds	r3, #1
    d2bc:	9304      	str	r3, [sp, #16]
    d2be:	2339      	movs	r3, #57	; 0x39
    d2c0:	7013      	strb	r3, [r2, #0]
    d2c2:	e060      	b.n	d386 <_dtoa_r+0xb5e>
    d2c4:	980d      	ldr	r0, [sp, #52]	; 0x34
    d2c6:	9504      	str	r5, [sp, #16]
    d2c8:	3001      	adds	r0, #1
    d2ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d2cc:	7018      	strb	r0, [r3, #0]
    d2ce:	e072      	b.n	d3b6 <_dtoa_r+0xb8e>
    d2d0:	466a      	mov	r2, sp
    d2d2:	2134      	movs	r1, #52	; 0x34
    d2d4:	1852      	adds	r2, r2, r1
    d2d6:	7812      	ldrb	r2, [r2, #0]
    d2d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d2da:	9504      	str	r5, [sp, #16]
    d2dc:	701a      	strb	r2, [r3, #0]
    d2de:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d2e0:	4293      	cmp	r3, r2
    d2e2:	d03f      	beq.n	d364 <_dtoa_r+0xb3c>
    d2e4:	1c21      	adds	r1, r4, #0
    d2e6:	220a      	movs	r2, #10
    d2e8:	2300      	movs	r3, #0
    d2ea:	9808      	ldr	r0, [sp, #32]
    d2ec:	f000 fc8d 	bl	dc0a <__multadd>
    d2f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d2f2:	1c04      	adds	r4, r0, #0
    d2f4:	1c31      	adds	r1, r6, #0
    d2f6:	9808      	ldr	r0, [sp, #32]
    d2f8:	220a      	movs	r2, #10
    d2fa:	429e      	cmp	r6, r3
    d2fc:	d105      	bne.n	d30a <_dtoa_r+0xae2>
    d2fe:	2300      	movs	r3, #0
    d300:	f000 fc83 	bl	dc0a <__multadd>
    d304:	1c06      	adds	r6, r0, #0
    d306:	9009      	str	r0, [sp, #36]	; 0x24
    d308:	e00a      	b.n	d320 <_dtoa_r+0xaf8>
    d30a:	2300      	movs	r3, #0
    d30c:	f000 fc7d 	bl	dc0a <__multadd>
    d310:	9909      	ldr	r1, [sp, #36]	; 0x24
    d312:	1c06      	adds	r6, r0, #0
    d314:	220a      	movs	r2, #10
    d316:	9808      	ldr	r0, [sp, #32]
    d318:	2300      	movs	r3, #0
    d31a:	f000 fc76 	bl	dc0a <__multadd>
    d31e:	9009      	str	r0, [sp, #36]	; 0x24
    d320:	950e      	str	r5, [sp, #56]	; 0x38
    d322:	e75d      	b.n	d1e0 <_dtoa_r+0x9b8>
    d324:	1c21      	adds	r1, r4, #0
    d326:	9808      	ldr	r0, [sp, #32]
    d328:	220a      	movs	r2, #10
    d32a:	2300      	movs	r3, #0
    d32c:	f000 fc6d 	bl	dc0a <__multadd>
    d330:	1c04      	adds	r4, r0, #0
    d332:	1c20      	adds	r0, r4, #0
    d334:	1c39      	adds	r1, r7, #0
    d336:	f7ff f9ef 	bl	c718 <quorem>
    d33a:	2234      	movs	r2, #52	; 0x34
    d33c:	466b      	mov	r3, sp
    d33e:	3030      	adds	r0, #48	; 0x30
    d340:	189b      	adds	r3, r3, r2
    d342:	900d      	str	r0, [sp, #52]	; 0x34
    d344:	781b      	ldrb	r3, [r3, #0]
    d346:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d348:	702b      	strb	r3, [r5, #0]
    d34a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d34c:	3501      	adds	r5, #1
    d34e:	1aeb      	subs	r3, r5, r3
    d350:	4293      	cmp	r3, r2
    d352:	dbe7      	blt.n	d324 <_dtoa_r+0xafc>
    d354:	1e13      	subs	r3, r2, #0
    d356:	dc00      	bgt.n	d35a <_dtoa_r+0xb32>
    d358:	2301      	movs	r3, #1
    d35a:	9609      	str	r6, [sp, #36]	; 0x24
    d35c:	2600      	movs	r6, #0
    d35e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d360:	18d3      	adds	r3, r2, r3
    d362:	9304      	str	r3, [sp, #16]
    d364:	1c21      	adds	r1, r4, #0
    d366:	9808      	ldr	r0, [sp, #32]
    d368:	2201      	movs	r2, #1
    d36a:	f000 fdfd 	bl	df68 <__lshift>
    d36e:	1c39      	adds	r1, r7, #0
    d370:	900a      	str	r0, [sp, #40]	; 0x28
    d372:	f000 fe4b 	bl	e00c <__mcmp>
    d376:	2800      	cmp	r0, #0
    d378:	dc05      	bgt.n	d386 <_dtoa_r+0xb5e>
    d37a:	d115      	bne.n	d3a8 <_dtoa_r+0xb80>
    d37c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d37e:	07db      	lsls	r3, r3, #31
    d380:	d401      	bmi.n	d386 <_dtoa_r+0xb5e>
    d382:	e011      	b.n	d3a8 <_dtoa_r+0xb80>
    d384:	9304      	str	r3, [sp, #16]
    d386:	9b04      	ldr	r3, [sp, #16]
    d388:	3b01      	subs	r3, #1
    d38a:	781a      	ldrb	r2, [r3, #0]
    d38c:	2a39      	cmp	r2, #57	; 0x39
    d38e:	d108      	bne.n	d3a2 <_dtoa_r+0xb7a>
    d390:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d392:	4293      	cmp	r3, r2
    d394:	d1f6      	bne.n	d384 <_dtoa_r+0xb5c>
    d396:	9b03      	ldr	r3, [sp, #12]
    d398:	3301      	adds	r3, #1
    d39a:	9303      	str	r3, [sp, #12]
    d39c:	2331      	movs	r3, #49	; 0x31
    d39e:	7013      	strb	r3, [r2, #0]
    d3a0:	e009      	b.n	d3b6 <_dtoa_r+0xb8e>
    d3a2:	3201      	adds	r2, #1
    d3a4:	701a      	strb	r2, [r3, #0]
    d3a6:	e006      	b.n	d3b6 <_dtoa_r+0xb8e>
    d3a8:	9b04      	ldr	r3, [sp, #16]
    d3aa:	3b01      	subs	r3, #1
    d3ac:	781a      	ldrb	r2, [r3, #0]
    d3ae:	2a30      	cmp	r2, #48	; 0x30
    d3b0:	d101      	bne.n	d3b6 <_dtoa_r+0xb8e>
    d3b2:	9304      	str	r3, [sp, #16]
    d3b4:	e7f8      	b.n	d3a8 <_dtoa_r+0xb80>
    d3b6:	9808      	ldr	r0, [sp, #32]
    d3b8:	1c39      	adds	r1, r7, #0
    d3ba:	f000 fc0d 	bl	dbd8 <_Bfree>
    d3be:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d3c0:	2b00      	cmp	r3, #0
    d3c2:	d00e      	beq.n	d3e2 <_dtoa_r+0xbba>
    d3c4:	2e00      	cmp	r6, #0
    d3c6:	d005      	beq.n	d3d4 <_dtoa_r+0xbac>
    d3c8:	429e      	cmp	r6, r3
    d3ca:	d003      	beq.n	d3d4 <_dtoa_r+0xbac>
    d3cc:	9808      	ldr	r0, [sp, #32]
    d3ce:	1c31      	adds	r1, r6, #0
    d3d0:	f000 fc02 	bl	dbd8 <_Bfree>
    d3d4:	9808      	ldr	r0, [sp, #32]
    d3d6:	9909      	ldr	r1, [sp, #36]	; 0x24
    d3d8:	f000 fbfe 	bl	dbd8 <_Bfree>
    d3dc:	e001      	b.n	d3e2 <_dtoa_r+0xbba>
    d3de:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d3e0:	9303      	str	r3, [sp, #12]
    d3e2:	9808      	ldr	r0, [sp, #32]
    d3e4:	990a      	ldr	r1, [sp, #40]	; 0x28
    d3e6:	f000 fbf7 	bl	dbd8 <_Bfree>
    d3ea:	2300      	movs	r3, #0
    d3ec:	9a04      	ldr	r2, [sp, #16]
    d3ee:	980c      	ldr	r0, [sp, #48]	; 0x30
    d3f0:	7013      	strb	r3, [r2, #0]
    d3f2:	9b03      	ldr	r3, [sp, #12]
    d3f4:	9a22      	ldr	r2, [sp, #136]	; 0x88
    d3f6:	3301      	adds	r3, #1
    d3f8:	6013      	str	r3, [r2, #0]
    d3fa:	9b24      	ldr	r3, [sp, #144]	; 0x90
    d3fc:	2b00      	cmp	r3, #0
    d3fe:	d010      	beq.n	d422 <_dtoa_r+0xbfa>
    d400:	9a04      	ldr	r2, [sp, #16]
    d402:	601a      	str	r2, [r3, #0]
    d404:	e00d      	b.n	d422 <_dtoa_r+0xbfa>
    d406:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d408:	2b00      	cmp	r3, #0
    d40a:	dd00      	ble.n	d40e <_dtoa_r+0xbe6>
    d40c:	e6bd      	b.n	d18a <_dtoa_r+0x962>
    d40e:	9b20      	ldr	r3, [sp, #128]	; 0x80
    d410:	2b02      	cmp	r3, #2
    d412:	dd00      	ble.n	d416 <_dtoa_r+0xbee>
    d414:	e68a      	b.n	d12c <_dtoa_r+0x904>
    d416:	e6b8      	b.n	d18a <_dtoa_r+0x962>
    d418:	9b20      	ldr	r3, [sp, #128]	; 0x80
    d41a:	2b02      	cmp	r3, #2
    d41c:	dd00      	ble.n	d420 <_dtoa_r+0xbf8>
    d41e:	e685      	b.n	d12c <_dtoa_r+0x904>
    d420:	e6b8      	b.n	d194 <_dtoa_r+0x96c>
    d422:	b01b      	add	sp, #108	; 0x6c
    d424:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d426:	46c0      	nop			; (mov r8, r8)

0000d428 <__sflags>:
    d428:	780b      	ldrb	r3, [r1, #0]
    d42a:	b530      	push	{r4, r5, lr}
    d42c:	2b72      	cmp	r3, #114	; 0x72
    d42e:	d00e      	beq.n	d44e <__sflags+0x26>
    d430:	2b77      	cmp	r3, #119	; 0x77
    d432:	d007      	beq.n	d444 <__sflags+0x1c>
    d434:	2b61      	cmp	r3, #97	; 0x61
    d436:	d10e      	bne.n	d456 <__sflags+0x2e>
    d438:	2582      	movs	r5, #130	; 0x82
    d43a:	2084      	movs	r0, #132	; 0x84
    d43c:	00ad      	lsls	r5, r5, #2
    d43e:	2301      	movs	r3, #1
    d440:	0040      	lsls	r0, r0, #1
    d442:	e01b      	b.n	d47c <__sflags+0x54>
    d444:	25c0      	movs	r5, #192	; 0xc0
    d446:	2301      	movs	r3, #1
    d448:	00ed      	lsls	r5, r5, #3
    d44a:	2008      	movs	r0, #8
    d44c:	e016      	b.n	d47c <__sflags+0x54>
    d44e:	2500      	movs	r5, #0
    d450:	2004      	movs	r0, #4
    d452:	1c2b      	adds	r3, r5, #0
    d454:	e012      	b.n	d47c <__sflags+0x54>
    d456:	2316      	movs	r3, #22
    d458:	6003      	str	r3, [r0, #0]
    d45a:	2000      	movs	r0, #0
    d45c:	e01b      	b.n	d496 <__sflags+0x6e>
    d45e:	2c62      	cmp	r4, #98	; 0x62
    d460:	d011      	beq.n	d486 <__sflags+0x5e>
    d462:	2c78      	cmp	r4, #120	; 0x78
    d464:	d012      	beq.n	d48c <__sflags+0x64>
    d466:	2c2b      	cmp	r4, #43	; 0x2b
    d468:	d108      	bne.n	d47c <__sflags+0x54>
    d46a:	3c0f      	subs	r4, #15
    d46c:	43a0      	bics	r0, r4
    d46e:	3c0c      	subs	r4, #12
    d470:	4320      	orrs	r0, r4
    d472:	3c0d      	subs	r4, #13
    d474:	43a3      	bics	r3, r4
    d476:	1c1c      	adds	r4, r3, #0
    d478:	2302      	movs	r3, #2
    d47a:	4323      	orrs	r3, r4
    d47c:	3101      	adds	r1, #1
    d47e:	780c      	ldrb	r4, [r1, #0]
    d480:	2c00      	cmp	r4, #0
    d482:	d1ec      	bne.n	d45e <__sflags+0x36>
    d484:	e005      	b.n	d492 <__sflags+0x6a>
    d486:	2480      	movs	r4, #128	; 0x80
    d488:	0264      	lsls	r4, r4, #9
    d48a:	e7f6      	b.n	d47a <__sflags+0x52>
    d48c:	2480      	movs	r4, #128	; 0x80
    d48e:	0124      	lsls	r4, r4, #4
    d490:	e7f3      	b.n	d47a <__sflags+0x52>
    d492:	432b      	orrs	r3, r5
    d494:	6013      	str	r3, [r2, #0]
    d496:	bd30      	pop	{r4, r5, pc}

0000d498 <_fstat_r>:
    d498:	b538      	push	{r3, r4, r5, lr}
    d49a:	2300      	movs	r3, #0
    d49c:	4c06      	ldr	r4, [pc, #24]	; (d4b8 <_fstat_r+0x20>)
    d49e:	1c05      	adds	r5, r0, #0
    d4a0:	1c08      	adds	r0, r1, #0
    d4a2:	1c11      	adds	r1, r2, #0
    d4a4:	6023      	str	r3, [r4, #0]
    d4a6:	f7f6 fd5b 	bl	3f60 <_fstat>
    d4aa:	1c43      	adds	r3, r0, #1
    d4ac:	d103      	bne.n	d4b6 <_fstat_r+0x1e>
    d4ae:	6823      	ldr	r3, [r4, #0]
    d4b0:	2b00      	cmp	r3, #0
    d4b2:	d000      	beq.n	d4b6 <_fstat_r+0x1e>
    d4b4:	602b      	str	r3, [r5, #0]
    d4b6:	bd38      	pop	{r3, r4, r5, pc}
    d4b8:	200047c8 	.word	0x200047c8

0000d4bc <rshift>:
    d4bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    d4be:	1c06      	adds	r6, r0, #0
    d4c0:	6905      	ldr	r5, [r0, #16]
    d4c2:	3614      	adds	r6, #20
    d4c4:	114a      	asrs	r2, r1, #5
    d4c6:	1c34      	adds	r4, r6, #0
    d4c8:	42aa      	cmp	r2, r5
    d4ca:	da25      	bge.n	d518 <rshift+0x5c>
    d4cc:	231f      	movs	r3, #31
    d4ce:	00ad      	lsls	r5, r5, #2
    d4d0:	0092      	lsls	r2, r2, #2
    d4d2:	4019      	ands	r1, r3
    d4d4:	1975      	adds	r5, r6, r5
    d4d6:	18b2      	adds	r2, r6, r2
    d4d8:	1c33      	adds	r3, r6, #0
    d4da:	2900      	cmp	r1, #0
    d4dc:	d016      	beq.n	d50c <rshift+0x50>
    d4de:	1c13      	adds	r3, r2, #0
    d4e0:	cb04      	ldmia	r3!, {r2}
    d4e2:	2720      	movs	r7, #32
    d4e4:	40ca      	lsrs	r2, r1
    d4e6:	46b4      	mov	ip, r6
    d4e8:	1a7f      	subs	r7, r7, r1
    d4ea:	4664      	mov	r4, ip
    d4ec:	42ab      	cmp	r3, r5
    d4ee:	d208      	bcs.n	d502 <rshift+0x46>
    d4f0:	681c      	ldr	r4, [r3, #0]
    d4f2:	40bc      	lsls	r4, r7
    d4f4:	4322      	orrs	r2, r4
    d4f6:	4664      	mov	r4, ip
    d4f8:	c404      	stmia	r4!, {r2}
    d4fa:	cb04      	ldmia	r3!, {r2}
    d4fc:	46a4      	mov	ip, r4
    d4fe:	40ca      	lsrs	r2, r1
    d500:	e7f3      	b.n	d4ea <rshift+0x2e>
    d502:	6022      	str	r2, [r4, #0]
    d504:	2a00      	cmp	r2, #0
    d506:	d007      	beq.n	d518 <rshift+0x5c>
    d508:	3404      	adds	r4, #4
    d50a:	e005      	b.n	d518 <rshift+0x5c>
    d50c:	1c1c      	adds	r4, r3, #0
    d50e:	42aa      	cmp	r2, r5
    d510:	d202      	bcs.n	d518 <rshift+0x5c>
    d512:	ca02      	ldmia	r2!, {r1}
    d514:	c302      	stmia	r3!, {r1}
    d516:	e7f9      	b.n	d50c <rshift+0x50>
    d518:	1ba3      	subs	r3, r4, r6
    d51a:	109b      	asrs	r3, r3, #2
    d51c:	6103      	str	r3, [r0, #16]
    d51e:	d100      	bne.n	d522 <rshift+0x66>
    d520:	6143      	str	r3, [r0, #20]
    d522:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000d524 <__hexdig_fun>:
    d524:	1c03      	adds	r3, r0, #0
    d526:	3b30      	subs	r3, #48	; 0x30
    d528:	2b09      	cmp	r3, #9
    d52a:	d801      	bhi.n	d530 <__hexdig_fun+0xc>
    d52c:	3820      	subs	r0, #32
    d52e:	e00b      	b.n	d548 <__hexdig_fun+0x24>
    d530:	1c03      	adds	r3, r0, #0
    d532:	3b61      	subs	r3, #97	; 0x61
    d534:	2b05      	cmp	r3, #5
    d536:	d801      	bhi.n	d53c <__hexdig_fun+0x18>
    d538:	3847      	subs	r0, #71	; 0x47
    d53a:	e005      	b.n	d548 <__hexdig_fun+0x24>
    d53c:	1c02      	adds	r2, r0, #0
    d53e:	3a41      	subs	r2, #65	; 0x41
    d540:	2300      	movs	r3, #0
    d542:	2a05      	cmp	r2, #5
    d544:	d801      	bhi.n	d54a <__hexdig_fun+0x26>
    d546:	3827      	subs	r0, #39	; 0x27
    d548:	b2c3      	uxtb	r3, r0
    d54a:	1c18      	adds	r0, r3, #0
    d54c:	4770      	bx	lr

0000d54e <__gethex>:
    d54e:	b5f0      	push	{r4, r5, r6, r7, lr}
    d550:	b08d      	sub	sp, #52	; 0x34
    d552:	9109      	str	r1, [sp, #36]	; 0x24
    d554:	9202      	str	r2, [sp, #8]
    d556:	930a      	str	r3, [sp, #40]	; 0x28
    d558:	9005      	str	r0, [sp, #20]
    d55a:	f000 fad9 	bl	db10 <_localeconv_r>
    d55e:	6803      	ldr	r3, [r0, #0]
    d560:	1c18      	adds	r0, r3, #0
    d562:	9307      	str	r3, [sp, #28]
    d564:	f7fe f822 	bl	b5ac <strlen>
    d568:	9b07      	ldr	r3, [sp, #28]
    d56a:	9004      	str	r0, [sp, #16]
    d56c:	181b      	adds	r3, r3, r0
    d56e:	3b01      	subs	r3, #1
    d570:	781b      	ldrb	r3, [r3, #0]
    d572:	930b      	str	r3, [sp, #44]	; 0x2c
    d574:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d576:	6819      	ldr	r1, [r3, #0]
    d578:	1c8a      	adds	r2, r1, #2
    d57a:	9201      	str	r2, [sp, #4]
    d57c:	9801      	ldr	r0, [sp, #4]
    d57e:	1a53      	subs	r3, r2, r1
    d580:	7800      	ldrb	r0, [r0, #0]
    d582:	3b02      	subs	r3, #2
    d584:	3201      	adds	r2, #1
    d586:	2830      	cmp	r0, #48	; 0x30
    d588:	d0f7      	beq.n	d57a <__gethex+0x2c>
    d58a:	9308      	str	r3, [sp, #32]
    d58c:	f7ff ffca 	bl	d524 <__hexdig_fun>
    d590:	1e06      	subs	r6, r0, #0
    d592:	d120      	bne.n	d5d6 <__gethex+0x88>
    d594:	9801      	ldr	r0, [sp, #4]
    d596:	9907      	ldr	r1, [sp, #28]
    d598:	9a04      	ldr	r2, [sp, #16]
    d59a:	f7fe f80e 	bl	b5ba <strncmp>
    d59e:	2800      	cmp	r0, #0
    d5a0:	d13c      	bne.n	d61c <__gethex+0xce>
    d5a2:	9b01      	ldr	r3, [sp, #4]
    d5a4:	9a04      	ldr	r2, [sp, #16]
    d5a6:	189c      	adds	r4, r3, r2
    d5a8:	7820      	ldrb	r0, [r4, #0]
    d5aa:	f7ff ffbb 	bl	d524 <__hexdig_fun>
    d5ae:	2800      	cmp	r0, #0
    d5b0:	d037      	beq.n	d622 <__gethex+0xd4>
    d5b2:	9401      	str	r4, [sp, #4]
    d5b4:	9b01      	ldr	r3, [sp, #4]
    d5b6:	7818      	ldrb	r0, [r3, #0]
    d5b8:	2830      	cmp	r0, #48	; 0x30
    d5ba:	d103      	bne.n	d5c4 <__gethex+0x76>
    d5bc:	9b01      	ldr	r3, [sp, #4]
    d5be:	3301      	adds	r3, #1
    d5c0:	9301      	str	r3, [sp, #4]
    d5c2:	e7f7      	b.n	d5b4 <__gethex+0x66>
    d5c4:	f7ff ffae 	bl	d524 <__hexdig_fun>
    d5c8:	4243      	negs	r3, r0
    d5ca:	4143      	adcs	r3, r0
    d5cc:	9303      	str	r3, [sp, #12]
    d5ce:	2301      	movs	r3, #1
    d5d0:	1c26      	adds	r6, r4, #0
    d5d2:	9308      	str	r3, [sp, #32]
    d5d4:	e002      	b.n	d5dc <__gethex+0x8e>
    d5d6:	2300      	movs	r3, #0
    d5d8:	1c1e      	adds	r6, r3, #0
    d5da:	9303      	str	r3, [sp, #12]
    d5dc:	9c01      	ldr	r4, [sp, #4]
    d5de:	7820      	ldrb	r0, [r4, #0]
    d5e0:	f7ff ffa0 	bl	d524 <__hexdig_fun>
    d5e4:	2800      	cmp	r0, #0
    d5e6:	d001      	beq.n	d5ec <__gethex+0x9e>
    d5e8:	3401      	adds	r4, #1
    d5ea:	e7f8      	b.n	d5de <__gethex+0x90>
    d5ec:	1c20      	adds	r0, r4, #0
    d5ee:	9907      	ldr	r1, [sp, #28]
    d5f0:	9a04      	ldr	r2, [sp, #16]
    d5f2:	f7fd ffe2 	bl	b5ba <strncmp>
    d5f6:	2800      	cmp	r0, #0
    d5f8:	d10b      	bne.n	d612 <__gethex+0xc4>
    d5fa:	2e00      	cmp	r6, #0
    d5fc:	d10b      	bne.n	d616 <__gethex+0xc8>
    d5fe:	9b04      	ldr	r3, [sp, #16]
    d600:	18e6      	adds	r6, r4, r3
    d602:	1c34      	adds	r4, r6, #0
    d604:	7820      	ldrb	r0, [r4, #0]
    d606:	f7ff ff8d 	bl	d524 <__hexdig_fun>
    d60a:	2800      	cmp	r0, #0
    d60c:	d001      	beq.n	d612 <__gethex+0xc4>
    d60e:	3401      	adds	r4, #1
    d610:	e7f8      	b.n	d604 <__gethex+0xb6>
    d612:	1e37      	subs	r7, r6, #0
    d614:	d008      	beq.n	d628 <__gethex+0xda>
    d616:	1b36      	subs	r6, r6, r4
    d618:	00b7      	lsls	r7, r6, #2
    d61a:	e005      	b.n	d628 <__gethex+0xda>
    d61c:	9c01      	ldr	r4, [sp, #4]
    d61e:	1c37      	adds	r7, r6, #0
    d620:	e000      	b.n	d624 <__gethex+0xd6>
    d622:	1c07      	adds	r7, r0, #0
    d624:	2301      	movs	r3, #1
    d626:	9303      	str	r3, [sp, #12]
    d628:	7823      	ldrb	r3, [r4, #0]
    d62a:	2b50      	cmp	r3, #80	; 0x50
    d62c:	d001      	beq.n	d632 <__gethex+0xe4>
    d62e:	2b70      	cmp	r3, #112	; 0x70
    d630:	d128      	bne.n	d684 <__gethex+0x136>
    d632:	7863      	ldrb	r3, [r4, #1]
    d634:	2b2b      	cmp	r3, #43	; 0x2b
    d636:	d007      	beq.n	d648 <__gethex+0xfa>
    d638:	2b2d      	cmp	r3, #45	; 0x2d
    d63a:	d003      	beq.n	d644 <__gethex+0xf6>
    d63c:	2300      	movs	r3, #0
    d63e:	1c65      	adds	r5, r4, #1
    d640:	9306      	str	r3, [sp, #24]
    d642:	e004      	b.n	d64e <__gethex+0x100>
    d644:	2301      	movs	r3, #1
    d646:	e000      	b.n	d64a <__gethex+0xfc>
    d648:	2300      	movs	r3, #0
    d64a:	9306      	str	r3, [sp, #24]
    d64c:	1ca5      	adds	r5, r4, #2
    d64e:	7828      	ldrb	r0, [r5, #0]
    d650:	f7ff ff68 	bl	d524 <__hexdig_fun>
    d654:	1e43      	subs	r3, r0, #1
    d656:	b2db      	uxtb	r3, r3
    d658:	2b18      	cmp	r3, #24
    d65a:	d813      	bhi.n	d684 <__gethex+0x136>
    d65c:	3810      	subs	r0, #16
    d65e:	3501      	adds	r5, #1
    d660:	1c06      	adds	r6, r0, #0
    d662:	7828      	ldrb	r0, [r5, #0]
    d664:	f7ff ff5e 	bl	d524 <__hexdig_fun>
    d668:	1e43      	subs	r3, r0, #1
    d66a:	b2db      	uxtb	r3, r3
    d66c:	2b18      	cmp	r3, #24
    d66e:	d803      	bhi.n	d678 <__gethex+0x12a>
    d670:	230a      	movs	r3, #10
    d672:	435e      	muls	r6, r3
    d674:	1830      	adds	r0, r6, r0
    d676:	e7f1      	b.n	d65c <__gethex+0x10e>
    d678:	9b06      	ldr	r3, [sp, #24]
    d67a:	2b00      	cmp	r3, #0
    d67c:	d000      	beq.n	d680 <__gethex+0x132>
    d67e:	4276      	negs	r6, r6
    d680:	19bf      	adds	r7, r7, r6
    d682:	e000      	b.n	d686 <__gethex+0x138>
    d684:	1c25      	adds	r5, r4, #0
    d686:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d688:	601d      	str	r5, [r3, #0]
    d68a:	9b03      	ldr	r3, [sp, #12]
    d68c:	2b00      	cmp	r3, #0
    d68e:	d006      	beq.n	d69e <__gethex+0x150>
    d690:	2000      	movs	r0, #0
    d692:	9b08      	ldr	r3, [sp, #32]
    d694:	4283      	cmp	r3, r0
    d696:	d000      	beq.n	d69a <__gethex+0x14c>
    d698:	e17b      	b.n	d992 <__gethex+0x444>
    d69a:	3006      	adds	r0, #6
    d69c:	e179      	b.n	d992 <__gethex+0x444>
    d69e:	9b01      	ldr	r3, [sp, #4]
    d6a0:	9903      	ldr	r1, [sp, #12]
    d6a2:	1ae3      	subs	r3, r4, r3
    d6a4:	3b01      	subs	r3, #1
    d6a6:	2b07      	cmp	r3, #7
    d6a8:	dd02      	ble.n	d6b0 <__gethex+0x162>
    d6aa:	3101      	adds	r1, #1
    d6ac:	105b      	asrs	r3, r3, #1
    d6ae:	e7fa      	b.n	d6a6 <__gethex+0x158>
    d6b0:	9805      	ldr	r0, [sp, #20]
    d6b2:	f000 fa59 	bl	db68 <_Balloc>
    d6b6:	1c03      	adds	r3, r0, #0
    d6b8:	2600      	movs	r6, #0
    d6ba:	1c05      	adds	r5, r0, #0
    d6bc:	3314      	adds	r3, #20
    d6be:	9303      	str	r3, [sp, #12]
    d6c0:	9308      	str	r3, [sp, #32]
    d6c2:	9606      	str	r6, [sp, #24]
    d6c4:	9b01      	ldr	r3, [sp, #4]
    d6c6:	429c      	cmp	r4, r3
    d6c8:	d92a      	bls.n	d720 <__gethex+0x1d2>
    d6ca:	1e63      	subs	r3, r4, #1
    d6cc:	9309      	str	r3, [sp, #36]	; 0x24
    d6ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d6d0:	781b      	ldrb	r3, [r3, #0]
    d6d2:	4293      	cmp	r3, r2
    d6d4:	d009      	beq.n	d6ea <__gethex+0x19c>
    d6d6:	9b06      	ldr	r3, [sp, #24]
    d6d8:	2b20      	cmp	r3, #32
    d6da:	d114      	bne.n	d706 <__gethex+0x1b8>
    d6dc:	9b08      	ldr	r3, [sp, #32]
    d6de:	601e      	str	r6, [r3, #0]
    d6e0:	2600      	movs	r6, #0
    d6e2:	3304      	adds	r3, #4
    d6e4:	9308      	str	r3, [sp, #32]
    d6e6:	9606      	str	r6, [sp, #24]
    d6e8:	e00d      	b.n	d706 <__gethex+0x1b8>
    d6ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d6ec:	9a04      	ldr	r2, [sp, #16]
    d6ee:	1a9c      	subs	r4, r3, r2
    d6f0:	9b01      	ldr	r3, [sp, #4]
    d6f2:	3401      	adds	r4, #1
    d6f4:	429c      	cmp	r4, r3
    d6f6:	d3ee      	bcc.n	d6d6 <__gethex+0x188>
    d6f8:	1c20      	adds	r0, r4, #0
    d6fa:	9907      	ldr	r1, [sp, #28]
    d6fc:	f7fd ff5d 	bl	b5ba <strncmp>
    d700:	2800      	cmp	r0, #0
    d702:	d0df      	beq.n	d6c4 <__gethex+0x176>
    d704:	e7e7      	b.n	d6d6 <__gethex+0x188>
    d706:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d708:	7818      	ldrb	r0, [r3, #0]
    d70a:	f7ff ff0b 	bl	d524 <__hexdig_fun>
    d70e:	230f      	movs	r3, #15
    d710:	4018      	ands	r0, r3
    d712:	9b06      	ldr	r3, [sp, #24]
    d714:	9c09      	ldr	r4, [sp, #36]	; 0x24
    d716:	4098      	lsls	r0, r3
    d718:	3304      	adds	r3, #4
    d71a:	4306      	orrs	r6, r0
    d71c:	9306      	str	r3, [sp, #24]
    d71e:	e7d1      	b.n	d6c4 <__gethex+0x176>
    d720:	9c08      	ldr	r4, [sp, #32]
    d722:	9b03      	ldr	r3, [sp, #12]
    d724:	c440      	stmia	r4!, {r6}
    d726:	1ae4      	subs	r4, r4, r3
    d728:	10a4      	asrs	r4, r4, #2
    d72a:	612c      	str	r4, [r5, #16]
    d72c:	1c30      	adds	r0, r6, #0
    d72e:	f000 fae8 	bl	dd02 <__hi0bits>
    d732:	9b02      	ldr	r3, [sp, #8]
    d734:	0164      	lsls	r4, r4, #5
    d736:	681b      	ldr	r3, [r3, #0]
    d738:	1a26      	subs	r6, r4, r0
    d73a:	9301      	str	r3, [sp, #4]
    d73c:	429e      	cmp	r6, r3
    d73e:	dd25      	ble.n	d78c <__gethex+0x23e>
    d740:	1af6      	subs	r6, r6, r3
    d742:	1c28      	adds	r0, r5, #0
    d744:	1c31      	adds	r1, r6, #0
    d746:	f000 fdf1 	bl	e32c <__any_on>
    d74a:	2400      	movs	r4, #0
    d74c:	42a0      	cmp	r0, r4
    d74e:	d017      	beq.n	d780 <__gethex+0x232>
    d750:	231f      	movs	r3, #31
    d752:	3401      	adds	r4, #1
    d754:	1c20      	adds	r0, r4, #0
    d756:	1e72      	subs	r2, r6, #1
    d758:	4013      	ands	r3, r2
    d75a:	4098      	lsls	r0, r3
    d75c:	1c03      	adds	r3, r0, #0
    d75e:	1151      	asrs	r1, r2, #5
    d760:	9803      	ldr	r0, [sp, #12]
    d762:	0089      	lsls	r1, r1, #2
    d764:	5809      	ldr	r1, [r1, r0]
    d766:	4219      	tst	r1, r3
    d768:	d00a      	beq.n	d780 <__gethex+0x232>
    d76a:	42a2      	cmp	r2, r4
    d76c:	dc01      	bgt.n	d772 <__gethex+0x224>
    d76e:	2402      	movs	r4, #2
    d770:	e006      	b.n	d780 <__gethex+0x232>
    d772:	1eb1      	subs	r1, r6, #2
    d774:	1c28      	adds	r0, r5, #0
    d776:	f000 fdd9 	bl	e32c <__any_on>
    d77a:	2800      	cmp	r0, #0
    d77c:	d0f7      	beq.n	d76e <__gethex+0x220>
    d77e:	2403      	movs	r4, #3
    d780:	1c28      	adds	r0, r5, #0
    d782:	1c31      	adds	r1, r6, #0
    d784:	f7ff fe9a 	bl	d4bc <rshift>
    d788:	19bf      	adds	r7, r7, r6
    d78a:	e00e      	b.n	d7aa <__gethex+0x25c>
    d78c:	9b01      	ldr	r3, [sp, #4]
    d78e:	2400      	movs	r4, #0
    d790:	429e      	cmp	r6, r3
    d792:	da0a      	bge.n	d7aa <__gethex+0x25c>
    d794:	1b9e      	subs	r6, r3, r6
    d796:	1c29      	adds	r1, r5, #0
    d798:	9805      	ldr	r0, [sp, #20]
    d79a:	1c32      	adds	r2, r6, #0
    d79c:	f000 fbe4 	bl	df68 <__lshift>
    d7a0:	1c03      	adds	r3, r0, #0
    d7a2:	1c05      	adds	r5, r0, #0
    d7a4:	3314      	adds	r3, #20
    d7a6:	1bbf      	subs	r7, r7, r6
    d7a8:	9303      	str	r3, [sp, #12]
    d7aa:	9b02      	ldr	r3, [sp, #8]
    d7ac:	689b      	ldr	r3, [r3, #8]
    d7ae:	9304      	str	r3, [sp, #16]
    d7b0:	429f      	cmp	r7, r3
    d7b2:	dd08      	ble.n	d7c6 <__gethex+0x278>
    d7b4:	9805      	ldr	r0, [sp, #20]
    d7b6:	1c29      	adds	r1, r5, #0
    d7b8:	f000 fa0e 	bl	dbd8 <_Bfree>
    d7bc:	2300      	movs	r3, #0
    d7be:	9a12      	ldr	r2, [sp, #72]	; 0x48
    d7c0:	20a3      	movs	r0, #163	; 0xa3
    d7c2:	6013      	str	r3, [r2, #0]
    d7c4:	e0e5      	b.n	d992 <__gethex+0x444>
    d7c6:	9b02      	ldr	r3, [sp, #8]
    d7c8:	685e      	ldr	r6, [r3, #4]
    d7ca:	42b7      	cmp	r7, r6
    d7cc:	da5a      	bge.n	d884 <__gethex+0x336>
    d7ce:	9b01      	ldr	r3, [sp, #4]
    d7d0:	1bf6      	subs	r6, r6, r7
    d7d2:	429e      	cmp	r6, r3
    d7d4:	db32      	blt.n	d83c <__gethex+0x2ee>
    d7d6:	9b02      	ldr	r3, [sp, #8]
    d7d8:	68db      	ldr	r3, [r3, #12]
    d7da:	2b02      	cmp	r3, #2
    d7dc:	d01e      	beq.n	d81c <__gethex+0x2ce>
    d7de:	2b03      	cmp	r3, #3
    d7e0:	d020      	beq.n	d824 <__gethex+0x2d6>
    d7e2:	2b01      	cmp	r3, #1
    d7e4:	d121      	bne.n	d82a <__gethex+0x2dc>
    d7e6:	9b01      	ldr	r3, [sp, #4]
    d7e8:	429e      	cmp	r6, r3
    d7ea:	d11e      	bne.n	d82a <__gethex+0x2dc>
    d7ec:	2b01      	cmp	r3, #1
    d7ee:	dc0d      	bgt.n	d80c <__gethex+0x2be>
    d7f0:	9b02      	ldr	r3, [sp, #8]
    d7f2:	2062      	movs	r0, #98	; 0x62
    d7f4:	685b      	ldr	r3, [r3, #4]
    d7f6:	9301      	str	r3, [sp, #4]
    d7f8:	9a01      	ldr	r2, [sp, #4]
    d7fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d7fc:	601a      	str	r2, [r3, #0]
    d7fe:	2301      	movs	r3, #1
    d800:	9a03      	ldr	r2, [sp, #12]
    d802:	612b      	str	r3, [r5, #16]
    d804:	6013      	str	r3, [r2, #0]
    d806:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d808:	601d      	str	r5, [r3, #0]
    d80a:	e0c2      	b.n	d992 <__gethex+0x444>
    d80c:	9901      	ldr	r1, [sp, #4]
    d80e:	1c28      	adds	r0, r5, #0
    d810:	3901      	subs	r1, #1
    d812:	f000 fd8b 	bl	e32c <__any_on>
    d816:	2800      	cmp	r0, #0
    d818:	d1ea      	bne.n	d7f0 <__gethex+0x2a2>
    d81a:	e006      	b.n	d82a <__gethex+0x2dc>
    d81c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    d81e:	2b00      	cmp	r3, #0
    d820:	d0e6      	beq.n	d7f0 <__gethex+0x2a2>
    d822:	e002      	b.n	d82a <__gethex+0x2dc>
    d824:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    d826:	2b00      	cmp	r3, #0
    d828:	d1e2      	bne.n	d7f0 <__gethex+0x2a2>
    d82a:	9805      	ldr	r0, [sp, #20]
    d82c:	1c29      	adds	r1, r5, #0
    d82e:	f000 f9d3 	bl	dbd8 <_Bfree>
    d832:	2300      	movs	r3, #0
    d834:	9a12      	ldr	r2, [sp, #72]	; 0x48
    d836:	2050      	movs	r0, #80	; 0x50
    d838:	6013      	str	r3, [r2, #0]
    d83a:	e0aa      	b.n	d992 <__gethex+0x444>
    d83c:	1e77      	subs	r7, r6, #1
    d83e:	2c00      	cmp	r4, #0
    d840:	d107      	bne.n	d852 <__gethex+0x304>
    d842:	2f00      	cmp	r7, #0
    d844:	dd06      	ble.n	d854 <__gethex+0x306>
    d846:	1c28      	adds	r0, r5, #0
    d848:	1c39      	adds	r1, r7, #0
    d84a:	f000 fd6f 	bl	e32c <__any_on>
    d84e:	1c04      	adds	r4, r0, #0
    d850:	e000      	b.n	d854 <__gethex+0x306>
    d852:	2401      	movs	r4, #1
    d854:	231f      	movs	r3, #31
    d856:	117a      	asrs	r2, r7, #5
    d858:	401f      	ands	r7, r3
    d85a:	3b1e      	subs	r3, #30
    d85c:	40bb      	lsls	r3, r7
    d85e:	1c1f      	adds	r7, r3, #0
    d860:	9b03      	ldr	r3, [sp, #12]
    d862:	0092      	lsls	r2, r2, #2
    d864:	58d3      	ldr	r3, [r2, r3]
    d866:	423b      	tst	r3, r7
    d868:	d001      	beq.n	d86e <__gethex+0x320>
    d86a:	2302      	movs	r3, #2
    d86c:	431c      	orrs	r4, r3
    d86e:	9b01      	ldr	r3, [sp, #4]
    d870:	1c31      	adds	r1, r6, #0
    d872:	1b9b      	subs	r3, r3, r6
    d874:	1c28      	adds	r0, r5, #0
    d876:	9301      	str	r3, [sp, #4]
    d878:	f7ff fe20 	bl	d4bc <rshift>
    d87c:	9b02      	ldr	r3, [sp, #8]
    d87e:	2602      	movs	r6, #2
    d880:	685f      	ldr	r7, [r3, #4]
    d882:	e000      	b.n	d886 <__gethex+0x338>
    d884:	2601      	movs	r6, #1
    d886:	2c00      	cmp	r4, #0
    d888:	d07e      	beq.n	d988 <__gethex+0x43a>
    d88a:	9b02      	ldr	r3, [sp, #8]
    d88c:	68db      	ldr	r3, [r3, #12]
    d88e:	2b02      	cmp	r3, #2
    d890:	d00b      	beq.n	d8aa <__gethex+0x35c>
    d892:	2b03      	cmp	r3, #3
    d894:	d00d      	beq.n	d8b2 <__gethex+0x364>
    d896:	2b01      	cmp	r3, #1
    d898:	d174      	bne.n	d984 <__gethex+0x436>
    d89a:	07a2      	lsls	r2, r4, #30
    d89c:	d572      	bpl.n	d984 <__gethex+0x436>
    d89e:	9a03      	ldr	r2, [sp, #12]
    d8a0:	6812      	ldr	r2, [r2, #0]
    d8a2:	4314      	orrs	r4, r2
    d8a4:	421c      	tst	r4, r3
    d8a6:	d107      	bne.n	d8b8 <__gethex+0x36a>
    d8a8:	e06c      	b.n	d984 <__gethex+0x436>
    d8aa:	2301      	movs	r3, #1
    d8ac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    d8ae:	1a9b      	subs	r3, r3, r2
    d8b0:	9313      	str	r3, [sp, #76]	; 0x4c
    d8b2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    d8b4:	2b00      	cmp	r3, #0
    d8b6:	d065      	beq.n	d984 <__gethex+0x436>
    d8b8:	692c      	ldr	r4, [r5, #16]
    d8ba:	00a3      	lsls	r3, r4, #2
    d8bc:	9303      	str	r3, [sp, #12]
    d8be:	1c2b      	adds	r3, r5, #0
    d8c0:	9a03      	ldr	r2, [sp, #12]
    d8c2:	3314      	adds	r3, #20
    d8c4:	1899      	adds	r1, r3, r2
    d8c6:	681a      	ldr	r2, [r3, #0]
    d8c8:	1c50      	adds	r0, r2, #1
    d8ca:	d002      	beq.n	d8d2 <__gethex+0x384>
    d8cc:	3201      	adds	r2, #1
    d8ce:	601a      	str	r2, [r3, #0]
    d8d0:	e021      	b.n	d916 <__gethex+0x3c8>
    d8d2:	2200      	movs	r2, #0
    d8d4:	c304      	stmia	r3!, {r2}
    d8d6:	4299      	cmp	r1, r3
    d8d8:	d8f5      	bhi.n	d8c6 <__gethex+0x378>
    d8da:	68ab      	ldr	r3, [r5, #8]
    d8dc:	429c      	cmp	r4, r3
    d8de:	db12      	blt.n	d906 <__gethex+0x3b8>
    d8e0:	686b      	ldr	r3, [r5, #4]
    d8e2:	9805      	ldr	r0, [sp, #20]
    d8e4:	1c59      	adds	r1, r3, #1
    d8e6:	f000 f93f 	bl	db68 <_Balloc>
    d8ea:	1c29      	adds	r1, r5, #0
    d8ec:	692b      	ldr	r3, [r5, #16]
    d8ee:	9004      	str	r0, [sp, #16]
    d8f0:	1c9a      	adds	r2, r3, #2
    d8f2:	310c      	adds	r1, #12
    d8f4:	0092      	lsls	r2, r2, #2
    d8f6:	300c      	adds	r0, #12
    d8f8:	f7fc fad5 	bl	9ea6 <memcpy>
    d8fc:	1c29      	adds	r1, r5, #0
    d8fe:	9805      	ldr	r0, [sp, #20]
    d900:	f000 f96a 	bl	dbd8 <_Bfree>
    d904:	9d04      	ldr	r5, [sp, #16]
    d906:	692b      	ldr	r3, [r5, #16]
    d908:	1c5a      	adds	r2, r3, #1
    d90a:	612a      	str	r2, [r5, #16]
    d90c:	2201      	movs	r2, #1
    d90e:	3304      	adds	r3, #4
    d910:	009b      	lsls	r3, r3, #2
    d912:	18eb      	adds	r3, r5, r3
    d914:	605a      	str	r2, [r3, #4]
    d916:	1c2b      	adds	r3, r5, #0
    d918:	3314      	adds	r3, #20
    d91a:	2e02      	cmp	r6, #2
    d91c:	d111      	bne.n	d942 <__gethex+0x3f4>
    d91e:	9a02      	ldr	r2, [sp, #8]
    d920:	9901      	ldr	r1, [sp, #4]
    d922:	6812      	ldr	r2, [r2, #0]
    d924:	3a01      	subs	r2, #1
    d926:	4291      	cmp	r1, r2
    d928:	d12a      	bne.n	d980 <__gethex+0x432>
    d92a:	114a      	asrs	r2, r1, #5
    d92c:	211f      	movs	r1, #31
    d92e:	9801      	ldr	r0, [sp, #4]
    d930:	0092      	lsls	r2, r2, #2
    d932:	4001      	ands	r1, r0
    d934:	2001      	movs	r0, #1
    d936:	1c04      	adds	r4, r0, #0
    d938:	408c      	lsls	r4, r1
    d93a:	58d3      	ldr	r3, [r2, r3]
    d93c:	4223      	tst	r3, r4
    d93e:	d01f      	beq.n	d980 <__gethex+0x432>
    d940:	e00c      	b.n	d95c <__gethex+0x40e>
    d942:	692a      	ldr	r2, [r5, #16]
    d944:	42a2      	cmp	r2, r4
    d946:	dd0b      	ble.n	d960 <__gethex+0x412>
    d948:	1c28      	adds	r0, r5, #0
    d94a:	2101      	movs	r1, #1
    d94c:	f7ff fdb6 	bl	d4bc <rshift>
    d950:	9b02      	ldr	r3, [sp, #8]
    d952:	3701      	adds	r7, #1
    d954:	689b      	ldr	r3, [r3, #8]
    d956:	429f      	cmp	r7, r3
    d958:	dd00      	ble.n	d95c <__gethex+0x40e>
    d95a:	e72b      	b.n	d7b4 <__gethex+0x266>
    d95c:	2601      	movs	r6, #1
    d95e:	e00f      	b.n	d980 <__gethex+0x432>
    d960:	241f      	movs	r4, #31
    d962:	9a01      	ldr	r2, [sp, #4]
    d964:	2601      	movs	r6, #1
    d966:	4022      	ands	r2, r4
    d968:	1e14      	subs	r4, r2, #0
    d96a:	d009      	beq.n	d980 <__gethex+0x432>
    d96c:	9a03      	ldr	r2, [sp, #12]
    d96e:	189b      	adds	r3, r3, r2
    d970:	3b04      	subs	r3, #4
    d972:	6818      	ldr	r0, [r3, #0]
    d974:	f000 f9c5 	bl	dd02 <__hi0bits>
    d978:	2120      	movs	r1, #32
    d97a:	1b0c      	subs	r4, r1, r4
    d97c:	42a0      	cmp	r0, r4
    d97e:	dbe3      	blt.n	d948 <__gethex+0x3fa>
    d980:	2320      	movs	r3, #32
    d982:	e000      	b.n	d986 <__gethex+0x438>
    d984:	2310      	movs	r3, #16
    d986:	431e      	orrs	r6, r3
    d988:	1c30      	adds	r0, r6, #0
    d98a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d98c:	601d      	str	r5, [r3, #0]
    d98e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d990:	601f      	str	r7, [r3, #0]
    d992:	b00d      	add	sp, #52	; 0x34
    d994:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000d996 <L_shift>:
    d996:	2308      	movs	r3, #8
    d998:	b570      	push	{r4, r5, r6, lr}
    d99a:	2520      	movs	r5, #32
    d99c:	1a9a      	subs	r2, r3, r2
    d99e:	0092      	lsls	r2, r2, #2
    d9a0:	1aad      	subs	r5, r5, r2
    d9a2:	6843      	ldr	r3, [r0, #4]
    d9a4:	6806      	ldr	r6, [r0, #0]
    d9a6:	1c1c      	adds	r4, r3, #0
    d9a8:	40ac      	lsls	r4, r5
    d9aa:	40d3      	lsrs	r3, r2
    d9ac:	4334      	orrs	r4, r6
    d9ae:	6004      	str	r4, [r0, #0]
    d9b0:	6043      	str	r3, [r0, #4]
    d9b2:	3004      	adds	r0, #4
    d9b4:	4288      	cmp	r0, r1
    d9b6:	d3f4      	bcc.n	d9a2 <L_shift+0xc>
    d9b8:	bd70      	pop	{r4, r5, r6, pc}

0000d9ba <__hexnan>:
    d9ba:	b5f0      	push	{r4, r5, r6, r7, lr}
    d9bc:	b089      	sub	sp, #36	; 0x24
    d9be:	9200      	str	r2, [sp, #0]
    d9c0:	680a      	ldr	r2, [r1, #0]
    d9c2:	9900      	ldr	r1, [sp, #0]
    d9c4:	1153      	asrs	r3, r2, #5
    d9c6:	009b      	lsls	r3, r3, #2
    d9c8:	18cb      	adds	r3, r1, r3
    d9ca:	9302      	str	r3, [sp, #8]
    d9cc:	231f      	movs	r3, #31
    d9ce:	401a      	ands	r2, r3
    d9d0:	9007      	str	r0, [sp, #28]
    d9d2:	9205      	str	r2, [sp, #20]
    d9d4:	d002      	beq.n	d9dc <__hexnan+0x22>
    d9d6:	9b02      	ldr	r3, [sp, #8]
    d9d8:	3304      	adds	r3, #4
    d9da:	9302      	str	r3, [sp, #8]
    d9dc:	9b02      	ldr	r3, [sp, #8]
    d9de:	2500      	movs	r5, #0
    d9e0:	1f1e      	subs	r6, r3, #4
    d9e2:	1c37      	adds	r7, r6, #0
    d9e4:	1c34      	adds	r4, r6, #0
    d9e6:	9b07      	ldr	r3, [sp, #28]
    d9e8:	6035      	str	r5, [r6, #0]
    d9ea:	681b      	ldr	r3, [r3, #0]
    d9ec:	9506      	str	r5, [sp, #24]
    d9ee:	9303      	str	r3, [sp, #12]
    d9f0:	9501      	str	r5, [sp, #4]
    d9f2:	9b03      	ldr	r3, [sp, #12]
    d9f4:	3301      	adds	r3, #1
    d9f6:	9303      	str	r3, [sp, #12]
    d9f8:	781b      	ldrb	r3, [r3, #0]
    d9fa:	9304      	str	r3, [sp, #16]
    d9fc:	2b00      	cmp	r3, #0
    d9fe:	d03b      	beq.n	da78 <__hexnan+0xbe>
    da00:	9804      	ldr	r0, [sp, #16]
    da02:	f7ff fd8f 	bl	d524 <__hexdig_fun>
    da06:	2800      	cmp	r0, #0
    da08:	d122      	bne.n	da50 <__hexnan+0x96>
    da0a:	9b04      	ldr	r3, [sp, #16]
    da0c:	2b20      	cmp	r3, #32
    da0e:	d817      	bhi.n	da40 <__hexnan+0x86>
    da10:	9b06      	ldr	r3, [sp, #24]
    da12:	9a01      	ldr	r2, [sp, #4]
    da14:	4293      	cmp	r3, r2
    da16:	daec      	bge.n	d9f2 <__hexnan+0x38>
    da18:	42bc      	cmp	r4, r7
    da1a:	d206      	bcs.n	da2a <__hexnan+0x70>
    da1c:	2d07      	cmp	r5, #7
    da1e:	dc04      	bgt.n	da2a <__hexnan+0x70>
    da20:	1c20      	adds	r0, r4, #0
    da22:	1c39      	adds	r1, r7, #0
    da24:	1c2a      	adds	r2, r5, #0
    da26:	f7ff ffb6 	bl	d996 <L_shift>
    da2a:	9b00      	ldr	r3, [sp, #0]
    da2c:	2508      	movs	r5, #8
    da2e:	429c      	cmp	r4, r3
    da30:	d9df      	bls.n	d9f2 <__hexnan+0x38>
    da32:	2500      	movs	r5, #0
    da34:	9b01      	ldr	r3, [sp, #4]
    da36:	1f27      	subs	r7, r4, #4
    da38:	603d      	str	r5, [r7, #0]
    da3a:	9306      	str	r3, [sp, #24]
    da3c:	1c3c      	adds	r4, r7, #0
    da3e:	e7d8      	b.n	d9f2 <__hexnan+0x38>
    da40:	9b04      	ldr	r3, [sp, #16]
    da42:	2b29      	cmp	r3, #41	; 0x29
    da44:	d14c      	bne.n	dae0 <__hexnan+0x126>
    da46:	9b03      	ldr	r3, [sp, #12]
    da48:	9a07      	ldr	r2, [sp, #28]
    da4a:	3301      	adds	r3, #1
    da4c:	6013      	str	r3, [r2, #0]
    da4e:	e013      	b.n	da78 <__hexnan+0xbe>
    da50:	9b01      	ldr	r3, [sp, #4]
    da52:	3501      	adds	r5, #1
    da54:	3301      	adds	r3, #1
    da56:	9301      	str	r3, [sp, #4]
    da58:	2d08      	cmp	r5, #8
    da5a:	dd06      	ble.n	da6a <__hexnan+0xb0>
    da5c:	9b00      	ldr	r3, [sp, #0]
    da5e:	429c      	cmp	r4, r3
    da60:	d9c7      	bls.n	d9f2 <__hexnan+0x38>
    da62:	2300      	movs	r3, #0
    da64:	2501      	movs	r5, #1
    da66:	3c04      	subs	r4, #4
    da68:	6023      	str	r3, [r4, #0]
    da6a:	6823      	ldr	r3, [r4, #0]
    da6c:	011a      	lsls	r2, r3, #4
    da6e:	230f      	movs	r3, #15
    da70:	4018      	ands	r0, r3
    da72:	4310      	orrs	r0, r2
    da74:	6020      	str	r0, [r4, #0]
    da76:	e7bc      	b.n	d9f2 <__hexnan+0x38>
    da78:	9b01      	ldr	r3, [sp, #4]
    da7a:	2b00      	cmp	r3, #0
    da7c:	d030      	beq.n	dae0 <__hexnan+0x126>
    da7e:	42bc      	cmp	r4, r7
    da80:	d206      	bcs.n	da90 <__hexnan+0xd6>
    da82:	2d07      	cmp	r5, #7
    da84:	dc04      	bgt.n	da90 <__hexnan+0xd6>
    da86:	1c20      	adds	r0, r4, #0
    da88:	1c39      	adds	r1, r7, #0
    da8a:	1c2a      	adds	r2, r5, #0
    da8c:	f7ff ff83 	bl	d996 <L_shift>
    da90:	9b00      	ldr	r3, [sp, #0]
    da92:	429c      	cmp	r4, r3
    da94:	d90a      	bls.n	daac <__hexnan+0xf2>
    da96:	3304      	adds	r3, #4
    da98:	cc02      	ldmia	r4!, {r1}
    da9a:	1f1a      	subs	r2, r3, #4
    da9c:	6011      	str	r1, [r2, #0]
    da9e:	42a6      	cmp	r6, r4
    daa0:	d2f9      	bcs.n	da96 <__hexnan+0xdc>
    daa2:	2200      	movs	r2, #0
    daa4:	c304      	stmia	r3!, {r2}
    daa6:	429e      	cmp	r6, r3
    daa8:	d2fb      	bcs.n	daa2 <__hexnan+0xe8>
    daaa:	e00e      	b.n	daca <__hexnan+0x110>
    daac:	9b05      	ldr	r3, [sp, #20]
    daae:	2b00      	cmp	r3, #0
    dab0:	d00b      	beq.n	daca <__hexnan+0x110>
    dab2:	2220      	movs	r2, #32
    dab4:	9905      	ldr	r1, [sp, #20]
    dab6:	9b02      	ldr	r3, [sp, #8]
    dab8:	1a52      	subs	r2, r2, r1
    daba:	2101      	movs	r1, #1
    dabc:	4249      	negs	r1, r1
    dabe:	40d1      	lsrs	r1, r2
    dac0:	1c0a      	adds	r2, r1, #0
    dac2:	3b04      	subs	r3, #4
    dac4:	6819      	ldr	r1, [r3, #0]
    dac6:	400a      	ands	r2, r1
    dac8:	601a      	str	r2, [r3, #0]
    daca:	6833      	ldr	r3, [r6, #0]
    dacc:	2b00      	cmp	r3, #0
    dace:	d109      	bne.n	dae4 <__hexnan+0x12a>
    dad0:	9b00      	ldr	r3, [sp, #0]
    dad2:	429e      	cmp	r6, r3
    dad4:	d102      	bne.n	dadc <__hexnan+0x122>
    dad6:	2301      	movs	r3, #1
    dad8:	6033      	str	r3, [r6, #0]
    dada:	e003      	b.n	dae4 <__hexnan+0x12a>
    dadc:	3e04      	subs	r6, #4
    dade:	e7f4      	b.n	daca <__hexnan+0x110>
    dae0:	2004      	movs	r0, #4
    dae2:	e000      	b.n	dae6 <__hexnan+0x12c>
    dae4:	2005      	movs	r0, #5
    dae6:	b009      	add	sp, #36	; 0x24
    dae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0000daec <_isatty_r>:
    daec:	b538      	push	{r3, r4, r5, lr}
    daee:	2300      	movs	r3, #0
    daf0:	4c06      	ldr	r4, [pc, #24]	; (db0c <_isatty_r+0x20>)
    daf2:	1c05      	adds	r5, r0, #0
    daf4:	1c08      	adds	r0, r1, #0
    daf6:	6023      	str	r3, [r4, #0]
    daf8:	f7f6 fa0a 	bl	3f10 <_isatty>
    dafc:	1c43      	adds	r3, r0, #1
    dafe:	d103      	bne.n	db08 <_isatty_r+0x1c>
    db00:	6823      	ldr	r3, [r4, #0]
    db02:	2b00      	cmp	r3, #0
    db04:	d000      	beq.n	db08 <_isatty_r+0x1c>
    db06:	602b      	str	r3, [r5, #0]
    db08:	bd38      	pop	{r3, r4, r5, pc}
    db0a:	46c0      	nop			; (mov r8, r8)
    db0c:	200047c8 	.word	0x200047c8

0000db10 <_localeconv_r>:
    db10:	4800      	ldr	r0, [pc, #0]	; (db14 <_localeconv_r+0x4>)
    db12:	4770      	bx	lr
    db14:	2000013c 	.word	0x2000013c

0000db18 <_lseek_r>:
    db18:	b538      	push	{r3, r4, r5, lr}
    db1a:	1c05      	adds	r5, r0, #0
    db1c:	2000      	movs	r0, #0
    db1e:	4c07      	ldr	r4, [pc, #28]	; (db3c <_lseek_r+0x24>)
    db20:	6020      	str	r0, [r4, #0]
    db22:	1c08      	adds	r0, r1, #0
    db24:	1c11      	adds	r1, r2, #0
    db26:	1c1a      	adds	r2, r3, #0
    db28:	f7f6 fa06 	bl	3f38 <_lseek>
    db2c:	1c43      	adds	r3, r0, #1
    db2e:	d103      	bne.n	db38 <_lseek_r+0x20>
    db30:	6823      	ldr	r3, [r4, #0]
    db32:	2b00      	cmp	r3, #0
    db34:	d000      	beq.n	db38 <_lseek_r+0x20>
    db36:	602b      	str	r3, [r5, #0]
    db38:	bd38      	pop	{r3, r4, r5, pc}
    db3a:	46c0      	nop			; (mov r8, r8)
    db3c:	200047c8 	.word	0x200047c8

0000db40 <memmove>:
    db40:	b510      	push	{r4, lr}
    db42:	4281      	cmp	r1, r0
    db44:	d208      	bcs.n	db58 <memmove+0x18>
    db46:	188b      	adds	r3, r1, r2
    db48:	4298      	cmp	r0, r3
    db4a:	d205      	bcs.n	db58 <memmove+0x18>
    db4c:	1a9b      	subs	r3, r3, r2
    db4e:	3a01      	subs	r2, #1
    db50:	d309      	bcc.n	db66 <memmove+0x26>
    db52:	5c99      	ldrb	r1, [r3, r2]
    db54:	5481      	strb	r1, [r0, r2]
    db56:	e7fa      	b.n	db4e <memmove+0xe>
    db58:	2300      	movs	r3, #0
    db5a:	4293      	cmp	r3, r2
    db5c:	d003      	beq.n	db66 <memmove+0x26>
    db5e:	5ccc      	ldrb	r4, [r1, r3]
    db60:	54c4      	strb	r4, [r0, r3]
    db62:	3301      	adds	r3, #1
    db64:	e7f9      	b.n	db5a <memmove+0x1a>
    db66:	bd10      	pop	{r4, pc}

0000db68 <_Balloc>:
    db68:	b570      	push	{r4, r5, r6, lr}
    db6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
    db6c:	1c04      	adds	r4, r0, #0
    db6e:	1c0d      	adds	r5, r1, #0
    db70:	2e00      	cmp	r6, #0
    db72:	d107      	bne.n	db84 <_Balloc+0x1c>
    db74:	2010      	movs	r0, #16
    db76:	f7fc f977 	bl	9e68 <malloc>
    db7a:	6260      	str	r0, [r4, #36]	; 0x24
    db7c:	6046      	str	r6, [r0, #4]
    db7e:	6086      	str	r6, [r0, #8]
    db80:	6006      	str	r6, [r0, #0]
    db82:	60c6      	str	r6, [r0, #12]
    db84:	6a66      	ldr	r6, [r4, #36]	; 0x24
    db86:	68f3      	ldr	r3, [r6, #12]
    db88:	2b00      	cmp	r3, #0
    db8a:	d009      	beq.n	dba0 <_Balloc+0x38>
    db8c:	6a62      	ldr	r2, [r4, #36]	; 0x24
    db8e:	00ab      	lsls	r3, r5, #2
    db90:	68d2      	ldr	r2, [r2, #12]
    db92:	18d3      	adds	r3, r2, r3
    db94:	6818      	ldr	r0, [r3, #0]
    db96:	2800      	cmp	r0, #0
    db98:	d00e      	beq.n	dbb8 <_Balloc+0x50>
    db9a:	6802      	ldr	r2, [r0, #0]
    db9c:	601a      	str	r2, [r3, #0]
    db9e:	e017      	b.n	dbd0 <_Balloc+0x68>
    dba0:	1c20      	adds	r0, r4, #0
    dba2:	2104      	movs	r1, #4
    dba4:	2221      	movs	r2, #33	; 0x21
    dba6:	f000 fbe2 	bl	e36e <_calloc_r>
    dbaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
    dbac:	60f0      	str	r0, [r6, #12]
    dbae:	68db      	ldr	r3, [r3, #12]
    dbb0:	2b00      	cmp	r3, #0
    dbb2:	d1eb      	bne.n	db8c <_Balloc+0x24>
    dbb4:	2000      	movs	r0, #0
    dbb6:	e00e      	b.n	dbd6 <_Balloc+0x6e>
    dbb8:	2101      	movs	r1, #1
    dbba:	1c0e      	adds	r6, r1, #0
    dbbc:	40ae      	lsls	r6, r5
    dbbe:	1d72      	adds	r2, r6, #5
    dbc0:	0092      	lsls	r2, r2, #2
    dbc2:	1c20      	adds	r0, r4, #0
    dbc4:	f000 fbd3 	bl	e36e <_calloc_r>
    dbc8:	2800      	cmp	r0, #0
    dbca:	d0f3      	beq.n	dbb4 <_Balloc+0x4c>
    dbcc:	6045      	str	r5, [r0, #4]
    dbce:	6086      	str	r6, [r0, #8]
    dbd0:	2300      	movs	r3, #0
    dbd2:	6103      	str	r3, [r0, #16]
    dbd4:	60c3      	str	r3, [r0, #12]
    dbd6:	bd70      	pop	{r4, r5, r6, pc}

0000dbd8 <_Bfree>:
    dbd8:	b570      	push	{r4, r5, r6, lr}
    dbda:	6a45      	ldr	r5, [r0, #36]	; 0x24
    dbdc:	1c06      	adds	r6, r0, #0
    dbde:	1c0c      	adds	r4, r1, #0
    dbe0:	2d00      	cmp	r5, #0
    dbe2:	d107      	bne.n	dbf4 <_Bfree+0x1c>
    dbe4:	2010      	movs	r0, #16
    dbe6:	f7fc f93f 	bl	9e68 <malloc>
    dbea:	6270      	str	r0, [r6, #36]	; 0x24
    dbec:	6045      	str	r5, [r0, #4]
    dbee:	6085      	str	r5, [r0, #8]
    dbf0:	6005      	str	r5, [r0, #0]
    dbf2:	60c5      	str	r5, [r0, #12]
    dbf4:	2c00      	cmp	r4, #0
    dbf6:	d007      	beq.n	dc08 <_Bfree+0x30>
    dbf8:	6a72      	ldr	r2, [r6, #36]	; 0x24
    dbfa:	6863      	ldr	r3, [r4, #4]
    dbfc:	68d2      	ldr	r2, [r2, #12]
    dbfe:	009b      	lsls	r3, r3, #2
    dc00:	18d3      	adds	r3, r2, r3
    dc02:	681a      	ldr	r2, [r3, #0]
    dc04:	6022      	str	r2, [r4, #0]
    dc06:	601c      	str	r4, [r3, #0]
    dc08:	bd70      	pop	{r4, r5, r6, pc}

0000dc0a <__multadd>:
    dc0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    dc0c:	1c1e      	adds	r6, r3, #0
    dc0e:	2314      	movs	r3, #20
    dc10:	469c      	mov	ip, r3
    dc12:	1c07      	adds	r7, r0, #0
    dc14:	1c0c      	adds	r4, r1, #0
    dc16:	2000      	movs	r0, #0
    dc18:	690d      	ldr	r5, [r1, #16]
    dc1a:	448c      	add	ip, r1
    dc1c:	4663      	mov	r3, ip
    dc1e:	8819      	ldrh	r1, [r3, #0]
    dc20:	681b      	ldr	r3, [r3, #0]
    dc22:	4351      	muls	r1, r2
    dc24:	0c1b      	lsrs	r3, r3, #16
    dc26:	4353      	muls	r3, r2
    dc28:	1989      	adds	r1, r1, r6
    dc2a:	0c0e      	lsrs	r6, r1, #16
    dc2c:	18f3      	adds	r3, r6, r3
    dc2e:	b289      	uxth	r1, r1
    dc30:	0c1e      	lsrs	r6, r3, #16
    dc32:	041b      	lsls	r3, r3, #16
    dc34:	185b      	adds	r3, r3, r1
    dc36:	4661      	mov	r1, ip
    dc38:	3001      	adds	r0, #1
    dc3a:	c108      	stmia	r1!, {r3}
    dc3c:	468c      	mov	ip, r1
    dc3e:	42a8      	cmp	r0, r5
    dc40:	dbec      	blt.n	dc1c <__multadd+0x12>
    dc42:	2e00      	cmp	r6, #0
    dc44:	d01b      	beq.n	dc7e <__multadd+0x74>
    dc46:	68a3      	ldr	r3, [r4, #8]
    dc48:	429d      	cmp	r5, r3
    dc4a:	db12      	blt.n	dc72 <__multadd+0x68>
    dc4c:	6863      	ldr	r3, [r4, #4]
    dc4e:	1c38      	adds	r0, r7, #0
    dc50:	1c59      	adds	r1, r3, #1
    dc52:	f7ff ff89 	bl	db68 <_Balloc>
    dc56:	1c21      	adds	r1, r4, #0
    dc58:	6923      	ldr	r3, [r4, #16]
    dc5a:	9001      	str	r0, [sp, #4]
    dc5c:	1c9a      	adds	r2, r3, #2
    dc5e:	310c      	adds	r1, #12
    dc60:	0092      	lsls	r2, r2, #2
    dc62:	300c      	adds	r0, #12
    dc64:	f7fc f91f 	bl	9ea6 <memcpy>
    dc68:	1c21      	adds	r1, r4, #0
    dc6a:	1c38      	adds	r0, r7, #0
    dc6c:	f7ff ffb4 	bl	dbd8 <_Bfree>
    dc70:	9c01      	ldr	r4, [sp, #4]
    dc72:	1d2b      	adds	r3, r5, #4
    dc74:	009b      	lsls	r3, r3, #2
    dc76:	18e3      	adds	r3, r4, r3
    dc78:	3501      	adds	r5, #1
    dc7a:	605e      	str	r6, [r3, #4]
    dc7c:	6125      	str	r5, [r4, #16]
    dc7e:	1c20      	adds	r0, r4, #0
    dc80:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000dc82 <__s2b>:
    dc82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    dc84:	1c06      	adds	r6, r0, #0
    dc86:	1c18      	adds	r0, r3, #0
    dc88:	1c0c      	adds	r4, r1, #0
    dc8a:	3008      	adds	r0, #8
    dc8c:	2109      	movs	r1, #9
    dc8e:	9301      	str	r3, [sp, #4]
    dc90:	1c15      	adds	r5, r2, #0
    dc92:	f7f8 fd87 	bl	67a4 <__aeabi_idiv>
    dc96:	2301      	movs	r3, #1
    dc98:	2100      	movs	r1, #0
    dc9a:	4298      	cmp	r0, r3
    dc9c:	dd02      	ble.n	dca4 <__s2b+0x22>
    dc9e:	005b      	lsls	r3, r3, #1
    dca0:	3101      	adds	r1, #1
    dca2:	e7fa      	b.n	dc9a <__s2b+0x18>
    dca4:	1c30      	adds	r0, r6, #0
    dca6:	f7ff ff5f 	bl	db68 <_Balloc>
    dcaa:	9b08      	ldr	r3, [sp, #32]
    dcac:	1c01      	adds	r1, r0, #0
    dcae:	6143      	str	r3, [r0, #20]
    dcb0:	2301      	movs	r3, #1
    dcb2:	6103      	str	r3, [r0, #16]
    dcb4:	2d09      	cmp	r5, #9
    dcb6:	dd12      	ble.n	dcde <__s2b+0x5c>
    dcb8:	1c23      	adds	r3, r4, #0
    dcba:	3309      	adds	r3, #9
    dcbc:	1c1f      	adds	r7, r3, #0
    dcbe:	9300      	str	r3, [sp, #0]
    dcc0:	1964      	adds	r4, r4, r5
    dcc2:	783b      	ldrb	r3, [r7, #0]
    dcc4:	1c30      	adds	r0, r6, #0
    dcc6:	3b30      	subs	r3, #48	; 0x30
    dcc8:	220a      	movs	r2, #10
    dcca:	f7ff ff9e 	bl	dc0a <__multadd>
    dcce:	3701      	adds	r7, #1
    dcd0:	1c01      	adds	r1, r0, #0
    dcd2:	42a7      	cmp	r7, r4
    dcd4:	d1f5      	bne.n	dcc2 <__s2b+0x40>
    dcd6:	9b00      	ldr	r3, [sp, #0]
    dcd8:	195c      	adds	r4, r3, r5
    dcda:	3c08      	subs	r4, #8
    dcdc:	e001      	b.n	dce2 <__s2b+0x60>
    dcde:	2509      	movs	r5, #9
    dce0:	340a      	adds	r4, #10
    dce2:	1c2f      	adds	r7, r5, #0
    dce4:	9b01      	ldr	r3, [sp, #4]
    dce6:	429f      	cmp	r7, r3
    dce8:	da09      	bge.n	dcfe <__s2b+0x7c>
    dcea:	1b63      	subs	r3, r4, r5
    dcec:	5ddb      	ldrb	r3, [r3, r7]
    dcee:	1c30      	adds	r0, r6, #0
    dcf0:	3b30      	subs	r3, #48	; 0x30
    dcf2:	220a      	movs	r2, #10
    dcf4:	f7ff ff89 	bl	dc0a <__multadd>
    dcf8:	3701      	adds	r7, #1
    dcfa:	1c01      	adds	r1, r0, #0
    dcfc:	e7f2      	b.n	dce4 <__s2b+0x62>
    dcfe:	1c08      	adds	r0, r1, #0
    dd00:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000dd02 <__hi0bits>:
    dd02:	2200      	movs	r2, #0
    dd04:	1c03      	adds	r3, r0, #0
    dd06:	0c01      	lsrs	r1, r0, #16
    dd08:	4291      	cmp	r1, r2
    dd0a:	d101      	bne.n	dd10 <__hi0bits+0xe>
    dd0c:	0403      	lsls	r3, r0, #16
    dd0e:	3210      	adds	r2, #16
    dd10:	0e19      	lsrs	r1, r3, #24
    dd12:	d101      	bne.n	dd18 <__hi0bits+0x16>
    dd14:	3208      	adds	r2, #8
    dd16:	021b      	lsls	r3, r3, #8
    dd18:	0f19      	lsrs	r1, r3, #28
    dd1a:	d101      	bne.n	dd20 <__hi0bits+0x1e>
    dd1c:	3204      	adds	r2, #4
    dd1e:	011b      	lsls	r3, r3, #4
    dd20:	0f99      	lsrs	r1, r3, #30
    dd22:	d101      	bne.n	dd28 <__hi0bits+0x26>
    dd24:	3202      	adds	r2, #2
    dd26:	009b      	lsls	r3, r3, #2
    dd28:	1c10      	adds	r0, r2, #0
    dd2a:	2b00      	cmp	r3, #0
    dd2c:	db03      	blt.n	dd36 <__hi0bits+0x34>
    dd2e:	2020      	movs	r0, #32
    dd30:	005b      	lsls	r3, r3, #1
    dd32:	d500      	bpl.n	dd36 <__hi0bits+0x34>
    dd34:	1c50      	adds	r0, r2, #1
    dd36:	4770      	bx	lr

0000dd38 <__lo0bits>:
    dd38:	2207      	movs	r2, #7
    dd3a:	6803      	ldr	r3, [r0, #0]
    dd3c:	b510      	push	{r4, lr}
    dd3e:	1c01      	adds	r1, r0, #0
    dd40:	401a      	ands	r2, r3
    dd42:	d00c      	beq.n	dd5e <__lo0bits+0x26>
    dd44:	2401      	movs	r4, #1
    dd46:	2000      	movs	r0, #0
    dd48:	4223      	tst	r3, r4
    dd4a:	d123      	bne.n	dd94 <__lo0bits+0x5c>
    dd4c:	2202      	movs	r2, #2
    dd4e:	4213      	tst	r3, r2
    dd50:	d003      	beq.n	dd5a <__lo0bits+0x22>
    dd52:	40e3      	lsrs	r3, r4
    dd54:	1c20      	adds	r0, r4, #0
    dd56:	600b      	str	r3, [r1, #0]
    dd58:	e01c      	b.n	dd94 <__lo0bits+0x5c>
    dd5a:	089b      	lsrs	r3, r3, #2
    dd5c:	e018      	b.n	dd90 <__lo0bits+0x58>
    dd5e:	b298      	uxth	r0, r3
    dd60:	2800      	cmp	r0, #0
    dd62:	d101      	bne.n	dd68 <__lo0bits+0x30>
    dd64:	2210      	movs	r2, #16
    dd66:	0c1b      	lsrs	r3, r3, #16
    dd68:	b2d8      	uxtb	r0, r3
    dd6a:	2800      	cmp	r0, #0
    dd6c:	d101      	bne.n	dd72 <__lo0bits+0x3a>
    dd6e:	3208      	adds	r2, #8
    dd70:	0a1b      	lsrs	r3, r3, #8
    dd72:	0718      	lsls	r0, r3, #28
    dd74:	d101      	bne.n	dd7a <__lo0bits+0x42>
    dd76:	3204      	adds	r2, #4
    dd78:	091b      	lsrs	r3, r3, #4
    dd7a:	0798      	lsls	r0, r3, #30
    dd7c:	d101      	bne.n	dd82 <__lo0bits+0x4a>
    dd7e:	3202      	adds	r2, #2
    dd80:	089b      	lsrs	r3, r3, #2
    dd82:	07d8      	lsls	r0, r3, #31
    dd84:	d404      	bmi.n	dd90 <__lo0bits+0x58>
    dd86:	085b      	lsrs	r3, r3, #1
    dd88:	2020      	movs	r0, #32
    dd8a:	2b00      	cmp	r3, #0
    dd8c:	d002      	beq.n	dd94 <__lo0bits+0x5c>
    dd8e:	3201      	adds	r2, #1
    dd90:	1c10      	adds	r0, r2, #0
    dd92:	600b      	str	r3, [r1, #0]
    dd94:	bd10      	pop	{r4, pc}

0000dd96 <__i2b>:
    dd96:	b510      	push	{r4, lr}
    dd98:	1c0c      	adds	r4, r1, #0
    dd9a:	2101      	movs	r1, #1
    dd9c:	f7ff fee4 	bl	db68 <_Balloc>
    dda0:	2301      	movs	r3, #1
    dda2:	6144      	str	r4, [r0, #20]
    dda4:	6103      	str	r3, [r0, #16]
    dda6:	bd10      	pop	{r4, pc}

0000dda8 <__multiply>:
    dda8:	b5f0      	push	{r4, r5, r6, r7, lr}
    ddaa:	690b      	ldr	r3, [r1, #16]
    ddac:	1c14      	adds	r4, r2, #0
    ddae:	6912      	ldr	r2, [r2, #16]
    ddb0:	b089      	sub	sp, #36	; 0x24
    ddb2:	1c0d      	adds	r5, r1, #0
    ddb4:	4293      	cmp	r3, r2
    ddb6:	da01      	bge.n	ddbc <__multiply+0x14>
    ddb8:	1c25      	adds	r5, r4, #0
    ddba:	1c0c      	adds	r4, r1, #0
    ddbc:	692f      	ldr	r7, [r5, #16]
    ddbe:	6926      	ldr	r6, [r4, #16]
    ddc0:	68aa      	ldr	r2, [r5, #8]
    ddc2:	19bb      	adds	r3, r7, r6
    ddc4:	6869      	ldr	r1, [r5, #4]
    ddc6:	9300      	str	r3, [sp, #0]
    ddc8:	4293      	cmp	r3, r2
    ddca:	dd00      	ble.n	ddce <__multiply+0x26>
    ddcc:	3101      	adds	r1, #1
    ddce:	f7ff fecb 	bl	db68 <_Balloc>
    ddd2:	1c01      	adds	r1, r0, #0
    ddd4:	9b00      	ldr	r3, [sp, #0]
    ddd6:	3114      	adds	r1, #20
    ddd8:	4684      	mov	ip, r0
    ddda:	0098      	lsls	r0, r3, #2
    dddc:	1c0b      	adds	r3, r1, #0
    ddde:	1808      	adds	r0, r1, r0
    dde0:	4283      	cmp	r3, r0
    dde2:	d202      	bcs.n	ddea <__multiply+0x42>
    dde4:	2200      	movs	r2, #0
    dde6:	c304      	stmia	r3!, {r2}
    dde8:	e7fa      	b.n	dde0 <__multiply+0x38>
    ddea:	3514      	adds	r5, #20
    ddec:	00bf      	lsls	r7, r7, #2
    ddee:	19eb      	adds	r3, r5, r7
    ddf0:	3414      	adds	r4, #20
    ddf2:	00b6      	lsls	r6, r6, #2
    ddf4:	9304      	str	r3, [sp, #16]
    ddf6:	19a3      	adds	r3, r4, r6
    ddf8:	9502      	str	r5, [sp, #8]
    ddfa:	9306      	str	r3, [sp, #24]
    ddfc:	9b06      	ldr	r3, [sp, #24]
    ddfe:	429c      	cmp	r4, r3
    de00:	d256      	bcs.n	deb0 <__multiply+0x108>
    de02:	8823      	ldrh	r3, [r4, #0]
    de04:	9303      	str	r3, [sp, #12]
    de06:	2b00      	cmp	r3, #0
    de08:	d022      	beq.n	de50 <__multiply+0xa8>
    de0a:	1c0e      	adds	r6, r1, #0
    de0c:	2700      	movs	r7, #0
    de0e:	9b02      	ldr	r3, [sp, #8]
    de10:	9301      	str	r3, [sp, #4]
    de12:	9b01      	ldr	r3, [sp, #4]
    de14:	9d03      	ldr	r5, [sp, #12]
    de16:	cb04      	ldmia	r3!, {r2}
    de18:	9605      	str	r6, [sp, #20]
    de1a:	9301      	str	r3, [sp, #4]
    de1c:	8833      	ldrh	r3, [r6, #0]
    de1e:	9307      	str	r3, [sp, #28]
    de20:	b293      	uxth	r3, r2
    de22:	436b      	muls	r3, r5
    de24:	9d07      	ldr	r5, [sp, #28]
    de26:	0c12      	lsrs	r2, r2, #16
    de28:	18eb      	adds	r3, r5, r3
    de2a:	6835      	ldr	r5, [r6, #0]
    de2c:	19db      	adds	r3, r3, r7
    de2e:	0c2f      	lsrs	r7, r5, #16
    de30:	9d03      	ldr	r5, [sp, #12]
    de32:	436a      	muls	r2, r5
    de34:	18ba      	adds	r2, r7, r2
    de36:	0c1f      	lsrs	r7, r3, #16
    de38:	19d2      	adds	r2, r2, r7
    de3a:	0c17      	lsrs	r7, r2, #16
    de3c:	b29b      	uxth	r3, r3
    de3e:	0412      	lsls	r2, r2, #16
    de40:	4313      	orrs	r3, r2
    de42:	c608      	stmia	r6!, {r3}
    de44:	9a01      	ldr	r2, [sp, #4]
    de46:	9b04      	ldr	r3, [sp, #16]
    de48:	429a      	cmp	r2, r3
    de4a:	d3e2      	bcc.n	de12 <__multiply+0x6a>
    de4c:	9b05      	ldr	r3, [sp, #20]
    de4e:	605f      	str	r7, [r3, #4]
    de50:	6823      	ldr	r3, [r4, #0]
    de52:	0c1b      	lsrs	r3, r3, #16
    de54:	9301      	str	r3, [sp, #4]
    de56:	d021      	beq.n	de9c <__multiply+0xf4>
    de58:	2200      	movs	r2, #0
    de5a:	1c0d      	adds	r5, r1, #0
    de5c:	680b      	ldr	r3, [r1, #0]
    de5e:	9f02      	ldr	r7, [sp, #8]
    de60:	9203      	str	r2, [sp, #12]
    de62:	883e      	ldrh	r6, [r7, #0]
    de64:	9a01      	ldr	r2, [sp, #4]
    de66:	b29b      	uxth	r3, r3
    de68:	4356      	muls	r6, r2
    de6a:	682a      	ldr	r2, [r5, #0]
    de6c:	9505      	str	r5, [sp, #20]
    de6e:	0c12      	lsrs	r2, r2, #16
    de70:	18b2      	adds	r2, r6, r2
    de72:	9e03      	ldr	r6, [sp, #12]
    de74:	1992      	adds	r2, r2, r6
    de76:	0416      	lsls	r6, r2, #16
    de78:	4333      	orrs	r3, r6
    de7a:	602b      	str	r3, [r5, #0]
    de7c:	cf08      	ldmia	r7!, {r3}
    de7e:	9e01      	ldr	r6, [sp, #4]
    de80:	0c1b      	lsrs	r3, r3, #16
    de82:	4373      	muls	r3, r6
    de84:	88ae      	ldrh	r6, [r5, #4]
    de86:	0c12      	lsrs	r2, r2, #16
    de88:	199b      	adds	r3, r3, r6
    de8a:	189b      	adds	r3, r3, r2
    de8c:	0c1a      	lsrs	r2, r3, #16
    de8e:	9203      	str	r2, [sp, #12]
    de90:	9a04      	ldr	r2, [sp, #16]
    de92:	3504      	adds	r5, #4
    de94:	42ba      	cmp	r2, r7
    de96:	d8e4      	bhi.n	de62 <__multiply+0xba>
    de98:	9a05      	ldr	r2, [sp, #20]
    de9a:	6053      	str	r3, [r2, #4]
    de9c:	3404      	adds	r4, #4
    de9e:	3104      	adds	r1, #4
    dea0:	e7ac      	b.n	ddfc <__multiply+0x54>
    dea2:	3804      	subs	r0, #4
    dea4:	6803      	ldr	r3, [r0, #0]
    dea6:	2b00      	cmp	r3, #0
    dea8:	d105      	bne.n	deb6 <__multiply+0x10e>
    deaa:	9b00      	ldr	r3, [sp, #0]
    deac:	3b01      	subs	r3, #1
    deae:	9300      	str	r3, [sp, #0]
    deb0:	9b00      	ldr	r3, [sp, #0]
    deb2:	2b00      	cmp	r3, #0
    deb4:	dcf5      	bgt.n	dea2 <__multiply+0xfa>
    deb6:	4663      	mov	r3, ip
    deb8:	4660      	mov	r0, ip
    deba:	9a00      	ldr	r2, [sp, #0]
    debc:	611a      	str	r2, [r3, #16]
    debe:	b009      	add	sp, #36	; 0x24
    dec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0000dec4 <__pow5mult>:
    dec4:	2303      	movs	r3, #3
    dec6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    dec8:	4013      	ands	r3, r2
    deca:	1c05      	adds	r5, r0, #0
    decc:	1c0e      	adds	r6, r1, #0
    dece:	1c14      	adds	r4, r2, #0
    ded0:	2b00      	cmp	r3, #0
    ded2:	d007      	beq.n	dee4 <__pow5mult+0x20>
    ded4:	4a22      	ldr	r2, [pc, #136]	; (df60 <__pow5mult+0x9c>)
    ded6:	3b01      	subs	r3, #1
    ded8:	009b      	lsls	r3, r3, #2
    deda:	589a      	ldr	r2, [r3, r2]
    dedc:	2300      	movs	r3, #0
    dede:	f7ff fe94 	bl	dc0a <__multadd>
    dee2:	1c06      	adds	r6, r0, #0
    dee4:	10a3      	asrs	r3, r4, #2
    dee6:	9301      	str	r3, [sp, #4]
    dee8:	d037      	beq.n	df5a <__pow5mult+0x96>
    deea:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    deec:	2c00      	cmp	r4, #0
    deee:	d107      	bne.n	df00 <__pow5mult+0x3c>
    def0:	2010      	movs	r0, #16
    def2:	f7fb ffb9 	bl	9e68 <malloc>
    def6:	6268      	str	r0, [r5, #36]	; 0x24
    def8:	6044      	str	r4, [r0, #4]
    defa:	6084      	str	r4, [r0, #8]
    defc:	6004      	str	r4, [r0, #0]
    defe:	60c4      	str	r4, [r0, #12]
    df00:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    df02:	68bc      	ldr	r4, [r7, #8]
    df04:	2c00      	cmp	r4, #0
    df06:	d110      	bne.n	df2a <__pow5mult+0x66>
    df08:	1c28      	adds	r0, r5, #0
    df0a:	4916      	ldr	r1, [pc, #88]	; (df64 <__pow5mult+0xa0>)
    df0c:	f7ff ff43 	bl	dd96 <__i2b>
    df10:	2300      	movs	r3, #0
    df12:	60b8      	str	r0, [r7, #8]
    df14:	1c04      	adds	r4, r0, #0
    df16:	6003      	str	r3, [r0, #0]
    df18:	e007      	b.n	df2a <__pow5mult+0x66>
    df1a:	9b01      	ldr	r3, [sp, #4]
    df1c:	105b      	asrs	r3, r3, #1
    df1e:	9301      	str	r3, [sp, #4]
    df20:	d01b      	beq.n	df5a <__pow5mult+0x96>
    df22:	6820      	ldr	r0, [r4, #0]
    df24:	2800      	cmp	r0, #0
    df26:	d00f      	beq.n	df48 <__pow5mult+0x84>
    df28:	1c04      	adds	r4, r0, #0
    df2a:	9b01      	ldr	r3, [sp, #4]
    df2c:	07db      	lsls	r3, r3, #31
    df2e:	d5f4      	bpl.n	df1a <__pow5mult+0x56>
    df30:	1c31      	adds	r1, r6, #0
    df32:	1c22      	adds	r2, r4, #0
    df34:	1c28      	adds	r0, r5, #0
    df36:	f7ff ff37 	bl	dda8 <__multiply>
    df3a:	1c07      	adds	r7, r0, #0
    df3c:	1c31      	adds	r1, r6, #0
    df3e:	1c28      	adds	r0, r5, #0
    df40:	f7ff fe4a 	bl	dbd8 <_Bfree>
    df44:	1c3e      	adds	r6, r7, #0
    df46:	e7e8      	b.n	df1a <__pow5mult+0x56>
    df48:	1c28      	adds	r0, r5, #0
    df4a:	1c21      	adds	r1, r4, #0
    df4c:	1c22      	adds	r2, r4, #0
    df4e:	f7ff ff2b 	bl	dda8 <__multiply>
    df52:	2300      	movs	r3, #0
    df54:	6020      	str	r0, [r4, #0]
    df56:	6003      	str	r3, [r0, #0]
    df58:	e7e6      	b.n	df28 <__pow5mult+0x64>
    df5a:	1c30      	adds	r0, r6, #0
    df5c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    df5e:	46c0      	nop			; (mov r8, r8)
    df60:	0000fd20 	.word	0x0000fd20
    df64:	00000271 	.word	0x00000271

0000df68 <__lshift>:
    df68:	b5f0      	push	{r4, r5, r6, r7, lr}
    df6a:	1c0c      	adds	r4, r1, #0
    df6c:	1c17      	adds	r7, r2, #0
    df6e:	6923      	ldr	r3, [r4, #16]
    df70:	1155      	asrs	r5, r2, #5
    df72:	b085      	sub	sp, #20
    df74:	18eb      	adds	r3, r5, r3
    df76:	9301      	str	r3, [sp, #4]
    df78:	3301      	adds	r3, #1
    df7a:	9300      	str	r3, [sp, #0]
    df7c:	6849      	ldr	r1, [r1, #4]
    df7e:	68a3      	ldr	r3, [r4, #8]
    df80:	9002      	str	r0, [sp, #8]
    df82:	9a00      	ldr	r2, [sp, #0]
    df84:	429a      	cmp	r2, r3
    df86:	dd02      	ble.n	df8e <__lshift+0x26>
    df88:	3101      	adds	r1, #1
    df8a:	005b      	lsls	r3, r3, #1
    df8c:	e7f9      	b.n	df82 <__lshift+0x1a>
    df8e:	9802      	ldr	r0, [sp, #8]
    df90:	f7ff fdea 	bl	db68 <_Balloc>
    df94:	1c02      	adds	r2, r0, #0
    df96:	1c06      	adds	r6, r0, #0
    df98:	2300      	movs	r3, #0
    df9a:	3214      	adds	r2, #20
    df9c:	42ab      	cmp	r3, r5
    df9e:	da04      	bge.n	dfaa <__lshift+0x42>
    dfa0:	2000      	movs	r0, #0
    dfa2:	0099      	lsls	r1, r3, #2
    dfa4:	5050      	str	r0, [r2, r1]
    dfa6:	3301      	adds	r3, #1
    dfa8:	e7f8      	b.n	df9c <__lshift+0x34>
    dfaa:	43eb      	mvns	r3, r5
    dfac:	17db      	asrs	r3, r3, #31
    dfae:	401d      	ands	r5, r3
    dfb0:	1c23      	adds	r3, r4, #0
    dfb2:	00ad      	lsls	r5, r5, #2
    dfb4:	1955      	adds	r5, r2, r5
    dfb6:	6922      	ldr	r2, [r4, #16]
    dfb8:	3314      	adds	r3, #20
    dfba:	0092      	lsls	r2, r2, #2
    dfbc:	189a      	adds	r2, r3, r2
    dfbe:	4694      	mov	ip, r2
    dfc0:	221f      	movs	r2, #31
    dfc2:	4017      	ands	r7, r2
    dfc4:	d014      	beq.n	dff0 <__lshift+0x88>
    dfc6:	3201      	adds	r2, #1
    dfc8:	1bd2      	subs	r2, r2, r7
    dfca:	9203      	str	r2, [sp, #12]
    dfcc:	2200      	movs	r2, #0
    dfce:	6819      	ldr	r1, [r3, #0]
    dfd0:	1c28      	adds	r0, r5, #0
    dfd2:	40b9      	lsls	r1, r7
    dfd4:	430a      	orrs	r2, r1
    dfd6:	c504      	stmia	r5!, {r2}
    dfd8:	cb04      	ldmia	r3!, {r2}
    dfda:	9903      	ldr	r1, [sp, #12]
    dfdc:	40ca      	lsrs	r2, r1
    dfde:	459c      	cmp	ip, r3
    dfe0:	d8f5      	bhi.n	dfce <__lshift+0x66>
    dfe2:	6042      	str	r2, [r0, #4]
    dfe4:	2a00      	cmp	r2, #0
    dfe6:	d007      	beq.n	dff8 <__lshift+0x90>
    dfe8:	9b01      	ldr	r3, [sp, #4]
    dfea:	3302      	adds	r3, #2
    dfec:	9300      	str	r3, [sp, #0]
    dfee:	e003      	b.n	dff8 <__lshift+0x90>
    dff0:	cb04      	ldmia	r3!, {r2}
    dff2:	c504      	stmia	r5!, {r2}
    dff4:	459c      	cmp	ip, r3
    dff6:	d8fb      	bhi.n	dff0 <__lshift+0x88>
    dff8:	9b00      	ldr	r3, [sp, #0]
    dffa:	9802      	ldr	r0, [sp, #8]
    dffc:	3b01      	subs	r3, #1
    dffe:	6133      	str	r3, [r6, #16]
    e000:	1c21      	adds	r1, r4, #0
    e002:	f7ff fde9 	bl	dbd8 <_Bfree>
    e006:	1c30      	adds	r0, r6, #0
    e008:	b005      	add	sp, #20
    e00a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000e00c <__mcmp>:
    e00c:	6903      	ldr	r3, [r0, #16]
    e00e:	690a      	ldr	r2, [r1, #16]
    e010:	b510      	push	{r4, lr}
    e012:	1a9b      	subs	r3, r3, r2
    e014:	1c04      	adds	r4, r0, #0
    e016:	1e18      	subs	r0, r3, #0
    e018:	d112      	bne.n	e040 <__mcmp+0x34>
    e01a:	0093      	lsls	r3, r2, #2
    e01c:	3414      	adds	r4, #20
    e01e:	3114      	adds	r1, #20
    e020:	18e2      	adds	r2, r4, r3
    e022:	18c9      	adds	r1, r1, r3
    e024:	3a04      	subs	r2, #4
    e026:	3904      	subs	r1, #4
    e028:	6813      	ldr	r3, [r2, #0]
    e02a:	6808      	ldr	r0, [r1, #0]
    e02c:	4283      	cmp	r3, r0
    e02e:	d004      	beq.n	e03a <__mcmp+0x2e>
    e030:	4283      	cmp	r3, r0
    e032:	419b      	sbcs	r3, r3
    e034:	2001      	movs	r0, #1
    e036:	4318      	orrs	r0, r3
    e038:	e002      	b.n	e040 <__mcmp+0x34>
    e03a:	42a2      	cmp	r2, r4
    e03c:	d8f2      	bhi.n	e024 <__mcmp+0x18>
    e03e:	2000      	movs	r0, #0
    e040:	bd10      	pop	{r4, pc}

0000e042 <__mdiff>:
    e042:	b5f0      	push	{r4, r5, r6, r7, lr}
    e044:	1c07      	adds	r7, r0, #0
    e046:	b085      	sub	sp, #20
    e048:	1c08      	adds	r0, r1, #0
    e04a:	1c0c      	adds	r4, r1, #0
    e04c:	1c11      	adds	r1, r2, #0
    e04e:	1c15      	adds	r5, r2, #0
    e050:	f7ff ffdc 	bl	e00c <__mcmp>
    e054:	1e06      	subs	r6, r0, #0
    e056:	d107      	bne.n	e068 <__mdiff+0x26>
    e058:	1c38      	adds	r0, r7, #0
    e05a:	1c31      	adds	r1, r6, #0
    e05c:	f7ff fd84 	bl	db68 <_Balloc>
    e060:	2301      	movs	r3, #1
    e062:	6146      	str	r6, [r0, #20]
    e064:	6103      	str	r3, [r0, #16]
    e066:	e055      	b.n	e114 <__mdiff+0xd2>
    e068:	2300      	movs	r3, #0
    e06a:	9301      	str	r3, [sp, #4]
    e06c:	4298      	cmp	r0, r3
    e06e:	da04      	bge.n	e07a <__mdiff+0x38>
    e070:	1c23      	adds	r3, r4, #0
    e072:	1c2c      	adds	r4, r5, #0
    e074:	1c1d      	adds	r5, r3, #0
    e076:	2301      	movs	r3, #1
    e078:	9301      	str	r3, [sp, #4]
    e07a:	1c38      	adds	r0, r7, #0
    e07c:	6861      	ldr	r1, [r4, #4]
    e07e:	f7ff fd73 	bl	db68 <_Balloc>
    e082:	9b01      	ldr	r3, [sp, #4]
    e084:	6926      	ldr	r6, [r4, #16]
    e086:	1c2f      	adds	r7, r5, #0
    e088:	60c3      	str	r3, [r0, #12]
    e08a:	3414      	adds	r4, #20
    e08c:	00b3      	lsls	r3, r6, #2
    e08e:	18e3      	adds	r3, r4, r3
    e090:	1c02      	adds	r2, r0, #0
    e092:	9302      	str	r3, [sp, #8]
    e094:	692b      	ldr	r3, [r5, #16]
    e096:	2500      	movs	r5, #0
    e098:	3714      	adds	r7, #20
    e09a:	009b      	lsls	r3, r3, #2
    e09c:	18fb      	adds	r3, r7, r3
    e09e:	9303      	str	r3, [sp, #12]
    e0a0:	3214      	adds	r2, #20
    e0a2:	cc08      	ldmia	r4!, {r3}
    e0a4:	4669      	mov	r1, sp
    e0a6:	469c      	mov	ip, r3
    e0a8:	cf08      	ldmia	r7!, {r3}
    e0aa:	3204      	adds	r2, #4
    e0ac:	9300      	str	r3, [sp, #0]
    e0ae:	4663      	mov	r3, ip
    e0b0:	808b      	strh	r3, [r1, #4]
    e0b2:	888b      	ldrh	r3, [r1, #4]
    e0b4:	195d      	adds	r5, r3, r5
    e0b6:	9b00      	ldr	r3, [sp, #0]
    e0b8:	b29b      	uxth	r3, r3
    e0ba:	1aeb      	subs	r3, r5, r3
    e0bc:	4665      	mov	r5, ip
    e0be:	9301      	str	r3, [sp, #4]
    e0c0:	9b00      	ldr	r3, [sp, #0]
    e0c2:	0c2d      	lsrs	r5, r5, #16
    e0c4:	0c19      	lsrs	r1, r3, #16
    e0c6:	9b01      	ldr	r3, [sp, #4]
    e0c8:	1a69      	subs	r1, r5, r1
    e0ca:	141d      	asrs	r5, r3, #16
    e0cc:	1f13      	subs	r3, r2, #4
    e0ce:	469c      	mov	ip, r3
    e0d0:	466b      	mov	r3, sp
    e0d2:	1949      	adds	r1, r1, r5
    e0d4:	889b      	ldrh	r3, [r3, #4]
    e0d6:	140d      	asrs	r5, r1, #16
    e0d8:	0409      	lsls	r1, r1, #16
    e0da:	430b      	orrs	r3, r1
    e0dc:	4661      	mov	r1, ip
    e0de:	600b      	str	r3, [r1, #0]
    e0e0:	9b03      	ldr	r3, [sp, #12]
    e0e2:	429f      	cmp	r7, r3
    e0e4:	d3dd      	bcc.n	e0a2 <__mdiff+0x60>
    e0e6:	9902      	ldr	r1, [sp, #8]
    e0e8:	1c13      	adds	r3, r2, #0
    e0ea:	428c      	cmp	r4, r1
    e0ec:	d20b      	bcs.n	e106 <__mdiff+0xc4>
    e0ee:	cc08      	ldmia	r4!, {r3}
    e0f0:	b299      	uxth	r1, r3
    e0f2:	1949      	adds	r1, r1, r5
    e0f4:	140d      	asrs	r5, r1, #16
    e0f6:	0c1b      	lsrs	r3, r3, #16
    e0f8:	18eb      	adds	r3, r5, r3
    e0fa:	141d      	asrs	r5, r3, #16
    e0fc:	b289      	uxth	r1, r1
    e0fe:	041b      	lsls	r3, r3, #16
    e100:	430b      	orrs	r3, r1
    e102:	c208      	stmia	r2!, {r3}
    e104:	e7ef      	b.n	e0e6 <__mdiff+0xa4>
    e106:	3b04      	subs	r3, #4
    e108:	681a      	ldr	r2, [r3, #0]
    e10a:	2a00      	cmp	r2, #0
    e10c:	d101      	bne.n	e112 <__mdiff+0xd0>
    e10e:	3e01      	subs	r6, #1
    e110:	e7f9      	b.n	e106 <__mdiff+0xc4>
    e112:	6106      	str	r6, [r0, #16]
    e114:	b005      	add	sp, #20
    e116:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000e118 <__ulp>:
    e118:	4b0f      	ldr	r3, [pc, #60]	; (e158 <__ulp+0x40>)
    e11a:	b510      	push	{r4, lr}
    e11c:	4019      	ands	r1, r3
    e11e:	4b0f      	ldr	r3, [pc, #60]	; (e15c <__ulp+0x44>)
    e120:	18c9      	adds	r1, r1, r3
    e122:	2900      	cmp	r1, #0
    e124:	dd02      	ble.n	e12c <__ulp+0x14>
    e126:	2200      	movs	r2, #0
    e128:	1c0b      	adds	r3, r1, #0
    e12a:	e011      	b.n	e150 <__ulp+0x38>
    e12c:	4249      	negs	r1, r1
    e12e:	1509      	asrs	r1, r1, #20
    e130:	2200      	movs	r2, #0
    e132:	2300      	movs	r3, #0
    e134:	2913      	cmp	r1, #19
    e136:	dc04      	bgt.n	e142 <__ulp+0x2a>
    e138:	2080      	movs	r0, #128	; 0x80
    e13a:	0300      	lsls	r0, r0, #12
    e13c:	4108      	asrs	r0, r1
    e13e:	1c03      	adds	r3, r0, #0
    e140:	e006      	b.n	e150 <__ulp+0x38>
    e142:	2001      	movs	r0, #1
    e144:	2932      	cmp	r1, #50	; 0x32
    e146:	dc02      	bgt.n	e14e <__ulp+0x36>
    e148:	2433      	movs	r4, #51	; 0x33
    e14a:	1a61      	subs	r1, r4, r1
    e14c:	4088      	lsls	r0, r1
    e14e:	1c02      	adds	r2, r0, #0
    e150:	1c10      	adds	r0, r2, #0
    e152:	1c19      	adds	r1, r3, #0
    e154:	bd10      	pop	{r4, pc}
    e156:	46c0      	nop			; (mov r8, r8)
    e158:	7ff00000 	.word	0x7ff00000
    e15c:	fcc00000 	.word	0xfcc00000

0000e160 <__b2d>:
    e160:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e162:	1c06      	adds	r6, r0, #0
    e164:	6903      	ldr	r3, [r0, #16]
    e166:	3614      	adds	r6, #20
    e168:	009b      	lsls	r3, r3, #2
    e16a:	18f3      	adds	r3, r6, r3
    e16c:	1f1d      	subs	r5, r3, #4
    e16e:	682c      	ldr	r4, [r5, #0]
    e170:	1c0f      	adds	r7, r1, #0
    e172:	1c20      	adds	r0, r4, #0
    e174:	9301      	str	r3, [sp, #4]
    e176:	f7ff fdc4 	bl	dd02 <__hi0bits>
    e17a:	2320      	movs	r3, #32
    e17c:	1a1b      	subs	r3, r3, r0
    e17e:	603b      	str	r3, [r7, #0]
    e180:	491f      	ldr	r1, [pc, #124]	; (e200 <__b2d+0xa0>)
    e182:	280a      	cmp	r0, #10
    e184:	dc13      	bgt.n	e1ae <__b2d+0x4e>
    e186:	230b      	movs	r3, #11
    e188:	1c27      	adds	r7, r4, #0
    e18a:	1a1b      	subs	r3, r3, r0
    e18c:	40df      	lsrs	r7, r3
    e18e:	4339      	orrs	r1, r7
    e190:	469c      	mov	ip, r3
    e192:	1c0b      	adds	r3, r1, #0
    e194:	2100      	movs	r1, #0
    e196:	42b5      	cmp	r5, r6
    e198:	d902      	bls.n	e1a0 <__b2d+0x40>
    e19a:	9901      	ldr	r1, [sp, #4]
    e19c:	3908      	subs	r1, #8
    e19e:	6809      	ldr	r1, [r1, #0]
    e1a0:	4665      	mov	r5, ip
    e1a2:	3015      	adds	r0, #21
    e1a4:	40e9      	lsrs	r1, r5
    e1a6:	4084      	lsls	r4, r0
    e1a8:	4321      	orrs	r1, r4
    e1aa:	1c0a      	adds	r2, r1, #0
    e1ac:	e024      	b.n	e1f8 <__b2d+0x98>
    e1ae:	2700      	movs	r7, #0
    e1b0:	42b5      	cmp	r5, r6
    e1b2:	d902      	bls.n	e1ba <__b2d+0x5a>
    e1b4:	9d01      	ldr	r5, [sp, #4]
    e1b6:	3d08      	subs	r5, #8
    e1b8:	682f      	ldr	r7, [r5, #0]
    e1ba:	230b      	movs	r3, #11
    e1bc:	425b      	negs	r3, r3
    e1be:	469c      	mov	ip, r3
    e1c0:	4484      	add	ip, r0
    e1c2:	4663      	mov	r3, ip
    e1c4:	2b00      	cmp	r3, #0
    e1c6:	d014      	beq.n	e1f2 <__b2d+0x92>
    e1c8:	232b      	movs	r3, #43	; 0x2b
    e1ca:	1a18      	subs	r0, r3, r0
    e1cc:	4663      	mov	r3, ip
    e1ce:	409c      	lsls	r4, r3
    e1d0:	4321      	orrs	r1, r4
    e1d2:	1c3c      	adds	r4, r7, #0
    e1d4:	40c4      	lsrs	r4, r0
    e1d6:	4321      	orrs	r1, r4
    e1d8:	1c0b      	adds	r3, r1, #0
    e1da:	2400      	movs	r4, #0
    e1dc:	42b5      	cmp	r5, r6
    e1de:	d901      	bls.n	e1e4 <__b2d+0x84>
    e1e0:	3d04      	subs	r5, #4
    e1e2:	682c      	ldr	r4, [r5, #0]
    e1e4:	40c4      	lsrs	r4, r0
    e1e6:	4661      	mov	r1, ip
    e1e8:	1c20      	adds	r0, r4, #0
    e1ea:	408f      	lsls	r7, r1
    e1ec:	4338      	orrs	r0, r7
    e1ee:	1c02      	adds	r2, r0, #0
    e1f0:	e002      	b.n	e1f8 <__b2d+0x98>
    e1f2:	4321      	orrs	r1, r4
    e1f4:	1c0b      	adds	r3, r1, #0
    e1f6:	1c3a      	adds	r2, r7, #0
    e1f8:	1c10      	adds	r0, r2, #0
    e1fa:	1c19      	adds	r1, r3, #0
    e1fc:	b003      	add	sp, #12
    e1fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e200:	3ff00000 	.word	0x3ff00000

0000e204 <__d2b>:
    e204:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e206:	1c1d      	adds	r5, r3, #0
    e208:	2101      	movs	r1, #1
    e20a:	9f08      	ldr	r7, [sp, #32]
    e20c:	1c14      	adds	r4, r2, #0
    e20e:	f7ff fcab 	bl	db68 <_Balloc>
    e212:	032b      	lsls	r3, r5, #12
    e214:	006d      	lsls	r5, r5, #1
    e216:	1c06      	adds	r6, r0, #0
    e218:	0b1b      	lsrs	r3, r3, #12
    e21a:	0d6d      	lsrs	r5, r5, #21
    e21c:	d002      	beq.n	e224 <__d2b+0x20>
    e21e:	2280      	movs	r2, #128	; 0x80
    e220:	0352      	lsls	r2, r2, #13
    e222:	4313      	orrs	r3, r2
    e224:	9301      	str	r3, [sp, #4]
    e226:	2c00      	cmp	r4, #0
    e228:	d018      	beq.n	e25c <__d2b+0x58>
    e22a:	4668      	mov	r0, sp
    e22c:	9400      	str	r4, [sp, #0]
    e22e:	f7ff fd83 	bl	dd38 <__lo0bits>
    e232:	9c00      	ldr	r4, [sp, #0]
    e234:	2800      	cmp	r0, #0
    e236:	d009      	beq.n	e24c <__d2b+0x48>
    e238:	2320      	movs	r3, #32
    e23a:	9a01      	ldr	r2, [sp, #4]
    e23c:	1a19      	subs	r1, r3, r0
    e23e:	1c13      	adds	r3, r2, #0
    e240:	408b      	lsls	r3, r1
    e242:	40c2      	lsrs	r2, r0
    e244:	4323      	orrs	r3, r4
    e246:	6173      	str	r3, [r6, #20]
    e248:	9201      	str	r2, [sp, #4]
    e24a:	e000      	b.n	e24e <__d2b+0x4a>
    e24c:	6174      	str	r4, [r6, #20]
    e24e:	9c01      	ldr	r4, [sp, #4]
    e250:	61b4      	str	r4, [r6, #24]
    e252:	1e63      	subs	r3, r4, #1
    e254:	419c      	sbcs	r4, r3
    e256:	3401      	adds	r4, #1
    e258:	6134      	str	r4, [r6, #16]
    e25a:	e007      	b.n	e26c <__d2b+0x68>
    e25c:	a801      	add	r0, sp, #4
    e25e:	f7ff fd6b 	bl	dd38 <__lo0bits>
    e262:	2401      	movs	r4, #1
    e264:	9b01      	ldr	r3, [sp, #4]
    e266:	6134      	str	r4, [r6, #16]
    e268:	6173      	str	r3, [r6, #20]
    e26a:	3020      	adds	r0, #32
    e26c:	2d00      	cmp	r5, #0
    e26e:	d006      	beq.n	e27e <__d2b+0x7a>
    e270:	4b0b      	ldr	r3, [pc, #44]	; (e2a0 <__d2b+0x9c>)
    e272:	18ed      	adds	r5, r5, r3
    e274:	2335      	movs	r3, #53	; 0x35
    e276:	182d      	adds	r5, r5, r0
    e278:	603d      	str	r5, [r7, #0]
    e27a:	1a18      	subs	r0, r3, r0
    e27c:	e00b      	b.n	e296 <__d2b+0x92>
    e27e:	4b09      	ldr	r3, [pc, #36]	; (e2a4 <__d2b+0xa0>)
    e280:	18c0      	adds	r0, r0, r3
    e282:	4b09      	ldr	r3, [pc, #36]	; (e2a8 <__d2b+0xa4>)
    e284:	6038      	str	r0, [r7, #0]
    e286:	18e3      	adds	r3, r4, r3
    e288:	009b      	lsls	r3, r3, #2
    e28a:	18f3      	adds	r3, r6, r3
    e28c:	6958      	ldr	r0, [r3, #20]
    e28e:	f7ff fd38 	bl	dd02 <__hi0bits>
    e292:	0164      	lsls	r4, r4, #5
    e294:	1a20      	subs	r0, r4, r0
    e296:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e298:	6018      	str	r0, [r3, #0]
    e29a:	1c30      	adds	r0, r6, #0
    e29c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    e29e:	46c0      	nop			; (mov r8, r8)
    e2a0:	fffffbcd 	.word	0xfffffbcd
    e2a4:	fffffbce 	.word	0xfffffbce
    e2a8:	3fffffff 	.word	0x3fffffff

0000e2ac <__ratio>:
    e2ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    e2ae:	b087      	sub	sp, #28
    e2b0:	1c0e      	adds	r6, r1, #0
    e2b2:	a904      	add	r1, sp, #16
    e2b4:	1c07      	adds	r7, r0, #0
    e2b6:	f7ff ff53 	bl	e160 <__b2d>
    e2ba:	1c04      	adds	r4, r0, #0
    e2bc:	1c0d      	adds	r5, r1, #0
    e2be:	1c30      	adds	r0, r6, #0
    e2c0:	a905      	add	r1, sp, #20
    e2c2:	9400      	str	r4, [sp, #0]
    e2c4:	9501      	str	r5, [sp, #4]
    e2c6:	f7ff ff4b 	bl	e160 <__b2d>
    e2ca:	9b04      	ldr	r3, [sp, #16]
    e2cc:	9a05      	ldr	r2, [sp, #20]
    e2ce:	693f      	ldr	r7, [r7, #16]
    e2d0:	1a9a      	subs	r2, r3, r2
    e2d2:	6933      	ldr	r3, [r6, #16]
    e2d4:	9002      	str	r0, [sp, #8]
    e2d6:	9103      	str	r1, [sp, #12]
    e2d8:	1afb      	subs	r3, r7, r3
    e2da:	015b      	lsls	r3, r3, #5
    e2dc:	18d3      	adds	r3, r2, r3
    e2de:	2b00      	cmp	r3, #0
    e2e0:	dd03      	ble.n	e2ea <__ratio+0x3e>
    e2e2:	051b      	lsls	r3, r3, #20
    e2e4:	195b      	adds	r3, r3, r5
    e2e6:	9301      	str	r3, [sp, #4]
    e2e8:	e002      	b.n	e2f0 <__ratio+0x44>
    e2ea:	051b      	lsls	r3, r3, #20
    e2ec:	1acb      	subs	r3, r1, r3
    e2ee:	9303      	str	r3, [sp, #12]
    e2f0:	9800      	ldr	r0, [sp, #0]
    e2f2:	9901      	ldr	r1, [sp, #4]
    e2f4:	9a02      	ldr	r2, [sp, #8]
    e2f6:	9b03      	ldr	r3, [sp, #12]
    e2f8:	f7f9 fdfc 	bl	7ef4 <__aeabi_ddiv>
    e2fc:	b007      	add	sp, #28
    e2fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000e300 <__copybits>:
    e300:	1c13      	adds	r3, r2, #0
    e302:	3901      	subs	r1, #1
    e304:	b510      	push	{r4, lr}
    e306:	1149      	asrs	r1, r1, #5
    e308:	6912      	ldr	r2, [r2, #16]
    e30a:	3101      	adds	r1, #1
    e30c:	0089      	lsls	r1, r1, #2
    e30e:	3314      	adds	r3, #20
    e310:	0092      	lsls	r2, r2, #2
    e312:	1841      	adds	r1, r0, r1
    e314:	189a      	adds	r2, r3, r2
    e316:	4293      	cmp	r3, r2
    e318:	d202      	bcs.n	e320 <__copybits+0x20>
    e31a:	cb10      	ldmia	r3!, {r4}
    e31c:	c010      	stmia	r0!, {r4}
    e31e:	e7fa      	b.n	e316 <__copybits+0x16>
    e320:	4288      	cmp	r0, r1
    e322:	d202      	bcs.n	e32a <__copybits+0x2a>
    e324:	2300      	movs	r3, #0
    e326:	c008      	stmia	r0!, {r3}
    e328:	e7fa      	b.n	e320 <__copybits+0x20>
    e32a:	bd10      	pop	{r4, pc}

0000e32c <__any_on>:
    e32c:	b530      	push	{r4, r5, lr}
    e32e:	1c04      	adds	r4, r0, #0
    e330:	6902      	ldr	r2, [r0, #16]
    e332:	3414      	adds	r4, #20
    e334:	114b      	asrs	r3, r1, #5
    e336:	4293      	cmp	r3, r2
    e338:	dc0c      	bgt.n	e354 <__any_on+0x28>
    e33a:	da0c      	bge.n	e356 <__any_on+0x2a>
    e33c:	221f      	movs	r2, #31
    e33e:	4011      	ands	r1, r2
    e340:	d009      	beq.n	e356 <__any_on+0x2a>
    e342:	009a      	lsls	r2, r3, #2
    e344:	5915      	ldr	r5, [r2, r4]
    e346:	2001      	movs	r0, #1
    e348:	1c2a      	adds	r2, r5, #0
    e34a:	40ca      	lsrs	r2, r1
    e34c:	408a      	lsls	r2, r1
    e34e:	42aa      	cmp	r2, r5
    e350:	d10c      	bne.n	e36c <__any_on+0x40>
    e352:	e000      	b.n	e356 <__any_on+0x2a>
    e354:	1c13      	adds	r3, r2, #0
    e356:	009b      	lsls	r3, r3, #2
    e358:	18e3      	adds	r3, r4, r3
    e35a:	42a3      	cmp	r3, r4
    e35c:	d905      	bls.n	e36a <__any_on+0x3e>
    e35e:	3b04      	subs	r3, #4
    e360:	681a      	ldr	r2, [r3, #0]
    e362:	2a00      	cmp	r2, #0
    e364:	d0f9      	beq.n	e35a <__any_on+0x2e>
    e366:	2001      	movs	r0, #1
    e368:	e000      	b.n	e36c <__any_on+0x40>
    e36a:	2000      	movs	r0, #0
    e36c:	bd30      	pop	{r4, r5, pc}

0000e36e <_calloc_r>:
    e36e:	434a      	muls	r2, r1
    e370:	b538      	push	{r3, r4, r5, lr}
    e372:	1c11      	adds	r1, r2, #0
    e374:	1c14      	adds	r4, r2, #0
    e376:	f7fb fded 	bl	9f54 <_malloc_r>
    e37a:	1e05      	subs	r5, r0, #0
    e37c:	d003      	beq.n	e386 <_calloc_r+0x18>
    e37e:	2100      	movs	r1, #0
    e380:	1c22      	adds	r2, r4, #0
    e382:	f7fb fd99 	bl	9eb8 <memset>
    e386:	1c28      	adds	r0, r5, #0
    e388:	bd38      	pop	{r3, r4, r5, pc}

0000e38a <_realloc_r>:
    e38a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e38c:	1c06      	adds	r6, r0, #0
    e38e:	1c0c      	adds	r4, r1, #0
    e390:	1c15      	adds	r5, r2, #0
    e392:	2900      	cmp	r1, #0
    e394:	d104      	bne.n	e3a0 <_realloc_r+0x16>
    e396:	1c11      	adds	r1, r2, #0
    e398:	f7fb fddc 	bl	9f54 <_malloc_r>
    e39c:	1c04      	adds	r4, r0, #0
    e39e:	e018      	b.n	e3d2 <_realloc_r+0x48>
    e3a0:	2a00      	cmp	r2, #0
    e3a2:	d103      	bne.n	e3ac <_realloc_r+0x22>
    e3a4:	f7fb fd90 	bl	9ec8 <_free_r>
    e3a8:	1c2c      	adds	r4, r5, #0
    e3aa:	e012      	b.n	e3d2 <_realloc_r+0x48>
    e3ac:	f000 fb52 	bl	ea54 <_malloc_usable_size_r>
    e3b0:	42a8      	cmp	r0, r5
    e3b2:	d20e      	bcs.n	e3d2 <_realloc_r+0x48>
    e3b4:	1c30      	adds	r0, r6, #0
    e3b6:	1c29      	adds	r1, r5, #0
    e3b8:	f7fb fdcc 	bl	9f54 <_malloc_r>
    e3bc:	1e07      	subs	r7, r0, #0
    e3be:	d007      	beq.n	e3d0 <_realloc_r+0x46>
    e3c0:	1c21      	adds	r1, r4, #0
    e3c2:	1c2a      	adds	r2, r5, #0
    e3c4:	f7fb fd6f 	bl	9ea6 <memcpy>
    e3c8:	1c30      	adds	r0, r6, #0
    e3ca:	1c21      	adds	r1, r4, #0
    e3cc:	f7fb fd7c 	bl	9ec8 <_free_r>
    e3d0:	1c3c      	adds	r4, r7, #0
    e3d2:	1c20      	adds	r0, r4, #0
    e3d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000e3d8 <__ssputs_r>:
    e3d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    e3da:	688e      	ldr	r6, [r1, #8]
    e3dc:	b085      	sub	sp, #20
    e3de:	1c07      	adds	r7, r0, #0
    e3e0:	1c0c      	adds	r4, r1, #0
    e3e2:	9203      	str	r2, [sp, #12]
    e3e4:	9301      	str	r3, [sp, #4]
    e3e6:	42b3      	cmp	r3, r6
    e3e8:	d345      	bcc.n	e476 <__ssputs_r+0x9e>
    e3ea:	2390      	movs	r3, #144	; 0x90
    e3ec:	898a      	ldrh	r2, [r1, #12]
    e3ee:	00db      	lsls	r3, r3, #3
    e3f0:	421a      	tst	r2, r3
    e3f2:	d03d      	beq.n	e470 <__ssputs_r+0x98>
    e3f4:	2503      	movs	r5, #3
    e3f6:	6909      	ldr	r1, [r1, #16]
    e3f8:	6823      	ldr	r3, [r4, #0]
    e3fa:	9801      	ldr	r0, [sp, #4]
    e3fc:	1a5b      	subs	r3, r3, r1
    e3fe:	9302      	str	r3, [sp, #8]
    e400:	6963      	ldr	r3, [r4, #20]
    e402:	435d      	muls	r5, r3
    e404:	0feb      	lsrs	r3, r5, #31
    e406:	195d      	adds	r5, r3, r5
    e408:	9b02      	ldr	r3, [sp, #8]
    e40a:	106d      	asrs	r5, r5, #1
    e40c:	3301      	adds	r3, #1
    e40e:	181b      	adds	r3, r3, r0
    e410:	429d      	cmp	r5, r3
    e412:	d200      	bcs.n	e416 <__ssputs_r+0x3e>
    e414:	1c1d      	adds	r5, r3, #0
    e416:	1c38      	adds	r0, r7, #0
    e418:	0553      	lsls	r3, r2, #21
    e41a:	d50f      	bpl.n	e43c <__ssputs_r+0x64>
    e41c:	1c29      	adds	r1, r5, #0
    e41e:	f7fb fd99 	bl	9f54 <_malloc_r>
    e422:	1e06      	subs	r6, r0, #0
    e424:	d013      	beq.n	e44e <__ssputs_r+0x76>
    e426:	9a02      	ldr	r2, [sp, #8]
    e428:	6921      	ldr	r1, [r4, #16]
    e42a:	f7fb fd3c 	bl	9ea6 <memcpy>
    e42e:	89a2      	ldrh	r2, [r4, #12]
    e430:	4b18      	ldr	r3, [pc, #96]	; (e494 <__ssputs_r+0xbc>)
    e432:	4013      	ands	r3, r2
    e434:	2280      	movs	r2, #128	; 0x80
    e436:	4313      	orrs	r3, r2
    e438:	81a3      	strh	r3, [r4, #12]
    e43a:	e011      	b.n	e460 <__ssputs_r+0x88>
    e43c:	1c2a      	adds	r2, r5, #0
    e43e:	f7ff ffa4 	bl	e38a <_realloc_r>
    e442:	1e06      	subs	r6, r0, #0
    e444:	d10c      	bne.n	e460 <__ssputs_r+0x88>
    e446:	1c38      	adds	r0, r7, #0
    e448:	6921      	ldr	r1, [r4, #16]
    e44a:	f7fb fd3d 	bl	9ec8 <_free_r>
    e44e:	230c      	movs	r3, #12
    e450:	2240      	movs	r2, #64	; 0x40
    e452:	2001      	movs	r0, #1
    e454:	603b      	str	r3, [r7, #0]
    e456:	89a3      	ldrh	r3, [r4, #12]
    e458:	4240      	negs	r0, r0
    e45a:	4313      	orrs	r3, r2
    e45c:	81a3      	strh	r3, [r4, #12]
    e45e:	e017      	b.n	e490 <__ssputs_r+0xb8>
    e460:	9b02      	ldr	r3, [sp, #8]
    e462:	6126      	str	r6, [r4, #16]
    e464:	18f6      	adds	r6, r6, r3
    e466:	6026      	str	r6, [r4, #0]
    e468:	6165      	str	r5, [r4, #20]
    e46a:	9e01      	ldr	r6, [sp, #4]
    e46c:	1aed      	subs	r5, r5, r3
    e46e:	60a5      	str	r5, [r4, #8]
    e470:	9b01      	ldr	r3, [sp, #4]
    e472:	42b3      	cmp	r3, r6
    e474:	d200      	bcs.n	e478 <__ssputs_r+0xa0>
    e476:	9e01      	ldr	r6, [sp, #4]
    e478:	1c32      	adds	r2, r6, #0
    e47a:	6820      	ldr	r0, [r4, #0]
    e47c:	9903      	ldr	r1, [sp, #12]
    e47e:	f7ff fb5f 	bl	db40 <memmove>
    e482:	2000      	movs	r0, #0
    e484:	68a3      	ldr	r3, [r4, #8]
    e486:	1b9b      	subs	r3, r3, r6
    e488:	60a3      	str	r3, [r4, #8]
    e48a:	6823      	ldr	r3, [r4, #0]
    e48c:	199e      	adds	r6, r3, r6
    e48e:	6026      	str	r6, [r4, #0]
    e490:	b005      	add	sp, #20
    e492:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e494:	fffffb7f 	.word	0xfffffb7f

0000e498 <_svfiprintf_r>:
    e498:	b5f0      	push	{r4, r5, r6, r7, lr}
    e49a:	b09f      	sub	sp, #124	; 0x7c
    e49c:	9002      	str	r0, [sp, #8]
    e49e:	9305      	str	r3, [sp, #20]
    e4a0:	898b      	ldrh	r3, [r1, #12]
    e4a2:	1c0e      	adds	r6, r1, #0
    e4a4:	1c17      	adds	r7, r2, #0
    e4a6:	061b      	lsls	r3, r3, #24
    e4a8:	d510      	bpl.n	e4cc <_svfiprintf_r+0x34>
    e4aa:	690b      	ldr	r3, [r1, #16]
    e4ac:	2b00      	cmp	r3, #0
    e4ae:	d10d      	bne.n	e4cc <_svfiprintf_r+0x34>
    e4b0:	2140      	movs	r1, #64	; 0x40
    e4b2:	f7fb fd4f 	bl	9f54 <_malloc_r>
    e4b6:	6030      	str	r0, [r6, #0]
    e4b8:	6130      	str	r0, [r6, #16]
    e4ba:	2800      	cmp	r0, #0
    e4bc:	d104      	bne.n	e4c8 <_svfiprintf_r+0x30>
    e4be:	230c      	movs	r3, #12
    e4c0:	9a02      	ldr	r2, [sp, #8]
    e4c2:	3801      	subs	r0, #1
    e4c4:	6013      	str	r3, [r2, #0]
    e4c6:	e0d0      	b.n	e66a <_svfiprintf_r+0x1d2>
    e4c8:	2340      	movs	r3, #64	; 0x40
    e4ca:	6173      	str	r3, [r6, #20]
    e4cc:	2300      	movs	r3, #0
    e4ce:	ad06      	add	r5, sp, #24
    e4d0:	616b      	str	r3, [r5, #20]
    e4d2:	3320      	adds	r3, #32
    e4d4:	766b      	strb	r3, [r5, #25]
    e4d6:	3310      	adds	r3, #16
    e4d8:	76ab      	strb	r3, [r5, #26]
    e4da:	1c3c      	adds	r4, r7, #0
    e4dc:	7823      	ldrb	r3, [r4, #0]
    e4de:	2b00      	cmp	r3, #0
    e4e0:	d103      	bne.n	e4ea <_svfiprintf_r+0x52>
    e4e2:	1be3      	subs	r3, r4, r7
    e4e4:	9304      	str	r3, [sp, #16]
    e4e6:	d012      	beq.n	e50e <_svfiprintf_r+0x76>
    e4e8:	e003      	b.n	e4f2 <_svfiprintf_r+0x5a>
    e4ea:	2b25      	cmp	r3, #37	; 0x25
    e4ec:	d0f9      	beq.n	e4e2 <_svfiprintf_r+0x4a>
    e4ee:	3401      	adds	r4, #1
    e4f0:	e7f4      	b.n	e4dc <_svfiprintf_r+0x44>
    e4f2:	9b04      	ldr	r3, [sp, #16]
    e4f4:	9802      	ldr	r0, [sp, #8]
    e4f6:	1c31      	adds	r1, r6, #0
    e4f8:	1c3a      	adds	r2, r7, #0
    e4fa:	f7ff ff6d 	bl	e3d8 <__ssputs_r>
    e4fe:	1c43      	adds	r3, r0, #1
    e500:	d100      	bne.n	e504 <_svfiprintf_r+0x6c>
    e502:	e0ac      	b.n	e65e <_svfiprintf_r+0x1c6>
    e504:	696a      	ldr	r2, [r5, #20]
    e506:	9b04      	ldr	r3, [sp, #16]
    e508:	4694      	mov	ip, r2
    e50a:	4463      	add	r3, ip
    e50c:	616b      	str	r3, [r5, #20]
    e50e:	7823      	ldrb	r3, [r4, #0]
    e510:	2b00      	cmp	r3, #0
    e512:	d100      	bne.n	e516 <_svfiprintf_r+0x7e>
    e514:	e0a3      	b.n	e65e <_svfiprintf_r+0x1c6>
    e516:	2201      	movs	r2, #1
    e518:	2300      	movs	r3, #0
    e51a:	4252      	negs	r2, r2
    e51c:	606a      	str	r2, [r5, #4]
    e51e:	a902      	add	r1, sp, #8
    e520:	3254      	adds	r2, #84	; 0x54
    e522:	1852      	adds	r2, r2, r1
    e524:	3401      	adds	r4, #1
    e526:	602b      	str	r3, [r5, #0]
    e528:	60eb      	str	r3, [r5, #12]
    e52a:	60ab      	str	r3, [r5, #8]
    e52c:	7013      	strb	r3, [r2, #0]
    e52e:	65ab      	str	r3, [r5, #88]	; 0x58
    e530:	4f4f      	ldr	r7, [pc, #316]	; (e670 <_svfiprintf_r+0x1d8>)
    e532:	7821      	ldrb	r1, [r4, #0]
    e534:	1c38      	adds	r0, r7, #0
    e536:	2205      	movs	r2, #5
    e538:	f7fb fcaa 	bl	9e90 <memchr>
    e53c:	2800      	cmp	r0, #0
    e53e:	d008      	beq.n	e552 <_svfiprintf_r+0xba>
    e540:	1bc0      	subs	r0, r0, r7
    e542:	2701      	movs	r7, #1
    e544:	4087      	lsls	r7, r0
    e546:	1c38      	adds	r0, r7, #0
    e548:	682b      	ldr	r3, [r5, #0]
    e54a:	3401      	adds	r4, #1
    e54c:	4318      	orrs	r0, r3
    e54e:	6028      	str	r0, [r5, #0]
    e550:	e7ee      	b.n	e530 <_svfiprintf_r+0x98>
    e552:	682b      	ldr	r3, [r5, #0]
    e554:	06da      	lsls	r2, r3, #27
    e556:	d504      	bpl.n	e562 <_svfiprintf_r+0xca>
    e558:	2253      	movs	r2, #83	; 0x53
    e55a:	2120      	movs	r1, #32
    e55c:	a802      	add	r0, sp, #8
    e55e:	1812      	adds	r2, r2, r0
    e560:	7011      	strb	r1, [r2, #0]
    e562:	071a      	lsls	r2, r3, #28
    e564:	d504      	bpl.n	e570 <_svfiprintf_r+0xd8>
    e566:	2253      	movs	r2, #83	; 0x53
    e568:	212b      	movs	r1, #43	; 0x2b
    e56a:	a802      	add	r0, sp, #8
    e56c:	1812      	adds	r2, r2, r0
    e56e:	7011      	strb	r1, [r2, #0]
    e570:	7822      	ldrb	r2, [r4, #0]
    e572:	2a2a      	cmp	r2, #42	; 0x2a
    e574:	d001      	beq.n	e57a <_svfiprintf_r+0xe2>
    e576:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e578:	e00e      	b.n	e598 <_svfiprintf_r+0x100>
    e57a:	9a05      	ldr	r2, [sp, #20]
    e57c:	1d11      	adds	r1, r2, #4
    e57e:	6812      	ldr	r2, [r2, #0]
    e580:	9105      	str	r1, [sp, #20]
    e582:	2a00      	cmp	r2, #0
    e584:	db01      	blt.n	e58a <_svfiprintf_r+0xf2>
    e586:	9209      	str	r2, [sp, #36]	; 0x24
    e588:	e004      	b.n	e594 <_svfiprintf_r+0xfc>
    e58a:	4252      	negs	r2, r2
    e58c:	60ea      	str	r2, [r5, #12]
    e58e:	2202      	movs	r2, #2
    e590:	4313      	orrs	r3, r2
    e592:	602b      	str	r3, [r5, #0]
    e594:	3401      	adds	r4, #1
    e596:	e009      	b.n	e5ac <_svfiprintf_r+0x114>
    e598:	7822      	ldrb	r2, [r4, #0]
    e59a:	3a30      	subs	r2, #48	; 0x30
    e59c:	2a09      	cmp	r2, #9
    e59e:	d804      	bhi.n	e5aa <_svfiprintf_r+0x112>
    e5a0:	210a      	movs	r1, #10
    e5a2:	434b      	muls	r3, r1
    e5a4:	3401      	adds	r4, #1
    e5a6:	189b      	adds	r3, r3, r2
    e5a8:	e7f6      	b.n	e598 <_svfiprintf_r+0x100>
    e5aa:	9309      	str	r3, [sp, #36]	; 0x24
    e5ac:	7823      	ldrb	r3, [r4, #0]
    e5ae:	2b2e      	cmp	r3, #46	; 0x2e
    e5b0:	d118      	bne.n	e5e4 <_svfiprintf_r+0x14c>
    e5b2:	7863      	ldrb	r3, [r4, #1]
    e5b4:	2b2a      	cmp	r3, #42	; 0x2a
    e5b6:	d109      	bne.n	e5cc <_svfiprintf_r+0x134>
    e5b8:	9b05      	ldr	r3, [sp, #20]
    e5ba:	3402      	adds	r4, #2
    e5bc:	1d1a      	adds	r2, r3, #4
    e5be:	681b      	ldr	r3, [r3, #0]
    e5c0:	9205      	str	r2, [sp, #20]
    e5c2:	2b00      	cmp	r3, #0
    e5c4:	da0d      	bge.n	e5e2 <_svfiprintf_r+0x14a>
    e5c6:	2301      	movs	r3, #1
    e5c8:	425b      	negs	r3, r3
    e5ca:	e00a      	b.n	e5e2 <_svfiprintf_r+0x14a>
    e5cc:	2300      	movs	r3, #0
    e5ce:	3401      	adds	r4, #1
    e5d0:	7822      	ldrb	r2, [r4, #0]
    e5d2:	3a30      	subs	r2, #48	; 0x30
    e5d4:	2a09      	cmp	r2, #9
    e5d6:	d804      	bhi.n	e5e2 <_svfiprintf_r+0x14a>
    e5d8:	210a      	movs	r1, #10
    e5da:	434b      	muls	r3, r1
    e5dc:	3401      	adds	r4, #1
    e5de:	189b      	adds	r3, r3, r2
    e5e0:	e7f6      	b.n	e5d0 <_svfiprintf_r+0x138>
    e5e2:	9307      	str	r3, [sp, #28]
    e5e4:	4f23      	ldr	r7, [pc, #140]	; (e674 <_svfiprintf_r+0x1dc>)
    e5e6:	7821      	ldrb	r1, [r4, #0]
    e5e8:	1c38      	adds	r0, r7, #0
    e5ea:	2203      	movs	r2, #3
    e5ec:	f7fb fc50 	bl	9e90 <memchr>
    e5f0:	2800      	cmp	r0, #0
    e5f2:	d007      	beq.n	e604 <_svfiprintf_r+0x16c>
    e5f4:	1bc0      	subs	r0, r0, r7
    e5f6:	2740      	movs	r7, #64	; 0x40
    e5f8:	4087      	lsls	r7, r0
    e5fa:	1c38      	adds	r0, r7, #0
    e5fc:	682b      	ldr	r3, [r5, #0]
    e5fe:	3401      	adds	r4, #1
    e600:	4318      	orrs	r0, r3
    e602:	6028      	str	r0, [r5, #0]
    e604:	7821      	ldrb	r1, [r4, #0]
    e606:	481c      	ldr	r0, [pc, #112]	; (e678 <_svfiprintf_r+0x1e0>)
    e608:	2206      	movs	r2, #6
    e60a:	1c67      	adds	r7, r4, #1
    e60c:	7629      	strb	r1, [r5, #24]
    e60e:	f7fb fc3f 	bl	9e90 <memchr>
    e612:	2800      	cmp	r0, #0
    e614:	d012      	beq.n	e63c <_svfiprintf_r+0x1a4>
    e616:	4b19      	ldr	r3, [pc, #100]	; (e67c <_svfiprintf_r+0x1e4>)
    e618:	2b00      	cmp	r3, #0
    e61a:	d106      	bne.n	e62a <_svfiprintf_r+0x192>
    e61c:	2207      	movs	r2, #7
    e61e:	9b05      	ldr	r3, [sp, #20]
    e620:	3307      	adds	r3, #7
    e622:	4393      	bics	r3, r2
    e624:	3308      	adds	r3, #8
    e626:	9305      	str	r3, [sp, #20]
    e628:	e014      	b.n	e654 <_svfiprintf_r+0x1bc>
    e62a:	ab05      	add	r3, sp, #20
    e62c:	9300      	str	r3, [sp, #0]
    e62e:	9802      	ldr	r0, [sp, #8]
    e630:	1c29      	adds	r1, r5, #0
    e632:	1c32      	adds	r2, r6, #0
    e634:	4b12      	ldr	r3, [pc, #72]	; (e680 <_svfiprintf_r+0x1e8>)
    e636:	f7fb fec1 	bl	a3bc <_printf_float>
    e63a:	e007      	b.n	e64c <_svfiprintf_r+0x1b4>
    e63c:	ab05      	add	r3, sp, #20
    e63e:	9300      	str	r3, [sp, #0]
    e640:	9802      	ldr	r0, [sp, #8]
    e642:	1c29      	adds	r1, r5, #0
    e644:	1c32      	adds	r2, r6, #0
    e646:	4b0e      	ldr	r3, [pc, #56]	; (e680 <_svfiprintf_r+0x1e8>)
    e648:	f7fc f964 	bl	a914 <_printf_i>
    e64c:	9003      	str	r0, [sp, #12]
    e64e:	9b03      	ldr	r3, [sp, #12]
    e650:	3301      	adds	r3, #1
    e652:	d004      	beq.n	e65e <_svfiprintf_r+0x1c6>
    e654:	696b      	ldr	r3, [r5, #20]
    e656:	9a03      	ldr	r2, [sp, #12]
    e658:	189b      	adds	r3, r3, r2
    e65a:	616b      	str	r3, [r5, #20]
    e65c:	e73d      	b.n	e4da <_svfiprintf_r+0x42>
    e65e:	89b3      	ldrh	r3, [r6, #12]
    e660:	980b      	ldr	r0, [sp, #44]	; 0x2c
    e662:	065b      	lsls	r3, r3, #25
    e664:	d501      	bpl.n	e66a <_svfiprintf_r+0x1d2>
    e666:	2001      	movs	r0, #1
    e668:	4240      	negs	r0, r0
    e66a:	b01f      	add	sp, #124	; 0x7c
    e66c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e66e:	46c0      	nop			; (mov r8, r8)
    e670:	0000fa50 	.word	0x0000fa50
    e674:	0000fa56 	.word	0x0000fa56
    e678:	0000fa5a 	.word	0x0000fa5a
    e67c:	0000a3bd 	.word	0x0000a3bd
    e680:	0000e3d9 	.word	0x0000e3d9

0000e684 <_sungetc_r>:
    e684:	b538      	push	{r3, r4, r5, lr}
    e686:	1c14      	adds	r4, r2, #0
    e688:	1c4b      	adds	r3, r1, #1
    e68a:	d102      	bne.n	e692 <_sungetc_r+0xe>
    e68c:	2001      	movs	r0, #1
    e68e:	4240      	negs	r0, r0
    e690:	e034      	b.n	e6fc <_sungetc_r+0x78>
    e692:	8993      	ldrh	r3, [r2, #12]
    e694:	2220      	movs	r2, #32
    e696:	4393      	bics	r3, r2
    e698:	6b62      	ldr	r2, [r4, #52]	; 0x34
    e69a:	81a3      	strh	r3, [r4, #12]
    e69c:	b2cd      	uxtb	r5, r1
    e69e:	6863      	ldr	r3, [r4, #4]
    e6a0:	2a00      	cmp	r2, #0
    e6a2:	d00f      	beq.n	e6c4 <_sungetc_r+0x40>
    e6a4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e6a6:	4293      	cmp	r3, r2
    e6a8:	da06      	bge.n	e6b8 <_sungetc_r+0x34>
    e6aa:	6823      	ldr	r3, [r4, #0]
    e6ac:	3b01      	subs	r3, #1
    e6ae:	6023      	str	r3, [r4, #0]
    e6b0:	701d      	strb	r5, [r3, #0]
    e6b2:	6863      	ldr	r3, [r4, #4]
    e6b4:	3301      	adds	r3, #1
    e6b6:	e01f      	b.n	e6f8 <_sungetc_r+0x74>
    e6b8:	1c21      	adds	r1, r4, #0
    e6ba:	f7fd fefd 	bl	c4b8 <__submore>
    e6be:	2800      	cmp	r0, #0
    e6c0:	d0f3      	beq.n	e6aa <_sungetc_r+0x26>
    e6c2:	e7e3      	b.n	e68c <_sungetc_r+0x8>
    e6c4:	6921      	ldr	r1, [r4, #16]
    e6c6:	6822      	ldr	r2, [r4, #0]
    e6c8:	2900      	cmp	r1, #0
    e6ca:	d009      	beq.n	e6e0 <_sungetc_r+0x5c>
    e6cc:	428a      	cmp	r2, r1
    e6ce:	d907      	bls.n	e6e0 <_sungetc_r+0x5c>
    e6d0:	1e51      	subs	r1, r2, #1
    e6d2:	7808      	ldrb	r0, [r1, #0]
    e6d4:	42a8      	cmp	r0, r5
    e6d6:	d103      	bne.n	e6e0 <_sungetc_r+0x5c>
    e6d8:	3301      	adds	r3, #1
    e6da:	6021      	str	r1, [r4, #0]
    e6dc:	6063      	str	r3, [r4, #4]
    e6de:	e00d      	b.n	e6fc <_sungetc_r+0x78>
    e6e0:	6423      	str	r3, [r4, #64]	; 0x40
    e6e2:	1c23      	adds	r3, r4, #0
    e6e4:	3344      	adds	r3, #68	; 0x44
    e6e6:	6363      	str	r3, [r4, #52]	; 0x34
    e6e8:	2303      	movs	r3, #3
    e6ea:	63a3      	str	r3, [r4, #56]	; 0x38
    e6ec:	1c23      	adds	r3, r4, #0
    e6ee:	3346      	adds	r3, #70	; 0x46
    e6f0:	63e2      	str	r2, [r4, #60]	; 0x3c
    e6f2:	701d      	strb	r5, [r3, #0]
    e6f4:	6023      	str	r3, [r4, #0]
    e6f6:	2301      	movs	r3, #1
    e6f8:	1c28      	adds	r0, r5, #0
    e6fa:	6063      	str	r3, [r4, #4]
    e6fc:	bd38      	pop	{r3, r4, r5, pc}

0000e6fe <__ssrefill_r>:
    e6fe:	b510      	push	{r4, lr}
    e700:	1c0c      	adds	r4, r1, #0
    e702:	6b49      	ldr	r1, [r1, #52]	; 0x34
    e704:	2900      	cmp	r1, #0
    e706:	d00e      	beq.n	e726 <__ssrefill_r+0x28>
    e708:	1c23      	adds	r3, r4, #0
    e70a:	3344      	adds	r3, #68	; 0x44
    e70c:	4299      	cmp	r1, r3
    e70e:	d001      	beq.n	e714 <__ssrefill_r+0x16>
    e710:	f7fb fbda 	bl	9ec8 <_free_r>
    e714:	2000      	movs	r0, #0
    e716:	6c23      	ldr	r3, [r4, #64]	; 0x40
    e718:	6360      	str	r0, [r4, #52]	; 0x34
    e71a:	6063      	str	r3, [r4, #4]
    e71c:	4283      	cmp	r3, r0
    e71e:	d002      	beq.n	e726 <__ssrefill_r+0x28>
    e720:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    e722:	6023      	str	r3, [r4, #0]
    e724:	e009      	b.n	e73a <__ssrefill_r+0x3c>
    e726:	6923      	ldr	r3, [r4, #16]
    e728:	2220      	movs	r2, #32
    e72a:	6023      	str	r3, [r4, #0]
    e72c:	2300      	movs	r3, #0
    e72e:	2001      	movs	r0, #1
    e730:	6063      	str	r3, [r4, #4]
    e732:	89a3      	ldrh	r3, [r4, #12]
    e734:	4240      	negs	r0, r0
    e736:	4313      	orrs	r3, r2
    e738:	81a3      	strh	r3, [r4, #12]
    e73a:	bd10      	pop	{r4, pc}

0000e73c <__ssvfiscanf_r>:
    e73c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e73e:	4cb5      	ldr	r4, [pc, #724]	; (ea14 <__ssvfiscanf_r+0x2d8>)
    e740:	1c07      	adds	r7, r0, #0
    e742:	44a5      	add	sp, r4
    e744:	9303      	str	r3, [sp, #12]
    e746:	2300      	movs	r3, #0
    e748:	2086      	movs	r0, #134	; 0x86
    e74a:	9348      	str	r3, [sp, #288]	; 0x120
    e74c:	9349      	str	r3, [sp, #292]	; 0x124
    e74e:	ab05      	add	r3, sp, #20
    e750:	934a      	str	r3, [sp, #296]	; 0x128
    e752:	23be      	movs	r3, #190	; 0xbe
    e754:	0040      	lsls	r0, r0, #1
    e756:	1c0d      	adds	r5, r1, #0
    e758:	9201      	str	r2, [sp, #4]
    e75a:	a902      	add	r1, sp, #8
    e75c:	4aae      	ldr	r2, [pc, #696]	; (ea18 <__ssvfiscanf_r+0x2dc>)
    e75e:	005b      	lsls	r3, r3, #1
    e760:	1809      	adds	r1, r1, r0
    e762:	50ca      	str	r2, [r1, r3]
    e764:	4aad      	ldr	r2, [pc, #692]	; (ea1c <__ssvfiscanf_r+0x2e0>)
    e766:	a902      	add	r1, sp, #8
    e768:	3304      	adds	r3, #4
    e76a:	1809      	adds	r1, r1, r0
    e76c:	50ca      	str	r2, [r1, r3]
    e76e:	9b01      	ldr	r3, [sp, #4]
    e770:	781c      	ldrb	r4, [r3, #0]
    e772:	2c00      	cmp	r4, #0
    e774:	d100      	bne.n	e778 <__ssvfiscanf_r+0x3c>
    e776:	e144      	b.n	ea02 <__ssvfiscanf_r+0x2c6>
    e778:	4ea9      	ldr	r6, [pc, #676]	; (ea20 <__ssvfiscanf_r+0x2e4>)
    e77a:	6833      	ldr	r3, [r6, #0]
    e77c:	191b      	adds	r3, r3, r4
    e77e:	785a      	ldrb	r2, [r3, #1]
    e780:	2308      	movs	r3, #8
    e782:	4013      	ands	r3, r2
    e784:	d023      	beq.n	e7ce <__ssvfiscanf_r+0x92>
    e786:	686b      	ldr	r3, [r5, #4]
    e788:	2b00      	cmp	r3, #0
    e78a:	dd10      	ble.n	e7ae <__ssvfiscanf_r+0x72>
    e78c:	682b      	ldr	r3, [r5, #0]
    e78e:	6831      	ldr	r1, [r6, #0]
    e790:	781a      	ldrb	r2, [r3, #0]
    e792:	188a      	adds	r2, r1, r2
    e794:	7852      	ldrb	r2, [r2, #1]
    e796:	0712      	lsls	r2, r2, #28
    e798:	d515      	bpl.n	e7c6 <__ssvfiscanf_r+0x8a>
    e79a:	9a49      	ldr	r2, [sp, #292]	; 0x124
    e79c:	3301      	adds	r3, #1
    e79e:	9202      	str	r2, [sp, #8]
    e7a0:	3201      	adds	r2, #1
    e7a2:	9249      	str	r2, [sp, #292]	; 0x124
    e7a4:	686a      	ldr	r2, [r5, #4]
    e7a6:	602b      	str	r3, [r5, #0]
    e7a8:	3a01      	subs	r2, #1
    e7aa:	606a      	str	r2, [r5, #4]
    e7ac:	e7eb      	b.n	e786 <__ssvfiscanf_r+0x4a>
    e7ae:	2186      	movs	r1, #134	; 0x86
    e7b0:	23c0      	movs	r3, #192	; 0xc0
    e7b2:	0049      	lsls	r1, r1, #1
    e7b4:	aa02      	add	r2, sp, #8
    e7b6:	1852      	adds	r2, r2, r1
    e7b8:	005b      	lsls	r3, r3, #1
    e7ba:	58d3      	ldr	r3, [r2, r3]
    e7bc:	1c38      	adds	r0, r7, #0
    e7be:	1c29      	adds	r1, r5, #0
    e7c0:	4798      	blx	r3
    e7c2:	2800      	cmp	r0, #0
    e7c4:	d0e2      	beq.n	e78c <__ssvfiscanf_r+0x50>
    e7c6:	9e01      	ldr	r6, [sp, #4]
    e7c8:	3601      	adds	r6, #1
    e7ca:	9601      	str	r6, [sp, #4]
    e7cc:	e7cf      	b.n	e76e <__ssvfiscanf_r+0x32>
    e7ce:	9a01      	ldr	r2, [sp, #4]
    e7d0:	1c56      	adds	r6, r2, #1
    e7d2:	2c25      	cmp	r4, #37	; 0x25
    e7d4:	d14f      	bne.n	e876 <__ssvfiscanf_r+0x13a>
    e7d6:	9347      	str	r3, [sp, #284]	; 0x11c
    e7d8:	9345      	str	r3, [sp, #276]	; 0x114
    e7da:	7853      	ldrb	r3, [r2, #1]
    e7dc:	2b2a      	cmp	r3, #42	; 0x2a
    e7de:	d102      	bne.n	e7e6 <__ssvfiscanf_r+0xaa>
    e7e0:	3b1a      	subs	r3, #26
    e7e2:	9345      	str	r3, [sp, #276]	; 0x114
    e7e4:	3601      	adds	r6, #1
    e7e6:	1c34      	adds	r4, r6, #0
    e7e8:	7821      	ldrb	r1, [r4, #0]
    e7ea:	1c0b      	adds	r3, r1, #0
    e7ec:	3b30      	subs	r3, #48	; 0x30
    e7ee:	2b09      	cmp	r3, #9
    e7f0:	d809      	bhi.n	e806 <__ssvfiscanf_r+0xca>
    e7f2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    e7f4:	3401      	adds	r4, #1
    e7f6:	9301      	str	r3, [sp, #4]
    e7f8:	230a      	movs	r3, #10
    e7fa:	9a01      	ldr	r2, [sp, #4]
    e7fc:	4353      	muls	r3, r2
    e7fe:	3b30      	subs	r3, #48	; 0x30
    e800:	1859      	adds	r1, r3, r1
    e802:	9147      	str	r1, [sp, #284]	; 0x11c
    e804:	e7f0      	b.n	e7e8 <__ssvfiscanf_r+0xac>
    e806:	4e87      	ldr	r6, [pc, #540]	; (ea24 <__ssvfiscanf_r+0x2e8>)
    e808:	2203      	movs	r2, #3
    e80a:	1c30      	adds	r0, r6, #0
    e80c:	f7fb fb40 	bl	9e90 <memchr>
    e810:	2800      	cmp	r0, #0
    e812:	d008      	beq.n	e826 <__ssvfiscanf_r+0xea>
    e814:	1b80      	subs	r0, r0, r6
    e816:	2601      	movs	r6, #1
    e818:	4086      	lsls	r6, r0
    e81a:	1c30      	adds	r0, r6, #0
    e81c:	9b45      	ldr	r3, [sp, #276]	; 0x114
    e81e:	3401      	adds	r4, #1
    e820:	4318      	orrs	r0, r3
    e822:	9301      	str	r3, [sp, #4]
    e824:	9045      	str	r0, [sp, #276]	; 0x114
    e826:	1c66      	adds	r6, r4, #1
    e828:	7824      	ldrb	r4, [r4, #0]
    e82a:	2c67      	cmp	r4, #103	; 0x67
    e82c:	d810      	bhi.n	e850 <__ssvfiscanf_r+0x114>
    e82e:	2c65      	cmp	r4, #101	; 0x65
    e830:	d300      	bcc.n	e834 <__ssvfiscanf_r+0xf8>
    e832:	e084      	b.n	e93e <__ssvfiscanf_r+0x202>
    e834:	2c5b      	cmp	r4, #91	; 0x5b
    e836:	d05a      	beq.n	e8ee <__ssvfiscanf_r+0x1b2>
    e838:	d805      	bhi.n	e846 <__ssvfiscanf_r+0x10a>
    e83a:	2c00      	cmp	r4, #0
    e83c:	d100      	bne.n	e840 <__ssvfiscanf_r+0x104>
    e83e:	e0e2      	b.n	ea06 <__ssvfiscanf_r+0x2ca>
    e840:	2c25      	cmp	r4, #37	; 0x25
    e842:	d018      	beq.n	e876 <__ssvfiscanf_r+0x13a>
    e844:	e07d      	b.n	e942 <__ssvfiscanf_r+0x206>
    e846:	2c63      	cmp	r4, #99	; 0x63
    e848:	d05f      	beq.n	e90a <__ssvfiscanf_r+0x1ce>
    e84a:	2c64      	cmp	r4, #100	; 0x64
    e84c:	d046      	beq.n	e8dc <__ssvfiscanf_r+0x1a0>
    e84e:	e078      	b.n	e942 <__ssvfiscanf_r+0x206>
    e850:	2c70      	cmp	r4, #112	; 0x70
    e852:	d034      	beq.n	e8be <__ssvfiscanf_r+0x182>
    e854:	d807      	bhi.n	e866 <__ssvfiscanf_r+0x12a>
    e856:	2c6e      	cmp	r4, #110	; 0x6e
    e858:	d05f      	beq.n	e91a <__ssvfiscanf_r+0x1de>
    e85a:	d841      	bhi.n	e8e0 <__ssvfiscanf_r+0x1a4>
    e85c:	2c69      	cmp	r4, #105	; 0x69
    e85e:	d170      	bne.n	e942 <__ssvfiscanf_r+0x206>
    e860:	2300      	movs	r3, #0
    e862:	9346      	str	r3, [sp, #280]	; 0x118
    e864:	e041      	b.n	e8ea <__ssvfiscanf_r+0x1ae>
    e866:	2c75      	cmp	r4, #117	; 0x75
    e868:	d038      	beq.n	e8dc <__ssvfiscanf_r+0x1a0>
    e86a:	2c78      	cmp	r4, #120	; 0x78
    e86c:	d02d      	beq.n	e8ca <__ssvfiscanf_r+0x18e>
    e86e:	2c73      	cmp	r4, #115	; 0x73
    e870:	d167      	bne.n	e942 <__ssvfiscanf_r+0x206>
    e872:	2302      	movs	r3, #2
    e874:	e047      	b.n	e906 <__ssvfiscanf_r+0x1ca>
    e876:	686b      	ldr	r3, [r5, #4]
    e878:	2b00      	cmp	r3, #0
    e87a:	dd0e      	ble.n	e89a <__ssvfiscanf_r+0x15e>
    e87c:	682b      	ldr	r3, [r5, #0]
    e87e:	781a      	ldrb	r2, [r3, #0]
    e880:	42a2      	cmp	r2, r4
    e882:	d000      	beq.n	e886 <__ssvfiscanf_r+0x14a>
    e884:	e0bd      	b.n	ea02 <__ssvfiscanf_r+0x2c6>
    e886:	3301      	adds	r3, #1
    e888:	686a      	ldr	r2, [r5, #4]
    e88a:	602b      	str	r3, [r5, #0]
    e88c:	9b49      	ldr	r3, [sp, #292]	; 0x124
    e88e:	3a01      	subs	r2, #1
    e890:	9301      	str	r3, [sp, #4]
    e892:	3301      	adds	r3, #1
    e894:	606a      	str	r2, [r5, #4]
    e896:	9349      	str	r3, [sp, #292]	; 0x124
    e898:	e797      	b.n	e7ca <__ssvfiscanf_r+0x8e>
    e89a:	2186      	movs	r1, #134	; 0x86
    e89c:	23c0      	movs	r3, #192	; 0xc0
    e89e:	0049      	lsls	r1, r1, #1
    e8a0:	aa02      	add	r2, sp, #8
    e8a2:	1852      	adds	r2, r2, r1
    e8a4:	005b      	lsls	r3, r3, #1
    e8a6:	58d3      	ldr	r3, [r2, r3]
    e8a8:	1c38      	adds	r0, r7, #0
    e8aa:	1c29      	adds	r1, r5, #0
    e8ac:	4798      	blx	r3
    e8ae:	2800      	cmp	r0, #0
    e8b0:	d0e4      	beq.n	e87c <__ssvfiscanf_r+0x140>
    e8b2:	9848      	ldr	r0, [sp, #288]	; 0x120
    e8b4:	2800      	cmp	r0, #0
    e8b6:	d000      	beq.n	e8ba <__ssvfiscanf_r+0x17e>
    e8b8:	e09f      	b.n	e9fa <__ssvfiscanf_r+0x2be>
    e8ba:	3801      	subs	r0, #1
    e8bc:	e0a5      	b.n	ea0a <__ssvfiscanf_r+0x2ce>
    e8be:	9b45      	ldr	r3, [sp, #276]	; 0x114
    e8c0:	9301      	str	r3, [sp, #4]
    e8c2:	2320      	movs	r3, #32
    e8c4:	9a01      	ldr	r2, [sp, #4]
    e8c6:	4313      	orrs	r3, r2
    e8c8:	9345      	str	r3, [sp, #276]	; 0x114
    e8ca:	9b45      	ldr	r3, [sp, #276]	; 0x114
    e8cc:	9301      	str	r3, [sp, #4]
    e8ce:	2380      	movs	r3, #128	; 0x80
    e8d0:	9a01      	ldr	r2, [sp, #4]
    e8d2:	009b      	lsls	r3, r3, #2
    e8d4:	4313      	orrs	r3, r2
    e8d6:	9345      	str	r3, [sp, #276]	; 0x114
    e8d8:	2310      	movs	r3, #16
    e8da:	e002      	b.n	e8e2 <__ssvfiscanf_r+0x1a6>
    e8dc:	230a      	movs	r3, #10
    e8de:	e000      	b.n	e8e2 <__ssvfiscanf_r+0x1a6>
    e8e0:	2308      	movs	r3, #8
    e8e2:	9346      	str	r3, [sp, #280]	; 0x118
    e8e4:	2304      	movs	r3, #4
    e8e6:	2c6e      	cmp	r4, #110	; 0x6e
    e8e8:	dc0d      	bgt.n	e906 <__ssvfiscanf_r+0x1ca>
    e8ea:	2303      	movs	r3, #3
    e8ec:	e00b      	b.n	e906 <__ssvfiscanf_r+0x1ca>
    e8ee:	1c31      	adds	r1, r6, #0
    e8f0:	a805      	add	r0, sp, #20
    e8f2:	f7fc fcf3 	bl	b2dc <__sccl>
    e8f6:	9b45      	ldr	r3, [sp, #276]	; 0x114
    e8f8:	1c06      	adds	r6, r0, #0
    e8fa:	9301      	str	r3, [sp, #4]
    e8fc:	2340      	movs	r3, #64	; 0x40
    e8fe:	9a01      	ldr	r2, [sp, #4]
    e900:	4313      	orrs	r3, r2
    e902:	9345      	str	r3, [sp, #276]	; 0x114
    e904:	2301      	movs	r3, #1
    e906:	934b      	str	r3, [sp, #300]	; 0x12c
    e908:	e01f      	b.n	e94a <__ssvfiscanf_r+0x20e>
    e90a:	9b45      	ldr	r3, [sp, #276]	; 0x114
    e90c:	9301      	str	r3, [sp, #4]
    e90e:	2340      	movs	r3, #64	; 0x40
    e910:	9a01      	ldr	r2, [sp, #4]
    e912:	4313      	orrs	r3, r2
    e914:	9345      	str	r3, [sp, #276]	; 0x114
    e916:	2300      	movs	r3, #0
    e918:	e7f5      	b.n	e906 <__ssvfiscanf_r+0x1ca>
    e91a:	9945      	ldr	r1, [sp, #276]	; 0x114
    e91c:	06cb      	lsls	r3, r1, #27
    e91e:	d500      	bpl.n	e922 <__ssvfiscanf_r+0x1e6>
    e920:	e753      	b.n	e7ca <__ssvfiscanf_r+0x8e>
    e922:	9b03      	ldr	r3, [sp, #12]
    e924:	9a49      	ldr	r2, [sp, #292]	; 0x124
    e926:	07c8      	lsls	r0, r1, #31
    e928:	d504      	bpl.n	e934 <__ssvfiscanf_r+0x1f8>
    e92a:	1d19      	adds	r1, r3, #4
    e92c:	9103      	str	r1, [sp, #12]
    e92e:	681b      	ldr	r3, [r3, #0]
    e930:	801a      	strh	r2, [r3, #0]
    e932:	e74a      	b.n	e7ca <__ssvfiscanf_r+0x8e>
    e934:	1d19      	adds	r1, r3, #4
    e936:	9103      	str	r1, [sp, #12]
    e938:	681b      	ldr	r3, [r3, #0]
    e93a:	601a      	str	r2, [r3, #0]
    e93c:	e745      	b.n	e7ca <__ssvfiscanf_r+0x8e>
    e93e:	2305      	movs	r3, #5
    e940:	e7e1      	b.n	e906 <__ssvfiscanf_r+0x1ca>
    e942:	2303      	movs	r3, #3
    e944:	934b      	str	r3, [sp, #300]	; 0x12c
    e946:	3307      	adds	r3, #7
    e948:	9346      	str	r3, [sp, #280]	; 0x118
    e94a:	686b      	ldr	r3, [r5, #4]
    e94c:	2b00      	cmp	r3, #0
    e94e:	dd04      	ble.n	e95a <__ssvfiscanf_r+0x21e>
    e950:	9b45      	ldr	r3, [sp, #276]	; 0x114
    e952:	9301      	str	r3, [sp, #4]
    e954:	065b      	lsls	r3, r3, #25
    e956:	d518      	bpl.n	e98a <__ssvfiscanf_r+0x24e>
    e958:	e01f      	b.n	e99a <__ssvfiscanf_r+0x25e>
    e95a:	2186      	movs	r1, #134	; 0x86
    e95c:	23c0      	movs	r3, #192	; 0xc0
    e95e:	0049      	lsls	r1, r1, #1
    e960:	aa02      	add	r2, sp, #8
    e962:	1852      	adds	r2, r2, r1
    e964:	005b      	lsls	r3, r3, #1
    e966:	58d3      	ldr	r3, [r2, r3]
    e968:	1c38      	adds	r0, r7, #0
    e96a:	1c29      	adds	r1, r5, #0
    e96c:	4798      	blx	r3
    e96e:	2800      	cmp	r0, #0
    e970:	d0ee      	beq.n	e950 <__ssvfiscanf_r+0x214>
    e972:	e79e      	b.n	e8b2 <__ssvfiscanf_r+0x176>
    e974:	9a49      	ldr	r2, [sp, #292]	; 0x124
    e976:	9201      	str	r2, [sp, #4]
    e978:	3201      	adds	r2, #1
    e97a:	9249      	str	r2, [sp, #292]	; 0x124
    e97c:	686a      	ldr	r2, [r5, #4]
    e97e:	3a01      	subs	r2, #1
    e980:	606a      	str	r2, [r5, #4]
    e982:	2a00      	cmp	r2, #0
    e984:	dd13      	ble.n	e9ae <__ssvfiscanf_r+0x272>
    e986:	3301      	adds	r3, #1
    e988:	602b      	str	r3, [r5, #0]
    e98a:	682b      	ldr	r3, [r5, #0]
    e98c:	4924      	ldr	r1, [pc, #144]	; (ea20 <__ssvfiscanf_r+0x2e4>)
    e98e:	781a      	ldrb	r2, [r3, #0]
    e990:	6809      	ldr	r1, [r1, #0]
    e992:	188a      	adds	r2, r1, r2
    e994:	7852      	ldrb	r2, [r2, #1]
    e996:	0712      	lsls	r2, r2, #28
    e998:	d4ec      	bmi.n	e974 <__ssvfiscanf_r+0x238>
    e99a:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    e99c:	2b02      	cmp	r3, #2
    e99e:	dc13      	bgt.n	e9c8 <__ssvfiscanf_r+0x28c>
    e9a0:	1c38      	adds	r0, r7, #0
    e9a2:	a945      	add	r1, sp, #276	; 0x114
    e9a4:	1c2a      	adds	r2, r5, #0
    e9a6:	ab03      	add	r3, sp, #12
    e9a8:	f7fc fab6 	bl	af18 <_scanf_chars>
    e9ac:	e01f      	b.n	e9ee <__ssvfiscanf_r+0x2b2>
    e9ae:	2186      	movs	r1, #134	; 0x86
    e9b0:	23c0      	movs	r3, #192	; 0xc0
    e9b2:	0049      	lsls	r1, r1, #1
    e9b4:	aa02      	add	r2, sp, #8
    e9b6:	1852      	adds	r2, r2, r1
    e9b8:	005b      	lsls	r3, r3, #1
    e9ba:	58d3      	ldr	r3, [r2, r3]
    e9bc:	1c38      	adds	r0, r7, #0
    e9be:	1c29      	adds	r1, r5, #0
    e9c0:	4798      	blx	r3
    e9c2:	2800      	cmp	r0, #0
    e9c4:	d0e1      	beq.n	e98a <__ssvfiscanf_r+0x24e>
    e9c6:	e774      	b.n	e8b2 <__ssvfiscanf_r+0x176>
    e9c8:	2b04      	cmp	r3, #4
    e9ca:	dc06      	bgt.n	e9da <__ssvfiscanf_r+0x29e>
    e9cc:	1c38      	adds	r0, r7, #0
    e9ce:	a945      	add	r1, sp, #276	; 0x114
    e9d0:	1c2a      	adds	r2, r5, #0
    e9d2:	ab03      	add	r3, sp, #12
    e9d4:	f7fc fafe 	bl	afd4 <_scanf_i>
    e9d8:	e009      	b.n	e9ee <__ssvfiscanf_r+0x2b2>
    e9da:	4b13      	ldr	r3, [pc, #76]	; (ea28 <__ssvfiscanf_r+0x2ec>)
    e9dc:	2b00      	cmp	r3, #0
    e9de:	d100      	bne.n	e9e2 <__ssvfiscanf_r+0x2a6>
    e9e0:	e6f3      	b.n	e7ca <__ssvfiscanf_r+0x8e>
    e9e2:	1c38      	adds	r0, r7, #0
    e9e4:	a945      	add	r1, sp, #276	; 0x114
    e9e6:	1c2a      	adds	r2, r5, #0
    e9e8:	ab03      	add	r3, sp, #12
    e9ea:	f7fc f8ab 	bl	ab44 <_scanf_float>
    e9ee:	2801      	cmp	r0, #1
    e9f0:	d007      	beq.n	ea02 <__ssvfiscanf_r+0x2c6>
    e9f2:	2802      	cmp	r0, #2
    e9f4:	d000      	beq.n	e9f8 <__ssvfiscanf_r+0x2bc>
    e9f6:	e6e8      	b.n	e7ca <__ssvfiscanf_r+0x8e>
    e9f8:	e75b      	b.n	e8b2 <__ssvfiscanf_r+0x176>
    e9fa:	89ab      	ldrh	r3, [r5, #12]
    e9fc:	065b      	lsls	r3, r3, #25
    e9fe:	d504      	bpl.n	ea0a <__ssvfiscanf_r+0x2ce>
    ea00:	e001      	b.n	ea06 <__ssvfiscanf_r+0x2ca>
    ea02:	9848      	ldr	r0, [sp, #288]	; 0x120
    ea04:	e001      	b.n	ea0a <__ssvfiscanf_r+0x2ce>
    ea06:	2001      	movs	r0, #1
    ea08:	4240      	negs	r0, r0
    ea0a:	23a7      	movs	r3, #167	; 0xa7
    ea0c:	009b      	lsls	r3, r3, #2
    ea0e:	449d      	add	sp, r3
    ea10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ea12:	46c0      	nop			; (mov r8, r8)
    ea14:	fffffd64 	.word	0xfffffd64
    ea18:	0000e685 	.word	0x0000e685
    ea1c:	0000e6ff 	.word	0x0000e6ff
    ea20:	20000138 	.word	0x20000138
    ea24:	0000fa56 	.word	0x0000fa56
    ea28:	0000ab45 	.word	0x0000ab45

0000ea2c <_read_r>:
    ea2c:	b538      	push	{r3, r4, r5, lr}
    ea2e:	1c05      	adds	r5, r0, #0
    ea30:	2000      	movs	r0, #0
    ea32:	4c07      	ldr	r4, [pc, #28]	; (ea50 <_read_r+0x24>)
    ea34:	6020      	str	r0, [r4, #0]
    ea36:	1c08      	adds	r0, r1, #0
    ea38:	1c11      	adds	r1, r2, #0
    ea3a:	1c1a      	adds	r2, r3, #0
    ea3c:	f7f5 fa44 	bl	3ec8 <_read>
    ea40:	1c43      	adds	r3, r0, #1
    ea42:	d103      	bne.n	ea4c <_read_r+0x20>
    ea44:	6823      	ldr	r3, [r4, #0]
    ea46:	2b00      	cmp	r3, #0
    ea48:	d000      	beq.n	ea4c <_read_r+0x20>
    ea4a:	602b      	str	r3, [r5, #0]
    ea4c:	bd38      	pop	{r3, r4, r5, pc}
    ea4e:	46c0      	nop			; (mov r8, r8)
    ea50:	200047c8 	.word	0x200047c8

0000ea54 <_malloc_usable_size_r>:
    ea54:	1f0b      	subs	r3, r1, #4
    ea56:	681a      	ldr	r2, [r3, #0]
    ea58:	1f10      	subs	r0, r2, #4
    ea5a:	2a00      	cmp	r2, #0
    ea5c:	da04      	bge.n	ea68 <_malloc_usable_size_r+0x14>
    ea5e:	1889      	adds	r1, r1, r2
    ea60:	3904      	subs	r1, #4
    ea62:	680b      	ldr	r3, [r1, #0]
    ea64:	18d0      	adds	r0, r2, r3
    ea66:	3804      	subs	r0, #4
    ea68:	4770      	bx	lr
	...

0000ea6c <__gnu_thumb1_case_uqi>:
    ea6c:	b402      	push	{r1}
    ea6e:	4671      	mov	r1, lr
    ea70:	0849      	lsrs	r1, r1, #1
    ea72:	0049      	lsls	r1, r1, #1
    ea74:	5c09      	ldrb	r1, [r1, r0]
    ea76:	0049      	lsls	r1, r1, #1
    ea78:	448e      	add	lr, r1
    ea7a:	bc02      	pop	{r1}
    ea7c:	4770      	bx	lr
    ea7e:	46c0      	nop			; (mov r8, r8)
    ea80:	00000152 	.word	0x00000152
    ea84:	00000152 	.word	0x00000152
    ea88:	00000140 	.word	0x00000140
    ea8c:	00000140 	.word	0x00000140
    ea90:	00000152 	.word	0x00000152
    ea94:	00000152 	.word	0x00000152
    ea98:	00000152 	.word	0x00000152
    ea9c:	00000152 	.word	0x00000152
    eaa0:	00000152 	.word	0x00000152
    eaa4:	00000152 	.word	0x00000152
    eaa8:	00000152 	.word	0x00000152
    eaac:	00000152 	.word	0x00000152
    eab0:	00000152 	.word	0x00000152
    eab4:	00000152 	.word	0x00000152
    eab8:	00000152 	.word	0x00000152
    eabc:	00000152 	.word	0x00000152
    eac0:	00000140 	.word	0x00000140
    eac4:	00000140 	.word	0x00000140
    eac8:	00000152 	.word	0x00000152
    eacc:	00000140 	.word	0x00000140
    ead0:	454c4449 	.word	0x454c4449
    ead4:	00000000 	.word	0x00000000
    ead8:	2d6a626f 	.word	0x2d6a626f
    eadc:	6e69703e 	.word	0x6e69703e
    eae0:	203d2120 	.word	0x203d2120
    eae4:	6e695028 	.word	0x6e695028
    eae8:	656d614e 	.word	0x656d614e
    eaec:	00434e29 	.word	0x00434e29
    eaf0:	2e2f2e2e 	.word	0x2e2f2e2e
    eaf4:	65626d2f 	.word	0x65626d2f
    eaf8:	41542f64 	.word	0x41542f64
    eafc:	54454752 	.word	0x54454752
    eb00:	4d41535f 	.word	0x4d41535f
    eb04:	47313252 	.word	0x47313252
    eb08:	2f413831 	.word	0x2f413831
    eb0c:	47524154 	.word	0x47524154
    eb10:	415f5445 	.word	0x415f5445
    eb14:	6c656d74 	.word	0x6c656d74
    eb18:	5241542f 	.word	0x5241542f
    eb1c:	5f544547 	.word	0x5f544547
    eb20:	5f4d4153 	.word	0x5f4d4153
    eb24:	74726f43 	.word	0x74726f43
    eb28:	304d7865 	.word	0x304d7865
    eb2c:	70672f50 	.word	0x70672f50
    eb30:	6f5f6f69 	.word	0x6f5f6f69
    eb34:	63656a62 	.word	0x63656a62
    eb38:	00682e74 	.word	0x00682e74
    eb3c:	65746e69 	.word	0x65746e69
    eb40:	6c616e72 	.word	0x6c616e72
    eb44:	6f6c6320 	.word	0x6f6c6320
    eb48:	63206b63 	.word	0x63206b63
    eb4c:	69666e6f 	.word	0x69666e6f
    eb50:	000a0d67 	.word	0x000a0d67
    eb54:	7774656e 	.word	0x7774656e
    eb58:	206b726f 	.word	0x206b726f
    eb5c:	666e6f63 	.word	0x666e6f63
    eb60:	0a0d6769 	.word	0x0a0d6769
    eb64:	00000000 	.word	0x00000000
    eb68:	0a0d0a0d 	.word	0x0a0d0a0d
    eb6c:	2a2a2a2a 	.word	0x2a2a2a2a
    eb70:	2a2a2a2a 	.word	0x2a2a2a2a
    eb74:	2a2a2a2a 	.word	0x2a2a2a2a
    eb78:	2a2a2a2a 	.word	0x2a2a2a2a
    eb7c:	2a2a2a2a 	.word	0x2a2a2a2a
    eb80:	2a2a2a2a 	.word	0x2a2a2a2a
    eb84:	2a2a2a2a 	.word	0x2a2a2a2a
    eb88:	2a2a2a2a 	.word	0x2a2a2a2a
    eb8c:	2a2a2a2a 	.word	0x2a2a2a2a
    eb90:	2a2a2a2a 	.word	0x2a2a2a2a
    eb94:	2a2a2a2a 	.word	0x2a2a2a2a
    eb98:	2a2a2a2a 	.word	0x2a2a2a2a
    eb9c:	2a2a2a2a 	.word	0x2a2a2a2a
    eba0:	2a2a2a2a 	.word	0x2a2a2a2a
    eba4:	2a2a2a2a 	.word	0x2a2a2a2a
    eba8:	2a2a2a2a 	.word	0x2a2a2a2a
    ebac:	2a2a2a2a 	.word	0x2a2a2a2a
    ebb0:	0a0d2a2a 	.word	0x0a0d2a2a
    ebb4:	00000000 	.word	0x00000000
    ebb8:	6b636974 	.word	0x6b636974
    ebbc:	6d697420 	.word	0x6d697420
    ebc0:	25203a65 	.word	0x25203a65
    ebc4:	6d20756c 	.word	0x6d20756c
    ebc8:	000a0d73 	.word	0x000a0d73
    ebcc:	7473614d 	.word	0x7473614d
    ebd0:	63207265 	.word	0x63207265
    ebd4:	6b636f6c 	.word	0x6b636f6c
    ebd8:	00000a0d 	.word	0x00000a0d
    ebdc:	20646e65 	.word	0x20646e65
    ebe0:	666e6f63 	.word	0x666e6f63
    ebe4:	61206769 	.word	0x61206769
    ebe8:	696c7070 	.word	0x696c7070
    ebec:	69746163 	.word	0x69746163
    ebf0:	62206e6f 	.word	0x62206e6f
    ebf4:	6e696765 	.word	0x6e696765
    ebf8:	00000a0d 	.word	0x00000a0d
    ebfc:	2a2a0a0d 	.word	0x2a2a0a0d
    ec00:	2a2a2a2a 	.word	0x2a2a2a2a
    ec04:	2a2a2a2a 	.word	0x2a2a2a2a
    ec08:	2a2a2a2a 	.word	0x2a2a2a2a
    ec0c:	2a2a2a2a 	.word	0x2a2a2a2a
    ec10:	2a2a2a2a 	.word	0x2a2a2a2a
    ec14:	2a2a2a2a 	.word	0x2a2a2a2a
    ec18:	2a2a2a2a 	.word	0x2a2a2a2a
    ec1c:	2a2a2a2a 	.word	0x2a2a2a2a
    ec20:	2a2a2a2a 	.word	0x2a2a2a2a
    ec24:	2a2a2a2a 	.word	0x2a2a2a2a
    ec28:	2a2a2a2a 	.word	0x2a2a2a2a
    ec2c:	2a2a2a2a 	.word	0x2a2a2a2a
    ec30:	2a2a2a2a 	.word	0x2a2a2a2a
    ec34:	2a2a2a2a 	.word	0x2a2a2a2a
    ec38:	2a2a2a2a 	.word	0x2a2a2a2a
    ec3c:	2a2a2a2a 	.word	0x2a2a2a2a
    ec40:	2a2a2a2a 	.word	0x2a2a2a2a
    ec44:	0a0d0a0d 	.word	0x0a0d0a0d
    ec48:	00000000 	.word	0x00000000
    ec4c:	70617274 	.word	0x70617274
    ec50:	21212121 	.word	0x21212121
    ec54:	21212121 	.word	0x21212121
    ec58:	21212121 	.word	0x21212121
    ec5c:	21212121 	.word	0x21212121
    ec60:	21212121 	.word	0x21212121
    ec64:	21212121 	.word	0x21212121
    ec68:	21212121 	.word	0x21212121
    ec6c:	21212121 	.word	0x21212121
    ec70:	21212121 	.word	0x21212121
    ec74:	21212121 	.word	0x21212121
    ec78:	0a0d2121 	.word	0x0a0d2121
    ec7c:	00000000 	.word	0x00000000
    ec80:	00002510 	.word	0x00002510
    ec84:	00002530 	.word	0x00002530
    ec88:	00002520 	.word	0x00002520
    ec8c:	00002550 	.word	0x00002550
    ec90:	00002540 	.word	0x00002540
    ec94:	00002560 	.word	0x00002560
    ec98:	00002756 	.word	0x00002756
    ec9c:	0000281e 	.word	0x0000281e
    eca0:	00002778 	.word	0x00002778
    eca4:	000027be 	.word	0x000027be
    eca8:	000027a0 	.word	0x000027a0
    ecac:	000027c8 	.word	0x000027c8
    ecb0:	000027dc 	.word	0x000027dc
    ecb4:	000027f0 	.word	0x000027f0
    ecb8:	00002810 	.word	0x00002810

0000ecbc <_ZZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_tE8pwrtable>:
    ecbc:	0f0f0f0f 0e0e0e0f 0c0c0d0d 08090a0b     ................
    eccc:	02040607 00000000 6e72656b 63206c65     ........kernel c
    ecdc:	69666e6f 000a0d67 00494d48 656d6974     onfig...HMI.time
    ecec:	00000000 666e6f63 70206669 0a0d7370     ....confif pps..
    ecfc:	00000000 666f5309 72617774 6f432065     .....Software Co
    ed0c:	63657272 6e6f6974 00000020 70750909     rrection .....up
    ed1c:	65746164 6d697420 6f632065 203a7272     date time corr: 
    ed2c:	25286425 73202964 206e6769 6425203a     %d(%d) sign : %d
    ed3c:	74697720 64252068 6d617320 00656c70      with %d sample.
    ed4c:	646e6509 666f5320 72617774 6f632065     .end Software co
    ed5c:	63657272 6e6f6974 00000000 72614809     rrection.....Har
    ed6c:	72617764 6f632065 63657272 6e6f6974     dware correction
    ed7c:	00000000 62460909 3a747365 20752520     ......Fbest: %u 
    ed8c:	202c7a48 65737546 7525203d 207a4820     Hz, Fuse= %u Hz 
    ed9c:	6e756f63 64253d74 00000000 646e6509     count=%d.....end
    edac:	726f6320 74636572 006e6f69 70750909      correction...up
    edbc:	65746164 6f6c6320 6f206b63 65736666     date clock offse
    edcc:	2b203a74 73756c25 646c252c 6c252b5b     t: +%lus,%ld[+%l
    eddc:	252c7375 6d20756c 257e2c73 7520756c     us,%lu ms,~%lu u
    edec:	74095d73 6c25203a 6c252c75 00000075     s].t: %lu,%lu...
    edfc:	70750909 65746164 6f6c6320 6f206b63     ..update clock o
    ee0c:	65736666 2d203a74 73756c25 646c252c     ffset: -%lus,%ld
    ee1c:	6c252d5b 252c7375 736d756c 6c257e2c     [-%lus,%lums,~%l
    ee2c:	73752075 3a74095d 756c2520 756c252c     u us].t: %lu,%lu
    ee3c:	00000000 6e797309 65732063 0000646e     .....sync send..
    ee4c:	6c656409 72207961 6f707365 2065736e     .delay response 
    ee5c:	646e6573 64692820 6425203a 00000029     send (id: %d)...
    ee6c:	72724509 20727565 00637263 6c656409     .Erreur crc..del
    ee7c:	72207961 65757165 72207473 69656365     ay request recei
    ee8c:	00006576 70657209 2074726f 65636572     ve...report rece
    ee9c:	00657669 65727265 63207275 00006372     ive.erreur crc..
    eeac:	72724509 20727565 65707974 6b6e7520     .Erreur type unk
    eebc:	00776f6e 666e6f63 48206769 0d20494d     now.config HMI .
    eecc:	0000000a                                ....

0000eed0 <__stdin_name>:
    eed0:	6474732f 00006e69                       /stdin..

0000eed8 <__stderr_name>:
    eed8:	6474732f 00727265                       /stderr.

0000eee0 <__stdout_name>:
    eee0:	6474732f 0074756f                       /stdout.

0000eee8 <_ZTVN4mbed10FileHandleE>:
	...
    eef0:	00003f81 00003f81 00003f81 00003f81     .?...?...?...?..
    ef00:	00003f81 00003f81 00003cd5 00000000     .?...?...<......
    ef10:	00000000 0070253a 65637845 6f697470     ....:%p.Exceptio
    ef20:	0000006e                                n...

0000ef24 <CSWTCH.41>:
    ef24:	00100000 00200000 00300000 006a626f     ...... ...0.obj.
    ef34:	4a5c3a43 696b6e65 775c736e 736b726f     C:\Jenkins\works
    ef44:	65636170 65626d5c 2d322d64 6c697562     pace\mbed-2-buil
    ef54:	696c2d64 72617262 61685c79 61745c6c     d-library\hal\ta
    ef64:	74656772 61685c73 41545c6c 54454752     rgets\hal\TARGET
    ef74:	6d74415f 545c6c65 45475241 41535f54     _Atmel\TARGET_SA
    ef84:	6f435f4d 78657472 5c50304d 69726573     M_CortexM0P\seri
    ef94:	615f6c61 632e6970 00000000 75616228     al_api.c....(bau
    efa4:	74617264 3d3d2065 30313120 7c7c2029     drate == 110) ||
    efb4:	61622820 61726475 3d206574 3531203d      (baudrate == 15
    efc4:	7c202930 6228207c 72647561 20657461     0) || (baudrate 
    efd4:	33203d3d 20293030 28207c7c 64756162     == 300) || (baud
    efe4:	65746172 203d3d20 30303231 7c7c2029     rate == 1200) ||
    eff4:	61622820 61726475 3d206574 3432203d      (baudrate == 24
    f004:	20293030 28207c7c 64756162 65746172     00) || (baudrate
    f014:	203d3d20 30303834 7c7c2029 61622820      == 4800) || (ba
    f024:	61726475 3d206574 3639203d 20293030     udrate == 9600) 
    f034:	28207c7c 64756162 65746172 203d3d20     || (baudrate == 
    f044:	30323931 7c202930 6228207c 72647561     19200) || (baudr
    f054:	20657461 33203d3d 30303438 7c7c2029     ate == 38400) ||
    f064:	61622820 61726475 3d206574 3735203d      (baudrate == 57
    f074:	29303036 207c7c20 75616228 74617264     600) || (baudrat
    f084:	3d3d2065 35313120 29303032 207c7c20     e == 115200) || 
    f094:	75616228 74617264 3d3d2065 30333220     (baudrate == 230
    f0a4:	29303034 207c7c20 75616228 74617264     400) || (baudrat
    f0b4:	3d3d2065 30363420 29303038 207c7c20     e == 460800) || 
    f0c4:	75616228 74617264 3d3d2065 31323920     (baudrate == 921
    f0d4:	29303036 00000000 6f747328 69625f70     600)....(stop_bi
    f0e4:	3d207374 2931203d 207c7c20 6f747328     ts == 1) || (sto
    f0f4:	69625f70 3d207374 2932203d 00000000     p_bits == 2)....
    f104:	72617028 20797469 50203d3d 74697261     (parity == Parit
    f114:	6e6f4e79 7c202965 7028207c 74697261     yNone) || (parit
    f124:	3d3d2079 72615020 4f797469 20296464     y == ParityOdd) 
    f134:	28207c7c 69726170 3d207974 6150203d     || (parity == Pa
    f144:	79746972 6e657645 00000029 74616428     rityEven)...(dat
    f154:	69625f61 3d207374 2935203d 207c7c20     a_bits == 5) || 
    f164:	74616428 69625f61 3d207374 2936203d     (data_bits == 6)
    f174:	207c7c20 74616428 69625f61 3d207374      || (data_bits =
    f184:	2937203d 207c7c20 74616428 69625f61     = 7) || (data_bi
    f194:	3d207374 2938203d 00000000 21207874     ts == 8)....tx !
    f1a4:	7628203d 2a64696f 00003029 74646977     = (void*)0..widt
    f1b4:	3d3d2068 00003820 21207872 7628203d     h == 8..rx != (v
    f1c4:	2a64696f 00003029 00000000              oid*)0......

0000f1d0 <_ZTVN4mbed3SPIE>:
	...
    f1d8:	00004cd5 00004b65 00004b95 00000000     .L..eK...K......

0000f1e8 <_ZTVN4mbed6SerialE>:
	...
    f1f0:	00002db5 00003b0d 00004ce9 00004d01     .-...;...L...M..
    f200:	ffffff24 00000000 00004e79 00004e75     $.......yN..uN..
    f210:	00004ea5 00004ed5 00004ed1 00004ed9     .N...N...N...N..
    f220:	00004edd 00002ddd 00003b41 00004d09     .N...-..A;...M..
    f230:	00004cf1 ffffff20 00000000 00002ded     .L.. ........-..
    f240:	00003b51 00000000                       Q;......

0000f248 <_ZTVN4mbed10SerialBaseE>:
	...
    f250:	00002db1 00002dfd                       .-...-..

0000f258 <_ZTVN4mbed6StreamE>:
	...
    f260:	00004e79 00004e75 00004ea5 00004ed5     yN..uN...N...N..
    f270:	00004ed1 00004ed9 00004edd 00000000     .N...N...N......
    f280:	00000000 00003f81 00003f81 fffffffc     .....?...?......
	...
    f29c:	00002b77 6465626d 73736120 61747265     w+..mbed asserta
    f2ac:	6e6f6974 69616620 3a64656c 2c732520     tion failed: %s,
    f2bc:	6c696620 25203a65 6c202c73 20656e69      file: %s, line 
    f2cc:	0a206425 00000000 4a5c3a43 696b6e65     %d .....C:\Jenki
    f2dc:	775c736e 736b726f 65636170 65626d5c     ns\workspace\mbe
    f2ec:	2d322d64 6c697562 696c2d64 72617262     d-2-build-librar
    f2fc:	622e5c79 646c6975 65626d5c 41545c64     y\.build\mbed\TA
    f30c:	54454752 4d41535f 47313252 5c413831     RGET_SAMR21G18A\
    f31c:	47524154 415f5445 6c656d74 5241545c     TARGET_Atmel\TAR
    f32c:	5f544547 5f4d4153 74726f43 304d7865     GET_SAM_CortexM0
    f33c:	70672f50 6f5f6f69 63656a62 00682e74     P/gpio_object.h.
    f34c:	6c756f63 6f6e2064 69702074 74756f6e     could not pinout
    f35c:	00000000 6d6e6970 6d207061 6d2d7369     ....pinmap mis-m
    f36c:	68637461 00000000 6d6e6970 6e207061     atch....pinmap n
    f37c:	6620746f 646e756f 726f6620 72657020     ot found for per
    f38c:	65687069 006c6172 6d6e6970 6e207061     ipheral.pinmap n
    f39c:	6620746f 646e756f 726f6620 6e756620     ot found for fun
    f3ac:	6f697463 0000006e                       ction...

0000f3b4 <PinMap_SERCOM_PADEx>:
    f3b4:	00000008 00000002 00000003 00000009     ................
    f3c4:	00000012 00000003 00000010 00000003     ................
    f3d4:	00000003 00000011 00000013 00000003     ................
    f3e4:	00000012 00000023 00000003 00000013     ....#...........
    f3f4:	00000033 00000003 00000016 00000005     3...............
    f404:	00000003 00000017 00000015 00000003     ................
    f414:	00000018 00000025 00000003 00000019     ....%...........
    f424:	00000035 00000003 000000ff ffffffff     5...............
    f434:	ffffffff                                ....

0000f438 <PinMap_SERCOM_PAD>:
    f438:	00000000 00000001 00000003 00000001     ................
    f448:	00000011 00000003 00000004 00000000     ................
    f458:	00000003 00000005 00000010 00000003     ................
    f468:	00000006 00000020 00000003 00000007     .... ...........
    f478:	00000030 00000003 00000008 00000000     0...............
    f488:	00000002 00000009 00000010 00000002     ................
    f498:	0000000c 00000002 00000002 0000000d     ................
    f4a8:	00000012 00000002 0000000e 00000022     ............"...
    f4b8:	00000002 0000000f 00000032 00000002     ........2.......
    f4c8:	00000010 00000001 00000002 00000011     ................
    f4d8:	00000011 00000002 00000012 00000021     ............!...
    f4e8:	00000002 00000013 00000031 00000002     ........1.......
    f4f8:	00000016 00000003 00000002 00000017     ................
    f508:	00000013 00000002 00000018 00000023     ............#...
    f518:	00000002 00000019 00000033 00000002     ........3.......
    f528:	0000001b 00000003 00000005 0000001c     ................
    f538:	00000013 00000005 0000001e 00000021     ............!...
    f548:	00000003 0000001f 00000031 00000003     ........1.......
    f558:	00000022 00000005 00000003 00000023     "...........#...
    f568:	00000015 00000003 00000036 00000025     ........6...%...
    f578:	00000003 00000037 00000035 00000003     ....7...5.......
    f588:	0000003e 00000024 00000005 0000003f     >...$.......?...
    f598:	00000014 00000005 00000052 00000034     ........R...4...
    f5a8:	00000005 00000053 00000004 00000005     ....S...........
    f5b8:	000000ff ffffffff ffffffff 42000800     ...............B
    f5c8:	42000c00 42001000 42001400 42001800     ...B...B...B...B
    f5d8:	42001c00 00005300 00005318 00005318     ...B.S...S...S..
    f5e8:	000052c6 000052c6 000052cc 000052d2     .R...R...R...R..
    f5f8:	000052e2 00005306 000053bc 000053ca     .R...S...S...S..
    f608:	000053ca 0000534e 00005352 00005360     .S..NS..RS..`S..
    f618:	0000536e 0000537c 000053ac 206e6970     nS..|S...S..pin 
    f628:	28203d21 4e6e6950 29656d61 0000434e     != (PinName)NC..
    f638:	4a5c3a43 696b6e65 775c736e 736b726f     C:\Jenkins\works
    f648:	65636170 65626d5c 2d322d64 6c697562     pace\mbed-2-buil
    f658:	696c2d64 72617262 61685c79 61745c6c     d-library\hal\ta
    f668:	74656772 61685c73 41545c6c 54454752     rgets\hal\TARGET
    f678:	6d74415f 545c6c65 45475241 41535f54     _Atmel\TARGET_SA
    f688:	6f435f4d 78657472 5c50304d 6f697067     M_CortexM0P\gpio
    f698:	6970615f 0000632e 4a5c3a43 696b6e65     _api.c..C:\Jenki
    f6a8:	775c736e 736b726f 65636170 65626d5c     ns\workspace\mbe
    f6b8:	2d322d64 6c697562 696c2d64 72617262     d-2-build-librar
    f6c8:	61685c79 61745c6c 74656772 61685c73     y\hal\targets\ha
    f6d8:	41545c6c 54454752 6d74415f 545c6c65     l\TARGET_Atmel\T
    f6e8:	45475241 41535f54 6f435f4d 78657472     ARGET_SAM_Cortex
    f6f8:	5c50304d 6d6e6970 632e7061 00000000     M0P\pinmap.c....
    f708:	74726f70 00000000 42000800 42000c00     port.......B...B
    f718:	42001000 42001400 42001800 42001c00     ...B...B...B...B
    f728:	6c637963 705f7365 755f7265 203e2073     cycles_per_us > 
    f738:	00000030 4a5c3a43 696b6e65 775c736e     0...C:\Jenkins\w
    f748:	736b726f 65636170 65626d5c 2d322d64     orkspace\mbed-2-
    f758:	6c697562 696c2d64 72617262 61685c79     build-library\ha
    f768:	61745c6c 74656772 61685c73 41545c6c     l\targets\hal\TA
    f778:	54454752 6d74415f 545c6c65 45475241     RGET_Atmel\TARGE
    f788:	41535f54 6f435f4d 78657472 5c50304d     T_SAM_CortexM0P\
    f798:	745f7375 656b6369 00632e72 75646f6d     us_ticker.c.modu
    f7a8:	0000656c                                le..

0000f7ac <tc_interrupt_vectors.12802>:
    f7ac:	00141312 4a5c3a43 696b6e65 775c736e     ....C:\Jenkins\w
    f7bc:	736b726f 65636170 65626d5c 2d322d64     orkspace\mbed-2-
    f7cc:	6c697562 696c2d64 72617262 61685c79     build-library\ha
    f7dc:	61745c6c 74656772 61685c73 41545c6c     l\targets\hal\TA
    f7ec:	54454752 6d74415f 545c6c65 45475241     RGET_Atmel\TARGE
    f7fc:	41535f54 6f435f4d 78657472 5c50304d     T_SAM_CortexM0P\
    f80c:	5f697073 2e697061 00000063 6b6c6373     spi_api.c...sclk
    f81c:	203d2120 0000434e 00000000               != NC......

0000f828 <_ZTVN4mbed8FileBaseE>:
	...
    f830:	000060b1 000060e5                       .`...`..

0000f838 <_ZTVN4mbed8FileLikeE>:
	...
    f840:	00003f81 00003f81 00003f81 00003f81     .?...?...?...?..
    f850:	00003f81 00003f81 00003cd5 00000000     .?...?...<......
    f860:	00000000 fffffffc 00000000 00000000     ................
    f870:	00000000                                ....

0000f874 <us_interface>:
    f874:	000059d5 000059e9 00005a71 00005a95     .Y...Y..qZ...Z..
    f884:	00005a09                                .Z..

0000f888 <us_data>:
    f888:	0000f874 20004704 42002c00 42003000     t....G. .,.B.0.B
    f898:	42003400 001c1c1b 10000800 00002000     .4.B......... ..
    f8a8:	00006f56 00006f1e 00006f3a 00006f12     Vo...o..:o...o..
    f8b8:	00006f3a 00006e7e 00006f3a 00006f12     :o..~n..:o...o..
    f8c8:	00006f1e 00006f1e 00006e7e 00006f12     .o...o..~n...o..
    f8d8:	00006fbc 00006fbc 00006fbc 00006f40     .o...o...o..@o..
    f8e8:	00006f1e 00006f1e 00007006 00006f10     .o...o...p...o..
    f8f8:	00007006 00006e7e 00007006 00006f10     .p..~n...p...o..
    f908:	00006f1e 00006f1e 00006e7e 00006f10     .o...o..~n...o..
    f918:	00006fbc 00006fbc 00006fbc 00006fea     .o...o...o...o..
    f928:	0000731e 00007316 00007316 0000730e     .s...s...s...s..
    f938:	00007260 00007260 00007304 0000730e     `r..`r...s...s..
    f948:	00007260 00007304 00007260 0000730e     `r...s..`r...s..
    f958:	00007262 00007262 00007262 000073a8     br..br..br...s..
    f968:	000080c8 00007fb6 0000809c 00007fa2     ................
    f978:	0000809c 000080a6 0000809c 00007fa2     ................
    f988:	00007fb6 00007fb6 000080a6 00007fa2     ................
    f998:	00007fac 00007fac 00007fac 0000830e     ................
    f9a8:	0000895c 0000893a 0000893a 0000892e     \...:...:.......
    f9b8:	00008822 00008822 00008922 0000892e     "..."...".......
    f9c8:	00008822 00008922 00008822 0000892e     "..."...".......
    f9d8:	00008826 00008826 00008826 00008b3c     &...&...&...<...

0000f9e8 <__sf_fake_stdin>:
	...

0000fa08 <__sf_fake_stdout>:
	...

0000fa28 <__sf_fake_stderr>:
	...
    fa48:	00000043                                C...

0000fa4c <_global_impure_ptr>:
    fa4c:	200000d4 2b302d23 6c680020 6665004c     ... #-0+ .hlL.ef
    fa5c:	47464567 464e4900 666e6900 4e414e00     gEFG.INF.inf.NAN
    fa6c:	6e616e00 32313000 36353433 41393837     .nan.0123456789A
    fa7c:	45444342 31300046 35343332 39383736     BCDEF.0123456789
    fa8c:	64636261 65006665 00646c25 0000fab6     abcdef.e%ld.....
    fa9c:	0000fab9 0000fabc 61462d41 3938662d     ........A-Fa-f89
    faac:	33323130 37363534 2d2b005d 00303000     01234567].+-.00.
    fabc:	00005878                                xX..

0000fac0 <fpinan.5315>:
    fac0:	00000034 fffffbce 000003cb 00000001     4...............
	...

0000fad8 <tinytens>:
    fad8:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
    fae8:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
    faf8:	64ac6f43 11680628                       Co.d(.h.

0000fb00 <fpi.5279>:
    fb00:	00000035 fffffbce 000003cb 00000001     5...............
    fb10:	00000000                                ....

0000fb14 <_ctype_>:
    fb14:	20202000 20202020 28282020 20282828     .         ((((( 
    fb24:	20202020 20202020 20202020 20202020                     
    fb34:	10108820 10101010 10101010 10101010      ...............
    fb44:	04040410 04040404 10040404 10101010     ................
    fb54:	41411010 41414141 01010101 01010101     ..AAAAAA........
    fb64:	01010101 01010101 01010101 10101010     ................
    fb74:	42421010 42424242 02020202 02020202     ..BBBBBB........
    fb84:	02020202 02020202 02020202 10101010     ................
    fb94:	00000020 00000000 00000000 00000000      ...............
	...
    fc14:	666e4900 74696e69 614e0079 4f50004e     .Infinity.NaN.PO
    fc24:	00584953 0000002e 00000000              SIX.........

0000fc30 <__mprec_tens>:
    fc30:	00000000 3ff00000 00000000 40240000     .......?......$@
    fc40:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
    fc50:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
    fc60:	00000000 412e8480 00000000 416312d0     .......A......cA
    fc70:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
    fc80:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
    fc90:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
    fca0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
    fcb0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
    fcc0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
    fcd0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
    fce0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
    fcf0:	79d99db4 44ea7843                       ...yCx.D

0000fcf8 <__mprec_bigtens>:
    fcf8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
    fd08:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
    fd18:	7f73bf3c 75154fdd                       <.s..O.u

0000fd20 <p05.5314>:
    fd20:	00000005 00000019 0000007d              ........}...

0000fd2c <_init>:
    fd2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fd2e:	46c0      	nop			; (mov r8, r8)
    fd30:	bcf8      	pop	{r3, r4, r5, r6, r7}
    fd32:	bc08      	pop	{r3}
    fd34:	469e      	mov	lr, r3
    fd36:	4770      	bx	lr

0000fd38 <__init_array_start>:
    fd38:	000000dd 	.word	0x000000dd
    fd3c:	00001a29 	.word	0x00001a29
    fd40:	00001c5d 	.word	0x00001c5d
    fd44:	00003b61 	.word	0x00003b61
    fd48:	00003c45 	.word	0x00003c45

0000fd4c <_fini>:
    fd4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fd4e:	46c0      	nop			; (mov r8, r8)
    fd50:	bcf8      	pop	{r3, r4, r5, r6, r7}
    fd52:	bc08      	pop	{r3}
    fd54:	469e      	mov	lr, r3
    fd56:	4770      	bx	lr

0000fd58 <__fini_array_start>:
    fd58:	000000b5 	.word	0x000000b5
