
TimeSyncMbed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000fd5c  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000c4  200000b0  0000fd5c  000180b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00004658  20000174  0000fe20  00018174  2**2
                  ALLOC
  3 .heap         00001834  200047cc  00014478  00018174  2**0
                  ALLOC
  4 .stack        00002000  20006000  00015cac  00018174  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00018174  2**0
                  CONTENTS, READONLY
  6 .comment      000000cb  00000000  00000000  0001819c  2**0
                  CONTENTS, READONLY
  7 .debug_info   000427a0  00000000  00000000  00018267  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00006c2c  00000000  00000000  0005aa07  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00008a28  00000000  00000000  00061633  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000ac0  00000000  00000000  0006a05b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000a20  00000000  00000000  0006ab1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000103e3  00000000  00000000  0006b53b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001df8d  00000000  00000000  0007b91e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00089c34  00000000  00000000  000998ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000033e0  00000000  00000000  001234e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .stabstr      00000076  00000000  00000000  001268c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20008000 	.word	0x20008000
       4:	00003fcd 	.word	0x00003fcd
       8:	00003fc9 	.word	0x00003fc9
       c:	00003fc9 	.word	0x00003fc9
	...
      2c:	000011e1 	.word	0x000011e1
	...
      38:	0000124d 	.word	0x0000124d
      3c:	00001291 	.word	0x00001291
      40:	00003fc9 	.word	0x00003fc9
      44:	00003fc9 	.word	0x00003fc9
      48:	00003fc9 	.word	0x00003fc9
      4c:	00001951 	.word	0x00001951
      50:	0000408d 	.word	0x0000408d
      54:	00003fc9 	.word	0x00003fc9
      58:	00003fc9 	.word	0x00003fc9
      5c:	00000000 	.word	0x00000000
      60:	00003fc9 	.word	0x00003fc9
      64:	00003fc9 	.word	0x00003fc9
      68:	00003fc9 	.word	0x00003fc9
      6c:	00003fc9 	.word	0x00003fc9
      70:	00003fc9 	.word	0x00003fc9
	...
      7c:	00003fc9 	.word	0x00003fc9
      80:	00003fc9 	.word	0x00003fc9
      84:	00003fc9 	.word	0x00003fc9
      88:	00006285 	.word	0x00006285
      8c:	00006291 	.word	0x00006291
      90:	0000629d 	.word	0x0000629d
	...
      ac:	00003fc9 	.word	0x00003fc9
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000174 	.word	0x20000174
      d4:	00000000 	.word	0x00000000
      d8:	0000fd5c 	.word	0x0000fd5c

000000dc <frame_dummy>:
      dc:	b508      	push	{r3, lr}
      de:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4807      	ldr	r0, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4908      	ldr	r1, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd08      	pop	{r3, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	0000fd5c 	.word	0x0000fd5c
     108:	20000178 	.word	0x20000178
     10c:	0000fd5c 	.word	0x0000fd5c
     110:	00000000 	.word	0x00000000

00000114 <CLP_GenerateEscape>:
  pos += 3;
  memcpy(data.relay_hardware, buffer + pos, 3);
  pos += 3;
  memcpy(data.lcd_map, buffer + pos, 20);
  pos += 20;
  memcpy(data.output_state, buffer + pos, 16);
     114:	b5f0      	push	{r4, r5, r6, r7, lr}
     116:	b0cd      	sub	sp, #308	; 0x134
  pos += 16;
}
     118:	2800      	cmp	r0, #0
     11a:	d004      	beq.n	126 <CLP_GenerateEscape+0x12>
     11c:	2300      	movs	r3, #0
     11e:	2200      	movs	r2, #0
     120:	2900      	cmp	r1, #0
     122:	d105      	bne.n	130 <CLP_GenerateEscape+0x1c>
     124:	e01b      	b.n	15e <CLP_GenerateEscape+0x4a>
     126:	2201      	movs	r2, #1

size_t CLP_GenerateEscape(uint8_t* buffer, size_t length)
{
  if(!buffer)
  {
    CLP_G_ERROR_VAL = CLP_LIB_ERROR_BUFFER_NOT_GIVEN;
     128:	4b11      	ldr	r3, [pc, #68]	; (170 <CLP_GenerateEscape+0x5c>)
     12a:	601a      	str	r2, [r3, #0]
    return 0;
     12c:	2400      	movs	r4, #0
     12e:	e01b      	b.n	168 <CLP_GenerateEscape+0x54>
//  uint8_t* temp = new uint8_t[length + count];
//  count = 0;

  for(size_t i = 0; i < length; ++i)
  {
    switch(buffer[i])
     130:	4e10      	ldr	r6, [pc, #64]	; (174 <CLP_GenerateEscape+0x60>)
      case CLP_ESCAPE_ETX:
      case CLP_ESCAPE_XON:
      case CLP_ESCAPE_XOFF:
      case CLP_ESCAPE_DLE:
      {
        temp[i + count] = CLP_ESCAPE_DLE;
     132:	2710      	movs	r7, #16
//  uint8_t* temp = new uint8_t[length + count];
//  count = 0;

  for(size_t i = 0; i < length; ++i)
  {
    switch(buffer[i])
     134:	5cc4      	ldrb	r4, [r0, r3]
     136:	2c13      	cmp	r4, #19
     138:	d80b      	bhi.n	152 <CLP_GenerateEscape+0x3e>
     13a:	00a5      	lsls	r5, r4, #2
     13c:	5975      	ldr	r5, [r6, r5]
     13e:	46af      	mov	pc, r5
      case CLP_ESCAPE_ETX:
      case CLP_ESCAPE_XON:
      case CLP_ESCAPE_XOFF:
      case CLP_ESCAPE_DLE:
      {
        temp[i + count] = CLP_ESCAPE_DLE;
     140:	ad01      	add	r5, sp, #4
     142:	18ad      	adds	r5, r5, r2
     144:	54ef      	strb	r7, [r5, r3]
        ++count;
     146:	3201      	adds	r2, #1
        temp[i + count] = buffer[i] + 0x40;
     148:	ad01      	add	r5, sp, #4
     14a:	18ad      	adds	r5, r5, r2
     14c:	3440      	adds	r4, #64	; 0x40
     14e:	54ec      	strb	r4, [r5, r3]
      }
      break;
     150:	e002      	b.n	158 <CLP_GenerateEscape+0x44>
      default: temp[i + count] = buffer[i];
     152:	ad01      	add	r5, sp, #4
     154:	18ad      	adds	r5, r5, r2
     156:	54ec      	strb	r4, [r5, r3]

  uint8_t temp[CLP_UTILITY_MAX_PACKET_SIZE];
//  uint8_t* temp = new uint8_t[length + count];
//  count = 0;

  for(size_t i = 0; i < length; ++i)
     158:	3301      	adds	r3, #1
     15a:	428b      	cmp	r3, r1
     15c:	d1ea      	bne.n	134 <CLP_GenerateEscape+0x20>
      break;
      default: temp[i + count] = buffer[i];
    }
  }

  memcpy(buffer, temp, length + count);
     15e:	1854      	adds	r4, r2, r1
     160:	a901      	add	r1, sp, #4
     162:	1c22      	adds	r2, r4, #0
     164:	4b04      	ldr	r3, [pc, #16]	; (178 <CLP_GenerateEscape+0x64>)
     166:	4798      	blx	r3
//  delete[] temp;

  return length + count;
}
     168:	1c20      	adds	r0, r4, #0
     16a:	b04d      	add	sp, #308	; 0x134
     16c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     16e:	46c0      	nop			; (mov r8, r8)
     170:	20000190 	.word	0x20000190
     174:	0000ea68 	.word	0x0000ea68
     178:	00009e8f 	.word	0x00009e8f

0000017c <CLP_GeneratePacket>:

  return length + count;
}

size_t CLP_GeneratePacket(uint8_t* buffer, const uint8_t* data, size_t datalength)
{
     17c:	b570      	push	{r4, r5, r6, lr}
     17e:	1c04      	adds	r4, r0, #0
     180:	1c15      	adds	r5, r2, #0
  if(!buffer)
     182:	2800      	cmp	r0, #0
     184:	d104      	bne.n	190 <CLP_GeneratePacket+0x14>
  {
    CLP_G_ERROR_VAL = CLP_LIB_ERROR_BUFFER_NOT_GIVEN;
     186:	2201      	movs	r2, #1
     188:	4b12      	ldr	r3, [pc, #72]	; (1d4 <CLP_GeneratePacket+0x58>)
     18a:	601a      	str	r2, [r3, #0]
    return 0;
     18c:	2000      	movs	r0, #0
     18e:	e020      	b.n	1d2 <CLP_GeneratePacket+0x56>
  }

  if(!data)
     190:	2900      	cmp	r1, #0
     192:	d118      	bne.n	1c6 <CLP_GeneratePacket+0x4a>
  {
    CLP_G_ERROR_VAL = CLP_LIB_ERROR_PARAM_NOT_GIVEN;
     194:	2203      	movs	r2, #3
     196:	4b0f      	ldr	r3, [pc, #60]	; (1d4 <CLP_GeneratePacket+0x58>)
     198:	601a      	str	r2, [r3, #0]
    datalength = 0;
  }

  buffer[0] = CLP_ESCAPE_STX;
     19a:	2302      	movs	r3, #2
     19c:	7003      	strb	r3, [r0, #0]
  }

  if(!data)
  {
    CLP_G_ERROR_VAL = CLP_LIB_ERROR_PARAM_NOT_GIVEN;
    datalength = 0;
     19e:	2500      	movs	r5, #0
  size_t length = 1;
  if(data)
  {
    memcpy(buffer + length, data, datalength);
  }
  length += datalength;
     1a0:	1c6e      	adds	r6, r5, #1
  uint16_t crc = CalculateBufferCRC16(buffer, length, 0x0000);
     1a2:	1c20      	adds	r0, r4, #0
     1a4:	1c31      	adds	r1, r6, #0
     1a6:	2200      	movs	r2, #0
     1a8:	4b0b      	ldr	r3, [pc, #44]	; (1d8 <CLP_GeneratePacket+0x5c>)
     1aa:	4798      	blx	r3
     1ac:	1c05      	adds	r5, r0, #0
  length = CLP_GenerateEscape(buffer + 1, length);
     1ae:	1c60      	adds	r0, r4, #1
     1b0:	1c31      	adds	r1, r6, #0
     1b2:	4b0a      	ldr	r3, [pc, #40]	; (1dc <CLP_GeneratePacket+0x60>)
     1b4:	4798      	blx	r3

  buffer[length + 2] = CLP_ESCAPE_ETX;
     1b6:	1823      	adds	r3, r4, r0
     1b8:	2203      	movs	r2, #3
     1ba:	709a      	strb	r2, [r3, #2]
  buffer[length] = crc & 255;
     1bc:	5425      	strb	r5, [r4, r0]
  buffer[length+1] = (crc >> 8) & 255;
     1be:	0a2d      	lsrs	r5, r5, #8
     1c0:	705d      	strb	r5, [r3, #1]
 //(*(uint16_t*)&buffer[length]) = _byteswap_ushort(crc);
  length += 3;
     1c2:	3003      	adds	r0, #3

  return length;
     1c4:	e005      	b.n	1d2 <CLP_GeneratePacket+0x56>
  {
    CLP_G_ERROR_VAL = CLP_LIB_ERROR_PARAM_NOT_GIVEN;
    datalength = 0;
  }

  buffer[0] = CLP_ESCAPE_STX;
     1c6:	2302      	movs	r3, #2
     1c8:	7003      	strb	r3, [r0, #0]
  size_t length = 1;
  if(data)
  {
    memcpy(buffer + length, data, datalength);
     1ca:	3001      	adds	r0, #1
     1cc:	4b04      	ldr	r3, [pc, #16]	; (1e0 <CLP_GeneratePacket+0x64>)
     1ce:	4798      	blx	r3
     1d0:	e7e6      	b.n	1a0 <CLP_GeneratePacket+0x24>
  buffer[length+1] = (crc >> 8) & 255;
 //(*(uint16_t*)&buffer[length]) = _byteswap_ushort(crc);
  length += 3;

  return length;
}
     1d2:	bd70      	pop	{r4, r5, r6, pc}
     1d4:	20000190 	.word	0x20000190
     1d8:	00000231 	.word	0x00000231
     1dc:	00000115 	.word	0x00000115
     1e0:	00009e8f 	.word	0x00009e8f

000001e4 <_Z9gencrc_16t>:
// Purpose: Functions to generate CRC16-CCITT parity values.

#include "crc.h"

uint16_t gencrc_16(uint16_t i)
{
     1e4:	b510      	push	{r4, lr}
  uint16_t j;
  uint16_t k;
  uint16_t crc;

  k = i<<8;
     1e6:	0200      	lsls	r0, r0, #8
     1e8:	b283      	uxth	r3, r0
     1ea:	2208      	movs	r2, #8
  crc = 0;
     1ec:	2000      	movs	r0, #0

  for(j = 0; j < 8; j++)
  {
    if((crc ^ k)&0x8000)
    {
      crc = (crc<<1)^0x1021;
     1ee:	4c09      	ldr	r4, [pc, #36]	; (214 <_Z9gencrc_16t+0x30>)
  k = i<<8;
  crc = 0;

  for(j = 0; j < 8; j++)
  {
    if((crc ^ k)&0x8000)
     1f0:	1c01      	adds	r1, r0, #0
     1f2:	4059      	eors	r1, r3
     1f4:	b209      	sxth	r1, r1
     1f6:	2900      	cmp	r1, #0
     1f8:	da03      	bge.n	202 <_Z9gencrc_16t+0x1e>
    {
      crc = (crc<<1)^0x1021;
     1fa:	0040      	lsls	r0, r0, #1
     1fc:	4060      	eors	r0, r4
     1fe:	b280      	uxth	r0, r0
     200:	e001      	b.n	206 <_Z9gencrc_16t+0x22>
    }
    else
    {
      crc <<= 1;
     202:	0040      	lsls	r0, r0, #1
     204:	b280      	uxth	r0, r0
    }
    k <<= 1;
     206:	005b      	lsls	r3, r3, #1
     208:	b29b      	uxth	r3, r3
     20a:	3a01      	subs	r2, #1
     20c:	b292      	uxth	r2, r2
  uint16_t crc;

  k = i<<8;
  crc = 0;

  for(j = 0; j < 8; j++)
     20e:	2a00      	cmp	r2, #0
     210:	d1ee      	bne.n	1f0 <_Z9gencrc_16t+0xc>
    }
    k <<= 1;
  }

  return(crc);
}
     212:	bd10      	pop	{r4, pc}
     214:	00001021 	.word	0x00001021

00000218 <_Z23CalculateCharacterCRC16th>:

uint16_t CalculateCharacterCRC16(uint16_t crc, uint8_t c)
{
     218:	b510      	push	{r4, lr}
     21a:	1c04      	adds	r4, r0, #0
  return ((crc<<8)^gencrc_16((crc>>8)^c));
     21c:	1200      	asrs	r0, r0, #8
     21e:	4048      	eors	r0, r1
     220:	4b02      	ldr	r3, [pc, #8]	; (22c <_Z23CalculateCharacterCRC16th+0x14>)
     222:	4798      	blx	r3
     224:	0224      	lsls	r4, r4, #8
     226:	4060      	eors	r0, r4
     228:	b280      	uxth	r0, r0
}
     22a:	bd10      	pop	{r4, pc}
     22c:	000001e5 	.word	0x000001e5

00000230 <_Z20CalculateBufferCRC16PKhjt>:

uint16_t CalculateBufferCRC16(const uint8_t* buffer, size_t length, uint16_t start = 0x1D0F)
{
     230:	b570      	push	{r4, r5, r6, lr}
     232:	1c05      	adds	r5, r0, #0
     234:	1c10      	adds	r0, r2, #0
  uint16_t crc = start;
//  uint16_t crc = 0xFFFF;

  for(size_t i = 0; i < length; ++i)
     236:	2900      	cmp	r1, #0
     238:	d007      	beq.n	24a <_Z20CalculateBufferCRC16PKhjt+0x1a>
     23a:	1c2c      	adds	r4, r5, #0
     23c:	186d      	adds	r5, r5, r1
  {
    crc = CalculateCharacterCRC16(crc, buffer[i]);
     23e:	4e03      	ldr	r6, [pc, #12]	; (24c <_Z20CalculateBufferCRC16PKhjt+0x1c>)
     240:	7821      	ldrb	r1, [r4, #0]
     242:	47b0      	blx	r6
     244:	3401      	adds	r4, #1
uint16_t CalculateBufferCRC16(const uint8_t* buffer, size_t length, uint16_t start = 0x1D0F)
{
  uint16_t crc = start;
//  uint16_t crc = 0xFFFF;

  for(size_t i = 0; i < length; ++i)
     246:	42ac      	cmp	r4, r5
     248:	d1fa      	bne.n	240 <_Z20CalculateBufferCRC16PKhjt+0x10>
  {
    crc = CalculateCharacterCRC16(crc, buffer[i]);
  }
  return crc;
}
     24a:	bd70      	pop	{r4, r5, r6, pc}
     24c:	00000219 	.word	0x00000219

00000250 <vApplicationIdleHook>:
#include <conf_timeProtocol.h>



portTickType saveTimeRCrash=0;
void vApplicationIdleHook( void ){
     250:	b508      	push	{r3, lr}
	
		if(xTaskGetTickCount()-saveTimeRCrash>(TIME_CRASH_RX/portTICK_RATE_MS)){
     252:	4b0f      	ldr	r3, [pc, #60]	; (290 <vApplicationIdleHook+0x40>)
     254:	4798      	blx	r3
     256:	4b0f      	ldr	r3, [pc, #60]	; (294 <vApplicationIdleHook+0x44>)
     258:	681b      	ldr	r3, [r3, #0]
     25a:	1ac0      	subs	r0, r0, r3
     25c:	4b0e      	ldr	r3, [pc, #56]	; (298 <vApplicationIdleHook+0x48>)
     25e:	4298      	cmp	r0, r3
     260:	d913      	bls.n	28a <vApplicationIdleHook+0x3a>
			saveTimeRCrash=xTaskGetTickCount();
     262:	4b0b      	ldr	r3, [pc, #44]	; (290 <vApplicationIdleHook+0x40>)
     264:	4798      	blx	r3
     266:	4b0b      	ldr	r3, [pc, #44]	; (294 <vApplicationIdleHook+0x44>)
     268:	6018      	str	r0, [r3, #0]
			if(clearRCrash==true){
     26a:	4b0c      	ldr	r3, [pc, #48]	; (29c <vApplicationIdleHook+0x4c>)
     26c:	781b      	ldrb	r3, [r3, #0]
     26e:	2b01      	cmp	r3, #1
     270:	d108      	bne.n	284 <vApplicationIdleHook+0x34>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     272:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
     276:	4a0a      	ldr	r2, [pc, #40]	; (2a0 <vApplicationIdleHook+0x50>)
     278:	4b0a      	ldr	r3, [pc, #40]	; (2a4 <vApplicationIdleHook+0x54>)
     27a:	60da      	str	r2, [r3, #12]
     27c:	f3bf 8f4f 	dsb	sy

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
     280:	46c0      	nop			; (mov r8, r8)
     282:	e7fd      	b.n	280 <vApplicationIdleHook+0x30>
				NVIC_SystemReset();
			}
			else{
				clearRCrash=true;
     284:	2201      	movs	r2, #1
     286:	4b05      	ldr	r3, [pc, #20]	; (29c <vApplicationIdleHook+0x4c>)
     288:	701a      	strb	r2, [r3, #0]
			}
		}
		
			wdt_clear();
     28a:	4b07      	ldr	r3, [pc, #28]	; (2a8 <vApplicationIdleHook+0x58>)
     28c:	4798      	blx	r3
     28e:	bd08      	pop	{r3, pc}
     290:	00000c51 	.word	0x00000c51
     294:	20000194 	.word	0x20000194
     298:	000186a0 	.word	0x000186a0
     29c:	20000198 	.word	0x20000198
     2a0:	05fa0004 	.word	0x05fa0004
     2a4:	e000ed00 	.word	0xe000ed00
     2a8:	000003ed 	.word	0x000003ed

000002ac <wdt_set_config>:
	return STATUS_OK;
}
#else
enum status_code wdt_set_config(
		const struct wdt_conf *const config)
{
     2ac:	b510      	push	{r4, lr}
     2ae:	b082      	sub	sp, #8
    const enum system_clock_apb_bus bus,
    const uint32_t mask)
{
    switch (bus) {
        case SYSTEM_CLOCK_APB_APBA:
                    PM->APBAMASK.reg |= mask;
     2b0:	4a38      	ldr	r2, [pc, #224]	; (394 <wdt_set_config+0xe8>)
     2b2:	6991      	ldr	r1, [r2, #24]
     2b4:	2310      	movs	r3, #16
     2b6:	430b      	orrs	r3, r1
     2b8:	6193      	str	r3, [r2, #24]
	Wdt *const WDT_module = WDT;

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (WDT_module->CTRLA.reg & WDT_CTRLA_ALWAYSON);
#else
	return (WDT_module->CTRL.reg & WDT_CTRL_ALWAYSON);
     2ba:	4b37      	ldr	r3, [pc, #220]	; (398 <wdt_set_config+0xec>)
     2bc:	781b      	ldrb	r3, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_WDT);

	/* Check of the Watchdog has been locked to be always on, if so, abort */
	if (wdt_is_locked()) {
     2be:	09db      	lsrs	r3, r3, #7
		return STATUS_ERR_IO;
     2c0:	2210      	movs	r2, #16

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_WDT);

	/* Check of the Watchdog has been locked to be always on, if so, abort */
	if (wdt_is_locked()) {
     2c2:	2b00      	cmp	r3, #0
     2c4:	d162      	bne.n	38c <wdt_set_config+0xe0>
		return STATUS_ERR_IO;
	}

	/* Check for an invalid timeout period, abort if found */
	if (config->timeout_period == WDT_PERIOD_NONE) {
     2c6:	78c3      	ldrb	r3, [r0, #3]
		return STATUS_ERR_INVALID_ARG;
     2c8:	3207      	adds	r2, #7
	if (wdt_is_locked()) {
		return STATUS_ERR_IO;
	}

	/* Check for an invalid timeout period, abort if found */
	if (config->timeout_period == WDT_PERIOD_NONE) {
     2ca:	2b00      	cmp	r3, #0
     2cc:	d05e      	beq.n	38c <wdt_set_config+0xe0>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Make sure the Window and Early Warning periods are not more than the
	 * reset period, abort if either is invalid */
	if ((config->timeout_period < config->window_period) ||
     2ce:	7901      	ldrb	r1, [r0, #4]
     2d0:	4299      	cmp	r1, r3
     2d2:	d85b      	bhi.n	38c <wdt_set_config+0xe0>
     2d4:	7941      	ldrb	r1, [r0, #5]
     2d6:	4299      	cmp	r1, r3
     2d8:	d858      	bhi.n	38c <wdt_set_config+0xe0>
			(config->timeout_period < config->early_warning_period)) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Disable the Watchdog module */
	WDT_module->CTRL.reg &= ~WDT_CTRL_ENABLE;
     2da:	4a2f      	ldr	r2, [pc, #188]	; (398 <wdt_set_config+0xec>)
     2dc:	7813      	ldrb	r3, [r2, #0]
     2de:	2102      	movs	r1, #2
     2e0:	438b      	bics	r3, r1
     2e2:	7013      	strb	r3, [r2, #0]
	Wdt *const WDT_module = WDT;

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	if (WDT_module->SYNCBUSY.reg) {
#else
	if (WDT_module->STATUS.reg & WDT_STATUS_SYNCBUSY) {
     2e4:	79d3      	ldrb	r3, [r2, #7]

	while (wdt_is_syncing()) {
     2e6:	b25b      	sxtb	r3, r3
     2e8:	2b00      	cmp	r3, #0
     2ea:	dbfb      	blt.n	2e4 <wdt_set_config+0x38>
		/* Wait for all hardware modules to complete synchronization */
	}

	if(config->enable == false) {
     2ec:	7843      	ldrb	r3, [r0, #1]
		return STATUS_OK;
     2ee:	2200      	movs	r2, #0

	while (wdt_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}

	if(config->enable == false) {
     2f0:	2b00      	cmp	r3, #0
     2f2:	d04b      	beq.n	38c <wdt_set_config+0xe0>
     2f4:	1c04      	adds	r4, r0, #0
		return STATUS_OK;
	}

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	gclk_chan_conf.source_generator = config->clock_source;
     2f6:	a901      	add	r1, sp, #4
     2f8:	7883      	ldrb	r3, [r0, #2]
     2fa:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(WDT_GCLK_ID, &gclk_chan_conf);
     2fc:	2003      	movs	r0, #3
     2fe:	4b27      	ldr	r3, [pc, #156]	; (39c <wdt_set_config+0xf0>)
     300:	4798      	blx	r3
	system_gclk_chan_enable(WDT_GCLK_ID);
     302:	2003      	movs	r0, #3
     304:	4b26      	ldr	r3, [pc, #152]	; (3a0 <wdt_set_config+0xf4>)
     306:	4798      	blx	r3
	if (config->always_on) {
     308:	7823      	ldrb	r3, [r4, #0]
     30a:	2b00      	cmp	r3, #0
     30c:	d002      	beq.n	314 <wdt_set_config+0x68>
		system_gclk_chan_lock(WDT_GCLK_ID);
     30e:	2003      	movs	r0, #3
     310:	4b24      	ldr	r3, [pc, #144]	; (3a4 <wdt_set_config+0xf8>)
     312:	4798      	blx	r3
	}

	uint32_t new_config = 0;

	/* Update the timeout period value with the requested period */
	new_config |= (config->timeout_period - 1) << WDT_CONFIG_PER_Pos;
     314:	78e3      	ldrb	r3, [r4, #3]
     316:	3b01      	subs	r3, #1

	/* Check if the user has requested a reset window period */
	if (config->window_period != WDT_PERIOD_NONE) {
     318:	7922      	ldrb	r2, [r4, #4]
     31a:	2a00      	cmp	r2, #0
     31c:	d009      	beq.n	332 <wdt_set_config+0x86>
		WDT_module->CTRL.reg |= WDT_CTRL_WEN;
     31e:	491e      	ldr	r1, [pc, #120]	; (398 <wdt_set_config+0xec>)
     320:	7808      	ldrb	r0, [r1, #0]
     322:	2204      	movs	r2, #4
     324:	4302      	orrs	r2, r0
     326:	700a      	strb	r2, [r1, #0]

		/* Update and enable the timeout period value */
		new_config |= (config->window_period - 1) << WDT_CONFIG_WINDOW_Pos;
     328:	7922      	ldrb	r2, [r4, #4]
     32a:	3a01      	subs	r2, #1
     32c:	0112      	lsls	r2, r2, #4
     32e:	4313      	orrs	r3, r2
     330:	e004      	b.n	33c <wdt_set_config+0x90>
	} else {
		/* Ensure the window enable control flag is cleared */
		WDT_module->CTRL.reg &= ~WDT_CTRL_WEN;
     332:	4919      	ldr	r1, [pc, #100]	; (398 <wdt_set_config+0xec>)
     334:	780a      	ldrb	r2, [r1, #0]
     336:	2004      	movs	r0, #4
     338:	4382      	bics	r2, r0
     33a:	700a      	strb	r2, [r1, #0]
     33c:	4916      	ldr	r1, [pc, #88]	; (398 <wdt_set_config+0xec>)
     33e:	79ca      	ldrb	r2, [r1, #7]
	}

	while (wdt_is_syncing()) {
     340:	b252      	sxtb	r2, r2
     342:	2a00      	cmp	r2, #0
     344:	dbfb      	blt.n	33e <wdt_set_config+0x92>
		/* Wait for all hardware modules to complete synchronization */
	}

	/* Write the new Watchdog configuration */
	WDT_module->CONFIG.reg = new_config;
     346:	b2db      	uxtb	r3, r3
     348:	4a13      	ldr	r2, [pc, #76]	; (398 <wdt_set_config+0xec>)
     34a:	7053      	strb	r3, [r2, #1]

	/* Check if the user has requested an early warning period */
	if (config->early_warning_period != WDT_PERIOD_NONE) {
     34c:	7963      	ldrb	r3, [r4, #5]
     34e:	2b00      	cmp	r3, #0
     350:	d008      	beq.n	364 <wdt_set_config+0xb8>
     352:	1c11      	adds	r1, r2, #0
     354:	79ca      	ldrb	r2, [r1, #7]
		while (wdt_is_syncing()) {
     356:	b252      	sxtb	r2, r2
     358:	2a00      	cmp	r2, #0
     35a:	dbfb      	blt.n	354 <wdt_set_config+0xa8>
			/* Wait for all hardware modules to complete synchronization */
		}

		/* Set the Early Warning period */
		WDT_module->EWCTRL.reg
			= (config->early_warning_period - 1) << WDT_EWCTRL_EWOFFSET_Pos;
     35c:	3b01      	subs	r3, #1
     35e:	b2db      	uxtb	r3, r3
     360:	4a0d      	ldr	r2, [pc, #52]	; (398 <wdt_set_config+0xec>)
     362:	7093      	strb	r3, [r2, #2]
	}

	/* Either enable or lock-enable the Watchdog timer depending on the user
	 * settings */
	if (config->always_on) {
     364:	7823      	ldrb	r3, [r4, #0]
     366:	2b00      	cmp	r3, #0
     368:	d005      	beq.n	376 <wdt_set_config+0xca>
		WDT_module->CTRL.reg |= WDT_CTRL_ALWAYSON;
     36a:	4a0b      	ldr	r2, [pc, #44]	; (398 <wdt_set_config+0xec>)
     36c:	7811      	ldrb	r1, [r2, #0]
     36e:	2380      	movs	r3, #128	; 0x80
     370:	430b      	orrs	r3, r1
     372:	7013      	strb	r3, [r2, #0]
     374:	e004      	b.n	380 <wdt_set_config+0xd4>
	} else {
		WDT_module->CTRL.reg |= WDT_CTRL_ENABLE;
     376:	4a08      	ldr	r2, [pc, #32]	; (398 <wdt_set_config+0xec>)
     378:	7811      	ldrb	r1, [r2, #0]
     37a:	2302      	movs	r3, #2
     37c:	430b      	orrs	r3, r1
     37e:	7013      	strb	r3, [r2, #0]
     380:	4a05      	ldr	r2, [pc, #20]	; (398 <wdt_set_config+0xec>)
     382:	79d3      	ldrb	r3, [r2, #7]
	}

	while (wdt_is_syncing()) {
     384:	b25b      	sxtb	r3, r3
     386:	2b00      	cmp	r3, #0
     388:	dbfb      	blt.n	382 <wdt_set_config+0xd6>
		/* Wait for all hardware modules to complete synchronization */
	}

	return STATUS_OK;
     38a:	2200      	movs	r2, #0
}
     38c:	1c10      	adds	r0, r2, #0
     38e:	b002      	add	sp, #8
     390:	bd10      	pop	{r4, pc}
     392:	46c0      	nop			; (mov r8, r8)
     394:	40000400 	.word	0x40000400
     398:	40001000 	.word	0x40001000
     39c:	00004491 	.word	0x00004491
     3a0:	00004415 	.word	0x00004415
     3a4:	000044a9 	.word	0x000044a9

000003a8 <wdt_reset_count>:
void wdt_reset_count(void)
{
	Wdt *const WDT_module = WDT;

	/* Disable the Watchdog module */
	WDT_module->CLEAR.reg = WDT_CLEAR_CLEAR_KEY;
     3a8:	22a5      	movs	r2, #165	; 0xa5
     3aa:	4b04      	ldr	r3, [pc, #16]	; (3bc <wdt_reset_count+0x14>)
     3ac:	721a      	strb	r2, [r3, #8]
     3ae:	1c1a      	adds	r2, r3, #0
     3b0:	79d3      	ldrb	r3, [r2, #7]

	while (wdt_is_syncing()) {
     3b2:	b25b      	sxtb	r3, r3
     3b4:	2b00      	cmp	r3, #0
     3b6:	dbfb      	blt.n	3b0 <wdt_reset_count+0x8>
		/* Wait for all hardware modules to complete synchronization */
	}
}
     3b8:	4770      	bx	lr
     3ba:	46c0      	nop			; (mov r8, r8)
     3bc:	40001000 	.word	0x40001000

000003c0 <_Z10wdt_configv>:
 * Created: 08/07/2016 10:52:22
 *  Author: Time Syn Project
 */ 
#include "wdt_config.h"
uint8_t clearRCrash;
void wdt_config(void){
     3c0:	b500      	push	{lr}
     3c2:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->always_on            = false;
     3c4:	2300      	movs	r3, #0
     3c6:	466a      	mov	r2, sp
     3c8:	7013      	strb	r3, [r2, #0]
	config->enable               = true;
     3ca:	2201      	movs	r2, #1
     3cc:	4669      	mov	r1, sp
     3ce:	704a      	strb	r2, [r1, #1]
#if !(SAML21) && !(SAML22) && !(SAMC20) && !(SAMC21)
	config->clock_source         = GCLK_GENERATOR_4;
#endif
	config->timeout_period       = WDT_PERIOD_16384CLK;
     3d0:	320b      	adds	r2, #11
     3d2:	70ca      	strb	r2, [r1, #3]
	config->window_period        = WDT_PERIOD_NONE;
     3d4:	710b      	strb	r3, [r1, #4]
	config->early_warning_period = WDT_PERIOD_NONE;
     3d6:	714b      	strb	r3, [r1, #5]

	/* Set the Watchdog configuration settings */
	//! [setup_3]
	config_wdt.always_on            = false;
#if !((SAML21) || (SAMC21) || (SAML22))
	config_wdt.clock_source         = GCLK_GENERATOR_2;
     3d8:	3302      	adds	r3, #2
     3da:	708b      	strb	r3, [r1, #2]
	//! [setup_3]

	/* Initialize and enable the Watchdog with the user settings */
	//! [setup_4]
	
	wdt_set_config(&config_wdt);
     3dc:	4668      	mov	r0, sp
     3de:	4b02      	ldr	r3, [pc, #8]	; (3e8 <_Z10wdt_configv+0x28>)
     3e0:	4798      	blx	r3
	//! [setup_4]	
	//hmi.printf("config wdt\r\n");
	
	
	
}
     3e2:	b003      	add	sp, #12
     3e4:	bd00      	pop	{pc}
     3e6:	46c0      	nop			; (mov r8, r8)
     3e8:	000002ad 	.word	0x000002ad

000003ec <wdt_clear>:
void wdt_clear(void){
     3ec:	b508      	push	{r3, lr}
	wdt_reset_count();
     3ee:	4b01      	ldr	r3, [pc, #4]	; (3f4 <wdt_clear+0x8>)
     3f0:	4798      	blx	r3
	
     3f2:	bd08      	pop	{r3, pc}
     3f4:	000003a9 	.word	0x000003a9

000003f8 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
     3f8:	b510      	push	{r4, lr}
     3fa:	1c04      	adds	r4, r0, #0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
     3fc:	6c03      	ldr	r3, [r0, #64]	; 0x40
     3fe:	2b00      	cmp	r3, #0
     400:	d108      	bne.n	414 <prvCopyDataToQueue+0x1c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     402:	6803      	ldr	r3, [r0, #0]
     404:	2b00      	cmp	r3, #0
     406:	d126      	bne.n	456 <prvCopyDataToQueue+0x5e>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
     408:	6840      	ldr	r0, [r0, #4]
     40a:	4b15      	ldr	r3, [pc, #84]	; (460 <prvCopyDataToQueue+0x68>)
     40c:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
     40e:	2300      	movs	r3, #0
     410:	6063      	str	r3, [r4, #4]
     412:	e020      	b.n	456 <prvCopyDataToQueue+0x5e>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
     414:	2a00      	cmp	r2, #0
     416:	d10e      	bne.n	436 <prvCopyDataToQueue+0x3e>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
     418:	6880      	ldr	r0, [r0, #8]
     41a:	1c1a      	adds	r2, r3, #0
     41c:	4b11      	ldr	r3, [pc, #68]	; (464 <prvCopyDataToQueue+0x6c>)
     41e:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
     420:	68a3      	ldr	r3, [r4, #8]
     422:	6c22      	ldr	r2, [r4, #64]	; 0x40
     424:	4694      	mov	ip, r2
     426:	4463      	add	r3, ip
     428:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
     42a:	6862      	ldr	r2, [r4, #4]
     42c:	4293      	cmp	r3, r2
     42e:	d312      	bcc.n	456 <prvCopyDataToQueue+0x5e>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
     430:	6823      	ldr	r3, [r4, #0]
     432:	60a3      	str	r3, [r4, #8]
     434:	e00f      	b.n	456 <prvCopyDataToQueue+0x5e>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
     436:	68c0      	ldr	r0, [r0, #12]
     438:	1c1a      	adds	r2, r3, #0
     43a:	4b0a      	ldr	r3, [pc, #40]	; (464 <prvCopyDataToQueue+0x6c>)
     43c:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
     43e:	6c23      	ldr	r3, [r4, #64]	; 0x40
     440:	425b      	negs	r3, r3
     442:	68e2      	ldr	r2, [r4, #12]
     444:	18d2      	adds	r2, r2, r3
     446:	60e2      	str	r2, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
     448:	6821      	ldr	r1, [r4, #0]
     44a:	428a      	cmp	r2, r1
     44c:	d203      	bcs.n	456 <prvCopyDataToQueue+0x5e>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
     44e:	6862      	ldr	r2, [r4, #4]
     450:	4694      	mov	ip, r2
     452:	4463      	add	r3, ip
     454:	60e3      	str	r3, [r4, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
     456:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     458:	3301      	adds	r3, #1
     45a:	63a3      	str	r3, [r4, #56]	; 0x38
}
     45c:	bd10      	pop	{r4, pc}
     45e:	46c0      	nop			; (mov r8, r8)
     460:	00001159 	.word	0x00001159
     464:	00009e8f 	.word	0x00009e8f

00000468 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
     468:	b538      	push	{r3, r4, r5, lr}
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
     46a:	6804      	ldr	r4, [r0, #0]
     46c:	2c00      	cmp	r4, #0
     46e:	d00c      	beq.n	48a <prvCopyDataFromQueue+0x22>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
     470:	6c02      	ldr	r2, [r0, #64]	; 0x40
     472:	68c3      	ldr	r3, [r0, #12]
     474:	189b      	adds	r3, r3, r2
     476:	60c3      	str	r3, [r0, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
     478:	6845      	ldr	r5, [r0, #4]
     47a:	42ab      	cmp	r3, r5
     47c:	d300      	bcc.n	480 <prvCopyDataFromQueue+0x18>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
     47e:	60c4      	str	r4, [r0, #12]
     480:	1c0b      	adds	r3, r1, #0
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( size_t ) pxQueue->uxItemSize );
     482:	68c1      	ldr	r1, [r0, #12]
     484:	1c18      	adds	r0, r3, #0
     486:	4b01      	ldr	r3, [pc, #4]	; (48c <prvCopyDataFromQueue+0x24>)
     488:	4798      	blx	r3
	}
}
     48a:	bd38      	pop	{r3, r4, r5, pc}
     48c:	00009e8f 	.word	0x00009e8f

00000490 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQUEUE *pxQueue )
{
     490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     492:	1c04      	adds	r4, r0, #0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
     494:	4b21      	ldr	r3, [pc, #132]	; (51c <prvUnlockQueue+0x8c>)
     496:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
     498:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     49a:	2b00      	cmp	r3, #0
     49c:	dd16      	ble.n	4cc <prvUnlockQueue+0x3c>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     49e:	6a63      	ldr	r3, [r4, #36]	; 0x24
     4a0:	2b00      	cmp	r3, #0
     4a2:	d104      	bne.n	4ae <prvUnlockQueue+0x1e>
     4a4:	e012      	b.n	4cc <prvUnlockQueue+0x3c>
     4a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
     4a8:	2b00      	cmp	r3, #0
     4aa:	d104      	bne.n	4b6 <prvUnlockQueue+0x26>
     4ac:	e00e      	b.n	4cc <prvUnlockQueue+0x3c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     4ae:	1c25      	adds	r5, r4, #0
     4b0:	3524      	adds	r5, #36	; 0x24
     4b2:	4f1b      	ldr	r7, [pc, #108]	; (520 <prvUnlockQueue+0x90>)
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
     4b4:	4e1b      	ldr	r6, [pc, #108]	; (524 <prvUnlockQueue+0x94>)
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     4b6:	1c28      	adds	r0, r5, #0
     4b8:	47b8      	blx	r7
     4ba:	2800      	cmp	r0, #0
     4bc:	d000      	beq.n	4c0 <prvUnlockQueue+0x30>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
     4be:	47b0      	blx	r6
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
     4c0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     4c2:	3b01      	subs	r3, #1
     4c4:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
     4c6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     4c8:	2b00      	cmp	r3, #0
     4ca:	dcec      	bgt.n	4a6 <prvUnlockQueue+0x16>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
     4cc:	2301      	movs	r3, #1
     4ce:	425b      	negs	r3, r3
     4d0:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
     4d2:	4b15      	ldr	r3, [pc, #84]	; (528 <prvUnlockQueue+0x98>)
     4d4:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
     4d6:	4b11      	ldr	r3, [pc, #68]	; (51c <prvUnlockQueue+0x8c>)
     4d8:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
     4da:	6c63      	ldr	r3, [r4, #68]	; 0x44
     4dc:	2b00      	cmp	r3, #0
     4de:	dd16      	ble.n	50e <prvUnlockQueue+0x7e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     4e0:	6923      	ldr	r3, [r4, #16]
     4e2:	2b00      	cmp	r3, #0
     4e4:	d104      	bne.n	4f0 <prvUnlockQueue+0x60>
     4e6:	e012      	b.n	50e <prvUnlockQueue+0x7e>
     4e8:	6923      	ldr	r3, [r4, #16]
     4ea:	2b00      	cmp	r3, #0
     4ec:	d104      	bne.n	4f8 <prvUnlockQueue+0x68>
     4ee:	e00e      	b.n	50e <prvUnlockQueue+0x7e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     4f0:	1c25      	adds	r5, r4, #0
     4f2:	3510      	adds	r5, #16
     4f4:	4f0a      	ldr	r7, [pc, #40]	; (520 <prvUnlockQueue+0x90>)
				{
					vTaskMissedYield();
     4f6:	4e0b      	ldr	r6, [pc, #44]	; (524 <prvUnlockQueue+0x94>)
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     4f8:	1c28      	adds	r0, r5, #0
     4fa:	47b8      	blx	r7
     4fc:	2800      	cmp	r0, #0
     4fe:	d000      	beq.n	502 <prvUnlockQueue+0x72>
				{
					vTaskMissedYield();
     500:	47b0      	blx	r6
				}

				--( pxQueue->xRxLock );
     502:	6c63      	ldr	r3, [r4, #68]	; 0x44
     504:	3b01      	subs	r3, #1
     506:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
     508:	6c63      	ldr	r3, [r4, #68]	; 0x44
     50a:	2b00      	cmp	r3, #0
     50c:	dcec      	bgt.n	4e8 <prvUnlockQueue+0x58>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
     50e:	2301      	movs	r3, #1
     510:	425b      	negs	r3, r3
     512:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
     514:	4b04      	ldr	r3, [pc, #16]	; (528 <prvUnlockQueue+0x98>)
     516:	4798      	blx	r3
}
     518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     51a:	46c0      	nop			; (mov r8, r8)
     51c:	00001221 	.word	0x00001221
     520:	00000fb9 	.word	0x00000fb9
     524:	000010c5 	.word	0x000010c5
     528:	00001239 	.word	0x00001239

0000052c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle xQueue, portBASE_TYPE xNewQueue )
{
     52c:	b538      	push	{r3, r4, r5, lr}
xQUEUE *pxQueue;

	pxQueue = ( xQUEUE * ) xQueue;
	configASSERT( pxQueue );
     52e:	2800      	cmp	r0, #0
     530:	d101      	bne.n	536 <xQueueGenericReset+0xa>
     532:	b672      	cpsid	i
     534:	e7fe      	b.n	534 <xQueueGenericReset+0x8>
     536:	1c0d      	adds	r5, r1, #0
     538:	1c04      	adds	r4, r0, #0

	taskENTER_CRITICAL();
     53a:	4b15      	ldr	r3, [pc, #84]	; (590 <xQueueGenericReset+0x64>)
     53c:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
     53e:	6822      	ldr	r2, [r4, #0]
     540:	6c21      	ldr	r1, [r4, #64]	; 0x40
     542:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     544:	434b      	muls	r3, r1
     546:	18d0      	adds	r0, r2, r3
     548:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
     54a:	2000      	movs	r0, #0
     54c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
     54e:	60a2      	str	r2, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
     550:	1a5b      	subs	r3, r3, r1
     552:	18d3      	adds	r3, r2, r3
     554:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
     556:	2301      	movs	r3, #1
     558:	425b      	negs	r3, r3
     55a:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
     55c:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
     55e:	2d00      	cmp	r5, #0
     560:	d10b      	bne.n	57a <xQueueGenericReset+0x4e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     562:	6923      	ldr	r3, [r4, #16]
     564:	2b00      	cmp	r3, #0
     566:	d00f      	beq.n	588 <xQueueGenericReset+0x5c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
     568:	1c20      	adds	r0, r4, #0
     56a:	3010      	adds	r0, #16
     56c:	4b09      	ldr	r3, [pc, #36]	; (594 <xQueueGenericReset+0x68>)
     56e:	4798      	blx	r3
     570:	2801      	cmp	r0, #1
     572:	d109      	bne.n	588 <xQueueGenericReset+0x5c>
				{
					portYIELD_WITHIN_API();
     574:	4b08      	ldr	r3, [pc, #32]	; (598 <xQueueGenericReset+0x6c>)
     576:	4798      	blx	r3
     578:	e006      	b.n	588 <xQueueGenericReset+0x5c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
     57a:	1c20      	adds	r0, r4, #0
     57c:	3010      	adds	r0, #16
     57e:	4d07      	ldr	r5, [pc, #28]	; (59c <xQueueGenericReset+0x70>)
     580:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
     582:	1c20      	adds	r0, r4, #0
     584:	3024      	adds	r0, #36	; 0x24
     586:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
     588:	4b05      	ldr	r3, [pc, #20]	; (5a0 <xQueueGenericReset+0x74>)
     58a:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
     58c:	2001      	movs	r0, #1
     58e:	bd38      	pop	{r3, r4, r5, pc}
     590:	00001221 	.word	0x00001221
     594:	00000fb9 	.word	0x00000fb9
     598:	00001209 	.word	0x00001209
     59c:	000008f5 	.word	0x000008f5
     5a0:	00001239 	.word	0x00001239

000005a4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
     5a4:	b570      	push	{r4, r5, r6, lr}
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
     5a6:	2800      	cmp	r0, #0
     5a8:	d013      	beq.n	5d2 <xQueueGenericCreate+0x2e>
     5aa:	1c0e      	adds	r6, r1, #0
     5ac:	1c05      	adds	r5, r0, #0
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
     5ae:	204c      	movs	r0, #76	; 0x4c
     5b0:	4b0d      	ldr	r3, [pc, #52]	; (5e8 <xQueueGenericCreate+0x44>)
     5b2:	4798      	blx	r3
     5b4:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
     5b6:	d00c      	beq.n	5d2 <xQueueGenericCreate+0x2e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
     5b8:	1c30      	adds	r0, r6, #0
     5ba:	4368      	muls	r0, r5
     5bc:	3001      	adds	r0, #1

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
     5be:	4b0a      	ldr	r3, [pc, #40]	; (5e8 <xQueueGenericCreate+0x44>)
     5c0:	4798      	blx	r3
     5c2:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
     5c4:	2800      	cmp	r0, #0
     5c6:	d106      	bne.n	5d6 <xQueueGenericCreate+0x32>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
     5c8:	1c20      	adds	r0, r4, #0
     5ca:	4b08      	ldr	r3, [pc, #32]	; (5ec <xQueueGenericCreate+0x48>)
     5cc:	4798      	blx	r3
     5ce:	e000      	b.n	5d2 <xQueueGenericCreate+0x2e>
			}
		}
	}

	configASSERT( xReturn );
     5d0:	e7fe      	b.n	5d0 <xQueueGenericCreate+0x2c>
     5d2:	b672      	cpsid	i
     5d4:	e7fc      	b.n	5d0 <xQueueGenericCreate+0x2c>
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
     5d6:	63e5      	str	r5, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
     5d8:	6426      	str	r6, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
     5da:	1c20      	adds	r0, r4, #0
     5dc:	2101      	movs	r1, #1
     5de:	4b04      	ldr	r3, [pc, #16]	; (5f0 <xQueueGenericCreate+0x4c>)
     5e0:	4798      	blx	r3
	}

	configASSERT( xReturn );

	return xReturn;
}
     5e2:	1c20      	adds	r0, r4, #0
     5e4:	bd70      	pop	{r4, r5, r6, pc}
     5e6:	46c0      	nop			; (mov r8, r8)
     5e8:	00001315 	.word	0x00001315
     5ec:	0000137d 	.word	0x0000137d
     5f0:	0000052d 	.word	0x0000052d

000005f4 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle xQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
     5f4:	b5f0      	push	{r4, r5, r6, r7, lr}
     5f6:	4657      	mov	r7, sl
     5f8:	b480      	push	{r7}
     5fa:	b086      	sub	sp, #24
     5fc:	9203      	str	r2, [sp, #12]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
xQUEUE *pxQueue;

	pxQueue = ( xQUEUE * ) xQueue;
	configASSERT( pxQueue );
     5fe:	2800      	cmp	r0, #0
     600:	d101      	bne.n	606 <xQueueGenericSend+0x12>
     602:	b672      	cpsid	i
     604:	e7fe      	b.n	604 <xQueueGenericSend+0x10>
     606:	2700      	movs	r7, #0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
     608:	2900      	cmp	r1, #0
     60a:	d105      	bne.n	618 <xQueueGenericSend+0x24>
     60c:	6c02      	ldr	r2, [r0, #64]	; 0x40
     60e:	2a00      	cmp	r2, #0
     610:	d001      	beq.n	616 <xQueueGenericSend+0x22>
     612:	b672      	cpsid	i
     614:	e7fe      	b.n	614 <xQueueGenericSend+0x20>
     616:	2700      	movs	r7, #0
     618:	9302      	str	r3, [sp, #8]
     61a:	9101      	str	r1, [sp, #4]
     61c:	1c04      	adds	r4, r0, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
     61e:	4d33      	ldr	r5, [pc, #204]	; (6ec <xQueueGenericSend+0xf8>)
     620:	47a8      	blx	r5
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
     622:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     624:	6be2      	ldr	r2, [r4, #60]	; 0x3c
     626:	4293      	cmp	r3, r2
     628:	d213      	bcs.n	652 <xQueueGenericSend+0x5e>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
     62a:	1c20      	adds	r0, r4, #0
     62c:	9901      	ldr	r1, [sp, #4]
     62e:	9a02      	ldr	r2, [sp, #8]
     630:	4b2f      	ldr	r3, [pc, #188]	; (6f0 <xQueueGenericSend+0xfc>)
     632:	4798      	blx	r3
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     634:	6a63      	ldr	r3, [r4, #36]	; 0x24
     636:	2b00      	cmp	r3, #0
     638:	d007      	beq.n	64a <xQueueGenericSend+0x56>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
     63a:	1c20      	adds	r0, r4, #0
     63c:	3024      	adds	r0, #36	; 0x24
     63e:	4b2d      	ldr	r3, [pc, #180]	; (6f4 <xQueueGenericSend+0x100>)
     640:	4798      	blx	r3
     642:	2801      	cmp	r0, #1
     644:	d101      	bne.n	64a <xQueueGenericSend+0x56>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							portYIELD_WITHIN_API();
     646:	4b2c      	ldr	r3, [pc, #176]	; (6f8 <xQueueGenericSend+0x104>)
     648:	4798      	blx	r3
						}
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
     64a:	4b2c      	ldr	r3, [pc, #176]	; (6fc <xQueueGenericSend+0x108>)
     64c:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
     64e:	2001      	movs	r0, #1
     650:	e048      	b.n	6e4 <xQueueGenericSend+0xf0>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
     652:	9b03      	ldr	r3, [sp, #12]
     654:	2b00      	cmp	r3, #0
     656:	d103      	bne.n	660 <xQueueGenericSend+0x6c>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
     658:	4b28      	ldr	r3, [pc, #160]	; (6fc <xQueueGenericSend+0x108>)
     65a:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
     65c:	2000      	movs	r0, #0
     65e:	e041      	b.n	6e4 <xQueueGenericSend+0xf0>
				}
				else if( xEntryTimeSet == pdFALSE )
     660:	2f00      	cmp	r7, #0
     662:	d103      	bne.n	66c <xQueueGenericSend+0x78>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
     664:	a804      	add	r0, sp, #16
     666:	4b26      	ldr	r3, [pc, #152]	; (700 <xQueueGenericSend+0x10c>)
     668:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
     66a:	3701      	adds	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
     66c:	4b23      	ldr	r3, [pc, #140]	; (6fc <xQueueGenericSend+0x108>)
     66e:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
     670:	4b24      	ldr	r3, [pc, #144]	; (704 <xQueueGenericSend+0x110>)
     672:	4798      	blx	r3
		prvLockQueue( pxQueue );
     674:	4b1d      	ldr	r3, [pc, #116]	; (6ec <xQueueGenericSend+0xf8>)
     676:	4798      	blx	r3
     678:	6c63      	ldr	r3, [r4, #68]	; 0x44
     67a:	3301      	adds	r3, #1
     67c:	d101      	bne.n	682 <xQueueGenericSend+0x8e>
     67e:	2300      	movs	r3, #0
     680:	6463      	str	r3, [r4, #68]	; 0x44
     682:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     684:	3301      	adds	r3, #1
     686:	d101      	bne.n	68c <xQueueGenericSend+0x98>
     688:	2300      	movs	r3, #0
     68a:	64a3      	str	r3, [r4, #72]	; 0x48
     68c:	4b1b      	ldr	r3, [pc, #108]	; (6fc <xQueueGenericSend+0x108>)
     68e:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     690:	a804      	add	r0, sp, #16
     692:	a903      	add	r1, sp, #12
     694:	4b1c      	ldr	r3, [pc, #112]	; (708 <xQueueGenericSend+0x114>)
     696:	4798      	blx	r3
     698:	2800      	cmp	r0, #0
     69a:	d11d      	bne.n	6d8 <xQueueGenericSend+0xe4>

static signed portBASE_TYPE prvIsQueueFull( const xQUEUE *pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
     69c:	4b13      	ldr	r3, [pc, #76]	; (6ec <xQueueGenericSend+0xf8>)
     69e:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
     6a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     6a2:	469a      	mov	sl, r3
     6a4:	6be6      	ldr	r6, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
     6a6:	4b15      	ldr	r3, [pc, #84]	; (6fc <xQueueGenericSend+0x108>)
     6a8:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
     6aa:	45b2      	cmp	sl, r6
     6ac:	d10e      	bne.n	6cc <xQueueGenericSend+0xd8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
     6ae:	1c20      	adds	r0, r4, #0
     6b0:	3010      	adds	r0, #16
     6b2:	9903      	ldr	r1, [sp, #12]
     6b4:	4b15      	ldr	r3, [pc, #84]	; (70c <xQueueGenericSend+0x118>)
     6b6:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
     6b8:	1c20      	adds	r0, r4, #0
     6ba:	4b15      	ldr	r3, [pc, #84]	; (710 <xQueueGenericSend+0x11c>)
     6bc:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
     6be:	4b15      	ldr	r3, [pc, #84]	; (714 <xQueueGenericSend+0x120>)
     6c0:	4798      	blx	r3
     6c2:	2800      	cmp	r0, #0
     6c4:	d1ac      	bne.n	620 <xQueueGenericSend+0x2c>
				{
					portYIELD_WITHIN_API();
     6c6:	4b0c      	ldr	r3, [pc, #48]	; (6f8 <xQueueGenericSend+0x104>)
     6c8:	4798      	blx	r3
     6ca:	e7a9      	b.n	620 <xQueueGenericSend+0x2c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
     6cc:	1c20      	adds	r0, r4, #0
     6ce:	4b10      	ldr	r3, [pc, #64]	; (710 <xQueueGenericSend+0x11c>)
     6d0:	4798      	blx	r3
				( void ) xTaskResumeAll();
     6d2:	4b10      	ldr	r3, [pc, #64]	; (714 <xQueueGenericSend+0x120>)
     6d4:	4798      	blx	r3
     6d6:	e7a3      	b.n	620 <xQueueGenericSend+0x2c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
     6d8:	1c20      	adds	r0, r4, #0
     6da:	4b0d      	ldr	r3, [pc, #52]	; (710 <xQueueGenericSend+0x11c>)
     6dc:	4798      	blx	r3
			( void ) xTaskResumeAll();
     6de:	4b0d      	ldr	r3, [pc, #52]	; (714 <xQueueGenericSend+0x120>)
     6e0:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
     6e2:	2000      	movs	r0, #0
		}
	}
}
     6e4:	b006      	add	sp, #24
     6e6:	bc04      	pop	{r2}
     6e8:	4692      	mov	sl, r2
     6ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6ec:	00001221 	.word	0x00001221
     6f0:	000003f9 	.word	0x000003f9
     6f4:	00000fb9 	.word	0x00000fb9
     6f8:	00001209 	.word	0x00001209
     6fc:	00001239 	.word	0x00001239
     700:	00001035 	.word	0x00001035
     704:	00000c41 	.word	0x00000c41
     708:	00001055 	.word	0x00001055
     70c:	00000f79 	.word	0x00000f79
     710:	00000491 	.word	0x00000491
     714:	00000d8d 	.word	0x00000d8d

00000718 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle xQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
     718:	b570      	push	{r4, r5, r6, lr}
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;
xQUEUE *pxQueue;

	pxQueue = ( xQUEUE * ) xQueue;
	configASSERT( pxQueue );
     71a:	2800      	cmp	r0, #0
     71c:	d101      	bne.n	722 <xQueueGenericSendFromISR+0xa>
     71e:	b672      	cpsid	i
     720:	e7fe      	b.n	720 <xQueueGenericSendFromISR+0x8>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
     722:	2900      	cmp	r1, #0
     724:	d104      	bne.n	730 <xQueueGenericSendFromISR+0x18>
     726:	6c04      	ldr	r4, [r0, #64]	; 0x40
     728:	2c00      	cmp	r4, #0
     72a:	d001      	beq.n	730 <xQueueGenericSendFromISR+0x18>
     72c:	b672      	cpsid	i
     72e:	e7fe      	b.n	72e <xQueueGenericSendFromISR+0x16>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
     730:	b672      	cpsid	i
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
     732:	6b84      	ldr	r4, [r0, #56]	; 0x38
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
     734:	2500      	movs	r5, #0
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
     736:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
     738:	42b4      	cmp	r4, r6
     73a:	d21c      	bcs.n	776 <xQueueGenericSendFromISR+0x5e>
     73c:	1c16      	adds	r6, r2, #0
     73e:	1c04      	adds	r4, r0, #0
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
     740:	1c1a      	adds	r2, r3, #0
     742:	4b0e      	ldr	r3, [pc, #56]	; (77c <xQueueGenericSendFromISR+0x64>)
     744:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
     746:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     748:	3301      	adds	r3, #1
     74a:	d10e      	bne.n	76a <xQueueGenericSendFromISR+0x52>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     74c:	6a63      	ldr	r3, [r4, #36]	; 0x24
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
     74e:	3501      	adds	r5, #1
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     750:	2b00      	cmp	r3, #0
     752:	d010      	beq.n	776 <xQueueGenericSendFromISR+0x5e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     754:	1c20      	adds	r0, r4, #0
     756:	3024      	adds	r0, #36	; 0x24
     758:	4b09      	ldr	r3, [pc, #36]	; (780 <xQueueGenericSendFromISR+0x68>)
     75a:	4798      	blx	r3
     75c:	2800      	cmp	r0, #0
     75e:	d00a      	beq.n	776 <xQueueGenericSendFromISR+0x5e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
     760:	2e00      	cmp	r6, #0
     762:	d007      	beq.n	774 <xQueueGenericSendFromISR+0x5c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
     764:	2301      	movs	r3, #1
     766:	6033      	str	r3, [r6, #0]
     768:	e005      	b.n	776 <xQueueGenericSendFromISR+0x5e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
     76a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     76c:	3301      	adds	r3, #1
     76e:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
     770:	2501      	movs	r5, #1
     772:	e000      	b.n	776 <xQueueGenericSendFromISR+0x5e>
     774:	2501      	movs	r5, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
     776:	b662      	cpsie	i

	return xReturn;
}
     778:	1c28      	adds	r0, r5, #0
     77a:	bd70      	pop	{r4, r5, r6, pc}
     77c:	000003f9 	.word	0x000003f9
     780:	00000fb9 	.word	0x00000fb9

00000784 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle xQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
     784:	b5f0      	push	{r4, r5, r6, r7, lr}
     786:	464f      	mov	r7, r9
     788:	b480      	push	{r7}
     78a:	b084      	sub	sp, #16
     78c:	9201      	str	r2, [sp, #4]
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;
xQUEUE *pxQueue;

	pxQueue = ( xQUEUE * ) xQueue;
	configASSERT( pxQueue );
     78e:	2800      	cmp	r0, #0
     790:	d101      	bne.n	796 <xQueueGenericReceive+0x12>
     792:	b672      	cpsid	i
     794:	e7fe      	b.n	794 <xQueueGenericReceive+0x10>
     796:	2700      	movs	r7, #0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
     798:	2900      	cmp	r1, #0
     79a:	d105      	bne.n	7a8 <xQueueGenericReceive+0x24>
     79c:	6c02      	ldr	r2, [r0, #64]	; 0x40
     79e:	2a00      	cmp	r2, #0
     7a0:	d001      	beq.n	7a6 <xQueueGenericReceive+0x22>
     7a2:	b672      	cpsid	i
     7a4:	e7fe      	b.n	7a4 <xQueueGenericReceive+0x20>
     7a6:	2700      	movs	r7, #0
     7a8:	1c1d      	adds	r5, r3, #0
     7aa:	9100      	str	r1, [sp, #0]
     7ac:	1c04      	adds	r4, r0, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
     7ae:	4e44      	ldr	r6, [pc, #272]	; (8c0 <xQueueGenericReceive+0x13c>)
     7b0:	47b0      	blx	r6
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
     7b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     7b4:	2b00      	cmp	r3, #0
     7b6:	d02b      	beq.n	810 <xQueueGenericReceive+0x8c>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
     7b8:	68e7      	ldr	r7, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
     7ba:	1c20      	adds	r0, r4, #0
     7bc:	9900      	ldr	r1, [sp, #0]
     7be:	4b41      	ldr	r3, [pc, #260]	; (8c4 <xQueueGenericReceive+0x140>)
     7c0:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
     7c2:	2d00      	cmp	r5, #0
     7c4:	d114      	bne.n	7f0 <xQueueGenericReceive+0x6c>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
     7c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     7c8:	3b01      	subs	r3, #1
     7ca:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     7cc:	6823      	ldr	r3, [r4, #0]
     7ce:	2b00      	cmp	r3, #0
     7d0:	d102      	bne.n	7d8 <xQueueGenericReceive+0x54>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
     7d2:	4b3d      	ldr	r3, [pc, #244]	; (8c8 <xQueueGenericReceive+0x144>)
     7d4:	4798      	blx	r3
     7d6:	6060      	str	r0, [r4, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     7d8:	6923      	ldr	r3, [r4, #16]
     7da:	2b00      	cmp	r3, #0
     7dc:	d014      	beq.n	808 <xQueueGenericReceive+0x84>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
     7de:	1c20      	adds	r0, r4, #0
     7e0:	3010      	adds	r0, #16
     7e2:	4b3a      	ldr	r3, [pc, #232]	; (8cc <xQueueGenericReceive+0x148>)
     7e4:	4798      	blx	r3
     7e6:	2801      	cmp	r0, #1
     7e8:	d10e      	bne.n	808 <xQueueGenericReceive+0x84>
						{
							portYIELD_WITHIN_API();
     7ea:	4b39      	ldr	r3, [pc, #228]	; (8d0 <xQueueGenericReceive+0x14c>)
     7ec:	4798      	blx	r3
     7ee:	e00b      	b.n	808 <xQueueGenericReceive+0x84>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
     7f0:	60e7      	str	r7, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     7f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
     7f4:	2b00      	cmp	r3, #0
     7f6:	d007      	beq.n	808 <xQueueGenericReceive+0x84>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     7f8:	1c20      	adds	r0, r4, #0
     7fa:	3024      	adds	r0, #36	; 0x24
     7fc:	4b33      	ldr	r3, [pc, #204]	; (8cc <xQueueGenericReceive+0x148>)
     7fe:	4798      	blx	r3
     800:	2800      	cmp	r0, #0
     802:	d001      	beq.n	808 <xQueueGenericReceive+0x84>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
     804:	4b32      	ldr	r3, [pc, #200]	; (8d0 <xQueueGenericReceive+0x14c>)
     806:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
     808:	4b32      	ldr	r3, [pc, #200]	; (8d4 <xQueueGenericReceive+0x150>)
     80a:	4798      	blx	r3
				return pdPASS;
     80c:	2001      	movs	r0, #1
     80e:	e052      	b.n	8b6 <xQueueGenericReceive+0x132>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
     810:	9b01      	ldr	r3, [sp, #4]
     812:	2b00      	cmp	r3, #0
     814:	d103      	bne.n	81e <xQueueGenericReceive+0x9a>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
     816:	4b2f      	ldr	r3, [pc, #188]	; (8d4 <xQueueGenericReceive+0x150>)
     818:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
     81a:	2000      	movs	r0, #0
     81c:	e04b      	b.n	8b6 <xQueueGenericReceive+0x132>
				}
				else if( xEntryTimeSet == pdFALSE )
     81e:	2f00      	cmp	r7, #0
     820:	d103      	bne.n	82a <xQueueGenericReceive+0xa6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
     822:	a802      	add	r0, sp, #8
     824:	4b2c      	ldr	r3, [pc, #176]	; (8d8 <xQueueGenericReceive+0x154>)
     826:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
     828:	3701      	adds	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
     82a:	4b2a      	ldr	r3, [pc, #168]	; (8d4 <xQueueGenericReceive+0x150>)
     82c:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
     82e:	4b2b      	ldr	r3, [pc, #172]	; (8dc <xQueueGenericReceive+0x158>)
     830:	4798      	blx	r3
		prvLockQueue( pxQueue );
     832:	4b23      	ldr	r3, [pc, #140]	; (8c0 <xQueueGenericReceive+0x13c>)
     834:	4798      	blx	r3
     836:	6c63      	ldr	r3, [r4, #68]	; 0x44
     838:	3301      	adds	r3, #1
     83a:	d101      	bne.n	840 <xQueueGenericReceive+0xbc>
     83c:	2300      	movs	r3, #0
     83e:	6463      	str	r3, [r4, #68]	; 0x44
     840:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     842:	3301      	adds	r3, #1
     844:	d101      	bne.n	84a <xQueueGenericReceive+0xc6>
     846:	2300      	movs	r3, #0
     848:	64a3      	str	r3, [r4, #72]	; 0x48
     84a:	4b22      	ldr	r3, [pc, #136]	; (8d4 <xQueueGenericReceive+0x150>)
     84c:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     84e:	a802      	add	r0, sp, #8
     850:	a901      	add	r1, sp, #4
     852:	4b23      	ldr	r3, [pc, #140]	; (8e0 <xQueueGenericReceive+0x15c>)
     854:	4798      	blx	r3
     856:	2800      	cmp	r0, #0
     858:	d127      	bne.n	8aa <xQueueGenericReceive+0x126>

static signed portBASE_TYPE prvIsQueueEmpty( const xQUEUE *pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
     85a:	4b19      	ldr	r3, [pc, #100]	; (8c0 <xQueueGenericReceive+0x13c>)
     85c:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == 0 )
     85e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     860:	4699      	mov	r9, r3
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
     862:	4b1c      	ldr	r3, [pc, #112]	; (8d4 <xQueueGenericReceive+0x150>)
     864:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     866:	464b      	mov	r3, r9
     868:	2b00      	cmp	r3, #0
     86a:	d118      	bne.n	89e <xQueueGenericReceive+0x11a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     86c:	6823      	ldr	r3, [r4, #0]
     86e:	2b00      	cmp	r3, #0
     870:	d106      	bne.n	880 <xQueueGenericReceive+0xfc>
					{
						portENTER_CRITICAL();
     872:	4b13      	ldr	r3, [pc, #76]	; (8c0 <xQueueGenericReceive+0x13c>)
     874:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
     876:	6860      	ldr	r0, [r4, #4]
     878:	4b1a      	ldr	r3, [pc, #104]	; (8e4 <xQueueGenericReceive+0x160>)
     87a:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
     87c:	4b15      	ldr	r3, [pc, #84]	; (8d4 <xQueueGenericReceive+0x150>)
     87e:	4798      	blx	r3
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
     880:	1c20      	adds	r0, r4, #0
     882:	3024      	adds	r0, #36	; 0x24
     884:	9901      	ldr	r1, [sp, #4]
     886:	4b18      	ldr	r3, [pc, #96]	; (8e8 <xQueueGenericReceive+0x164>)
     888:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
     88a:	1c20      	adds	r0, r4, #0
     88c:	4b17      	ldr	r3, [pc, #92]	; (8ec <xQueueGenericReceive+0x168>)
     88e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
     890:	4b17      	ldr	r3, [pc, #92]	; (8f0 <xQueueGenericReceive+0x16c>)
     892:	4798      	blx	r3
     894:	2800      	cmp	r0, #0
     896:	d18b      	bne.n	7b0 <xQueueGenericReceive+0x2c>
				{
					portYIELD_WITHIN_API();
     898:	4b0d      	ldr	r3, [pc, #52]	; (8d0 <xQueueGenericReceive+0x14c>)
     89a:	4798      	blx	r3
     89c:	e788      	b.n	7b0 <xQueueGenericReceive+0x2c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
     89e:	1c20      	adds	r0, r4, #0
     8a0:	4b12      	ldr	r3, [pc, #72]	; (8ec <xQueueGenericReceive+0x168>)
     8a2:	4798      	blx	r3
				( void ) xTaskResumeAll();
     8a4:	4b12      	ldr	r3, [pc, #72]	; (8f0 <xQueueGenericReceive+0x16c>)
     8a6:	4798      	blx	r3
     8a8:	e782      	b.n	7b0 <xQueueGenericReceive+0x2c>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
     8aa:	1c20      	adds	r0, r4, #0
     8ac:	4b0f      	ldr	r3, [pc, #60]	; (8ec <xQueueGenericReceive+0x168>)
     8ae:	4798      	blx	r3
			( void ) xTaskResumeAll();
     8b0:	4b0f      	ldr	r3, [pc, #60]	; (8f0 <xQueueGenericReceive+0x16c>)
     8b2:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
     8b4:	2000      	movs	r0, #0
		}
	}
}
     8b6:	b004      	add	sp, #16
     8b8:	bc04      	pop	{r2}
     8ba:	4691      	mov	r9, r2
     8bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     8be:	46c0      	nop			; (mov r8, r8)
     8c0:	00001221 	.word	0x00001221
     8c4:	00000469 	.word	0x00000469
     8c8:	000010d1 	.word	0x000010d1
     8cc:	00000fb9 	.word	0x00000fb9
     8d0:	00001209 	.word	0x00001209
     8d4:	00001239 	.word	0x00001239
     8d8:	00001035 	.word	0x00001035
     8dc:	00000c41 	.word	0x00000c41
     8e0:	00001055 	.word	0x00001055
     8e4:	000010dd 	.word	0x000010dd
     8e8:	00000f79 	.word	0x00000f79
     8ec:	00000491 	.word	0x00000491
     8f0:	00000d8d 	.word	0x00000d8d

000008f4 <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
     8f4:	1c03      	adds	r3, r0, #0
     8f6:	3308      	adds	r3, #8
     8f8:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     8fa:	2201      	movs	r2, #1
     8fc:	4252      	negs	r2, r2
     8fe:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
     900:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
     902:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
     904:	2300      	movs	r3, #0
     906:	6003      	str	r3, [r0, #0]
}
     908:	4770      	bx	lr
     90a:	46c0      	nop			; (mov r8, r8)

0000090c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     90c:	2300      	movs	r3, #0
     90e:	6103      	str	r3, [r0, #16]
}
     910:	4770      	bx	lr
     912:	46c0      	nop			; (mov r8, r8)

00000914 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
     914:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
     916:	685a      	ldr	r2, [r3, #4]
     918:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
     91a:	6842      	ldr	r2, [r0, #4]
     91c:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     91e:	685a      	ldr	r2, [r3, #4]
     920:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
     922:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
     924:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     926:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
     928:	6803      	ldr	r3, [r0, #0]
     92a:	3301      	adds	r3, #1
     92c:	6003      	str	r3, [r0, #0]
}
     92e:	4770      	bx	lr

00000930 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
     930:	b510      	push	{r4, lr}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
     932:	680c      	ldr	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     934:	1c63      	adds	r3, r4, #1
     936:	d101      	bne.n	93c <vListInsert+0xc>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     938:	6903      	ldr	r3, [r0, #16]
     93a:	e00a      	b.n	952 <vListInsert+0x22>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
     93c:	1c03      	adds	r3, r0, #0
     93e:	3308      	adds	r3, #8
     940:	68c2      	ldr	r2, [r0, #12]
     942:	6812      	ldr	r2, [r2, #0]
     944:	4294      	cmp	r4, r2
     946:	d304      	bcc.n	952 <vListInsert+0x22>
     948:	685b      	ldr	r3, [r3, #4]
     94a:	685a      	ldr	r2, [r3, #4]
     94c:	6812      	ldr	r2, [r2, #0]
     94e:	4294      	cmp	r4, r2
     950:	d2fa      	bcs.n	948 <vListInsert+0x18>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     952:	685a      	ldr	r2, [r3, #4]
     954:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     956:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
     958:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
     95a:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     95c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
     95e:	6803      	ldr	r3, [r0, #0]
     960:	3301      	adds	r3, #1
     962:	6003      	str	r3, [r0, #0]
}
     964:	bd10      	pop	{r4, pc}
     966:	46c0      	nop			; (mov r8, r8)

00000968 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     968:	6843      	ldr	r3, [r0, #4]
     96a:	6882      	ldr	r2, [r0, #8]
     96c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     96e:	6883      	ldr	r3, [r0, #8]
     970:	6842      	ldr	r2, [r0, #4]
     972:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
     974:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     976:	685a      	ldr	r2, [r3, #4]
     978:	4282      	cmp	r2, r0
     97a:	d101      	bne.n	980 <uxListRemove+0x18>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     97c:	6882      	ldr	r2, [r0, #8]
     97e:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
     980:	2200      	movs	r2, #0
     982:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
     984:	681a      	ldr	r2, [r3, #0]
     986:	3a01      	subs	r2, #1
     988:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
     98a:	6818      	ldr	r0, [r3, #0]
}
     98c:	4770      	bx	lr
     98e:	46c0      	nop			; (mov r8, r8)

00000990 <prvAddCurrentTaskToDelayedList>:
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
     990:	b510      	push	{r4, lr}
     992:	1e04      	subs	r4, r0, #0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
     994:	4b0e      	ldr	r3, [pc, #56]	; (9d0 <prvAddCurrentTaskToDelayedList+0x40>)
     996:	681b      	ldr	r3, [r3, #0]
     998:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
     99a:	4b0e      	ldr	r3, [pc, #56]	; (9d4 <prvAddCurrentTaskToDelayedList+0x44>)
     99c:	681b      	ldr	r3, [r3, #0]
     99e:	429c      	cmp	r4, r3
     9a0:	d207      	bcs.n	9b2 <prvAddCurrentTaskToDelayedList+0x22>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
     9a2:	4b0d      	ldr	r3, [pc, #52]	; (9d8 <prvAddCurrentTaskToDelayedList+0x48>)
     9a4:	6818      	ldr	r0, [r3, #0]
     9a6:	4b0a      	ldr	r3, [pc, #40]	; (9d0 <prvAddCurrentTaskToDelayedList+0x40>)
     9a8:	6819      	ldr	r1, [r3, #0]
     9aa:	3104      	adds	r1, #4
     9ac:	4b0b      	ldr	r3, [pc, #44]	; (9dc <prvAddCurrentTaskToDelayedList+0x4c>)
     9ae:	4798      	blx	r3
     9b0:	e00c      	b.n	9cc <prvAddCurrentTaskToDelayedList+0x3c>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
     9b2:	4b0b      	ldr	r3, [pc, #44]	; (9e0 <prvAddCurrentTaskToDelayedList+0x50>)
     9b4:	6818      	ldr	r0, [r3, #0]
     9b6:	4b06      	ldr	r3, [pc, #24]	; (9d0 <prvAddCurrentTaskToDelayedList+0x40>)
     9b8:	6819      	ldr	r1, [r3, #0]
     9ba:	3104      	adds	r1, #4
     9bc:	4b07      	ldr	r3, [pc, #28]	; (9dc <prvAddCurrentTaskToDelayedList+0x4c>)
     9be:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
     9c0:	4b08      	ldr	r3, [pc, #32]	; (9e4 <prvAddCurrentTaskToDelayedList+0x54>)
     9c2:	681b      	ldr	r3, [r3, #0]
     9c4:	429c      	cmp	r4, r3
     9c6:	d201      	bcs.n	9cc <prvAddCurrentTaskToDelayedList+0x3c>
		{
			xNextTaskUnblockTime = xTimeToWake;
     9c8:	4b06      	ldr	r3, [pc, #24]	; (9e4 <prvAddCurrentTaskToDelayedList+0x54>)
     9ca:	601c      	str	r4, [r3, #0]
		}
	}
}
     9cc:	bd10      	pop	{r4, pc}
     9ce:	46c0      	nop			; (mov r8, r8)
     9d0:	2000023c 	.word	0x2000023c
     9d4:	20000254 	.word	0x20000254
     9d8:	20000258 	.word	0x20000258
     9dc:	00000931 	.word	0x00000931
     9e0:	200001a0 	.word	0x200001a0
     9e4:	200000b4 	.word	0x200000b4

000009e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
     9e8:	b538      	push	{r3, r4, r5, lr}
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
     9ea:	4d02      	ldr	r5, [pc, #8]	; (9f4 <prvIdleTask+0xc>)
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
     9ec:	4c02      	ldr	r4, [pc, #8]	; (9f8 <prvIdleTask+0x10>)
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
     9ee:	47a8      	blx	r5
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
     9f0:	47a0      	blx	r4
				}
				xTaskResumeAll();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
     9f2:	e7fc      	b.n	9ee <prvIdleTask+0x6>
     9f4:	00001209 	.word	0x00001209
     9f8:	00000251 	.word	0x00000251

000009fc <xTaskGenericCreate>:
#endif

/*lint +e956 */

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
     9fc:	b5f0      	push	{r4, r5, r6, r7, lr}
     9fe:	464f      	mov	r7, r9
     a00:	4646      	mov	r6, r8
     a02:	b4c0      	push	{r6, r7}
     a04:	b085      	sub	sp, #20
     a06:	9c0c      	ldr	r4, [sp, #48]	; 0x30
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
     a08:	2800      	cmp	r0, #0
     a0a:	d101      	bne.n	a10 <xTaskGenericCreate+0x14>
     a0c:	b672      	cpsid	i
     a0e:	e7fe      	b.n	a0e <xTaskGenericCreate+0x12>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
     a10:	2c05      	cmp	r4, #5
     a12:	d901      	bls.n	a18 <xTaskGenericCreate+0x1c>
     a14:	b672      	cpsid	i
     a16:	e7fe      	b.n	a16 <xTaskGenericCreate+0x1a>
     a18:	9303      	str	r3, [sp, #12]
     a1a:	1c16      	adds	r6, r2, #0
     a1c:	1c0f      	adds	r7, r1, #0
     a1e:	9002      	str	r0, [sp, #8]
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
     a20:	2040      	movs	r0, #64	; 0x40
     a22:	4b59      	ldr	r3, [pc, #356]	; (b88 <xTaskGenericCreate+0x18c>)
     a24:	4798      	blx	r3
     a26:	1e05      	subs	r5, r0, #0

	if( pxNewTCB != NULL )
     a28:	d100      	bne.n	a2c <xTaskGenericCreate+0x30>
     a2a:	e0a5      	b.n	b78 <xTaskGenericCreate+0x17c>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
     a2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
     a2e:	2b00      	cmp	r3, #0
     a30:	d000      	beq.n	a34 <xTaskGenericCreate+0x38>
     a32:	e09d      	b.n	b70 <xTaskGenericCreate+0x174>
     a34:	00b0      	lsls	r0, r6, #2
     a36:	4b54      	ldr	r3, [pc, #336]	; (b88 <xTaskGenericCreate+0x18c>)
     a38:	4798      	blx	r3
     a3a:	6328      	str	r0, [r5, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
     a3c:	2800      	cmp	r0, #0
     a3e:	d103      	bne.n	a48 <xTaskGenericCreate+0x4c>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
     a40:	1c28      	adds	r0, r5, #0
     a42:	4b52      	ldr	r3, [pc, #328]	; (b8c <xTaskGenericCreate+0x190>)
     a44:	4798      	blx	r3
     a46:	e097      	b.n	b78 <xTaskGenericCreate+0x17c>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
     a48:	00b2      	lsls	r2, r6, #2
     a4a:	21a5      	movs	r1, #165	; 0xa5
     a4c:	4b50      	ldr	r3, [pc, #320]	; (b90 <xTaskGenericCreate+0x194>)
     a4e:	4798      	blx	r3
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
     a50:	4b50      	ldr	r3, [pc, #320]	; (b94 <xTaskGenericCreate+0x198>)
     a52:	18f3      	adds	r3, r6, r3
     a54:	009b      	lsls	r3, r3, #2
     a56:	6b2a      	ldr	r2, [r5, #48]	; 0x30
     a58:	4694      	mov	ip, r2
     a5a:	4463      	add	r3, ip
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
     a5c:	2207      	movs	r2, #7
     a5e:	4393      	bics	r3, r2
     a60:	4698      	mov	r8, r3
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
     a62:	1c28      	adds	r0, r5, #0
     a64:	3034      	adds	r0, #52	; 0x34
     a66:	1c39      	adds	r1, r7, #0
     a68:	3201      	adds	r2, #1
     a6a:	4b4b      	ldr	r3, [pc, #300]	; (b98 <xTaskGenericCreate+0x19c>)
     a6c:	4798      	blx	r3
	}
	#endif /* configMAX_TASK_NAME_LEN */
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
     a6e:	2200      	movs	r2, #0
     a70:	233b      	movs	r3, #59	; 0x3b
     a72:	54ea      	strb	r2, [r5, r3]
     a74:	1e27      	subs	r7, r4, #0
     a76:	2f05      	cmp	r7, #5
     a78:	d900      	bls.n	a7c <xTaskGenericCreate+0x80>
     a7a:	2705      	movs	r7, #5
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
     a7c:	62ef      	str	r7, [r5, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
     a7e:	63ef      	str	r7, [r5, #60]	; 0x3c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
     a80:	1d2b      	adds	r3, r5, #4
     a82:	9301      	str	r3, [sp, #4]
     a84:	1c18      	adds	r0, r3, #0
     a86:	4e45      	ldr	r6, [pc, #276]	; (b9c <xTaskGenericCreate+0x1a0>)
     a88:	47b0      	blx	r6
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
     a8a:	1c28      	adds	r0, r5, #0
     a8c:	3018      	adds	r0, #24
     a8e:	47b0      	blx	r6

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
     a90:	612d      	str	r5, [r5, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
     a92:	2306      	movs	r3, #6
     a94:	1bdb      	subs	r3, r3, r7
     a96:	61ab      	str	r3, [r5, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
     a98:	626d      	str	r5, [r5, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
     a9a:	4640      	mov	r0, r8
     a9c:	9902      	ldr	r1, [sp, #8]
     a9e:	9a03      	ldr	r2, [sp, #12]
     aa0:	4b3f      	ldr	r3, [pc, #252]	; (ba0 <xTaskGenericCreate+0x1a4>)
     aa2:	4798      	blx	r3
     aa4:	6028      	str	r0, [r5, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
     aa6:	0743      	lsls	r3, r0, #29
     aa8:	d001      	beq.n	aae <xTaskGenericCreate+0xb2>
     aaa:	b672      	cpsid	i
     aac:	e7fe      	b.n	aac <xTaskGenericCreate+0xb0>

		if( ( void * ) pxCreatedTask != NULL )
     aae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
     ab0:	2b00      	cmp	r3, #0
     ab2:	d000      	beq.n	ab6 <xTaskGenericCreate+0xba>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
     ab4:	601d      	str	r5, [r3, #0]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
     ab6:	4b3b      	ldr	r3, [pc, #236]	; (ba4 <xTaskGenericCreate+0x1a8>)
     ab8:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
     aba:	4a3b      	ldr	r2, [pc, #236]	; (ba8 <xTaskGenericCreate+0x1ac>)
     abc:	6813      	ldr	r3, [r2, #0]
     abe:	3301      	adds	r3, #1
     ac0:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
     ac2:	4b3a      	ldr	r3, [pc, #232]	; (bac <xTaskGenericCreate+0x1b0>)
     ac4:	681b      	ldr	r3, [r3, #0]
     ac6:	2b00      	cmp	r3, #0
     ac8:	d11e      	bne.n	b08 <xTaskGenericCreate+0x10c>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
     aca:	4b38      	ldr	r3, [pc, #224]	; (bac <xTaskGenericCreate+0x1b0>)
     acc:	601d      	str	r5, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
     ace:	6813      	ldr	r3, [r2, #0]
     ad0:	2b01      	cmp	r3, #1
     ad2:	d124      	bne.n	b1e <xTaskGenericCreate+0x122>
     ad4:	4e36      	ldr	r6, [pc, #216]	; (bb0 <xTaskGenericCreate+0x1b4>)
     ad6:	3377      	adds	r3, #119	; 0x77
     ad8:	4699      	mov	r9, r3
     ada:	44b1      	add	r9, r6
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
     adc:	4f35      	ldr	r7, [pc, #212]	; (bb4 <xTaskGenericCreate+0x1b8>)
     ade:	1c30      	adds	r0, r6, #0
     ae0:	47b8      	blx	r7
     ae2:	3614      	adds	r6, #20

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
     ae4:	454e      	cmp	r6, r9
     ae6:	d1fa      	bne.n	ade <xTaskGenericCreate+0xe2>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
     ae8:	4b33      	ldr	r3, [pc, #204]	; (bb8 <xTaskGenericCreate+0x1bc>)
     aea:	4699      	mov	r9, r3
     aec:	1c18      	adds	r0, r3, #0
     aee:	4e31      	ldr	r6, [pc, #196]	; (bb4 <xTaskGenericCreate+0x1b8>)
     af0:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
     af2:	4f32      	ldr	r7, [pc, #200]	; (bbc <xTaskGenericCreate+0x1c0>)
     af4:	1c38      	adds	r0, r7, #0
     af6:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xPendingReadyList );
     af8:	4831      	ldr	r0, [pc, #196]	; (bc0 <xTaskGenericCreate+0x1c4>)
     afa:	47b0      	blx	r6
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
     afc:	4b31      	ldr	r3, [pc, #196]	; (bc4 <xTaskGenericCreate+0x1c8>)
     afe:	464a      	mov	r2, r9
     b00:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
     b02:	4b31      	ldr	r3, [pc, #196]	; (bc8 <xTaskGenericCreate+0x1cc>)
     b04:	601f      	str	r7, [r3, #0]
     b06:	e00a      	b.n	b1e <xTaskGenericCreate+0x122>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
     b08:	4b30      	ldr	r3, [pc, #192]	; (bcc <xTaskGenericCreate+0x1d0>)
     b0a:	681b      	ldr	r3, [r3, #0]
     b0c:	2b00      	cmp	r3, #0
     b0e:	d106      	bne.n	b1e <xTaskGenericCreate+0x122>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
     b10:	4b26      	ldr	r3, [pc, #152]	; (bac <xTaskGenericCreate+0x1b0>)
     b12:	681b      	ldr	r3, [r3, #0]
     b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     b16:	429c      	cmp	r4, r3
     b18:	d301      	bcc.n	b1e <xTaskGenericCreate+0x122>
					{
						pxCurrentTCB = pxNewTCB;
     b1a:	4b24      	ldr	r3, [pc, #144]	; (bac <xTaskGenericCreate+0x1b0>)
     b1c:	601d      	str	r5, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
     b1e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
     b20:	4a2b      	ldr	r2, [pc, #172]	; (bd0 <xTaskGenericCreate+0x1d4>)
     b22:	6812      	ldr	r2, [r2, #0]
     b24:	4293      	cmp	r3, r2
     b26:	d901      	bls.n	b2c <xTaskGenericCreate+0x130>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
     b28:	4a29      	ldr	r2, [pc, #164]	; (bd0 <xTaskGenericCreate+0x1d4>)
     b2a:	6013      	str	r3, [r2, #0]
			}

			uxTaskNumber++;
     b2c:	4929      	ldr	r1, [pc, #164]	; (bd4 <xTaskGenericCreate+0x1d8>)
     b2e:	680a      	ldr	r2, [r1, #0]
     b30:	3201      	adds	r2, #1
     b32:	600a      	str	r2, [r1, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyQueue( pxNewTCB );
     b34:	4a28      	ldr	r2, [pc, #160]	; (bd8 <xTaskGenericCreate+0x1dc>)
     b36:	6812      	ldr	r2, [r2, #0]
     b38:	4293      	cmp	r3, r2
     b3a:	d901      	bls.n	b40 <xTaskGenericCreate+0x144>
     b3c:	4a26      	ldr	r2, [pc, #152]	; (bd8 <xTaskGenericCreate+0x1dc>)
     b3e:	6013      	str	r3, [r2, #0]
     b40:	0098      	lsls	r0, r3, #2
     b42:	18c3      	adds	r3, r0, r3
     b44:	009b      	lsls	r3, r3, #2
     b46:	481a      	ldr	r0, [pc, #104]	; (bb0 <xTaskGenericCreate+0x1b4>)
     b48:	18c0      	adds	r0, r0, r3
     b4a:	9901      	ldr	r1, [sp, #4]
     b4c:	4b23      	ldr	r3, [pc, #140]	; (bdc <xTaskGenericCreate+0x1e0>)
     b4e:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
     b50:	4b23      	ldr	r3, [pc, #140]	; (be0 <xTaskGenericCreate+0x1e4>)
     b52:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
     b54:	4b1d      	ldr	r3, [pc, #116]	; (bcc <xTaskGenericCreate+0x1d0>)
     b56:	681b      	ldr	r3, [r3, #0]
     b58:	2001      	movs	r0, #1
     b5a:	2b00      	cmp	r3, #0
     b5c:	d00e      	beq.n	b7c <xTaskGenericCreate+0x180>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
     b5e:	4b13      	ldr	r3, [pc, #76]	; (bac <xTaskGenericCreate+0x1b0>)
     b60:	681b      	ldr	r3, [r3, #0]
     b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     b64:	429c      	cmp	r4, r3
     b66:	d909      	bls.n	b7c <xTaskGenericCreate+0x180>
			{
				portYIELD_WITHIN_API();
     b68:	4b1e      	ldr	r3, [pc, #120]	; (be4 <xTaskGenericCreate+0x1e8>)
     b6a:	4798      	blx	r3
     b6c:	2001      	movs	r0, #1
     b6e:	e005      	b.n	b7c <xTaskGenericCreate+0x180>
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
     b70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
     b72:	6303      	str	r3, [r0, #48]	; 0x30
     b74:	1c18      	adds	r0, r3, #0
     b76:	e767      	b.n	a48 <xTaskGenericCreate+0x4c>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
     b78:	2001      	movs	r0, #1
     b7a:	4240      	negs	r0, r0
			}
		}
	}

	return xReturn;
}
     b7c:	b005      	add	sp, #20
     b7e:	bc0c      	pop	{r2, r3}
     b80:	4690      	mov	r8, r2
     b82:	4699      	mov	r9, r3
     b84:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b86:	46c0      	nop			; (mov r8, r8)
     b88:	00001315 	.word	0x00001315
     b8c:	0000137d 	.word	0x0000137d
     b90:	00009ea1 	.word	0x00009ea1
     b94:	3fffffff 	.word	0x3fffffff
     b98:	0000b5cb 	.word	0x0000b5cb
     b9c:	0000090d 	.word	0x0000090d
     ba0:	000011c9 	.word	0x000011c9
     ba4:	00001221 	.word	0x00001221
     ba8:	2000027c 	.word	0x2000027c
     bac:	2000023c 	.word	0x2000023c
     bb0:	200001c0 	.word	0x200001c0
     bb4:	000008f5 	.word	0x000008f5
     bb8:	20000264 	.word	0x20000264
     bbc:	200001ac 	.word	0x200001ac
     bc0:	20000240 	.word	0x20000240
     bc4:	200001a0 	.word	0x200001a0
     bc8:	20000258 	.word	0x20000258
     bcc:	200001a4 	.word	0x200001a4
     bd0:	20000280 	.word	0x20000280
     bd4:	20000260 	.word	0x20000260
     bd8:	2000025c 	.word	0x2000025c
     bdc:	00000915 	.word	0x00000915
     be0:	00001239 	.word	0x00001239
     be4:	00001209 	.word	0x00001209

00000be8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
     be8:	b510      	push	{r4, lr}
     bea:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
     bec:	2300      	movs	r3, #0
     bee:	9300      	str	r3, [sp, #0]
     bf0:	9301      	str	r3, [sp, #4]
     bf2:	9302      	str	r3, [sp, #8]
     bf4:	9303      	str	r3, [sp, #12]
     bf6:	480c      	ldr	r0, [pc, #48]	; (c28 <vTaskStartScheduler+0x40>)
     bf8:	490c      	ldr	r1, [pc, #48]	; (c2c <vTaskStartScheduler+0x44>)
     bfa:	2296      	movs	r2, #150	; 0x96
     bfc:	0052      	lsls	r2, r2, #1
     bfe:	4c0c      	ldr	r4, [pc, #48]	; (c30 <vTaskStartScheduler+0x48>)
     c00:	47a0      	blx	r4
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
     c02:	2801      	cmp	r0, #1
     c04:	d109      	bne.n	c1a <vTaskStartScheduler+0x32>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
     c06:	b672      	cpsid	i

		xSchedulerRunning = pdTRUE;
     c08:	2201      	movs	r2, #1
     c0a:	4b0a      	ldr	r3, [pc, #40]	; (c34 <vTaskStartScheduler+0x4c>)
     c0c:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
     c0e:	2200      	movs	r2, #0
     c10:	4b09      	ldr	r3, [pc, #36]	; (c38 <vTaskStartScheduler+0x50>)
     c12:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
     c14:	4b09      	ldr	r3, [pc, #36]	; (c3c <vTaskStartScheduler+0x54>)
     c16:	4798      	blx	r3
     c18:	e003      	b.n	c22 <vTaskStartScheduler+0x3a>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
     c1a:	2800      	cmp	r0, #0
     c1c:	d101      	bne.n	c22 <vTaskStartScheduler+0x3a>
     c1e:	b672      	cpsid	i
     c20:	e7fe      	b.n	c20 <vTaskStartScheduler+0x38>
	}
}
     c22:	b004      	add	sp, #16
     c24:	bd10      	pop	{r4, pc}
     c26:	46c0      	nop			; (mov r8, r8)
     c28:	000009e9 	.word	0x000009e9
     c2c:	0000eab8 	.word	0x0000eab8
     c30:	000009fd 	.word	0x000009fd
     c34:	200001a4 	.word	0x200001a4
     c38:	20000254 	.word	0x20000254
     c3c:	000012d9 	.word	0x000012d9

00000c40 <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
     c40:	4a02      	ldr	r2, [pc, #8]	; (c4c <vTaskSuspendAll+0xc>)
     c42:	6813      	ldr	r3, [r2, #0]
     c44:	3301      	adds	r3, #1
     c46:	6013      	str	r3, [r2, #0]
}
     c48:	4770      	bx	lr
     c4a:	46c0      	nop			; (mov r8, r8)
     c4c:	20000238 	.word	0x20000238

00000c50 <xTaskGetTickCount>:
	return xAlreadyYielded;
}
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCount( void )
{
     c50:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
     c52:	4b04      	ldr	r3, [pc, #16]	; (c64 <xTaskGetTickCount+0x14>)
     c54:	4798      	blx	r3
	{
		xTicks = xTickCount;
     c56:	4b04      	ldr	r3, [pc, #16]	; (c68 <xTaskGetTickCount+0x18>)
     c58:	681c      	ldr	r4, [r3, #0]
	}
	taskEXIT_CRITICAL();
     c5a:	4b04      	ldr	r3, [pc, #16]	; (c6c <xTaskGetTickCount+0x1c>)
     c5c:	4798      	blx	r3

	return xTicks;
}
     c5e:	1c20      	adds	r0, r4, #0
     c60:	bd10      	pop	{r4, pc}
     c62:	46c0      	nop			; (mov r8, r8)
     c64:	00001221 	.word	0x00001221
     c68:	20000254 	.word	0x20000254
     c6c:	00001239 	.word	0x00001239

00000c70 <vTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
     c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
     c72:	4b3b      	ldr	r3, [pc, #236]	; (d60 <vTaskIncrementTick+0xf0>)
     c74:	681b      	ldr	r3, [r3, #0]
     c76:	2b00      	cmp	r3, #0
     c78:	d16d      	bne.n	d56 <vTaskIncrementTick+0xe6>
	{
		++xTickCount;
     c7a:	4b3a      	ldr	r3, [pc, #232]	; (d64 <vTaskIncrementTick+0xf4>)
     c7c:	681a      	ldr	r2, [r3, #0]
     c7e:	3201      	adds	r2, #1
     c80:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
     c82:	681b      	ldr	r3, [r3, #0]
     c84:	2b00      	cmp	r3, #0
     c86:	d120      	bne.n	cca <vTaskIncrementTick+0x5a>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
     c88:	4b37      	ldr	r3, [pc, #220]	; (d68 <vTaskIncrementTick+0xf8>)
     c8a:	681b      	ldr	r3, [r3, #0]
     c8c:	681b      	ldr	r3, [r3, #0]
     c8e:	2b00      	cmp	r3, #0
     c90:	d001      	beq.n	c96 <vTaskIncrementTick+0x26>
     c92:	b672      	cpsid	i
     c94:	e7fe      	b.n	c94 <vTaskIncrementTick+0x24>

			pxTemp = pxDelayedTaskList;
     c96:	4b34      	ldr	r3, [pc, #208]	; (d68 <vTaskIncrementTick+0xf8>)
     c98:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
     c9a:	4a34      	ldr	r2, [pc, #208]	; (d6c <vTaskIncrementTick+0xfc>)
     c9c:	6810      	ldr	r0, [r2, #0]
     c9e:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
     ca0:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
     ca2:	4933      	ldr	r1, [pc, #204]	; (d70 <vTaskIncrementTick+0x100>)
     ca4:	680a      	ldr	r2, [r1, #0]
     ca6:	3201      	adds	r2, #1
     ca8:	600a      	str	r2, [r1, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
     caa:	681b      	ldr	r3, [r3, #0]
     cac:	681b      	ldr	r3, [r3, #0]
     cae:	2b00      	cmp	r3, #0
     cb0:	d104      	bne.n	cbc <vTaskIncrementTick+0x4c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
     cb2:	2201      	movs	r2, #1
     cb4:	4252      	negs	r2, r2
     cb6:	4b2f      	ldr	r3, [pc, #188]	; (d74 <vTaskIncrementTick+0x104>)
     cb8:	601a      	str	r2, [r3, #0]
     cba:	e006      	b.n	cca <vTaskIncrementTick+0x5a>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
     cbc:	4b2a      	ldr	r3, [pc, #168]	; (d68 <vTaskIncrementTick+0xf8>)
     cbe:	681b      	ldr	r3, [r3, #0]
     cc0:	68db      	ldr	r3, [r3, #12]
     cc2:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
     cc4:	685a      	ldr	r2, [r3, #4]
     cc6:	4b2b      	ldr	r3, [pc, #172]	; (d74 <vTaskIncrementTick+0x104>)
     cc8:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
     cca:	4b26      	ldr	r3, [pc, #152]	; (d64 <vTaskIncrementTick+0xf4>)
     ccc:	681a      	ldr	r2, [r3, #0]
     cce:	4b29      	ldr	r3, [pc, #164]	; (d74 <vTaskIncrementTick+0x104>)
     cd0:	681b      	ldr	r3, [r3, #0]
     cd2:	429a      	cmp	r2, r3
     cd4:	d343      	bcc.n	d5e <vTaskIncrementTick+0xee>
     cd6:	4b24      	ldr	r3, [pc, #144]	; (d68 <vTaskIncrementTick+0xf8>)
     cd8:	681b      	ldr	r3, [r3, #0]
     cda:	681b      	ldr	r3, [r3, #0]
     cdc:	2b00      	cmp	r3, #0
     cde:	d00b      	beq.n	cf8 <vTaskIncrementTick+0x88>
     ce0:	4b21      	ldr	r3, [pc, #132]	; (d68 <vTaskIncrementTick+0xf8>)
     ce2:	681b      	ldr	r3, [r3, #0]
     ce4:	68db      	ldr	r3, [r3, #12]
     ce6:	68dd      	ldr	r5, [r3, #12]
     ce8:	686b      	ldr	r3, [r5, #4]
     cea:	4a1e      	ldr	r2, [pc, #120]	; (d64 <vTaskIncrementTick+0xf4>)
     cec:	6812      	ldr	r2, [r2, #0]
     cee:	4293      	cmp	r3, r2
     cf0:	d810      	bhi.n	d14 <vTaskIncrementTick+0xa4>
     cf2:	4f21      	ldr	r7, [pc, #132]	; (d78 <vTaskIncrementTick+0x108>)
     cf4:	4e21      	ldr	r6, [pc, #132]	; (d7c <vTaskIncrementTick+0x10c>)
     cf6:	e010      	b.n	d1a <vTaskIncrementTick+0xaa>
     cf8:	2201      	movs	r2, #1
     cfa:	4252      	negs	r2, r2
     cfc:	4b1d      	ldr	r3, [pc, #116]	; (d74 <vTaskIncrementTick+0x104>)
     cfe:	601a      	str	r2, [r3, #0]
     d00:	e02d      	b.n	d5e <vTaskIncrementTick+0xee>
     d02:	4b19      	ldr	r3, [pc, #100]	; (d68 <vTaskIncrementTick+0xf8>)
     d04:	681b      	ldr	r3, [r3, #0]
     d06:	68db      	ldr	r3, [r3, #12]
     d08:	68dd      	ldr	r5, [r3, #12]
     d0a:	686b      	ldr	r3, [r5, #4]
     d0c:	4a15      	ldr	r2, [pc, #84]	; (d64 <vTaskIncrementTick+0xf4>)
     d0e:	6812      	ldr	r2, [r2, #0]
     d10:	4293      	cmp	r3, r2
     d12:	d902      	bls.n	d1a <vTaskIncrementTick+0xaa>
     d14:	4a17      	ldr	r2, [pc, #92]	; (d74 <vTaskIncrementTick+0x104>)
     d16:	6013      	str	r3, [r2, #0]
     d18:	e021      	b.n	d5e <vTaskIncrementTick+0xee>
     d1a:	1d2c      	adds	r4, r5, #4
     d1c:	1c20      	adds	r0, r4, #0
     d1e:	47b8      	blx	r7
     d20:	6aab      	ldr	r3, [r5, #40]	; 0x28
     d22:	2b00      	cmp	r3, #0
     d24:	d003      	beq.n	d2e <vTaskIncrementTick+0xbe>
     d26:	1c28      	adds	r0, r5, #0
     d28:	3018      	adds	r0, #24
     d2a:	4b13      	ldr	r3, [pc, #76]	; (d78 <vTaskIncrementTick+0x108>)
     d2c:	4798      	blx	r3
     d2e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
     d30:	6832      	ldr	r2, [r6, #0]
     d32:	4293      	cmp	r3, r2
     d34:	d901      	bls.n	d3a <vTaskIncrementTick+0xca>
     d36:	4a11      	ldr	r2, [pc, #68]	; (d7c <vTaskIncrementTick+0x10c>)
     d38:	6013      	str	r3, [r2, #0]
     d3a:	0098      	lsls	r0, r3, #2
     d3c:	18c3      	adds	r3, r0, r3
     d3e:	009b      	lsls	r3, r3, #2
     d40:	480f      	ldr	r0, [pc, #60]	; (d80 <vTaskIncrementTick+0x110>)
     d42:	18c0      	adds	r0, r0, r3
     d44:	1c21      	adds	r1, r4, #0
     d46:	4b0f      	ldr	r3, [pc, #60]	; (d84 <vTaskIncrementTick+0x114>)
     d48:	4798      	blx	r3
     d4a:	4b07      	ldr	r3, [pc, #28]	; (d68 <vTaskIncrementTick+0xf8>)
     d4c:	681b      	ldr	r3, [r3, #0]
     d4e:	681b      	ldr	r3, [r3, #0]
     d50:	2b00      	cmp	r3, #0
     d52:	d1d6      	bne.n	d02 <vTaskIncrementTick+0x92>
     d54:	e7d0      	b.n	cf8 <vTaskIncrementTick+0x88>
	}
	else
	{
		++uxMissedTicks;
     d56:	4a0c      	ldr	r2, [pc, #48]	; (d88 <vTaskIncrementTick+0x118>)
     d58:	6813      	ldr	r3, [r2, #0]
     d5a:	3301      	adds	r3, #1
     d5c:	6013      	str	r3, [r2, #0]
		{
			vApplicationTickHook();
		}
	}
	#endif /* configUSE_TICK_HOOK */
}
     d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d60:	20000238 	.word	0x20000238
     d64:	20000254 	.word	0x20000254
     d68:	200001a0 	.word	0x200001a0
     d6c:	20000258 	.word	0x20000258
     d70:	200001a8 	.word	0x200001a8
     d74:	200000b4 	.word	0x200000b4
     d78:	00000969 	.word	0x00000969
     d7c:	2000025c 	.word	0x2000025c
     d80:	200001c0 	.word	0x200001c0
     d84:	00000915 	.word	0x00000915
     d88:	2000019c 	.word	0x2000019c

00000d8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
     d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
     d8e:	4b2f      	ldr	r3, [pc, #188]	; (e4c <xTaskResumeAll+0xc0>)
     d90:	681b      	ldr	r3, [r3, #0]
     d92:	2b00      	cmp	r3, #0
     d94:	d101      	bne.n	d9a <xTaskResumeAll+0xe>
     d96:	b672      	cpsid	i
     d98:	e7fe      	b.n	d98 <xTaskResumeAll+0xc>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
     d9a:	4b2d      	ldr	r3, [pc, #180]	; (e50 <xTaskResumeAll+0xc4>)
     d9c:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
     d9e:	4b2b      	ldr	r3, [pc, #172]	; (e4c <xTaskResumeAll+0xc0>)
     da0:	681a      	ldr	r2, [r3, #0]
     da2:	3a01      	subs	r2, #1
     da4:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
     da6:	681b      	ldr	r3, [r3, #0]
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
     da8:	2400      	movs	r4, #0
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
     daa:	2b00      	cmp	r3, #0
     dac:	d149      	bne.n	e42 <xTaskResumeAll+0xb6>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
     dae:	4b29      	ldr	r3, [pc, #164]	; (e54 <xTaskResumeAll+0xc8>)
     db0:	681b      	ldr	r3, [r3, #0]
     db2:	2600      	movs	r6, #0
     db4:	2b00      	cmp	r3, #0
     db6:	d122      	bne.n	dfe <xTaskResumeAll+0x72>
     db8:	e043      	b.n	e42 <xTaskResumeAll+0xb6>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
     dba:	4b27      	ldr	r3, [pc, #156]	; (e58 <xTaskResumeAll+0xcc>)
     dbc:	68db      	ldr	r3, [r3, #12]
     dbe:	68df      	ldr	r7, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
     dc0:	1c38      	adds	r0, r7, #0
     dc2:	3018      	adds	r0, #24
     dc4:	4b25      	ldr	r3, [pc, #148]	; (e5c <xTaskResumeAll+0xd0>)
     dc6:	4798      	blx	r3
					uxListRemove( &( pxTCB->xGenericListItem ) );
     dc8:	1d3d      	adds	r5, r7, #4
     dca:	1c28      	adds	r0, r5, #0
     dcc:	4b23      	ldr	r3, [pc, #140]	; (e5c <xTaskResumeAll+0xd0>)
     dce:	4798      	blx	r3
					prvAddTaskToReadyQueue( pxTCB );
     dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     dd2:	4a23      	ldr	r2, [pc, #140]	; (e60 <xTaskResumeAll+0xd4>)
     dd4:	6812      	ldr	r2, [r2, #0]
     dd6:	4293      	cmp	r3, r2
     dd8:	d901      	bls.n	dde <xTaskResumeAll+0x52>
     dda:	4a21      	ldr	r2, [pc, #132]	; (e60 <xTaskResumeAll+0xd4>)
     ddc:	6013      	str	r3, [r2, #0]
     dde:	0098      	lsls	r0, r3, #2
     de0:	18c3      	adds	r3, r0, r3
     de2:	009b      	lsls	r3, r3, #2
     de4:	481f      	ldr	r0, [pc, #124]	; (e64 <xTaskResumeAll+0xd8>)
     de6:	18c0      	adds	r0, r0, r3
     de8:	1c29      	adds	r1, r5, #0
     dea:	4b1f      	ldr	r3, [pc, #124]	; (e68 <xTaskResumeAll+0xdc>)
     dec:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
     dee:	4b1f      	ldr	r3, [pc, #124]	; (e6c <xTaskResumeAll+0xe0>)
     df0:	681b      	ldr	r3, [r3, #0]
     df2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     df6:	429a      	cmp	r2, r3
     df8:	d302      	bcc.n	e00 <xTaskResumeAll+0x74>
					{
						xYieldRequired = pdTRUE;
     dfa:	2601      	movs	r6, #1
     dfc:	e000      	b.n	e00 <xTaskResumeAll+0x74>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
     dfe:	4c16      	ldr	r4, [pc, #88]	; (e58 <xTaskResumeAll+0xcc>)
     e00:	6823      	ldr	r3, [r4, #0]
     e02:	2b00      	cmp	r3, #0
     e04:	d1d9      	bne.n	dba <xTaskResumeAll+0x2e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
     e06:	4b1a      	ldr	r3, [pc, #104]	; (e70 <xTaskResumeAll+0xe4>)
     e08:	681b      	ldr	r3, [r3, #0]
     e0a:	2b00      	cmp	r3, #0
     e0c:	d00c      	beq.n	e28 <xTaskResumeAll+0x9c>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
     e0e:	4b18      	ldr	r3, [pc, #96]	; (e70 <xTaskResumeAll+0xe4>)
     e10:	681b      	ldr	r3, [r3, #0]
     e12:	2b00      	cmp	r3, #0
     e14:	d008      	beq.n	e28 <xTaskResumeAll+0x9c>
					{
						vTaskIncrementTick();
     e16:	4d17      	ldr	r5, [pc, #92]	; (e74 <xTaskResumeAll+0xe8>)
						--uxMissedTicks;
     e18:	4c15      	ldr	r4, [pc, #84]	; (e70 <xTaskResumeAll+0xe4>)
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
     e1a:	47a8      	blx	r5
						--uxMissedTicks;
     e1c:	6823      	ldr	r3, [r4, #0]
     e1e:	3b01      	subs	r3, #1
     e20:	6023      	str	r3, [r4, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
     e22:	6823      	ldr	r3, [r4, #0]
     e24:	2b00      	cmp	r3, #0
     e26:	d1f8      	bne.n	e1a <xTaskResumeAll+0x8e>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
     e28:	2e01      	cmp	r6, #1
     e2a:	d004      	beq.n	e36 <xTaskResumeAll+0xaa>
     e2c:	4b12      	ldr	r3, [pc, #72]	; (e78 <xTaskResumeAll+0xec>)
     e2e:	681b      	ldr	r3, [r3, #0]
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
     e30:	2400      	movs	r4, #0
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
     e32:	2b01      	cmp	r3, #1
     e34:	d105      	bne.n	e42 <xTaskResumeAll+0xb6>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
     e36:	2200      	movs	r2, #0
     e38:	4b0f      	ldr	r3, [pc, #60]	; (e78 <xTaskResumeAll+0xec>)
     e3a:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
     e3c:	4b0f      	ldr	r3, [pc, #60]	; (e7c <xTaskResumeAll+0xf0>)
     e3e:	4798      	blx	r3
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
     e40:	2401      	movs	r4, #1
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
     e42:	4b0f      	ldr	r3, [pc, #60]	; (e80 <xTaskResumeAll+0xf4>)
     e44:	4798      	blx	r3

	return xAlreadyYielded;
}
     e46:	1c20      	adds	r0, r4, #0
     e48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     e4a:	46c0      	nop			; (mov r8, r8)
     e4c:	20000238 	.word	0x20000238
     e50:	00001221 	.word	0x00001221
     e54:	2000027c 	.word	0x2000027c
     e58:	20000240 	.word	0x20000240
     e5c:	00000969 	.word	0x00000969
     e60:	2000025c 	.word	0x2000025c
     e64:	200001c0 	.word	0x200001c0
     e68:	00000915 	.word	0x00000915
     e6c:	2000023c 	.word	0x2000023c
     e70:	2000019c 	.word	0x2000019c
     e74:	00000c71 	.word	0x00000c71
     e78:	20000278 	.word	0x20000278
     e7c:	00001209 	.word	0x00001209
     e80:	00001239 	.word	0x00001239

00000e84 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
     e84:	b510      	push	{r4, lr}
     e86:	1e04      	subs	r4, r0, #0
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
     e88:	d010      	beq.n	eac <vTaskDelay+0x28>
		{
			vTaskSuspendAll();
     e8a:	4b0a      	ldr	r3, [pc, #40]	; (eb4 <vTaskDelay+0x30>)
     e8c:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
     e8e:	4b0a      	ldr	r3, [pc, #40]	; (eb8 <vTaskDelay+0x34>)
     e90:	681b      	ldr	r3, [r3, #0]
     e92:	18e4      	adds	r4, r4, r3

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
     e94:	4b09      	ldr	r3, [pc, #36]	; (ebc <vTaskDelay+0x38>)
     e96:	6818      	ldr	r0, [r3, #0]
     e98:	3004      	adds	r0, #4
     e9a:	4b09      	ldr	r3, [pc, #36]	; (ec0 <vTaskDelay+0x3c>)
     e9c:	4798      	blx	r3
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
     e9e:	1c20      	adds	r0, r4, #0
     ea0:	4b08      	ldr	r3, [pc, #32]	; (ec4 <vTaskDelay+0x40>)
     ea2:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
     ea4:	4b08      	ldr	r3, [pc, #32]	; (ec8 <vTaskDelay+0x44>)
     ea6:	4798      	blx	r3
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
     ea8:	2800      	cmp	r0, #0
     eaa:	d101      	bne.n	eb0 <vTaskDelay+0x2c>
		{
			portYIELD_WITHIN_API();
     eac:	4b07      	ldr	r3, [pc, #28]	; (ecc <vTaskDelay+0x48>)
     eae:	4798      	blx	r3
		}
	}
     eb0:	bd10      	pop	{r4, pc}
     eb2:	46c0      	nop			; (mov r8, r8)
     eb4:	00000c41 	.word	0x00000c41
     eb8:	20000254 	.word	0x20000254
     ebc:	2000023c 	.word	0x2000023c
     ec0:	00000969 	.word	0x00000969
     ec4:	00000991 	.word	0x00000991
     ec8:	00000d8d 	.word	0x00000d8d
     ecc:	00001209 	.word	0x00001209

00000ed0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
     ed0:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
     ed2:	4b24      	ldr	r3, [pc, #144]	; (f64 <vTaskSwitchContext+0x94>)
     ed4:	681b      	ldr	r3, [r3, #0]
     ed6:	2b00      	cmp	r3, #0
     ed8:	d110      	bne.n	efc <vTaskSwitchContext+0x2c>
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
     eda:	4b23      	ldr	r3, [pc, #140]	; (f68 <vTaskSwitchContext+0x98>)
     edc:	681b      	ldr	r3, [r3, #0]
     ede:	009a      	lsls	r2, r3, #2
     ee0:	18d3      	adds	r3, r2, r3
     ee2:	009b      	lsls	r3, r3, #2
     ee4:	4a21      	ldr	r2, [pc, #132]	; (f6c <vTaskSwitchContext+0x9c>)
     ee6:	589b      	ldr	r3, [r3, r2]
     ee8:	2b00      	cmp	r3, #0
     eea:	d11a      	bne.n	f22 <vTaskSwitchContext+0x52>
     eec:	4b1e      	ldr	r3, [pc, #120]	; (f68 <vTaskSwitchContext+0x98>)
     eee:	681b      	ldr	r3, [r3, #0]
     ef0:	2b00      	cmp	r3, #0
     ef2:	d00a      	beq.n	f0a <vTaskSwitchContext+0x3a>
     ef4:	4a1c      	ldr	r2, [pc, #112]	; (f68 <vTaskSwitchContext+0x98>)
     ef6:	4c1d      	ldr	r4, [pc, #116]	; (f6c <vTaskSwitchContext+0x9c>)
     ef8:	1c10      	adds	r0, r2, #0
     efa:	e008      	b.n	f0e <vTaskSwitchContext+0x3e>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
     efc:	2201      	movs	r2, #1
     efe:	4b1c      	ldr	r3, [pc, #112]	; (f70 <vTaskSwitchContext+0xa0>)
     f00:	601a      	str	r2, [r3, #0]
     f02:	e02d      	b.n	f60 <vTaskSwitchContext+0x90>
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
     f04:	6803      	ldr	r3, [r0, #0]
     f06:	2b00      	cmp	r3, #0
     f08:	d101      	bne.n	f0e <vTaskSwitchContext+0x3e>
     f0a:	b672      	cpsid	i
     f0c:	e7fe      	b.n	f0c <vTaskSwitchContext+0x3c>
     f0e:	6813      	ldr	r3, [r2, #0]
     f10:	3b01      	subs	r3, #1
     f12:	6013      	str	r3, [r2, #0]
     f14:	6813      	ldr	r3, [r2, #0]
     f16:	0099      	lsls	r1, r3, #2
     f18:	18cb      	adds	r3, r1, r3
     f1a:	009b      	lsls	r3, r3, #2
     f1c:	591b      	ldr	r3, [r3, r4]
     f1e:	2b00      	cmp	r3, #0
     f20:	d0f0      	beq.n	f04 <vTaskSwitchContext+0x34>
     f22:	4b11      	ldr	r3, [pc, #68]	; (f68 <vTaskSwitchContext+0x98>)
     f24:	681b      	ldr	r3, [r3, #0]
     f26:	4c11      	ldr	r4, [pc, #68]	; (f6c <vTaskSwitchContext+0x9c>)
     f28:	009a      	lsls	r2, r3, #2
     f2a:	18d1      	adds	r1, r2, r3
     f2c:	0089      	lsls	r1, r1, #2
     f2e:	1861      	adds	r1, r4, r1
     f30:	6848      	ldr	r0, [r1, #4]
     f32:	6840      	ldr	r0, [r0, #4]
     f34:	6048      	str	r0, [r1, #4]
     f36:	18d2      	adds	r2, r2, r3
     f38:	0092      	lsls	r2, r2, #2
     f3a:	3208      	adds	r2, #8
     f3c:	18a2      	adds	r2, r4, r2
     f3e:	4290      	cmp	r0, r2
     f40:	d105      	bne.n	f4e <vTaskSwitchContext+0x7e>
     f42:	6841      	ldr	r1, [r0, #4]
     f44:	009a      	lsls	r2, r3, #2
     f46:	18d2      	adds	r2, r2, r3
     f48:	0092      	lsls	r2, r2, #2
     f4a:	18a2      	adds	r2, r4, r2
     f4c:	6051      	str	r1, [r2, #4]
     f4e:	009a      	lsls	r2, r3, #2
     f50:	18d3      	adds	r3, r2, r3
     f52:	009b      	lsls	r3, r3, #2
     f54:	4a05      	ldr	r2, [pc, #20]	; (f6c <vTaskSwitchContext+0x9c>)
     f56:	18d3      	adds	r3, r2, r3
     f58:	685b      	ldr	r3, [r3, #4]
     f5a:	68da      	ldr	r2, [r3, #12]
     f5c:	4b05      	ldr	r3, [pc, #20]	; (f74 <vTaskSwitchContext+0xa4>)
     f5e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();
	}
}
     f60:	bd10      	pop	{r4, pc}
     f62:	46c0      	nop			; (mov r8, r8)
     f64:	20000238 	.word	0x20000238
     f68:	2000025c 	.word	0x2000025c
     f6c:	200001c0 	.word	0x200001c0
     f70:	20000278 	.word	0x20000278
     f74:	2000023c 	.word	0x2000023c

00000f78 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
     f78:	b538      	push	{r3, r4, r5, lr}
portTickType xTimeToWake;

	configASSERT( pxEventList );
     f7a:	2800      	cmp	r0, #0
     f7c:	d101      	bne.n	f82 <vTaskPlaceOnEventList+0xa>
     f7e:	b672      	cpsid	i
     f80:	e7fe      	b.n	f80 <vTaskPlaceOnEventList+0x8>
     f82:	1c0c      	adds	r4, r1, #0
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
     f84:	4d07      	ldr	r5, [pc, #28]	; (fa4 <vTaskPlaceOnEventList+0x2c>)
     f86:	6829      	ldr	r1, [r5, #0]
     f88:	3118      	adds	r1, #24
     f8a:	4b07      	ldr	r3, [pc, #28]	; (fa8 <vTaskPlaceOnEventList+0x30>)
     f8c:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
     f8e:	6828      	ldr	r0, [r5, #0]
     f90:	3004      	adds	r0, #4
     f92:	4b06      	ldr	r3, [pc, #24]	; (fac <vTaskPlaceOnEventList+0x34>)
     f94:	4798      	blx	r3
	}
	#else /* INCLUDE_vTaskSuspend */
	{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
     f96:	4b06      	ldr	r3, [pc, #24]	; (fb0 <vTaskPlaceOnEventList+0x38>)
     f98:	6818      	ldr	r0, [r3, #0]
     f9a:	1820      	adds	r0, r4, r0
			prvAddCurrentTaskToDelayedList( xTimeToWake );
     f9c:	4b05      	ldr	r3, [pc, #20]	; (fb4 <vTaskPlaceOnEventList+0x3c>)
     f9e:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */
}
     fa0:	bd38      	pop	{r3, r4, r5, pc}
     fa2:	46c0      	nop			; (mov r8, r8)
     fa4:	2000023c 	.word	0x2000023c
     fa8:	00000931 	.word	0x00000931
     fac:	00000969 	.word	0x00000969
     fb0:	20000254 	.word	0x20000254
     fb4:	00000991 	.word	0x00000991

00000fb8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
     fb8:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
     fba:	68c3      	ldr	r3, [r0, #12]
     fbc:	68dd      	ldr	r5, [r3, #12]
	configASSERT( pxUnblockedTCB );
     fbe:	2d00      	cmp	r5, #0
     fc0:	d101      	bne.n	fc6 <xTaskRemoveFromEventList+0xe>
     fc2:	b672      	cpsid	i
     fc4:	e7fe      	b.n	fc4 <xTaskRemoveFromEventList+0xc>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
     fc6:	1c2c      	adds	r4, r5, #0
     fc8:	3418      	adds	r4, #24
     fca:	1c20      	adds	r0, r4, #0
     fcc:	4b12      	ldr	r3, [pc, #72]	; (1018 <xTaskRemoveFromEventList+0x60>)
     fce:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
     fd0:	4b12      	ldr	r3, [pc, #72]	; (101c <xTaskRemoveFromEventList+0x64>)
     fd2:	681b      	ldr	r3, [r3, #0]
     fd4:	2b00      	cmp	r3, #0
     fd6:	d113      	bne.n	1000 <xTaskRemoveFromEventList+0x48>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
     fd8:	1d2c      	adds	r4, r5, #4
     fda:	1c20      	adds	r0, r4, #0
     fdc:	4b0e      	ldr	r3, [pc, #56]	; (1018 <xTaskRemoveFromEventList+0x60>)
     fde:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
     fe0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
     fe2:	4a0f      	ldr	r2, [pc, #60]	; (1020 <xTaskRemoveFromEventList+0x68>)
     fe4:	6812      	ldr	r2, [r2, #0]
     fe6:	4293      	cmp	r3, r2
     fe8:	d901      	bls.n	fee <xTaskRemoveFromEventList+0x36>
     fea:	4a0d      	ldr	r2, [pc, #52]	; (1020 <xTaskRemoveFromEventList+0x68>)
     fec:	6013      	str	r3, [r2, #0]
     fee:	0098      	lsls	r0, r3, #2
     ff0:	18c3      	adds	r3, r0, r3
     ff2:	009b      	lsls	r3, r3, #2
     ff4:	480b      	ldr	r0, [pc, #44]	; (1024 <xTaskRemoveFromEventList+0x6c>)
     ff6:	18c0      	adds	r0, r0, r3
     ff8:	1c21      	adds	r1, r4, #0
     ffa:	4b0b      	ldr	r3, [pc, #44]	; (1028 <xTaskRemoveFromEventList+0x70>)
     ffc:	4798      	blx	r3
     ffe:	e003      	b.n	1008 <xTaskRemoveFromEventList+0x50>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    1000:	480a      	ldr	r0, [pc, #40]	; (102c <xTaskRemoveFromEventList+0x74>)
    1002:	1c21      	adds	r1, r4, #0
    1004:	4b08      	ldr	r3, [pc, #32]	; (1028 <xTaskRemoveFromEventList+0x70>)
    1006:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1008:	4b09      	ldr	r3, [pc, #36]	; (1030 <xTaskRemoveFromEventList+0x78>)
    100a:	681b      	ldr	r3, [r3, #0]
    100c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    100e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1010:	2000      	movs	r0, #0
    1012:	429a      	cmp	r2, r3
    1014:	4140      	adcs	r0, r0
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
    1016:	bd38      	pop	{r3, r4, r5, pc}
    1018:	00000969 	.word	0x00000969
    101c:	20000238 	.word	0x20000238
    1020:	2000025c 	.word	0x2000025c
    1024:	200001c0 	.word	0x200001c0
    1028:	00000915 	.word	0x00000915
    102c:	20000240 	.word	0x20000240
    1030:	2000023c 	.word	0x2000023c

00001034 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
	configASSERT( pxTimeOut );
    1034:	2800      	cmp	r0, #0
    1036:	d101      	bne.n	103c <vTaskSetTimeOutState+0x8>
    1038:	b672      	cpsid	i
    103a:	e7fe      	b.n	103a <vTaskSetTimeOutState+0x6>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    103c:	4b03      	ldr	r3, [pc, #12]	; (104c <vTaskSetTimeOutState+0x18>)
    103e:	681b      	ldr	r3, [r3, #0]
    1040:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    1042:	4b03      	ldr	r3, [pc, #12]	; (1050 <vTaskSetTimeOutState+0x1c>)
    1044:	681b      	ldr	r3, [r3, #0]
    1046:	6043      	str	r3, [r0, #4]
}
    1048:	4770      	bx	lr
    104a:	46c0      	nop			; (mov r8, r8)
    104c:	200001a8 	.word	0x200001a8
    1050:	20000254 	.word	0x20000254

00001054 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    1054:	b570      	push	{r4, r5, r6, lr}
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
    1056:	2800      	cmp	r0, #0
    1058:	d101      	bne.n	105e <xTaskCheckForTimeOut+0xa>
    105a:	b672      	cpsid	i
    105c:	e7fe      	b.n	105c <xTaskCheckForTimeOut+0x8>
	configASSERT( pxTicksToWait );
    105e:	2900      	cmp	r1, #0
    1060:	d101      	bne.n	1066 <xTaskCheckForTimeOut+0x12>
    1062:	b672      	cpsid	i
    1064:	e7fe      	b.n	1064 <xTaskCheckForTimeOut+0x10>
    1066:	1c0d      	adds	r5, r1, #0
    1068:	1c04      	adds	r4, r0, #0

	taskENTER_CRITICAL();
    106a:	4b11      	ldr	r3, [pc, #68]	; (10b0 <xTaskCheckForTimeOut+0x5c>)
    106c:	4798      	blx	r3
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    106e:	4b11      	ldr	r3, [pc, #68]	; (10b4 <xTaskCheckForTimeOut+0x60>)
    1070:	681b      	ldr	r3, [r3, #0]
    1072:	6822      	ldr	r2, [r4, #0]
    1074:	429a      	cmp	r2, r3
    1076:	d005      	beq.n	1084 <xTaskCheckForTimeOut+0x30>
    1078:	4b0f      	ldr	r3, [pc, #60]	; (10b8 <xTaskCheckForTimeOut+0x64>)
    107a:	681b      	ldr	r3, [r3, #0]
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    107c:	2601      	movs	r6, #1
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    107e:	6862      	ldr	r2, [r4, #4]
    1080:	429a      	cmp	r2, r3
    1082:	d910      	bls.n	10a6 <xTaskCheckForTimeOut+0x52>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    1084:	4b0c      	ldr	r3, [pc, #48]	; (10b8 <xTaskCheckForTimeOut+0x64>)
    1086:	6819      	ldr	r1, [r3, #0]
    1088:	6860      	ldr	r0, [r4, #4]
    108a:	682b      	ldr	r3, [r5, #0]
    108c:	1a09      	subs	r1, r1, r0
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
    108e:	2601      	movs	r6, #1
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    1090:	4299      	cmp	r1, r3
    1092:	d208      	bcs.n	10a6 <xTaskCheckForTimeOut+0x52>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    1094:	4a08      	ldr	r2, [pc, #32]	; (10b8 <xTaskCheckForTimeOut+0x64>)
    1096:	6812      	ldr	r2, [r2, #0]
    1098:	1a12      	subs	r2, r2, r0
    109a:	1a9b      	subs	r3, r3, r2
    109c:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
    109e:	1c20      	adds	r0, r4, #0
    10a0:	4b06      	ldr	r3, [pc, #24]	; (10bc <xTaskCheckForTimeOut+0x68>)
    10a2:	4798      	blx	r3
			xReturn = pdFALSE;
    10a4:	2600      	movs	r6, #0
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
    10a6:	4b06      	ldr	r3, [pc, #24]	; (10c0 <xTaskCheckForTimeOut+0x6c>)
    10a8:	4798      	blx	r3

	return xReturn;
}
    10aa:	1c30      	adds	r0, r6, #0
    10ac:	bd70      	pop	{r4, r5, r6, pc}
    10ae:	46c0      	nop			; (mov r8, r8)
    10b0:	00001221 	.word	0x00001221
    10b4:	200001a8 	.word	0x200001a8
    10b8:	20000254 	.word	0x20000254
    10bc:	00001035 	.word	0x00001035
    10c0:	00001239 	.word	0x00001239

000010c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
    10c4:	2201      	movs	r2, #1
    10c6:	4b01      	ldr	r3, [pc, #4]	; (10cc <vTaskMissedYield+0x8>)
    10c8:	601a      	str	r2, [r3, #0]
}
    10ca:	4770      	bx	lr
    10cc:	20000278 	.word	0x20000278

000010d0 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    10d0:	4b01      	ldr	r3, [pc, #4]	; (10d8 <xTaskGetCurrentTaskHandle+0x8>)
    10d2:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
    10d4:	4770      	bx	lr
    10d6:	46c0      	nop			; (mov r8, r8)
    10d8:	2000023c 	.word	0x2000023c

000010dc <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    10dc:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
    10de:	2800      	cmp	r0, #0
    10e0:	d02f      	beq.n	1142 <vTaskPriorityInherit+0x66>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    10e2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    10e4:	4a17      	ldr	r2, [pc, #92]	; (1144 <vTaskPriorityInherit+0x68>)
    10e6:	6812      	ldr	r2, [r2, #0]
    10e8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    10ea:	4293      	cmp	r3, r2
    10ec:	d229      	bcs.n	1142 <vTaskPriorityInherit+0x66>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    10ee:	4a15      	ldr	r2, [pc, #84]	; (1144 <vTaskPriorityInherit+0x68>)
    10f0:	6812      	ldr	r2, [r2, #0]
    10f2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    10f4:	2206      	movs	r2, #6
    10f6:	1a52      	subs	r2, r2, r1
    10f8:	6182      	str	r2, [r0, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    10fa:	009a      	lsls	r2, r3, #2
    10fc:	18d3      	adds	r3, r2, r3
    10fe:	009b      	lsls	r3, r3, #2
    1100:	4a11      	ldr	r2, [pc, #68]	; (1148 <vTaskPriorityInherit+0x6c>)
    1102:	18d3      	adds	r3, r2, r3
    1104:	6942      	ldr	r2, [r0, #20]
    1106:	429a      	cmp	r2, r3
    1108:	d117      	bne.n	113a <vTaskPriorityInherit+0x5e>
    110a:	1c05      	adds	r5, r0, #0
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
    110c:	1d04      	adds	r4, r0, #4
    110e:	1c20      	adds	r0, r4, #0
    1110:	4b0e      	ldr	r3, [pc, #56]	; (114c <vTaskPriorityInherit+0x70>)
    1112:	4798      	blx	r3
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    1114:	4b0b      	ldr	r3, [pc, #44]	; (1144 <vTaskPriorityInherit+0x68>)
    1116:	681b      	ldr	r3, [r3, #0]
    1118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    111a:	62eb      	str	r3, [r5, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
    111c:	4a0c      	ldr	r2, [pc, #48]	; (1150 <vTaskPriorityInherit+0x74>)
    111e:	6812      	ldr	r2, [r2, #0]
    1120:	4293      	cmp	r3, r2
    1122:	d901      	bls.n	1128 <vTaskPriorityInherit+0x4c>
    1124:	4a0a      	ldr	r2, [pc, #40]	; (1150 <vTaskPriorityInherit+0x74>)
    1126:	6013      	str	r3, [r2, #0]
    1128:	0098      	lsls	r0, r3, #2
    112a:	18c0      	adds	r0, r0, r3
    112c:	0083      	lsls	r3, r0, #2
    112e:	4806      	ldr	r0, [pc, #24]	; (1148 <vTaskPriorityInherit+0x6c>)
    1130:	18c0      	adds	r0, r0, r3
    1132:	1c21      	adds	r1, r4, #0
    1134:	4b07      	ldr	r3, [pc, #28]	; (1154 <vTaskPriorityInherit+0x78>)
    1136:	4798      	blx	r3
    1138:	e003      	b.n	1142 <vTaskPriorityInherit+0x66>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    113a:	4b02      	ldr	r3, [pc, #8]	; (1144 <vTaskPriorityInherit+0x68>)
    113c:	681b      	ldr	r3, [r3, #0]
    113e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1140:	62c3      	str	r3, [r0, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
			}
		}
	}
    1142:	bd38      	pop	{r3, r4, r5, pc}
    1144:	2000023c 	.word	0x2000023c
    1148:	200001c0 	.word	0x200001c0
    114c:	00000969 	.word	0x00000969
    1150:	2000025c 	.word	0x2000025c
    1154:	00000915 	.word	0x00000915

00001158 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    1158:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
    115a:	2800      	cmp	r0, #0
    115c:	d01b      	beq.n	1196 <vTaskPriorityDisinherit+0x3e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    115e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    1160:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    1162:	4293      	cmp	r3, r2
    1164:	d017      	beq.n	1196 <vTaskPriorityDisinherit+0x3e>
    1166:	1c04      	adds	r4, r0, #0
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
    1168:	1d05      	adds	r5, r0, #4
    116a:	1c28      	adds	r0, r5, #0
    116c:	4b0a      	ldr	r3, [pc, #40]	; (1198 <vTaskPriorityDisinherit+0x40>)
    116e:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    1170:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1172:	62e3      	str	r3, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    1174:	2206      	movs	r2, #6
    1176:	1ad2      	subs	r2, r2, r3
    1178:	61a2      	str	r2, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
    117a:	4a08      	ldr	r2, [pc, #32]	; (119c <vTaskPriorityDisinherit+0x44>)
    117c:	6812      	ldr	r2, [r2, #0]
    117e:	4293      	cmp	r3, r2
    1180:	d901      	bls.n	1186 <vTaskPriorityDisinherit+0x2e>
    1182:	4a06      	ldr	r2, [pc, #24]	; (119c <vTaskPriorityDisinherit+0x44>)
    1184:	6013      	str	r3, [r2, #0]
    1186:	0098      	lsls	r0, r3, #2
    1188:	18c0      	adds	r0, r0, r3
    118a:	0083      	lsls	r3, r0, #2
    118c:	4804      	ldr	r0, [pc, #16]	; (11a0 <vTaskPriorityDisinherit+0x48>)
    118e:	18c0      	adds	r0, r0, r3
    1190:	1c29      	adds	r1, r5, #0
    1192:	4b04      	ldr	r3, [pc, #16]	; (11a4 <vTaskPriorityDisinherit+0x4c>)
    1194:	4798      	blx	r3
			}
		}
	}
    1196:	bd38      	pop	{r3, r4, r5, pc}
    1198:	00000969 	.word	0x00000969
    119c:	2000025c 	.word	0x2000025c
    11a0:	200001c0 	.word	0x200001c0
    11a4:	00000915 	.word	0x00000915

000011a8 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
    11a8:	4a06      	ldr	r2, [pc, #24]	; (11c4 <pxCurrentTCBConst3>)
    11aa:	6813      	ldr	r3, [r2, #0]
    11ac:	6818      	ldr	r0, [r3, #0]
    11ae:	3020      	adds	r0, #32
    11b0:	f380 8809 	msr	PSP, r0
    11b4:	2002      	movs	r0, #2
    11b6:	f380 8814 	msr	CONTROL, r0
    11ba:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    11bc:	46ae      	mov	lr, r5
    11be:	b662      	cpsie	i
    11c0:	bd00      	pop	{pc}
    11c2:	46c0      	nop			; (mov r8, r8)

000011c4 <pxCurrentTCBConst3>:
    11c4:	2000023c 	.word	0x2000023c

000011c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    11c8:	b510      	push	{r4, lr}
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    11ca:	1f03      	subs	r3, r0, #4
    11cc:	2480      	movs	r4, #128	; 0x80
    11ce:	0464      	lsls	r4, r4, #17
    11d0:	601c      	str	r4, [r3, #0]
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
    11d2:	3b04      	subs	r3, #4
    11d4:	6019      	str	r1, [r3, #0]
	pxTopOfStack -= 6;	/* LR, R12, R3..R1 */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
    11d6:	3b18      	subs	r3, #24
    11d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
    11da:	3840      	subs	r0, #64	; 0x40

	return pxTopOfStack;
}
    11dc:	bd10      	pop	{r4, pc}
    11de:	46c0      	nop			; (mov r8, r8)

000011e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    11e0:	4b08      	ldr	r3, [pc, #32]	; (1204 <pxCurrentTCBConst2>)
    11e2:	6819      	ldr	r1, [r3, #0]
    11e4:	6808      	ldr	r0, [r1, #0]
    11e6:	3010      	adds	r0, #16
    11e8:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    11ea:	46a0      	mov	r8, r4
    11ec:	46a9      	mov	r9, r5
    11ee:	46b2      	mov	sl, r6
    11f0:	46bb      	mov	fp, r7
    11f2:	f380 8809 	msr	PSP, r0
    11f6:	3820      	subs	r0, #32
    11f8:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    11fa:	4671      	mov	r1, lr
    11fc:	200d      	movs	r0, #13
    11fe:	4301      	orrs	r1, r0
    1200:	4708      	bx	r1
    1202:	46c0      	nop			; (mov r8, r8)

00001204 <pxCurrentTCBConst2>:
    1204:	2000023c 	.word	0x2000023c

00001208 <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void )
{
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
    1208:	2280      	movs	r2, #128	; 0x80
    120a:	0552      	lsls	r2, r2, #21
    120c:	4b03      	ldr	r3, [pc, #12]	; (121c <vPortYield+0x14>)
    120e:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
    1210:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    1214:	f3bf 8f6f 	isb	sy
}
    1218:	4770      	bx	lr
    121a:	46c0      	nop			; (mov r8, r8)
    121c:	e000ed04 	.word	0xe000ed04

00001220 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    portDISABLE_INTERRUPTS();
    1220:	b672      	cpsid	i
    uxCriticalNesting++;
    1222:	4a04      	ldr	r2, [pc, #16]	; (1234 <vPortEnterCritical+0x14>)
    1224:	6813      	ldr	r3, [r2, #0]
    1226:	3301      	adds	r3, #1
    1228:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
    122a:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    122e:	f3bf 8f6f 	isb	sy
}
    1232:	4770      	bx	lr
    1234:	200000b8 	.word	0x200000b8

00001238 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    uxCriticalNesting--;
    1238:	4a03      	ldr	r2, [pc, #12]	; (1248 <vPortExitCritical+0x10>)
    123a:	6813      	ldr	r3, [r2, #0]
    123c:	3b01      	subs	r3, #1
    123e:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
    1240:	2b00      	cmp	r3, #0
    1242:	d100      	bne.n	1246 <vPortExitCritical+0xe>
    {
        portENABLE_INTERRUPTS();
    1244:	b662      	cpsie	i
    }
}
    1246:	4770      	bx	lr
    1248:	200000b8 	.word	0x200000b8

0000124c <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    124c:	f3ef 8009 	mrs	r0, PSP
    1250:	4b0e      	ldr	r3, [pc, #56]	; (128c <pxCurrentTCBConst>)
    1252:	681a      	ldr	r2, [r3, #0]
    1254:	3820      	subs	r0, #32
    1256:	6010      	str	r0, [r2, #0]
    1258:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    125a:	4644      	mov	r4, r8
    125c:	464d      	mov	r5, r9
    125e:	4656      	mov	r6, sl
    1260:	465f      	mov	r7, fp
    1262:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    1264:	b508      	push	{r3, lr}
    1266:	b672      	cpsid	i
    1268:	f7ff fe32 	bl	ed0 <vTaskSwitchContext>
    126c:	b662      	cpsie	i
    126e:	bc0c      	pop	{r2, r3}
    1270:	6811      	ldr	r1, [r2, #0]
    1272:	6808      	ldr	r0, [r1, #0]
    1274:	3010      	adds	r0, #16
    1276:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    1278:	46a0      	mov	r8, r4
    127a:	46a9      	mov	r9, r5
    127c:	46b2      	mov	sl, r6
    127e:	46bb      	mov	fp, r7
    1280:	f380 8809 	msr	PSP, r0
    1284:	3820      	subs	r0, #32
    1286:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    1288:	4718      	bx	r3
    128a:	46c0      	nop			; (mov r8, r8)

0000128c <pxCurrentTCBConst>:
    128c:	2000023c 	.word	0x2000023c

00001290 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    1290:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
    1292:	b672      	cpsid	i
	{
		vTaskIncrementTick();
    1294:	4b01      	ldr	r3, [pc, #4]	; (129c <SysTick_Handler+0xc>)
    1296:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
    1298:	b662      	cpsie	i
}
    129a:	bd08      	pop	{r3, pc}
    129c:	00000c71 	.word	0x00000c71

000012a0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
    12a0:	b508      	push	{r3, lr}
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_VAL)  = 0; /* Load the SysTick Counter Value */
    12a2:	2200      	movs	r2, #0
    12a4:	4b07      	ldr	r3, [pc, #28]	; (12c4 <vPortSetupTimerInterrupt+0x24>)
    12a6:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    12a8:	2000      	movs	r0, #0
    12aa:	4b07      	ldr	r3, [pc, #28]	; (12c8 <vPortSetupTimerInterrupt+0x28>)
    12ac:	4798      	blx	r3
    12ae:	21fa      	movs	r1, #250	; 0xfa
    12b0:	0089      	lsls	r1, r1, #2
    12b2:	4b06      	ldr	r3, [pc, #24]	; (12cc <vPortSetupTimerInterrupt+0x2c>)
    12b4:	4798      	blx	r3
    12b6:	3801      	subs	r0, #1
    12b8:	4b05      	ldr	r3, [pc, #20]	; (12d0 <vPortSetupTimerInterrupt+0x30>)
    12ba:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    12bc:	2207      	movs	r2, #7
    12be:	4b05      	ldr	r3, [pc, #20]	; (12d4 <vPortSetupTimerInterrupt+0x34>)
    12c0:	601a      	str	r2, [r3, #0]
}
    12c2:	bd08      	pop	{r3, pc}
    12c4:	e000e018 	.word	0xe000e018
    12c8:	0000439d 	.word	0x0000439d
    12cc:	0000666d 	.word	0x0000666d
    12d0:	e000e014 	.word	0xe000e014
    12d4:	e000e010 	.word	0xe000e010

000012d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
    12d8:	b508      	push	{r3, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    12da:	4b0a      	ldr	r3, [pc, #40]	; (1304 <xPortStartScheduler+0x2c>)
    12dc:	681a      	ldr	r2, [r3, #0]
    12de:	21ff      	movs	r1, #255	; 0xff
    12e0:	0409      	lsls	r1, r1, #16
    12e2:	430a      	orrs	r2, r1
    12e4:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    12e6:	681a      	ldr	r2, [r3, #0]
    12e8:	21ff      	movs	r1, #255	; 0xff
    12ea:	0609      	lsls	r1, r1, #24
    12ec:	430a      	orrs	r2, r1
    12ee:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
    12f0:	4b05      	ldr	r3, [pc, #20]	; (1308 <xPortStartScheduler+0x30>)
    12f2:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    12f4:	2200      	movs	r2, #0
    12f6:	4b05      	ldr	r3, [pc, #20]	; (130c <xPortStartScheduler+0x34>)
    12f8:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
    12fa:	4b05      	ldr	r3, [pc, #20]	; (1310 <xPortStartScheduler+0x38>)
    12fc:	4798      	blx	r3

	/* Should not get here! */
	return 0;
}
    12fe:	2000      	movs	r0, #0
    1300:	bd08      	pop	{r3, pc}
    1302:	46c0      	nop			; (mov r8, r8)
    1304:	e000ed20 	.word	0xe000ed20
    1308:	000012a1 	.word	0x000012a1
    130c:	200000b8 	.word	0x200000b8
    1310:	000011a9 	.word	0x000011a9

00001314 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    1314:	b538      	push	{r3, r4, r5, lr}
    1316:	1c04      	adds	r4, r0, #0
void *pvReturn = NULL;
static unsigned char *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    1318:	0743      	lsls	r3, r0, #29
    131a:	d002      	beq.n	1322 <pvPortMalloc+0xe>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    131c:	2307      	movs	r3, #7
    131e:	439c      	bics	r4, r3
    1320:	3408      	adds	r4, #8
		}
	#endif

	vTaskSuspendAll();
    1322:	4b10      	ldr	r3, [pc, #64]	; (1364 <pvPortMalloc+0x50>)
    1324:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
    1326:	4b10      	ldr	r3, [pc, #64]	; (1368 <pvPortMalloc+0x54>)
    1328:	681b      	ldr	r3, [r3, #0]
    132a:	2b00      	cmp	r3, #0
    132c:	d105      	bne.n	133a <pvPortMalloc+0x26>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( unsigned char * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
    132e:	2207      	movs	r2, #7
    1330:	4b0e      	ldr	r3, [pc, #56]	; (136c <pvPortMalloc+0x58>)
    1332:	3308      	adds	r3, #8
    1334:	4393      	bics	r3, r2
    1336:	4a0c      	ldr	r2, [pc, #48]	; (1368 <pvPortMalloc+0x54>)
    1338:	6013      	str	r3, [r2, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    133a:	4b0d      	ldr	r3, [pc, #52]	; (1370 <pvPortMalloc+0x5c>)
    133c:	681b      	ldr	r3, [r3, #0]
    133e:	18e4      	adds	r4, r4, r3
    1340:	4a0c      	ldr	r2, [pc, #48]	; (1374 <pvPortMalloc+0x60>)
    1342:	4294      	cmp	r4, r2
    1344:	d807      	bhi.n	1356 <pvPortMalloc+0x42>
    1346:	42a3      	cmp	r3, r4
    1348:	d207      	bcs.n	135a <pvPortMalloc+0x46>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    134a:	4a07      	ldr	r2, [pc, #28]	; (1368 <pvPortMalloc+0x54>)
    134c:	6815      	ldr	r5, [r2, #0]
    134e:	18ed      	adds	r5, r5, r3
			xNextFreeByte += xWantedSize;
    1350:	4b07      	ldr	r3, [pc, #28]	; (1370 <pvPortMalloc+0x5c>)
    1352:	601c      	str	r4, [r3, #0]
    1354:	e002      	b.n	135c <pvPortMalloc+0x48>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
    1356:	2500      	movs	r5, #0
    1358:	e000      	b.n	135c <pvPortMalloc+0x48>
    135a:	2500      	movs	r5, #0
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
			xNextFreeByte += xWantedSize;
		}
	}
	xTaskResumeAll();
    135c:	4b06      	ldr	r3, [pc, #24]	; (1378 <pvPortMalloc+0x64>)
    135e:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
    1360:	1c28      	adds	r0, r5, #0
    1362:	bd38      	pop	{r3, r4, r5, pc}
    1364:	00000c41 	.word	0x00000c41
    1368:	20003d20 	.word	0x20003d20
    136c:	20000288 	.word	0x20000288
    1370:	20000284 	.word	0x20000284
    1374:	00003a8f 	.word	0x00003a8f
    1378:	00000d8d 	.word	0x00000d8d

0000137c <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
    137c:	2800      	cmp	r0, #0
    137e:	d001      	beq.n	1384 <vPortFree+0x8>
    1380:	b672      	cpsid	i
    1382:	e7fe      	b.n	1382 <vPortFree+0x6>
}
    1384:	4770      	bx	lr
    1386:	46c0      	nop			; (mov r8, r8)

00001388 <_Z3sup11structClockS_>:



Clock timeManage={0,0,true};

bool sup(Clock clock1,Clock clock2){
    1388:	b082      	sub	sp, #8
    138a:	b084      	sub	sp, #16
    138c:	9001      	str	r0, [sp, #4]
    138e:	9102      	str	r1, [sp, #8]
    1390:	9203      	str	r2, [sp, #12]
    1392:	9305      	str	r3, [sp, #20]
		if(clock1.second>clock2.second){//clock1>clock2
    1394:	9a01      	ldr	r2, [sp, #4]
    1396:	9b05      	ldr	r3, [sp, #20]
			return true;
    1398:	2001      	movs	r0, #1


Clock timeManage={0,0,true};

bool sup(Clock clock1,Clock clock2){
		if(clock1.second>clock2.second){//clock1>clock2
    139a:	429a      	cmp	r2, r3
    139c:	d809      	bhi.n	13b2 <_Z3sup11structClockS_+0x2a>
			return true;
		}
		else{
			if(clock1.second<clock2.second){
    139e:	9a01      	ldr	r2, [sp, #4]
    13a0:	9b05      	ldr	r3, [sp, #20]
				return false;
    13a2:	2000      	movs	r0, #0
bool sup(Clock clock1,Clock clock2){
		if(clock1.second>clock2.second){//clock1>clock2
			return true;
		}
		else{
			if(clock1.second<clock2.second){
    13a4:	429a      	cmp	r2, r3
    13a6:	d304      	bcc.n	13b2 <_Z3sup11structClockS_+0x2a>
				return false;
			}
			else{//egual
				if(clock1.halfmillis>clock2.halfmillis){
    13a8:	9802      	ldr	r0, [sp, #8]
    13aa:	9b06      	ldr	r3, [sp, #24]
    13ac:	4283      	cmp	r3, r0
    13ae:	4180      	sbcs	r0, r0
    13b0:	4240      	negs	r0, r0
					return false;
				}
			}
		}

}
    13b2:	b004      	add	sp, #16
    13b4:	b002      	add	sp, #8
    13b6:	4770      	bx	lr

000013b8 <_Z11subClockPos11structClockS_>:
	}

	
	return ret;
}
Clock subClockPos(Clock clock1,Clock clock2 ){
    13b8:	b084      	sub	sp, #16
    13ba:	9101      	str	r1, [sp, #4]
    13bc:	9202      	str	r2, [sp, #8]
    13be:	9303      	str	r3, [sp, #12]
	Clock ret={0,0,true};
    13c0:	2300      	movs	r3, #0
    13c2:	6003      	str	r3, [r0, #0]
    13c4:	6043      	str	r3, [r0, #4]
    13c6:	3301      	adds	r3, #1
    13c8:	7203      	strb	r3, [r0, #8]
	//clock1.second+=clock1.halfmillis/RTC_FREQ;
	//clock1.halfmillis=clock1.halfmillis%RTC_FREQ;	
		
	//clock2.second+=clock2.halfmillis/RTC_FREQ;
	//clock2.halfmillis=clock2.halfmillis%RTC_FREQ;
	long int halfmillis=clock2.halfmillis;
    13ca:	9905      	ldr	r1, [sp, #20]
	ret.second=clock1.second-clock2.second;
    13cc:	9a01      	ldr	r2, [sp, #4]
    13ce:	9b04      	ldr	r3, [sp, #16]
    13d0:	1ad2      	subs	r2, r2, r3
    13d2:	6002      	str	r2, [r0, #0]
	halfmillis=(long int)clock1.halfmillis-halfmillis;
    13d4:	9b02      	ldr	r3, [sp, #8]
    13d6:	1a5b      	subs	r3, r3, r1
	
	
	
	if(halfmillis<0){
    13d8:	d50b      	bpl.n	13f2 <_Z11subClockPos11structClockS_+0x3a>
		
		if(ret.second!=0){
    13da:	6802      	ldr	r2, [r0, #0]
    13dc:	2a00      	cmp	r2, #0
    13de:	d009      	beq.n	13f4 <_Z11subClockPos11structClockS_+0x3c>
				pc.printf("c1:%ld,%ld",clock1.second,clock1.halfmillis);
				pc.printf("c2:%ld,%ld",clock2.second,clock2.halfmillis);*/
				//sendHMI("error clock");
			}
			
			ret.second--;
    13e0:	6802      	ldr	r2, [r0, #0]
    13e2:	3a01      	subs	r2, #1
    13e4:	6002      	str	r2, [r0, #0]
			ret.halfmillis=(unsigned int)(halfmillis+RTC_FREQ);
    13e6:	22fa      	movs	r2, #250	; 0xfa
    13e8:	01d2      	lsls	r2, r2, #7
    13ea:	4694      	mov	ip, r2
    13ec:	4463      	add	r3, ip
    13ee:	6043      	str	r3, [r0, #4]
    13f0:	e000      	b.n	13f4 <_Z11subClockPos11structClockS_+0x3c>
		}
	}
	else{
		ret.halfmillis=halfmillis;
    13f2:	6043      	str	r3, [r0, #4]
	}
			
	return ret;
    13f4:	b004      	add	sp, #16
    13f6:	4770      	bx	lr

000013f8 <_Z8subClock11structClockS_>:
	if(clk.sign==false){
		clk.sign=true;
	}
	return clk;
}
Clock subClock(Clock clock1,Clock clock2 ){
    13f8:	b570      	push	{r4, r5, r6, lr}
    13fa:	b08e      	sub	sp, #56	; 0x38
    13fc:	1c04      	adds	r4, r0, #0
    13fe:	a805      	add	r0, sp, #20
    1400:	9105      	str	r1, [sp, #20]
    1402:	9206      	str	r2, [sp, #24]
    1404:	9307      	str	r3, [sp, #28]
	Clock ret={0,0,true};
    1406:	2300      	movs	r3, #0
    1408:	6023      	str	r3, [r4, #0]
    140a:	6063      	str	r3, [r4, #4]
    140c:	3301      	adds	r3, #1
    140e:	7223      	strb	r3, [r4, #8]
	if(clock1.sign!=clock2.sign){
    1410:	7a03      	ldrb	r3, [r0, #8]
    1412:	aa12      	add	r2, sp, #72	; 0x48
    1414:	7a12      	ldrb	r2, [r2, #8]
    1416:	b2db      	uxtb	r3, r3
    1418:	4293      	cmp	r3, r2
    141a:	d020      	beq.n	145e <_Z8subClock11structClockS_+0x66>
		if(clock1.sign==true){// + - -
    141c:	7a03      	ldrb	r3, [r0, #8]
    141e:	2b00      	cmp	r3, #0
    1420:	d00d      	beq.n	143e <_Z8subClock11structClockS_+0x46>
			clock2.sign=true;
    1422:	2201      	movs	r2, #1
    1424:	ab12      	add	r3, sp, #72	; 0x48
    1426:	721a      	strb	r2, [r3, #8]
			ret=sumClock(clock1,clock2);
    1428:	466b      	mov	r3, sp
    142a:	aa12      	add	r2, sp, #72	; 0x48
    142c:	ca23      	ldmia	r2!, {r0, r1, r5}
    142e:	c323      	stmia	r3!, {r0, r1, r5}
    1430:	1c20      	adds	r0, r4, #0
    1432:	9905      	ldr	r1, [sp, #20]
    1434:	9a06      	ldr	r2, [sp, #24]
    1436:	9b07      	ldr	r3, [sp, #28]
    1438:	4d2e      	ldr	r5, [pc, #184]	; (14f4 <_Z8subClock11structClockS_+0xfc>)
    143a:	47a8      	blx	r5
    143c:	e056      	b.n	14ec <_Z8subClock11structClockS_+0xf4>
		}
		else{// - - +
			clock1.sign=true;
    143e:	ab05      	add	r3, sp, #20
    1440:	2201      	movs	r2, #1
    1442:	721a      	strb	r2, [r3, #8]
			ret=sumClock(clock1,clock2);
    1444:	466a      	mov	r2, sp
    1446:	a912      	add	r1, sp, #72	; 0x48
    1448:	c961      	ldmia	r1!, {r0, r5, r6}
    144a:	c261      	stmia	r2!, {r0, r5, r6}
    144c:	1c20      	adds	r0, r4, #0
    144e:	9905      	ldr	r1, [sp, #20]
    1450:	9a06      	ldr	r2, [sp, #24]
    1452:	9b07      	ldr	r3, [sp, #28]
    1454:	4d27      	ldr	r5, [pc, #156]	; (14f4 <_Z8subClock11structClockS_+0xfc>)
    1456:	47a8      	blx	r5
			ret.sign=false;
    1458:	2300      	movs	r3, #0
    145a:	7223      	strb	r3, [r4, #8]
    145c:	e046      	b.n	14ec <_Z8subClock11structClockS_+0xf4>
		}
	}
	else{
		if(clock1.sign==true){ //+ - +
    145e:	ab05      	add	r3, sp, #20
    1460:	7a1b      	ldrb	r3, [r3, #8]
    1462:	2b00      	cmp	r3, #0
    1464:	d02b      	beq.n	14be <_Z8subClock11structClockS_+0xc6>
    1466:	aa08      	add	r2, sp, #32
    1468:	ab05      	add	r3, sp, #20
    146a:	cb23      	ldmia	r3!, {r0, r1, r5}
    146c:	c223      	stmia	r2!, {r0, r1, r5}
    146e:	ab0b      	add	r3, sp, #44	; 0x2c
    1470:	aa12      	add	r2, sp, #72	; 0x48
    1472:	ca23      	ldmia	r2!, {r0, r1, r5}
    1474:	c323      	stmia	r3!, {r0, r1, r5}


Clock timeManage={0,0,true};

bool sup(Clock clock1,Clock clock2){
		if(clock1.second>clock2.second){//clock1>clock2
    1476:	9a08      	ldr	r2, [sp, #32]
    1478:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    147a:	429a      	cmp	r2, r3
    147c:	d807      	bhi.n	148e <_Z8subClock11structClockS_+0x96>
			return true;
		}
		else{
			if(clock1.second<clock2.second){
    147e:	9a08      	ldr	r2, [sp, #32]
    1480:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1482:	429a      	cmp	r2, r3
    1484:	d30e      	bcc.n	14a4 <_Z8subClock11structClockS_+0xac>
				return false;
			}
			else{//egual
				if(clock1.halfmillis>clock2.halfmillis){
    1486:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1488:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			ret.sign=false;
		}
	}
	else{
		if(clock1.sign==true){ //+ - +
			if(sup(clock1,clock2)){//clock1>Clock2
    148a:	429a      	cmp	r2, r3
    148c:	d90a      	bls.n	14a4 <_Z8subClock11structClockS_+0xac>
				
				ret=subClockPos(clock1,clock2);
    148e:	466b      	mov	r3, sp
    1490:	aa12      	add	r2, sp, #72	; 0x48
    1492:	ca23      	ldmia	r2!, {r0, r1, r5}
    1494:	c323      	stmia	r3!, {r0, r1, r5}
    1496:	1c20      	adds	r0, r4, #0
    1498:	9905      	ldr	r1, [sp, #20]
    149a:	9a06      	ldr	r2, [sp, #24]
    149c:	9b07      	ldr	r3, [sp, #28]
    149e:	4d16      	ldr	r5, [pc, #88]	; (14f8 <_Z8subClock11structClockS_+0x100>)
    14a0:	47a8      	blx	r5
    14a2:	e023      	b.n	14ec <_Z8subClock11structClockS_+0xf4>
			}
			else{
				ret=subClockPos(clock2,clock1);
    14a4:	ab05      	add	r3, sp, #20
    14a6:	466a      	mov	r2, sp
    14a8:	cb23      	ldmia	r3!, {r0, r1, r5}
    14aa:	c223      	stmia	r2!, {r0, r1, r5}
    14ac:	1c20      	adds	r0, r4, #0
    14ae:	9912      	ldr	r1, [sp, #72]	; 0x48
    14b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    14b2:	9b14      	ldr	r3, [sp, #80]	; 0x50
    14b4:	4d10      	ldr	r5, [pc, #64]	; (14f8 <_Z8subClock11structClockS_+0x100>)
    14b6:	47a8      	blx	r5
				ret.sign=false;
    14b8:	2300      	movs	r3, #0
    14ba:	7223      	strb	r3, [r4, #8]
    14bc:	e016      	b.n	14ec <_Z8subClock11structClockS_+0xf4>
			}
		}
		else{// - - - 
			clock2.sign=true;
    14be:	2201      	movs	r2, #1
    14c0:	ab12      	add	r3, sp, #72	; 0x48
    14c2:	721a      	strb	r2, [r3, #8]
			clock1.sign=true;	
    14c4:	ab05      	add	r3, sp, #20
    14c6:	721a      	strb	r2, [r3, #8]
			ret=subClock(clock1,clock2);
    14c8:	466a      	mov	r2, sp
    14ca:	a912      	add	r1, sp, #72	; 0x48
    14cc:	c961      	ldmia	r1!, {r0, r5, r6}
    14ce:	c261      	stmia	r2!, {r0, r5, r6}
    14d0:	1c20      	adds	r0, r4, #0
    14d2:	9905      	ldr	r1, [sp, #20]
    14d4:	9a06      	ldr	r2, [sp, #24]
    14d6:	9b07      	ldr	r3, [sp, #28]
    14d8:	f7ff ff8e 	bl	13f8 <_Z8subClock11structClockS_>
			if(ret.sign==true){
    14dc:	7a23      	ldrb	r3, [r4, #8]
    14de:	2b00      	cmp	r3, #0
    14e0:	d002      	beq.n	14e8 <_Z8subClock11structClockS_+0xf0>
				ret.sign=false;
    14e2:	2300      	movs	r3, #0
    14e4:	7223      	strb	r3, [r4, #8]
    14e6:	e001      	b.n	14ec <_Z8subClock11structClockS_+0xf4>
			}
			else{
				ret.sign=true;
    14e8:	2301      	movs	r3, #1
    14ea:	7223      	strb	r3, [r4, #8]
		}
	}

	
	return ret;
}
    14ec:	1c20      	adds	r0, r4, #0
    14ee:	b00e      	add	sp, #56	; 0x38
    14f0:	bd70      	pop	{r4, r5, r6, pc}
    14f2:	46c0      	nop			; (mov r8, r8)
    14f4:	000014fd 	.word	0x000014fd
    14f8:	000013b9 	.word	0x000013b9

000014fc <_Z8sumClock11structClockS_>:
	ret.second=ret.second+(halfmillis/RTC_FREQ);
	ret.halfmillis=halfmillis%RTC_FREQ;
	return ret;
	
}
Clock sumClock(Clock clock1,Clock clock2 ){
    14fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    14fe:	4647      	mov	r7, r8
    1500:	b480      	push	{r7}
    1502:	b09a      	sub	sp, #104	; 0x68
    1504:	1c04      	adds	r4, r0, #0
    1506:	a805      	add	r0, sp, #20
    1508:	9105      	str	r1, [sp, #20]
    150a:	9206      	str	r2, [sp, #24]
    150c:	9307      	str	r3, [sp, #28]
	Clock ret={0,0,true};
    150e:	2300      	movs	r3, #0
    1510:	6023      	str	r3, [r4, #0]
    1512:	6063      	str	r3, [r4, #4]
    1514:	3301      	adds	r3, #1
    1516:	7223      	strb	r3, [r4, #8]
		
	if((clock1.sign==true)&&(clock2.sign==true)){// + + +
    1518:	7a03      	ldrb	r3, [r0, #8]
    151a:	2b00      	cmp	r3, #0
    151c:	d013      	beq.n	1546 <_Z8sumClock11structClockS_+0x4a>
    151e:	ab20      	add	r3, sp, #128	; 0x80
    1520:	7a1b      	ldrb	r3, [r3, #8]
    1522:	2b00      	cmp	r3, #0
    1524:	d114      	bne.n	1550 <_Z8sumClock11structClockS_+0x54>
    1526:	e00e      	b.n	1546 <_Z8sumClock11structClockS_+0x4a>
		ret=sumClockPos(clock1,clock2);
	}
	else{
		if((clock1.sign==true)&&(clock2.sign==false)){ // + + -
    1528:	ab20      	add	r3, sp, #128	; 0x80
    152a:	7a1b      	ldrb	r3, [r3, #8]
    152c:	2b00      	cmp	r3, #0
    152e:	d146      	bne.n	15be <_Z8sumClock11structClockS_+0xc2>
    1530:	e037      	b.n	15a2 <_Z8sumClock11structClockS_+0xa6>
			clock2.sign=true;
			ret=subClock(clock1,clock2);
		}
		else{
					if((clock1.sign==false)&&(clock2.sign==true)){ // - + + 
    1532:	ab20      	add	r3, sp, #128	; 0x80
    1534:	7a1b      	ldrb	r3, [r3, #8]
    1536:	2b00      	cmp	r3, #0
    1538:	d146      	bne.n	15c8 <_Z8sumClock11structClockS_+0xcc>
    153a:	e052      	b.n	15e2 <_Z8sumClock11structClockS_+0xe6>
						clock1.sign=true;
						ret=subClock(clock2,clock1);
					}
					else{
						if((clock1.sign==false)&&(clock2.sign==false)){ // - + -
    153c:	ab20      	add	r3, sp, #128	; 0x80
    153e:	7a1b      	ldrb	r3, [r3, #8]
    1540:	2b00      	cmp	r3, #0
    1542:	d053      	beq.n	15ec <_Z8sumClock11structClockS_+0xf0>
    1544:	e081      	b.n	164a <_Z8sumClock11structClockS_+0x14e>
		
	if((clock1.sign==true)&&(clock2.sign==true)){// + + +
		ret=sumClockPos(clock1,clock2);
	}
	else{
		if((clock1.sign==true)&&(clock2.sign==false)){ // + + -
    1546:	ab05      	add	r3, sp, #20
    1548:	7a1b      	ldrb	r3, [r3, #8]
    154a:	2b00      	cmp	r3, #0
    154c:	d1ec      	bne.n	1528 <_Z8sumClock11structClockS_+0x2c>
    154e:	e036      	b.n	15be <_Z8sumClock11structClockS_+0xc2>
    1550:	aa08      	add	r2, sp, #32
    1552:	ab05      	add	r3, sp, #20
    1554:	1c11      	adds	r1, r2, #0
    1556:	cb61      	ldmia	r3!, {r0, r5, r6}
    1558:	c161      	stmia	r1!, {r0, r5, r6}
    155a:	ab0b      	add	r3, sp, #44	; 0x2c
    155c:	1c19      	adds	r1, r3, #0
    155e:	a820      	add	r0, sp, #128	; 0x80
    1560:	c8e0      	ldmia	r0!, {r5, r6, r7}
    1562:	c1e0      	stmia	r1!, {r5, r6, r7}
			}
		}

}
Clock sumClockPos(Clock clock1,Clock clock2 ){
	Clock ret={0,0,true};
    1564:	ad14      	add	r5, sp, #80	; 0x50
    1566:	2100      	movs	r1, #0
    1568:	9114      	str	r1, [sp, #80]	; 0x50
    156a:	9115      	str	r1, [sp, #84]	; 0x54
    156c:	3101      	adds	r1, #1
    156e:	7229      	strb	r1, [r5, #8]
	unsigned long int halfmillis=clock1.halfmillis;
    1570:	9909      	ldr	r1, [sp, #36]	; 0x24
	ret.second=clock1.second+clock2.second;
    1572:	9a08      	ldr	r2, [sp, #32]
    1574:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1576:	1882      	adds	r2, r0, r2
    1578:	9214      	str	r2, [sp, #80]	; 0x50
	halfmillis=halfmillis+clock2.halfmillis;
    157a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    157c:	1876      	adds	r6, r6, r1
	ret.second=ret.second+(halfmillis/RTC_FREQ);
    157e:	9f14      	ldr	r7, [sp, #80]	; 0x50
    1580:	1c30      	adds	r0, r6, #0
    1582:	21fa      	movs	r1, #250	; 0xfa
    1584:	01c9      	lsls	r1, r1, #7
    1586:	4b3a      	ldr	r3, [pc, #232]	; (1670 <_Z8sumClock11structClockS_+0x174>)
    1588:	4798      	blx	r3
    158a:	19c7      	adds	r7, r0, r7
    158c:	9714      	str	r7, [sp, #80]	; 0x50
	ret.halfmillis=halfmillis%RTC_FREQ;
    158e:	1c30      	adds	r0, r6, #0
    1590:	21fa      	movs	r1, #250	; 0xfa
    1592:	01c9      	lsls	r1, r1, #7
    1594:	4b37      	ldr	r3, [pc, #220]	; (1674 <_Z8sumClock11structClockS_+0x178>)
    1596:	4798      	blx	r3
    1598:	6069      	str	r1, [r5, #4]
}
Clock sumClock(Clock clock1,Clock clock2 ){
	Clock ret={0,0,true};
		
	if((clock1.sign==true)&&(clock2.sign==true)){// + + +
		ret=sumClockPos(clock1,clock2);
    159a:	1c23      	adds	r3, r4, #0
    159c:	cd07      	ldmia	r5!, {r0, r1, r2}
    159e:	c307      	stmia	r3!, {r0, r1, r2}
    15a0:	e053      	b.n	164a <_Z8sumClock11structClockS_+0x14e>
	}
	else{
		if((clock1.sign==true)&&(clock2.sign==false)){ // + + -
			clock2.sign=true;
    15a2:	2201      	movs	r2, #1
    15a4:	ab20      	add	r3, sp, #128	; 0x80
    15a6:	721a      	strb	r2, [r3, #8]
			ret=subClock(clock1,clock2);
    15a8:	466b      	mov	r3, sp
    15aa:	aa20      	add	r2, sp, #128	; 0x80
    15ac:	ca23      	ldmia	r2!, {r0, r1, r5}
    15ae:	c323      	stmia	r3!, {r0, r1, r5}
    15b0:	1c20      	adds	r0, r4, #0
    15b2:	9905      	ldr	r1, [sp, #20]
    15b4:	9a06      	ldr	r2, [sp, #24]
    15b6:	9b07      	ldr	r3, [sp, #28]
    15b8:	4d2f      	ldr	r5, [pc, #188]	; (1678 <_Z8sumClock11structClockS_+0x17c>)
    15ba:	47a8      	blx	r5
    15bc:	e045      	b.n	164a <_Z8sumClock11structClockS_+0x14e>
		}
		else{
					if((clock1.sign==false)&&(clock2.sign==true)){ // - + + 
    15be:	ab05      	add	r3, sp, #20
    15c0:	7a1b      	ldrb	r3, [r3, #8]
    15c2:	2b00      	cmp	r3, #0
    15c4:	d10d      	bne.n	15e2 <_Z8sumClock11structClockS_+0xe6>
    15c6:	e7b4      	b.n	1532 <_Z8sumClock11structClockS_+0x36>
						clock1.sign=true;
    15c8:	ab05      	add	r3, sp, #20
    15ca:	2201      	movs	r2, #1
    15cc:	721a      	strb	r2, [r3, #8]
						ret=subClock(clock2,clock1);
    15ce:	466a      	mov	r2, sp
    15d0:	cb23      	ldmia	r3!, {r0, r1, r5}
    15d2:	c223      	stmia	r2!, {r0, r1, r5}
    15d4:	1c20      	adds	r0, r4, #0
    15d6:	9920      	ldr	r1, [sp, #128]	; 0x80
    15d8:	9a21      	ldr	r2, [sp, #132]	; 0x84
    15da:	9b22      	ldr	r3, [sp, #136]	; 0x88
    15dc:	4d26      	ldr	r5, [pc, #152]	; (1678 <_Z8sumClock11structClockS_+0x17c>)
    15de:	47a8      	blx	r5
    15e0:	e033      	b.n	164a <_Z8sumClock11structClockS_+0x14e>
					}
					else{
						if((clock1.sign==false)&&(clock2.sign==false)){ // - + -
    15e2:	ab05      	add	r3, sp, #20
    15e4:	7a1b      	ldrb	r3, [r3, #8]
    15e6:	2b00      	cmp	r3, #0
    15e8:	d12f      	bne.n	164a <_Z8sumClock11structClockS_+0x14e>
    15ea:	e7a7      	b.n	153c <_Z8sumClock11structClockS_+0x40>
							clock1.sign=true;
    15ec:	ab05      	add	r3, sp, #20
    15ee:	2101      	movs	r1, #1
    15f0:	7219      	strb	r1, [r3, #8]
							clock2.sign=true;
    15f2:	aa20      	add	r2, sp, #128	; 0x80
    15f4:	7211      	strb	r1, [r2, #8]
    15f6:	aa0e      	add	r2, sp, #56	; 0x38
    15f8:	1c10      	adds	r0, r2, #0
    15fa:	cbe0      	ldmia	r3!, {r5, r6, r7}
    15fc:	c0e0      	stmia	r0!, {r5, r6, r7}
    15fe:	ab11      	add	r3, sp, #68	; 0x44
    1600:	469c      	mov	ip, r3
    1602:	1c18      	adds	r0, r3, #0
    1604:	ad20      	add	r5, sp, #128	; 0x80
    1606:	cdc8      	ldmia	r5!, {r3, r6, r7}
    1608:	c0c8      	stmia	r0!, {r3, r6, r7}
			}
		}

}
Clock sumClockPos(Clock clock1,Clock clock2 ){
	Clock ret={0,0,true};
    160a:	ad17      	add	r5, sp, #92	; 0x5c
    160c:	2700      	movs	r7, #0
    160e:	9717      	str	r7, [sp, #92]	; 0x5c
    1610:	9718      	str	r7, [sp, #96]	; 0x60
    1612:	7229      	strb	r1, [r5, #8]
	unsigned long int halfmillis=clock1.halfmillis;
    1614:	990f      	ldr	r1, [sp, #60]	; 0x3c
	ret.second=clock1.second+clock2.second;
    1616:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1618:	9811      	ldr	r0, [sp, #68]	; 0x44
    161a:	1882      	adds	r2, r0, r2
    161c:	9217      	str	r2, [sp, #92]	; 0x5c
	halfmillis=halfmillis+clock2.halfmillis;
    161e:	4663      	mov	r3, ip
    1620:	685e      	ldr	r6, [r3, #4]
    1622:	1876      	adds	r6, r6, r1
	ret.second=ret.second+(halfmillis/RTC_FREQ);
    1624:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    1626:	4698      	mov	r8, r3
    1628:	1c30      	adds	r0, r6, #0
    162a:	21fa      	movs	r1, #250	; 0xfa
    162c:	01c9      	lsls	r1, r1, #7
    162e:	4b10      	ldr	r3, [pc, #64]	; (1670 <_Z8sumClock11structClockS_+0x174>)
    1630:	4798      	blx	r3
    1632:	4440      	add	r0, r8
    1634:	9017      	str	r0, [sp, #92]	; 0x5c
	ret.halfmillis=halfmillis%RTC_FREQ;
    1636:	1c30      	adds	r0, r6, #0
    1638:	21fa      	movs	r1, #250	; 0xfa
    163a:	01c9      	lsls	r1, r1, #7
    163c:	4b0d      	ldr	r3, [pc, #52]	; (1674 <_Z8sumClock11structClockS_+0x178>)
    163e:	4798      	blx	r3
    1640:	6069      	str	r1, [r5, #4]
					}
					else{
						if((clock1.sign==false)&&(clock2.sign==false)){ // - + -
							clock1.sign=true;
							clock2.sign=true;
							ret=sumClockPos(clock1,clock2);
    1642:	1c23      	adds	r3, r4, #0
    1644:	cd07      	ldmia	r5!, {r0, r1, r2}
    1646:	c307      	stmia	r3!, {r0, r1, r2}
							ret.sign=false;
    1648:	7227      	strb	r7, [r4, #8]
						}
					}
		}
		
	}
	ret.second+=ret.halfmillis/RTC_FREQ;
    164a:	6860      	ldr	r0, [r4, #4]
    164c:	6825      	ldr	r5, [r4, #0]
    164e:	21fa      	movs	r1, #250	; 0xfa
    1650:	01c9      	lsls	r1, r1, #7
    1652:	4b07      	ldr	r3, [pc, #28]	; (1670 <_Z8sumClock11structClockS_+0x174>)
    1654:	4798      	blx	r3
    1656:	1945      	adds	r5, r0, r5
    1658:	6025      	str	r5, [r4, #0]
	ret.halfmillis=ret.halfmillis%RTC_FREQ;
    165a:	6860      	ldr	r0, [r4, #4]
    165c:	21fa      	movs	r1, #250	; 0xfa
    165e:	01c9      	lsls	r1, r1, #7
    1660:	4b04      	ldr	r3, [pc, #16]	; (1674 <_Z8sumClock11structClockS_+0x178>)
    1662:	4798      	blx	r3
    1664:	6061      	str	r1, [r4, #4]
	return ret;
}
    1666:	1c20      	adds	r0, r4, #0
    1668:	b01a      	add	sp, #104	; 0x68
    166a:	bc04      	pop	{r2}
    166c:	4690      	mov	r8, r2
    166e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1670:	0000666d 	.word	0x0000666d
    1674:	00006779 	.word	0x00006779
    1678:	000013f9 	.word	0x000013f9

0000167c <_Z9readClockP11structClock>:
volatile int timeCorr;
volatile bool stateLed=false;
DigitalOut led(LED1);
struct rtc_module rtc_instance;

uint32_t  readClock(Clock* timeClock){
    167c:	b5f0      	push	{r4, r5, r6, r7, lr}
    167e:	4647      	mov	r7, r8
    1680:	b480      	push	{r7}
    1682:	1c04      	adds	r4, r0, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1684:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1686:	f3bf 8f5f 	dmb	sy
	//rtc_count_disable(&rtc_instance);
	Disable_global_interrupt();
    168a:	2200      	movs	r2, #0
    168c:	4b19      	ldr	r3, [pc, #100]	; (16f4 <_Z9readClockP11structClock+0x78>)
    168e:	701a      	strb	r2, [r3, #0]
	uint32_t timeCounter=0;
	RTC->MODE0.CTRL.reg &=  0b1111111111111101;//disable timer
    1690:	4a19      	ldr	r2, [pc, #100]	; (16f8 <_Z9readClockP11structClock+0x7c>)
    1692:	8813      	ldrh	r3, [r2, #0]
    1694:	2102      	movs	r1, #2
    1696:	438b      	bics	r3, r1
    1698:	8013      	strh	r3, [r2, #0]
	while(RTC->MODE0.STATUS.bit.SYNCBUSY==1);
    169a:	7a93      	ldrb	r3, [r2, #10]
    169c:	09db      	lsrs	r3, r3, #7
    169e:	d1fc      	bne.n	169a <_Z9readClockP11structClock+0x1e>
	
	timeCounter=RTC->MODE0.COUNT.reg; 
    16a0:	4d15      	ldr	r5, [pc, #84]	; (16f8 <_Z9readClockP11structClock+0x7c>)
    16a2:	692f      	ldr	r7, [r5, #16]
	timeClock->second=timeManage.second;	
    16a4:	4b15      	ldr	r3, [pc, #84]	; (16fc <_Z9readClockP11structClock+0x80>)
    16a6:	681a      	ldr	r2, [r3, #0]
    16a8:	6022      	str	r2, [r4, #0]
	timeClock->halfmillis=timeManage.halfmillis;	
    16aa:	685b      	ldr	r3, [r3, #4]
    16ac:	6063      	str	r3, [r4, #4]
	//timeCounter=0;
	

	//Enable_global_interrupt();
	timeClock->sign=true;	
    16ae:	2301      	movs	r3, #1
    16b0:	4698      	mov	r8, r3
    16b2:	7223      	strb	r3, [r4, #8]

	timeClock->halfmillis+=timeCounter;
    16b4:	6863      	ldr	r3, [r4, #4]
    16b6:	19db      	adds	r3, r3, r7
    16b8:	6063      	str	r3, [r4, #4]
	timeClock->second+=timeClock->halfmillis/RTC_FREQ;
    16ba:	6860      	ldr	r0, [r4, #4]
    16bc:	6826      	ldr	r6, [r4, #0]
    16be:	21fa      	movs	r1, #250	; 0xfa
    16c0:	01c9      	lsls	r1, r1, #7
    16c2:	4b0f      	ldr	r3, [pc, #60]	; (1700 <_Z9readClockP11structClock+0x84>)
    16c4:	4798      	blx	r3
    16c6:	1986      	adds	r6, r0, r6
    16c8:	6026      	str	r6, [r4, #0]
	timeClock->halfmillis=timeClock->halfmillis%RTC_FREQ;
    16ca:	6860      	ldr	r0, [r4, #4]
    16cc:	21fa      	movs	r1, #250	; 0xfa
    16ce:	01c9      	lsls	r1, r1, #7
    16d0:	4b0c      	ldr	r3, [pc, #48]	; (1704 <_Z9readClockP11structClock+0x88>)
    16d2:	4798      	blx	r3
    16d4:	6061      	str	r1, [r4, #4]
	RTC->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE; //enable timer
    16d6:	882a      	ldrh	r2, [r5, #0]
    16d8:	2302      	movs	r3, #2
    16da:	4313      	orrs	r3, r2
    16dc:	802b      	strh	r3, [r5, #0]
	Enable_global_interrupt();
    16de:	4b05      	ldr	r3, [pc, #20]	; (16f4 <_Z9readClockP11structClock+0x78>)
    16e0:	4642      	mov	r2, r8
    16e2:	701a      	strb	r2, [r3, #0]
    16e4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    16e8:	b662      	cpsie	i
	return timeCounter;
}
    16ea:	1c38      	adds	r0, r7, #0
    16ec:	bc04      	pop	{r2}
    16ee:	4690      	mov	r8, r2
    16f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    16f2:	46c0      	nop			; (mov r8, r8)
    16f4:	200000d0 	.word	0x200000d0
    16f8:	40001400 	.word	0x40001400
    16fc:	200000bc 	.word	0x200000bc
    1700:	0000666d 	.word	0x0000666d
    1704:	00006779 	.word	0x00006779

00001708 <_Z10writeClock11structClock>:
void writeClock(Clock clk){
    1708:	b5f0      	push	{r4, r5, r6, r7, lr}
    170a:	4647      	mov	r7, r8
    170c:	b480      	push	{r7}
    170e:	b084      	sub	sp, #16
    1710:	9001      	str	r0, [sp, #4]
    1712:	9102      	str	r1, [sp, #8]
    1714:	9203      	str	r2, [sp, #12]
	//rtc_count_disable(&rtc_instance);
	//Disable_global_interrupt();

	RTC->MODE0.CTRL.reg &=  0b1111111111111101;//stop timer
    1716:	4a16      	ldr	r2, [pc, #88]	; (1770 <_Z10writeClock11structClock+0x68>)
    1718:	8813      	ldrh	r3, [r2, #0]
    171a:	2102      	movs	r1, #2
    171c:	438b      	bics	r3, r1
    171e:	8013      	strh	r3, [r2, #0]
	
	while(RTC->MODE0.STATUS.bit.SYNCBUSY==1);
    1720:	7a93      	ldrb	r3, [r2, #10]
    1722:	09db      	lsrs	r3, r3, #7
    1724:	d1fc      	bne.n	1720 <_Z10writeClock11structClock+0x18>
	RTC->MODE0.COUNT.reg=clk.halfmillis%VALUE_TIMER;
    1726:	9802      	ldr	r0, [sp, #8]
    1728:	4f12      	ldr	r7, [pc, #72]	; (1774 <_Z10writeClock11structClock+0x6c>)
    172a:	4913      	ldr	r1, [pc, #76]	; (1778 <_Z10writeClock11structClock+0x70>)
    172c:	47b8      	blx	r7
    172e:	4d10      	ldr	r5, [pc, #64]	; (1770 <_Z10writeClock11structClock+0x68>)
    1730:	6129      	str	r1, [r5, #16]
	timeManage.second=clk.second;
    1732:	9b01      	ldr	r3, [sp, #4]
    1734:	4c11      	ldr	r4, [pc, #68]	; (177c <_Z10writeClock11structClock+0x74>)
    1736:	6023      	str	r3, [r4, #0]
	timeManage.halfmillis=(int)(clk.halfmillis/VALUE_TIMER)*VALUE_TIMER;
    1738:	9802      	ldr	r0, [sp, #8]
    173a:	4b11      	ldr	r3, [pc, #68]	; (1780 <_Z10writeClock11structClock+0x78>)
    173c:	4698      	mov	r8, r3
    173e:	490e      	ldr	r1, [pc, #56]	; (1778 <_Z10writeClock11structClock+0x70>)
    1740:	4798      	blx	r3
    1742:	4b0d      	ldr	r3, [pc, #52]	; (1778 <_Z10writeClock11structClock+0x70>)
    1744:	4358      	muls	r0, r3
    1746:	6060      	str	r0, [r4, #4]
	timeManage.second+=timeManage.halfmillis/RTC_FREQ;
    1748:	6860      	ldr	r0, [r4, #4]
    174a:	6826      	ldr	r6, [r4, #0]
    174c:	21fa      	movs	r1, #250	; 0xfa
    174e:	01c9      	lsls	r1, r1, #7
    1750:	47c0      	blx	r8
    1752:	1986      	adds	r6, r0, r6
    1754:	6026      	str	r6, [r4, #0]
	timeManage.halfmillis=timeManage.halfmillis%RTC_FREQ;
    1756:	6860      	ldr	r0, [r4, #4]
    1758:	21fa      	movs	r1, #250	; 0xfa
    175a:	01c9      	lsls	r1, r1, #7
    175c:	47b8      	blx	r7
    175e:	6061      	str	r1, [r4, #4]
	RTC->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE; //enable timer
    1760:	882a      	ldrh	r2, [r5, #0]
    1762:	2302      	movs	r3, #2
    1764:	4313      	orrs	r3, r2
    1766:	802b      	strh	r3, [r5, #0]

	

	
	
}
    1768:	b004      	add	sp, #16
    176a:	bc04      	pop	{r2}
    176c:	4690      	mov	r8, r2
    176e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1770:	40001400 	.word	0x40001400
    1774:	00006779 	.word	0x00006779
    1778:	00002710 	.word	0x00002710
    177c:	200000bc 	.word	0x200000bc
    1780:	0000666d 	.word	0x0000666d

00001784 <_Z15isrInternalClokv>:
void isrInternalClok(void){
    1784:	b5f0      	push	{r4, r5, r6, r7, lr}
    1786:	b08d      	sub	sp, #52	; 0x34
		RTC->MODE0.CTRL.reg &=  0b1111111111111101;//stop timer
    1788:	4a5f      	ldr	r2, [pc, #380]	; (1908 <_Z15isrInternalClokv+0x184>)
    178a:	8813      	ldrh	r3, [r2, #0]
    178c:	2102      	movs	r1, #2
    178e:	438b      	bics	r3, r1
    1790:	8013      	strh	r3, [r2, #0]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1792:	b672      	cpsid	i
    1794:	f3bf 8f5f 	dmb	sy
			Disable_global_interrupt();
    1798:	2200      	movs	r2, #0
    179a:	4b5c      	ldr	r3, [pc, #368]	; (190c <_Z15isrInternalClokv+0x188>)
    179c:	701a      	strb	r2, [r3, #0]
			//printf("+");
			static bool state;
			state=stateLed;
    179e:	4b5c      	ldr	r3, [pc, #368]	; (1910 <_Z15isrInternalClokv+0x18c>)
    17a0:	781a      	ldrb	r2, [r3, #0]
    17a2:	4b5c      	ldr	r3, [pc, #368]	; (1914 <_Z15isrInternalClokv+0x190>)
    17a4:	701a      	strb	r2, [r3, #0]
			

			timeManage.halfmillis+=VALUE_TIMER;
    17a6:	4b5c      	ldr	r3, [pc, #368]	; (1918 <_Z15isrInternalClokv+0x194>)
    17a8:	685a      	ldr	r2, [r3, #4]
    17aa:	495c      	ldr	r1, [pc, #368]	; (191c <_Z15isrInternalClokv+0x198>)
    17ac:	468c      	mov	ip, r1
    17ae:	4462      	add	r2, ip
    17b0:	605a      	str	r2, [r3, #4]

		
			if(timeManage.halfmillis<(RTC_FREQ/2)){//all 500ms
    17b2:	685a      	ldr	r2, [r3, #4]
    17b4:	4b5a      	ldr	r3, [pc, #360]	; (1920 <_Z15isrInternalClokv+0x19c>)
    17b6:	429a      	cmp	r2, r3
    17b8:	d803      	bhi.n	17c2 <_Z15isrInternalClokv+0x3e>
				stateLed=LOW;
    17ba:	2200      	movs	r2, #0
    17bc:	4b54      	ldr	r3, [pc, #336]	; (1910 <_Z15isrInternalClokv+0x18c>)
    17be:	701a      	strb	r2, [r3, #0]
    17c0:	e002      	b.n	17c8 <_Z15isrInternalClokv+0x44>
			}
			else{
				stateLed=HIGH;
    17c2:	2201      	movs	r2, #1
    17c4:	4b52      	ldr	r3, [pc, #328]	; (1910 <_Z15isrInternalClokv+0x18c>)
    17c6:	701a      	strb	r2, [r3, #0]
			}
			if(state!=stateLed){
    17c8:	4b51      	ldr	r3, [pc, #324]	; (1910 <_Z15isrInternalClokv+0x18c>)
    17ca:	781b      	ldrb	r3, [r3, #0]
    17cc:	b2db      	uxtb	r3, r3
    17ce:	4a51      	ldr	r2, [pc, #324]	; (1914 <_Z15isrInternalClokv+0x190>)
    17d0:	7812      	ldrb	r2, [r2, #0]
    17d2:	429a      	cmp	r2, r3
    17d4:	d017      	beq.n	1806 <_Z15isrInternalClokv+0x82>
				led = stateLed;
    17d6:	4b4e      	ldr	r3, [pc, #312]	; (1910 <_Z15isrInternalClokv+0x18c>)
    17d8:	781c      	ldrb	r4, [r3, #0]
    17da:	b2e4      	uxtb	r4, r4
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    17dc:	4b51      	ldr	r3, [pc, #324]	; (1924 <_Z15isrInternalClokv+0x1a0>)
    17de:	781b      	ldrb	r3, [r3, #0]
    17e0:	b25b      	sxtb	r3, r3
    17e2:	3301      	adds	r3, #1
    17e4:	d104      	bne.n	17f0 <_Z15isrInternalClokv+0x6c>
    17e6:	4850      	ldr	r0, [pc, #320]	; (1928 <_Z15isrInternalClokv+0x1a4>)
    17e8:	4950      	ldr	r1, [pc, #320]	; (192c <_Z15isrInternalClokv+0x1a8>)
    17ea:	2228      	movs	r2, #40	; 0x28
    17ec:	4b50      	ldr	r3, [pc, #320]	; (1930 <_Z15isrInternalClokv+0x1ac>)
    17ee:	4798      	blx	r3
    if (value)
    17f0:	2c00      	cmp	r4, #0
    17f2:	d004      	beq.n	17fe <_Z15isrInternalClokv+0x7a>
        *obj->OUTSET = obj->mask;
    17f4:	4b4b      	ldr	r3, [pc, #300]	; (1924 <_Z15isrInternalClokv+0x1a0>)
    17f6:	691a      	ldr	r2, [r3, #16]
    17f8:	685b      	ldr	r3, [r3, #4]
    17fa:	6013      	str	r3, [r2, #0]
    17fc:	e003      	b.n	1806 <_Z15isrInternalClokv+0x82>
    else
        *obj->OUTCLR = obj->mask;
    17fe:	4b49      	ldr	r3, [pc, #292]	; (1924 <_Z15isrInternalClokv+0x1a0>)
    1800:	68da      	ldr	r2, [r3, #12]
    1802:	685b      	ldr	r3, [r3, #4]
    1804:	6013      	str	r3, [r2, #0]
				//		xSemaphoreGiveFromISR( synchroLed,NULL);
				//	}
			}

			
			timeManage.second+=timeManage.halfmillis/RTC_FREQ;
    1806:	4c44      	ldr	r4, [pc, #272]	; (1918 <_Z15isrInternalClokv+0x194>)
    1808:	6860      	ldr	r0, [r4, #4]
    180a:	6825      	ldr	r5, [r4, #0]
    180c:	21fa      	movs	r1, #250	; 0xfa
    180e:	01c9      	lsls	r1, r1, #7
    1810:	4b48      	ldr	r3, [pc, #288]	; (1934 <_Z15isrInternalClokv+0x1b0>)
    1812:	4798      	blx	r3
    1814:	1945      	adds	r5, r0, r5
    1816:	6025      	str	r5, [r4, #0]
			timeManage.halfmillis=timeManage.halfmillis%RTC_FREQ;
    1818:	6860      	ldr	r0, [r4, #4]
    181a:	21fa      	movs	r1, #250	; 0xfa
    181c:	01c9      	lsls	r1, r1, #7
    181e:	4b46      	ldr	r3, [pc, #280]	; (1938 <_Z15isrInternalClokv+0x1b4>)
    1820:	4798      	blx	r3
    1822:	6061      	str	r1, [r4, #4]
			if((valueCor!=0)){
    1824:	4b45      	ldr	r3, [pc, #276]	; (193c <_Z15isrInternalClokv+0x1b8>)
    1826:	681b      	ldr	r3, [r3, #0]
    1828:	2b00      	cmp	r3, #0
    182a:	d060      	beq.n	18ee <_Z15isrInternalClokv+0x16a>
				if (timeCorr==0){
    182c:	4b44      	ldr	r3, [pc, #272]	; (1940 <_Z15isrInternalClokv+0x1bc>)
    182e:	681b      	ldr	r3, [r3, #0]
    1830:	2b00      	cmp	r3, #0
    1832:	d13c      	bne.n	18ae <_Z15isrInternalClokv+0x12a>
					timeCorr=timeCorrection;
    1834:	4b43      	ldr	r3, [pc, #268]	; (1944 <_Z15isrInternalClokv+0x1c0>)
    1836:	681a      	ldr	r2, [r3, #0]
    1838:	4b41      	ldr	r3, [pc, #260]	; (1940 <_Z15isrInternalClokv+0x1bc>)
    183a:	601a      	str	r2, [r3, #0]
					Clock off;
					off.second=(unsigned int )abs(valueCor)/RTC_FREQ;
    183c:	4c3f      	ldr	r4, [pc, #252]	; (193c <_Z15isrInternalClokv+0x1b8>)
    183e:	6820      	ldr	r0, [r4, #0]
    1840:	17c3      	asrs	r3, r0, #31
    1842:	18c0      	adds	r0, r0, r3
    1844:	4058      	eors	r0, r3
    1846:	21fa      	movs	r1, #250	; 0xfa
    1848:	01c9      	lsls	r1, r1, #7
    184a:	4b3a      	ldr	r3, [pc, #232]	; (1934 <_Z15isrInternalClokv+0x1b0>)
    184c:	4798      	blx	r3
    184e:	9009      	str	r0, [sp, #36]	; 0x24
					off.halfmillis=(unsigned int)abs(valueCor)%RTC_FREQ;
    1850:	6820      	ldr	r0, [r4, #0]
    1852:	17c3      	asrs	r3, r0, #31
    1854:	18c0      	adds	r0, r0, r3
    1856:	4058      	eors	r0, r3
    1858:	21fa      	movs	r1, #250	; 0xfa
    185a:	01c9      	lsls	r1, r1, #7
    185c:	4b36      	ldr	r3, [pc, #216]	; (1938 <_Z15isrInternalClokv+0x1b4>)
    185e:	4798      	blx	r3
    1860:	910a      	str	r1, [sp, #40]	; 0x28
					if(valueCor<0){
    1862:	6823      	ldr	r3, [r4, #0]
    1864:	2b00      	cmp	r3, #0
    1866:	da03      	bge.n	1870 <_Z15isrInternalClokv+0xec>
						off.sign=false;
    1868:	2200      	movs	r2, #0
    186a:	ab09      	add	r3, sp, #36	; 0x24
    186c:	721a      	strb	r2, [r3, #8]
    186e:	e002      	b.n	1876 <_Z15isrInternalClokv+0xf2>
					}
					else{
						off.sign=true;
    1870:	2201      	movs	r2, #1
    1872:	ab09      	add	r3, sp, #36	; 0x24
    1874:	721a      	strb	r2, [r3, #8]
					}
					//change the time
					timeManage=sumClock(timeManage,off);
    1876:	4e28      	ldr	r6, [pc, #160]	; (1918 <_Z15isrInternalClokv+0x194>)
    1878:	ac04      	add	r4, sp, #16
    187a:	ad09      	add	r5, sp, #36	; 0x24
    187c:	466b      	mov	r3, sp
    187e:	1c2a      	adds	r2, r5, #0
    1880:	ca83      	ldmia	r2!, {r0, r1, r7}
    1882:	c383      	stmia	r3!, {r0, r1, r7}
    1884:	1c20      	adds	r0, r4, #0
    1886:	6831      	ldr	r1, [r6, #0]
    1888:	6872      	ldr	r2, [r6, #4]
    188a:	68b3      	ldr	r3, [r6, #8]
    188c:	4f2e      	ldr	r7, [pc, #184]	; (1948 <_Z15isrInternalClokv+0x1c4>)
    188e:	47b8      	blx	r7
    1890:	1c23      	adds	r3, r4, #0
    1892:	cb07      	ldmia	r3!, {r0, r1, r2}
    1894:	c607      	stmia	r6!, {r0, r1, r2}
					//change the correction offset
					sumOffset=sumClock(sumOffset,off);//ok
    1896:	4e2d      	ldr	r6, [pc, #180]	; (194c <_Z15isrInternalClokv+0x1c8>)
    1898:	466b      	mov	r3, sp
    189a:	cd07      	ldmia	r5!, {r0, r1, r2}
    189c:	c307      	stmia	r3!, {r0, r1, r2}
    189e:	1c20      	adds	r0, r4, #0
    18a0:	6831      	ldr	r1, [r6, #0]
    18a2:	6872      	ldr	r2, [r6, #4]
    18a4:	68b3      	ldr	r3, [r6, #8]
    18a6:	47b8      	blx	r7
    18a8:	cc0e      	ldmia	r4!, {r1, r2, r3}
    18aa:	c60e      	stmia	r6!, {r1, r2, r3}
    18ac:	e003      	b.n	18b6 <_Z15isrInternalClokv+0x132>
				}
				else{
					timeCorr--;
    18ae:	4a24      	ldr	r2, [pc, #144]	; (1940 <_Z15isrInternalClokv+0x1bc>)
    18b0:	6813      	ldr	r3, [r2, #0]
    18b2:	3b01      	subs	r3, #1
    18b4:	6013      	str	r3, [r2, #0]
				}	
				sumOffset.second+=sumOffset.halfmillis/RTC_FREQ;
    18b6:	4c25      	ldr	r4, [pc, #148]	; (194c <_Z15isrInternalClokv+0x1c8>)
    18b8:	6860      	ldr	r0, [r4, #4]
    18ba:	6825      	ldr	r5, [r4, #0]
    18bc:	4f1d      	ldr	r7, [pc, #116]	; (1934 <_Z15isrInternalClokv+0x1b0>)
    18be:	21fa      	movs	r1, #250	; 0xfa
    18c0:	01c9      	lsls	r1, r1, #7
    18c2:	47b8      	blx	r7
    18c4:	1945      	adds	r5, r0, r5
    18c6:	6025      	str	r5, [r4, #0]
				sumOffset.halfmillis=sumOffset.halfmillis%RTC_FREQ;
    18c8:	6860      	ldr	r0, [r4, #4]
    18ca:	4e1b      	ldr	r6, [pc, #108]	; (1938 <_Z15isrInternalClokv+0x1b4>)
    18cc:	21fa      	movs	r1, #250	; 0xfa
    18ce:	01c9      	lsls	r1, r1, #7
    18d0:	47b0      	blx	r6
    18d2:	6061      	str	r1, [r4, #4]
				timeManage.second+=timeManage.halfmillis/RTC_FREQ;
    18d4:	4c10      	ldr	r4, [pc, #64]	; (1918 <_Z15isrInternalClokv+0x194>)
    18d6:	6860      	ldr	r0, [r4, #4]
    18d8:	6825      	ldr	r5, [r4, #0]
    18da:	21fa      	movs	r1, #250	; 0xfa
    18dc:	01c9      	lsls	r1, r1, #7
    18de:	47b8      	blx	r7
    18e0:	1945      	adds	r5, r0, r5
    18e2:	6025      	str	r5, [r4, #0]
				timeManage.halfmillis=timeManage.halfmillis%RTC_FREQ;
    18e4:	6860      	ldr	r0, [r4, #4]
    18e6:	21fa      	movs	r1, #250	; 0xfa
    18e8:	01c9      	lsls	r1, r1, #7
    18ea:	47b0      	blx	r6
    18ec:	6061      	str	r1, [r4, #4]
			
			}
			

			
	Enable_global_interrupt();
    18ee:	2201      	movs	r2, #1
    18f0:	4b06      	ldr	r3, [pc, #24]	; (190c <_Z15isrInternalClokv+0x188>)
    18f2:	701a      	strb	r2, [r3, #0]
    18f4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    18f8:	b662      	cpsie	i
	RTC->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE; //enable timer
    18fa:	4a03      	ldr	r2, [pc, #12]	; (1908 <_Z15isrInternalClokv+0x184>)
    18fc:	8811      	ldrh	r1, [r2, #0]
    18fe:	2302      	movs	r3, #2
    1900:	430b      	orrs	r3, r1
    1902:	8013      	strh	r3, [r2, #0]
}
    1904:	b00d      	add	sp, #52	; 0x34
    1906:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1908:	40001400 	.word	0x40001400
    190c:	200000d0 	.word	0x200000d0
    1910:	20003d2c 	.word	0x20003d2c
    1914:	20003d24 	.word	0x20003d24
    1918:	200000bc 	.word	0x200000bc
    191c:	00002710 	.word	0x00002710
    1920:	00003e7f 	.word	0x00003e7f
    1924:	20003d34 	.word	0x20003d34
    1928:	0000eac0 	.word	0x0000eac0
    192c:	0000ead8 	.word	0x0000ead8
    1930:	00004f71 	.word	0x00004f71
    1934:	0000666d 	.word	0x0000666d
    1938:	00006779 	.word	0x00006779
    193c:	20003d50 	.word	0x20003d50
    1940:	20003d30 	.word	0x20003d30
    1944:	20003d28 	.word	0x20003d28
    1948:	000014fd 	.word	0x000014fd
    194c:	200041f8 	.word	0x200041f8

00001950 <RTC_Handler>:
void RTC_Handler( void ){
    1950:	b508      	push	{r3, lr}
	//pc.printf("ISR");
	RTC->MODE0.INTFLAG.bit.CMP0=1;		//disable the flag COMPARE
    1952:	4b06      	ldr	r3, [pc, #24]	; (196c <RTC_Handler+0x1c>)
    1954:	7a19      	ldrb	r1, [r3, #8]
    1956:	2201      	movs	r2, #1
    1958:	430a      	orrs	r2, r1
    195a:	721a      	strb	r2, [r3, #8]
	RTC->MODE0.INTFLAG.bit.OVF=1;		//disable the flag COMPARE
    195c:	7a1a      	ldrb	r2, [r3, #8]
    195e:	2180      	movs	r1, #128	; 0x80
    1960:	4249      	negs	r1, r1
    1962:	430a      	orrs	r2, r1
    1964:	721a      	strb	r2, [r3, #8]
	isrInternalClok();
    1966:	4b02      	ldr	r3, [pc, #8]	; (1970 <RTC_Handler+0x20>)
    1968:	4798      	blx	r3
}
    196a:	bd08      	pop	{r3, pc}
    196c:	40001400 	.word	0x40001400
    1970:	00001785 	.word	0x00001785

00001974 <_Z22configureInternalClockv>:

void configureInternalClock(void){
    1974:	b508      	push	{r3, lr}
	hmi.printf("internal clock config\r\n");
    1976:	4821      	ldr	r0, [pc, #132]	; (19fc <_Z22configureInternalClockv+0x88>)
    1978:	4921      	ldr	r1, [pc, #132]	; (1a00 <_Z22configureInternalClockv+0x8c>)
    197a:	4b22      	ldr	r3, [pc, #136]	; (1a04 <_Z22configureInternalClockv+0x90>)
    197c:	4798      	blx	r3
	//gENERIC CLOCK GENRERATOR
	GCLK->GENCTRL.reg=0b00000000000000010000010000000010;
    197e:	4b22      	ldr	r3, [pc, #136]	; (1a08 <_Z22configureInternalClockv+0x94>)
    1980:	4a22      	ldr	r2, [pc, #136]	; (1a0c <_Z22configureInternalClockv+0x98>)
    1982:	605a      	str	r2, [r3, #4]
	//Generic Clock Generator Division
	GCLK->GENDIV.reg= 0b00000000000000000000000100000010;
    1984:	2281      	movs	r2, #129	; 0x81
    1986:	0052      	lsls	r2, r2, #1
    1988:	609a      	str	r2, [r3, #8]
	GCLK->CLKCTRL.reg=0x4204;
    198a:	4a21      	ldr	r2, [pc, #132]	; (1a10 <_Z22configureInternalClockv+0x9c>)
    198c:	805a      	strh	r2, [r3, #2]
	//peripheral configuration
	
	RTC->MODE0.CTRL.bit.PRESCALER=0x0;	//prescaller at 0
    198e:	4b21      	ldr	r3, [pc, #132]	; (1a14 <_Z22configureInternalClockv+0xa0>)
    1990:	8819      	ldrh	r1, [r3, #0]
    1992:	4a21      	ldr	r2, [pc, #132]	; (1a18 <_Z22configureInternalClockv+0xa4>)
    1994:	400a      	ands	r2, r1
    1996:	801a      	strh	r2, [r3, #0]
	RTC->MODE0.CTRL.bit.MODE=0x0;			//mode 0 : 32 bit counter
    1998:	881a      	ldrh	r2, [r3, #0]
    199a:	210c      	movs	r1, #12
    199c:	438a      	bics	r2, r1
    199e:	801a      	strh	r2, [r3, #0]
	RTC->MODE0.CTRL.bit.SWRST=0;			//no software reset
    19a0:	881a      	ldrh	r2, [r3, #0]
    19a2:	390b      	subs	r1, #11
    19a4:	438a      	bics	r2, r1
    19a6:	801a      	strh	r2, [r3, #0]
	RTC->MODE0.CTRL.bit.MATCHCLR=1;			//automatic reset counter
    19a8:	8819      	ldrh	r1, [r3, #0]
    19aa:	2280      	movs	r2, #128	; 0x80
    19ac:	430a      	orrs	r2, r1
    19ae:	801a      	strh	r2, [r3, #0]
	
	//event configuration
	RTC->MODE0.INTENSET.bit.OVF=1;		//enable the event overflow
    19b0:	79d9      	ldrb	r1, [r3, #7]
    19b2:	2080      	movs	r0, #128	; 0x80
    19b4:	4240      	negs	r0, r0
    19b6:	4301      	orrs	r1, r0
    19b8:	71d9      	strb	r1, [r3, #7]
	RTC->MODE0.INTENSET.bit.CMP0=1;		//enable the event compare
    19ba:	79d9      	ldrb	r1, [r3, #7]
    19bc:	2201      	movs	r2, #1
    19be:	4311      	orrs	r1, r2
    19c0:	71d9      	strb	r1, [r3, #7]
	RTC->MODE0.INTFLAG.bit.CMP0=1;		//disable the flag COMPARE
    19c2:	7a19      	ldrb	r1, [r3, #8]
    19c4:	430a      	orrs	r2, r1
    19c6:	721a      	strb	r2, [r3, #8]
	RTC->MODE0.INTFLAG.bit.OVF=1;		//disable the flag COMPARE
    19c8:	7a1a      	ldrb	r2, [r3, #8]
    19ca:	4302      	orrs	r2, r0
    19cc:	721a      	strb	r2, [r3, #8]
	RTC->MODE0.COUNT.bit.COUNT=0;			//set the RTC value
    19ce:	2200      	movs	r2, #0
    19d0:	611a      	str	r2, [r3, #16]
	RTC->MODE0.COMP[0].reg = count_set_period;
    19d2:	4a12      	ldr	r2, [pc, #72]	; (1a1c <_Z22configureInternalClockv+0xa8>)
    19d4:	6812      	ldr	r2, [r2, #0]
    19d6:	619a      	str	r2, [r3, #24]

	RTC->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
    19d8:	8819      	ldrh	r1, [r3, #0]
    19da:	2202      	movs	r2, #2
    19dc:	430a      	orrs	r2, r1
    19de:	801a      	strh	r2, [r3, #0]
  if((int32_t)(IRQn) < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    19e0:	4a0f      	ldr	r2, [pc, #60]	; (1a20 <_Z22configureInternalClockv+0xac>)
    19e2:	21c0      	movs	r1, #192	; 0xc0
    19e4:	0089      	lsls	r1, r1, #2
    19e6:	5853      	ldr	r3, [r2, r1]
    19e8:	021b      	lsls	r3, r3, #8
    19ea:	0a1b      	lsrs	r3, r3, #8
    19ec:	20c0      	movs	r0, #192	; 0xc0
    19ee:	0600      	lsls	r0, r0, #24
    19f0:	4303      	orrs	r3, r0
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    19f2:	5053      	str	r3, [r2, r1]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    19f4:	2308      	movs	r3, #8
    19f6:	6013      	str	r3, [r2, #0]

	NVIC_SetPriority (RTC_IRQn, (1<<__NVIC_PRIO_BITS) - 1);
	NVIC_EnableIRQ(RTC_IRQn);
	
    19f8:	bd08      	pop	{r3, pc}
    19fa:	46c0      	nop			; (mov r8, r8)
    19fc:	20004594 	.word	0x20004594
    1a00:	0000eb24 	.word	0x0000eb24
    1a04:	00004f49 	.word	0x00004f49
    1a08:	40000c00 	.word	0x40000c00
    1a0c:	00010402 	.word	0x00010402
    1a10:	00004204 	.word	0x00004204
    1a14:	40001400 	.word	0x40001400
    1a18:	fffff0ff 	.word	0xfffff0ff
    1a1c:	200000c8 	.word	0x200000c8
    1a20:	e000e100 	.word	0xe000e100

00001a24 <_GLOBAL__sub_I_count_set_period>:
    1a24:	b508      	push	{r3, lr}
public:
    /** Create a DigitalOut connected to the specified pin
     *
     *  @param pin DigitalOut pin to connect to
     */
    DigitalOut(PinName pin) : gpio() {
    1a26:	4807      	ldr	r0, [pc, #28]	; (1a44 <_GLOBAL__sub_I_count_set_period+0x20>)
    1a28:	2300      	movs	r3, #0
    1a2a:	7003      	strb	r3, [r0, #0]
    1a2c:	6043      	str	r3, [r0, #4]
    1a2e:	7203      	strb	r3, [r0, #8]
    1a30:	7243      	strb	r3, [r0, #9]
    1a32:	7283      	strb	r3, [r0, #10]
    1a34:	60c3      	str	r3, [r0, #12]
    1a36:	6103      	str	r3, [r0, #16]
    1a38:	6143      	str	r3, [r0, #20]
    1a3a:	6183      	str	r3, [r0, #24]
        gpio_init_out(&gpio, pin);
    1a3c:	2113      	movs	r1, #19
    1a3e:	4b02      	ldr	r3, [pc, #8]	; (1a48 <_GLOBAL__sub_I_count_set_period+0x24>)
    1a40:	4798      	blx	r3
    1a42:	bd08      	pop	{r3, pc}
    1a44:	20003d34 	.word	0x20003d34
    1a48:	00004f95 	.word	0x00004f95

00001a4c <_Z19ISRNetworkReceptionh>:
volatile circularBuffer buffer;
extern portTickType saveTimeRCrash;
/************************************************************************/
/* GLOBAL FUNCTION                                                      */
/************************************************************************/
void ISRNetworkReception(uint8_t e){
    1a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a4e:	b085      	sub	sp, #20
    1a50:	1c04      	adds	r4, r0, #0
	 uint16_t rx;
	saveTimeRCrash=xTaskGetTickCount();
    1a52:	4b32      	ldr	r3, [pc, #200]	; (1b1c <_Z19ISRNetworkReceptionh+0xd0>)
    1a54:	4798      	blx	r3
    1a56:	4b32      	ldr	r3, [pc, #200]	; (1b20 <_Z19ISRNetworkReceptionh+0xd4>)
    1a58:	6018      	str	r0, [r3, #0]
	if(((e & TRX_IRQ_TRX_END) == TRX_IRQ_TRX_END)||((e & TRX_IRQ_RX_START) == TRX_IRQ_RX_START))
    1a5a:	230c      	movs	r3, #12
    1a5c:	4223      	tst	r3, r4
    1a5e:	d151      	bne.n	1b04 <_Z19ISRNetworkReceptionh+0xb8>
    1a60:	e059      	b.n	1b16 <_Z19ISRNetworkReceptionh+0xca>

			//Disable_global_interrupt();
			//pc.printf("mimi\r\n");
			//synchro semaphore with a task

			rx=radio.read();
    1a62:	4830      	ldr	r0, [pc, #192]	; (1b24 <_Z19ISRNetworkReceptionh+0xd8>)
    1a64:	4b30      	ldr	r3, [pc, #192]	; (1b28 <_Z19ISRNetworkReceptionh+0xdc>)
    1a66:	4798      	blx	r3
    1a68:	b287      	uxth	r7, r0
			buffer.buffer[buffer.indice++]=rx;
    1a6a:	4b30      	ldr	r3, [pc, #192]	; (1b2c <_Z19ISRNetworkReceptionh+0xe0>)
    1a6c:	2132      	movs	r1, #50	; 0x32
    1a6e:	5c5a      	ldrb	r2, [r3, r1]
    1a70:	b2d2      	uxtb	r2, r2
    1a72:	1c56      	adds	r6, r2, #1
    1a74:	b2f6      	uxtb	r6, r6
    1a76:	545e      	strb	r6, [r3, r1]
    1a78:	b2c0      	uxtb	r0, r0
    1a7a:	5498      	strb	r0, [r3, r2]
			//pc.printf("rx:%d\r\n",rx);
			if(buffer.indice>=CIRCULAR_BUFFER_LENGTH){
    1a7c:	5c5b      	ldrb	r3, [r3, r1]
    1a7e:	b2db      	uxtb	r3, r3
    1a80:	2b31      	cmp	r3, #49	; 0x31
    1a82:	d903      	bls.n	1a8c <_Z19ISRNetworkReceptionh+0x40>
				buffer.indice=0;
    1a84:	2100      	movs	r1, #0
    1a86:	2332      	movs	r3, #50	; 0x32
    1a88:	4a28      	ldr	r2, [pc, #160]	; (1b2c <_Z19ISRNetworkReceptionh+0xe0>)
    1a8a:	54d1      	strb	r1, [r2, r3]
			}

			if(rx==HEADER){
    1a8c:	2f55      	cmp	r7, #85	; 0x55
    1a8e:	d120      	bne.n	1ad2 <_Z19ISRNetworkReceptionh+0x86>
				if(timeProt.synchroTime!=NULL){
    1a90:	2394      	movs	r3, #148	; 0x94
    1a92:	4a27      	ldr	r2, [pc, #156]	; (1b30 <_Z19ISRNetworkReceptionh+0xe4>)
    1a94:	58d0      	ldr	r0, [r2, r3]
    1a96:	2800      	cmp	r0, #0
    1a98:	d004      	beq.n	1aa4 <_Z19ISRNetworkReceptionh+0x58>
					xSemaphoreGiveFromISR(timeProt.synchroTime,NULL);
    1a9a:	2100      	movs	r1, #0
    1a9c:	2200      	movs	r2, #0
    1a9e:	2300      	movs	r3, #0
    1aa0:	4e24      	ldr	r6, [pc, #144]	; (1b34 <_Z19ISRNetworkReceptionh+0xe8>)
    1aa2:	47b0      	blx	r6
				}
				timeProt.waitIdentifier=true;
    1aa4:	4e22      	ldr	r6, [pc, #136]	; (1b30 <_Z19ISRNetworkReceptionh+0xe4>)
    1aa6:	2201      	movs	r2, #1
    1aa8:	2384      	movs	r3, #132	; 0x84
    1aaa:	54f2      	strb	r2, [r6, r3]

				#ifdef MASTERMODE
					Clock save;
					save.second=timeProt.saveTime[0].second;
    1aac:	6833      	ldr	r3, [r6, #0]
    1aae:	af01      	add	r7, sp, #4
    1ab0:	9301      	str	r3, [sp, #4]
					save.halfmillis=timeProt.saveTime[0].halfmillis;
    1ab2:	6873      	ldr	r3, [r6, #4]
    1ab4:	9302      	str	r3, [sp, #8]
					save.sign=timeProt.saveTime[0].sign;
    1ab6:	7a33      	ldrb	r3, [r6, #8]
    1ab8:	b2db      	uxtb	r3, r3
    1aba:	723b      	strb	r3, [r7, #8]
					readClock(&save);
    1abc:	1c38      	adds	r0, r7, #0
    1abe:	4b1e      	ldr	r3, [pc, #120]	; (1b38 <_Z19ISRNetworkReceptionh+0xec>)
    1ac0:	4798      	blx	r3
					timeProt.saveTime[0].second=save.second;
    1ac2:	9b01      	ldr	r3, [sp, #4]
    1ac4:	6033      	str	r3, [r6, #0]
					timeProt.saveTime[0].halfmillis=save.halfmillis;
    1ac6:	687b      	ldr	r3, [r7, #4]
    1ac8:	6073      	str	r3, [r6, #4]
					timeProt.saveTime[0].sign=save.sign;
    1aca:	7a3b      	ldrb	r3, [r7, #8]
    1acc:	b2db      	uxtb	r3, r3
    1ace:	7233      	strb	r3, [r6, #8]
    1ad0:	e01a      	b.n	1b08 <_Z19ISRNetworkReceptionh+0xbc>
				continue;
				//return;
			}
			
			#ifdef MASTERMODE
			if(timeProt.waitIdentifier==true){
    1ad2:	2384      	movs	r3, #132	; 0x84
    1ad4:	4a16      	ldr	r2, [pc, #88]	; (1b30 <_Z19ISRNetworkReceptionh+0xe4>)
    1ad6:	5cd3      	ldrb	r3, [r2, r3]
    1ad8:	2b00      	cmp	r3, #0
    1ada:	d015      	beq.n	1b08 <_Z19ISRNetworkReceptionh+0xbc>
				timeProt.waitIdentifier=false;
    1adc:	1c13      	adds	r3, r2, #0
    1ade:	2100      	movs	r1, #0
    1ae0:	2284      	movs	r2, #132	; 0x84
    1ae2:	5499      	strb	r1, [r3, r2]
				timeProt.waitType=true;
    1ae4:	3101      	adds	r1, #1
    1ae6:	3201      	adds	r2, #1
    1ae8:	5499      	strb	r1, [r3, r2]
				if(rx<MAX_SLAVE_CLOCK){
    1aea:	2f09      	cmp	r7, #9
    1aec:	d80c      	bhi.n	1b08 <_Z19ISRNetworkReceptionh+0xbc>
					timeProt.saveTime[rx].second=timeProt.saveTime[0].second;
    1aee:	6818      	ldr	r0, [r3, #0]
    1af0:	0079      	lsls	r1, r7, #1
    1af2:	19ca      	adds	r2, r1, r7
    1af4:	0092      	lsls	r2, r2, #2
    1af6:	50d0      	str	r0, [r2, r3]
					timeProt.saveTime[rx].halfmillis=timeProt.saveTime[0].halfmillis;
    1af8:	685a      	ldr	r2, [r3, #4]
    1afa:	19cf      	adds	r7, r1, r7
    1afc:	00bf      	lsls	r7, r7, #2
    1afe:	19df      	adds	r7, r3, r7
    1b00:	607a      	str	r2, [r7, #4]
    1b02:	e001      	b.n	1b08 <_Z19ISRNetworkReceptionh+0xbc>
	saveTimeRCrash=xTaskGetTickCount();
	if(((e & TRX_IRQ_TRX_END) == TRX_IRQ_TRX_END)||((e & TRX_IRQ_RX_START) == TRX_IRQ_RX_START))
	{
		
		#ifdef RADIO
		 while(radio.available()){
    1b04:	4c07      	ldr	r4, [pc, #28]	; (1b24 <_Z19ISRNetworkReceptionh+0xd8>)
    1b06:	4d0d      	ldr	r5, [pc, #52]	; (1b3c <_Z19ISRNetworkReceptionh+0xf0>)
    1b08:	1c20      	adds	r0, r4, #0
    1b0a:	47a8      	blx	r5
    1b0c:	2800      	cmp	r0, #0
    1b0e:	d1a8      	bne.n	1a62 <_Z19ISRNetworkReceptionh+0x16>
		
			//Enable_global_interrupt();
		 }
		
		 #endif
		  radio.flush();
    1b10:	4804      	ldr	r0, [pc, #16]	; (1b24 <_Z19ISRNetworkReceptionh+0xd8>)
    1b12:	4b0b      	ldr	r3, [pc, #44]	; (1b40 <_Z19ISRNetworkReceptionh+0xf4>)
    1b14:	4798      	blx	r3
	 }
	 
	 
}
    1b16:	b005      	add	sp, #20
    1b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b1a:	46c0      	nop			; (mov r8, r8)
    1b1c:	00000c51 	.word	0x00000c51
    1b20:	20000194 	.word	0x20000194
    1b24:	20003d88 	.word	0x20003d88
    1b28:	00002051 	.word	0x00002051
    1b2c:	20003d54 	.word	0x20003d54
    1b30:	200042cc 	.word	0x200042cc
    1b34:	00000719 	.word	0x00000719
    1b38:	0000167d 	.word	0x0000167d
    1b3c:	00002085 	.word	0x00002085
    1b40:	00002041 	.word	0x00002041

00001b44 <_Z16networkAvailablev>:
}

bool networkAvailable(void){


	if(buffer.currentIndice!=buffer.indice){
    1b44:	4a04      	ldr	r2, [pc, #16]	; (1b58 <_Z16networkAvailablev+0x14>)
    1b46:	2333      	movs	r3, #51	; 0x33
    1b48:	5cd3      	ldrb	r3, [r2, r3]
    1b4a:	2132      	movs	r1, #50	; 0x32
    1b4c:	5c50      	ldrb	r0, [r2, r1]
    1b4e:	1a18      	subs	r0, r3, r0
    1b50:	1e43      	subs	r3, r0, #1
    1b52:	4198      	sbcs	r0, r3
    1b54:	b2c0      	uxtb	r0, r0
	else{
			
		return false;
	}

}
    1b56:	4770      	bx	lr
    1b58:	20003d54 	.word	0x20003d54

00001b5c <_Z12networkFlushv>:
void networkFlush(void){
	//usart_disable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);//momo
	buffer.currentIndice=buffer.indice;
    1b5c:	4a03      	ldr	r2, [pc, #12]	; (1b6c <_Z12networkFlushv+0x10>)
    1b5e:	2332      	movs	r3, #50	; 0x32
    1b60:	5cd3      	ldrb	r3, [r2, r3]
    1b62:	b2db      	uxtb	r3, r3
    1b64:	2133      	movs	r1, #51	; 0x33
    1b66:	5453      	strb	r3, [r2, r1]
	//usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED); //momo
}
    1b68:	4770      	bx	lr
    1b6a:	46c0      	nop			; (mov r8, r8)
    1b6c:	20003d54 	.word	0x20003d54

00001b70 <_Z9networkTxPKhh>:
void networkTx(const uint8_t send[],const uint8_t length){
    1b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1b72:	1c07      	adds	r7, r0, #0
    1b74:	1c0e      	adds	r6, r1, #0
	#ifdef RADIO
		uint8_t i;
		radio.beginTransmission();
    1b76:	480b      	ldr	r0, [pc, #44]	; (1ba4 <_Z9networkTxPKhh+0x34>)
    1b78:	4b0b      	ldr	r3, [pc, #44]	; (1ba8 <_Z9networkTxPKhh+0x38>)
    1b7a:	4798      	blx	r3
		for(i=0;i<length;i++){
    1b7c:	2e00      	cmp	r6, #0
    1b7e:	d00c      	beq.n	1b9a <_Z9networkTxPKhh+0x2a>
    1b80:	1c3c      	adds	r4, r7, #0
    1b82:	1e75      	subs	r5, r6, #1
    1b84:	b2ed      	uxtb	r5, r5
    1b86:	3501      	adds	r5, #1
    1b88:	197d      	adds	r5, r7, r5
			
			radio.write(send[i]);
    1b8a:	4e06      	ldr	r6, [pc, #24]	; (1ba4 <_Z9networkTxPKhh+0x34>)
    1b8c:	4f07      	ldr	r7, [pc, #28]	; (1bac <_Z9networkTxPKhh+0x3c>)
    1b8e:	7821      	ldrb	r1, [r4, #0]
    1b90:	1c30      	adds	r0, r6, #0
    1b92:	47b8      	blx	r7
    1b94:	3401      	adds	r4, #1
}
void networkTx(const uint8_t send[],const uint8_t length){
	#ifdef RADIO
		uint8_t i;
		radio.beginTransmission();
		for(i=0;i<length;i++){
    1b96:	42ac      	cmp	r4, r5
    1b98:	d1f9      	bne.n	1b8e <_Z9networkTxPKhh+0x1e>
			
			radio.write(send[i]);
			
		}
		radio.endTransmission();
    1b9a:	4802      	ldr	r0, [pc, #8]	; (1ba4 <_Z9networkTxPKhh+0x34>)
    1b9c:	4b04      	ldr	r3, [pc, #16]	; (1bb0 <_Z9networkTxPKhh+0x40>)
    1b9e:	4798      	blx	r3
	#endif
}
    1ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1ba2:	46c0      	nop			; (mov r8, r8)
    1ba4:	20003d88 	.word	0x20003d88
    1ba8:	000020a5 	.word	0x000020a5
    1bac:	000021c9 	.word	0x000021c9
    1bb0:	000020fd 	.word	0x000020fd

00001bb4 <_Z11networkReadv>:
uint8_t networkRead(void){
    1bb4:	b510      	push	{r4, lr}
	uint8_t i =networkAvailable();
    1bb6:	4c0e      	ldr	r4, [pc, #56]	; (1bf0 <_Z11networkReadv+0x3c>)
    1bb8:	47a0      	blx	r4
	if(networkAvailable()){
    1bba:	47a0      	blx	r4
			buffer.currentIndice=0;
		}
		return recu; 
	}
	else{
		return 0;
    1bbc:	2300      	movs	r3, #0
		radio.endTransmission();
	#endif
}
uint8_t networkRead(void){
	uint8_t i =networkAvailable();
	if(networkAvailable()){
    1bbe:	2800      	cmp	r0, #0
    1bc0:	d013      	beq.n	1bea <_Z11networkReadv+0x36>
		uint8_t recu;
		recu=buffer.buffer[buffer.currentIndice];
    1bc2:	4b0c      	ldr	r3, [pc, #48]	; (1bf4 <_Z11networkReadv+0x40>)
    1bc4:	2133      	movs	r1, #51	; 0x33
    1bc6:	5c5a      	ldrb	r2, [r3, r1]
    1bc8:	b2d2      	uxtb	r2, r2
    1bca:	5c98      	ldrb	r0, [r3, r2]
    1bcc:	b2c0      	uxtb	r0, r0
		buffer.currentIndice++;
    1bce:	5c5a      	ldrb	r2, [r3, r1]
    1bd0:	3201      	adds	r2, #1
    1bd2:	b2d2      	uxtb	r2, r2
    1bd4:	545a      	strb	r2, [r3, r1]
		if(buffer.currentIndice>=CIRCULAR_BUFFER_LENGTH){
    1bd6:	5c5a      	ldrb	r2, [r3, r1]
    1bd8:	b2d2      	uxtb	r2, r2
			buffer.currentIndice=0;
		}
		return recu; 
    1bda:	1c03      	adds	r3, r0, #0
	uint8_t i =networkAvailable();
	if(networkAvailable()){
		uint8_t recu;
		recu=buffer.buffer[buffer.currentIndice];
		buffer.currentIndice++;
		if(buffer.currentIndice>=CIRCULAR_BUFFER_LENGTH){
    1bdc:	2a31      	cmp	r2, #49	; 0x31
    1bde:	d904      	bls.n	1bea <_Z11networkReadv+0x36>
			buffer.currentIndice=0;
    1be0:	2100      	movs	r1, #0
    1be2:	2333      	movs	r3, #51	; 0x33
    1be4:	4a03      	ldr	r2, [pc, #12]	; (1bf4 <_Z11networkReadv+0x40>)
    1be6:	54d1      	strb	r1, [r2, r3]
		}
		return recu; 
    1be8:	1c03      	adds	r3, r0, #0
	else{
		return 0;
	}

	
}
    1bea:	1c18      	adds	r0, r3, #0
    1bec:	bd10      	pop	{r4, pc}
    1bee:	46c0      	nop			; (mov r8, r8)
    1bf0:	00001b45 	.word	0x00001b45
    1bf4:	20003d54 	.word	0x20003d54

00001bf8 <_Z20configurationNetworkv>:

void configurationNetwork(){
    1bf8:	b510      	push	{r4, lr}
	hmi.printf("network config\r\n");
    1bfa:	480a      	ldr	r0, [pc, #40]	; (1c24 <_Z20configurationNetworkv+0x2c>)
    1bfc:	490a      	ldr	r1, [pc, #40]	; (1c28 <_Z20configurationNetworkv+0x30>)
    1bfe:	4b0b      	ldr	r3, [pc, #44]	; (1c2c <_Z20configurationNetworkv+0x34>)
    1c00:	4798      	blx	r3
	buffer.currentIndice=0;
    1c02:	4b0b      	ldr	r3, [pc, #44]	; (1c30 <_Z20configurationNetworkv+0x38>)
    1c04:	2200      	movs	r2, #0
    1c06:	2133      	movs	r1, #51	; 0x33
    1c08:	545a      	strb	r2, [r3, r1]
	buffer.indice=0;
    1c0a:	3901      	subs	r1, #1
    1c0c:	545a      	strb	r2, [r3, r1]
	#ifdef RADIO
	radio.attachIrq(ISRNetworkReception);
    1c0e:	4c09      	ldr	r4, [pc, #36]	; (1c34 <_Z20configurationNetworkv+0x3c>)
    1c10:	1c20      	adds	r0, r4, #0
    1c12:	4909      	ldr	r1, [pc, #36]	; (1c38 <_Z20configurationNetworkv+0x40>)
    1c14:	4b09      	ldr	r3, [pc, #36]	; (1c3c <_Z20configurationNetworkv+0x44>)
    1c16:	4798      	blx	r3
    radio.begin(RADIO_CHANNEL);
    1c18:	1c20      	adds	r0, r4, #0
    1c1a:	210c      	movs	r1, #12
    1c1c:	4b08      	ldr	r3, [pc, #32]	; (1c40 <_Z20configurationNetworkv+0x48>)
    1c1e:	4798      	blx	r3
	#endif
	

}
    1c20:	bd10      	pop	{r4, pc}
    1c22:	46c0      	nop			; (mov r8, r8)
    1c24:	20004594 	.word	0x20004594
    1c28:	0000eb3c 	.word	0x0000eb3c
    1c2c:	00004f49 	.word	0x00004f49
    1c30:	20003d54 	.word	0x20003d54
    1c34:	20003d88 	.word	0x20003d88
    1c38:	00001a4d 	.word	0x00001a4d
    1c3c:	00002039 	.word	0x00002039
    1c40:	00002029 	.word	0x00002029

00001c44 <_GLOBAL__sub_I_radio>:
    1c44:	b530      	push	{r4, r5, lr}
    1c46:	b085      	sub	sp, #20
#include "network.h"
/************************************************************************/
/* GLOBAL                                                               */
/************************************************************************/
#ifdef RADIO
cMxRadio radio(PB30,PC19,PC18,PB31,PB15,PA20,PB00);
    1c48:	4c0a      	ldr	r4, [pc, #40]	; (1c74 <_GLOBAL__sub_I_radio+0x30>)
    1c4a:	233f      	movs	r3, #63	; 0x3f
    1c4c:	9300      	str	r3, [sp, #0]
    1c4e:	3b10      	subs	r3, #16
    1c50:	9301      	str	r3, [sp, #4]
    1c52:	3b1b      	subs	r3, #27
    1c54:	9302      	str	r3, [sp, #8]
    1c56:	330c      	adds	r3, #12
    1c58:	9303      	str	r3, [sp, #12]
    1c5a:	1c20      	adds	r0, r4, #0
    1c5c:	213e      	movs	r1, #62	; 0x3e
    1c5e:	2253      	movs	r2, #83	; 0x53
    1c60:	3332      	adds	r3, #50	; 0x32
    1c62:	4d05      	ldr	r5, [pc, #20]	; (1c78 <_GLOBAL__sub_I_radio+0x34>)
    1c64:	47a8      	blx	r5
    1c66:	1c20      	adds	r0, r4, #0
    1c68:	4904      	ldr	r1, [pc, #16]	; (1c7c <_GLOBAL__sub_I_radio+0x38>)
    1c6a:	4a05      	ldr	r2, [pc, #20]	; (1c80 <_GLOBAL__sub_I_radio+0x3c>)
    1c6c:	4b05      	ldr	r3, [pc, #20]	; (1c84 <_GLOBAL__sub_I_radio+0x40>)
    1c6e:	4798      	blx	r3
	radio.attachIrq(ISRNetworkReception);
    radio.begin(RADIO_CHANNEL);
	#endif
	

}
    1c70:	b005      	add	sp, #20
    1c72:	bd30      	pop	{r4, r5, pc}
    1c74:	20003d88 	.word	0x20003d88
    1c78:	00001e65 	.word	0x00001e65
    1c7c:	00001e61 	.word	0x00001e61
    1c80:	200000b0 	.word	0x200000b0
    1c84:	00006655 	.word	0x00006655

00001c88 <main>:
#include <internalClock.h>
#include <ppsGPS.h>
#include <network.h>
#include <wdt_config.h>

int main (void ){
    1c88:	b570      	push	{r4, r5, r6, lr}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1c8a:	b672      	cpsid	i
    1c8c:	f3bf 8f5f 	dmb	sy
 * Disabled global interrupts in the device, preventing any enabled interrupt
 * handlers from executing.
 */
static inline void system_interrupt_disable_global(void)
{
    cpu_irq_disable();
    1c90:	4c17      	ldr	r4, [pc, #92]	; (1cf0 <main+0x68>)
    1c92:	2300      	movs	r3, #0
    1c94:	7023      	strb	r3, [r4, #0]
	 system_interrupt_disable_global();
    //configure HMI
    configureHMI();
    1c96:	4b17      	ldr	r3, [pc, #92]	; (1cf4 <main+0x6c>)
    1c98:	4798      	blx	r3
    //RTC configure
   configureInternalClock();
    1c9a:	4b17      	ldr	r3, [pc, #92]	; (1cf8 <main+0x70>)
    1c9c:	4798      	blx	r3
    //configure external intrerrupt for pps
    configurationPPS();
    1c9e:	4b17      	ldr	r3, [pc, #92]	; (1cfc <main+0x74>)
    1ca0:	4798      	blx	r3
    //configure the network of the time SYNCHRONISATION
	
    configurationNetwork();
    1ca2:	4b17      	ldr	r3, [pc, #92]	; (1d00 <main+0x78>)
    1ca4:	4798      	blx	r3
	wdt_config();
    1ca6:	4b17      	ldr	r3, [pc, #92]	; (1d04 <main+0x7c>)
    1ca8:	4798      	blx	r3
    // Initialize the demo..
    kernelConfig();
    1caa:	4b17      	ldr	r3, [pc, #92]	; (1d08 <main+0x80>)
    1cac:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
    cpu_irq_enable();
    1cae:	2301      	movs	r3, #1
    1cb0:	7023      	strb	r3, [r4, #0]
    1cb2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    1cb6:	b662      	cpsie	i
    //demask global interrupt
    system_interrupt_enable_global();
    hmi.printf("\r\n\r\n**********************************************************************\r\n");
    1cb8:	4d14      	ldr	r5, [pc, #80]	; (1d0c <main+0x84>)
    1cba:	1c28      	adds	r0, r5, #0
    1cbc:	4914      	ldr	r1, [pc, #80]	; (1d10 <main+0x88>)
    1cbe:	4c15      	ldr	r4, [pc, #84]	; (1d14 <main+0x8c>)
    1cc0:	47a0      	blx	r4
    hmi.printf("tick time: %lu ms\r\n",portTICK_RATE_MS);   
    1cc2:	1c28      	adds	r0, r5, #0
    1cc4:	4914      	ldr	r1, [pc, #80]	; (1d18 <main+0x90>)
    1cc6:	2201      	movs	r2, #1
    1cc8:	47a0      	blx	r4
    #ifdef MASTERMODE
        hmi.printf("Master clock\r\n");
    1cca:	1c28      	adds	r0, r5, #0
    1ccc:	4913      	ldr	r1, [pc, #76]	; (1d1c <main+0x94>)
    1cce:	47a0      	blx	r4
    #else
        hmi.printf("Slave Clock \r\n");
    #endif
    hmi.printf("end config application begin\r\n");
    1cd0:	1c28      	adds	r0, r5, #0
    1cd2:	4913      	ldr	r1, [pc, #76]	; (1d20 <main+0x98>)
    1cd4:	47a0      	blx	r4
    hmi.printf("\r\n**********************************************************************\r\n\r\n");
    1cd6:	1c28      	adds	r0, r5, #0
    1cd8:	4912      	ldr	r1, [pc, #72]	; (1d24 <main+0x9c>)
    1cda:	47a0      	blx	r4
    //start the scheduler
    vTaskStartScheduler();
    1cdc:	4b12      	ldr	r3, [pc, #72]	; (1d28 <main+0xa0>)
    1cde:	4798      	blx	r3
    while(1){//trap
		hmi.printf("trap!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n");
    1ce0:	4e0a      	ldr	r6, [pc, #40]	; (1d0c <main+0x84>)
    1ce2:	4d12      	ldr	r5, [pc, #72]	; (1d2c <main+0xa4>)
    1ce4:	4c0b      	ldr	r4, [pc, #44]	; (1d14 <main+0x8c>)
    1ce6:	1c30      	adds	r0, r6, #0
    1ce8:	1c29      	adds	r1, r5, #0
    1cea:	47a0      	blx	r4
#include <internalClock.h>
#include <ppsGPS.h>
#include <network.h>
#include <wdt_config.h>

int main (void ){
    1cec:	e7fb      	b.n	1ce6 <main+0x5e>
    1cee:	46c0      	nop			; (mov r8, r8)
    1cf0:	200000d0 	.word	0x200000d0
    1cf4:	00003b79 	.word	0x00003b79
    1cf8:	00001975 	.word	0x00001975
    1cfc:	00002d39 	.word	0x00002d39
    1d00:	00001bf9 	.word	0x00001bf9
    1d04:	000003c1 	.word	0x000003c1
    1d08:	00002c45 	.word	0x00002c45
    1d0c:	20004594 	.word	0x20004594
    1d10:	0000eb50 	.word	0x0000eb50
    1d14:	00004f49 	.word	0x00004f49
    1d18:	0000eba0 	.word	0x0000eba0
    1d1c:	0000ebb4 	.word	0x0000ebb4
    1d20:	0000ebc4 	.word	0x0000ebc4
    1d24:	0000ebe4 	.word	0x0000ebe4
    1d28:	00000be9 	.word	0x00000be9
    1d2c:	0000ec34 	.word	0x0000ec34

00001d30 <_ZN8cMxRadio14onReceiveFrameEhPhhah>:
 * @param frm array containing frame data
 * @param lqi link quality indicator
 * @param crc_fail boolean indicating whether the received frame failed FCS verification, not used
 */
uint8_t* cMxRadio::onReceiveFrame(uint8_t len, uint8_t* frm, uint8_t lqi, int8_t ed,uint8_t crc_fail)
{
    1d30:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d32:	4657      	mov	r7, sl
    1d34:	464e      	mov	r6, r9
    1d36:	4645      	mov	r5, r8
    1d38:	b4e0      	push	{r5, r6, r7}
    1d3a:	b082      	sub	sp, #8
    1d3c:	ac0a      	add	r4, sp, #40	; 0x28
    1d3e:	2500      	movs	r5, #0
    1d40:	5765      	ldrsb	r5, [r4, r5]
    1d42:	ac0b      	add	r4, sp, #44	; 0x2c
    1d44:	7824      	ldrb	r4, [r4, #0]
	if (crc_fail)
    1d46:	2c00      	cmp	r4, #0
    1d48:	d002      	beq.n	1d50 <_ZN8cMxRadio14onReceiveFrameEhPhhah+0x20>
		return rxRingBuffer;
    1d4a:	307c      	adds	r0, #124	; 0x7c
    1d4c:	30ff      	adds	r0, #255	; 0xff
    1d4e:	e06b      	b.n	1e28 <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xf8>
	lastLqi = lqi;
    1d50:	4c38      	ldr	r4, [pc, #224]	; (1e34 <_ZN8cMxRadio14onReceiveFrameEhPhhah+0x104>)
    1d52:	5503      	strb	r3, [r0, r4]
	//lastRssi=ed;
	if (hasAttachedRxEvent == 0)
    1d54:	4c38      	ldr	r4, [pc, #224]	; (1e38 <_ZN8cMxRadio14onReceiveFrameEhPhhah+0x108>)
    1d56:	5d04      	ldrb	r4, [r0, r4]
    1d58:	2c00      	cmp	r4, #0
    1d5a:	d15b      	bne.n	1e14 <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xe4>
	{
		// no event handler, so write it into the FIFO

		if (len >= HeadSize-1)
    1d5c:	2907      	cmp	r1, #7
    1d5e:	d817      	bhi.n	1d90 <_ZN8cMxRadio14onReceiveFrameEhPhhah+0x60>
		else
		{
			// frame header does not exist
			// copy everything

			for (uint8_t i = 0; i < len; i++)
    1d60:	2900      	cmp	r1, #0
    1d62:	d054      	beq.n	1e0e <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xde>
			{
				uint16_t j = ((uint16_t)((uint16_t)rxRingBufferHead + 1)) % ZR_FIFO_SIZE;
    1d64:	23fc      	movs	r3, #252	; 0xfc
    1d66:	33ff      	adds	r3, #255	; 0xff
    1d68:	5cc3      	ldrb	r3, [r0, r3]
    1d6a:	1c5c      	adds	r4, r3, #1
    1d6c:	257f      	movs	r5, #127	; 0x7f
    1d6e:	402c      	ands	r4, r5
				if (j != rxRingBufferTail)
    1d70:	357e      	adds	r5, #126	; 0x7e
    1d72:	35ff      	adds	r5, #255	; 0xff
    1d74:	5d45      	ldrb	r5, [r0, r5]
    1d76:	42a5      	cmp	r5, r4
    1d78:	d049      	beq.n	1e0e <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xde>
    1d7a:	1c17      	adds	r7, r2, #0
    1d7c:	3901      	subs	r1, #1
    1d7e:	b2c9      	uxtb	r1, r1
    1d80:	1852      	adds	r2, r2, r1
				{
					// push into FIFO
					rxRingBuffer[rxRingBufferHead] = frm[i];
					rxRingBufferHead = j;
    1d82:	21fc      	movs	r1, #252	; 0xfc
    1d84:	31ff      	adds	r1, #255	; 0xff
			// frame header does not exist
			// copy everything

			for (uint8_t i = 0; i < len; i++)
			{
				uint16_t j = ((uint16_t)((uint16_t)rxRingBufferHead + 1)) % ZR_FIFO_SIZE;
    1d86:	257f      	movs	r5, #127	; 0x7f
    1d88:	46ac      	mov	ip, r5
				if (j != rxRingBufferTail)
    1d8a:	26fe      	movs	r6, #254	; 0xfe
    1d8c:	0076      	lsls	r6, r6, #1
    1d8e:	e035      	b.n	1dfc <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xcc>
		if (len >= HeadSize-1)
		{
			// frame header exists
			// copy only payload

			for (uint8_t i = HeadSize; i < len - 2; i++)
    1d90:	1e8e      	subs	r6, r1, #2
    1d92:	2e09      	cmp	r6, #9
    1d94:	dd3b      	ble.n	1e0e <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xde>
			{
				uint16_t j = ((uint16_t)((uint16_t)rxRingBufferHead + 1)) % ZR_FIFO_SIZE;
    1d96:	23fc      	movs	r3, #252	; 0xfc
    1d98:	33ff      	adds	r3, #255	; 0xff
    1d9a:	5cc4      	ldrb	r4, [r0, r3]
    1d9c:	1c63      	adds	r3, r4, #1
    1d9e:	217f      	movs	r1, #127	; 0x7f
    1da0:	400b      	ands	r3, r1
				if (j != rxRingBufferTail)
    1da2:	317e      	adds	r1, #126	; 0x7e
    1da4:	31ff      	adds	r1, #255	; 0xff
    1da6:	5c41      	ldrb	r1, [r0, r1]
    1da8:	2509      	movs	r5, #9
    1daa:	4299      	cmp	r1, r3
    1dac:	d10a      	bne.n	1dc4 <_ZN8cMxRadio14onReceiveFrameEhPhhah+0x94>
    1dae:	e02e      	b.n	1e0e <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xde>
			// frame header exists
			// copy only payload

			for (uint8_t i = HeadSize; i < len - 2; i++)
			{
				uint16_t j = ((uint16_t)((uint16_t)rxRingBufferHead + 1)) % ZR_FIFO_SIZE;
    1db0:	4647      	mov	r7, r8
    1db2:	403b      	ands	r3, r7
    1db4:	3301      	adds	r3, #1
    1db6:	4667      	mov	r7, ip
    1db8:	403b      	ands	r3, r7
				if (j != rxRingBufferTail)
    1dba:	4657      	mov	r7, sl
    1dbc:	5dc7      	ldrb	r7, [r0, r7]
    1dbe:	429f      	cmp	r7, r3
    1dc0:	d109      	bne.n	1dd6 <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xa6>
    1dc2:	e024      	b.n	1e0e <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xde>
				{
					// push into FIFO
					rxRingBuffer[rxRingBufferHead] = frm[i];
					rxRingBufferHead = j;
    1dc4:	21fc      	movs	r1, #252	; 0xfc
    1dc6:	31ff      	adds	r1, #255	; 0xff
			// frame header exists
			// copy only payload

			for (uint8_t i = HeadSize; i < len - 2; i++)
			{
				uint16_t j = ((uint16_t)((uint16_t)rxRingBufferHead + 1)) % ZR_FIFO_SIZE;
    1dc8:	27ff      	movs	r7, #255	; 0xff
    1dca:	46b8      	mov	r8, r7
    1dcc:	3f80      	subs	r7, #128	; 0x80
    1dce:	46bc      	mov	ip, r7
				if (j != rxRingBufferTail)
    1dd0:	377e      	adds	r7, #126	; 0x7e
    1dd2:	37ff      	adds	r7, #255	; 0xff
    1dd4:	46ba      	mov	sl, r7
				{
					// push into FIFO
					rxRingBuffer[rxRingBufferHead] = frm[i];
    1dd6:	5d57      	ldrb	r7, [r2, r5]
    1dd8:	1904      	adds	r4, r0, r4
    1dda:	3479      	adds	r4, #121	; 0x79
    1ddc:	34ff      	adds	r4, #255	; 0xff
    1dde:	70e7      	strb	r7, [r4, #3]
					rxRingBufferHead = j;
    1de0:	b2dc      	uxtb	r4, r3
    1de2:	5444      	strb	r4, [r0, r1]
		if (len >= HeadSize-1)
		{
			// frame header exists
			// copy only payload

			for (uint8_t i = HeadSize; i < len - 2; i++)
    1de4:	3501      	adds	r5, #1
    1de6:	b2ed      	uxtb	r5, r5
    1de8:	42b5      	cmp	r5, r6
    1dea:	dbe1      	blt.n	1db0 <_ZN8cMxRadio14onReceiveFrameEhPhhah+0x80>
    1dec:	e00f      	b.n	1e0e <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xde>
			// frame header does not exist
			// copy everything

			for (uint8_t i = 0; i < len; i++)
			{
				uint16_t j = ((uint16_t)((uint16_t)rxRingBufferHead + 1)) % ZR_FIFO_SIZE;
    1dee:	3401      	adds	r4, #1
    1df0:	4665      	mov	r5, ip
    1df2:	402c      	ands	r4, r5
    1df4:	3701      	adds	r7, #1
				if (j != rxRingBufferTail)
    1df6:	5d85      	ldrb	r5, [r0, r6]
    1df8:	42a5      	cmp	r5, r4
    1dfa:	d008      	beq.n	1e0e <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xde>
				{
					// push into FIFO
					rxRingBuffer[rxRingBufferHead] = frm[i];
    1dfc:	783d      	ldrb	r5, [r7, #0]
    1dfe:	18c3      	adds	r3, r0, r3
    1e00:	3379      	adds	r3, #121	; 0x79
    1e02:	33ff      	adds	r3, #255	; 0xff
    1e04:	70dd      	strb	r5, [r3, #3]
					rxRingBufferHead = j;
    1e06:	b2e3      	uxtb	r3, r4
    1e08:	5443      	strb	r3, [r0, r1]
		else
		{
			// frame header does not exist
			// copy everything

			for (uint8_t i = 0; i < len; i++)
    1e0a:	4297      	cmp	r7, r2
    1e0c:	d1ef      	bne.n	1dee <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xbe>
					break;
				}
			}
		}

		return rxRingBuffer;
    1e0e:	307c      	adds	r0, #124	; 0x7c
    1e10:	30ff      	adds	r0, #255	; 0xff
    1e12:	e009      	b.n	1e28 <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xf8>
	}
	else
	{
		// user event is attached so call it
		return zrEventReceiveFrame(len, frm, lqi, ed,crc_fail);
    1e14:	2400      	movs	r4, #0
    1e16:	9400      	str	r4, [sp, #0]
    1e18:	24a1      	movs	r4, #161	; 0xa1
    1e1a:	00a4      	lsls	r4, r4, #2
    1e1c:	5904      	ldr	r4, [r0, r4]
    1e1e:	1c08      	adds	r0, r1, #0
    1e20:	1c11      	adds	r1, r2, #0
    1e22:	1c1a      	adds	r2, r3, #0
    1e24:	1c2b      	adds	r3, r5, #0
    1e26:	47a0      	blx	r4
	}
}
    1e28:	b002      	add	sp, #8
    1e2a:	bc1c      	pop	{r2, r3, r4}
    1e2c:	4690      	mov	r8, r2
    1e2e:	4699      	mov	r9, r3
    1e30:	46a2      	mov	sl, r4
    1e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e34:	0000027d 	.word	0x0000027d
    1e38:	0000027f 	.word	0x0000027f

00001e3c <_ZN8cMxRadio8onTxDoneE15radio_tx_done_t>:
 * this should not be called by the user
 *
 * @param x one of the radio_tx_done_t enumerations indicating transmission success
 */
void cMxRadio::onTxDone(radio_tx_done_t x)
{
    1e3c:	b510      	push	{r4, lr}
    1e3e:	1c04      	adds	r4, r0, #0
	if (hasAttachedTxEvent)
    1e40:	23a0      	movs	r3, #160	; 0xa0
    1e42:	009b      	lsls	r3, r3, #2
    1e44:	5cc3      	ldrb	r3, [r0, r3]
    1e46:	2b00      	cmp	r3, #0
    1e48:	d004      	beq.n	1e54 <_ZN8cMxRadio8onTxDoneE15radio_tx_done_t+0x18>
	{
		zrEventTxDone(x);
    1e4a:	23a2      	movs	r3, #162	; 0xa2
    1e4c:	009b      	lsls	r3, r3, #2
    1e4e:	58c3      	ldr	r3, [r0, r3]
    1e50:	1c08      	adds	r0, r1, #0
    1e52:	4798      	blx	r3
	}

	txIsBusy = 0;
    1e54:	2200      	movs	r2, #0
    1e56:	4b01      	ldr	r3, [pc, #4]	; (1e5c <_ZN8cMxRadio8onTxDoneE15radio_tx_done_t+0x20>)
    1e58:	54e2      	strb	r2, [r4, r3]
}
    1e5a:	bd10      	pop	{r4, pc}
    1e5c:	00000282 	.word	0x00000282

00001e60 <_ZN8cMxRadioD1Ev>:
volatile uint8_t txIsBusy = 0;


cMxRadio::~cMxRadio()
{
}
    1e60:	4770      	bx	lr
    1e62:	46c0      	nop			; (mov r8, r8)

00001e64 <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_>:
// empty constructor, should not be called by user
cMxRadio::cMxRadio(PinName mosi, PinName miso, PinName sclk, PinName cs, PinName rst, PinName slp, PinName irq)
    1e64:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e66:	4647      	mov	r7, r8
    1e68:	b480      	push	{r7}
    1e6a:	b086      	sub	sp, #24
    1e6c:	1c05      	adds	r5, r0, #0
    1e6e:	a80c      	add	r0, sp, #48	; 0x30
    1e70:	2600      	movs	r6, #0
    1e72:	5786      	ldrsb	r6, [r0, r6]
    1e74:	a80d      	add	r0, sp, #52	; 0x34
    1e76:	2700      	movs	r7, #0
    1e78:	57c7      	ldrsb	r7, [r0, r7]
    1e7a:	a80e      	add	r0, sp, #56	; 0x38
    1e7c:	7800      	ldrb	r0, [r0, #0]
    1e7e:	b240      	sxtb	r0, r0
    1e80:	4680      	mov	r8, r0
:m_spi(mosi, miso, sclk), m_cs(cs), reset_pin(rst), sleep_pin(slp)//,irq_pin(irq)
    1e82:	1c28      	adds	r0, r5, #0
    1e84:	3014      	adds	r0, #20
    1e86:	2401      	movs	r4, #1
    1e88:	4264      	negs	r4, r4
    1e8a:	9400      	str	r4, [sp, #0]
    1e8c:	4c2c      	ldr	r4, [pc, #176]	; (1f40 <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_+0xdc>)
    1e8e:	47a0      	blx	r4
public:
    /** Create a DigitalOut connected to the specified pin
     *
     *  @param pin DigitalOut pin to connect to
     */
    DigitalOut(PinName pin) : gpio() {
    1e90:	2400      	movs	r4, #0
    1e92:	23a8      	movs	r3, #168	; 0xa8
    1e94:	54ec      	strb	r4, [r5, r3]
    1e96:	1c28      	adds	r0, r5, #0
    1e98:	30a8      	adds	r0, #168	; 0xa8
    1e9a:	6044      	str	r4, [r0, #4]
    1e9c:	7204      	strb	r4, [r0, #8]
    1e9e:	7244      	strb	r4, [r0, #9]
    1ea0:	7284      	strb	r4, [r0, #10]
    1ea2:	60c4      	str	r4, [r0, #12]
    1ea4:	6104      	str	r4, [r0, #16]
    1ea6:	6144      	str	r4, [r0, #20]
    1ea8:	6184      	str	r4, [r0, #24]
        gpio_init_out(&gpio, pin);
    1eaa:	1c31      	adds	r1, r6, #0
    1eac:	4e25      	ldr	r6, [pc, #148]	; (1f44 <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_+0xe0>)
    1eae:	47b0      	blx	r6
public:
    /** Create a DigitalOut connected to the specified pin
     *
     *  @param pin DigitalOut pin to connect to
     */
    DigitalOut(PinName pin) : gpio() {
    1eb0:	23c4      	movs	r3, #196	; 0xc4
    1eb2:	54ec      	strb	r4, [r5, r3]
    1eb4:	1c28      	adds	r0, r5, #0
    1eb6:	30c4      	adds	r0, #196	; 0xc4
    1eb8:	6044      	str	r4, [r0, #4]
    1eba:	7204      	strb	r4, [r0, #8]
    1ebc:	7244      	strb	r4, [r0, #9]
    1ebe:	7284      	strb	r4, [r0, #10]
    1ec0:	60c4      	str	r4, [r0, #12]
    1ec2:	6104      	str	r4, [r0, #16]
    1ec4:	6144      	str	r4, [r0, #20]
    1ec6:	6184      	str	r4, [r0, #24]
        gpio_init_out(&gpio, pin);
    1ec8:	1c39      	adds	r1, r7, #0
    1eca:	47b0      	blx	r6
public:
    /** Create a DigitalOut connected to the specified pin
     *
     *  @param pin DigitalOut pin to connect to
     */
    DigitalOut(PinName pin) : gpio() {
    1ecc:	23e0      	movs	r3, #224	; 0xe0
    1ece:	54ec      	strb	r4, [r5, r3]
    1ed0:	1c28      	adds	r0, r5, #0
    1ed2:	30e0      	adds	r0, #224	; 0xe0
    1ed4:	6044      	str	r4, [r0, #4]
    1ed6:	7204      	strb	r4, [r0, #8]
    1ed8:	7244      	strb	r4, [r0, #9]
    1eda:	7284      	strb	r4, [r0, #10]
    1edc:	60c4      	str	r4, [r0, #12]
    1ede:	6104      	str	r4, [r0, #16]
    1ee0:	6144      	str	r4, [r0, #20]
    1ee2:	6184      	str	r4, [r0, #24]
        gpio_init_out(&gpio, pin);
    1ee4:	4641      	mov	r1, r8
    1ee6:	47b0      	blx	r6
{
	// default event handlers
	
	zrEventTxDone=0;
    1ee8:	23a2      	movs	r3, #162	; 0xa2
    1eea:	009b      	lsls	r3, r3, #2
    1eec:	50ec      	str	r4, [r5, r3]
	zrEventReceiveFrame=0;
    1eee:	3b04      	subs	r3, #4
    1ef0:	50ec      	str	r4, [r5, r3]
	temprssi=0;
    1ef2:	702c      	strb	r4, [r5, #0]
	setautotx=false;
    1ef4:	3308      	adds	r3, #8
    1ef6:	54ec      	strb	r4, [r5, r3]
	setautorx=false;
    1ef8:	4b13      	ldr	r3, [pc, #76]	; (1f48 <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_+0xe4>)
    1efa:	54ec      	strb	r4, [r5, r3]
	needack=false;
    1efc:	4b13      	ldr	r3, [pc, #76]	; (1f4c <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_+0xe8>)
    1efe:	54ec      	strb	r4, [r5, r3]
	usedBeginTransmission = 0;
    1f00:	4b13      	ldr	r3, [pc, #76]	; (1f50 <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_+0xec>)
    1f02:	54ec      	strb	r4, [r5, r3]
	hasAttachedTxEvent = 0;
    1f04:	3b01      	subs	r3, #1
    1f06:	54ec      	strb	r4, [r5, r3]
	hasAttachedRxEvent = 0;
    1f08:	4b12      	ldr	r3, [pc, #72]	; (1f54 <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_+0xf0>)
    1f0a:	54ec      	strb	r4, [r5, r3]
	lastLqi = 0;
    1f0c:	4b12      	ldr	r3, [pc, #72]	; (1f58 <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_+0xf4>)
    1f0e:	54ec      	strb	r4, [r5, r3]
	lastRssi = 0;
    1f10:	4b12      	ldr	r3, [pc, #72]	; (1f5c <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_+0xf8>)
    1f12:	54ec      	strb	r4, [r5, r3]
	txTmpBufferLength = 0;
    1f14:	3b02      	subs	r3, #2
    1f16:	54ec      	strb	r4, [r5, r3]
	rxRingBufferHead = 0;
    1f18:	23fc      	movs	r3, #252	; 0xfc
    1f1a:	33ff      	adds	r3, #255	; 0xff
    1f1c:	54ec      	strb	r4, [r5, r3]
	rxRingBufferTail = 0;
    1f1e:	3301      	adds	r3, #1
    1f20:	54ec      	strb	r4, [r5, r3]
	user_radio_tx_done=0;
	user_radio_receive_frame=0;
	user_radio_irq=0;
	user_radio_error=0;
	*/
	zr_attach_receive_frame(&cMxRadio::onReceiveFrame);
    1f22:	1c28      	adds	r0, r5, #0
    1f24:	490e      	ldr	r1, [pc, #56]	; (1f60 <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_+0xfc>)
    1f26:	2200      	movs	r2, #0
    1f28:	4b0e      	ldr	r3, [pc, #56]	; (1f64 <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_+0x100>)
    1f2a:	4798      	blx	r3
	zr_attach_tx_done(&cMxRadio::onTxDone);
    1f2c:	1c28      	adds	r0, r5, #0
    1f2e:	490e      	ldr	r1, [pc, #56]	; (1f68 <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_+0x104>)
    1f30:	2200      	movs	r2, #0
    1f32:	4b0e      	ldr	r3, [pc, #56]	; (1f6c <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_+0x108>)
    1f34:	4798      	blx	r3

}
    1f36:	1c28      	adds	r0, r5, #0
    1f38:	b006      	add	sp, #24
    1f3a:	bc04      	pop	{r2}
    1f3c:	4690      	mov	r8, r2
    1f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f40:	00004b89 	.word	0x00004b89
    1f44:	00004f95 	.word	0x00004f95
    1f48:	0000028d 	.word	0x0000028d
    1f4c:	0000028e 	.word	0x0000028e
    1f50:	00000281 	.word	0x00000281
    1f54:	0000027f 	.word	0x0000027f
    1f58:	0000027d 	.word	0x0000027d
    1f5c:	0000027e 	.word	0x0000027e
    1f60:	00001d31 	.word	0x00001d31
    1f64:	000022b5 	.word	0x000022b5
    1f68:	00001e3d 	.word	0x00001e3d
    1f6c:	000022cd 	.word	0x000022cd

00001f70 <_ZN8cMxRadio5beginEaPh>:
 *
 * @param chan channel number for the radio to use, 11 to 26
 * @param frameHeader HeadSize byte custom frame header
 */
void cMxRadio::begin(channel_t chan, uint8_t* frameHeader)
{
    1f70:	b570      	push	{r4, r5, r6, lr}
    1f72:	1c06      	adds	r6, r0, #0
    1f74:	1c0d      	adds	r5, r1, #0
    1f76:	1c14      	adds	r4, r2, #0
	radio_init(rxFrameBuffer, MAX_FRAME_SIZE);
    1f78:	1c01      	adds	r1, r0, #0
    1f7a:	31fc      	adds	r1, #252	; 0xfc
    1f7c:	227f      	movs	r2, #127	; 0x7f
    1f7e:	4b20      	ldr	r3, [pc, #128]	; (2000 <STACK_SIZE>)
    1f80:	4798      	blx	r3

	if (frameHeader)
    1f82:	2c00      	cmp	r4, #0
    1f84:	d00c      	beq.n	1fa0 <_ZN8cMxRadio5beginEaPh+0x30>
    1f86:	1c22      	adds	r2, r4, #0
    1f88:	1c33      	adds	r3, r6, #0
    1f8a:	33fe      	adds	r3, #254	; 0xfe
    1f8c:	33ff      	adds	r3, #255	; 0xff
    1f8e:	491d      	ldr	r1, [pc, #116]	; (2004 <STACK_SIZE+0x4>)
    1f90:	1870      	adds	r0, r6, r1
	{
		// copy custom frame header
		int i;
		for (i = 0; i < HeadSize; i++)
			txTmpBuffer[i] = frameHeader[i];
    1f92:	7811      	ldrb	r1, [r2, #0]
    1f94:	7019      	strb	r1, [r3, #0]
    1f96:	3201      	adds	r2, #1
    1f98:	3301      	adds	r3, #1

	if (frameHeader)
	{
		// copy custom frame header
		int i;
		for (i = 0; i < HeadSize; i++)
    1f9a:	4283      	cmp	r3, r0
    1f9c:	d1f9      	bne.n	1f92 <_ZN8cMxRadio5beginEaPh+0x22>
    1f9e:	e01b      	b.n	1fd8 <_ZN8cMxRadio5beginEaPh+0x68>
			txTmpBuffer[i] = frameHeader[i];
	}
	else
	{
		txTmpBuffer[0] = 0x41;
    1fa0:	2241      	movs	r2, #65	; 0x41
    1fa2:	23fe      	movs	r3, #254	; 0xfe
    1fa4:	33ff      	adds	r3, #255	; 0xff
    1fa6:	54f2      	strb	r2, [r6, r3]
		txTmpBuffer[1] = 0x88;
    1fa8:	3247      	adds	r2, #71	; 0x47
    1faa:	3301      	adds	r3, #1
    1fac:	54f2      	strb	r2, [r6, r3]
		txTmpBuffer[2] =  0;
    1fae:	2300      	movs	r3, #0
    1fb0:	4a15      	ldr	r2, [pc, #84]	; (2008 <STACK_SIZE+0x8>)
    1fb2:	54b3      	strb	r3, [r6, r2]
		txTmpBuffer[3]=0xCD;
    1fb4:	21cd      	movs	r1, #205	; 0xcd
    1fb6:	3201      	adds	r2, #1
    1fb8:	54b1      	strb	r1, [r6, r2]
		txTmpBuffer[4]=0xAB;
    1fba:	3922      	subs	r1, #34	; 0x22
    1fbc:	4a13      	ldr	r2, [pc, #76]	; (200c <STACK_SIZE+0xc>)
    1fbe:	54b1      	strb	r1, [r6, r2]
		txTmpBuffer[5] = 0xFF; //dest address low byte
    1fc0:	3a03      	subs	r2, #3
    1fc2:	3aff      	subs	r2, #255	; 0xff
    1fc4:	4912      	ldr	r1, [pc, #72]	; (2010 <STACK_SIZE+0x10>)
    1fc6:	5472      	strb	r2, [r6, r1]
		txTmpBuffer[6] = 0xFF; //dest address hight byte
    1fc8:	4912      	ldr	r1, [pc, #72]	; (2014 <STACK_SIZE+0x14>)
    1fca:	5472      	strb	r2, [r6, r1]
		txTmpBuffer[7] = 0x01;;
    1fcc:	2101      	movs	r1, #1
    1fce:	3206      	adds	r2, #6
    1fd0:	32ff      	adds	r2, #255	; 0xff
    1fd2:	54b1      	strb	r1, [r6, r2]
		txTmpBuffer[8] = 0x00;;
    1fd4:	4a10      	ldr	r2, [pc, #64]	; (2018 <STACK_SIZE+0x18>)
    1fd6:	54b3      	strb	r3, [r6, r2]
 */
typedef union radio_param_t
{
#if defined __cplusplus
public:
    radio_param_t(int8_t c) { channel = c; } /* also used for txpwr_t */
    1fd8:	b2ea      	uxtb	r2, r5
	}

	// set the channel
	radio_set_param(RP_CHANNEL(chan));
    1fda:	1c30      	adds	r0, r6, #0
    1fdc:	2100      	movs	r1, #0
    1fde:	4b0f      	ldr	r3, [pc, #60]	; (201c <STACK_SIZE+0x1c>)
    1fe0:	4798      	blx	r3

	// default to receiver
	if (setautorx)
    1fe2:	4b0f      	ldr	r3, [pc, #60]	; (2020 <STACK_SIZE+0x20>)
    1fe4:	5cf3      	ldrb	r3, [r6, r3]
    1fe6:	2b00      	cmp	r3, #0
    1fe8:	d004      	beq.n	1ff4 <_ZN8cMxRadio5beginEaPh+0x84>
		radio_set_state(STATE_RXAUTO);
    1fea:	1c30      	adds	r0, r6, #0
    1fec:	2104      	movs	r1, #4
    1fee:	4b0d      	ldr	r3, [pc, #52]	; (2024 <STACK_SIZE+0x24>)
    1ff0:	4798      	blx	r3
    1ff2:	e003      	b.n	1ffc <_ZN8cMxRadio5beginEaPh+0x8c>
	else
		radio_set_state(STATE_RX);
    1ff4:	1c30      	adds	r0, r6, #0
    1ff6:	2102      	movs	r1, #2
    1ff8:	4b0a      	ldr	r3, [pc, #40]	; (2024 <STACK_SIZE+0x24>)
    1ffa:	4798      	blx	r3

#ifdef ENABLE_DIG3_DIG4
	trx_bit_write(SR_PA_EXT_EN, 1);
#endif

}
    1ffc:	bd70      	pop	{r4, r5, r6, pc}
    1ffe:	46c0      	nop			; (mov r8, r8)
    2000:	000023e9 	.word	0x000023e9
    2004:	00000206 	.word	0x00000206
    2008:	000001ff 	.word	0x000001ff
    200c:	00000201 	.word	0x00000201
    2010:	00000202 	.word	0x00000202
    2014:	00000203 	.word	0x00000203
    2018:	00000205 	.word	0x00000205
    201c:	00002729 	.word	0x00002729
    2020:	0000028d 	.word	0x0000028d
    2024:	000024d9 	.word	0x000024d9

00002028 <_ZN8cMxRadio5beginEa>:
 * Then it sets the channel number and defaults to RX state.
 *
 * @param chan the channel number for the radio to use, 11 to 26
 */
void cMxRadio::begin(channel_t chan)
{
    2028:	b508      	push	{r3, lr}
	begin(chan, 0);
    202a:	2200      	movs	r2, #0
    202c:	4b01      	ldr	r3, [pc, #4]	; (2034 <_ZN8cMxRadio5beginEa+0xc>)
    202e:	4798      	blx	r3
}
    2030:	bd08      	pop	{r3, pc}
    2032:	46c0      	nop			; (mov r8, r8)
    2034:	00001f71 	.word	0x00001f71

00002038 <_ZN8cMxRadio9attachIrqEPFvhE>:
 *
 * @param funct the function pointer to the event handler
 */
void cMxRadio::attachIrq(void (*funct)(uint8_t))
{
	user_radio_irq = funct;
    2038:	23a5      	movs	r3, #165	; 0xa5
    203a:	009b      	lsls	r3, r3, #2
    203c:	50c1      	str	r1, [r0, r3]
}
    203e:	4770      	bx	lr

00002040 <_ZN8cMxRadio5flushEv>:
 *
 * Flush the RX FIFO ring buffer
 */
void cMxRadio::flush()
{
	rxRingBufferHead = rxRingBufferTail;
    2040:	23fe      	movs	r3, #254	; 0xfe
    2042:	005b      	lsls	r3, r3, #1
    2044:	5cc2      	ldrb	r2, [r0, r3]
    2046:	23fc      	movs	r3, #252	; 0xfc
    2048:	33ff      	adds	r3, #255	; 0xff
    204a:	54c2      	strb	r2, [r0, r3]
}
    204c:	4770      	bx	lr
    204e:	46c0      	nop			; (mov r8, r8)

00002050 <_ZN8cMxRadio4readEv>:
 * @return the next byte, or -1 if buffer is empty
 */
int16_t cMxRadio::read()
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (rxRingBufferHead == rxRingBufferTail)
    2050:	23fe      	movs	r3, #254	; 0xfe
    2052:	005b      	lsls	r3, r3, #1
    2054:	5cc3      	ldrb	r3, [r0, r3]
    2056:	22fc      	movs	r2, #252	; 0xfc
    2058:	32ff      	adds	r2, #255	; 0xff
    205a:	5c82      	ldrb	r2, [r0, r2]
    205c:	429a      	cmp	r2, r3
    205e:	d00b      	beq.n	2078 <_ZN8cMxRadio4readEv+0x28>
	{
		return -1;
	}
	else
	{
		uint8_t c = rxRingBuffer[rxRingBufferTail];
    2060:	18c2      	adds	r2, r0, r3
    2062:	3279      	adds	r2, #121	; 0x79
    2064:	32ff      	adds	r2, #255	; 0xff
    2066:	78d2      	ldrb	r2, [r2, #3]
		rxRingBufferTail = (rxRingBufferTail + 1) % ZR_FIFO_SIZE; // pop
    2068:	3301      	adds	r3, #1
    206a:	217f      	movs	r1, #127	; 0x7f
    206c:	400b      	ands	r3, r1
    206e:	317e      	adds	r1, #126	; 0x7e
    2070:	31ff      	adds	r1, #255	; 0xff
    2072:	5443      	strb	r3, [r0, r1]
		return c;
    2074:	b290      	uxth	r0, r2
    2076:	e000      	b.n	207a <_ZN8cMxRadio4readEv+0x2a>
int16_t cMxRadio::read()
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (rxRingBufferHead == rxRingBufferTail)
	{
		return -1;
    2078:	4801      	ldr	r0, [pc, #4]	; (2080 <_ZN8cMxRadio4readEv+0x30>)
    207a:	b200      	sxth	r0, r0
	{
		uint8_t c = rxRingBuffer[rxRingBufferTail];
		rxRingBufferTail = (rxRingBufferTail + 1) % ZR_FIFO_SIZE; // pop
		return c;
	}
}
    207c:	4770      	bx	lr
    207e:	46c0      	nop			; (mov r8, r8)
    2080:	0000ffff 	.word	0x0000ffff

00002084 <_ZN8cMxRadio9availableEv>:
 *
 * @return how many bytes are in the RX FIFO ring buffer
 */
int8_t cMxRadio::available()
{
	return ((int16_t)((int16_t)ZR_FIFO_SIZE + (int16_t)rxRingBufferHead - (int16_t)rxRingBufferTail)) % ZR_FIFO_SIZE;
    2084:	23fc      	movs	r3, #252	; 0xfc
    2086:	33ff      	adds	r3, #255	; 0xff
    2088:	5cc3      	ldrb	r3, [r0, r3]
    208a:	3380      	adds	r3, #128	; 0x80
    208c:	22fe      	movs	r2, #254	; 0xfe
    208e:	0052      	lsls	r2, r2, #1
    2090:	5c80      	ldrb	r0, [r0, r2]
    2092:	1a1b      	subs	r3, r3, r0
    2094:	17d8      	asrs	r0, r3, #31
    2096:	0e42      	lsrs	r2, r0, #25
    2098:	189b      	adds	r3, r3, r2
    209a:	207f      	movs	r0, #127	; 0x7f
    209c:	4003      	ands	r3, r0
    209e:	1a98      	subs	r0, r3, r2
    20a0:	b240      	sxtb	r0, r0
}
    20a2:	4770      	bx	lr

000020a4 <_ZN8cMxRadio17beginTransmissionEv>:
 * Non-immediate mode sends multiple bytes per frame
 *
 */
void cMxRadio::beginTransmission()
{
	usedBeginTransmission = 1;
    20a4:	2201      	movs	r2, #1
    20a6:	4b07      	ldr	r3, [pc, #28]	; (20c4 <_ZN8cMxRadio17beginTransmissionEv+0x20>)
    20a8:	54c2      	strb	r2, [r0, r3]
	txTmpBuffer[5]= 0xFF;
    20aa:	3b83      	subs	r3, #131	; 0x83
    20ac:	3bff      	subs	r3, #255	; 0xff
    20ae:	4a06      	ldr	r2, [pc, #24]	; (20c8 <_ZN8cMxRadio17beginTransmissionEv+0x24>)
    20b0:	5483      	strb	r3, [r0, r2]
	txTmpBuffer[6]= 0XFF;
    20b2:	4a06      	ldr	r2, [pc, #24]	; (20cc <_ZN8cMxRadio17beginTransmissionEv+0x28>)
    20b4:	5483      	strb	r3, [r0, r2]
	// add frame header
	txTmpBufferLength = HeadSize;
    20b6:	3afb      	subs	r2, #251	; 0xfb
    20b8:	3aff      	subs	r2, #255	; 0xff
    20ba:	337e      	adds	r3, #126	; 0x7e
    20bc:	33ff      	adds	r3, #255	; 0xff
    20be:	54c2      	strb	r2, [r0, r3]
}
    20c0:	4770      	bx	lr
    20c2:	46c0      	nop			; (mov r8, r8)
    20c4:	00000281 	.word	0x00000281
    20c8:	00000202 	.word	0x00000202
    20cc:	00000203 	.word	0x00000203

000020d0 <_ZN8cMxRadio10waitTxDoneEt>:
 * waits until the last transmission is complete, or timed out
 *
 * @param timeout iterations to countdown before timeout
 */
void cMxRadio::waitTxDone(uint16_t timeout)
{
    20d0:	b510      	push	{r4, lr}
    20d2:	b082      	sub	sp, #8
	volatile uint16_t cnt = timeout;
    20d4:	466b      	mov	r3, sp
    20d6:	80d9      	strh	r1, [r3, #6]
	while (txIsBusy && cnt--);
    20d8:	4c07      	ldr	r4, [pc, #28]	; (20f8 <_ZN8cMxRadio10waitTxDoneEt+0x28>)
    20da:	466b      	mov	r3, sp
    20dc:	1d99      	adds	r1, r3, #6
    20de:	5d03      	ldrb	r3, [r0, r4]
    20e0:	2b00      	cmp	r3, #0
    20e2:	d006      	beq.n	20f2 <_ZN8cMxRadio10waitTxDoneEt+0x22>
    20e4:	880b      	ldrh	r3, [r1, #0]
    20e6:	b29b      	uxth	r3, r3
    20e8:	1e5a      	subs	r2, r3, #1
    20ea:	b292      	uxth	r2, r2
    20ec:	800a      	strh	r2, [r1, #0]
    20ee:	2b00      	cmp	r3, #0
    20f0:	d1f5      	bne.n	20de <_ZN8cMxRadio10waitTxDoneEt+0xe>
}
    20f2:	b002      	add	sp, #8
    20f4:	bd10      	pop	{r4, pc}
    20f6:	46c0      	nop			; (mov r8, r8)
    20f8:	00000282 	.word	0x00000282

000020fc <_ZN8cMxRadio15endTransmissionEv>:
 *
 * Finalize the payload and transmits it when ready
 *
 */
void cMxRadio::endTransmission()
{
    20fc:	b538      	push	{r3, r4, r5, lr}
    20fe:	1c04      	adds	r4, r0, #0
	usedBeginTransmission = 0;
    2100:	2200      	movs	r2, #0
    2102:	4b28      	ldr	r3, [pc, #160]	; (21a4 <_ZN8cMxRadio15endTransmissionEv+0xa8>)
    2104:	54c2      	strb	r2, [r0, r3]

	// empty FCS field
	txTmpBufferLength += 2;
    2106:	229f      	movs	r2, #159	; 0x9f
    2108:	0092      	lsls	r2, r2, #2
    210a:	5c83      	ldrb	r3, [r0, r2]
    210c:	3302      	adds	r3, #2
    210e:	5483      	strb	r3, [r0, r2]

#ifdef ZR_TXWAIT_BEFORE
	waitTxDone(0xFFFF);
    2110:	4925      	ldr	r1, [pc, #148]	; (21a8 <_ZN8cMxRadio15endTransmissionEv+0xac>)
    2112:	4b26      	ldr	r3, [pc, #152]	; (21ac <_ZN8cMxRadio15endTransmissionEv+0xb0>)
    2114:	4798      	blx	r3
#endif
	txIsBusy = 1;
    2116:	2201      	movs	r2, #1
    2118:	4b25      	ldr	r3, [pc, #148]	; (21b0 <_ZN8cMxRadio15endTransmissionEv+0xb4>)
    211a:	54e2      	strb	r2, [r4, r3]
	if (setautotx)
    211c:	330a      	adds	r3, #10
    211e:	5ce3      	ldrb	r3, [r4, r3]
    2120:	2b00      	cmp	r3, #0
    2122:	d004      	beq.n	212e <_ZN8cMxRadio15endTransmissionEv+0x32>
		radio_set_state(STATE_TXAUTO);
    2124:	1c20      	adds	r0, r4, #0
    2126:	2103      	movs	r1, #3
    2128:	4b22      	ldr	r3, [pc, #136]	; (21b4 <_ZN8cMxRadio15endTransmissionEv+0xb8>)
    212a:	4798      	blx	r3
    212c:	e003      	b.n	2136 <_ZN8cMxRadio15endTransmissionEv+0x3a>
	else
		radio_set_state(STATE_TX);
    212e:	1c20      	adds	r0, r4, #0
    2130:	2101      	movs	r1, #1
    2132:	4b20      	ldr	r3, [pc, #128]	; (21b4 <_ZN8cMxRadio15endTransmissionEv+0xb8>)
    2134:	4798      	blx	r3
	ZR_RFTX_LED_ON();
	//if broadcase ,cant need ack
	if(txTmpBuffer[5]==0xff && txTmpBuffer[5]==0xff)
    2136:	4b20      	ldr	r3, [pc, #128]	; (21b8 <_ZN8cMxRadio15endTransmissionEv+0xbc>)
    2138:	5ce3      	ldrb	r3, [r4, r3]
    213a:	2bff      	cmp	r3, #255	; 0xff
    213c:	d106      	bne.n	214c <_ZN8cMxRadio15endTransmissionEv+0x50>
		txTmpBuffer[0]=txTmpBuffer[0]&0xdf;
    213e:	22fe      	movs	r2, #254	; 0xfe
    2140:	32ff      	adds	r2, #255	; 0xff
    2142:	5ca3      	ldrb	r3, [r4, r2]
    2144:	2120      	movs	r1, #32
    2146:	438b      	bics	r3, r1
    2148:	54a3      	strb	r3, [r4, r2]
    214a:	e00c      	b.n	2166 <_ZN8cMxRadio15endTransmissionEv+0x6a>
	else
	{
		if(!needack)
    214c:	4b1b      	ldr	r3, [pc, #108]	; (21bc <_ZN8cMxRadio15endTransmissionEv+0xc0>)
    214e:	5ce3      	ldrb	r3, [r4, r3]
    2150:	2b00      	cmp	r3, #0
    2152:	d104      	bne.n	215e <_ZN8cMxRadio15endTransmissionEv+0x62>
			txTmpBuffer[0] = 0x41;
    2154:	2241      	movs	r2, #65	; 0x41
    2156:	23fe      	movs	r3, #254	; 0xfe
    2158:	33ff      	adds	r3, #255	; 0xff
    215a:	54e2      	strb	r2, [r4, r3]
    215c:	e003      	b.n	2166 <_ZN8cMxRadio15endTransmissionEv+0x6a>
		else
			txTmpBuffer[0] = 0x61; //ack required
    215e:	2261      	movs	r2, #97	; 0x61
    2160:	23fe      	movs	r3, #254	; 0xfe
    2162:	33ff      	adds	r3, #255	; 0xff
    2164:	54e2      	strb	r2, [r4, r3]
	}
	radio_send_frame(txTmpBufferLength, txTmpBuffer, 0);
    2166:	239f      	movs	r3, #159	; 0x9f
    2168:	009b      	lsls	r3, r3, #2
    216a:	5ce1      	ldrb	r1, [r4, r3]
    216c:	1c20      	adds	r0, r4, #0
    216e:	1c22      	adds	r2, r4, #0
    2170:	32fe      	adds	r2, #254	; 0xfe
    2172:	32ff      	adds	r2, #255	; 0xff
    2174:	2300      	movs	r3, #0
    2176:	4d12      	ldr	r5, [pc, #72]	; (21c0 <_ZN8cMxRadio15endTransmissionEv+0xc4>)
    2178:	47a8      	blx	r5
#ifdef ZR_TXWAIT_AFTER
	waitTxDone(0xFFFF);
    217a:	1c20      	adds	r0, r4, #0
    217c:	490a      	ldr	r1, [pc, #40]	; (21a8 <_ZN8cMxRadio15endTransmissionEv+0xac>)
    217e:	4b0b      	ldr	r3, [pc, #44]	; (21ac <_ZN8cMxRadio15endTransmissionEv+0xb0>)
    2180:	4798      	blx	r3
	if (setautorx)
    2182:	4b10      	ldr	r3, [pc, #64]	; (21c4 <_ZN8cMxRadio15endTransmissionEv+0xc8>)
    2184:	5ce3      	ldrb	r3, [r4, r3]
    2186:	2b00      	cmp	r3, #0
    2188:	d004      	beq.n	2194 <_ZN8cMxRadio15endTransmissionEv+0x98>
		radio_set_state(STATE_RXAUTO);
    218a:	1c20      	adds	r0, r4, #0
    218c:	2104      	movs	r1, #4
    218e:	4b09      	ldr	r3, [pc, #36]	; (21b4 <_ZN8cMxRadio15endTransmissionEv+0xb8>)
    2190:	4798      	blx	r3
    2192:	e003      	b.n	219c <_ZN8cMxRadio15endTransmissionEv+0xa0>
	else
		radio_set_state(STATE_RX);
    2194:	1c20      	adds	r0, r4, #0
    2196:	2102      	movs	r1, #2
    2198:	4b06      	ldr	r3, [pc, #24]	; (21b4 <_ZN8cMxRadio15endTransmissionEv+0xb8>)
    219a:	4798      	blx	r3
	txIsBusy = 0;
    219c:	2200      	movs	r2, #0
    219e:	4b04      	ldr	r3, [pc, #16]	; (21b0 <_ZN8cMxRadio15endTransmissionEv+0xb4>)
    21a0:	54e2      	strb	r2, [r4, r3]
#endif
}
    21a2:	bd38      	pop	{r3, r4, r5, pc}
    21a4:	00000281 	.word	0x00000281
    21a8:	0000ffff 	.word	0x0000ffff
    21ac:	000020d1 	.word	0x000020d1
    21b0:	00000282 	.word	0x00000282
    21b4:	000024d9 	.word	0x000024d9
    21b8:	00000202 	.word	0x00000202
    21bc:	0000028e 	.word	0x0000028e
    21c0:	0000282d 	.word	0x0000282d
    21c4:	0000028d 	.word	0x0000028d

000021c8 <_ZN8cMxRadio5writeEh>:
 * If "beginTrasmission" was not used, then it transmits the single byte immediately (slower for multiple bytes)
 *
 * @param c character to be sent
 */
void cMxRadio::write(uint8_t c)
{
    21c8:	b538      	push	{r3, r4, r5, lr}
    21ca:	1c04      	adds	r4, r0, #0
	if (usedBeginTransmission)
    21cc:	4b2d      	ldr	r3, [pc, #180]	; (2284 <_ZN8cMxRadio5writeEh+0xbc>)
    21ce:	5cc3      	ldrb	r3, [r0, r3]
    21d0:	2b00      	cmp	r3, #0
    21d2:	d020      	beq.n	2216 <_ZN8cMxRadio5writeEh+0x4e>
	{
		if (txTmpBufferLength < ZR_TXTMPBUFF_SIZE - 2)
    21d4:	239f      	movs	r3, #159	; 0x9f
    21d6:	009b      	lsls	r3, r3, #2
    21d8:	5cc3      	ldrb	r3, [r0, r3]
    21da:	2b7c      	cmp	r3, #124	; 0x7c
    21dc:	d851      	bhi.n	2282 <_ZN8cMxRadio5writeEh+0xba>
		{
			txTmpBuffer[txTmpBufferLength] = c;
    21de:	18c2      	adds	r2, r0, r3
    21e0:	32f9      	adds	r2, #249	; 0xf9
    21e2:	32ff      	adds	r2, #255	; 0xff
    21e4:	7151      	strb	r1, [r2, #5]
			txTmpBufferLength++;
    21e6:	3301      	adds	r3, #1
    21e8:	b2db      	uxtb	r3, r3
    21ea:	229f      	movs	r2, #159	; 0x9f
    21ec:	0092      	lsls	r2, r2, #2
    21ee:	5483      	strb	r3, [r0, r2]

			if (txTmpBufferLength >= ZR_TXTMPBUFF_SIZE - 2)
    21f0:	2b7c      	cmp	r3, #124	; 0x7c
    21f2:	d946      	bls.n	2282 <_ZN8cMxRadio5writeEh+0xba>
			{
				// buffer is now full
				// just send it all out so we have more room
				endTransmission();
    21f4:	4b24      	ldr	r3, [pc, #144]	; (2288 <_ZN8cMxRadio5writeEh+0xc0>)
    21f6:	4798      	blx	r3
 * Non-immediate mode sends multiple bytes per frame
 *
 */
void cMxRadio::beginTransmission()
{
	usedBeginTransmission = 1;
    21f8:	2201      	movs	r2, #1
    21fa:	4b22      	ldr	r3, [pc, #136]	; (2284 <_ZN8cMxRadio5writeEh+0xbc>)
    21fc:	54e2      	strb	r2, [r4, r3]
	txTmpBuffer[5]= 0xFF;
    21fe:	3b83      	subs	r3, #131	; 0x83
    2200:	3bff      	subs	r3, #255	; 0xff
    2202:	4a22      	ldr	r2, [pc, #136]	; (228c <_ZN8cMxRadio5writeEh+0xc4>)
    2204:	54a3      	strb	r3, [r4, r2]
	txTmpBuffer[6]= 0XFF;
    2206:	4a22      	ldr	r2, [pc, #136]	; (2290 <_ZN8cMxRadio5writeEh+0xc8>)
    2208:	54a3      	strb	r3, [r4, r2]
	// add frame header
	txTmpBufferLength = HeadSize;
    220a:	3afb      	subs	r2, #251	; 0xfb
    220c:	3aff      	subs	r2, #255	; 0xff
    220e:	337e      	adds	r3, #126	; 0x7e
    2210:	33ff      	adds	r3, #255	; 0xff
    2212:	54e2      	strb	r2, [r4, r3]
    2214:	e035      	b.n	2282 <_ZN8cMxRadio5writeEh+0xba>
			}
		}
	}
	else
	{
		txTmpBuffer[HeadSize] = c; // set payload
    2216:	4b1f      	ldr	r3, [pc, #124]	; (2294 <_ZN8cMxRadio5writeEh+0xcc>)
    2218:	54c1      	strb	r1, [r0, r3]
		txTmpBuffer[HeadSize+1] = 0; // empty FCS
    221a:	2300      	movs	r3, #0
    221c:	4a1e      	ldr	r2, [pc, #120]	; (2298 <_ZN8cMxRadio5writeEh+0xd0>)
    221e:	5483      	strb	r3, [r0, r2]
		txTmpBuffer[HeadSize+2] = 0; // empty FCS
    2220:	3201      	adds	r2, #1
    2222:	5483      	strb	r3, [r0, r2]

#ifdef ZR_TXWAIT_BEFORE
		waitTxDone(0xFFFF);
    2224:	491d      	ldr	r1, [pc, #116]	; (229c <_ZN8cMxRadio5writeEh+0xd4>)
    2226:	4b1e      	ldr	r3, [pc, #120]	; (22a0 <_ZN8cMxRadio5writeEh+0xd8>)
    2228:	4798      	blx	r3
#endif
		txIsBusy = 1;
    222a:	2201      	movs	r2, #1
    222c:	4b1d      	ldr	r3, [pc, #116]	; (22a4 <_ZN8cMxRadio5writeEh+0xdc>)
    222e:	54e2      	strb	r2, [r4, r3]
		if (setautotx)
    2230:	330a      	adds	r3, #10
    2232:	5ce3      	ldrb	r3, [r4, r3]
    2234:	2b00      	cmp	r3, #0
    2236:	d004      	beq.n	2242 <_ZN8cMxRadio5writeEh+0x7a>
			radio_set_state(STATE_TXAUTO);
    2238:	1c20      	adds	r0, r4, #0
    223a:	2103      	movs	r1, #3
    223c:	4b1a      	ldr	r3, [pc, #104]	; (22a8 <_ZN8cMxRadio5writeEh+0xe0>)
    223e:	4798      	blx	r3
    2240:	e003      	b.n	224a <_ZN8cMxRadio5writeEh+0x82>
		else
			radio_set_state(STATE_TX);
    2242:	1c20      	adds	r0, r4, #0
    2244:	2101      	movs	r1, #1
    2246:	4b18      	ldr	r3, [pc, #96]	; (22a8 <_ZN8cMxRadio5writeEh+0xe0>)
    2248:	4798      	blx	r3
		ZR_RFTX_LED_ON();
		radio_send_frame(10, txTmpBuffer, 0);
    224a:	1c20      	adds	r0, r4, #0
    224c:	210a      	movs	r1, #10
    224e:	1c22      	adds	r2, r4, #0
    2250:	32fe      	adds	r2, #254	; 0xfe
    2252:	32ff      	adds	r2, #255	; 0xff
    2254:	2300      	movs	r3, #0
    2256:	4d15      	ldr	r5, [pc, #84]	; (22ac <_ZN8cMxRadio5writeEh+0xe4>)
    2258:	47a8      	blx	r5
#ifdef ZR_TXWAIT_AFTER
		waitTxDone(0xFFFF);
    225a:	1c20      	adds	r0, r4, #0
    225c:	490f      	ldr	r1, [pc, #60]	; (229c <_ZN8cMxRadio5writeEh+0xd4>)
    225e:	4b10      	ldr	r3, [pc, #64]	; (22a0 <_ZN8cMxRadio5writeEh+0xd8>)
    2260:	4798      	blx	r3
		if (setautorx)
    2262:	4b13      	ldr	r3, [pc, #76]	; (22b0 <_ZN8cMxRadio5writeEh+0xe8>)
    2264:	5ce3      	ldrb	r3, [r4, r3]
    2266:	2b00      	cmp	r3, #0
    2268:	d004      	beq.n	2274 <_ZN8cMxRadio5writeEh+0xac>
			radio_set_state(STATE_RXAUTO);
    226a:	1c20      	adds	r0, r4, #0
    226c:	2104      	movs	r1, #4
    226e:	4b0e      	ldr	r3, [pc, #56]	; (22a8 <_ZN8cMxRadio5writeEh+0xe0>)
    2270:	4798      	blx	r3
    2272:	e003      	b.n	227c <_ZN8cMxRadio5writeEh+0xb4>
		else
			radio_set_state(STATE_RX);
    2274:	1c20      	adds	r0, r4, #0
    2276:	2102      	movs	r1, #2
    2278:	4b0b      	ldr	r3, [pc, #44]	; (22a8 <_ZN8cMxRadio5writeEh+0xe0>)
    227a:	4798      	blx	r3
		txIsBusy = 0;
    227c:	2200      	movs	r2, #0
    227e:	4b09      	ldr	r3, [pc, #36]	; (22a4 <_ZN8cMxRadio5writeEh+0xdc>)
    2280:	54e2      	strb	r2, [r4, r3]
#endif
	}
}
    2282:	bd38      	pop	{r3, r4, r5, pc}
    2284:	00000281 	.word	0x00000281
    2288:	000020fd 	.word	0x000020fd
    228c:	00000202 	.word	0x00000202
    2290:	00000203 	.word	0x00000203
    2294:	00000206 	.word	0x00000206
    2298:	00000207 	.word	0x00000207
    229c:	0000ffff 	.word	0x0000ffff
    22a0:	000020d1 	.word	0x000020d1
    22a4:	00000282 	.word	0x00000282
    22a8:	000024d9 	.word	0x000024d9
    22ac:	0000282d 	.word	0x0000282d
    22b0:	0000028d 	.word	0x0000028d

000022b4 <_ZN8cMxRadio23zr_attach_receive_frameEMS_FPhhS0_hahE>:
{
	user_radio_irq = funct;
}

void cMxRadio::zr_attach_receive_frame(uint8_t* (cMxRadio::*funct)(uint8_t, uint8_t*, uint8_t, int8_t, uint8_t))
{
    22b4:	b082      	sub	sp, #8
    22b6:	466b      	mov	r3, sp
    22b8:	9100      	str	r1, [sp, #0]
    22ba:	9201      	str	r2, [sp, #4]
	user_radio_receive_frame = funct;
    22bc:	22a6      	movs	r2, #166	; 0xa6
    22be:	0092      	lsls	r2, r2, #2
    22c0:	4694      	mov	ip, r2
    22c2:	4460      	add	r0, ip
    22c4:	cb06      	ldmia	r3!, {r1, r2}
    22c6:	c006      	stmia	r0!, {r1, r2}
}
    22c8:	b002      	add	sp, #8
    22ca:	4770      	bx	lr

000022cc <_ZN8cMxRadio17zr_attach_tx_doneEMS_Fv15radio_tx_done_tE>:

void cMxRadio::zr_attach_tx_done(void (cMxRadio::*funct)(radio_tx_done_t))
{
    22cc:	b082      	sub	sp, #8
    22ce:	466b      	mov	r3, sp
    22d0:	9100      	str	r1, [sp, #0]
    22d2:	9201      	str	r2, [sp, #4]
	user_radio_tx_done = funct;
    22d4:	22a8      	movs	r2, #168	; 0xa8
    22d6:	0092      	lsls	r2, r2, #2
    22d8:	4694      	mov	ip, r2
    22da:	4460      	add	r0, ip
    22dc:	cb06      	ldmia	r3!, {r1, r2}
    22de:	c006      	stmia	r0!, {r1, r2}
}
    22e0:	b002      	add	sp, #8
    22e2:	4770      	bx	lr

000022e4 <_ZN8cMxRadio15usr_radio_errorE13radio_error_t>:
void cMxRadio::usr_radio_error(radio_error_t err)
{
    22e4:	b508      	push	{r3, lr}
	if (user_radio_error) user_radio_error(err);
    22e6:	23a4      	movs	r3, #164	; 0xa4
    22e8:	009b      	lsls	r3, r3, #2
    22ea:	58c3      	ldr	r3, [r0, r3]
    22ec:	2b00      	cmp	r3, #0
    22ee:	d001      	beq.n	22f4 <_ZN8cMxRadio15usr_radio_errorE13radio_error_t+0x10>
    22f0:	1c08      	adds	r0, r1, #0
    22f2:	4798      	blx	r3
}
    22f4:	bd08      	pop	{r3, pc}
    22f6:	46c0      	nop			; (mov r8, r8)

000022f8 <_ZN8cMxRadio13usr_radio_irqEh>:

void cMxRadio::usr_radio_irq(uint8_t cause)
{
    22f8:	b508      	push	{r3, lr}
	if (user_radio_irq) user_radio_irq(cause);
    22fa:	23a5      	movs	r3, #165	; 0xa5
    22fc:	009b      	lsls	r3, r3, #2
    22fe:	58c3      	ldr	r3, [r0, r3]
    2300:	2b00      	cmp	r3, #0
    2302:	d001      	beq.n	2308 <_ZN8cMxRadio13usr_radio_irqEh+0x10>
    2304:	1c08      	adds	r0, r1, #0
    2306:	4798      	blx	r3
}
    2308:	bd08      	pop	{r3, pc}
    230a:	46c0      	nop			; (mov r8, r8)

0000230c <_ZN8cMxRadio23usr_radio_receive_frameEhPhhah>:

uint8_t* cMxRadio::usr_radio_receive_frame(uint8_t len, uint8_t *frm, uint8_t lqi, int8_t ed,uint8_t crc_fail)
{
    230c:	b5f0      	push	{r4, r5, r6, r7, lr}
    230e:	b085      	sub	sp, #20
    2310:	9303      	str	r3, [sp, #12]
    2312:	ac0a      	add	r4, sp, #40	; 0x28
    2314:	2700      	movs	r7, #0
    2316:	57e7      	ldrsb	r7, [r4, r7]
    2318:	ac0b      	add	r4, sp, #44	; 0x2c
    231a:	7826      	ldrb	r6, [r4, #0]
	if (user_radio_receive_frame)
    231c:	24a6      	movs	r4, #166	; 0xa6
    231e:	00a4      	lsls	r4, r4, #2
    2320:	5905      	ldr	r5, [r0, r4]
    2322:	2d00      	cmp	r5, #0
    2324:	d105      	bne.n	2332 <_ZN8cMxRadio23usr_radio_receive_frameEhPhhah+0x26>
    2326:	3404      	adds	r4, #4
    2328:	5904      	ldr	r4, [r0, r4]
    232a:	07e3      	lsls	r3, r4, #31
    232c:	d406      	bmi.n	233c <_ZN8cMxRadio23usr_radio_receive_frameEhPhhah+0x30>
		return (this->*user_radio_receive_frame)(len, frm, lqi,ed, crc_fail);
	else return frm;
    232e:	1c10      	adds	r0, r2, #0
    2330:	e00d      	b.n	234e <_ZN8cMxRadio23usr_radio_receive_frameEhPhhah+0x42>
}

uint8_t* cMxRadio::usr_radio_receive_frame(uint8_t len, uint8_t *frm, uint8_t lqi, int8_t ed,uint8_t crc_fail)
{
	if (user_radio_receive_frame)
		return (this->*user_radio_receive_frame)(len, frm, lqi,ed, crc_fail);
    2332:	24a7      	movs	r4, #167	; 0xa7
    2334:	00a4      	lsls	r4, r4, #2
    2336:	5904      	ldr	r4, [r0, r4]
    2338:	07e3      	lsls	r3, r4, #31
    233a:	d502      	bpl.n	2342 <_ZN8cMxRadio23usr_radio_receive_frameEhPhhah+0x36>
    233c:	1063      	asrs	r3, r4, #1
    233e:	58c3      	ldr	r3, [r0, r3]
    2340:	595d      	ldr	r5, [r3, r5]
    2342:	9b03      	ldr	r3, [sp, #12]
    2344:	1064      	asrs	r4, r4, #1
    2346:	1900      	adds	r0, r0, r4
    2348:	9700      	str	r7, [sp, #0]
    234a:	9601      	str	r6, [sp, #4]
    234c:	47a8      	blx	r5
	else return frm;
}
    234e:	b005      	add	sp, #20
    2350:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2352:	46c0      	nop			; (mov r8, r8)

00002354 <_ZN8cMxRadio17usr_radio_tx_doneE15radio_tx_done_t>:

void cMxRadio::usr_radio_tx_done(radio_tx_done_t status)
{
    2354:	b510      	push	{r4, lr}
	if (user_radio_tx_done) (this->*user_radio_tx_done)(status);
    2356:	23a8      	movs	r3, #168	; 0xa8
    2358:	009b      	lsls	r3, r3, #2
    235a:	58c2      	ldr	r2, [r0, r3]
    235c:	2a00      	cmp	r2, #0
    235e:	d104      	bne.n	236a <_ZN8cMxRadio17usr_radio_tx_doneE15radio_tx_done_t+0x16>
    2360:	3304      	adds	r3, #4
    2362:	58c3      	ldr	r3, [r0, r3]
    2364:	07dc      	lsls	r4, r3, #31
    2366:	d405      	bmi.n	2374 <_ZN8cMxRadio17usr_radio_tx_doneE15radio_tx_done_t+0x20>
    2368:	e00a      	b.n	2380 <_ZN8cMxRadio17usr_radio_tx_doneE15radio_tx_done_t+0x2c>
    236a:	23a9      	movs	r3, #169	; 0xa9
    236c:	009b      	lsls	r3, r3, #2
    236e:	58c3      	ldr	r3, [r0, r3]
    2370:	07dc      	lsls	r4, r3, #31
    2372:	d502      	bpl.n	237a <_ZN8cMxRadio17usr_radio_tx_doneE15radio_tx_done_t+0x26>
    2374:	105c      	asrs	r4, r3, #1
    2376:	5904      	ldr	r4, [r0, r4]
    2378:	58a2      	ldr	r2, [r4, r2]
    237a:	105b      	asrs	r3, r3, #1
    237c:	18c0      	adds	r0, r0, r3
    237e:	4790      	blx	r2
}
    2380:	bd10      	pop	{r4, pc}
    2382:	46c0      	nop			; (mov r8, r8)

00002384 <_ZN8cMxRadio19radio_receive_frameEv>:
/**
 * @brief Frame reception
 *
 */
void cMxRadio::radio_receive_frame(void)
{
    2384:	b5f0      	push	{r4, r5, r6, r7, lr}
    2386:	b087      	sub	sp, #28
    2388:	1c04      	adds	r4, r0, #0

	uint8_t len, lqi, crc_fail;
	int8_t ed;

	/* @todo add RSSI_BASE_VALUE to get a dBm value */
	ed = (int8_t)trx_reg_read(RG_PHY_ED_LEVEL);
    238a:	2107      	movs	r1, #7
    238c:	4b12      	ldr	r3, [pc, #72]	; (23d8 <_ZN8cMxRadio19radio_receive_frameEv+0x54>)
    238e:	4798      	blx	r3
    2390:	9003      	str	r0, [sp, #12]
	len = trx_frame_read(radiostatus.rxframe, radiostatus.rxframesz, &lqi);
    2392:	7c22      	ldrb	r2, [r4, #16]
    2394:	270f      	movs	r7, #15
    2396:	ab02      	add	r3, sp, #8
    2398:	469c      	mov	ip, r3
    239a:	4467      	add	r7, ip
    239c:	1c20      	adds	r0, r4, #0
    239e:	68e1      	ldr	r1, [r4, #12]
    23a0:	1c3b      	adds	r3, r7, #0
    23a2:	4d0e      	ldr	r5, [pc, #56]	; (23dc <_ZN8cMxRadio19radio_receive_frameEv+0x58>)
    23a4:	47a8      	blx	r5
    23a6:	1c05      	adds	r5, r0, #0
	len &= ~0x80;

#if defined(SR_RX_CRC_VALID)
	crc_fail = trx_bit_read(SR_RX_CRC_VALID) ? 0 : 1;
    23a8:	1c20      	adds	r0, r4, #0
    23aa:	2106      	movs	r1, #6
    23ac:	2280      	movs	r2, #128	; 0x80
    23ae:	2307      	movs	r3, #7
    23b0:	4e0b      	ldr	r6, [pc, #44]	; (23e0 <_ZN8cMxRadio19radio_receive_frameEv+0x5c>)
    23b2:	47b0      	blx	r6
		crc = CRC_CCITT_UPDATE(crc, *frm++);
	}
	crc_fail = (crc == 0)? 0: 1;
#endif
radiostatus.rxframe = usr_radio_receive_frame(len, radiostatus.rxframe,
		lqi, ed, crc_fail);
    23b4:	217f      	movs	r1, #127	; 0x7f
    23b6:	4029      	ands	r1, r5
    23b8:	783b      	ldrb	r3, [r7, #0]
    23ba:	466a      	mov	r2, sp
    23bc:	260c      	movs	r6, #12
    23be:	5796      	ldrsb	r6, [r2, r6]
    23c0:	9600      	str	r6, [sp, #0]
	ed = (int8_t)trx_reg_read(RG_PHY_ED_LEVEL);
	len = trx_frame_read(radiostatus.rxframe, radiostatus.rxframesz, &lqi);
	len &= ~0x80;

#if defined(SR_RX_CRC_VALID)
	crc_fail = trx_bit_read(SR_RX_CRC_VALID) ? 0 : 1;
    23c2:	4242      	negs	r2, r0
    23c4:	4142      	adcs	r2, r0
		crc = CRC_CCITT_UPDATE(crc, *frm++);
	}
	crc_fail = (crc == 0)? 0: 1;
#endif
radiostatus.rxframe = usr_radio_receive_frame(len, radiostatus.rxframe,
		lqi, ed, crc_fail);
    23c6:	9201      	str	r2, [sp, #4]
    23c8:	1c20      	adds	r0, r4, #0
    23ca:	68e2      	ldr	r2, [r4, #12]
    23cc:	4d05      	ldr	r5, [pc, #20]	; (23e4 <_ZN8cMxRadio19radio_receive_frameEv+0x60>)
    23ce:	47a8      	blx	r5
    23d0:	60e0      	str	r0, [r4, #12]
}
    23d2:	b007      	add	sp, #28
    23d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    23d6:	46c0      	nop			; (mov r8, r8)
    23d8:	00002a09 	.word	0x00002a09
    23dc:	00002b49 	.word	0x00002b49
    23e0:	00002a75 	.word	0x00002a75
    23e4:	0000230d 	.word	0x0000230d

000023e8 <_ZN8cMxRadio10radio_initEPhh>:


/* === external functions ====================================================*/

void cMxRadio::radio_init(uint8_t * rxbuf, uint8_t rxbufsz)
{
    23e8:	b530      	push	{r4, r5, lr}
    23ea:	b083      	sub	sp, #12
    23ec:	1c04      	adds	r4, r0, #0
	trx_regval_t status;
	/* init cpu peripherals and global IRQ enable */
	radiostatus.rxframe = rxbuf;
    23ee:	60c1      	str	r1, [r0, #12]
	radiostatus.rxframesz = rxbufsz;
    23f0:	7402      	strb	r2, [r0, #16]
	trx_io_init(1000000);
    23f2:	492f      	ldr	r1, [pc, #188]	; (24b0 <_ZN8cMxRadio10radio_initEPhh+0xc8>)
    23f4:	4b2f      	ldr	r3, [pc, #188]	; (24b4 <_ZN8cMxRadio10radio_initEPhh+0xcc>)
    23f6:	4798      	blx	r3
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    23f8:	23c4      	movs	r3, #196	; 0xc4
    23fa:	56e3      	ldrsb	r3, [r4, r3]
    23fc:	3301      	adds	r3, #1
    23fe:	d104      	bne.n	240a <_ZN8cMxRadio10radio_initEPhh+0x22>
    2400:	482d      	ldr	r0, [pc, #180]	; (24b8 <_ZN8cMxRadio10radio_initEPhh+0xd0>)
    2402:	492e      	ldr	r1, [pc, #184]	; (24bc <_ZN8cMxRadio10radio_initEPhh+0xd4>)
    2404:	2228      	movs	r2, #40	; 0x28
    2406:	4b2e      	ldr	r3, [pc, #184]	; (24c0 <_ZN8cMxRadio10radio_initEPhh+0xd8>)
    2408:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    else
        *obj->OUTCLR = obj->mask;
    240a:	1c23      	adds	r3, r4, #0
    240c:	33c4      	adds	r3, #196	; 0xc4
    240e:	68da      	ldr	r2, [r3, #12]
    2410:	685b      	ldr	r3, [r3, #4]
    2412:	6013      	str	r3, [r2, #0]
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    2414:	23e0      	movs	r3, #224	; 0xe0
    2416:	56e3      	ldrsb	r3, [r4, r3]
    2418:	3301      	adds	r3, #1
    241a:	d104      	bne.n	2426 <_ZN8cMxRadio10radio_initEPhh+0x3e>
    241c:	4826      	ldr	r0, [pc, #152]	; (24b8 <_ZN8cMxRadio10radio_initEPhh+0xd0>)
    241e:	4927      	ldr	r1, [pc, #156]	; (24bc <_ZN8cMxRadio10radio_initEPhh+0xd4>)
    2420:	2228      	movs	r2, #40	; 0x28
    2422:	4b27      	ldr	r3, [pc, #156]	; (24c0 <_ZN8cMxRadio10radio_initEPhh+0xd8>)
    2424:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    else
        *obj->OUTCLR = obj->mask;
    2426:	1c23      	adds	r3, r4, #0
    2428:	33e0      	adds	r3, #224	; 0xe0
    242a:	68da      	ldr	r2, [r3, #12]
    242c:	685b      	ldr	r3, [r3, #4]
    242e:	6013      	str	r3, [r2, #0]
	/* transceiver initialization */

	reset_pin=0;//TRX_RESET_LOW();
	sleep_pin=0;//TRX_SLPTR_LOW();
	DELAY_US(TRX_RESET_TIME_US);
    2430:	2006      	movs	r0, #6
    2432:	4b24      	ldr	r3, [pc, #144]	; (24c4 <_ZN8cMxRadio10radio_initEPhh+0xdc>)
    2434:	4798      	blx	r3
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    2436:	23c4      	movs	r3, #196	; 0xc4
    2438:	56e3      	ldrsb	r3, [r4, r3]
    243a:	3301      	adds	r3, #1
    243c:	d104      	bne.n	2448 <_ZN8cMxRadio10radio_initEPhh+0x60>
    243e:	481e      	ldr	r0, [pc, #120]	; (24b8 <_ZN8cMxRadio10radio_initEPhh+0xd0>)
    2440:	491e      	ldr	r1, [pc, #120]	; (24bc <_ZN8cMxRadio10radio_initEPhh+0xd4>)
    2442:	2228      	movs	r2, #40	; 0x28
    2444:	4b1e      	ldr	r3, [pc, #120]	; (24c0 <_ZN8cMxRadio10radio_initEPhh+0xd8>)
    2446:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    2448:	1c23      	adds	r3, r4, #0
    244a:	33c4      	adds	r3, #196	; 0xc4
    244c:	691a      	ldr	r2, [r3, #16]
    244e:	685b      	ldr	r3, [r3, #4]
    2450:	6013      	str	r3, [r2, #0]


//	if (trx_reg_read(RG_MAN_ID_0)==31) //atmel
//		m_myled=0;
	/* disable IRQ and clear any pending IRQs */
	trx_reg_write(RG_IRQ_MASK, 0);
    2452:	1c20      	adds	r0, r4, #0
    2454:	210e      	movs	r1, #14
    2456:	2200      	movs	r2, #0
    2458:	4b1b      	ldr	r3, [pc, #108]	; (24c8 <_ZN8cMxRadio10radio_initEPhh+0xe0>)
    245a:	4798      	blx	r3

	trx_reg_read(RG_IRQ_STATUS);
    245c:	1c20      	adds	r0, r4, #0
    245e:	210f      	movs	r1, #15
    2460:	4b1a      	ldr	r3, [pc, #104]	; (24cc <_ZN8cMxRadio10radio_initEPhh+0xe4>)
    2462:	4798      	blx	r3
	DELAY_US(510);
#endif
	trx_reg_write(RG_TRX_STATE, CMD_FORCE_TRX_OFF);
	DELAY_US(510);
#else
	trx_bit_write(SR_TRX_CMD, CMD_TRX_OFF);
    2464:	2308      	movs	r3, #8
    2466:	9300      	str	r3, [sp, #0]
    2468:	1c20      	adds	r0, r4, #0
    246a:	2102      	movs	r1, #2
    246c:	221f      	movs	r2, #31
    246e:	2300      	movs	r3, #0
    2470:	4d17      	ldr	r5, [pc, #92]	; (24d0 <_ZN8cMxRadio10radio_initEPhh+0xe8>)
    2472:	47a8      	blx	r5
	DELAY_US(510);
    2474:	20ff      	movs	r0, #255	; 0xff
    2476:	0040      	lsls	r0, r0, #1
    2478:	4b12      	ldr	r3, [pc, #72]	; (24c4 <_ZN8cMxRadio10radio_initEPhh+0xdc>)
    247a:	4798      	blx	r3
#endif

	do
	{
		status = trx_bit_read(SR_TRX_STATUS);
    247c:	4d15      	ldr	r5, [pc, #84]	; (24d4 <_ZN8cMxRadio10radio_initEPhh+0xec>)
    247e:	1c20      	adds	r0, r4, #0
    2480:	2101      	movs	r1, #1
    2482:	221f      	movs	r2, #31
    2484:	2300      	movs	r3, #0
    2486:	47a8      	blx	r5
#else
	trx_bit_write(SR_TRX_CMD, CMD_TRX_OFF);
	DELAY_US(510);
#endif

	do
    2488:	2808      	cmp	r0, #8
    248a:	d1f8      	bne.n	247e <_ZN8cMxRadio10radio_initEPhh+0x96>
	{
		status = trx_bit_read(SR_TRX_STATUS);
	}
	while (status != TRX_OFF);
	trx_bit_write(SR_TX_AUTO_CRC_ON, 1);
    248c:	2301      	movs	r3, #1
    248e:	9300      	str	r3, [sp, #0]
    2490:	1c20      	adds	r0, r4, #0
    2492:	2104      	movs	r1, #4
    2494:	2220      	movs	r2, #32
    2496:	3304      	adds	r3, #4
    2498:	4d0d      	ldr	r5, [pc, #52]	; (24d0 <_ZN8cMxRadio10radio_initEPhh+0xe8>)
    249a:	47a8      	blx	r5
	trx_reg_write(RG_IRQ_MASK, TRX_IRQ_RX_START | TRX_IRQ_TRX_END);
    249c:	1c20      	adds	r0, r4, #0
    249e:	210e      	movs	r1, #14
    24a0:	220c      	movs	r2, #12
    24a2:	4b09      	ldr	r3, [pc, #36]	; (24c8 <_ZN8cMxRadio10radio_initEPhh+0xe0>)
    24a4:	4798      	blx	r3

	radiostatus.state = STATE_OFF;
    24a6:	2300      	movs	r3, #0
    24a8:	71e3      	strb	r3, [r4, #7]
	radiostatus.idle_state = STATE_OFF;
    24aa:	7223      	strb	r3, [r4, #8]
}
    24ac:	b003      	add	sp, #12
    24ae:	bd30      	pop	{r4, r5, pc}
    24b0:	000f4240 	.word	0x000f4240
    24b4:	00002901 	.word	0x00002901
    24b8:	0000eac0 	.word	0x0000eac0
    24bc:	0000ead8 	.word	0x0000ead8
    24c0:	00004f71 	.word	0x00004f71
    24c4:	00005051 	.word	0x00005051
    24c8:	000029a1 	.word	0x000029a1
    24cc:	00002a09 	.word	0x00002a09
    24d0:	00002a8d 	.word	0x00002a8d
    24d4:	00002a75 	.word	0x00002a75

000024d8 <_ZN8cMxRadio15radio_set_stateEh>:
	trx_bit_write(SR_TRX_CMD, CMD_FORCE_TRX_OFF);
	radio_set_state(state);
}

void cMxRadio::radio_set_state(volatile radio_state_t state)
{
    24d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    24da:	464f      	mov	r7, r9
    24dc:	b480      	push	{r7}
    24de:	b086      	sub	sp, #24
    24e0:	9002      	str	r0, [sp, #8]
    24e2:	230f      	movs	r3, #15
    24e4:	446b      	add	r3, sp
    24e6:	7019      	strb	r1, [r3, #0]
	volatile trx_regval_t cmd, expstatus, currstatus;
	uint8_t retries;
	bool do_sleep = false;

	switch(state)
    24e8:	781b      	ldrb	r3, [r3, #0]
    24ea:	b2db      	uxtb	r3, r3
    24ec:	2b05      	cmp	r3, #5
    24ee:	d83b      	bhi.n	2568 <_ZN8cMxRadio15radio_set_stateEh+0x90>
    24f0:	009b      	lsls	r3, r3, #2
    24f2:	4a65      	ldr	r2, [pc, #404]	; (2688 <_ZN8cMxRadio15radio_set_stateEh+0x1b0>)
    24f4:	58d3      	ldr	r3, [r2, r3]
    24f6:	469f      	mov	pc, r3
		TRX_TX_PA_DI();
#endif
#ifdef TRX_RX_LNA_EI
		TRX_RX_LNA_DI();
#endif
		expstatus = TRX_OFF;
    24f8:	2308      	movs	r3, #8
    24fa:	2216      	movs	r2, #22
    24fc:	446a      	add	r2, sp
    24fe:	7013      	strb	r3, [r2, #0]
		cmd = CMD_TRX_OFF;
    2500:	2215      	movs	r2, #21
    2502:	446a      	add	r2, sp
    2504:	7013      	strb	r3, [r2, #0]
		break;
    2506:	e0b4      	b.n	2672 <_ZN8cMxRadio15radio_set_stateEh+0x19a>
		if (radiostatus.rx_lna)
		{
			TRX_RX_LNA_EI();
		}
#endif
expstatus = RX_ON;
    2508:	2306      	movs	r3, #6
    250a:	2216      	movs	r2, #22
    250c:	446a      	add	r2, sp
    250e:	7013      	strb	r3, [r2, #0]
cmd = CMD_RX_ON;
    2510:	2215      	movs	r2, #21
    2512:	446a      	add	r2, sp
    2514:	7013      	strb	r3, [r2, #0]
break;
    2516:	e0ac      	b.n	2672 <_ZN8cMxRadio15radio_set_stateEh+0x19a>

	case STATE_TX:
		expstatus = PLL_ON;
    2518:	2309      	movs	r3, #9
    251a:	2216      	movs	r2, #22
    251c:	446a      	add	r2, sp
    251e:	7013      	strb	r3, [r2, #0]
		cmd = CMD_PLL_ON;
    2520:	2215      	movs	r2, #21
    2522:	446a      	add	r2, sp
    2524:	7013      	strb	r3, [r2, #0]
		break;
    2526:	e0a4      	b.n	2672 <_ZN8cMxRadio15radio_set_stateEh+0x19a>
if (radiostatus.rx_lna)
{
	TRX_RX_LNA_EI();
}
#endif
expstatus = RX_AACK_ON;
    2528:	2316      	movs	r3, #22
    252a:	2216      	movs	r2, #22
    252c:	446a      	add	r2, sp
    252e:	7013      	strb	r3, [r2, #0]
cmd = CMD_RX_AACK_ON;
    2530:	2215      	movs	r2, #21
    2532:	446a      	add	r2, sp
    2534:	7013      	strb	r3, [r2, #0]
break;
    2536:	e09c      	b.n	2672 <_ZN8cMxRadio15radio_set_stateEh+0x19a>

	case STATE_TXAUTO:
		expstatus = TX_ARET_ON;
    2538:	2319      	movs	r3, #25
    253a:	2216      	movs	r2, #22
    253c:	446a      	add	r2, sp
    253e:	7013      	strb	r3, [r2, #0]
		cmd = CMD_TX_ARET_ON;
    2540:	2215      	movs	r2, #21
    2542:	446a      	add	r2, sp
    2544:	7013      	strb	r3, [r2, #0]
		break;
    2546:	e094      	b.n	2672 <_ZN8cMxRadio15radio_set_stateEh+0x19a>
		TRX_TX_PA_DI();
#endif
#ifdef TRX_RX_LNA_EI
		TRX_RX_LNA_DI();
#endif
		expstatus = TRX_OFF;
    2548:	2208      	movs	r2, #8
    254a:	2316      	movs	r3, #22
    254c:	446b      	add	r3, sp
    254e:	701a      	strb	r2, [r3, #0]
		cmd = CMD_FORCE_TRX_OFF;
    2550:	3a05      	subs	r2, #5
    2552:	2315      	movs	r3, #21
    2554:	446b      	add	r3, sp
    2556:	701a      	strb	r2, [r3, #0]
		cmd = CMD_TRX_OFF;
		break;

	}

	if (STATE_SLEEP == radiostatus.state)
    2558:	9b02      	ldr	r3, [sp, #8]
    255a:	79db      	ldrb	r3, [r3, #7]
    255c:	2b05      	cmp	r3, #5
    255e:	d100      	bne.n	2562 <_ZN8cMxRadio15radio_set_stateEh+0x8a>
    2560:	e08e      	b.n	2680 <_ZN8cMxRadio15radio_set_stateEh+0x1a8>
#ifdef TRX_RX_LNA_EI
		TRX_RX_LNA_DI();
#endif
		expstatus = TRX_OFF;
		cmd = CMD_FORCE_TRX_OFF;
		do_sleep = true;
    2562:	2301      	movs	r3, #1
    2564:	4699      	mov	r9, r3
    2566:	e03d      	b.n	25e4 <_ZN8cMxRadio15radio_set_stateEh+0x10c>
 * @ingroup grpRadio
 */

void cMxRadio::radio_error(radio_error_t err)
{
	usr_radio_error(err);
    2568:	9802      	ldr	r0, [sp, #8]
    256a:	2104      	movs	r1, #4
    256c:	4b47      	ldr	r3, [pc, #284]	; (268c <_ZN8cMxRadio15radio_set_stateEh+0x1b4>)
    256e:	4798      	blx	r3
		do_sleep = true;
		break;

	default:
		radio_error(GENERAL_ERROR);
		expstatus = TRX_OFF;
    2570:	2308      	movs	r3, #8
    2572:	2216      	movs	r2, #22
    2574:	446a      	add	r2, sp
    2576:	7013      	strb	r3, [r2, #0]
		cmd = CMD_TRX_OFF;
    2578:	2215      	movs	r2, #21
    257a:	446a      	add	r2, sp
    257c:	7013      	strb	r3, [r2, #0]
		break;
    257e:	e078      	b.n	2672 <_ZN8cMxRadio15radio_set_stateEh+0x19a>
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    2580:	23e0      	movs	r3, #224	; 0xe0
    2582:	9a02      	ldr	r2, [sp, #8]
    2584:	56d3      	ldrsb	r3, [r2, r3]
    2586:	3301      	adds	r3, #1
    2588:	d104      	bne.n	2594 <_ZN8cMxRadio15radio_set_stateEh+0xbc>
    258a:	4841      	ldr	r0, [pc, #260]	; (2690 <_ZN8cMxRadio15radio_set_stateEh+0x1b8>)
    258c:	4941      	ldr	r1, [pc, #260]	; (2694 <_ZN8cMxRadio15radio_set_stateEh+0x1bc>)
    258e:	2228      	movs	r2, #40	; 0x28
    2590:	4b41      	ldr	r3, [pc, #260]	; (2698 <_ZN8cMxRadio15radio_set_stateEh+0x1c0>)
    2592:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    else
        *obj->OUTCLR = obj->mask;
    2594:	9b02      	ldr	r3, [sp, #8]
    2596:	33e0      	adds	r3, #224	; 0xe0
    2598:	68da      	ldr	r2, [r3, #12]
    259a:	685b      	ldr	r3, [r3, #4]
    259c:	6013      	str	r3, [r2, #0]
		 * be polled.  The state reads as 0b0011111 ("state transition
		 * in progress") while the transceiver is still in its startup
		 * phase, which does not match any of the "expstatus" values,
		 * so polling just continues.
		 */
		DELAY_US(500);
    259e:	20fa      	movs	r0, #250	; 0xfa
    25a0:	0040      	lsls	r0, r0, #1
    25a2:	4b3e      	ldr	r3, [pc, #248]	; (269c <_ZN8cMxRadio15radio_set_stateEh+0x1c4>)
    25a4:	4798      	blx	r3
    25a6:	2464      	movs	r4, #100	; 0x64
		 * to be enough under all circumstances.
		 */
		retries = 100;
		do
		{
			currstatus = trx_bit_read(SR_TRX_STATUS);
    25a8:	4f3d      	ldr	r7, [pc, #244]	; (26a0 <_ZN8cMxRadio15radio_set_stateEh+0x1c8>)
    25aa:	2517      	movs	r5, #23
    25ac:	446d      	add	r5, sp
			 */
			if (TRX_OFF == currstatus)
			{
				break;
			}
			DELAY_US(50);
    25ae:	4e3b      	ldr	r6, [pc, #236]	; (269c <_ZN8cMxRadio15radio_set_stateEh+0x1c4>)
		 * to be enough under all circumstances.
		 */
		retries = 100;
		do
		{
			currstatus = trx_bit_read(SR_TRX_STATUS);
    25b0:	9802      	ldr	r0, [sp, #8]
    25b2:	2101      	movs	r1, #1
    25b4:	221f      	movs	r2, #31
    25b6:	2300      	movs	r3, #0
    25b8:	47b8      	blx	r7
    25ba:	7028      	strb	r0, [r5, #0]
			/*
			 * Sleep could only be entered from TRX_OFF, so that's
			 * what is expected again.
			 */
			if (TRX_OFF == currstatus)
    25bc:	782b      	ldrb	r3, [r5, #0]
    25be:	2b08      	cmp	r3, #8
    25c0:	d005      	beq.n	25ce <_ZN8cMxRadio15radio_set_stateEh+0xf6>
			{
				break;
			}
			DELAY_US(50);
    25c2:	2032      	movs	r0, #50	; 0x32
    25c4:	47b0      	blx	r6
    25c6:	3c01      	subs	r4, #1
    25c8:	b2e4      	uxtb	r4, r4
		 * to be charged by the voltage regulator.  Give the crystal
		 * oscillator some time to start up.  5 ms (100 * 50 us) ought
		 * to be enough under all circumstances.
		 */
		retries = 100;
		do
    25ca:	2c00      	cmp	r4, #0
    25cc:	d1f0      	bne.n	25b0 <_ZN8cMxRadio15radio_set_stateEh+0xd8>
			}
			DELAY_US(50);
		}
		while (--retries);

		if (currstatus != TRX_OFF)
    25ce:	2317      	movs	r3, #23
    25d0:	446b      	add	r3, sp
    25d2:	781b      	ldrb	r3, [r3, #0]
    25d4:	2200      	movs	r2, #0
    25d6:	4691      	mov	r9, r2
    25d8:	2b08      	cmp	r3, #8
    25da:	d003      	beq.n	25e4 <_ZN8cMxRadio15radio_set_stateEh+0x10c>
 * @ingroup grpRadio
 */

void cMxRadio::radio_error(radio_error_t err)
{
	usr_radio_error(err);
    25dc:	9802      	ldr	r0, [sp, #8]
    25de:	2101      	movs	r1, #1
    25e0:	4b2a      	ldr	r3, [pc, #168]	; (268c <_ZN8cMxRadio15radio_set_stateEh+0x1b4>)
    25e2:	4798      	blx	r3
		{
			/* radio didn't wake up */
			radio_error(STATE_SET_FAILED);
		}
	}
	trx_bit_write(SR_TRX_CMD, cmd);
    25e4:	2315      	movs	r3, #21
    25e6:	446b      	add	r3, sp
    25e8:	781b      	ldrb	r3, [r3, #0]
    25ea:	9300      	str	r3, [sp, #0]
    25ec:	9802      	ldr	r0, [sp, #8]
    25ee:	2102      	movs	r1, #2
    25f0:	221f      	movs	r2, #31
    25f2:	2300      	movs	r3, #0
    25f4:	4c2b      	ldr	r4, [pc, #172]	; (26a4 <_ZN8cMxRadio15radio_set_stateEh+0x1cc>)
    25f6:	47a0      	blx	r4
    25f8:	248c      	movs	r4, #140	; 0x8c

	retries = 140;              /* enough to await an ongoing frame
	 * reception */
	do
	{
		currstatus = trx_bit_read(SR_TRX_STATUS);
    25fa:	4f29      	ldr	r7, [pc, #164]	; (26a0 <_ZN8cMxRadio15radio_set_stateEh+0x1c8>)
    25fc:	2517      	movs	r5, #23
    25fe:	446d      	add	r5, sp
		if (expstatus == currstatus)
		{
			break;
		}
		/** @todo must wait longer for 790/868/900 MHz radios */
		DELAY_US(32);
    2600:	4e26      	ldr	r6, [pc, #152]	; (269c <_ZN8cMxRadio15radio_set_stateEh+0x1c4>)

	retries = 140;              /* enough to await an ongoing frame
	 * reception */
	do
	{
		currstatus = trx_bit_read(SR_TRX_STATUS);
    2602:	9802      	ldr	r0, [sp, #8]
    2604:	2101      	movs	r1, #1
    2606:	221f      	movs	r2, #31
    2608:	2300      	movs	r3, #0
    260a:	47b8      	blx	r7
    260c:	7028      	strb	r0, [r5, #0]
		if (expstatus == currstatus)
    260e:	2316      	movs	r3, #22
    2610:	446b      	add	r3, sp
    2612:	781b      	ldrb	r3, [r3, #0]
    2614:	782a      	ldrb	r2, [r5, #0]
    2616:	b2db      	uxtb	r3, r3
    2618:	4293      	cmp	r3, r2
    261a:	d005      	beq.n	2628 <_ZN8cMxRadio15radio_set_stateEh+0x150>
		{
			break;
		}
		/** @todo must wait longer for 790/868/900 MHz radios */
		DELAY_US(32);
    261c:	2020      	movs	r0, #32
    261e:	47b0      	blx	r6
    2620:	3c01      	subs	r4, #1
    2622:	b2e4      	uxtb	r4, r4
	}
	trx_bit_write(SR_TRX_CMD, cmd);

	retries = 140;              /* enough to await an ongoing frame
	 * reception */
	do
    2624:	2c00      	cmp	r4, #0
    2626:	d1ec      	bne.n	2602 <_ZN8cMxRadio15radio_set_stateEh+0x12a>
		/** @todo must wait longer for 790/868/900 MHz radios */
		DELAY_US(32);
	}
	while (--retries);

	if (expstatus != currstatus)
    2628:	2316      	movs	r3, #22
    262a:	446b      	add	r3, sp
    262c:	781b      	ldrb	r3, [r3, #0]
    262e:	2217      	movs	r2, #23
    2630:	446a      	add	r2, sp
    2632:	7812      	ldrb	r2, [r2, #0]
    2634:	b2db      	uxtb	r3, r3
    2636:	4293      	cmp	r3, r2
    2638:	d003      	beq.n	2642 <_ZN8cMxRadio15radio_set_stateEh+0x16a>
 * @ingroup grpRadio
 */

void cMxRadio::radio_error(radio_error_t err)
{
	usr_radio_error(err);
    263a:	9802      	ldr	r0, [sp, #8]
    263c:	2101      	movs	r1, #1
    263e:	4b13      	ldr	r3, [pc, #76]	; (268c <_ZN8cMxRadio15radio_set_stateEh+0x1b4>)
    2640:	4798      	blx	r3
	if (expstatus != currstatus)
	{
		radio_error(STATE_SET_FAILED);
	}

	if (do_sleep)
    2642:	464b      	mov	r3, r9
    2644:	2b00      	cmp	r3, #0
    2646:	d00e      	beq.n	2666 <_ZN8cMxRadio15radio_set_stateEh+0x18e>
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    2648:	23e0      	movs	r3, #224	; 0xe0
    264a:	9a02      	ldr	r2, [sp, #8]
    264c:	56d3      	ldrsb	r3, [r2, r3]
    264e:	3301      	adds	r3, #1
    2650:	d104      	bne.n	265c <_ZN8cMxRadio15radio_set_stateEh+0x184>
    2652:	480f      	ldr	r0, [pc, #60]	; (2690 <_ZN8cMxRadio15radio_set_stateEh+0x1b8>)
    2654:	490f      	ldr	r1, [pc, #60]	; (2694 <_ZN8cMxRadio15radio_set_stateEh+0x1bc>)
    2656:	2228      	movs	r2, #40	; 0x28
    2658:	4b0f      	ldr	r3, [pc, #60]	; (2698 <_ZN8cMxRadio15radio_set_stateEh+0x1c0>)
    265a:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    265c:	9b02      	ldr	r3, [sp, #8]
    265e:	33e0      	adds	r3, #224	; 0xe0
    2660:	691a      	ldr	r2, [r3, #16]
    2662:	685b      	ldr	r3, [r3, #4]
    2664:	6013      	str	r3, [r2, #0]
	{
		sleep_pin=1;//TRX_SLPTR_HIGH();
	}

	radiostatus.state = state;
    2666:	230f      	movs	r3, #15
    2668:	446b      	add	r3, sp
    266a:	781b      	ldrb	r3, [r3, #0]
    266c:	9a02      	ldr	r2, [sp, #8]
    266e:	71d3      	strb	r3, [r2, #7]
    2670:	e006      	b.n	2680 <_ZN8cMxRadio15radio_set_stateEh+0x1a8>
		cmd = CMD_TRX_OFF;
		break;

	}

	if (STATE_SLEEP == radiostatus.state)
    2672:	9b02      	ldr	r3, [sp, #8]
    2674:	79db      	ldrb	r3, [r3, #7]
    2676:	2b05      	cmp	r3, #5
    2678:	d082      	beq.n	2580 <_ZN8cMxRadio15radio_set_stateEh+0xa8>
    267a:	2300      	movs	r3, #0
    267c:	4699      	mov	r9, r3
    267e:	e7b1      	b.n	25e4 <_ZN8cMxRadio15radio_set_stateEh+0x10c>
	{
		sleep_pin=1;//TRX_SLPTR_HIGH();
	}

	radiostatus.state = state;
}
    2680:	b006      	add	sp, #24
    2682:	bc04      	pop	{r2}
    2684:	4691      	mov	r9, r2
    2686:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2688:	0000ec68 	.word	0x0000ec68
    268c:	000022e5 	.word	0x000022e5
    2690:	0000eac0 	.word	0x0000eac0
    2694:	0000ead8 	.word	0x0000ead8
    2698:	00004f71 	.word	0x00004f71
    269c:	00005051 	.word	0x00005051
    26a0:	00002a75 	.word	0x00002a75
    26a4:	00002a8d 	.word	0x00002a8d

000026a8 <_ZN8cMxRadio17radio_irq_handlerEh>:
 *
 * @parm cause  value of the interrupt status register
 *
 */
void cMxRadio::radio_irq_handler(uint8_t cause)
{
    26a8:	b570      	push	{r4, r5, r6, lr}
    26aa:	1c04      	adds	r4, r0, #0
    26ac:	1c0d      	adds	r5, r1, #0
	if (cause & TRX_IRQ_TRX_END)
    26ae:	070b      	lsls	r3, r1, #28
    26b0:	d52b      	bpl.n	270a <_ZN8cMxRadio17radio_irq_handlerEh+0x62>
	{
		if (STATE_RX == radiostatus.state ||
    26b2:	79c3      	ldrb	r3, [r0, #7]
    26b4:	1e99      	subs	r1, r3, #2
    26b6:	22fd      	movs	r2, #253	; 0xfd
    26b8:	4211      	tst	r1, r2
    26ba:	d102      	bne.n	26c2 <_ZN8cMxRadio17radio_irq_handlerEh+0x1a>
				STATE_RXAUTO == radiostatus.state)
		{
			radio_receive_frame();
    26bc:	4b15      	ldr	r3, [pc, #84]	; (2714 <_ZN8cMxRadio17radio_irq_handlerEh+0x6c>)
    26be:	4798      	blx	r3
    26c0:	e023      	b.n	270a <_ZN8cMxRadio17radio_irq_handlerEh+0x62>
		}
		else if (STATE_TX == radiostatus.state)
    26c2:	2b01      	cmp	r3, #1
    26c4:	d107      	bne.n	26d6 <_ZN8cMxRadio17radio_irq_handlerEh+0x2e>
		{
#ifdef TRX_TX_PA_EI
TRX_TX_PA_DI();
#endif
usr_radio_tx_done(TX_OK);
    26c6:	2100      	movs	r1, #0
    26c8:	4b13      	ldr	r3, [pc, #76]	; (2718 <_ZN8cMxRadio17radio_irq_handlerEh+0x70>)
    26ca:	4798      	blx	r3
radio_set_state(radiostatus.idle_state);
    26cc:	7a21      	ldrb	r1, [r4, #8]
    26ce:	1c20      	adds	r0, r4, #0
    26d0:	4b12      	ldr	r3, [pc, #72]	; (271c <_ZN8cMxRadio17radio_irq_handlerEh+0x74>)
    26d2:	4798      	blx	r3
    26d4:	e019      	b.n	270a <_ZN8cMxRadio17radio_irq_handlerEh+0x62>
		}
		else if (STATE_TXAUTO == radiostatus.state)
    26d6:	2b03      	cmp	r3, #3
    26d8:	d117      	bne.n	270a <_ZN8cMxRadio17radio_irq_handlerEh+0x62>
		{
#ifdef TRX_TX_PA_EI
			TRX_TX_PA_DI();
#endif
			uint8_t trac_status = trx_bit_read(SR_TRAC_STATUS);
    26da:	2102      	movs	r1, #2
    26dc:	22e0      	movs	r2, #224	; 0xe0
    26de:	3302      	adds	r3, #2
    26e0:	4e0f      	ldr	r6, [pc, #60]	; (2720 <_ZN8cMxRadio17radio_irq_handlerEh+0x78>)
    26e2:	47b0      	blx	r6
			radio_tx_done_t result;
			switch (trac_status)
    26e4:	2803      	cmp	r0, #3
    26e6:	d006      	beq.n	26f6 <_ZN8cMxRadio17radio_irq_handlerEh+0x4e>
    26e8:	d307      	bcc.n	26fa <_ZN8cMxRadio17radio_irq_handlerEh+0x52>
			case TRAC_NO_ACK:
				result = TX_NO_ACK;
				break;

			default:
				result = TX_FAIL;
    26ea:	3805      	subs	r0, #5
    26ec:	4243      	negs	r3, r0
    26ee:	4143      	adcs	r3, r0
    26f0:	2103      	movs	r1, #3
    26f2:	1ac9      	subs	r1, r1, r3
    26f4:	e002      	b.n	26fc <_ZN8cMxRadio17radio_irq_handlerEh+0x54>
#endif
				result = TX_OK;
				break;

			case TRAC_CHANNEL_ACCESS_FAILURE:
				result = TX_CCA_FAIL;
    26f6:	2101      	movs	r1, #1
    26f8:	e000      	b.n	26fc <_ZN8cMxRadio17radio_irq_handlerEh+0x54>
			case TRAC_SUCCESS_DATA_PENDING:
#endif
#if defined TRAC_SUCCESS_WAIT_FOR_ACK
			case TRAC_SUCCESS_WAIT_FOR_ACK:
#endif
				result = TX_OK;
    26fa:	2100      	movs	r1, #0
				break;

			default:
				result = TX_FAIL;
			}
			usr_radio_tx_done(result);
    26fc:	1c20      	adds	r0, r4, #0
    26fe:	4b06      	ldr	r3, [pc, #24]	; (2718 <_ZN8cMxRadio17radio_irq_handlerEh+0x70>)
    2700:	4798      	blx	r3
			radio_set_state(radiostatus.idle_state);
    2702:	7a21      	ldrb	r1, [r4, #8]
    2704:	1c20      	adds	r0, r4, #0
    2706:	4b05      	ldr	r3, [pc, #20]	; (271c <_ZN8cMxRadio17radio_irq_handlerEh+0x74>)
    2708:	4798      	blx	r3
		}
	}
	usr_radio_irq(cause);
    270a:	1c20      	adds	r0, r4, #0
    270c:	1c29      	adds	r1, r5, #0
    270e:	4b05      	ldr	r3, [pc, #20]	; (2724 <_ZN8cMxRadio17radio_irq_handlerEh+0x7c>)
    2710:	4798      	blx	r3
}
    2712:	bd70      	pop	{r4, r5, r6, pc}
    2714:	00002385 	.word	0x00002385
    2718:	00002355 	.word	0x00002355
    271c:	000024d9 	.word	0x000024d9
    2720:	00002a75 	.word	0x00002a75
    2724:	000022f9 	.word	0x000022f9

00002728 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t>:

	radiostatus.state = state;
}

void cMxRadio::radio_set_param(radio_attribute_t attr, radio_param_t parm)
{
    2728:	b5f0      	push	{r4, r5, r6, r7, lr}
    272a:	4647      	mov	r7, r8
    272c:	b480      	push	{r7}
    272e:	b082      	sub	sp, #8
    2730:	1c05      	adds	r5, r0, #0
	switch (attr)
    2732:	2908      	cmp	r1, #8
    2734:	d864      	bhi.n	2800 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xd8>
    2736:	0089      	lsls	r1, r1, #2
    2738:	4b35      	ldr	r3, [pc, #212]	; (2810 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xe8>)
    273a:	585b      	ldr	r3, [r3, r1]
    273c:	469f      	mov	pc, r3
	{
	case phyCurrentChannel:
		if (((int)parm.channel >= TRX_MIN_CHANNEL) &&
    273e:	b2d4      	uxtb	r4, r2
    2740:	1c23      	adds	r3, r4, #0
    2742:	3b0b      	subs	r3, #11
    2744:	2b0f      	cmp	r3, #15
    2746:	d807      	bhi.n	2758 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0x30>
		{
#ifdef CHINABAND
			trx_reg_write(RG_CC_CTRL_1, CCBAND);
			trx_reg_write(RG_CC_CTRL_0, parm.channel*2+CCNUMBER);
#else
			trx_bit_write(SR_CHANNEL, parm.channel);
    2748:	9400      	str	r4, [sp, #0]
    274a:	2108      	movs	r1, #8
    274c:	221f      	movs	r2, #31
    274e:	2300      	movs	r3, #0
    2750:	4e30      	ldr	r6, [pc, #192]	; (2814 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xec>)
    2752:	47b0      	blx	r6
#endif
			radiostatus.channel = parm.channel;
    2754:	712c      	strb	r4, [r5, #4]
    2756:	e056      	b.n	2806 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xde>
 * @ingroup grpRadio
 */

void cMxRadio::radio_error(radio_error_t err)
{
	usr_radio_error(err);
    2758:	2102      	movs	r1, #2
    275a:	4b2f      	ldr	r3, [pc, #188]	; (2818 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xf0>)
    275c:	4798      	blx	r3
    275e:	e052      	b.n	2806 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xde>
		{
			radio_error(SET_PARM_FAILED);
		}
#endif//chinaband
#else
		if (parm.tx_pwr >= -17 && parm.tx_pwr <= 3)
    2760:	b2d2      	uxtb	r2, r2
    2762:	1c13      	adds	r3, r2, #0
    2764:	3311      	adds	r3, #17
    2766:	b2db      	uxtb	r3, r3
    2768:	2b14      	cmp	r3, #20
    276a:	d809      	bhi.n	2780 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0x58>
					0x06,                         /* 0 dBm */
					0x04,                         /* 1 dBm */
					0x02,                         /* 2 dBm */
					0x00                          /* 3 dBm */
			};
			radiostatus.tx_pwr = parm.tx_pwr;
    276c:	7142      	strb	r2, [r0, #5]
			uint8_t idx = parm.tx_pwr + 17;
			uint8_t pwrval = pwrtable[idx];
    276e:	4a2b      	ldr	r2, [pc, #172]	; (281c <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xf4>)
			trx_bit_write(SR_TX_PWR, pwrval);
    2770:	5cd3      	ldrb	r3, [r2, r3]
    2772:	9300      	str	r3, [sp, #0]
    2774:	2105      	movs	r1, #5
    2776:	220f      	movs	r2, #15
    2778:	2300      	movs	r3, #0
    277a:	4c26      	ldr	r4, [pc, #152]	; (2814 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xec>)
    277c:	47a0      	blx	r4
    277e:	e042      	b.n	2806 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xde>
 * @ingroup grpRadio
 */

void cMxRadio::radio_error(radio_error_t err)
{
	usr_radio_error(err);
    2780:	2102      	movs	r1, #2
    2782:	4b25      	ldr	r3, [pc, #148]	; (2818 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xf0>)
    2784:	4798      	blx	r3
    2786:	e03e      	b.n	2806 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xde>
		}

#endif//rf212
		break;
	case phyCCAMode:
		if (parm.cca_mode <= 3)
    2788:	b2d2      	uxtb	r2, r2
    278a:	2a03      	cmp	r2, #3
    278c:	d807      	bhi.n	279e <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0x76>
		{
			radiostatus.cca_mode = parm.cca_mode;
    278e:	7182      	strb	r2, [r0, #6]
			trx_bit_write(SR_CCA_MODE, radiostatus.cca_mode);
    2790:	9200      	str	r2, [sp, #0]
    2792:	2108      	movs	r1, #8
    2794:	2260      	movs	r2, #96	; 0x60
    2796:	2305      	movs	r3, #5
    2798:	4c1e      	ldr	r4, [pc, #120]	; (2814 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xec>)
    279a:	47a0      	blx	r4
    279c:	e033      	b.n	2806 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xde>
 * @ingroup grpRadio
 */

void cMxRadio::radio_error(radio_error_t err)
{
	usr_radio_error(err);
    279e:	2102      	movs	r1, #2
    27a0:	4b1d      	ldr	r3, [pc, #116]	; (2818 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xf0>)
    27a2:	4798      	blx	r3
    27a4:	e02f      	b.n	2806 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xde>
			radio_error(SET_PARM_FAILED);
		}
		break;

	case phyIdleState:
		radiostatus.idle_state = parm.idle_state;
    27a6:	b2d1      	uxtb	r1, r2
    27a8:	7201      	strb	r1, [r0, #8]
		radio_set_state(parm.idle_state);
    27aa:	4b1d      	ldr	r3, [pc, #116]	; (2820 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xf8>)
    27ac:	4798      	blx	r3
		break;
    27ae:	e02a      	b.n	2806 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xde>

	case phyChannelsSupported:
		break;

	case phyPanId:
		trx_set_panid(parm.pan_id);
    27b0:	b294      	uxth	r4, r2
	/**
	 * @brief Write the PANID to the address filter registers
	 */
	 inline void trx_set_panid(uint16_t panid)
	{
	    trx_reg_write(RG_PAN_ID_0,(panid&0xff));
    27b2:	b2e2      	uxtb	r2, r4
    27b4:	2122      	movs	r1, #34	; 0x22
    27b6:	4e1b      	ldr	r6, [pc, #108]	; (2824 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xfc>)
    27b8:	47b0      	blx	r6
	    trx_reg_write(RG_PAN_ID_1,(panid>>8));
    27ba:	0a22      	lsrs	r2, r4, #8
    27bc:	1c28      	adds	r0, r5, #0
    27be:	2123      	movs	r1, #35	; 0x23
    27c0:	47b0      	blx	r6
    27c2:	e020      	b.n	2806 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xde>
		break;

	case phyShortAddr:
		trx_set_shortaddr(parm.short_addr);
    27c4:	b294      	uxth	r4, r2
	 * @brief Write the 16 bit short address to the
	 * address filter registers
	 */
	 inline void trx_set_shortaddr(uint16_t shortaddr)
	{
	    trx_reg_write(RG_SHORT_ADDR_0,(shortaddr&0xff));
    27c6:	b2e2      	uxtb	r2, r4
    27c8:	2120      	movs	r1, #32
    27ca:	4e16      	ldr	r6, [pc, #88]	; (2824 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xfc>)
    27cc:	47b0      	blx	r6
	    trx_reg_write(RG_SHORT_ADDR_1,(shortaddr>>8));
    27ce:	0a22      	lsrs	r2, r4, #8
    27d0:	1c28      	adds	r0, r5, #0
    27d2:	2121      	movs	r1, #33	; 0x21
    27d4:	47b0      	blx	r6
    27d6:	e016      	b.n	2806 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xde>
		break;

	case phyLongAddr:
	{
		uint8_t regno, *ap;
		for (regno = RG_IEEE_ADDR_0, ap = (uint8_t *)parm.long_addr;
    27d8:	1c17      	adds	r7, r2, #0
    27da:	3208      	adds	r2, #8
    27dc:	1c14      	adds	r4, r2, #0
    27de:	2624      	movs	r6, #36	; 0x24
				regno <= RG_IEEE_ADDR_7;
				regno++, ap++)
			trx_reg_write(regno, *ap);
    27e0:	4b10      	ldr	r3, [pc, #64]	; (2824 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xfc>)
    27e2:	4698      	mov	r8, r3
    27e4:	783a      	ldrb	r2, [r7, #0]
    27e6:	1c28      	adds	r0, r5, #0
    27e8:	1c31      	adds	r1, r6, #0
    27ea:	47c0      	blx	r8
		break;

	case phyLongAddr:
	{
		uint8_t regno, *ap;
		for (regno = RG_IEEE_ADDR_0, ap = (uint8_t *)parm.long_addr;
    27ec:	3601      	adds	r6, #1
    27ee:	b2f6      	uxtb	r6, r6
    27f0:	3701      	adds	r7, #1
    27f2:	42a7      	cmp	r7, r4
    27f4:	d1f6      	bne.n	27e4 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xbc>
    27f6:	e006      	b.n	2806 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xde>
			trx_reg_write(regno, *ap);
		break;
	}

	case phyDataRate:
		trx_set_datarate(parm.data_rate);
    27f8:	b2d1      	uxtb	r1, r2
    27fa:	4b0b      	ldr	r3, [pc, #44]	; (2828 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0x100>)
    27fc:	4798      	blx	r3
		break;
    27fe:	e002      	b.n	2806 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xde>
 * @ingroup grpRadio
 */

void cMxRadio::radio_error(radio_error_t err)
{
	usr_radio_error(err);
    2800:	2102      	movs	r1, #2
    2802:	4b05      	ldr	r3, [pc, #20]	; (2818 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xf0>)
    2804:	4798      	blx	r3

	default:
		radio_error(SET_PARM_FAILED);
		break;
	}
}
    2806:	b002      	add	sp, #8
    2808:	bc04      	pop	{r2}
    280a:	4690      	mov	r8, r2
    280c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    280e:	46c0      	nop			; (mov r8, r8)
    2810:	0000ec80 	.word	0x0000ec80
    2814:	00002a8d 	.word	0x00002a8d
    2818:	000022e5 	.word	0x000022e5
    281c:	0000eca4 	.word	0x0000eca4
    2820:	000024d9 	.word	0x000024d9
    2824:	000029a1 	.word	0x000029a1
    2828:	00002891 	.word	0x00002891

0000282c <_ZN8cMxRadio16radio_send_frameEhPhh>:


void cMxRadio::radio_send_frame(uint8_t len, uint8_t *frm, uint8_t compcrc)
{
    282c:	b570      	push	{r4, r5, r6, lr}
    282e:	1c04      	adds	r4, r0, #0
    2830:	1c0e      	adds	r6, r1, #0
    2832:	1c15      	adds	r5, r2, #0
	{
		TRX_TX_PA_EI();
	}
#endif
/* this block should be made atomic */
	frm[2]++;
    2834:	7893      	ldrb	r3, [r2, #2]
    2836:	3301      	adds	r3, #1
    2838:	7093      	strb	r3, [r2, #2]
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    283a:	23e0      	movs	r3, #224	; 0xe0
    283c:	56c3      	ldrsb	r3, [r0, r3]
    283e:	3301      	adds	r3, #1
    2840:	d104      	bne.n	284c <_ZN8cMxRadio16radio_send_frameEhPhh+0x20>
    2842:	480f      	ldr	r0, [pc, #60]	; (2880 <_ZN8cMxRadio16radio_send_frameEhPhh+0x54>)
    2844:	490f      	ldr	r1, [pc, #60]	; (2884 <_ZN8cMxRadio16radio_send_frameEhPhh+0x58>)
    2846:	2228      	movs	r2, #40	; 0x28
    2848:	4b0f      	ldr	r3, [pc, #60]	; (2888 <_ZN8cMxRadio16radio_send_frameEhPhh+0x5c>)
    284a:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    284c:	1c23      	adds	r3, r4, #0
    284e:	33e0      	adds	r3, #224	; 0xe0
    2850:	691a      	ldr	r2, [r3, #16]
    2852:	685b      	ldr	r3, [r3, #4]
    2854:	6013      	str	r3, [r2, #0]
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    2856:	23e0      	movs	r3, #224	; 0xe0
    2858:	56e3      	ldrsb	r3, [r4, r3]
    285a:	3301      	adds	r3, #1
    285c:	d104      	bne.n	2868 <_ZN8cMxRadio16radio_send_frameEhPhh+0x3c>
    285e:	4808      	ldr	r0, [pc, #32]	; (2880 <_ZN8cMxRadio16radio_send_frameEhPhh+0x54>)
    2860:	4908      	ldr	r1, [pc, #32]	; (2884 <_ZN8cMxRadio16radio_send_frameEhPhh+0x58>)
    2862:	2228      	movs	r2, #40	; 0x28
    2864:	4b08      	ldr	r3, [pc, #32]	; (2888 <_ZN8cMxRadio16radio_send_frameEhPhh+0x5c>)
    2866:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    else
        *obj->OUTCLR = obj->mask;
    2868:	1c23      	adds	r3, r4, #0
    286a:	33e0      	adds	r3, #224	; 0xe0
    286c:	68da      	ldr	r2, [r3, #12]
    286e:	685b      	ldr	r3, [r3, #4]
    2870:	6013      	str	r3, [r2, #0]
	sleep_pin=1;//TRX_SLPTR_HIGH();
	sleep_pin=0;//TRX_SLPTR_LOW();
	trx_frame_write(len, frm);
    2872:	1c20      	adds	r0, r4, #0
    2874:	1c31      	adds	r1, r6, #0
    2876:	1c2a      	adds	r2, r5, #0
    2878:	4b04      	ldr	r3, [pc, #16]	; (288c <_ZN8cMxRadio16radio_send_frameEhPhh+0x60>)
    287a:	4798      	blx	r3
	/***********************************/
}
    287c:	bd70      	pop	{r4, r5, r6, pc}
    287e:	46c0      	nop			; (mov r8, r8)
    2880:	0000eac0 	.word	0x0000eac0
    2884:	0000ead8 	.word	0x0000ead8
    2888:	00004f71 	.word	0x00004f71
    288c:	00002ac1 	.word	0x00002ac1

00002890 <_ZN8cMxRadio16trx_set_datarateEh>:
}

#elif RADIO_TYPE == RADIO_AT86RF231

uint8_t cMxRadio::trx_set_datarate(uint8_t rate_type)
{
    2890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2892:	1c06      	adds	r6, r0, #0
    2894:	1e0c      	subs	r4, r1, #0
trx_regval_t regval = TRX_NONE;

    switch(rate_type)
    2896:	2c34      	cmp	r4, #52	; 0x34
    2898:	d00f      	beq.n	28ba <_ZN8cMxRadio16trx_set_datarateEh+0x2a>
    289a:	2934      	cmp	r1, #52	; 0x34
    289c:	d803      	bhi.n	28a6 <_ZN8cMxRadio16trx_set_datarateEh+0x16>
    {
        case OQPSK250: regval = TRX_OQPSK250; break;
    289e:	2500      	movs	r5, #0

uint8_t cMxRadio::trx_set_datarate(uint8_t rate_type)
{
trx_regval_t regval = TRX_NONE;

    switch(rate_type)
    28a0:	2933      	cmp	r1, #51	; 0x33
    28a2:	d00b      	beq.n	28bc <_ZN8cMxRadio16trx_set_datarateEh+0x2c>
    28a4:	e007      	b.n	28b6 <_ZN8cMxRadio16trx_set_datarateEh+0x26>
    28a6:	2954      	cmp	r1, #84	; 0x54
    28a8:	d003      	beq.n	28b2 <_ZN8cMxRadio16trx_set_datarateEh+0x22>
    {
        case OQPSK250: regval = TRX_OQPSK250; break;
        case OQPSK500: regval = TRX_OQPSK500; break;
    28aa:	2501      	movs	r5, #1

uint8_t cMxRadio::trx_set_datarate(uint8_t rate_type)
{
trx_regval_t regval = TRX_NONE;

    switch(rate_type)
    28ac:	2994      	cmp	r1, #148	; 0x94
    28ae:	d005      	beq.n	28bc <_ZN8cMxRadio16trx_set_datarateEh+0x2c>
    28b0:	e001      	b.n	28b6 <_ZN8cMxRadio16trx_set_datarateEh+0x26>
    {
        case OQPSK250: regval = TRX_OQPSK250; break;
        case OQPSK500: regval = TRX_OQPSK500; break;
        case OQPSK1000: regval = TRX_OQPSK1000; break;
        case OQPSK2000: regval = TRX_OQPSK2000; break;
    28b2:	2503      	movs	r5, #3
    28b4:	e002      	b.n	28bc <_ZN8cMxRadio16trx_set_datarateEh+0x2c>
        regval |=  trx_reg_read(RG_TRX_CTRL_2) & 0xfc ;
        trx_reg_write(RG_TRX_CTRL_2, regval);
    }
    else
    {
        rate_type = TRX_NONE;
    28b6:	24ff      	movs	r4, #255	; 0xff
    28b8:	e011      	b.n	28de <_ZN8cMxRadio16trx_set_datarateEh+0x4e>

    switch(rate_type)
    {
        case OQPSK250: regval = TRX_OQPSK250; break;
        case OQPSK500: regval = TRX_OQPSK500; break;
        case OQPSK1000: regval = TRX_OQPSK1000; break;
    28ba:	2502      	movs	r5, #2
        case OQPSK2000: regval = TRX_OQPSK2000; break;
        default: break;
    }
    if (regval != TRX_NONE)
    {
        trx_reg_write(RG_TRX_STATE, CMD_FORCE_TRX_OFF);
    28bc:	1c30      	adds	r0, r6, #0
    28be:	2102      	movs	r1, #2
    28c0:	2203      	movs	r2, #3
    28c2:	4f08      	ldr	r7, [pc, #32]	; (28e4 <_ZN8cMxRadio16trx_set_datarateEh+0x54>)
    28c4:	47b8      	blx	r7
        regval |=  trx_reg_read(RG_TRX_CTRL_2) & 0xfc ;
    28c6:	1c30      	adds	r0, r6, #0
    28c8:	210c      	movs	r1, #12
    28ca:	4b07      	ldr	r3, [pc, #28]	; (28e8 <_ZN8cMxRadio16trx_set_datarateEh+0x58>)
    28cc:	4798      	blx	r3
    28ce:	2303      	movs	r3, #3
    28d0:	1c02      	adds	r2, r0, #0
    28d2:	439a      	bics	r2, r3
    28d4:	4315      	orrs	r5, r2
        trx_reg_write(RG_TRX_CTRL_2, regval);
    28d6:	b2ea      	uxtb	r2, r5
    28d8:	1c30      	adds	r0, r6, #0
    28da:	210c      	movs	r1, #12
    28dc:	47b8      	blx	r7
    else
    {
        rate_type = TRX_NONE;
    }
    return rate_type;
}
    28de:	1c20      	adds	r0, r4, #0
    28e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    28e2:	46c0      	nop			; (mov r8, r8)
    28e4:	000029a1 	.word	0x000029a1
    28e8:	00002a09 	.word	0x00002a09

000028ec <_Z8IRQradiov>:
/* === Includes ============================================================ */
#include <MxRadio.h>

cMxRadio* gRadio = NULL;

void IRQradio(void){
    28ec:	b508      	push	{r3, lr}
	gRadio->rf_irq_callback();
    28ee:	4b02      	ldr	r3, [pc, #8]	; (28f8 <_Z8IRQradiov+0xc>)
    28f0:	6818      	ldr	r0, [r3, #0]
    28f2:	4b02      	ldr	r3, [pc, #8]	; (28fc <_Z8IRQradiov+0x10>)
    28f4:	4798      	blx	r3
}
    28f6:	bd08      	pop	{r3, pc}
    28f8:	20004030 	.word	0x20004030
    28fc:	00002c05 	.word	0x00002c05

00002900 <_ZN8cMxRadio11trx_io_initEi>:
/* === external functions =================================================== */
void cMxRadio::trx_io_init (int spirate)
{
    2900:	b570      	push	{r4, r5, r6, lr}
    2902:	b084      	sub	sp, #16
    2904:	1c05      	adds	r5, r0, #0
    2906:	1c0e      	adds	r6, r1, #0
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    2908:	23a8      	movs	r3, #168	; 0xa8
    290a:	56c3      	ldrsb	r3, [r0, r3]
    290c:	3301      	adds	r3, #1
    290e:	d104      	bne.n	291a <_ZN8cMxRadio11trx_io_initEi+0x1a>
    2910:	4818      	ldr	r0, [pc, #96]	; (2974 <_ZN8cMxRadio11trx_io_initEi+0x74>)
    2912:	4919      	ldr	r1, [pc, #100]	; (2978 <_ZN8cMxRadio11trx_io_initEi+0x78>)
    2914:	2228      	movs	r2, #40	; 0x28
    2916:	4b19      	ldr	r3, [pc, #100]	; (297c <_ZN8cMxRadio11trx_io_initEi+0x7c>)
    2918:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    291a:	1c2b      	adds	r3, r5, #0
    291c:	33a8      	adds	r3, #168	; 0xa8
    291e:	691a      	ldr	r2, [r3, #16]
    2920:	685b      	ldr	r3, [r3, #4]
    2922:	6013      	str	r3, [r2, #0]

	m_cs = 1;
	m_spi.format(8, 0);
    2924:	1c2c      	adds	r4, r5, #0
    2926:	3414      	adds	r4, #20
    2928:	1c20      	adds	r0, r4, #0
    292a:	2108      	movs	r1, #8
    292c:	2200      	movs	r2, #0
    292e:	4b14      	ldr	r3, [pc, #80]	; (2980 <_ZN8cMxRadio11trx_io_initEi+0x80>)
    2930:	4798      	blx	r3
	m_spi.frequency(spirate);
    2932:	1c20      	adds	r0, r4, #0
    2934:	1c31      	adds	r1, r6, #0
    2936:	4b13      	ldr	r3, [pc, #76]	; (2984 <_ZN8cMxRadio11trx_io_initEi+0x84>)
    2938:	4798      	blx	r3
	/////////////////////////////////////////////////////////////////////
	/////modification BM irq_pin.rise(this,&cMxRadio::rf_irq_callback);
	//////////////////////////////////////////////////////////////////////
	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    293a:	ac01      	add	r4, sp, #4
    293c:	1c20      	adds	r0, r4, #0
    293e:	4b12      	ldr	r3, [pc, #72]	; (2988 <_ZN8cMxRadio11trx_io_initEi+0x88>)
    2940:	4798      	blx	r3
	// put the button as EXTINT
	eint_chan_conf.gpio_pin           = PIN_PB00A_EIC_EXTINT0;
    2942:	2320      	movs	r3, #32
    2944:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_mux       = MUX_PB00A_EIC_EXTINT0 ;
    2946:	2300      	movs	r3, #0
    2948:	6063      	str	r3, [r4, #4]
	eint_chan_conf.detection_criteria = EXTINT_DETECT_RISING;
    294a:	2201      	movs	r2, #1
    294c:	72e2      	strb	r2, [r4, #11]
	eint_chan_conf.filter_input_signal = false;
    294e:	72a3      	strb	r3, [r4, #10]
		
	extint_chan_set_config(0, &eint_chan_conf);
    2950:	2000      	movs	r0, #0
    2952:	1c21      	adds	r1, r4, #0
    2954:	4b0d      	ldr	r3, [pc, #52]	; (298c <_ZN8cMxRadio11trx_io_initEi+0x8c>)
    2956:	4798      	blx	r3
	//configuration callback
	gRadio = this;
    2958:	4b0d      	ldr	r3, [pc, #52]	; (2990 <_ZN8cMxRadio11trx_io_initEi+0x90>)
    295a:	601d      	str	r5, [r3, #0]
	extint_register_callback(&IRQradio,0,EXTINT_CALLBACK_TYPE_DETECT);
    295c:	480d      	ldr	r0, [pc, #52]	; (2994 <_ZN8cMxRadio11trx_io_initEi+0x94>)
    295e:	2100      	movs	r1, #0
    2960:	2200      	movs	r2, #0
    2962:	4b0d      	ldr	r3, [pc, #52]	; (2998 <_ZN8cMxRadio11trx_io_initEi+0x98>)
    2964:	4798      	blx	r3
	//InterruptManager::get()->add_handler(ppsISR, EIC_IRQn);
	//ppsIsrr.attach(&ppsISR);
	//activation callback
		extint_chan_enable_callback(0,EXTINT_CALLBACK_TYPE_DETECT);		
    2966:	2000      	movs	r0, #0
    2968:	2100      	movs	r1, #0
    296a:	4b0c      	ldr	r3, [pc, #48]	; (299c <_ZN8cMxRadio11trx_io_initEi+0x9c>)
    296c:	4798      	blx	r3
	TRX_SLPTR_INIT();
	SPI_INIT(spirate);
	TRX_IRQ_INIT();
	EI_TRX_IRQ();
	*/
}
    296e:	b004      	add	sp, #16
    2970:	bd70      	pop	{r4, r5, r6, pc}
    2972:	46c0      	nop			; (mov r8, r8)
    2974:	0000eac0 	.word	0x0000eac0
    2978:	0000ead8 	.word	0x0000ead8
    297c:	00004f71 	.word	0x00004f71
    2980:	00004c89 	.word	0x00004c89
    2984:	00004ca5 	.word	0x00004ca5
    2988:	00004145 	.word	0x00004145
    298c:	00004159 	.word	0x00004159
    2990:	20004030 	.word	0x20004030
    2994:	000028ed 	.word	0x000028ed
    2998:	00004045 	.word	0x00004045
    299c:	0000406d 	.word	0x0000406d

000029a0 <_ZN8cMxRadio13trx_reg_writeEhh>:

void cMxRadio::trx_reg_write(uint8_t addr, trx_regval_t val)
{
    29a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    29a2:	1c04      	adds	r4, r0, #0
    29a4:	1c17      	adds	r7, r2, #0

	addr = TRX_CMD_RW | (TRX_CMD_RADDR_MASK & addr);
    29a6:	23c0      	movs	r3, #192	; 0xc0
    29a8:	4319      	orrs	r1, r3
    29aa:	1c0d      	adds	r5, r1, #0
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    29ac:	3b18      	subs	r3, #24
    29ae:	56c3      	ldrsb	r3, [r0, r3]
    29b0:	3301      	adds	r3, #1
    29b2:	d104      	bne.n	29be <_ZN8cMxRadio13trx_reg_writeEhh+0x1e>
    29b4:	4810      	ldr	r0, [pc, #64]	; (29f8 <_ZN8cMxRadio13trx_reg_writeEhh+0x58>)
    29b6:	4911      	ldr	r1, [pc, #68]	; (29fc <_ZN8cMxRadio13trx_reg_writeEhh+0x5c>)
    29b8:	2228      	movs	r2, #40	; 0x28
    29ba:	4b11      	ldr	r3, [pc, #68]	; (2a00 <_ZN8cMxRadio13trx_reg_writeEhh+0x60>)
    29bc:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    else
        *obj->OUTCLR = obj->mask;
    29be:	1c23      	adds	r3, r4, #0
    29c0:	33a8      	adds	r3, #168	; 0xa8
    29c2:	68da      	ldr	r2, [r3, #12]
    29c4:	685b      	ldr	r3, [r3, #4]
    29c6:	6013      	str	r3, [r2, #0]

	m_cs = 0;//SPI_SELN_LOW();
	m_spi.write(addr);//SPI_DATA_REG = addr;
    29c8:	1c26      	adds	r6, r4, #0
    29ca:	3614      	adds	r6, #20
    29cc:	1c30      	adds	r0, r6, #0
    29ce:	1c29      	adds	r1, r5, #0
    29d0:	4d0c      	ldr	r5, [pc, #48]	; (2a04 <_ZN8cMxRadio13trx_reg_writeEhh+0x64>)
    29d2:	47a8      	blx	r5
	//SPI_WAITFOR();
	m_spi.write(val);//SPI_DATA_REG = val;
    29d4:	1c30      	adds	r0, r6, #0
    29d6:	1c39      	adds	r1, r7, #0
    29d8:	47a8      	blx	r5
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    29da:	23a8      	movs	r3, #168	; 0xa8
    29dc:	56e3      	ldrsb	r3, [r4, r3]
    29de:	3301      	adds	r3, #1
    29e0:	d104      	bne.n	29ec <_ZN8cMxRadio13trx_reg_writeEhh+0x4c>
    29e2:	4805      	ldr	r0, [pc, #20]	; (29f8 <_ZN8cMxRadio13trx_reg_writeEhh+0x58>)
    29e4:	4905      	ldr	r1, [pc, #20]	; (29fc <_ZN8cMxRadio13trx_reg_writeEhh+0x5c>)
    29e6:	2228      	movs	r2, #40	; 0x28
    29e8:	4b05      	ldr	r3, [pc, #20]	; (2a00 <_ZN8cMxRadio13trx_reg_writeEhh+0x60>)
    29ea:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    29ec:	34a8      	adds	r4, #168	; 0xa8
    29ee:	6923      	ldr	r3, [r4, #16]
    29f0:	6862      	ldr	r2, [r4, #4]
    29f2:	601a      	str	r2, [r3, #0]
	//SPI_WAITFOR();
	m_cs = 1;//SPI_SELN_HIGH();
}
    29f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    29f6:	46c0      	nop			; (mov r8, r8)
    29f8:	0000eac0 	.word	0x0000eac0
    29fc:	0000ead8 	.word	0x0000ead8
    2a00:	00004f71 	.word	0x00004f71
    2a04:	00004cbd 	.word	0x00004cbd

00002a08 <_ZN8cMxRadio12trx_reg_readEh>:

trx_regval_t cMxRadio::trx_reg_read(uint8_t addr)
{
    2a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a0a:	1c04      	adds	r4, r0, #0

	uint8_t val;

	addr=TRX_CMD_RR | (TRX_CMD_RADDR_MASK & addr);
    2a0c:	253f      	movs	r5, #63	; 0x3f
    2a0e:	4029      	ands	r1, r5
    2a10:	3541      	adds	r5, #65	; 0x41
    2a12:	430d      	orrs	r5, r1
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    2a14:	23a8      	movs	r3, #168	; 0xa8
    2a16:	56c3      	ldrsb	r3, [r0, r3]
    2a18:	3301      	adds	r3, #1
    2a1a:	d104      	bne.n	2a26 <_ZN8cMxRadio12trx_reg_readEh+0x1e>
    2a1c:	4811      	ldr	r0, [pc, #68]	; (2a64 <_ZN8cMxRadio12trx_reg_readEh+0x5c>)
    2a1e:	4912      	ldr	r1, [pc, #72]	; (2a68 <_ZN8cMxRadio12trx_reg_readEh+0x60>)
    2a20:	2228      	movs	r2, #40	; 0x28
    2a22:	4b12      	ldr	r3, [pc, #72]	; (2a6c <_ZN8cMxRadio12trx_reg_readEh+0x64>)
    2a24:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    else
        *obj->OUTCLR = obj->mask;
    2a26:	1c23      	adds	r3, r4, #0
    2a28:	33a8      	adds	r3, #168	; 0xa8
    2a2a:	68da      	ldr	r2, [r3, #12]
    2a2c:	685b      	ldr	r3, [r3, #4]
    2a2e:	6013      	str	r3, [r2, #0]

	// Select transceiver
	m_cs = 0;//SPI_SELN_LOW();

	m_spi.write(addr);//SPI_DATA_REG = addr;
    2a30:	1c27      	adds	r7, r4, #0
    2a32:	3714      	adds	r7, #20
    2a34:	1c38      	adds	r0, r7, #0
    2a36:	1c29      	adds	r1, r5, #0
    2a38:	4e0d      	ldr	r6, [pc, #52]	; (2a70 <_ZN8cMxRadio12trx_reg_readEh+0x68>)
    2a3a:	47b0      	blx	r6
	//SPI_WAITFOR();
	val=m_spi.write(addr);//SPI_DATA_REG = addr;        /* dummy out */
    2a3c:	1c38      	adds	r0, r7, #0
    2a3e:	1c29      	adds	r1, r5, #0
    2a40:	47b0      	blx	r6
    2a42:	b2c5      	uxtb	r5, r0
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    2a44:	23a8      	movs	r3, #168	; 0xa8
    2a46:	56e3      	ldrsb	r3, [r4, r3]
    2a48:	3301      	adds	r3, #1
    2a4a:	d104      	bne.n	2a56 <_ZN8cMxRadio12trx_reg_readEh+0x4e>
    2a4c:	4805      	ldr	r0, [pc, #20]	; (2a64 <_ZN8cMxRadio12trx_reg_readEh+0x5c>)
    2a4e:	4906      	ldr	r1, [pc, #24]	; (2a68 <_ZN8cMxRadio12trx_reg_readEh+0x60>)
    2a50:	2228      	movs	r2, #40	; 0x28
    2a52:	4b06      	ldr	r3, [pc, #24]	; (2a6c <_ZN8cMxRadio12trx_reg_readEh+0x64>)
    2a54:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    2a56:	34a8      	adds	r4, #168	; 0xa8
    2a58:	6923      	ldr	r3, [r4, #16]
    2a5a:	6862      	ldr	r2, [r4, #4]
    2a5c:	601a      	str	r2, [r3, #0]
	//val = SPI_DATA_REG;

	m_cs=1;//SPI_SELN_HIGH();

	return (trx_regval_t)val;
}
    2a5e:	1c28      	adds	r0, r5, #0
    2a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2a62:	46c0      	nop			; (mov r8, r8)
    2a64:	0000eac0 	.word	0x0000eac0
    2a68:	0000ead8 	.word	0x0000ead8
    2a6c:	00004f71 	.word	0x00004f71
    2a70:	00004cbd 	.word	0x00004cbd

00002a74 <_ZN8cMxRadio12trx_bit_readEhhh>:
#include <MxRadio.h>


/* === functions ========================================= */
trx_regval_t cMxRadio::trx_bit_read(uint8_t addr, trx_regval_t mask, uint8_t pos)
{
    2a74:	b538      	push	{r3, r4, r5, lr}
    2a76:	1c15      	adds	r5, r2, #0
    2a78:	1c1c      	adds	r4, r3, #0
trx_regval_t data;
    data = trx_reg_read(addr);
    2a7a:	4b03      	ldr	r3, [pc, #12]	; (2a88 <_ZN8cMxRadio12trx_bit_readEhhh+0x14>)
    2a7c:	4798      	blx	r3
    data &= mask;
    data >>= pos;
    2a7e:	4028      	ands	r0, r5
    2a80:	4120      	asrs	r0, r4
    return data;
    2a82:	b2c0      	uxtb	r0, r0
}
    2a84:	bd38      	pop	{r3, r4, r5, pc}
    2a86:	46c0      	nop			; (mov r8, r8)
    2a88:	00002a09 	.word	0x00002a09

00002a8c <_ZN8cMxRadio13trx_bit_writeEhhhh>:

#include <MxRadio.h>

/* === functions ========================================= */
void cMxRadio::trx_bit_write(uint8_t addr, trx_regval_t mask, uint8_t pos, trx_regval_t value)
{
    2a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a8e:	b083      	sub	sp, #12
    2a90:	1c05      	adds	r5, r0, #0
    2a92:	1c16      	adds	r6, r2, #0
    2a94:	1c1c      	adds	r4, r3, #0
    2a96:	ab08      	add	r3, sp, #32
    2a98:	781f      	ldrb	r7, [r3, #0]

trx_regval_t tmp;
    tmp = trx_reg_read(addr);
    2a9a:	9101      	str	r1, [sp, #4]
    2a9c:	4b06      	ldr	r3, [pc, #24]	; (2ab8 <_ZN8cMxRadio13trx_bit_writeEhhhh+0x2c>)
    2a9e:	4798      	blx	r3
    tmp &= ~mask;
    2aa0:	43b0      	bics	r0, r6
    2aa2:	b2c0      	uxtb	r0, r0
    value <<= pos;
    2aa4:	1c3a      	adds	r2, r7, #0
    2aa6:	40a2      	lsls	r2, r4
    value &=mask;
    2aa8:	4032      	ands	r2, r6
    value |= tmp;
    trx_reg_write(addr, value);
    2aaa:	4302      	orrs	r2, r0
    2aac:	1c28      	adds	r0, r5, #0
    2aae:	9901      	ldr	r1, [sp, #4]
    2ab0:	4b02      	ldr	r3, [pc, #8]	; (2abc <_ZN8cMxRadio13trx_bit_writeEhhhh+0x30>)
    2ab2:	4798      	blx	r3
    return;
}
    2ab4:	b003      	add	sp, #12
    2ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ab8:	00002a09 	.word	0x00002a09
    2abc:	000029a1 	.word	0x000029a1

00002ac0 <_ZN8cMxRadio15trx_frame_writeEhPh>:
#include <MxRadio.h>

/* === functions ========================================= */

void cMxRadio::trx_frame_write(uint8_t length, uint8_t *data)
{
    2ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ac2:	b083      	sub	sp, #12
    2ac4:	1c06      	adds	r6, r0, #0
    2ac6:	1c0f      	adds	r7, r1, #0
    2ac8:	1c15      	adds	r5, r2, #0
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    2aca:	23a8      	movs	r3, #168	; 0xa8
    2acc:	56c3      	ldrsb	r3, [r0, r3]
    2ace:	3301      	adds	r3, #1
    2ad0:	d104      	bne.n	2adc <_ZN8cMxRadio15trx_frame_writeEhPh+0x1c>
    2ad2:	4819      	ldr	r0, [pc, #100]	; (2b38 <_ZN8cMxRadio15trx_frame_writeEhPh+0x78>)
    2ad4:	4919      	ldr	r1, [pc, #100]	; (2b3c <_ZN8cMxRadio15trx_frame_writeEhPh+0x7c>)
    2ad6:	2228      	movs	r2, #40	; 0x28
    2ad8:	4b19      	ldr	r3, [pc, #100]	; (2b40 <_ZN8cMxRadio15trx_frame_writeEhPh+0x80>)
    2ada:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    else
        *obj->OUTCLR = obj->mask;
    2adc:	1c33      	adds	r3, r6, #0
    2ade:	33a8      	adds	r3, #168	; 0xa8
    2ae0:	68da      	ldr	r2, [r3, #12]
    2ae2:	685b      	ldr	r3, [r3, #4]
    2ae4:	6013      	str	r3, [r2, #0]

    // Select transceiver
    m_cs=0;//SPI_SELN_LOW();

    m_spi.write(TRX_CMD_FW);//SPI_DATA_REG = TRX_CMD_FW;
    2ae6:	2314      	movs	r3, #20
    2ae8:	469c      	mov	ip, r3
    2aea:	44b4      	add	ip, r6
    2aec:	4663      	mov	r3, ip
    2aee:	9301      	str	r3, [sp, #4]
    2af0:	4660      	mov	r0, ip
    2af2:	2160      	movs	r1, #96	; 0x60
    2af4:	4c13      	ldr	r4, [pc, #76]	; (2b44 <_ZN8cMxRadio15trx_frame_writeEhPh+0x84>)
    2af6:	47a0      	blx	r4
    //SPI_WAITFOR();
    m_spi.write(length);//SPI_DATA_REG = length;
    2af8:	9801      	ldr	r0, [sp, #4]
    2afa:	1c39      	adds	r1, r7, #0
    2afc:	47a0      	blx	r4
    2afe:	1c2c      	adds	r4, r5, #0
    2b00:	3f01      	subs	r7, #1
    2b02:	b2ff      	uxtb	r7, r7
    2b04:	3701      	adds	r7, #1
    2b06:	19ed      	adds	r5, r5, r7

    do
    {
        //SPI_WAITFOR();
    	m_spi.write(*data++);//SPI_DATA_REG = *data++;
    2b08:	4f0e      	ldr	r7, [pc, #56]	; (2b44 <_ZN8cMxRadio15trx_frame_writeEhPh+0x84>)
    2b0a:	7821      	ldrb	r1, [r4, #0]
    2b0c:	9801      	ldr	r0, [sp, #4]
    2b0e:	47b8      	blx	r7
    2b10:	3401      	adds	r4, #1

    m_spi.write(TRX_CMD_FW);//SPI_DATA_REG = TRX_CMD_FW;
    //SPI_WAITFOR();
    m_spi.write(length);//SPI_DATA_REG = length;

    do
    2b12:	42ac      	cmp	r4, r5
    2b14:	d1f9      	bne.n	2b0a <_ZN8cMxRadio15trx_frame_writeEhPh+0x4a>
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    2b16:	23a8      	movs	r3, #168	; 0xa8
    2b18:	56f3      	ldrsb	r3, [r6, r3]
    2b1a:	3301      	adds	r3, #1
    2b1c:	d104      	bne.n	2b28 <_ZN8cMxRadio15trx_frame_writeEhPh+0x68>
    2b1e:	4806      	ldr	r0, [pc, #24]	; (2b38 <_ZN8cMxRadio15trx_frame_writeEhPh+0x78>)
    2b20:	4906      	ldr	r1, [pc, #24]	; (2b3c <_ZN8cMxRadio15trx_frame_writeEhPh+0x7c>)
    2b22:	2228      	movs	r2, #40	; 0x28
    2b24:	4b06      	ldr	r3, [pc, #24]	; (2b40 <_ZN8cMxRadio15trx_frame_writeEhPh+0x80>)
    2b26:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    2b28:	1c33      	adds	r3, r6, #0
    2b2a:	33a8      	adds	r3, #168	; 0xa8
    2b2c:	691a      	ldr	r2, [r3, #16]
    2b2e:	685b      	ldr	r3, [r3, #4]
    2b30:	6013      	str	r3, [r2, #0]

    //SPI_WAITFOR(); /* wait here until last byte is out otherwise underrun irq */

    // Deselect Slave
    m_cs=1;//SPI_SELN_HIGH();
}
    2b32:	b003      	add	sp, #12
    2b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b36:	46c0      	nop			; (mov r8, r8)
    2b38:	0000eac0 	.word	0x0000eac0
    2b3c:	0000ead8 	.word	0x0000ead8
    2b40:	00004f71 	.word	0x00004f71
    2b44:	00004cbd 	.word	0x00004cbd

00002b48 <_ZN8cMxRadio14trx_frame_readEPhhS0_>:

uint8_t cMxRadio::trx_frame_read(uint8_t *data, uint8_t datasz, uint8_t *lqi)
{
    2b48:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b4a:	4657      	mov	r7, sl
    2b4c:	464e      	mov	r6, r9
    2b4e:	b4c0      	push	{r6, r7}
    2b50:	b083      	sub	sp, #12
    2b52:	1c07      	adds	r7, r0, #0
    2b54:	9101      	str	r1, [sp, #4]
    2b56:	1c15      	adds	r5, r2, #0
    2b58:	4699      	mov	r9, r3
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    2b5a:	23a8      	movs	r3, #168	; 0xa8
    2b5c:	56c3      	ldrsb	r3, [r0, r3]
    2b5e:	3301      	adds	r3, #1
    2b60:	d104      	bne.n	2b6c <_ZN8cMxRadio14trx_frame_readEPhhS0_+0x24>
    2b62:	4824      	ldr	r0, [pc, #144]	; (2bf4 <_ZN8cMxRadio14trx_frame_readEPhhS0_+0xac>)
    2b64:	4924      	ldr	r1, [pc, #144]	; (2bf8 <_ZN8cMxRadio14trx_frame_readEPhhS0_+0xb0>)
    2b66:	2228      	movs	r2, #40	; 0x28
    2b68:	4b24      	ldr	r3, [pc, #144]	; (2bfc <_ZN8cMxRadio14trx_frame_readEPhhS0_+0xb4>)
    2b6a:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    else
        *obj->OUTCLR = obj->mask;
    2b6c:	1c3b      	adds	r3, r7, #0
    2b6e:	33a8      	adds	r3, #168	; 0xa8
    2b70:	68da      	ldr	r2, [r3, #12]
    2b72:	685b      	ldr	r3, [r3, #4]
    2b74:	6013      	str	r3, [r2, #0]

    /* Select transceiver */
    m_cs=0;//SPI_SELN_LOW();

    /* start frame read */
    m_spi.write(TRX_CMD_FR);//SPI_DATA_REG = TRX_CMD_FR;
    2b76:	2314      	movs	r3, #20
    2b78:	469c      	mov	ip, r3
    2b7a:	44bc      	add	ip, r7
    2b7c:	4663      	mov	r3, ip
    2b7e:	4666      	mov	r6, ip
    2b80:	9300      	str	r3, [sp, #0]
    2b82:	1c18      	adds	r0, r3, #0
    2b84:	2120      	movs	r1, #32
    2b86:	4c1e      	ldr	r4, [pc, #120]	; (2c00 <_ZN8cMxRadio14trx_frame_readEPhhS0_+0xb8>)
    2b88:	47a0      	blx	r4
    //SPI_WAITFOR();

    /* read length */
    length= m_spi.write(0);//SPI_DATA_REG = 0;
    2b8a:	1c30      	adds	r0, r6, #0
    2b8c:	2100      	movs	r1, #0
    2b8e:	47a0      	blx	r4
    2b90:	b2c6      	uxtb	r6, r0
    //SPI_WAITFOR();
    //length = SPI_DATA_REG;

    if (length <= datasz)
    2b92:	42ae      	cmp	r6, r5
    2b94:	d818      	bhi.n	2bc8 <_ZN8cMxRadio14trx_frame_readEPhhS0_+0x80>
    2b96:	9a01      	ldr	r2, [sp, #4]
    2b98:	1c14      	adds	r4, r2, #0
    2b9a:	1e73      	subs	r3, r6, #1
    2b9c:	b2db      	uxtb	r3, r3
    2b9e:	3301      	adds	r3, #1
    2ba0:	18d5      	adds	r5, r2, r3
        i = length;
        do
        {
            //SPI_DATA_REG = 0;   /* dummy out */
            //SPI_WAITFOR();
            *data++ = m_spi.write(0);//SPI_DATA_REG;
    2ba2:	4b17      	ldr	r3, [pc, #92]	; (2c00 <_ZN8cMxRadio14trx_frame_readEPhhS0_+0xb8>)
    2ba4:	469a      	mov	sl, r3
    2ba6:	9800      	ldr	r0, [sp, #0]
    2ba8:	2100      	movs	r1, #0
    2baa:	47d0      	blx	sl
    2bac:	7020      	strb	r0, [r4, #0]
    2bae:	3401      	adds	r4, #1
    //length = SPI_DATA_REG;

    if (length <= datasz)
    {
        i = length;
        do
    2bb0:	42ac      	cmp	r4, r5
    2bb2:	d1f8      	bne.n	2ba6 <_ZN8cMxRadio14trx_frame_readEPhhS0_+0x5e>
            //SPI_WAITFOR();
            *data++ = m_spi.write(0);//SPI_DATA_REG;
        }
        while(--i);

        if (lqi!= NULL)
    2bb4:	464b      	mov	r3, r9
    2bb6:	2b00      	cmp	r3, #0
    2bb8:	d008      	beq.n	2bcc <_ZN8cMxRadio14trx_frame_readEPhhS0_+0x84>
        {
            //SPI_DATA_REG = 0;   /* dummy out */
            //SPI_WAITFOR();
            *lqi = m_spi.write(0);//SPI_DATA_REG;
    2bba:	9800      	ldr	r0, [sp, #0]
    2bbc:	2100      	movs	r1, #0
    2bbe:	4b10      	ldr	r3, [pc, #64]	; (2c00 <_ZN8cMxRadio14trx_frame_readEPhhS0_+0xb8>)
    2bc0:	4798      	blx	r3
    2bc2:	464b      	mov	r3, r9
    2bc4:	7018      	strb	r0, [r3, #0]
    2bc6:	e001      	b.n	2bcc <_ZN8cMxRadio14trx_frame_readEPhhS0_+0x84>
        }
    }
    else
    {
        /* we drop the frame */
        length = 0x80 | length;
    2bc8:	2380      	movs	r3, #128	; 0x80
    2bca:	431e      	orrs	r6, r3
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    2bcc:	23a8      	movs	r3, #168	; 0xa8
    2bce:	56fb      	ldrsb	r3, [r7, r3]
    2bd0:	3301      	adds	r3, #1
    2bd2:	d104      	bne.n	2bde <_ZN8cMxRadio14trx_frame_readEPhhS0_+0x96>
    2bd4:	4807      	ldr	r0, [pc, #28]	; (2bf4 <_ZN8cMxRadio14trx_frame_readEPhhS0_+0xac>)
    2bd6:	4908      	ldr	r1, [pc, #32]	; (2bf8 <_ZN8cMxRadio14trx_frame_readEPhhS0_+0xb0>)
    2bd8:	2228      	movs	r2, #40	; 0x28
    2bda:	4b08      	ldr	r3, [pc, #32]	; (2bfc <_ZN8cMxRadio14trx_frame_readEPhhS0_+0xb4>)
    2bdc:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    2bde:	37a8      	adds	r7, #168	; 0xa8
    2be0:	693b      	ldr	r3, [r7, #16]
    2be2:	687a      	ldr	r2, [r7, #4]
    2be4:	601a      	str	r2, [r3, #0]
    }
    m_cs=1;//SPI_SELN_HIGH();
    return length;
}
    2be6:	1c30      	adds	r0, r6, #0
    2be8:	b003      	add	sp, #12
    2bea:	bc0c      	pop	{r2, r3}
    2bec:	4691      	mov	r9, r2
    2bee:	469a      	mov	sl, r3
    2bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2bf2:	46c0      	nop			; (mov r8, r8)
    2bf4:	0000eac0 	.word	0x0000eac0
    2bf8:	0000ead8 	.word	0x0000ead8
    2bfc:	00004f71 	.word	0x00004f71
    2c00:	00004cbd 	.word	0x00004cbd

00002c04 <_ZN8cMxRadio15rf_irq_callbackEv>:


/* === globals ============================================================= */

void cMxRadio::rf_irq_callback()
{
    2c04:	b538      	push	{r3, r4, r5, lr}
    2c06:	1c04      	adds	r4, r0, #0

uint8_t cause;
    //DI_TRX_IRQ();
    //sei();
    cause = trx_reg_read(RG_IRQ_STATUS);
    2c08:	210f      	movs	r1, #15
    2c0a:	4b0c      	ldr	r3, [pc, #48]	; (2c3c <_ZN8cMxRadio15rf_irq_callbackEv+0x38>)
    2c0c:	4798      	blx	r3
    2c0e:	1c05      	adds	r5, r0, #0

    if (cause & TRX_IRQ_RX_START)
    2c10:	0743      	lsls	r3, r0, #29
    2c12:	d504      	bpl.n	2c1e <_ZN8cMxRadio15rf_irq_callbackEv+0x1a>
    {
    	temprssi = trx_reg_read(RG_PHY_RSSI);
    2c14:	1c20      	adds	r0, r4, #0
    2c16:	2106      	movs	r1, #6
    2c18:	4b08      	ldr	r3, [pc, #32]	; (2c3c <_ZN8cMxRadio15rf_irq_callbackEv+0x38>)
    2c1a:	4798      	blx	r3
    2c1c:	7020      	strb	r0, [r4, #0]
    	//temped = trx_reg_read(RG_PHY_ED_LEVEL);
    }

    if (cause & TRX_IRQ_TRX_END)
    2c1e:	072b      	lsls	r3, r5, #28
    2c20:	d507      	bpl.n	2c32 <_ZN8cMxRadio15rf_irq_callbackEv+0x2e>
    {
    	if (temprssi==0)
    2c22:	7823      	ldrb	r3, [r4, #0]
    2c24:	2b00      	cmp	r3, #0
    2c26:	d104      	bne.n	2c32 <_ZN8cMxRadio15rf_irq_callbackEv+0x2e>
    		temprssi = trx_reg_read(RG_PHY_RSSI);
    2c28:	1c20      	adds	r0, r4, #0
    2c2a:	2106      	movs	r1, #6
    2c2c:	4b03      	ldr	r3, [pc, #12]	; (2c3c <_ZN8cMxRadio15rf_irq_callbackEv+0x38>)
    2c2e:	4798      	blx	r3
    2c30:	7020      	strb	r0, [r4, #0]
    	//temped = trx_reg_read(RG_PHY_ED_LEVEL);
    }
    radio_irq_handler(cause);
    2c32:	1c20      	adds	r0, r4, #0
    2c34:	1c29      	adds	r1, r5, #0
    2c36:	4b02      	ldr	r3, [pc, #8]	; (2c40 <_ZN8cMxRadio15rf_irq_callbackEv+0x3c>)
    2c38:	4798      	blx	r3
    //cli();
    //EI_TRX_IRQ();
}
    2c3a:	bd38      	pop	{r3, r4, r5, pc}
    2c3c:	00002a09 	.word	0x00002a09
    2c40:	000026a9 	.word	0x000026a9

00002c44 <_Z12kernelConfigv>:
 * Created: 13/05/2016 16:34:52
 *  Author: MORAND Baptiste
 */ 
#include "utask.h"

void kernelConfig(void){
    2c44:	b530      	push	{r4, r5, lr}
    2c46:	b085      	sub	sp, #20

	hmi.printf("kernel config\r\n");
    2c48:	480e      	ldr	r0, [pc, #56]	; (2c84 <_Z12kernelConfigv+0x40>)
    2c4a:	490f      	ldr	r1, [pc, #60]	; (2c88 <_Z12kernelConfigv+0x44>)
    2c4c:	4b0f      	ldr	r3, [pc, #60]	; (2c8c <_Z12kernelConfigv+0x48>)
    2c4e:	4798      	blx	r3
	// tasks creations
	xTaskCreate((pdTASK_CODE)HMITask,(const signed char*)"HMI",configMINIMAL_STACK_SIZE,NULL, tskIDLE_PRIORITY +1, NULL);
    2c50:	2301      	movs	r3, #1
    2c52:	9300      	str	r3, [sp, #0]
    2c54:	2400      	movs	r4, #0
    2c56:	9401      	str	r4, [sp, #4]
    2c58:	9402      	str	r4, [sp, #8]
    2c5a:	9403      	str	r4, [sp, #12]
    2c5c:	480c      	ldr	r0, [pc, #48]	; (2c90 <_Z12kernelConfigv+0x4c>)
    2c5e:	490d      	ldr	r1, [pc, #52]	; (2c94 <_Z12kernelConfigv+0x50>)
    2c60:	2296      	movs	r2, #150	; 0x96
    2c62:	0052      	lsls	r2, r2, #1
    2c64:	2300      	movs	r3, #0
    2c66:	4d0c      	ldr	r5, [pc, #48]	; (2c98 <_Z12kernelConfigv+0x54>)
    2c68:	47a8      	blx	r5
	xTaskCreate((pdTASK_CODE)timeProtocolTask,(const signed char*)"time",configMINIMAL_STACK_SIZE+600,NULL, tskIDLE_PRIORITY +3, NULL);
    2c6a:	2303      	movs	r3, #3
    2c6c:	9300      	str	r3, [sp, #0]
    2c6e:	9401      	str	r4, [sp, #4]
    2c70:	9402      	str	r4, [sp, #8]
    2c72:	9403      	str	r4, [sp, #12]
    2c74:	4809      	ldr	r0, [pc, #36]	; (2c9c <_Z12kernelConfigv+0x58>)
    2c76:	490a      	ldr	r1, [pc, #40]	; (2ca0 <_Z12kernelConfigv+0x5c>)
    2c78:	22e1      	movs	r2, #225	; 0xe1
    2c7a:	0092      	lsls	r2, r2, #2
    2c7c:	2300      	movs	r3, #0
    2c7e:	47a8      	blx	r5
	//xTaskCreate((pdTASK_CODE)ledBlinkTask,(const signed char*)"led",configMINIMAL_STACK_SIZE,NULL, tskIDLE_PRIORITY +4, NULL);
	//xTaskCreate((pdTASK_CODE)gpsUartTask,(const signed char*)"gps",configMINIMAL_STACK_SIZE,NULL, tskIDLE_PRIORITY +2, NULL);
}
    2c80:	b005      	add	sp, #20
    2c82:	bd30      	pop	{r4, r5, pc}
    2c84:	20004594 	.word	0x20004594
    2c88:	0000ecbc 	.word	0x0000ecbc
    2c8c:	00004f49 	.word	0x00004f49
    2c90:	00003b95 	.word	0x00003b95
    2c94:	0000eccc 	.word	0x0000eccc
    2c98:	000009fd 	.word	0x000009fd
    2c9c:	00003a01 	.word	0x00003a01
    2ca0:	0000ecd0 	.word	0x0000ecd0

00002ca4 <_Z6ppsISRv>:
/** Callback function for the EXTINT driver, called when an external interrupt
 *  detection occurs.
 */

void ppsISR(void)
{	
    2ca4:	b530      	push	{r4, r5, lr}
    2ca6:	b08f      	sub	sp, #60	; 0x3c
	wdt_clear();
    2ca8:	4b1c      	ldr	r3, [pc, #112]	; (2d1c <_Z6ppsISRv+0x78>)
    2caa:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    2cac:	b672      	cpsid	i
    2cae:	f3bf 8f5f 	dmb	sy
	Disable_global_interrupt();
    2cb2:	2300      	movs	r3, #0
    2cb4:	4a1a      	ldr	r2, [pc, #104]	; (2d20 <_Z6ppsISRv+0x7c>)
    2cb6:	7013      	strb	r3, [r2, #0]
	Clock timeCopy={0,0,true};
    2cb8:	ad08      	add	r5, sp, #32
    2cba:	9308      	str	r3, [sp, #32]
    2cbc:	9309      	str	r3, [sp, #36]	; 0x24
    2cbe:	2201      	movs	r2, #1
    2cc0:	722a      	strb	r2, [r5, #8]
	//Disable_global_interrupt();
	Clock timeMaster={0,0,true};
    2cc2:	ac0b      	add	r4, sp, #44	; 0x2c
    2cc4:	930b      	str	r3, [sp, #44]	; 0x2c
    2cc6:	930c      	str	r3, [sp, #48]	; 0x30
    2cc8:	7222      	strb	r2, [r4, #8]
	readClock(&timeCopy);
    2cca:	1c28      	adds	r0, r5, #0
    2ccc:	4b15      	ldr	r3, [pc, #84]	; (2d24 <_Z6ppsISRv+0x80>)
    2cce:	4798      	blx	r3
	//Enable_global_interrupt();
	timeMaster.second=timeCopy.second;
    2cd0:	9b08      	ldr	r3, [sp, #32]
    2cd2:	930b      	str	r3, [sp, #44]	; 0x2c
	timeMaster.halfmillis=timeCopy.halfmillis;
    2cd4:	686b      	ldr	r3, [r5, #4]
    2cd6:	6063      	str	r3, [r4, #4]
	if(timeMaster.halfmillis>=RTC_FREQ/2){//for the accurate 500ms
    2cd8:	6862      	ldr	r2, [r4, #4]
    2cda:	4b13      	ldr	r3, [pc, #76]	; (2d28 <_Z6ppsISRv+0x84>)
    2cdc:	429a      	cmp	r2, r3
    2cde:	d902      	bls.n	2ce6 <_Z6ppsISRv+0x42>
		timeMaster.second++;
    2ce0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2ce2:	3301      	adds	r3, #1
    2ce4:	930b      	str	r3, [sp, #44]	; 0x2c
	}
	timeMaster.halfmillis=0;
    2ce6:	2300      	movs	r3, #0
    2ce8:	930c      	str	r3, [sp, #48]	; 0x30
	if((timeCopy.halfmillis>RTC_FREQ)||(timeCopy.halfmillis<0)){
		printf("timeCopypps:'");
		printfClock(timeCopy);
	}
	*/
	timeProt.offset=subClock(timeMaster,timeCopy);
    2cea:	ac04      	add	r4, sp, #16
    2cec:	ab08      	add	r3, sp, #32
    2cee:	466a      	mov	r2, sp
    2cf0:	cb23      	ldmia	r3!, {r0, r1, r5}
    2cf2:	c223      	stmia	r2!, {r0, r1, r5}
    2cf4:	1c20      	adds	r0, r4, #0
    2cf6:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2cf8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    2cfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2cfc:	4d0b      	ldr	r5, [pc, #44]	; (2d2c <_Z6ppsISRv+0x88>)
    2cfe:	47a8      	blx	r5
    2d00:	4b0b      	ldr	r3, [pc, #44]	; (2d30 <_Z6ppsISRv+0x8c>)
    2d02:	3398      	adds	r3, #152	; 0x98
    2d04:	cc07      	ldmia	r4!, {r0, r1, r2}
    2d06:	c307      	stmia	r3!, {r0, r1, r2}
	//timeProt.offset.second=0;
	#ifdef MASTERMODE
		updateClock();
    2d08:	4b0a      	ldr	r3, [pc, #40]	; (2d34 <_Z6ppsISRv+0x90>)
    2d0a:	4798      	blx	r3
		else{
			sprintf(messageHMIError,"		error pps: -%lus %u	t:%lus",timeProt.offset.second,(unsigned int)(timeProt.offset.halfmillis/2),timeMaster.second);
		}
		sendHMI(messageHMIError);
	#endif
		Enable_global_interrupt();
    2d0c:	2201      	movs	r2, #1
    2d0e:	4b04      	ldr	r3, [pc, #16]	; (2d20 <_Z6ppsISRv+0x7c>)
    2d10:	701a      	strb	r2, [r3, #0]
    2d12:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    2d16:	b662      	cpsie	i
}
    2d18:	b00f      	add	sp, #60	; 0x3c
    2d1a:	bd30      	pop	{r4, r5, pc}
    2d1c:	000003ed 	.word	0x000003ed
    2d20:	200000d0 	.word	0x200000d0
    2d24:	0000167d 	.word	0x0000167d
    2d28:	00003e7f 	.word	0x00003e7f
    2d2c:	000013f9 	.word	0x000013f9
    2d30:	200042cc 	.word	0x200042cc
    2d34:	0000351d 	.word	0x0000351d

00002d38 <_Z16configurationPPSv>:

void configurationPPS(void){
    2d38:	b510      	push	{r4, lr}
    2d3a:	b084      	sub	sp, #16
		hmi.printf("confif pps\r\n");
    2d3c:	480e      	ldr	r0, [pc, #56]	; (2d78 <_Z16configurationPPSv+0x40>)
    2d3e:	490f      	ldr	r1, [pc, #60]	; (2d7c <_Z16configurationPPSv+0x44>)
    2d40:	4b0f      	ldr	r3, [pc, #60]	; (2d80 <_Z16configurationPPSv+0x48>)
    2d42:	4798      	blx	r3
	//	pps.rise(ppsISR);
		struct extint_chan_conf eint_chan_conf;
		extint_chan_get_config_defaults(&eint_chan_conf);
    2d44:	ac01      	add	r4, sp, #4
    2d46:	1c20      	adds	r0, r4, #0
    2d48:	4b0e      	ldr	r3, [pc, #56]	; (2d84 <_Z16configurationPPSv+0x4c>)
    2d4a:	4798      	blx	r3
		// put the button as EXTINT
		eint_chan_conf.gpio_pin           = PIN_PA28A_EIC_EXTINT8;
    2d4c:	231c      	movs	r3, #28
    2d4e:	9301      	str	r3, [sp, #4]
		eint_chan_conf.gpio_pin_mux       = MUX_PA28A_EIC_EXTINT8;
    2d50:	2300      	movs	r3, #0
    2d52:	6063      	str	r3, [r4, #4]
		eint_chan_conf.detection_criteria = EXTINT_DETECT_RISING;
    2d54:	2201      	movs	r2, #1
    2d56:	72e2      	strb	r2, [r4, #11]
		eint_chan_conf.filter_input_signal = false;
    2d58:	72a3      	strb	r3, [r4, #10]
		
		extint_chan_set_config(8, &eint_chan_conf);
    2d5a:	2008      	movs	r0, #8
    2d5c:	1c21      	adds	r1, r4, #0
    2d5e:	4b0a      	ldr	r3, [pc, #40]	; (2d88 <_Z16configurationPPSv+0x50>)
    2d60:	4798      	blx	r3
		//configuration callback
		extint_register_callback(&ppsISR,8,EXTINT_CALLBACK_TYPE_DETECT);
    2d62:	480a      	ldr	r0, [pc, #40]	; (2d8c <_Z16configurationPPSv+0x54>)
    2d64:	2108      	movs	r1, #8
    2d66:	2200      	movs	r2, #0
    2d68:	4b09      	ldr	r3, [pc, #36]	; (2d90 <_Z16configurationPPSv+0x58>)
    2d6a:	4798      	blx	r3
		//InterruptManager::get()->add_handler(ppsISR, EIC_IRQn);
		//ppsIsrr.attach(&ppsISR);
		//activation callback
		extint_chan_enable_callback(8,EXTINT_CALLBACK_TYPE_DETECT);		
    2d6c:	2008      	movs	r0, #8
    2d6e:	2100      	movs	r1, #0
    2d70:	4b08      	ldr	r3, [pc, #32]	; (2d94 <_Z16configurationPPSv+0x5c>)
    2d72:	4798      	blx	r3
		
		
    2d74:	b004      	add	sp, #16
    2d76:	bd10      	pop	{r4, pc}
    2d78:	20004594 	.word	0x20004594
    2d7c:	0000ecd8 	.word	0x0000ecd8
    2d80:	00004f49 	.word	0x00004f49
    2d84:	00004145 	.word	0x00004145
    2d88:	00004159 	.word	0x00004159
    2d8c:	00002ca5 	.word	0x00002ca5
    2d90:	00004045 	.word	0x00004045
    2d94:	0000406d 	.word	0x0000406d

00002d98 <_ZN4mbed10SerialBaseD1Ev>:
#endif

protected:
    SerialBase(PinName tx, PinName rx);
    virtual ~SerialBase() {
    }
    2d98:	4770      	bx	lr
    2d9a:	46c0      	nop			; (mov r8, r8)

00002d9c <_ZN4mbed6SerialD1Ev>:
 * int main() {
 *     pc.printf("Hello World\n");
 * }
 * @endcode
 */
class Serial : public SerialBase, public Stream {
    2d9c:	b510      	push	{r4, lr}
    2d9e:	1c04      	adds	r4, r0, #0
    2da0:	4b06      	ldr	r3, [pc, #24]	; (2dbc <_ZN4mbed6SerialD1Ev+0x20>)
    2da2:	6003      	str	r3, [r0, #0]
    2da4:	1c19      	adds	r1, r3, #0
    2da6:	3118      	adds	r1, #24
    2da8:	22dc      	movs	r2, #220	; 0xdc
    2daa:	5081      	str	r1, [r0, r2]
    2dac:	334c      	adds	r3, #76	; 0x4c
    2dae:	3204      	adds	r2, #4
    2db0:	5083      	str	r3, [r0, r2]
    2db2:	30dc      	adds	r0, #220	; 0xdc
    2db4:	4b02      	ldr	r3, [pc, #8]	; (2dc0 <_ZN4mbed6SerialD1Ev+0x24>)
    2db6:	4798      	blx	r3
    2db8:	1c20      	adds	r0, r4, #0
    2dba:	bd10      	pop	{r4, pc}
    2dbc:	0000f1f0 	.word	0x0000f1f0
    2dc0:	00004f0d 	.word	0x00004f0d

00002dc4 <_ZThn220_N4mbed6SerialD1Ev>:
    2dc4:	b408      	push	{r3}
    2dc6:	4b02      	ldr	r3, [pc, #8]	; (2dd0 <_ZThn220_N4mbed6SerialD1Ev+0xc>)
    2dc8:	469c      	mov	ip, r3
    2dca:	38dc      	subs	r0, #220	; 0xdc
    2dcc:	bc08      	pop	{r3}
    2dce:	4760      	bx	ip
    2dd0:	00002d9d 	.word	0x00002d9d

00002dd4 <_ZThn224_N4mbed6SerialD1Ev>:
    2dd4:	b408      	push	{r3}
    2dd6:	4b02      	ldr	r3, [pc, #8]	; (2de0 <_ZThn224_N4mbed6SerialD1Ev+0xc>)
    2dd8:	469c      	mov	ip, r3
    2dda:	38e0      	subs	r0, #224	; 0xe0
    2ddc:	bc08      	pop	{r3}
    2dde:	4760      	bx	ip
    2de0:	00002d9d 	.word	0x00002d9d

00002de4 <_ZN4mbed10SerialBaseD0Ev>:
    void interrupt_handler_asynch(void);
#endif

protected:
    SerialBase(PinName tx, PinName rx);
    virtual ~SerialBase() {
    2de4:	b510      	push	{r4, lr}
    2de6:	1c04      	adds	r4, r0, #0
    }
    2de8:	4b01      	ldr	r3, [pc, #4]	; (2df0 <_ZN4mbed10SerialBaseD0Ev+0xc>)
    2dea:	4798      	blx	r3
    2dec:	1c20      	adds	r0, r4, #0
    2dee:	bd10      	pop	{r4, pc}
    2df0:	00006663 	.word	0x00006663

00002df4 <_Z6report11structClocki>:
#endif
/************************************************************************/
/* FUNCTION                                                             */
/************************************************************************/

void report(Clock offset,int type){//type=1 for master type=2 for slave
    2df4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2df6:	b0e9      	sub	sp, #420	; 0x1a4
    2df8:	ac01      	add	r4, sp, #4
    2dfa:	9001      	str	r0, [sp, #4]
    2dfc:	9102      	str	r1, [sp, #8]
    2dfe:	9203      	str	r2, [sp, #12]
	#ifdef MASTERMODE
		uint8_t i;
	
		uint8_t buffer[100];
		uint8_t send[CLP_UTILITY_MAX_PACKET_SIZE];
		buffer[0] = 'V';
    2e00:	aa04      	add	r2, sp, #16
    2e02:	2156      	movs	r1, #86	; 0x56
    2e04:	7011      	strb	r1, [r2, #0]
	
		buffer[1] = type;
    2e06:	7053      	strb	r3, [r2, #1]


		//data
		long int time= offset.second*32000+offset.halfmillis;
    2e08:	9901      	ldr	r1, [sp, #4]
    2e0a:	9a02      	ldr	r2, [sp, #8]
    2e0c:	23fa      	movs	r3, #250	; 0xfa
    2e0e:	01db      	lsls	r3, r3, #7
    2e10:	434b      	muls	r3, r1
    2e12:	189b      	adds	r3, r3, r2
		if(offset.sign==false){
    2e14:	7a22      	ldrb	r2, [r4, #8]
    2e16:	2a00      	cmp	r2, #0
    2e18:	d100      	bne.n	2e1c <_Z6report11structClocki+0x28>
			time=-time;	
    2e1a:	425b      	negs	r3, r3
		}
		buffer[2]=(uint8_t)(time&0x00FF);
    2e1c:	aa04      	add	r2, sp, #16
    2e1e:	7093      	strb	r3, [r2, #2]
		buffer[3]=(uint8_t)((time>>8)&0x00FF);
    2e20:	1219      	asrs	r1, r3, #8
    2e22:	70d1      	strb	r1, [r2, #3]
		buffer[4]=(uint8_t)((time>>16)&0x00FF);
    2e24:	1419      	asrs	r1, r3, #16
    2e26:	7111      	strb	r1, [r2, #4]
		buffer[5]=(uint8_t)((time>>24)&0x00FF);
    2e28:	0e1b      	lsrs	r3, r3, #24
    2e2a:	7153      	strb	r3, [r2, #5]
	
		size_t length = CLP_GeneratePacket(send, buffer, 6);
    2e2c:	a81d      	add	r0, sp, #116	; 0x74
    2e2e:	1c11      	adds	r1, r2, #0
    2e30:	2206      	movs	r2, #6
    2e32:	4b09      	ldr	r3, [pc, #36]	; (2e58 <_Z6report11structClocki+0x64>)
    2e34:	4798      	blx	r3
    2e36:	1e06      	subs	r6, r0, #0

		for(i=0;i<length;i++){
    2e38:	d00b      	beq.n	2e52 <_Z6report11structClocki+0x5e>
    2e3a:	2400      	movs	r4, #0
			pc.putc(send[i]);
    2e3c:	4d07      	ldr	r5, [pc, #28]	; (2e5c <_Z6report11structClocki+0x68>)
    2e3e:	35dc      	adds	r5, #220	; 0xdc
    2e40:	4f07      	ldr	r7, [pc, #28]	; (2e60 <_Z6report11structClocki+0x6c>)
    2e42:	ab1d      	add	r3, sp, #116	; 0x74
    2e44:	5d19      	ldrb	r1, [r3, r4]
    2e46:	1c28      	adds	r0, r5, #0
    2e48:	47b8      	blx	r7
		buffer[4]=(uint8_t)((time>>16)&0x00FF);
		buffer[5]=(uint8_t)((time>>24)&0x00FF);
	
		size_t length = CLP_GeneratePacket(send, buffer, 6);

		for(i=0;i<length;i++){
    2e4a:	3401      	adds	r4, #1
    2e4c:	b2e4      	uxtb	r4, r4
    2e4e:	42a6      	cmp	r6, r4
    2e50:	d8f7      	bhi.n	2e42 <_Z6report11structClocki+0x4e>
	#endif
	
	
	
	
}
    2e52:	b069      	add	sp, #420	; 0x1a4
    2e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e56:	46c0      	nop			; (mov r8, r8)
    2e58:	0000017d 	.word	0x0000017d
    2e5c:	20004104 	.word	0x20004104
    2e60:	00004f31 	.word	0x00004f31

00002e64 <_Z4pgcdii>:
	}
	
}


int pgcd( int a ,int b){
    2e64:	b510      	push	{r4, lr}
	int i=0;
	while ((!(a*b == 0))&&(i<1000)) {
    2e66:	1c0b      	adds	r3, r1, #0
    2e68:	4343      	muls	r3, r0
    2e6a:	2b00      	cmp	r3, #0
    2e6c:	d013      	beq.n	2e96 <_Z4pgcdii+0x32>
    2e6e:	2300      	movs	r3, #0
    2e70:	24fa      	movs	r4, #250	; 0xfa
    2e72:	00a4      	lsls	r4, r4, #2
		if (a>b) {
    2e74:	4288      	cmp	r0, r1
    2e76:	dd01      	ble.n	2e7c <_Z4pgcdii+0x18>
			a = a - b ;
    2e78:	1a40      	subs	r0, r0, r1
    2e7a:	e000      	b.n	2e7e <_Z4pgcdii+0x1a>
		}
		else{
			b = b - a ;
    2e7c:	1a09      	subs	r1, r1, r0
		}
		i++;
    2e7e:	3301      	adds	r3, #1
}


int pgcd( int a ,int b){
	int i=0;
	while ((!(a*b == 0))&&(i<1000)) {
    2e80:	1c0a      	adds	r2, r1, #0
    2e82:	4342      	muls	r2, r0
    2e84:	2a00      	cmp	r2, #0
    2e86:	d003      	beq.n	2e90 <_Z4pgcdii+0x2c>
    2e88:	42a3      	cmp	r3, r4
    2e8a:	d1f3      	bne.n	2e74 <_Z4pgcdii+0x10>
			b = b - a ;
		}
		i++;
	}
	if(i>=1000){
		return 1;
    2e8c:	2101      	movs	r1, #1
    2e8e:	e007      	b.n	2ea0 <_Z4pgcdii+0x3c>
		else{
			b = b - a ;
		}
		i++;
	}
	if(i>=1000){
    2e90:	4a04      	ldr	r2, [pc, #16]	; (2ea4 <_Z4pgcdii+0x40>)
    2e92:	4293      	cmp	r3, r2
    2e94:	dc03      	bgt.n	2e9e <_Z4pgcdii+0x3a>
		return 1;
	}
	if(a==0){
    2e96:	2800      	cmp	r0, #0
    2e98:	d002      	beq.n	2ea0 <_Z4pgcdii+0x3c>
    2e9a:	1c01      	adds	r1, r0, #0
    2e9c:	e000      	b.n	2ea0 <_Z4pgcdii+0x3c>
			b = b - a ;
		}
		i++;
	}
	if(i>=1000){
		return 1;
    2e9e:	2101      	movs	r1, #1
	}
	else{
		return a;
	}
	return a;
}
    2ea0:	1c08      	adds	r0, r1, #0
    2ea2:	bd10      	pop	{r4, pc}
    2ea4:	000003e7 	.word	0x000003e7

00002ea8 <_Z24resetSofftwareCorrectionv>:

void resetSofftwareCorrection(void){

		sumOffset.second=0;
    2ea8:	4a06      	ldr	r2, [pc, #24]	; (2ec4 <_Z24resetSofftwareCorrectionv+0x1c>)
    2eaa:	2300      	movs	r3, #0
    2eac:	6013      	str	r3, [r2, #0]
		sumOffset.halfmillis=0;
    2eae:	6053      	str	r3, [r2, #4]
		timeProt.correction.nbCorrection=0;
    2eb0:	4a05      	ldr	r2, [pc, #20]	; (2ec8 <_Z24resetSofftwareCorrectionv+0x20>)
    2eb2:	21a4      	movs	r1, #164	; 0xa4
    2eb4:	5053      	str	r3, [r2, r1]
		timeProt.correction.sumTime.second=0;
    2eb6:	3120      	adds	r1, #32
    2eb8:	5053      	str	r3, [r2, r1]
		timeProt.correction.sumTime.halfmillis=0;
    2eba:	3104      	adds	r1, #4
    2ebc:	5053      	str	r3, [r2, r1]
		timeProt.correction.currentTimeOffsetSync.second=0;// to not take the first value
    2ebe:	3910      	subs	r1, #16
    2ec0:	5053      	str	r3, [r2, r1]
}
    2ec2:	4770      	bx	lr
    2ec4:	200041f8 	.word	0x200041f8
    2ec8:	200042cc 	.word	0x200042cc

00002ecc <_Z17sofwareCorrectionv>:
		
	}
	
}

void sofwareCorrection(){
    2ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ece:	465f      	mov	r7, fp
    2ed0:	4656      	mov	r6, sl
    2ed2:	464d      	mov	r5, r9
    2ed4:	4644      	mov	r4, r8
    2ed6:	b4f0      	push	{r4, r5, r6, r7}
    2ed8:	b091      	sub	sp, #68	; 0x44
	if(timeProt.correction.nbCorrection!=0){
    2eda:	23a4      	movs	r3, #164	; 0xa4
    2edc:	4ac2      	ldr	r2, [pc, #776]	; (31e8 <_Z17sofwareCorrectionv+0x31c>)
    2ede:	58d3      	ldr	r3, [r2, r3]
    2ee0:	2b00      	cmp	r3, #0
    2ee2:	d100      	bne.n	2ee6 <_Z17sofwareCorrectionv+0x1a>
    2ee4:	e178      	b.n	31d8 <_Z17sofwareCorrectionv+0x30c>
	//	printf("nb corr : %d",timeProt.correction.nbCorrection);
		sendHMI("	Software Correction ");
    2ee6:	48c1      	ldr	r0, [pc, #772]	; (31ec <_Z17sofwareCorrectionv+0x320>)
    2ee8:	4bc1      	ldr	r3, [pc, #772]	; (31f0 <_Z17sofwareCorrectionv+0x324>)
    2eea:	4798      	blx	r3
		//interval of time
		Clock averageTime;
		Clock averageOffset;
		Clock sumOffsetl;
		float fcorr=0;
		int indice=timeProt.correction.indiceFull;
    2eec:	49be      	ldr	r1, [pc, #760]	; (31e8 <_Z17sofwareCorrectionv+0x31c>)
    2eee:	2322      	movs	r3, #34	; 0x22
    2ef0:	33ff      	adds	r3, #255	; 0xff
    2ef2:	5cc8      	ldrb	r0, [r1, r3]
			

		sumOffsetl=sumOffset;
    2ef4:	ab0d      	add	r3, sp, #52	; 0x34
    2ef6:	4abf      	ldr	r2, [pc, #764]	; (31f4 <_Z17sofwareCorrectionv+0x328>)
    2ef8:	1c1c      	adds	r4, r3, #0
    2efa:	cae0      	ldmia	r2!, {r5, r6, r7}
    2efc:	c4e0      	stmia	r4!, {r5, r6, r7}

		
		//sign change
		if(timeProt.correction.valueCor!=sumOffsetl.sign){//if the sum of the offset change of sign error ze reset the software corection 
    2efe:	22a8      	movs	r2, #168	; 0xa8
    2f00:	5c8a      	ldrb	r2, [r1, r2]
    2f02:	7a19      	ldrb	r1, [r3, #8]
    2f04:	b2d3      	uxtb	r3, r2
		//interval of time
		Clock averageTime;
		Clock averageOffset;
		Clock sumOffsetl;
		float fcorr=0;
		int indice=timeProt.correction.indiceFull;
    2f06:	4680      	mov	r8, r0

		sumOffsetl=sumOffset;

		
		//sign change
		if(timeProt.correction.valueCor!=sumOffsetl.sign){//if the sum of the offset change of sign error ze reset the software corection 
    2f08:	428b      	cmp	r3, r1
    2f0a:	d006      	beq.n	2f1a <_Z17sofwareCorrectionv+0x4e>
			indice=0;
			timeProt.correction.indiceMoySoftCor=0;
    2f0c:	2100      	movs	r1, #0
    2f0e:	2390      	movs	r3, #144	; 0x90
    2f10:	005b      	lsls	r3, r3, #1
    2f12:	4ab5      	ldr	r2, [pc, #724]	; (31e8 <_Z17sofwareCorrectionv+0x31c>)
    2f14:	54d1      	strb	r1, [r2, r3]
		sumOffsetl=sumOffset;

		
		//sign change
		if(timeProt.correction.valueCor!=sumOffsetl.sign){//if the sum of the offset change of sign error ze reset the software corection 
			indice=0;
    2f16:	2300      	movs	r3, #0
    2f18:	4698      	mov	r8, r3
			timeProt.correction.indiceMoySoftCor=0;
		
		}
		
		float second=(float)timeProt.correction.sumTime.second/timeProt.correction.nbCorrection;
    2f1a:	4fb3      	ldr	r7, [pc, #716]	; (31e8 <_Z17sofwareCorrectionv+0x31c>)
    2f1c:	23c4      	movs	r3, #196	; 0xc4
    2f1e:	58f8      	ldr	r0, [r7, r3]
    2f20:	3b20      	subs	r3, #32
    2f22:	58fc      	ldr	r4, [r7, r3]
    2f24:	4eb4      	ldr	r6, [pc, #720]	; (31f8 <_Z17sofwareCorrectionv+0x32c>)
    2f26:	47b0      	blx	r6
    2f28:	1c05      	adds	r5, r0, #0
    2f2a:	1c20      	adds	r0, r4, #0
    2f2c:	47b0      	blx	r6
    2f2e:	1c01      	adds	r1, r0, #0
    2f30:	1c28      	adds	r0, r5, #0
    2f32:	4bb2      	ldr	r3, [pc, #712]	; (31fc <_Z17sofwareCorrectionv+0x330>)
    2f34:	4798      	blx	r3
    2f36:	1c05      	adds	r5, r0, #0
		int secondi=(int)second;
    2f38:	4bb1      	ldr	r3, [pc, #708]	; (3200 <_Z17sofwareCorrectionv+0x334>)
    2f3a:	4798      	blx	r3
    2f3c:	1c06      	adds	r6, r0, #0
				//calcul average time
				//printf("second : %d,%d",secondi,(int)((second-secondi)*1000.0));
				
		averageTime.second=secondi;
    2f3e:	9007      	str	r0, [sp, #28]
		averageTime.halfmillis=(timeProt.correction.sumTime.halfmillis/timeProt.correction.nbCorrection)+RTC_FREQ*1.0*((float)(second-secondi));
    2f40:	23c8      	movs	r3, #200	; 0xc8
    2f42:	58f8      	ldr	r0, [r7, r3]
    2f44:	4faf      	ldr	r7, [pc, #700]	; (3204 <_Z17sofwareCorrectionv+0x338>)
    2f46:	1c21      	adds	r1, r4, #0
    2f48:	47b8      	blx	r7
    2f4a:	4baf      	ldr	r3, [pc, #700]	; (3208 <_Z17sofwareCorrectionv+0x33c>)
    2f4c:	4798      	blx	r3
    2f4e:	9002      	str	r0, [sp, #8]
    2f50:	9103      	str	r1, [sp, #12]
    2f52:	1c30      	adds	r0, r6, #0
    2f54:	4bad      	ldr	r3, [pc, #692]	; (320c <_Z17sofwareCorrectionv+0x340>)
    2f56:	4798      	blx	r3
    2f58:	1c01      	adds	r1, r0, #0
    2f5a:	1c28      	adds	r0, r5, #0
    2f5c:	4bac      	ldr	r3, [pc, #688]	; (3210 <_Z17sofwareCorrectionv+0x344>)
    2f5e:	4798      	blx	r3
    2f60:	4bac      	ldr	r3, [pc, #688]	; (3214 <_Z17sofwareCorrectionv+0x348>)
    2f62:	4798      	blx	r3
    2f64:	2200      	movs	r2, #0
    2f66:	4bac      	ldr	r3, [pc, #688]	; (3218 <_Z17sofwareCorrectionv+0x34c>)
    2f68:	4dac      	ldr	r5, [pc, #688]	; (321c <_Z17sofwareCorrectionv+0x350>)
    2f6a:	47a8      	blx	r5
    2f6c:	1c02      	adds	r2, r0, #0
    2f6e:	1c0b      	adds	r3, r1, #0
    2f70:	9802      	ldr	r0, [sp, #8]
    2f72:	9903      	ldr	r1, [sp, #12]
    2f74:	4daa      	ldr	r5, [pc, #680]	; (3220 <_Z17sofwareCorrectionv+0x354>)
    2f76:	47a8      	blx	r5
    2f78:	4baa      	ldr	r3, [pc, #680]	; (3224 <_Z17sofwareCorrectionv+0x358>)
    2f7a:	4798      	blx	r3
    2f7c:	9008      	str	r0, [sp, #32]
		//unsigned long int averageTimeli=(averageTime.second*2000)+(averageTime.halfmillis);
		//calcul average offset
		averageOffset.second=sumOffset.second/timeProt.correction.nbCorrection;
    2f7e:	4e9d      	ldr	r6, [pc, #628]	; (31f4 <_Z17sofwareCorrectionv+0x328>)
    2f80:	6830      	ldr	r0, [r6, #0]
    2f82:	1c21      	adds	r1, r4, #0
    2f84:	47b8      	blx	r7
    2f86:	ad0a      	add	r5, sp, #40	; 0x28
    2f88:	900a      	str	r0, [sp, #40]	; 0x28
		averageOffset.halfmillis=sumOffset.halfmillis/timeProt.correction.nbCorrection;
    2f8a:	6870      	ldr	r0, [r6, #4]
    2f8c:	1c21      	adds	r1, r4, #0
    2f8e:	47b8      	blx	r7
    2f90:	6068      	str	r0, [r5, #4]
		averageOffset.sign=sumOffset.sign;
    2f92:	7a33      	ldrb	r3, [r6, #8]
    2f94:	b2db      	uxtb	r3, r3
    2f96:	722b      	strb	r3, [r5, #8]
		printfClock(averageTime);
		printf("averageOffseet: ");
		printfClock(averageOffset);*/
		
		//calcul of average time in hms
		unsigned long int diffhms=averageTime.second*RTC_FREQ+averageTime.halfmillis;
    2f98:	9807      	ldr	r0, [sp, #28]
    2f9a:	9a08      	ldr	r2, [sp, #32]
		//offset in hms
		long int offset=averageOffset.second*RTC_FREQ+averageOffset.halfmillis;
    2f9c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    2f9e:	6869      	ldr	r1, [r5, #4]
    2fa0:	23fa      	movs	r3, #250	; 0xfa
    2fa2:	01db      	lsls	r3, r3, #7
    2fa4:	4363      	muls	r3, r4
    2fa6:	185f      	adds	r7, r3, r1
		if (averageOffset.sign==false)
    2fa8:	7a2b      	ldrb	r3, [r5, #8]
    2faa:	2b00      	cmp	r3, #0
    2fac:	d100      	bne.n	2fb0 <_Z17sofwareCorrectionv+0xe4>
		{
			offset=-offset;
    2fae:	427f      	negs	r7, r7
		float correctionTime=0.0;
		int corr;
		int corrTime;
		int nbwait;
		
		corr=valueCor;
    2fb0:	4b9d      	ldr	r3, [pc, #628]	; (3228 <_Z17sofwareCorrectionv+0x35c>)
    2fb2:	681b      	ldr	r3, [r3, #0]
		nbwait=timeCorrection;
    2fb4:	4b9d      	ldr	r3, [pc, #628]	; (322c <_Z17sofwareCorrectionv+0x360>)
    2fb6:	681c      	ldr	r4, [r3, #0]
		corrTime=nbwait;		

		if(offset!=0){
    2fb8:	2f00      	cmp	r7, #0
    2fba:	d100      	bne.n	2fbe <_Z17sofwareCorrectionv+0xf2>
    2fbc:	e0f8      	b.n	31b0 <_Z17sofwareCorrectionv+0x2e4>
					//printf("correction need %d(%d)\r\n",(int)fcorr,nbwait);	
					if(fcorr<0){
						fcorr=-fcorr;
					}
					
					while((nbwait<1000)&&(fcorr<0.5)){
    2fbe:	4b9c      	ldr	r3, [pc, #624]	; (3230 <_Z17sofwareCorrectionv+0x364>)
    2fc0:	429c      	cmp	r4, r3
    2fc2:	dc27      	bgt.n	3014 <_Z17sofwareCorrectionv+0x148>
		printfClock(averageTime);
		printf("averageOffseet: ");
		printfClock(averageOffset);*/
		
		//calcul of average time in hms
		unsigned long int diffhms=averageTime.second*RTC_FREQ+averageTime.halfmillis;
    2fc4:	23fa      	movs	r3, #250	; 0xfa
    2fc6:	01db      	lsls	r3, r3, #7
    2fc8:	4358      	muls	r0, r3
    2fca:	1880      	adds	r0, r0, r2
					if(fcorr<0){
						fcorr=-fcorr;
					}
					
					while((nbwait<1000)&&(fcorr<0.5)){
						fcorr=(float)((float)VALUE_TIMER*nbwait*offset*1.0)/(diffhms);
    2fcc:	4b8a      	ldr	r3, [pc, #552]	; (31f8 <_Z17sofwareCorrectionv+0x32c>)
    2fce:	4798      	blx	r3
    2fd0:	9002      	str	r0, [sp, #8]
    2fd2:	4e8e      	ldr	r6, [pc, #568]	; (320c <_Z17sofwareCorrectionv+0x340>)
    2fd4:	4d97      	ldr	r5, [pc, #604]	; (3234 <_Z17sofwareCorrectionv+0x368>)
    2fd6:	4b89      	ldr	r3, [pc, #548]	; (31fc <_Z17sofwareCorrectionv+0x330>)
    2fd8:	469a      	mov	sl, r3
					//printf("correction need %d(%d)\r\n",(int)fcorr,nbwait);	
					if(fcorr<0){
						fcorr=-fcorr;
					}
					
					while((nbwait<1000)&&(fcorr<0.5)){
    2fda:	23fa      	movs	r3, #250	; 0xfa
    2fdc:	009b      	lsls	r3, r3, #2
    2fde:	4699      	mov	r9, r3
    2fe0:	4b95      	ldr	r3, [pc, #596]	; (3238 <_Z17sofwareCorrectionv+0x36c>)
    2fe2:	469b      	mov	fp, r3
    2fe4:	9704      	str	r7, [sp, #16]
						fcorr=(float)((float)VALUE_TIMER*nbwait*offset*1.0)/(diffhms);
    2fe6:	1c20      	adds	r0, r4, #0
    2fe8:	47b0      	blx	r6
    2fea:	4994      	ldr	r1, [pc, #592]	; (323c <_Z17sofwareCorrectionv+0x370>)
    2fec:	47a8      	blx	r5
    2fee:	1c07      	adds	r7, r0, #0
    2ff0:	9804      	ldr	r0, [sp, #16]
    2ff2:	47b0      	blx	r6
    2ff4:	1c01      	adds	r1, r0, #0
    2ff6:	1c38      	adds	r0, r7, #0
    2ff8:	47a8      	blx	r5
    2ffa:	9902      	ldr	r1, [sp, #8]
    2ffc:	47d0      	blx	sl
    2ffe:	1c07      	adds	r7, r0, #0
						nbwait++;
    3000:	3401      	adds	r4, #1
					//printf("correction need %d(%d)\r\n",(int)fcorr,nbwait);	
					if(fcorr<0){
						fcorr=-fcorr;
					}
					
					while((nbwait<1000)&&(fcorr<0.5)){
    3002:	454c      	cmp	r4, r9
    3004:	d009      	beq.n	301a <_Z17sofwareCorrectionv+0x14e>
    3006:	21fc      	movs	r1, #252	; 0xfc
    3008:	0589      	lsls	r1, r1, #22
    300a:	47d8      	blx	fp
    300c:	2800      	cmp	r0, #0
    300e:	d1ea      	bne.n	2fe6 <_Z17sofwareCorrectionv+0x11a>
    3010:	1c3a      	adds	r2, r7, #0
    3012:	e003      	b.n	301c <_Z17sofwareCorrectionv+0x150>
    3014:	2300      	movs	r3, #0
    3016:	1c1a      	adds	r2, r3, #0
    3018:	e000      	b.n	301c <_Z17sofwareCorrectionv+0x150>
    301a:	1c02      	adds	r2, r0, #0
					//fcorr=fcorr*RTC_FREQ;	
					

				//	printf("correction need %d/10(%d)\r\n",(int)fcorr*10,nbwait);			
					int i;
					timeProt.correction.moySoftCor[timeProt.correction.indiceMoySoftCor][0]=fcorr;
    301c:	4e72      	ldr	r6, [pc, #456]	; (31e8 <_Z17sofwareCorrectionv+0x31c>)
    301e:	2390      	movs	r3, #144	; 0x90
    3020:	005b      	lsls	r3, r3, #1
    3022:	5cf5      	ldrb	r5, [r6, r3]
    3024:	1c2b      	adds	r3, r5, #0
    3026:	3319      	adds	r3, #25
    3028:	00db      	lsls	r3, r3, #3
    302a:	18f3      	adds	r3, r6, r3
    302c:	609a      	str	r2, [r3, #8]
					timeProt.correction.moySoftCor[timeProt.correction.indiceMoySoftCor][1]=nbwait;
    302e:	00eb      	lsls	r3, r5, #3
    3030:	18f6      	adds	r6, r6, r3
    3032:	36cc      	adds	r6, #204	; 0xcc
    3034:	1c20      	adds	r0, r4, #0
    3036:	4b75      	ldr	r3, [pc, #468]	; (320c <_Z17sofwareCorrectionv+0x340>)
    3038:	4798      	blx	r3
    303a:	60b0      	str	r0, [r6, #8]
					timeProt.correction.indiceMoySoftCor++;
    303c:	3501      	adds	r5, #1
    303e:	b2ed      	uxtb	r5, r5
					if(indice<MOYCORLENGTH){//if ze have enougth space to sqve the value
						indice++;
    3040:	2209      	movs	r2, #9
    3042:	4643      	mov	r3, r8
    3044:	0fd9      	lsrs	r1, r3, #31
    3046:	17d3      	asrs	r3, r2, #31
    3048:	4640      	mov	r0, r8
    304a:	4282      	cmp	r2, r0
    304c:	414b      	adcs	r3, r1
    304e:	4498      	add	r8, r3
					}
					if(timeProt.correction.indiceMoySoftCor>indice){
    3050:	45a8      	cmp	r8, r5
    3052:	db04      	blt.n	305e <_Z17sofwareCorrectionv+0x192>

				//	printf("correction need %d/10(%d)\r\n",(int)fcorr*10,nbwait);			
					int i;
					timeProt.correction.moySoftCor[timeProt.correction.indiceMoySoftCor][0]=fcorr;
					timeProt.correction.moySoftCor[timeProt.correction.indiceMoySoftCor][1]=nbwait;
					timeProt.correction.indiceMoySoftCor++;
    3054:	2390      	movs	r3, #144	; 0x90
    3056:	005b      	lsls	r3, r3, #1
    3058:	4a63      	ldr	r2, [pc, #396]	; (31e8 <_Z17sofwareCorrectionv+0x31c>)
    305a:	54d5      	strb	r5, [r2, r3]
    305c:	e004      	b.n	3068 <_Z17sofwareCorrectionv+0x19c>
					if(indice<MOYCORLENGTH){//if ze have enougth space to sqve the value
						indice++;
					}
					if(timeProt.correction.indiceMoySoftCor>indice){
						timeProt.correction.indiceMoySoftCor=0;
    305e:	2100      	movs	r1, #0
    3060:	2390      	movs	r3, #144	; 0x90
    3062:	005b      	lsls	r3, r3, #1
    3064:	4a60      	ldr	r2, [pc, #384]	; (31e8 <_Z17sofwareCorrectionv+0x31c>)
    3066:	54d1      	strb	r1, [r2, r3]
					}
					
					
					for(i=0;i<indice;i++){//go to the maximum value save
    3068:	4643      	mov	r3, r8
    306a:	2b00      	cmp	r3, #0
    306c:	dd18      	ble.n	30a0 <_Z17sofwareCorrectionv+0x1d4>
    306e:	4a5e      	ldr	r2, [pc, #376]	; (31e8 <_Z17sofwareCorrectionv+0x31c>)
    3070:	1c16      	adds	r6, r2, #0
    3072:	36d0      	adds	r6, #208	; 0xd0
    3074:	331a      	adds	r3, #26
    3076:	00db      	lsls	r3, r3, #3
    3078:	18d5      	adds	r5, r2, r3
    307a:	2400      	movs	r4, #0
    307c:	9402      	str	r4, [sp, #8]
						//	printf("i : %d, value : %d\r\n",i,(int)timeProt.correction.moySoftCor[i]);
							correctionSoft+=timeProt.correction.moySoftCor[i][0];
    307e:	4f70      	ldr	r7, [pc, #448]	; (3240 <_Z17sofwareCorrectionv+0x374>)
    3080:	1c2b      	adds	r3, r5, #0
    3082:	1c25      	adds	r5, r4, #0
    3084:	1c1c      	adds	r4, r3, #0
    3086:	9802      	ldr	r0, [sp, #8]
    3088:	6831      	ldr	r1, [r6, #0]
    308a:	47b8      	blx	r7
    308c:	9002      	str	r0, [sp, #8]
							correctionTime+=timeProt.correction.moySoftCor[i][1];
    308e:	1c28      	adds	r0, r5, #0
    3090:	6871      	ldr	r1, [r6, #4]
    3092:	47b8      	blx	r7
    3094:	1c05      	adds	r5, r0, #0
    3096:	3608      	adds	r6, #8
					if(timeProt.correction.indiceMoySoftCor>indice){
						timeProt.correction.indiceMoySoftCor=0;
					}
					
					
					for(i=0;i<indice;i++){//go to the maximum value save
    3098:	42a6      	cmp	r6, r4
    309a:	d1f4      	bne.n	3086 <_Z17sofwareCorrectionv+0x1ba>
    309c:	1c04      	adds	r4, r0, #0
    309e:	e001      	b.n	30a4 <_Z17sofwareCorrectionv+0x1d8>
			offset=-offset;
		}
		//printf("offset : %lu\r\n",offset);
		//printf("diffhms : %lu\r\n",diffhms);
		float correctionSoft=0.0;
		float correctionTime=0.0;
    30a0:	2400      	movs	r4, #0
		{
			offset=-offset;
		}
		//printf("offset : %lu\r\n",offset);
		//printf("diffhms : %lu\r\n",diffhms);
		float correctionSoft=0.0;
    30a2:	9402      	str	r4, [sp, #8]
							correctionSoft+=timeProt.correction.moySoftCor[i][0];
							correctionTime+=timeProt.correction.moySoftCor[i][1];
					}
				//	printf("sumCorr : %d",(int)correctionSoft);
					
					correctionSoft=(float)(1.0*correctionSoft)/(indice*1.0);//calcul the average value of the software correction 
    30a4:	4640      	mov	r0, r8
    30a6:	4b67      	ldr	r3, [pc, #412]	; (3244 <_Z17sofwareCorrectionv+0x378>)
    30a8:	4798      	blx	r3
    30aa:	9004      	str	r0, [sp, #16]
    30ac:	9105      	str	r1, [sp, #20]
    30ae:	4f59      	ldr	r7, [pc, #356]	; (3214 <_Z17sofwareCorrectionv+0x348>)
    30b0:	9802      	ldr	r0, [sp, #8]
    30b2:	47b8      	blx	r7
    30b4:	4e64      	ldr	r6, [pc, #400]	; (3248 <_Z17sofwareCorrectionv+0x37c>)
    30b6:	9a04      	ldr	r2, [sp, #16]
    30b8:	9b05      	ldr	r3, [sp, #20]
    30ba:	47b0      	blx	r6
    30bc:	4d63      	ldr	r5, [pc, #396]	; (324c <_Z17sofwareCorrectionv+0x380>)
    30be:	47a8      	blx	r5
    30c0:	9002      	str	r0, [sp, #8]
					correctionTime=(float)(1.0*correctionTime)/(indice*1.0);//calcul the average value of the software correction 
    30c2:	1c20      	adds	r0, r4, #0
    30c4:	47b8      	blx	r7
    30c6:	9a04      	ldr	r2, [sp, #16]
    30c8:	9b05      	ldr	r3, [sp, #20]
    30ca:	47b0      	blx	r6
    30cc:	47a8      	blx	r5
    30ce:	9004      	str	r0, [sp, #16]
					corr=(int)correctionSoft;//cast to int
					corrTime=(int)correctionTime;//cast to int
    30d0:	4a4b      	ldr	r2, [pc, #300]	; (3200 <_Z17sofwareCorrectionv+0x334>)
    30d2:	4693      	mov	fp, r2
    30d4:	4790      	blx	r2
    30d6:	1c04      	adds	r4, r0, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    30d8:	b672      	cpsid	i
    30da:	f3bf 8f5f 	dmb	sy
					Disable_global_interrupt();
    30de:	4d5c      	ldr	r5, [pc, #368]	; (3250 <_Z17sofwareCorrectionv+0x384>)
    30e0:	2300      	movs	r3, #0
    30e2:	702b      	strb	r3, [r5, #0]
					corr=valueCor+Coef_Software_Correction*(corr-valueCor);
    30e4:	4f50      	ldr	r7, [pc, #320]	; (3228 <_Z17sofwareCorrectionv+0x35c>)
    30e6:	683e      	ldr	r6, [r7, #0]
					}
				//	printf("sumCorr : %d",(int)correctionSoft);
					
					correctionSoft=(float)(1.0*correctionSoft)/(indice*1.0);//calcul the average value of the software correction 
					correctionTime=(float)(1.0*correctionTime)/(indice*1.0);//calcul the average value of the software correction 
					corr=(int)correctionSoft;//cast to int
    30e8:	9802      	ldr	r0, [sp, #8]
    30ea:	47d8      	blx	fp
					corrTime=(int)correctionTime;//cast to int
					Disable_global_interrupt();
					corr=valueCor+Coef_Software_Correction*(corr-valueCor);
    30ec:	1b80      	subs	r0, r0, r6
    30ee:	683f      	ldr	r7, [r7, #0]
    30f0:	19c7      	adds	r7, r0, r7
					Enable_global_interrupt();
    30f2:	2301      	movs	r3, #1
    30f4:	702b      	strb	r3, [r5, #0]
    30f6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    30fa:	b662      	cpsie	i
					if(corr<0){
    30fc:	2f00      	cmp	r7, #0
    30fe:	da0e      	bge.n	311e <_Z17sofwareCorrectionv+0x252>
							if(correctionSoft-corr<-0.5){//calculate int the most close to the real value
    3100:	1c38      	adds	r0, r7, #0
    3102:	4b42      	ldr	r3, [pc, #264]	; (320c <_Z17sofwareCorrectionv+0x340>)
    3104:	4798      	blx	r3
    3106:	1c01      	adds	r1, r0, #0
    3108:	9802      	ldr	r0, [sp, #8]
    310a:	4b41      	ldr	r3, [pc, #260]	; (3210 <_Z17sofwareCorrectionv+0x344>)
    310c:	4798      	blx	r3
    310e:	21bf      	movs	r1, #191	; 0xbf
    3110:	0609      	lsls	r1, r1, #24
    3112:	4b49      	ldr	r3, [pc, #292]	; (3238 <_Z17sofwareCorrectionv+0x36c>)
    3114:	4798      	blx	r3
								corr--;
    3116:	1e43      	subs	r3, r0, #1
    3118:	4198      	sbcs	r0, r3
    311a:	1a3f      	subs	r7, r7, r0
    311c:	e00d      	b.n	313a <_Z17sofwareCorrectionv+0x26e>
							}
					//		printf("corr<0");
					}
					else{
							if(correctionSoft-corr>0.5){//calculate int the most close to the real value
    311e:	1c38      	adds	r0, r7, #0
    3120:	4b3a      	ldr	r3, [pc, #232]	; (320c <_Z17sofwareCorrectionv+0x340>)
    3122:	4798      	blx	r3
    3124:	1c01      	adds	r1, r0, #0
    3126:	9802      	ldr	r0, [sp, #8]
    3128:	4b39      	ldr	r3, [pc, #228]	; (3210 <_Z17sofwareCorrectionv+0x344>)
    312a:	4798      	blx	r3
    312c:	21fc      	movs	r1, #252	; 0xfc
    312e:	0589      	lsls	r1, r1, #22
    3130:	4b48      	ldr	r3, [pc, #288]	; (3254 <_Z17sofwareCorrectionv+0x388>)
    3132:	4798      	blx	r3
								corr++;
    3134:	1e43      	subs	r3, r0, #1
    3136:	4198      	sbcs	r0, r3
    3138:	183f      	adds	r7, r7, r0
							}
					//		printf("corr>0");
					}
					
					if(correctionTime-corrTime>0.5){//calculate int the most close to the real value
    313a:	1c20      	adds	r0, r4, #0
    313c:	4b33      	ldr	r3, [pc, #204]	; (320c <_Z17sofwareCorrectionv+0x340>)
    313e:	4798      	blx	r3
    3140:	1c01      	adds	r1, r0, #0
    3142:	9804      	ldr	r0, [sp, #16]
    3144:	4b32      	ldr	r3, [pc, #200]	; (3210 <_Z17sofwareCorrectionv+0x344>)
    3146:	4798      	blx	r3
    3148:	21fc      	movs	r1, #252	; 0xfc
    314a:	0589      	lsls	r1, r1, #22
    314c:	4b41      	ldr	r3, [pc, #260]	; (3254 <_Z17sofwareCorrectionv+0x388>)
    314e:	4798      	blx	r3
						corrTime++;
    3150:	1e43      	subs	r3, r0, #1
    3152:	4198      	sbcs	r0, r3
    3154:	1824      	adds	r4, r4, r0
					}
					//	printf("moy : %d",(int)correctionSoft*1000);
					//	printf("corr: %u",corr);
					int pgcdi =pgcd(corrTime,corr);
    3156:	1c20      	adds	r0, r4, #0
    3158:	1c39      	adds	r1, r7, #0
    315a:	4b3f      	ldr	r3, [pc, #252]	; (3258 <_Z17sofwareCorrectionv+0x38c>)
    315c:	4798      	blx	r3
    315e:	1c03      	adds	r3, r0, #0
					corrTime=corrTime/pgcdi;
    3160:	4a3e      	ldr	r2, [pc, #248]	; (325c <_Z17sofwareCorrectionv+0x390>)
    3162:	4692      	mov	sl, r2
    3164:	1c20      	adds	r0, r4, #0
    3166:	9302      	str	r3, [sp, #8]
    3168:	1c19      	adds	r1, r3, #0
    316a:	4790      	blx	r2
    316c:	1c04      	adds	r4, r0, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    316e:	b672      	cpsid	i
    3170:	f3bf 8f5f 	dmb	sy
					corr=corr/pgcdi;
					Disable_global_interrupt();
    3174:	4a36      	ldr	r2, [pc, #216]	; (3250 <_Z17sofwareCorrectionv+0x384>)
    3176:	4691      	mov	r9, r2
    3178:	2300      	movs	r3, #0
    317a:	7013      	strb	r3, [r2, #0]
					
					valueCor=valueCor+Coef_Software_Correction*(corr-valueCor);
    317c:	4d2a      	ldr	r5, [pc, #168]	; (3228 <_Z17sofwareCorrectionv+0x35c>)
    317e:	682a      	ldr	r2, [r5, #0]
    3180:	4693      	mov	fp, r2
    3182:	682e      	ldr	r6, [r5, #0]
					}
					//	printf("moy : %d",(int)correctionSoft*1000);
					//	printf("corr: %u",corr);
					int pgcdi =pgcd(corrTime,corr);
					corrTime=corrTime/pgcdi;
					corr=corr/pgcdi;
    3184:	1c38      	adds	r0, r7, #0
    3186:	9902      	ldr	r1, [sp, #8]
    3188:	47d0      	blx	sl
					Disable_global_interrupt();
					
					valueCor=valueCor+Coef_Software_Correction*(corr-valueCor);
    318a:	465b      	mov	r3, fp
    318c:	1ac0      	subs	r0, r0, r3
    318e:	1986      	adds	r6, r0, r6
    3190:	602e      	str	r6, [r5, #0]
					timeCorrection=corrTime;
    3192:	4b26      	ldr	r3, [pc, #152]	; (322c <_Z17sofwareCorrectionv+0x360>)
    3194:	601c      	str	r4, [r3, #0]
					timeCorr=corrTime;
    3196:	4b32      	ldr	r3, [pc, #200]	; (3260 <_Z17sofwareCorrectionv+0x394>)
    3198:	601c      	str	r4, [r3, #0]
					Enable_global_interrupt();
    319a:	2301      	movs	r3, #1
    319c:	464a      	mov	r2, r9
    319e:	7013      	strb	r3, [r2, #0]
    31a0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    31a4:	b662      	cpsie	i
						
					
					timeProt.correction.indiceFull=indice;
    31a6:	2322      	movs	r3, #34	; 0x22
    31a8:	33ff      	adds	r3, #255	; 0xff
    31aa:	4a0f      	ldr	r2, [pc, #60]	; (31e8 <_Z17sofwareCorrectionv+0x31c>)
    31ac:	4641      	mov	r1, r8
    31ae:	54d1      	strb	r1, [r2, r3]
		}
			
		resetSofftwareCorrection();
    31b0:	4b2c      	ldr	r3, [pc, #176]	; (3264 <_Z17sofwareCorrectionv+0x398>)
    31b2:	4798      	blx	r3
		sprintf(messageHMICor,"		update time corr: %d(%d) sign : %d with %d sample",(int)valueCor,corrTime,averageOffset.sign,indice);
    31b4:	4b1c      	ldr	r3, [pc, #112]	; (3228 <_Z17sofwareCorrectionv+0x35c>)
    31b6:	681a      	ldr	r2, [r3, #0]
    31b8:	ab0a      	add	r3, sp, #40	; 0x28
    31ba:	7a1b      	ldrb	r3, [r3, #8]
    31bc:	4d2a      	ldr	r5, [pc, #168]	; (3268 <_Z17sofwareCorrectionv+0x39c>)
    31be:	9300      	str	r3, [sp, #0]
    31c0:	4643      	mov	r3, r8
    31c2:	9301      	str	r3, [sp, #4]
    31c4:	1c28      	adds	r0, r5, #0
    31c6:	4929      	ldr	r1, [pc, #164]	; (326c <_Z17sofwareCorrectionv+0x3a0>)
    31c8:	1c23      	adds	r3, r4, #0
    31ca:	4c29      	ldr	r4, [pc, #164]	; (3270 <_Z17sofwareCorrectionv+0x3a4>)
    31cc:	47a0      	blx	r4
		sendHMI(messageHMICor);
    31ce:	1c28      	adds	r0, r5, #0
    31d0:	4c07      	ldr	r4, [pc, #28]	; (31f0 <_Z17sofwareCorrectionv+0x324>)
    31d2:	47a0      	blx	r4
		sendHMI("	end Software correction");
    31d4:	4827      	ldr	r0, [pc, #156]	; (3274 <_Z17sofwareCorrectionv+0x3a8>)
    31d6:	47a0      	blx	r4
	}
	
}
    31d8:	b011      	add	sp, #68	; 0x44
    31da:	bc3c      	pop	{r2, r3, r4, r5}
    31dc:	4690      	mov	r8, r2
    31de:	4699      	mov	r9, r3
    31e0:	46a2      	mov	sl, r4
    31e2:	46ab      	mov	fp, r5
    31e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    31e6:	46c0      	nop			; (mov r8, r8)
    31e8:	200042cc 	.word	0x200042cc
    31ec:	0000ece8 	.word	0x0000ece8
    31f0:	00003bfd 	.word	0x00003bfd
    31f4:	200041f8 	.word	0x200041f8
    31f8:	000077fd 	.word	0x000077fd
    31fc:	00006de9 	.word	0x00006de9
    3200:	0000772d 	.word	0x0000772d
    3204:	0000666d 	.word	0x0000666d
    3208:	00009465 	.word	0x00009465
    320c:	0000776d 	.word	0x0000776d
    3210:	00007431 	.word	0x00007431
    3214:	000094c9 	.word	0x000094c9
    3218:	40df4000 	.word	0x40df4000
    321c:	00008759 	.word	0x00008759
    3220:	0000788d 	.word	0x0000788d
    3224:	00006ab5 	.word	0x00006ab5
    3228:	20003d50 	.word	0x20003d50
    322c:	20003d28 	.word	0x20003d28
    3230:	000003e7 	.word	0x000003e7
    3234:	000071cd 	.word	0x000071cd
    3238:	00006a11 	.word	0x00006a11
    323c:	461c4000 	.word	0x461c4000
    3240:	00006af1 	.word	0x00006af1
    3244:	000093ed 	.word	0x000093ed
    3248:	00007edd 	.word	0x00007edd
    324c:	00009571 	.word	0x00009571
    3250:	200000d0 	.word	0x200000d0
    3254:	00006a39 	.word	0x00006a39
    3258:	00002e65 	.word	0x00002e65
    325c:	0000678d 	.word	0x0000678d
    3260:	20003d30 	.word	0x20003d30
    3264:	00002ea9 	.word	0x00002ea9
    3268:	20004204 	.word	0x20004204
    326c:	0000ed00 	.word	0x0000ed00
    3270:	0000b451 	.word	0x0000b451
    3274:	0000ed34 	.word	0x0000ed34

00003278 <_Z18hardwareCorrectionv>:
		timeProt.correction.nbCorrection=0;
		timeProt.correction.sumTime.second=0;
		timeProt.correction.sumTime.halfmillis=0;
		timeProt.correction.currentTimeOffsetSync.second=0;// to not take the first value
}
bool hardwareCorrection(void){
    3278:	b5f0      	push	{r4, r5, r6, r7, lr}
    327a:	b08b      	sub	sp, #44	; 0x2c
	if(timeProt.correction.nbCorrection!=0){
    327c:	23a4      	movs	r3, #164	; 0xa4
    327e:	4a73      	ldr	r2, [pc, #460]	; (344c <_Z18hardwareCorrectionv+0x1d4>)
    3280:	58d3      	ldr	r3, [r2, r3]
			sendHMI("	end correction");
			return false;
		}
		
	}
	return false;	
    3282:	2000      	movs	r0, #0
		timeProt.correction.sumTime.second=0;
		timeProt.correction.sumTime.halfmillis=0;
		timeProt.correction.currentTimeOffsetSync.second=0;// to not take the first value
}
bool hardwareCorrection(void){
	if(timeProt.correction.nbCorrection!=0){
    3284:	2b00      	cmp	r3, #0
    3286:	d100      	bne.n	328a <_Z18hardwareCorrectionv+0x12>
    3288:	e0dd      	b.n	3446 <_Z18hardwareCorrectionv+0x1ce>
		sendHMI("	Hardware correction");
    328a:	4871      	ldr	r0, [pc, #452]	; (3450 <_Z18hardwareCorrectionv+0x1d8>)
    328c:	4b71      	ldr	r3, [pc, #452]	; (3454 <_Z18hardwareCorrectionv+0x1dc>)
    328e:	4798      	blx	r3
		long int sumOffsetl;
		Clock averageTime={0,0,true};
    3290:	af07      	add	r7, sp, #28
    3292:	2300      	movs	r3, #0
    3294:	9307      	str	r3, [sp, #28]
    3296:	9308      	str	r3, [sp, #32]
    3298:	3301      	adds	r3, #1
    329a:	723b      	strb	r3, [r7, #8]
		float second=(float)timeProt.correction.sumTime.second/timeProt.correction.nbCorrection;
    329c:	4c6b      	ldr	r4, [pc, #428]	; (344c <_Z18hardwareCorrectionv+0x1d4>)
    329e:	33c3      	adds	r3, #195	; 0xc3
    32a0:	58e0      	ldr	r0, [r4, r3]
    32a2:	3b20      	subs	r3, #32
    32a4:	58e3      	ldr	r3, [r4, r3]
    32a6:	9303      	str	r3, [sp, #12]
    32a8:	4e6b      	ldr	r6, [pc, #428]	; (3458 <_Z18hardwareCorrectionv+0x1e0>)
    32aa:	47b0      	blx	r6
    32ac:	1c05      	adds	r5, r0, #0
    32ae:	9803      	ldr	r0, [sp, #12]
    32b0:	47b0      	blx	r6
    32b2:	1c01      	adds	r1, r0, #0
    32b4:	1c28      	adds	r0, r5, #0
    32b6:	4b69      	ldr	r3, [pc, #420]	; (345c <_Z18hardwareCorrectionv+0x1e4>)
    32b8:	4798      	blx	r3
    32ba:	1c05      	adds	r5, r0, #0
		int secondi=(int)second;
    32bc:	4b68      	ldr	r3, [pc, #416]	; (3460 <_Z18hardwareCorrectionv+0x1e8>)
    32be:	4798      	blx	r3
    32c0:	1c06      	adds	r6, r0, #0
		//calcul average time
		//printf("second : %d,%d",secondi,(int)((second-secondi)*1000.0));
		
		averageTime.second=secondi;
    32c2:	9007      	str	r0, [sp, #28]
		averageTime.halfmillis=(timeProt.correction.sumTime.halfmillis/timeProt.correction.nbCorrection)+RTC_FREQ*1.0*((float)(second-secondi));
    32c4:	23c8      	movs	r3, #200	; 0xc8
    32c6:	58e0      	ldr	r0, [r4, r3]
    32c8:	9903      	ldr	r1, [sp, #12]
    32ca:	4b66      	ldr	r3, [pc, #408]	; (3464 <_Z18hardwareCorrectionv+0x1ec>)
    32cc:	4798      	blx	r3
    32ce:	4c66      	ldr	r4, [pc, #408]	; (3468 <_Z18hardwareCorrectionv+0x1f0>)
    32d0:	47a0      	blx	r4
    32d2:	9004      	str	r0, [sp, #16]
    32d4:	9105      	str	r1, [sp, #20]
    32d6:	1c30      	adds	r0, r6, #0
    32d8:	4b64      	ldr	r3, [pc, #400]	; (346c <_Z18hardwareCorrectionv+0x1f4>)
    32da:	4798      	blx	r3
    32dc:	1c01      	adds	r1, r0, #0
    32de:	1c28      	adds	r0, r5, #0
    32e0:	4b63      	ldr	r3, [pc, #396]	; (3470 <_Z18hardwareCorrectionv+0x1f8>)
    32e2:	4798      	blx	r3
    32e4:	4b63      	ldr	r3, [pc, #396]	; (3474 <_Z18hardwareCorrectionv+0x1fc>)
    32e6:	4798      	blx	r3
    32e8:	2200      	movs	r2, #0
    32ea:	4b63      	ldr	r3, [pc, #396]	; (3478 <_Z18hardwareCorrectionv+0x200>)
    32ec:	4d63      	ldr	r5, [pc, #396]	; (347c <_Z18hardwareCorrectionv+0x204>)
    32ee:	47a8      	blx	r5
    32f0:	1c02      	adds	r2, r0, #0
    32f2:	1c0b      	adds	r3, r1, #0
    32f4:	9804      	ldr	r0, [sp, #16]
    32f6:	9905      	ldr	r1, [sp, #20]
    32f8:	4d61      	ldr	r5, [pc, #388]	; (3480 <_Z18hardwareCorrectionv+0x208>)
    32fa:	47a8      	blx	r5
    32fc:	4b61      	ldr	r3, [pc, #388]	; (3484 <_Z18hardwareCorrectionv+0x20c>)
    32fe:	4798      	blx	r3
    3300:	6078      	str	r0, [r7, #4]
		unsigned long int averageTimeli=(averageTime.second*RTC_FREQ)+(averageTime.halfmillis);
    3302:	9b07      	ldr	r3, [sp, #28]
    3304:	687a      	ldr	r2, [r7, #4]
    3306:	26fa      	movs	r6, #250	; 0xfa
    3308:	01f6      	lsls	r6, r6, #7
    330a:	4373      	muls	r3, r6
    330c:	189f      	adds	r7, r3, r2
	
		//printf("averageTime : %lu\r\n",averageTime);
		float Fnow=(float)RTC_FREQ*1.0/count_set_period;
    330e:	4b5e      	ldr	r3, [pc, #376]	; (3488 <_Z18hardwareCorrectionv+0x210>)
    3310:	6818      	ldr	r0, [r3, #0]
    3312:	47a0      	blx	r4
    3314:	1c02      	adds	r2, r0, #0
    3316:	1c0b      	adds	r3, r1, #0
    3318:	2000      	movs	r0, #0
    331a:	4957      	ldr	r1, [pc, #348]	; (3478 <_Z18hardwareCorrectionv+0x200>)
    331c:	4d5b      	ldr	r5, [pc, #364]	; (348c <_Z18hardwareCorrectionv+0x214>)
    331e:	47a8      	blx	r5
    3320:	4b5b      	ldr	r3, [pc, #364]	; (3490 <_Z18hardwareCorrectionv+0x218>)
    3322:	4798      	blx	r3
    3324:	9004      	str	r0, [sp, #16]
		float Fafter=0;
		//calcul of the sumOffset in ms

		sumOffsetl=(sumOffset.second*RTC_FREQ)+(sumOffset.halfmillis);
    3326:	4a5b      	ldr	r2, [pc, #364]	; (3494 <_Z18hardwareCorrectionv+0x21c>)
    3328:	6810      	ldr	r0, [r2, #0]
    332a:	6853      	ldr	r3, [r2, #4]
    332c:	4370      	muls	r0, r6
    332e:	18c0      	adds	r0, r0, r3
		if(sumOffset.sign!=true){
    3330:	7a13      	ldrb	r3, [r2, #8]
    3332:	2b00      	cmp	r3, #0
    3334:	d100      	bne.n	3338 <_Z18hardwareCorrectionv+0xc0>
			sumOffsetl=-sumOffsetl;
    3336:	4240      	negs	r0, r0
		

		//printf("correction nb : %d",timeProt.correction.nbCorrection);
		//average per period of sync
		int nbcor=timeProt.correction.nbCorrection;
		sumOffsetl=sumOffsetl/nbcor;
    3338:	9903      	ldr	r1, [sp, #12]
    333a:	4b57      	ldr	r3, [pc, #348]	; (3498 <_Z18hardwareCorrectionv+0x220>)
    333c:	4798      	blx	r3
		
		//printf("sumOffsetmoy :  %ld\r\n",sumOffset/2);
		sumOffsetl=sumOffsetl/(float)(averageTimeli/(RTC_FREQ*1.0));
    333e:	4d4b      	ldr	r5, [pc, #300]	; (346c <_Z18hardwareCorrectionv+0x1f4>)
    3340:	47a8      	blx	r5
    3342:	1c06      	adds	r6, r0, #0
    3344:	1c38      	adds	r0, r7, #0
    3346:	4b48      	ldr	r3, [pc, #288]	; (3468 <_Z18hardwareCorrectionv+0x1f0>)
    3348:	4798      	blx	r3
    334a:	2200      	movs	r2, #0
    334c:	4b4a      	ldr	r3, [pc, #296]	; (3478 <_Z18hardwareCorrectionv+0x200>)
    334e:	4c4f      	ldr	r4, [pc, #316]	; (348c <_Z18hardwareCorrectionv+0x214>)
    3350:	47a0      	blx	r4
    3352:	4b4f      	ldr	r3, [pc, #316]	; (3490 <_Z18hardwareCorrectionv+0x218>)
    3354:	4798      	blx	r3
    3356:	1c01      	adds	r1, r0, #0
    3358:	4c40      	ldr	r4, [pc, #256]	; (345c <_Z18hardwareCorrectionv+0x1e4>)
    335a:	1c30      	adds	r0, r6, #0
    335c:	47a0      	blx	r4
    335e:	4b40      	ldr	r3, [pc, #256]	; (3460 <_Z18hardwareCorrectionv+0x1e8>)
    3360:	4798      	blx	r3
		//printf("sumOffset/S :  %ld\r\n",sumOffset/2);
	

	
		//number of ms/tick
		float decPerPeriod=(float)sumOffsetl/(RTC_FREQ*1.0);
    3362:	47a8      	blx	r5
    3364:	494d      	ldr	r1, [pc, #308]	; (349c <_Z18hardwareCorrectionv+0x224>)
    3366:	47a0      	blx	r4
    3368:	1c04      	adds	r4, r0, #0
		
		if(decPerPeriod<1.0){
    336a:	21fe      	movs	r1, #254	; 0xfe
    336c:	0589      	lsls	r1, r1, #22
    336e:	4b4c      	ldr	r3, [pc, #304]	; (34a0 <_Z18hardwareCorrectionv+0x228>)
    3370:	4798      	blx	r3
    3372:	2800      	cmp	r0, #0
    3374:	d00a      	beq.n	338c <_Z18hardwareCorrectionv+0x114>
			Fafter=Fnow/(double)(1-decPerPeriod);
    3376:	20fe      	movs	r0, #254	; 0xfe
    3378:	0580      	lsls	r0, r0, #22
    337a:	1c21      	adds	r1, r4, #0
    337c:	4b3c      	ldr	r3, [pc, #240]	; (3470 <_Z18hardwareCorrectionv+0x1f8>)
    337e:	4798      	blx	r3
    3380:	1c01      	adds	r1, r0, #0
    3382:	9804      	ldr	r0, [sp, #16]
    3384:	4b35      	ldr	r3, [pc, #212]	; (345c <_Z18hardwareCorrectionv+0x1e4>)
    3386:	4798      	blx	r3
    3388:	1c05      	adds	r5, r0, #0
    338a:	e009      	b.n	33a0 <_Z18hardwareCorrectionv+0x128>
		}
		else{
			Fafter=Fnow/(double)(1+decPerPeriod);
    338c:	1c20      	adds	r0, r4, #0
    338e:	21fe      	movs	r1, #254	; 0xfe
    3390:	0589      	lsls	r1, r1, #22
    3392:	4b44      	ldr	r3, [pc, #272]	; (34a4 <_Z18hardwareCorrectionv+0x22c>)
    3394:	4798      	blx	r3
    3396:	1c01      	adds	r1, r0, #0
    3398:	9804      	ldr	r0, [sp, #16]
    339a:	4b30      	ldr	r3, [pc, #192]	; (345c <_Z18hardwareCorrectionv+0x1e4>)
    339c:	4798      	blx	r3
    339e:	1c05      	adds	r5, r0, #0
		}
		double dcount_set_period=32000/Fafter;
    33a0:	483e      	ldr	r0, [pc, #248]	; (349c <_Z18hardwareCorrectionv+0x224>)
    33a2:	1c29      	adds	r1, r5, #0
    33a4:	4b2d      	ldr	r3, [pc, #180]	; (345c <_Z18hardwareCorrectionv+0x1e4>)
    33a6:	4798      	blx	r3
    33a8:	1c06      	adds	r6, r0, #0
		unsigned int count;
		count=(int)dcount_set_period;
    33aa:	4b2d      	ldr	r3, [pc, #180]	; (3460 <_Z18hardwareCorrectionv+0x1e8>)
    33ac:	4798      	blx	r3
    33ae:	1c04      	adds	r4, r0, #0
			Fafter=Fnow/(double)(1-decPerPeriod);
		}
		else{
			Fafter=Fnow/(double)(1+decPerPeriod);
		}
		double dcount_set_period=32000/Fafter;
    33b0:	1c30      	adds	r0, r6, #0
    33b2:	4b30      	ldr	r3, [pc, #192]	; (3474 <_Z18hardwareCorrectionv+0x1fc>)
    33b4:	4798      	blx	r3
    33b6:	1c06      	adds	r6, r0, #0
    33b8:	1c0f      	adds	r7, r1, #0
		unsigned int count;
		count=(int)dcount_set_period;
		if((dcount_set_period-count)>0.5){
    33ba:	1c20      	adds	r0, r4, #0
    33bc:	4b2a      	ldr	r3, [pc, #168]	; (3468 <_Z18hardwareCorrectionv+0x1f0>)
    33be:	4798      	blx	r3
    33c0:	1c02      	adds	r2, r0, #0
    33c2:	1c0b      	adds	r3, r1, #0
    33c4:	1c30      	adds	r0, r6, #0
    33c6:	1c39      	adds	r1, r7, #0
    33c8:	4e37      	ldr	r6, [pc, #220]	; (34a8 <_Z18hardwareCorrectionv+0x230>)
    33ca:	47b0      	blx	r6
    33cc:	2200      	movs	r2, #0
    33ce:	4b37      	ldr	r3, [pc, #220]	; (34ac <_Z18hardwareCorrectionv+0x234>)
    33d0:	4e37      	ldr	r6, [pc, #220]	; (34b0 <_Z18hardwareCorrectionv+0x238>)
    33d2:	47b0      	blx	r6
			count++;
    33d4:	1e43      	subs	r3, r0, #1
    33d6:	4198      	sbcs	r0, r3
    33d8:	1824      	adds	r4, r4, r0
    33da:	23fa      	movs	r3, #250	; 0xfa
    33dc:	01db      	lsls	r3, r3, #7
    33de:	429c      	cmp	r4, r3
    33e0:	d900      	bls.n	33e4 <_Z18hardwareCorrectionv+0x16c>
    33e2:	1c1c      	adds	r4, r3, #0
		}
		if(count>RTC_FREQ){//never <1Hz of frequency
			count=RTC_FREQ;
		
		}
		if(count_set_period!=count){
    33e4:	4b28      	ldr	r3, [pc, #160]	; (3488 <_Z18hardwareCorrectionv+0x210>)
    33e6:	681b      	ldr	r3, [r3, #0]
    33e8:	42a3      	cmp	r3, r4
    33ea:	d028      	beq.n	343e <_Z18hardwareCorrectionv+0x1c6>
			count_set_period=count;
    33ec:	4e26      	ldr	r6, [pc, #152]	; (3488 <_Z18hardwareCorrectionv+0x210>)
    33ee:	6034      	str	r4, [r6, #0]
			resetSofftwareCorrection();
    33f0:	4b30      	ldr	r3, [pc, #192]	; (34b4 <_Z18hardwareCorrectionv+0x23c>)
    33f2:	4798      	blx	r3
			valueCor=0;
    33f4:	2300      	movs	r3, #0
    33f6:	4a30      	ldr	r2, [pc, #192]	; (34b8 <_Z18hardwareCorrectionv+0x240>)
    33f8:	6013      	str	r3, [r2, #0]
			timeProt.correction.indiceFull=0;
    33fa:	4a14      	ldr	r2, [pc, #80]	; (344c <_Z18hardwareCorrectionv+0x1d4>)
    33fc:	2122      	movs	r1, #34	; 0x22
    33fe:	31ff      	adds	r1, #255	; 0xff
    3400:	5453      	strb	r3, [r2, r1]
			timeProt.correction.indiceMoySoftCor=0;
    3402:	3901      	subs	r1, #1
    3404:	5453      	strb	r3, [r2, r1]
			//printf("count : %u",(unsigned int)count);
			//rtc_count_set_compare(&rtc_instance,VALUE_TIMER,RTC_COUNT_COMPARE_0 );
		//	rtc_count_set_period(&rtc_instance,count_set_period); //MOMO
			RTC->MODE0.COMP[0].reg = count_set_period;
    3406:	6832      	ldr	r2, [r6, #0]
    3408:	4b2c      	ldr	r3, [pc, #176]	; (34bc <_Z18hardwareCorrectionv+0x244>)
    340a:	619a      	str	r2, [r3, #24]
			unsigned int Fuse=(RTC_FREQ/count_set_period);
    340c:	6837      	ldr	r7, [r6, #0]
			unsigned int Fbest=(int)Fafter;
		
			sprintf(messageHMICor,"		Fbest: %u Hz, Fuse= %u Hz count=%d",(unsigned int)Fbest,(unsigned int)Fuse,count);
    340e:	4e2c      	ldr	r6, [pc, #176]	; (34c0 <_Z18hardwareCorrectionv+0x248>)
			//printf("count : %u",(unsigned int)count);
			//rtc_count_set_compare(&rtc_instance,VALUE_TIMER,RTC_COUNT_COMPARE_0 );
		//	rtc_count_set_period(&rtc_instance,count_set_period); //MOMO
			RTC->MODE0.COMP[0].reg = count_set_period;
			unsigned int Fuse=(RTC_FREQ/count_set_period);
			unsigned int Fbest=(int)Fafter;
    3410:	1c28      	adds	r0, r5, #0
    3412:	4b13      	ldr	r3, [pc, #76]	; (3460 <_Z18hardwareCorrectionv+0x1e8>)
    3414:	4798      	blx	r3
    3416:	1c05      	adds	r5, r0, #0
			timeProt.correction.indiceMoySoftCor=0;
			//printf("count : %u",(unsigned int)count);
			//rtc_count_set_compare(&rtc_instance,VALUE_TIMER,RTC_COUNT_COMPARE_0 );
		//	rtc_count_set_period(&rtc_instance,count_set_period); //MOMO
			RTC->MODE0.COMP[0].reg = count_set_period;
			unsigned int Fuse=(RTC_FREQ/count_set_period);
    3418:	20fa      	movs	r0, #250	; 0xfa
    341a:	01c0      	lsls	r0, r0, #7
    341c:	1c39      	adds	r1, r7, #0
    341e:	4b11      	ldr	r3, [pc, #68]	; (3464 <_Z18hardwareCorrectionv+0x1ec>)
    3420:	4798      	blx	r3
    3422:	1c03      	adds	r3, r0, #0
			unsigned int Fbest=(int)Fafter;
		
			sprintf(messageHMICor,"		Fbest: %u Hz, Fuse= %u Hz count=%d",(unsigned int)Fbest,(unsigned int)Fuse,count);
    3424:	9400      	str	r4, [sp, #0]
    3426:	1c30      	adds	r0, r6, #0
    3428:	4926      	ldr	r1, [pc, #152]	; (34c4 <_Z18hardwareCorrectionv+0x24c>)
    342a:	1c2a      	adds	r2, r5, #0
    342c:	4c26      	ldr	r4, [pc, #152]	; (34c8 <_Z18hardwareCorrectionv+0x250>)
    342e:	47a0      	blx	r4
			sendHMI(messageHMICor);
    3430:	1c30      	adds	r0, r6, #0
    3432:	4c08      	ldr	r4, [pc, #32]	; (3454 <_Z18hardwareCorrectionv+0x1dc>)
    3434:	47a0      	blx	r4
			sendHMI("	end correction");
    3436:	4825      	ldr	r0, [pc, #148]	; (34cc <_Z18hardwareCorrectionv+0x254>)
    3438:	47a0      	blx	r4
			return true;
    343a:	2001      	movs	r0, #1
    343c:	e003      	b.n	3446 <_Z18hardwareCorrectionv+0x1ce>
			
		}
		else{
	

			sendHMI("	end correction");
    343e:	4823      	ldr	r0, [pc, #140]	; (34cc <_Z18hardwareCorrectionv+0x254>)
    3440:	4b04      	ldr	r3, [pc, #16]	; (3454 <_Z18hardwareCorrectionv+0x1dc>)
    3442:	4798      	blx	r3
			return false;
    3444:	2000      	movs	r0, #0
		}
		
	}
	return false;	
}
    3446:	b00b      	add	sp, #44	; 0x2c
    3448:	bdf0      	pop	{r4, r5, r6, r7, pc}
    344a:	46c0      	nop			; (mov r8, r8)
    344c:	200042cc 	.word	0x200042cc
    3450:	0000ed50 	.word	0x0000ed50
    3454:	00003bfd 	.word	0x00003bfd
    3458:	000077fd 	.word	0x000077fd
    345c:	00006de9 	.word	0x00006de9
    3460:	0000772d 	.word	0x0000772d
    3464:	0000666d 	.word	0x0000666d
    3468:	00009465 	.word	0x00009465
    346c:	0000776d 	.word	0x0000776d
    3470:	00007431 	.word	0x00007431
    3474:	000094c9 	.word	0x000094c9
    3478:	40df4000 	.word	0x40df4000
    347c:	00008759 	.word	0x00008759
    3480:	0000788d 	.word	0x0000788d
    3484:	00006ab5 	.word	0x00006ab5
    3488:	200000c8 	.word	0x200000c8
    348c:	00007edd 	.word	0x00007edd
    3490:	00009571 	.word	0x00009571
    3494:	200041f8 	.word	0x200041f8
    3498:	0000678d 	.word	0x0000678d
    349c:	46fa0000 	.word	0x46fa0000
    34a0:	00006a11 	.word	0x00006a11
    34a4:	00006af1 	.word	0x00006af1
    34a8:	00008c8d 	.word	0x00008c8d
    34ac:	3fe00000 	.word	0x3fe00000
    34b0:	000069c5 	.word	0x000069c5
    34b4:	00002ea9 	.word	0x00002ea9
    34b8:	20003d50 	.word	0x20003d50
    34bc:	40001400 	.word	0x40001400
    34c0:	20004204 	.word	0x20004204
    34c4:	0000ed68 	.word	0x0000ed68
    34c8:	0000b451 	.word	0x0000b451
    34cc:	0000ed90 	.word	0x0000ed90

000034d0 <_Z10correctionv>:
	
	
	
}

void correction(void){
    34d0:	b508      	push	{r3, lr}
	

	if(xTaskGetTickCount()-saveCorrection>(TIME_CORRECTION/portTICK_RATE_MS)){
    34d2:	4b0c      	ldr	r3, [pc, #48]	; (3504 <_Z10correctionv+0x34>)
    34d4:	4798      	blx	r3
    34d6:	4b0c      	ldr	r3, [pc, #48]	; (3508 <_Z10correctionv+0x38>)
    34d8:	681b      	ldr	r3, [r3, #0]
    34da:	1ac0      	subs	r0, r0, r3
    34dc:	4b0b      	ldr	r3, [pc, #44]	; (350c <_Z10correctionv+0x3c>)
    34de:	4298      	cmp	r0, r3
    34e0:	d90e      	bls.n	3500 <_Z10correctionv+0x30>
			
			if(timeProt.correction.nbCorrection>2){
    34e2:	23a4      	movs	r3, #164	; 0xa4
    34e4:	4a0a      	ldr	r2, [pc, #40]	; (3510 <_Z10correctionv+0x40>)
    34e6:	58d3      	ldr	r3, [r2, r3]
    34e8:	2b02      	cmp	r3, #2
    34ea:	d909      	bls.n	3500 <_Z10correctionv+0x30>
				saveCorrection=xTaskGetTickCount();
    34ec:	4b05      	ldr	r3, [pc, #20]	; (3504 <_Z10correctionv+0x34>)
    34ee:	4798      	blx	r3
    34f0:	4b05      	ldr	r3, [pc, #20]	; (3508 <_Z10correctionv+0x38>)
    34f2:	6018      	str	r0, [r3, #0]
				if(!hardwareCorrection()){
    34f4:	4b07      	ldr	r3, [pc, #28]	; (3514 <_Z10correctionv+0x44>)
    34f6:	4798      	blx	r3
    34f8:	2800      	cmp	r0, #0
    34fa:	d101      	bne.n	3500 <_Z10correctionv+0x30>
					sofwareCorrection();
    34fc:	4b06      	ldr	r3, [pc, #24]	; (3518 <_Z10correctionv+0x48>)
    34fe:	4798      	blx	r3
			}
			
		
	}
	
}
    3500:	bd08      	pop	{r3, pc}
    3502:	46c0      	nop			; (mov r8, r8)
    3504:	00000c51 	.word	0x00000c51
    3508:	20004034 	.word	0x20004034
    350c:	00002710 	.word	0x00002710
    3510:	200042cc 	.word	0x200042cc
    3514:	00003279 	.word	0x00003279
    3518:	00002ecd 	.word	0x00002ecd

0000351c <_Z11updateClockv>:
			}
			else{
				pc.printf("-%lu s,%u\r\n",clock.second,(unsigned int)clock.halfmillis);
			}
}
void updateClock(void){
    351c:	b5f0      	push	{r4, r5, r6, r7, lr}
    351e:	4647      	mov	r7, r8
    3520:	b480      	push	{r7}
    3522:	b090      	sub	sp, #64	; 0x40
		Clock diff;
		if(timeProt.correction.previousSignOffset==timeProt.offset.sign){
    3524:	4a64      	ldr	r2, [pc, #400]	; (36b8 <_Z11updateClockv+0x19c>)
    3526:	23a0      	movs	r3, #160	; 0xa0
    3528:	5cd3      	ldrb	r3, [r2, r3]
    352a:	b2db      	uxtb	r3, r3
    352c:	2191      	movs	r1, #145	; 0x91
    352e:	0049      	lsls	r1, r1, #1
    3530:	5c52      	ldrb	r2, [r2, r1]
    3532:	429a      	cmp	r2, r3
    3534:	d15a      	bne.n	35ec <_Z11updateClockv+0xd0>
			timeProt.correction.previousSignOffset=timeProt.offset.sign;
    3536:	4c60      	ldr	r4, [pc, #384]	; (36b8 <_Z11updateClockv+0x19c>)
    3538:	23a0      	movs	r3, #160	; 0xa0
    353a:	5ce2      	ldrb	r2, [r4, r3]
    353c:	1c0b      	adds	r3, r1, #0
    353e:	5462      	strb	r2, [r4, r1]
			timeProt.correction.previoustimeOffset.second=timeProt.correction.currentTimeOffsetSync.second;
    3540:	3b6a      	subs	r3, #106	; 0x6a
    3542:	58e3      	ldr	r3, [r4, r3]
    3544:	25ac      	movs	r5, #172	; 0xac
    3546:	5163      	str	r3, [r4, r5]
			timeProt.correction.previoustimeOffset.halfmillis=timeProt.correction.currentTimeOffsetSync.halfmillis;
    3548:	23bc      	movs	r3, #188	; 0xbc
    354a:	58e2      	ldr	r2, [r4, r3]
    354c:	3b0c      	subs	r3, #12
    354e:	50e2      	str	r2, [r4, r3]
			readClock(&timeProt.correction.currentTimeOffsetSync);
    3550:	1c20      	adds	r0, r4, #0
    3552:	30b8      	adds	r0, #184	; 0xb8
    3554:	4b59      	ldr	r3, [pc, #356]	; (36bc <_Z11updateClockv+0x1a0>)
    3556:	4798      	blx	r3
			if(timeProt.correction.previoustimeOffset.second!=0){
    3558:	5963      	ldr	r3, [r4, r5]
    355a:	2b00      	cmp	r3, #0
    355c:	d048      	beq.n	35f0 <_Z11updateClockv+0xd4>
				if(sup(timeProt.correction.currentTimeOffsetSync,timeProt.correction.previoustimeOffset)){
    355e:	4a56      	ldr	r2, [pc, #344]	; (36b8 <_Z11updateClockv+0x19c>)
    3560:	1c13      	adds	r3, r2, #0
    3562:	33b0      	adds	r3, #176	; 0xb0
    3564:	4669      	mov	r1, sp
    3566:	cb11      	ldmia	r3!, {r0, r4}
    3568:	c111      	stmia	r1!, {r0, r4}
    356a:	23ac      	movs	r3, #172	; 0xac
    356c:	58d3      	ldr	r3, [r2, r3]
    356e:	21b8      	movs	r1, #184	; 0xb8
    3570:	5850      	ldr	r0, [r2, r1]
    3572:	32b8      	adds	r2, #184	; 0xb8
    3574:	6851      	ldr	r1, [r2, #4]
    3576:	6892      	ldr	r2, [r2, #8]
    3578:	4c51      	ldr	r4, [pc, #324]	; (36c0 <_Z11updateClockv+0x1a4>)
    357a:	47a0      	blx	r4
    357c:	2800      	cmp	r0, #0
    357e:	d032      	beq.n	35e6 <_Z11updateClockv+0xca>
												
					diff=subClock(timeProt.correction.currentTimeOffsetSync,timeProt.correction.previoustimeOffset);
    3580:	ae0a      	add	r6, sp, #40	; 0x28
    3582:	4d4d      	ldr	r5, [pc, #308]	; (36b8 <_Z11updateClockv+0x19c>)
    3584:	1c2b      	adds	r3, r5, #0
    3586:	33ac      	adds	r3, #172	; 0xac
    3588:	466a      	mov	r2, sp
    358a:	cb13      	ldmia	r3!, {r0, r1, r4}
    358c:	c213      	stmia	r2!, {r0, r1, r4}
    358e:	1c30      	adds	r0, r6, #0
    3590:	23b8      	movs	r3, #184	; 0xb8
    3592:	58e9      	ldr	r1, [r5, r3]
    3594:	1c2b      	adds	r3, r5, #0
    3596:	33b8      	adds	r3, #184	; 0xb8
    3598:	685a      	ldr	r2, [r3, #4]
    359a:	689b      	ldr	r3, [r3, #8]
    359c:	4c49      	ldr	r4, [pc, #292]	; (36c4 <_Z11updateClockv+0x1a8>)
    359e:	47a0      	blx	r4
					//printf("diff: ");
					//printfClock(diff);
					timeProt.correction.sumTime=sumClock(timeProt.correction.sumTime,diff);
    35a0:	ac06      	add	r4, sp, #24
    35a2:	466b      	mov	r3, sp
    35a4:	ce07      	ldmia	r6!, {r0, r1, r2}
    35a6:	c307      	stmia	r3!, {r0, r1, r2}
    35a8:	1c20      	adds	r0, r4, #0
    35aa:	23c4      	movs	r3, #196	; 0xc4
    35ac:	58e9      	ldr	r1, [r5, r3]
    35ae:	1c2e      	adds	r6, r5, #0
    35b0:	36c4      	adds	r6, #196	; 0xc4
    35b2:	6872      	ldr	r2, [r6, #4]
    35b4:	68b3      	ldr	r3, [r6, #8]
    35b6:	4f44      	ldr	r7, [pc, #272]	; (36c8 <_Z11updateClockv+0x1ac>)
    35b8:	46b8      	mov	r8, r7
    35ba:	47b8      	blx	r7
    35bc:	1c23      	adds	r3, r4, #0
    35be:	cb07      	ldmia	r3!, {r0, r1, r2}
    35c0:	c607      	stmia	r6!, {r0, r1, r2}
					sumOffset=sumClock(sumOffset,timeProt.offset);
    35c2:	4e42      	ldr	r6, [pc, #264]	; (36cc <_Z11updateClockv+0x1b0>)
    35c4:	1c2b      	adds	r3, r5, #0
    35c6:	3398      	adds	r3, #152	; 0x98
    35c8:	466a      	mov	r2, sp
    35ca:	cb83      	ldmia	r3!, {r0, r1, r7}
    35cc:	c283      	stmia	r2!, {r0, r1, r7}
    35ce:	1c20      	adds	r0, r4, #0
    35d0:	6831      	ldr	r1, [r6, #0]
    35d2:	6872      	ldr	r2, [r6, #4]
    35d4:	68b3      	ldr	r3, [r6, #8]
    35d6:	47c0      	blx	r8
    35d8:	cc0e      	ldmia	r4!, {r1, r2, r3}
    35da:	c60e      	stmia	r6!, {r1, r2, r3}
					printf("sumClock: ");
					printfClock(timeProt.correction.sumTime);
					
					printf("nb corrr  : %d",timeProt.correction.nbCorrection);
					*/
					timeProt.correction.nbCorrection++;
    35dc:	22a4      	movs	r2, #164	; 0xa4
    35de:	58ab      	ldr	r3, [r5, r2]
    35e0:	3301      	adds	r3, #1
    35e2:	50ab      	str	r3, [r5, r2]
    35e4:	e004      	b.n	35f0 <_Z11updateClockv+0xd4>
				}
				else{
					resetSofftwareCorrection();
    35e6:	4b3a      	ldr	r3, [pc, #232]	; (36d0 <_Z11updateClockv+0x1b4>)
    35e8:	4798      	blx	r3
    35ea:	e001      	b.n	35f0 <_Z11updateClockv+0xd4>
				}
			}
		}
		else{
			resetSofftwareCorrection();
    35ec:	4b38      	ldr	r3, [pc, #224]	; (36d0 <_Z11updateClockv+0x1b4>)
    35ee:	4798      	blx	r3
		}
		timeProt.correction.previousSignOffset=timeProt.offset.sign;
    35f0:	4e31      	ldr	r6, [pc, #196]	; (36b8 <_Z11updateClockv+0x19c>)
    35f2:	23a0      	movs	r3, #160	; 0xa0
    35f4:	4698      	mov	r8, r3
    35f6:	5cf2      	ldrb	r2, [r6, r3]
    35f8:	3382      	adds	r3, #130	; 0x82
    35fa:	54f2      	strb	r2, [r6, r3]
		Clock timeCopy;
		readClock(&timeCopy);
    35fc:	ad0d      	add	r5, sp, #52	; 0x34
    35fe:	1c28      	adds	r0, r5, #0
    3600:	4b2e      	ldr	r3, [pc, #184]	; (36bc <_Z11updateClockv+0x1a0>)
    3602:	4798      	blx	r3


		
		timeCopy=sumClock(timeCopy,timeProt.offset);//add offset
    3604:	ac06      	add	r4, sp, #24
    3606:	1c33      	adds	r3, r6, #0
    3608:	3398      	adds	r3, #152	; 0x98
    360a:	466a      	mov	r2, sp
    360c:	cb83      	ldmia	r3!, {r0, r1, r7}
    360e:	c283      	stmia	r2!, {r0, r1, r7}
    3610:	1c20      	adds	r0, r4, #0
    3612:	990d      	ldr	r1, [sp, #52]	; 0x34
    3614:	686a      	ldr	r2, [r5, #4]
    3616:	68ab      	ldr	r3, [r5, #8]
    3618:	4f2b      	ldr	r7, [pc, #172]	; (36c8 <_Z11updateClockv+0x1ac>)
    361a:	47b8      	blx	r7
    361c:	1c23      	adds	r3, r4, #0
    361e:	cb07      	ldmia	r3!, {r0, r1, r2}
    3620:	c507      	stmia	r5!, {r0, r1, r2}
		writeClock(timeCopy);
    3622:	980d      	ldr	r0, [sp, #52]	; 0x34
    3624:	6861      	ldr	r1, [r4, #4]
    3626:	68a2      	ldr	r2, [r4, #8]
    3628:	4b2a      	ldr	r3, [pc, #168]	; (36d4 <_Z11updateClockv+0x1b8>)
    362a:	4798      	blx	r3
		report(timeProt.offset,1);
    362c:	2398      	movs	r3, #152	; 0x98
    362e:	58f0      	ldr	r0, [r6, r3]
    3630:	1c33      	adds	r3, r6, #0
    3632:	3398      	adds	r3, #152	; 0x98
    3634:	6859      	ldr	r1, [r3, #4]
    3636:	689a      	ldr	r2, [r3, #8]
    3638:	2301      	movs	r3, #1
    363a:	4c27      	ldr	r4, [pc, #156]	; (36d8 <_Z11updateClockv+0x1bc>)
    363c:	47a0      	blx	r4
		if(timeProt.offset.sign==true){
    363e:	4643      	mov	r3, r8
    3640:	5cf3      	ldrb	r3, [r6, r3]
    3642:	2b00      	cmp	r3, #0
    3644:	d018      	beq.n	3678 <_Z11updateClockv+0x15c>
			sprintf(messageHMIOffset,"		update clock offset: +%lus,%ld[+%lus,%lu ms,~%lu us]	t: %lu,%lu",timeProt.offset.second,(long unsigned int)timeProt.offset.halfmillis,timeProt.offset.second,timeProt.offset.halfmillis/32,(timeProt.offset.halfmillis%32)*31,timeCopy.second,timeCopy.halfmillis);
    3646:	491c      	ldr	r1, [pc, #112]	; (36b8 <_Z11updateClockv+0x19c>)
    3648:	2098      	movs	r0, #152	; 0x98
    364a:	580a      	ldr	r2, [r1, r0]
    364c:	249c      	movs	r4, #156	; 0x9c
    364e:	590b      	ldr	r3, [r1, r4]
    3650:	580e      	ldr	r6, [r1, r0]
    3652:	5908      	ldr	r0, [r1, r4]
    3654:	5909      	ldr	r1, [r1, r4]
    3656:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    3658:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    365a:	9600      	str	r6, [sp, #0]
    365c:	0940      	lsrs	r0, r0, #5
    365e:	9001      	str	r0, [sp, #4]
    3660:	201f      	movs	r0, #31
    3662:	4001      	ands	r1, r0
    3664:	0148      	lsls	r0, r1, #5
    3666:	1a41      	subs	r1, r0, r1
    3668:	9102      	str	r1, [sp, #8]
    366a:	9503      	str	r5, [sp, #12]
    366c:	9404      	str	r4, [sp, #16]
    366e:	481b      	ldr	r0, [pc, #108]	; (36dc <_Z11updateClockv+0x1c0>)
    3670:	491b      	ldr	r1, [pc, #108]	; (36e0 <_Z11updateClockv+0x1c4>)
    3672:	4c1c      	ldr	r4, [pc, #112]	; (36e4 <_Z11updateClockv+0x1c8>)
    3674:	47a0      	blx	r4
    3676:	e017      	b.n	36a8 <_Z11updateClockv+0x18c>
		}
		else{
			sprintf(messageHMIOffset,"		update clock offset: -%lus,%ld[-%lus,%lums,~%lu us]	t: %lu,%lu",timeProt.offset.second,(long unsigned int)timeProt.offset.halfmillis,timeProt.offset.second,timeProt.offset.halfmillis/32,(timeProt.offset.halfmillis%32)*31,timeCopy.second,timeCopy.halfmillis);
    3678:	490f      	ldr	r1, [pc, #60]	; (36b8 <_Z11updateClockv+0x19c>)
    367a:	2098      	movs	r0, #152	; 0x98
    367c:	580a      	ldr	r2, [r1, r0]
    367e:	249c      	movs	r4, #156	; 0x9c
    3680:	590b      	ldr	r3, [r1, r4]
    3682:	580e      	ldr	r6, [r1, r0]
    3684:	5908      	ldr	r0, [r1, r4]
    3686:	5909      	ldr	r1, [r1, r4]
    3688:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    368a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    368c:	9600      	str	r6, [sp, #0]
    368e:	0940      	lsrs	r0, r0, #5
    3690:	9001      	str	r0, [sp, #4]
    3692:	201f      	movs	r0, #31
    3694:	4001      	ands	r1, r0
    3696:	0148      	lsls	r0, r1, #5
    3698:	1a41      	subs	r1, r0, r1
    369a:	9102      	str	r1, [sp, #8]
    369c:	9503      	str	r5, [sp, #12]
    369e:	9404      	str	r4, [sp, #16]
    36a0:	480e      	ldr	r0, [pc, #56]	; (36dc <_Z11updateClockv+0x1c0>)
    36a2:	4911      	ldr	r1, [pc, #68]	; (36e8 <_Z11updateClockv+0x1cc>)
    36a4:	4c0f      	ldr	r4, [pc, #60]	; (36e4 <_Z11updateClockv+0x1c8>)
    36a6:	47a0      	blx	r4
		}
		sendHMI(messageHMIOffset);
    36a8:	480c      	ldr	r0, [pc, #48]	; (36dc <_Z11updateClockv+0x1c0>)
    36aa:	4b10      	ldr	r3, [pc, #64]	; (36ec <_Z11updateClockv+0x1d0>)
    36ac:	4798      	blx	r3
}
    36ae:	b010      	add	sp, #64	; 0x40
    36b0:	bc04      	pop	{r2}
    36b2:	4690      	mov	r8, r2
    36b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    36b6:	46c0      	nop			; (mov r8, r8)
    36b8:	200042cc 	.word	0x200042cc
    36bc:	0000167d 	.word	0x0000167d
    36c0:	00001389 	.word	0x00001389
    36c4:	000013f9 	.word	0x000013f9
    36c8:	000014fd 	.word	0x000014fd
    36cc:	200041f8 	.word	0x200041f8
    36d0:	00002ea9 	.word	0x00002ea9
    36d4:	00001709 	.word	0x00001709
    36d8:	00002df5 	.word	0x00002df5
    36dc:	20004038 	.word	0x20004038
    36e0:	0000edb8 	.word	0x0000edb8
    36e4:	0000b451 	.word	0x0000b451
    36e8:	0000edfc 	.word	0x0000edfc
    36ec:	00003bfd 	.word	0x00003bfd

000036f0 <_Z11calculCRCID8enumTypehPKhh>:

}
uint8_t calculCRC(const Type type,const uint8_t length,const uint8_t* data){
	return calculCRCID(type,length,data,IDDEVICE);
}
uint8_t calculCRCID(const Type type,const uint8_t length,const uint8_t* data,const uint8_t id){
    36f0:	18cb      	adds	r3, r1, r3
	uint8_t crc;
	uint8_t i;
	crc=type+length+id;
    36f2:	18c0      	adds	r0, r0, r3
    36f4:	b2c0      	uxtb	r0, r0
	for(i=0;i<length;i++){
    36f6:	2900      	cmp	r1, #0
    36f8:	d00a      	beq.n	3710 <_Z11calculCRCID8enumTypehPKhh+0x20>
    36fa:	1c13      	adds	r3, r2, #0
    36fc:	3901      	subs	r1, #1
    36fe:	b2c9      	uxtb	r1, r1
    3700:	3101      	adds	r1, #1
    3702:	1852      	adds	r2, r2, r1
		crc=crc+data[i];
    3704:	7819      	ldrb	r1, [r3, #0]
    3706:	1840      	adds	r0, r0, r1
    3708:	b2c0      	uxtb	r0, r0
    370a:	3301      	adds	r3, #1
}
uint8_t calculCRCID(const Type type,const uint8_t length,const uint8_t* data,const uint8_t id){
	uint8_t crc;
	uint8_t i;
	crc=type+length+id;
	for(i=0;i<length;i++){
    370c:	4293      	cmp	r3, r2
    370e:	d1f9      	bne.n	3704 <_Z11calculCRCID8enumTypehPKhh+0x14>
		crc=crc+data[i];
	}
	
	return crc;
    3710:	4770      	bx	lr
    3712:	46c0      	nop			; (mov r8, r8)

00003714 <_Z9calculCRC8enumTypehPKh>:
		send[3+i+j]=calculCRC(type,length,data);

		networkTx(send,length+4+j);

}
uint8_t calculCRC(const Type type,const uint8_t length,const uint8_t* data){
    3714:	b510      	push	{r4, lr}
	return calculCRCID(type,length,data,IDDEVICE);
    3716:	2300      	movs	r3, #0
    3718:	4c01      	ldr	r4, [pc, #4]	; (3720 <_Z9calculCRC8enumTypehPKh+0xc>)
    371a:	47a0      	blx	r4
}
    371c:	bd10      	pop	{r4, pc}
    371e:	46c0      	nop			; (mov r8, r8)
    3720:	000036f1 	.word	0x000036f1

00003724 <_Z4send8enumTypehPKh>:

	
	sendHMI("	delay request send");
}
#endif
void send(const Type type,const uint8_t length,const uint8_t* data){
    3724:	b5f0      	push	{r4, r5, r6, r7, lr}
    3726:	4647      	mov	r7, r8
    3728:	b480      	push	{r7}
    372a:	af00      	add	r7, sp, #0
    372c:	1c0c      	adds	r4, r1, #0
		uint8_t i;
		uint8_t j=0;
		uint8_t send[length+4];//to complete
    372e:	1c0b      	adds	r3, r1, #0
    3730:	330b      	adds	r3, #11
    3732:	08db      	lsrs	r3, r3, #3
    3734:	00db      	lsls	r3, r3, #3
    3736:	4669      	mov	r1, sp
    3738:	1acb      	subs	r3, r1, r3
    373a:	469d      	mov	sp, r3
    373c:	466d      	mov	r5, sp
		send[0]=HEADER;
    373e:	2355      	movs	r3, #85	; 0x55
    3740:	702b      	strb	r3, [r5, #0]
		send[1]=IDDEVICE;	
    3742:	2300      	movs	r3, #0
    3744:	706b      	strb	r3, [r5, #1]
		send[2]=type;
    3746:	70a8      	strb	r0, [r5, #2]
		if(length!=0){
    3748:	2c00      	cmp	r4, #0
    374a:	d00a      	beq.n	3762 <_Z4send8enumTypehPKh+0x3e>
			send[3]=length;//length data
    374c:	70ec      	strb	r4, [r5, #3]
    374e:	18e9      	adds	r1, r5, r3
			j=1;
		}
		for(i=0;i<length;i++){
			send[3+i+j]=data[i];
    3750:	5cd6      	ldrb	r6, [r2, r3]
    3752:	710e      	strb	r6, [r1, #4]
    3754:	3301      	adds	r3, #1
		send[2]=type;
		if(length!=0){
			send[3]=length;//length data
			j=1;
		}
		for(i=0;i<length;i++){
    3756:	b2d9      	uxtb	r1, r3
    3758:	428c      	cmp	r4, r1
    375a:	d8f8      	bhi.n	374e <_Z4send8enumTypehPKh+0x2a>
    375c:	1c23      	adds	r3, r4, #0
		send[0]=HEADER;
		send[1]=IDDEVICE;	
		send[2]=type;
		if(length!=0){
			send[3]=length;//length data
			j=1;
    375e:	2601      	movs	r6, #1
    3760:	e001      	b.n	3766 <_Z4send8enumTypehPKh+0x42>
	sendHMI("	delay request send");
}
#endif
void send(const Type type,const uint8_t length,const uint8_t* data){
		uint8_t i;
		uint8_t j=0;
    3762:	2600      	movs	r6, #0
		send[2]=type;
		if(length!=0){
			send[3]=length;//length data
			j=1;
		}
		for(i=0;i<length;i++){
    3764:	2300      	movs	r3, #0
			send[3+i+j]=data[i];
		}
		send[3+i+j]=calculCRC(type,length,data);
    3766:	3303      	adds	r3, #3
    3768:	4698      	mov	r8, r3
    376a:	44b0      	add	r8, r6
    376c:	1c21      	adds	r1, r4, #0
    376e:	4b07      	ldr	r3, [pc, #28]	; (378c <_Z4send8enumTypehPKh+0x68>)
    3770:	4798      	blx	r3
    3772:	4643      	mov	r3, r8
    3774:	54e8      	strb	r0, [r5, r3]
    3776:	3404      	adds	r4, #4

		networkTx(send,length+4+j);
    3778:	1931      	adds	r1, r6, r4
    377a:	b2c9      	uxtb	r1, r1
    377c:	1c28      	adds	r0, r5, #0
    377e:	4b04      	ldr	r3, [pc, #16]	; (3790 <_Z4send8enumTypehPKh+0x6c>)
    3780:	4798      	blx	r3

}
    3782:	46bd      	mov	sp, r7
    3784:	bc04      	pop	{r2}
    3786:	4690      	mov	r8, r2
    3788:	bdf0      	pop	{r4, r5, r6, r7, pc}
    378a:	46c0      	nop			; (mov r8, r8)
    378c:	00003715 	.word	0x00003715
    3790:	00001b71 	.word	0x00001b71

00003794 <_Z4syncv>:
				}
				
			}		
}
#ifdef MASTERMODE
void sync(void){
    3794:	b500      	push	{lr}
    3796:	b085      	sub	sp, #20
	uint8_t sendP[4];
	Type type=SYNC;
	Clock timeSave;
	readClock(&timeSave);
    3798:	a801      	add	r0, sp, #4
    379a:	4b0b      	ldr	r3, [pc, #44]	; (37c8 <_Z4syncv+0x34>)
    379c:	4798      	blx	r3
	sendP[0]=(uint8_t)(timeSave.second&0x00FF);
    379e:	9b01      	ldr	r3, [sp, #4]
    37a0:	466a      	mov	r2, sp
    37a2:	7013      	strb	r3, [r2, #0]
	sendP[1]=(uint8_t)((timeSave.second>>8)&0x00FF);
    37a4:	9b01      	ldr	r3, [sp, #4]
    37a6:	0a1b      	lsrs	r3, r3, #8
    37a8:	7053      	strb	r3, [r2, #1]
	sendP[2]=(uint8_t)(timeSave.halfmillis&0x00FF);
    37aa:	9b02      	ldr	r3, [sp, #8]
    37ac:	7093      	strb	r3, [r2, #2]
	sendP[3]=(uint8_t)((timeSave.halfmillis>>8)&0x00FF);
    37ae:	9b02      	ldr	r3, [sp, #8]
    37b0:	0a1b      	lsrs	r3, r3, #8
    37b2:	70d3      	strb	r3, [r2, #3]
	send(type,4,sendP);
    37b4:	2001      	movs	r0, #1
    37b6:	2104      	movs	r1, #4
    37b8:	4b04      	ldr	r3, [pc, #16]	; (37cc <_Z4syncv+0x38>)
    37ba:	4798      	blx	r3
	sendHMI("	sync send");
    37bc:	4804      	ldr	r0, [pc, #16]	; (37d0 <_Z4syncv+0x3c>)
    37be:	4b05      	ldr	r3, [pc, #20]	; (37d4 <_Z4syncv+0x40>)
    37c0:	4798      	blx	r3
}
    37c2:	b005      	add	sp, #20
    37c4:	bd00      	pop	{pc}
    37c6:	46c0      	nop			; (mov r8, r8)
    37c8:	0000167d 	.word	0x0000167d
    37cc:	00003725 	.word	0x00003725
    37d0:	0000ee40 	.word	0x0000ee40
    37d4:	00003bfd 	.word	0x00003bfd

000037d8 <_Z6senderv>:
	vTaskDelay(500/portTICK_RATE_MS);
}



void sender(void){
    37d8:	b508      	push	{r3, lr}
		if(timeSender!=0){
			//printf("id : %d  , delay response time second : %lu",i,timeSender);
			delayResponse(i);
		}
	}*/
	if(xTaskGetTickCount()-saveSync>(TIMESYNC/portTICK_RATE_MS)){
    37da:	4b07      	ldr	r3, [pc, #28]	; (37f8 <_Z6senderv+0x20>)
    37dc:	4798      	blx	r3
    37de:	4b07      	ldr	r3, [pc, #28]	; (37fc <_Z6senderv+0x24>)
    37e0:	681b      	ldr	r3, [r3, #0]
    37e2:	1ac0      	subs	r0, r0, r3
    37e4:	4b06      	ldr	r3, [pc, #24]	; (3800 <_Z6senderv+0x28>)
    37e6:	4298      	cmp	r0, r3
    37e8:	d905      	bls.n	37f6 <_Z6senderv+0x1e>
		saveSync=xTaskGetTickCount();
    37ea:	4b03      	ldr	r3, [pc, #12]	; (37f8 <_Z6senderv+0x20>)
    37ec:	4798      	blx	r3
    37ee:	4b03      	ldr	r3, [pc, #12]	; (37fc <_Z6senderv+0x24>)
    37f0:	6018      	str	r0, [r3, #0]
		sync();
    37f2:	4b04      	ldr	r3, [pc, #16]	; (3804 <_Z6senderv+0x2c>)
    37f4:	4798      	blx	r3
		saveDRequest=xTaskGetTickCount();
		delayRequest();
	}
	#endif

}
    37f6:	bd08      	pop	{r3, pc}
    37f8:	00000c51 	.word	0x00000c51
    37fc:	20004100 	.word	0x20004100
    3800:	00001388 	.word	0x00001388
    3804:	00003795 	.word	0x00003795

00003808 <_Z13delayResponseh>:
	sendP[2]=(uint8_t)(timeSave.halfmillis&0x00FF);
	sendP[3]=(uint8_t)((timeSave.halfmillis>>8)&0x00FF);
	send(type,4,sendP);
	sendHMI("	sync send");
}
void delayResponse(uint8_t id){
    3808:	b530      	push	{r4, r5, lr}
    380a:	b087      	sub	sp, #28
    380c:	1c04      	adds	r4, r0, #0

	
	Type type=DELAYRESPONSE;
	uint8_t sendP[9];
	
	sendP[0]=id;
    380e:	466b      	mov	r3, sp
    3810:	7018      	strb	r0, [r3, #0]
	sendP[1]=(uint8_t)(timeProt.saveTime[id].second&0x00FF);
    3812:	491e      	ldr	r1, [pc, #120]	; (388c <_Z13delayResponseh+0x84>)
    3814:	0043      	lsls	r3, r0, #1
    3816:	181a      	adds	r2, r3, r0
    3818:	0092      	lsls	r2, r2, #2
    381a:	5852      	ldr	r2, [r2, r1]
    381c:	4668      	mov	r0, sp
    381e:	7042      	strb	r2, [r0, #1]
	sendP[2]=(uint8_t)((timeProt.saveTime[id].second>>8)&0x00FF);
    3820:	191a      	adds	r2, r3, r4
    3822:	0092      	lsls	r2, r2, #2
    3824:	5852      	ldr	r2, [r2, r1]
    3826:	0a12      	lsrs	r2, r2, #8
    3828:	7082      	strb	r2, [r0, #2]
	sendP[3]=(uint8_t)(timeProt.saveTime[id].halfmillis&0x00FF);
    382a:	191a      	adds	r2, r3, r4
    382c:	0092      	lsls	r2, r2, #2
    382e:	188a      	adds	r2, r1, r2
    3830:	6850      	ldr	r0, [r2, #4]
    3832:	466d      	mov	r5, sp
    3834:	70e8      	strb	r0, [r5, #3]
	sendP[4]=(uint8_t)((timeProt.saveTime[id].halfmillis>>8)&0x00FF);
    3836:	6852      	ldr	r2, [r2, #4]
    3838:	0a12      	lsrs	r2, r2, #8
    383a:	712a      	strb	r2, [r5, #4]
	Clock timeSave={timeManage.second,timeManage.halfmillis,true};
    383c:	aa03      	add	r2, sp, #12
    383e:	2001      	movs	r0, #1
    3840:	7210      	strb	r0, [r2, #8]
    3842:	4813      	ldr	r0, [pc, #76]	; (3890 <_Z13delayResponseh+0x88>)
    3844:	6805      	ldr	r5, [r0, #0]
    3846:	9503      	str	r5, [sp, #12]
    3848:	6840      	ldr	r0, [r0, #4]
    384a:	9004      	str	r0, [sp, #16]
	timeProt.saveTime[id].second=0;
    384c:	191b      	adds	r3, r3, r4
    384e:	009b      	lsls	r3, r3, #2
    3850:	2000      	movs	r0, #0
    3852:	5058      	str	r0, [r3, r1]
	sendP[5]=(uint8_t)(timeSave.second&0x00FF);
    3854:	9b03      	ldr	r3, [sp, #12]
    3856:	4669      	mov	r1, sp
    3858:	714b      	strb	r3, [r1, #5]
	sendP[6]=(uint8_t)((timeSave.second>>8)&0x00FF);
    385a:	9b03      	ldr	r3, [sp, #12]
    385c:	0a1b      	lsrs	r3, r3, #8
    385e:	718b      	strb	r3, [r1, #6]
	sendP[7]=(uint8_t)(timeSave.halfmillis&0x00FF);
    3860:	9b04      	ldr	r3, [sp, #16]
    3862:	71cb      	strb	r3, [r1, #7]
	sendP[8]=(uint8_t)((timeSave.halfmillis>>8)&0x00FF);
    3864:	9b04      	ldr	r3, [sp, #16]
    3866:	0a1b      	lsrs	r3, r3, #8
    3868:	466a      	mov	r2, sp
    386a:	720b      	strb	r3, [r1, #8]
	
	send(type,9,sendP);
    386c:	3003      	adds	r0, #3
    386e:	2109      	movs	r1, #9
    3870:	4b08      	ldr	r3, [pc, #32]	; (3894 <_Z13delayResponseh+0x8c>)
    3872:	4798      	blx	r3
	sprintf(messageHMI,"	delay response send (id: %d)",id);
    3874:	4d08      	ldr	r5, [pc, #32]	; (3898 <_Z13delayResponseh+0x90>)
    3876:	1c28      	adds	r0, r5, #0
    3878:	4908      	ldr	r1, [pc, #32]	; (389c <_Z13delayResponseh+0x94>)
    387a:	1c22      	adds	r2, r4, #0
    387c:	4b08      	ldr	r3, [pc, #32]	; (38a0 <_Z13delayResponseh+0x98>)
    387e:	4798      	blx	r3
	sendHMI(messageHMI);
    3880:	1c28      	adds	r0, r5, #0
    3882:	4b08      	ldr	r3, [pc, #32]	; (38a4 <_Z13delayResponseh+0x9c>)
    3884:	4798      	blx	r3
}
    3886:	b007      	add	sp, #28
    3888:	bd30      	pop	{r4, r5, pc}
    388a:	46c0      	nop			; (mov r8, r8)
    388c:	200042cc 	.word	0x200042cc
    3890:	200000bc 	.word	0x200000bc
    3894:	00003725 	.word	0x00003725
    3898:	200043f0 	.word	0x200043f0
    389c:	0000ee4c 	.word	0x0000ee4c
    38a0:	0000b451 	.word	0x0000b451
    38a4:	00003bfd 	.word	0x00003bfd

000038a8 <_Z8receiverv>:
		else{
			sprintf(messageHMIOffset,"		update clock offset: -%lus,%ld[-%lus,%lums,~%lu us]	t: %lu,%lu",timeProt.offset.second,(long unsigned int)timeProt.offset.halfmillis,timeProt.offset.second,timeProt.offset.halfmillis/32,(timeProt.offset.halfmillis%32)*31,timeCopy.second,timeCopy.halfmillis);
		}
		sendHMI(messageHMIOffset);
}
void receiver(){
    38a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    38aa:	4647      	mov	r7, r8
    38ac:	b480      	push	{r7}
    38ae:	b08c      	sub	sp, #48	; 0x30
			Clock timeMaster={0,0,true};	
			uint8_t i=0;
			#endif
			Data data;
		
			if(networkAvailable()){
    38b0:	4b43      	ldr	r3, [pc, #268]	; (39c0 <_Z8receiverv+0x118>)
    38b2:	4798      	blx	r3
    38b4:	2800      	cmp	r0, #0
    38b6:	d07f      	beq.n	39b8 <_Z8receiverv+0x110>
				vTaskDelay(100);
    38b8:	2064      	movs	r0, #100	; 0x64
    38ba:	4b42      	ldr	r3, [pc, #264]	; (39c4 <_Z8receiverv+0x11c>)
    38bc:	4798      	blx	r3
				if(networkRead()==HEADER){
    38be:	4b42      	ldr	r3, [pc, #264]	; (39c8 <_Z8receiverv+0x120>)
    38c0:	4798      	blx	r3
    38c2:	2855      	cmp	r0, #85	; 0x55
    38c4:	d178      	bne.n	39b8 <_Z8receiverv+0x110>
					data.id=networkRead();
    38c6:	4d40      	ldr	r5, [pc, #256]	; (39c8 <_Z8receiverv+0x120>)
    38c8:	47a8      	blx	r5
    38ca:	1c06      	adds	r6, r0, #0
    38cc:	ac03      	add	r4, sp, #12
    38ce:	7060      	strb	r0, [r4, #1]
					data.type=(Type)networkRead();
    38d0:	47a8      	blx	r5
    38d2:	7020      	strb	r0, [r4, #0]
							switch (data.type){
    38d4:	2802      	cmp	r0, #2
    38d6:	d002      	beq.n	38de <_Z8receiverv+0x36>
    38d8:	2804      	cmp	r0, #4
    38da:	d025      	beq.n	3928 <_Z8receiverv+0x80>
    38dc:	e067      	b.n	39ae <_Z8receiverv+0x106>

									
								#else
									case DELAYREQUEST:
									
										data.crc=networkRead();
    38de:	4b3a      	ldr	r3, [pc, #232]	; (39c8 <_Z8receiverv+0x120>)
    38e0:	4798      	blx	r3
    38e2:	1c04      	adds	r4, r0, #0
    38e4:	2321      	movs	r3, #33	; 0x21
    38e6:	aa03      	add	r2, sp, #12
    38e8:	54d0      	strb	r0, [r2, r3]
										//printf("Type:%d , id:%d, crc:%d.",data.type, data.id,data.crc );
										if(calculCRCID(data.type,0,NULL,data.id)!=data.crc){
    38ea:	2002      	movs	r0, #2
    38ec:	2100      	movs	r1, #0
    38ee:	2200      	movs	r2, #0
    38f0:	1c33      	adds	r3, r6, #0
    38f2:	4d36      	ldr	r5, [pc, #216]	; (39cc <_Z8receiverv+0x124>)
    38f4:	47a8      	blx	r5
    38f6:	4284      	cmp	r4, r0
    38f8:	d00f      	beq.n	391a <_Z8receiverv+0x72>
											taskENTER_CRITICAL();
    38fa:	4b35      	ldr	r3, [pc, #212]	; (39d0 <_Z8receiverv+0x128>)
    38fc:	4798      	blx	r3
											timeProt.saveTime[data.id].second=0;
    38fe:	0073      	lsls	r3, r6, #1
    3900:	199e      	adds	r6, r3, r6
    3902:	00b6      	lsls	r6, r6, #2
    3904:	2200      	movs	r2, #0
    3906:	4b33      	ldr	r3, [pc, #204]	; (39d4 <_Z8receiverv+0x12c>)
    3908:	50f2      	str	r2, [r6, r3]
											taskEXIT_CRITICAL();
    390a:	4b33      	ldr	r3, [pc, #204]	; (39d8 <_Z8receiverv+0x130>)
    390c:	4798      	blx	r3
											networkFlush();
    390e:	4b33      	ldr	r3, [pc, #204]	; (39dc <_Z8receiverv+0x134>)
    3910:	4798      	blx	r3
											sendHMI("	Erreur crc");
    3912:	4833      	ldr	r0, [pc, #204]	; (39e0 <_Z8receiverv+0x138>)
    3914:	4b33      	ldr	r3, [pc, #204]	; (39e4 <_Z8receiverv+0x13c>)
    3916:	4798      	blx	r3
											return;
    3918:	e04e      	b.n	39b8 <_Z8receiverv+0x110>
										}
										else{
											sendHMI("	delay request receive");
    391a:	4833      	ldr	r0, [pc, #204]	; (39e8 <_Z8receiverv+0x140>)
    391c:	4b31      	ldr	r3, [pc, #196]	; (39e4 <_Z8receiverv+0x13c>)
    391e:	4798      	blx	r3
											delayResponse(data.id);
    3920:	1c30      	adds	r0, r6, #0
    3922:	4b32      	ldr	r3, [pc, #200]	; (39ec <_Z8receiverv+0x144>)
    3924:	4798      	blx	r3
											//pc.printf("id:%d",data.id);
										}
										
										
									break;
    3926:	e047      	b.n	39b8 <_Z8receiverv+0x110>
										case REP:
										uint8_t i;
										Clock timeMaster;
										sendHMI("	report receive");
    3928:	4831      	ldr	r0, [pc, #196]	; (39f0 <_Z8receiverv+0x148>)
    392a:	4b2e      	ldr	r3, [pc, #184]	; (39e4 <_Z8receiverv+0x13c>)
    392c:	4798      	blx	r3
										data.length=networkRead();
    392e:	4b26      	ldr	r3, [pc, #152]	; (39c8 <_Z8receiverv+0x120>)
    3930:	4798      	blx	r3
    3932:	4680      	mov	r8, r0
    3934:	ab03      	add	r3, sp, #12
    3936:	7098      	strb	r0, [r3, #2]
										for(i=0;i<data.length;i++){
    3938:	2800      	cmp	r0, #0
    393a:	d00d      	beq.n	3958 <_Z8receiverv+0xb0>
    393c:	240f      	movs	r4, #15
    393e:	446c      	add	r4, sp
    3940:	1e45      	subs	r5, r0, #1
    3942:	b2ed      	uxtb	r5, r5
    3944:	ab0c      	add	r3, sp, #48	; 0x30
    3946:	469c      	mov	ip, r3
    3948:	4465      	add	r5, ip
    394a:	3d20      	subs	r5, #32
											data.data[i]=networkRead();
    394c:	4f1e      	ldr	r7, [pc, #120]	; (39c8 <_Z8receiverv+0x120>)
    394e:	47b8      	blx	r7
    3950:	7020      	strb	r0, [r4, #0]
    3952:	3401      	adds	r4, #1
										case REP:
										uint8_t i;
										Clock timeMaster;
										sendHMI("	report receive");
										data.length=networkRead();
										for(i=0;i<data.length;i++){
    3954:	42ac      	cmp	r4, r5
    3956:	d1fa      	bne.n	394e <_Z8receiverv+0xa6>
											data.data[i]=networkRead();
										}
										data.crc=networkRead();
    3958:	4b1b      	ldr	r3, [pc, #108]	; (39c8 <_Z8receiverv+0x120>)
    395a:	4798      	blx	r3
    395c:	1c04      	adds	r4, r0, #0
    395e:	2321      	movs	r3, #33	; 0x21
    3960:	aa03      	add	r2, sp, #12
    3962:	54d0      	strb	r0, [r2, r3]
										//networkFlush();
										if(calculCRCID(data.type,data.length,data.data,data.id)!=data.crc){
    3964:	2004      	movs	r0, #4
    3966:	4641      	mov	r1, r8
    3968:	220f      	movs	r2, #15
    396a:	446a      	add	r2, sp
    396c:	1c33      	adds	r3, r6, #0
    396e:	4d17      	ldr	r5, [pc, #92]	; (39cc <_Z8receiverv+0x124>)
    3970:	47a8      	blx	r5
    3972:	4284      	cmp	r4, r0
    3974:	d003      	beq.n	397e <_Z8receiverv+0xd6>
											
											sendHMI("erreur crc");
    3976:	481f      	ldr	r0, [pc, #124]	; (39f4 <_Z8receiverv+0x14c>)
    3978:	4b1a      	ldr	r3, [pc, #104]	; (39e4 <_Z8receiverv+0x13c>)
    397a:	4798      	blx	r3
											return;
    397c:	e01c      	b.n	39b8 <_Z8receiverv+0x110>
										}
										else{	
											timeMaster.second=data.data[0]|(data.data[1]<<8);
    397e:	ab03      	add	r3, sp, #12
    3980:	791a      	ldrb	r2, [r3, #4]
    3982:	0211      	lsls	r1, r2, #8
    3984:	78da      	ldrb	r2, [r3, #3]
    3986:	430a      	orrs	r2, r1
    3988:	9200      	str	r2, [sp, #0]
											timeMaster.halfmillis=data.data[2]|(data.data[3]<<8);
    398a:	799a      	ldrb	r2, [r3, #6]
    398c:	0211      	lsls	r1, r2, #8
    398e:	795a      	ldrb	r2, [r3, #5]
    3990:	430a      	orrs	r2, r1
    3992:	9201      	str	r2, [sp, #4]
											timeMaster.sign=data.data[4];
    3994:	79db      	ldrb	r3, [r3, #7]
    3996:	1e5a      	subs	r2, r3, #1
    3998:	4193      	sbcs	r3, r2
    399a:	b2db      	uxtb	r3, r3
    399c:	466a      	mov	r2, sp
    399e:	7213      	strb	r3, [r2, #8]
											report(timeMaster,data.id);
    39a0:	9800      	ldr	r0, [sp, #0]
    39a2:	9901      	ldr	r1, [sp, #4]
    39a4:	9a02      	ldr	r2, [sp, #8]
    39a6:	1c33      	adds	r3, r6, #0
    39a8:	4c13      	ldr	r4, [pc, #76]	; (39f8 <_Z8receiverv+0x150>)
    39aa:	47a0      	blx	r4
										

										}
									break;
    39ac:	e004      	b.n	39b8 <_Z8receiverv+0x110>
								#endif
								default:
									sendHMI("	Erreur type unknow");
    39ae:	4813      	ldr	r0, [pc, #76]	; (39fc <_Z8receiverv+0x154>)
    39b0:	4b0c      	ldr	r3, [pc, #48]	; (39e4 <_Z8receiverv+0x13c>)
    39b2:	4798      	blx	r3
									networkFlush();	
    39b4:	4b09      	ldr	r3, [pc, #36]	; (39dc <_Z8receiverv+0x134>)
    39b6:	4798      	blx	r3
									
							}		
				}
				
			}		
}
    39b8:	b00c      	add	sp, #48	; 0x30
    39ba:	bc04      	pop	{r2}
    39bc:	4690      	mov	r8, r2
    39be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    39c0:	00001b45 	.word	0x00001b45
    39c4:	00000e85 	.word	0x00000e85
    39c8:	00001bb5 	.word	0x00001bb5
    39cc:	000036f1 	.word	0x000036f1
    39d0:	00001221 	.word	0x00001221
    39d4:	200042cc 	.word	0x200042cc
    39d8:	00001239 	.word	0x00001239
    39dc:	00001b5d 	.word	0x00001b5d
    39e0:	0000ee6c 	.word	0x0000ee6c
    39e4:	00003bfd 	.word	0x00003bfd
    39e8:	0000ee78 	.word	0x0000ee78
    39ec:	00003809 	.word	0x00003809
    39f0:	0000ee90 	.word	0x0000ee90
    39f4:	0000eea0 	.word	0x0000eea0
    39f8:	00002df5 	.word	0x00002df5
    39fc:	0000eeac 	.word	0x0000eeac

00003a00 <_Z16timeProtocolTaskv>:
		
	}
	return false;	
}

void timeProtocolTask(void){
    3a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    3a02:	b672      	cpsid	i
    3a04:	f3bf 8f5f 	dmb	sy
	Disable_global_interrupt();
    3a08:	2200      	movs	r2, #0
    3a0a:	4b2f      	ldr	r3, [pc, #188]	; (3ac8 <_Z16timeProtocolTaskv+0xc8>)
    3a0c:	701a      	strb	r2, [r3, #0]
    3a0e:	2300      	movs	r3, #0
		
	#ifdef MASTERMODE
		uint8_t i ;
		for(i=0;i<=MAX_SLAVE_CLOCK;i++){
			timeProt.saveTime[i].second=0;
    3a10:	482e      	ldr	r0, [pc, #184]	; (3acc <_Z16timeProtocolTaskv+0xcc>)
    3a12:	2100      	movs	r1, #0
    3a14:	005a      	lsls	r2, r3, #1
    3a16:	18d2      	adds	r2, r2, r3
    3a18:	0092      	lsls	r2, r2, #2
    3a1a:	5011      	str	r1, [r2, r0]
    3a1c:	3301      	adds	r3, #1
void timeProtocolTask(void){
	Disable_global_interrupt();
		
	#ifdef MASTERMODE
		uint8_t i ;
		for(i=0;i<=MAX_SLAVE_CLOCK;i++){
    3a1e:	2b0b      	cmp	r3, #11
    3a20:	d1f8      	bne.n	3a14 <_Z16timeProtocolTaskv+0x14>
	timeProt.rx.sign=true;
	timeProt.rxDelay.sign=true;
	timeProt.rxSync.sign=true;
	timeProt.tx.sign=true;
	#endif
	timeProt.correction.nbCorrection=0;
    3a22:	4c2a      	ldr	r4, [pc, #168]	; (3acc <_Z16timeProtocolTaskv+0xcc>)
    3a24:	2300      	movs	r3, #0
    3a26:	22a4      	movs	r2, #164	; 0xa4
    3a28:	50a3      	str	r3, [r4, r2]

	
	sumOffset.second=0;
    3a2a:	4929      	ldr	r1, [pc, #164]	; (3ad0 <_Z16timeProtocolTaskv+0xd0>)
    3a2c:	600b      	str	r3, [r1, #0]
	sumOffset.halfmillis=0;
    3a2e:	604b      	str	r3, [r1, #4]
	sumOffset.sign=true;
    3a30:	3aa3      	subs	r2, #163	; 0xa3
    3a32:	720a      	strb	r2, [r1, #8]
	
	
	timeProt.correction.currentTimeOffsetSync.second=0;
    3a34:	21b8      	movs	r1, #184	; 0xb8
    3a36:	5063      	str	r3, [r4, r1]
	timeProt.correction.currentTimeOffsetSync.halfmillis=0;
    3a38:	3104      	adds	r1, #4
    3a3a:	5063      	str	r3, [r4, r1]
	timeProt.correction.currentTimeOffsetSync.sign=true;
    3a3c:	3104      	adds	r1, #4
    3a3e:	5462      	strb	r2, [r4, r1]
	
	
	timeProt.correction.previoustimeOffset.second=0;
    3a40:	3914      	subs	r1, #20
    3a42:	5063      	str	r3, [r4, r1]
	timeProt.correction.previoustimeOffset.halfmillis=0;
    3a44:	3104      	adds	r1, #4
    3a46:	5063      	str	r3, [r4, r1]
	timeProt.correction.previoustimeOffset.sign=true;
    3a48:	3104      	adds	r1, #4
    3a4a:	5462      	strb	r2, [r4, r1]
	
	
	//timeProt.correction.timeSoftCor=0;
	timeProt.correction.indiceMoySoftCor=0;
    3a4c:	316c      	adds	r1, #108	; 0x6c
    3a4e:	5463      	strb	r3, [r4, r1]
	timeProt.correction.indiceFull=0;
    3a50:	2122      	movs	r1, #34	; 0x22
    3a52:	31ff      	adds	r1, #255	; 0xff
    3a54:	5463      	strb	r3, [r4, r1]


	timeProt.delay.second=0;
    3a56:	3999      	subs	r1, #153	; 0x99
    3a58:	5063      	str	r3, [r4, r1]
	timeProt.delay.halfmillis=0;
    3a5a:	3104      	adds	r1, #4
    3a5c:	5063      	str	r3, [r4, r1]
	timeProt.delay.sign=true;
    3a5e:	3104      	adds	r1, #4
    3a60:	5462      	strb	r2, [r4, r1]
	timeProt.waitIdentifier=false;
    3a62:	3283      	adds	r2, #131	; 0x83
    3a64:	54a3      	strb	r3, [r4, r2]
	timeProt.synchroTime=NULL;
    3a66:	2594      	movs	r5, #148	; 0x94
    3a68:	5163      	str	r3, [r4, r5]
	vSemaphoreCreateBinary(timeProt.synchroTime);
    3a6a:	2001      	movs	r0, #1
    3a6c:	2100      	movs	r1, #0
    3a6e:	3a81      	subs	r2, #129	; 0x81
    3a70:	4b18      	ldr	r3, [pc, #96]	; (3ad4 <_Z16timeProtocolTaskv+0xd4>)
    3a72:	4798      	blx	r3
    3a74:	5160      	str	r0, [r4, r5]
    3a76:	2800      	cmp	r0, #0
    3a78:	d004      	beq.n	3a84 <_Z16timeProtocolTaskv+0x84>
    3a7a:	2100      	movs	r1, #0
    3a7c:	2200      	movs	r2, #0
    3a7e:	2300      	movs	r3, #0
    3a80:	4c15      	ldr	r4, [pc, #84]	; (3ad8 <_Z16timeProtocolTaskv+0xd8>)
    3a82:	47a0      	blx	r4
	Enable_global_interrupt();
    3a84:	2201      	movs	r2, #1
    3a86:	4b10      	ldr	r3, [pc, #64]	; (3ac8 <_Z16timeProtocolTaskv+0xc8>)
    3a88:	701a      	strb	r2, [r3, #0]
    3a8a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    3a8e:	b662      	cpsie	i
	#ifdef SLAVEMODE
	delayRequest();
	#else
	sync();
    3a90:	4b12      	ldr	r3, [pc, #72]	; (3adc <_Z16timeProtocolTaskv+0xdc>)
    3a92:	4798      	blx	r3
	#endif
	
	while(1){
		//sendHMI("time protocol task.");
			//pc.printf("timeprotocol task");
			if(timeProt.synchroTime!=NULL){
    3a94:	4d0d      	ldr	r5, [pc, #52]	; (3acc <_Z16timeProtocolTaskv+0xcc>)
				sender();
    3a96:	4f12      	ldr	r7, [pc, #72]	; (3ae0 <_Z16timeProtocolTaskv+0xe0>)
				if( xSemaphoreTake(timeProt.synchroTime,500/portTICK_RATE_MS) == pdTRUE ){
    3a98:	1c2e      	adds	r6, r5, #0
	#endif
	
	while(1){
		//sendHMI("time protocol task.");
			//pc.printf("timeprotocol task");
			if(timeProt.synchroTime!=NULL){
    3a9a:	2394      	movs	r3, #148	; 0x94
    3a9c:	58eb      	ldr	r3, [r5, r3]
    3a9e:	2b00      	cmp	r3, #0
    3aa0:	d00f      	beq.n	3ac2 <_Z16timeProtocolTaskv+0xc2>
				sender();
    3aa2:	47b8      	blx	r7
				if( xSemaphoreTake(timeProt.synchroTime,500/portTICK_RATE_MS) == pdTRUE ){
    3aa4:	2394      	movs	r3, #148	; 0x94
    3aa6:	58f0      	ldr	r0, [r6, r3]
    3aa8:	2100      	movs	r1, #0
    3aaa:	22fa      	movs	r2, #250	; 0xfa
    3aac:	0052      	lsls	r2, r2, #1
    3aae:	2300      	movs	r3, #0
    3ab0:	4c0c      	ldr	r4, [pc, #48]	; (3ae4 <_Z16timeProtocolTaskv+0xe4>)
    3ab2:	47a0      	blx	r4
    3ab4:	2801      	cmp	r0, #1
    3ab6:	d104      	bne.n	3ac2 <_Z16timeProtocolTaskv+0xc2>
					vTaskDelay(100/portTICK_RATE_MS);
    3ab8:	3063      	adds	r0, #99	; 0x63
    3aba:	4b0b      	ldr	r3, [pc, #44]	; (3ae8 <_Z16timeProtocolTaskv+0xe8>)
    3abc:	4798      	blx	r3
					receiver();
    3abe:	4b0b      	ldr	r3, [pc, #44]	; (3aec <_Z16timeProtocolTaskv+0xec>)
    3ac0:	4798      	blx	r3
					
				}
					
			}
			correction();	
    3ac2:	4b0b      	ldr	r3, [pc, #44]	; (3af0 <_Z16timeProtocolTaskv+0xf0>)
    3ac4:	4798      	blx	r3
	}	 
	vTaskDelay(500/portTICK_RATE_MS);
    3ac6:	e7e8      	b.n	3a9a <_Z16timeProtocolTaskv+0x9a>
    3ac8:	200000d0 	.word	0x200000d0
    3acc:	200042cc 	.word	0x200042cc
    3ad0:	200041f8 	.word	0x200041f8
    3ad4:	000005a5 	.word	0x000005a5
    3ad8:	000005f5 	.word	0x000005f5
    3adc:	00003795 	.word	0x00003795
    3ae0:	000037d9 	.word	0x000037d9
    3ae4:	00000785 	.word	0x00000785
    3ae8:	00000e85 	.word	0x00000e85
    3aec:	000038a9 	.word	0x000038a9
    3af0:	000034d1 	.word	0x000034d1

00003af4 <_ZN4mbed6SerialD0Ev>:
    3af4:	b510      	push	{r4, lr}
    3af6:	1c04      	adds	r4, r0, #0
    3af8:	4b08      	ldr	r3, [pc, #32]	; (3b1c <_ZN4mbed6SerialD0Ev+0x28>)
    3afa:	6003      	str	r3, [r0, #0]
    3afc:	1c19      	adds	r1, r3, #0
    3afe:	3118      	adds	r1, #24
    3b00:	22dc      	movs	r2, #220	; 0xdc
    3b02:	5081      	str	r1, [r0, r2]
    3b04:	334c      	adds	r3, #76	; 0x4c
    3b06:	3204      	adds	r2, #4
    3b08:	5083      	str	r3, [r0, r2]
    3b0a:	30dc      	adds	r0, #220	; 0xdc
    3b0c:	4b04      	ldr	r3, [pc, #16]	; (3b20 <_ZN4mbed6SerialD0Ev+0x2c>)
    3b0e:	4798      	blx	r3
    3b10:	1c20      	adds	r0, r4, #0
    3b12:	4b04      	ldr	r3, [pc, #16]	; (3b24 <_ZN4mbed6SerialD0Ev+0x30>)
    3b14:	4798      	blx	r3
    3b16:	1c20      	adds	r0, r4, #0
    3b18:	bd10      	pop	{r4, pc}
    3b1a:	46c0      	nop			; (mov r8, r8)
    3b1c:	0000f1f0 	.word	0x0000f1f0
    3b20:	00004f0d 	.word	0x00004f0d
    3b24:	00006663 	.word	0x00006663

00003b28 <_ZThn220_N4mbed6SerialD0Ev>:
    3b28:	b408      	push	{r3}
    3b2a:	4b02      	ldr	r3, [pc, #8]	; (3b34 <_ZThn220_N4mbed6SerialD0Ev+0xc>)
    3b2c:	469c      	mov	ip, r3
    3b2e:	38dc      	subs	r0, #220	; 0xdc
    3b30:	bc08      	pop	{r3}
    3b32:	4760      	bx	ip
    3b34:	00003af5 	.word	0x00003af5

00003b38 <_ZThn224_N4mbed6SerialD0Ev>:
    3b38:	b408      	push	{r3}
    3b3a:	4b02      	ldr	r3, [pc, #8]	; (3b44 <_ZThn224_N4mbed6SerialD0Ev+0xc>)
    3b3c:	469c      	mov	ip, r3
    3b3e:	38e0      	subs	r0, #224	; 0xe0
    3b40:	bc08      	pop	{r3}
    3b42:	4760      	bx	ip
    3b44:	00003af5 	.word	0x00003af5

00003b48 <_GLOBAL__sub_I_timeProt>:
	for(i=0;i<length;i++){
		crc=crc+data[i];
	}
	
	return crc;
    3b48:	b538      	push	{r3, r4, r5, lr}
char messageHMICor[200];
char messageHMIDelay[200];
char messageHMIOffset[200];
Clock sumOffset;
portTickType saveDRequest=0;
Serial pc(USBTX,USBRX);
    3b4a:	4c06      	ldr	r4, [pc, #24]	; (3b64 <_GLOBAL__sub_I_timeProt+0x1c>)
    3b4c:	1c20      	adds	r0, r4, #0
    3b4e:	2104      	movs	r1, #4
    3b50:	2205      	movs	r2, #5
    3b52:	2300      	movs	r3, #0
    3b54:	4d04      	ldr	r5, [pc, #16]	; (3b68 <_GLOBAL__sub_I_timeProt+0x20>)
    3b56:	47a8      	blx	r5
    3b58:	1c20      	adds	r0, r4, #0
    3b5a:	4904      	ldr	r1, [pc, #16]	; (3b6c <_GLOBAL__sub_I_timeProt+0x24>)
    3b5c:	4a04      	ldr	r2, [pc, #16]	; (3b70 <_GLOBAL__sub_I_timeProt+0x28>)
    3b5e:	4b05      	ldr	r3, [pc, #20]	; (3b74 <_GLOBAL__sub_I_timeProt+0x2c>)
    3b60:	4798      	blx	r3
	for(i=0;i<length;i++){
		crc=crc+data[i];
	}
	
	return crc;
    3b62:	bd38      	pop	{r3, r4, r5, pc}
    3b64:	20004104 	.word	0x20004104
    3b68:	00004d01 	.word	0x00004d01
    3b6c:	00002d9d 	.word	0x00002d9d
    3b70:	200000b0 	.word	0x200000b0
    3b74:	00006655 	.word	0x00006655

00003b78 <_Z12configureHMIv>:

#endif
/************************************************************************/
/* FUNCTION                                                             */
/************************************************************************/
void configureHMI(void){
    3b78:	b508      	push	{r3, lr}
	hmi.printf("config HMI \r\n");
    3b7a:	4803      	ldr	r0, [pc, #12]	; (3b88 <_Z12configureHMIv+0x10>)
    3b7c:	30dc      	adds	r0, #220	; 0xdc
    3b7e:	4903      	ldr	r1, [pc, #12]	; (3b8c <_Z12configureHMIv+0x14>)
    3b80:	4b03      	ldr	r3, [pc, #12]	; (3b90 <_Z12configureHMIv+0x18>)
    3b82:	4798      	blx	r3
}
    3b84:	bd08      	pop	{r3, pc}
    3b86:	46c0      	nop			; (mov r8, r8)
    3b88:	200044b8 	.word	0x200044b8
    3b8c:	0000eec0 	.word	0x0000eec0
    3b90:	00004f49 	.word	0x00004f49

00003b94 <_Z7HMITaskv>:
void HMITask(){
    3b94:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b96:	b083      	sub	sp, #12
	//Can receive up to 10 char[50]
	uartQueue = xQueueCreate( LENGTH_QUEUE, sizeof( char* ) );
    3b98:	2032      	movs	r0, #50	; 0x32
    3b9a:	2104      	movs	r1, #4
    3b9c:	2200      	movs	r2, #0
    3b9e:	4b10      	ldr	r3, [pc, #64]	; (3be0 <_Z7HMITaskv+0x4c>)
    3ba0:	4798      	blx	r3
    3ba2:	4b10      	ldr	r3, [pc, #64]	; (3be4 <_Z7HMITaskv+0x50>)
    3ba4:	6018      	str	r0, [r3, #0]

	while(1){
		//pc.printf("HMI task\r\n");
		 if( uartQueue != 0 )
    3ba6:	1c1f      	adds	r7, r3, #0
		 {
			 char* receive;
			 // Receive a message on the created queue.
			 while( xQueueReceive( uartQueue, &( receive ), (  portTickType ) 0) )
			 {			
				 hmi.printf(receive);
    3ba8:	4d0f      	ldr	r5, [pc, #60]	; (3be8 <_Z7HMITaskv+0x54>)
    3baa:	35dc      	adds	r5, #220	; 0xdc
	//Can receive up to 10 char[50]
	uartQueue = xQueueCreate( LENGTH_QUEUE, sizeof( char* ) );

	while(1){
		//pc.printf("HMI task\r\n");
		 if( uartQueue != 0 )
    3bac:	683b      	ldr	r3, [r7, #0]
    3bae:	2b00      	cmp	r3, #0
    3bb0:	d108      	bne.n	3bc4 <_Z7HMITaskv+0x30>
    3bb2:	e010      	b.n	3bd6 <_Z7HMITaskv+0x42>
		 {
			 char* receive;
			 // Receive a message on the created queue.
			 while( xQueueReceive( uartQueue, &( receive ), (  portTickType ) 0) )
			 {			
				 hmi.printf(receive);
    3bb4:	1c28      	adds	r0, r5, #0
    3bb6:	9901      	ldr	r1, [sp, #4]
    3bb8:	4c0c      	ldr	r4, [pc, #48]	; (3bec <_Z7HMITaskv+0x58>)
    3bba:	47a0      	blx	r4
				 hmi.printf("\r\n");
    3bbc:	1c28      	adds	r0, r5, #0
    3bbe:	490c      	ldr	r1, [pc, #48]	; (3bf0 <_Z7HMITaskv+0x5c>)
    3bc0:	47a0      	blx	r4
    3bc2:	e000      	b.n	3bc6 <_Z7HMITaskv+0x32>
		//pc.printf("HMI task\r\n");
		 if( uartQueue != 0 )
		 {
			 char* receive;
			 // Receive a message on the created queue.
			 while( xQueueReceive( uartQueue, &( receive ), (  portTickType ) 0) )
    3bc4:	4e07      	ldr	r6, [pc, #28]	; (3be4 <_Z7HMITaskv+0x50>)
    3bc6:	6830      	ldr	r0, [r6, #0]
    3bc8:	a901      	add	r1, sp, #4
    3bca:	2200      	movs	r2, #0
    3bcc:	2300      	movs	r3, #0
    3bce:	4c09      	ldr	r4, [pc, #36]	; (3bf4 <_Z7HMITaskv+0x60>)
    3bd0:	47a0      	blx	r4
    3bd2:	2800      	cmp	r0, #0
    3bd4:	d1ee      	bne.n	3bb4 <_Z7HMITaskv+0x20>
			//printf("						t: %lus,%u\r\n",timeCopy.second,(unsigned int)timeCopy.halfmillis/2);
			//printf("timecor : %d\r\n",ti);
			//printf("corhms : %d\r\n",to);
		 }
		 // pc.printf("test");
        vTaskDelay(500/portTICK_RATE_MS);
    3bd6:	20fa      	movs	r0, #250	; 0xfa
    3bd8:	0040      	lsls	r0, r0, #1
    3bda:	4b07      	ldr	r3, [pc, #28]	; (3bf8 <_Z7HMITaskv+0x64>)
    3bdc:	4798      	blx	r3
	}
    3bde:	e7e5      	b.n	3bac <_Z7HMITaskv+0x18>
    3be0:	000005a5 	.word	0x000005a5
    3be4:	200045ac 	.word	0x200045ac
    3be8:	200044b8 	.word	0x200044b8
    3bec:	00004f49 	.word	0x00004f49
    3bf0:	0000ebc0 	.word	0x0000ebc0
    3bf4:	00000785 	.word	0x00000785
    3bf8:	00000e85 	.word	0x00000e85

00003bfc <_Z7sendHMIPKc>:
}
bool sendHMI(const char send[]){
    3bfc:	b510      	push	{r4, lr}
    3bfe:	b082      	sub	sp, #8
    3c00:	9001      	str	r0, [sp, #4]
			if( uartQueue != 0 )
    3c02:	4b08      	ldr	r3, [pc, #32]	; (3c24 <_Z7sendHMIPKc+0x28>)
    3c04:	6818      	ldr	r0, [r3, #0]
    3c06:	2800      	cmp	r0, #0
    3c08:	d009      	beq.n	3c1e <_Z7sendHMIPKc+0x22>
			{
				if( xQueueSendToBack( uartQueue,( void * ) &send,(  portTickType ) 0 ) == pdPASS )
    3c0a:	a901      	add	r1, sp, #4
    3c0c:	2200      	movs	r2, #0
    3c0e:	2300      	movs	r3, #0
    3c10:	4c05      	ldr	r4, [pc, #20]	; (3c28 <_Z7sendHMIPKc+0x2c>)
    3c12:	47a0      	blx	r4
    3c14:	3801      	subs	r0, #1
    3c16:	4243      	negs	r3, r0
    3c18:	4158      	adcs	r0, r3
    3c1a:	b2c0      	uxtb	r0, r0
    3c1c:	e000      	b.n	3c20 <_Z7sendHMIPKc+0x24>
				
				/* Failed to post the message. */
				
			}
			
				return false;
    3c1e:	2000      	movs	r0, #0
			
    3c20:	b002      	add	sp, #8
    3c22:	bd10      	pop	{r4, pc}
    3c24:	200045ac 	.word	0x200045ac
    3c28:	000005f5 	.word	0x000005f5

00003c2c <_GLOBAL__sub_I_uartQueue>:
    3c2c:	b538      	push	{r3, r4, r5, lr}
/************************************************************************/
/* GLOBAL                                                               */
/************************************************************************/
xQueueHandle uartQueue;
#ifdef MASTERMODE
Serial hmi(PA22,PA23);
    3c2e:	4c06      	ldr	r4, [pc, #24]	; (3c48 <_GLOBAL__sub_I_uartQueue+0x1c>)
    3c30:	1c20      	adds	r0, r4, #0
    3c32:	2116      	movs	r1, #22
    3c34:	2217      	movs	r2, #23
    3c36:	2300      	movs	r3, #0
    3c38:	4d04      	ldr	r5, [pc, #16]	; (3c4c <_GLOBAL__sub_I_uartQueue+0x20>)
    3c3a:	47a8      	blx	r5
    3c3c:	1c20      	adds	r0, r4, #0
    3c3e:	4904      	ldr	r1, [pc, #16]	; (3c50 <_GLOBAL__sub_I_uartQueue+0x24>)
    3c40:	4a04      	ldr	r2, [pc, #16]	; (3c54 <_GLOBAL__sub_I_uartQueue+0x28>)
    3c42:	4b05      	ldr	r3, [pc, #20]	; (3c58 <_GLOBAL__sub_I_uartQueue+0x2c>)
    3c44:	4798      	blx	r3
				
			}
			
				return false;
			
    3c46:	bd38      	pop	{r3, r4, r5, pc}
    3c48:	200044b8 	.word	0x200044b8
    3c4c:	00004d01 	.word	0x00004d01
    3c50:	00002d9d 	.word	0x00002d9d
    3c54:	200000b0 	.word	0x200000b0
    3c58:	00006655 	.word	0x00006655

00003c5c <mbed_die>:
    3c5c:	b508      	push	{r3, lr}
    3c5e:	b672      	cpsid	i
    3c60:	2096      	movs	r0, #150	; 0x96
    3c62:	f001 fa01 	bl	5068 <wait_ms>
    3c66:	2096      	movs	r0, #150	; 0x96
    3c68:	f001 f9fe 	bl	5068 <wait_ms>
    3c6c:	e7f8      	b.n	3c60 <mbed_die+0x4>
    3c6e:	46c0      	nop			; (mov r8, r8)

00003c70 <NVIC_SetVector>:
    3c70:	4a0b      	ldr	r2, [pc, #44]	; (3ca0 <NVIC_SetVector+0x30>)
    3c72:	b530      	push	{r4, r5, lr}
    3c74:	6894      	ldr	r4, [r2, #8]
    3c76:	6892      	ldr	r2, [r2, #8]
    3c78:	1c23      	adds	r3, r4, #0
    3c7a:	2a00      	cmp	r2, #0
    3c7c:	d10c      	bne.n	3c98 <NVIC_SetVector+0x28>
    3c7e:	2300      	movs	r3, #0
    3c80:	2280      	movs	r2, #128	; 0x80
    3c82:	591d      	ldr	r5, [r3, r4]
    3c84:	0592      	lsls	r2, r2, #22
    3c86:	189a      	adds	r2, r3, r2
    3c88:	3304      	adds	r3, #4
    3c8a:	6015      	str	r5, [r2, #0]
    3c8c:	2bb0      	cmp	r3, #176	; 0xb0
    3c8e:	d1f7      	bne.n	3c80 <NVIC_SetVector+0x10>
    3c90:	2380      	movs	r3, #128	; 0x80
    3c92:	4a03      	ldr	r2, [pc, #12]	; (3ca0 <NVIC_SetVector+0x30>)
    3c94:	059b      	lsls	r3, r3, #22
    3c96:	6093      	str	r3, [r2, #8]
    3c98:	3010      	adds	r0, #16
    3c9a:	0080      	lsls	r0, r0, #2
    3c9c:	50c1      	str	r1, [r0, r3]
    3c9e:	bd30      	pop	{r4, r5, pc}
    3ca0:	e000ed00 	.word	0xe000ed00

00003ca4 <mbed_sdk_init>:
    3ca4:	b508      	push	{r3, lr}
    3ca6:	4b04      	ldr	r3, [pc, #16]	; (3cb8 <mbed_sdk_init+0x14>)
    3ca8:	781a      	ldrb	r2, [r3, #0]
    3caa:	2a00      	cmp	r2, #0
    3cac:	d103      	bne.n	3cb6 <mbed_sdk_init+0x12>
    3cae:	3201      	adds	r2, #1
    3cb0:	701a      	strb	r2, [r3, #0]
    3cb2:	f000 fc23 	bl	44fc <system_init>
    3cb6:	bd08      	pop	{r3, pc}
    3cb8:	200045b0 	.word	0x200045b0

00003cbc <_ZN4mbed10FileHandle4flenEv>:
    3cbc:	6803      	ldr	r3, [r0, #0]
    3cbe:	b570      	push	{r4, r5, r6, lr}
    3cc0:	691b      	ldr	r3, [r3, #16]
    3cc2:	2100      	movs	r1, #0
    3cc4:	2201      	movs	r2, #1
    3cc6:	1c04      	adds	r4, r0, #0
    3cc8:	4798      	blx	r3
    3cca:	1c06      	adds	r6, r0, #0
    3ccc:	1c43      	adds	r3, r0, #1
    3cce:	d00e      	beq.n	3cee <_ZN4mbed10FileHandle4flenEv+0x32>
    3cd0:	6823      	ldr	r3, [r4, #0]
    3cd2:	2100      	movs	r1, #0
    3cd4:	691b      	ldr	r3, [r3, #16]
    3cd6:	2202      	movs	r2, #2
    3cd8:	1c20      	adds	r0, r4, #0
    3cda:	4798      	blx	r3
    3cdc:	1c05      	adds	r5, r0, #0
    3cde:	6823      	ldr	r3, [r4, #0]
    3ce0:	1c20      	adds	r0, r4, #0
    3ce2:	691b      	ldr	r3, [r3, #16]
    3ce4:	1c31      	adds	r1, r6, #0
    3ce6:	2200      	movs	r2, #0
    3ce8:	4798      	blx	r3
    3cea:	1c28      	adds	r0, r5, #0
    3cec:	bd70      	pop	{r4, r5, r6, pc}
    3cee:	e7fd      	b.n	3cec <_ZN4mbed10FileHandle4flenEv+0x30>

00003cf0 <_ZL11init_serialv.part.0>:
    3cf0:	b508      	push	{r3, lr}
    3cf2:	4803      	ldr	r0, [pc, #12]	; (3d00 <_ZL11init_serialv.part.0+0x10>)
    3cf4:	2104      	movs	r1, #4
    3cf6:	2205      	movs	r2, #5
    3cf8:	f000 fd3e 	bl	4778 <serial_init>
    3cfc:	bd08      	pop	{r3, pc}
    3cfe:	46c0      	nop			; (mov r8, r8)
    3d00:	20004758 	.word	0x20004758

00003d04 <_ZN4mbed10FileHandleD1Ev>:
    3d04:	4b09      	ldr	r3, [pc, #36]	; (3d2c <_ZN4mbed10FileHandleD1Ev+0x28>)
    3d06:	b510      	push	{r4, lr}
    3d08:	3308      	adds	r3, #8
    3d0a:	6003      	str	r3, [r0, #0]
    3d0c:	4b08      	ldr	r3, [pc, #32]	; (3d30 <_ZN4mbed10FileHandleD1Ev+0x2c>)
    3d0e:	2100      	movs	r1, #0
    3d10:	1c5a      	adds	r2, r3, #1
    3d12:	32ff      	adds	r2, #255	; 0xff
    3d14:	e002      	b.n	3d1c <_ZN4mbed10FileHandleD1Ev+0x18>
    3d16:	3304      	adds	r3, #4
    3d18:	4293      	cmp	r3, r2
    3d1a:	d006      	beq.n	3d2a <_ZN4mbed10FileHandleD1Ev+0x26>
    3d1c:	681c      	ldr	r4, [r3, #0]
    3d1e:	4284      	cmp	r4, r0
    3d20:	d1f9      	bne.n	3d16 <_ZN4mbed10FileHandleD1Ev+0x12>
    3d22:	6019      	str	r1, [r3, #0]
    3d24:	3304      	adds	r3, #4
    3d26:	4293      	cmp	r3, r2
    3d28:	d1f8      	bne.n	3d1c <_ZN4mbed10FileHandleD1Ev+0x18>
    3d2a:	bd10      	pop	{r4, pc}
    3d2c:	0000eee8 	.word	0x0000eee8
    3d30:	200045b4 	.word	0x200045b4

00003d34 <_open>:
    3d34:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d36:	4647      	mov	r7, r8
    3d38:	b480      	push	{r7}
    3d3a:	1c0e      	adds	r6, r1, #0
    3d3c:	b082      	sub	sp, #8
    3d3e:	4934      	ldr	r1, [pc, #208]	; (3e10 <_open+0xdc>)
    3d40:	1c05      	adds	r5, r0, #0
    3d42:	f007 fc1d 	bl	b580 <strcmp>
    3d46:	1e04      	subs	r4, r0, #0
    3d48:	d108      	bne.n	3d5c <_open+0x28>
    3d4a:	4b32      	ldr	r3, [pc, #200]	; (3e14 <_open+0xe0>)
    3d4c:	681b      	ldr	r3, [r3, #0]
    3d4e:	2b00      	cmp	r3, #0
    3d50:	d00f      	beq.n	3d72 <_open+0x3e>
    3d52:	1c20      	adds	r0, r4, #0
    3d54:	b002      	add	sp, #8
    3d56:	bc04      	pop	{r2}
    3d58:	4690      	mov	r8, r2
    3d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3d5c:	1c28      	adds	r0, r5, #0
    3d5e:	492e      	ldr	r1, [pc, #184]	; (3e18 <_open+0xe4>)
    3d60:	f007 fc0e 	bl	b580 <strcmp>
    3d64:	2800      	cmp	r0, #0
    3d66:	d107      	bne.n	3d78 <_open+0x44>
    3d68:	4b2a      	ldr	r3, [pc, #168]	; (3e14 <_open+0xe0>)
    3d6a:	2401      	movs	r4, #1
    3d6c:	681b      	ldr	r3, [r3, #0]
    3d6e:	2b00      	cmp	r3, #0
    3d70:	d1ef      	bne.n	3d52 <_open+0x1e>
    3d72:	f7ff ffbd 	bl	3cf0 <_ZL11init_serialv.part.0>
    3d76:	e7ec      	b.n	3d52 <_open+0x1e>
    3d78:	1c28      	adds	r0, r5, #0
    3d7a:	4928      	ldr	r1, [pc, #160]	; (3e1c <_open+0xe8>)
    3d7c:	f007 fc00 	bl	b580 <strcmp>
    3d80:	2800      	cmp	r0, #0
    3d82:	d024      	beq.n	3dce <_open+0x9a>
    3d84:	4f26      	ldr	r7, [pc, #152]	; (3e20 <_open+0xec>)
    3d86:	2400      	movs	r4, #0
    3d88:	1c3b      	adds	r3, r7, #0
    3d8a:	e003      	b.n	3d94 <_open+0x60>
    3d8c:	3401      	adds	r4, #1
    3d8e:	3304      	adds	r3, #4
    3d90:	2c40      	cmp	r4, #64	; 0x40
    3d92:	d022      	beq.n	3dda <_open+0xa6>
    3d94:	681a      	ldr	r2, [r3, #0]
    3d96:	2a00      	cmp	r2, #0
    3d98:	d1f8      	bne.n	3d8c <_open+0x58>
    3d9a:	782b      	ldrb	r3, [r5, #0]
    3d9c:	2b3a      	cmp	r3, #58	; 0x3a
    3d9e:	d030      	beq.n	3e02 <_open+0xce>
    3da0:	4668      	mov	r0, sp
    3da2:	1c29      	adds	r1, r5, #0
    3da4:	f000 fe72 	bl	4a8c <_ZN4mbed8FilePathC1EPKc>
    3da8:	4668      	mov	r0, sp
    3daa:	f000 fec9 	bl	4b40 <_ZN4mbed8FilePath6existsEv>
    3dae:	2800      	cmp	r0, #0
    3db0:	d013      	beq.n	3dda <_open+0xa6>
    3db2:	4668      	mov	r0, sp
    3db4:	f000 fea6 	bl	4b04 <_ZN4mbed8FilePath6isFileEv>
    3db8:	2800      	cmp	r0, #0
    3dba:	d011      	beq.n	3de0 <_open+0xac>
    3dbc:	4668      	mov	r0, sp
    3dbe:	f000 fead 	bl	4b1c <_ZN4mbed8FilePath4fileEv>
    3dc2:	2800      	cmp	r0, #0
    3dc4:	d009      	beq.n	3dda <_open+0xa6>
    3dc6:	00a3      	lsls	r3, r4, #2
    3dc8:	50f8      	str	r0, [r7, r3]
    3dca:	3403      	adds	r4, #3
    3dcc:	e7c1      	b.n	3d52 <_open+0x1e>
    3dce:	4b11      	ldr	r3, [pc, #68]	; (3e14 <_open+0xe0>)
    3dd0:	2402      	movs	r4, #2
    3dd2:	681b      	ldr	r3, [r3, #0]
    3dd4:	2b00      	cmp	r3, #0
    3dd6:	d1bc      	bne.n	3d52 <_open+0x1e>
    3dd8:	e7cb      	b.n	3d72 <_open+0x3e>
    3dda:	2401      	movs	r4, #1
    3ddc:	4264      	negs	r4, r4
    3dde:	e7b8      	b.n	3d52 <_open+0x1e>
    3de0:	4668      	mov	r0, sp
    3de2:	f000 fe81 	bl	4ae8 <_ZN4mbed8FilePath10fileSystemEv>
    3de6:	1e05      	subs	r5, r0, #0
    3de8:	d0f7      	beq.n	3dda <_open+0xa6>
    3dea:	6803      	ldr	r3, [r0, #0]
    3dec:	4668      	mov	r0, sp
    3dee:	689b      	ldr	r3, [r3, #8]
    3df0:	4698      	mov	r8, r3
    3df2:	f000 fe77 	bl	4ae4 <_ZN4mbed8FilePath8fileNameEv>
    3df6:	4a0b      	ldr	r2, [pc, #44]	; (3e24 <_open+0xf0>)
    3df8:	1c01      	adds	r1, r0, #0
    3dfa:	4032      	ands	r2, r6
    3dfc:	1c28      	adds	r0, r5, #0
    3dfe:	47c0      	blx	r8
    3e00:	e7df      	b.n	3dc2 <_open+0x8e>
    3e02:	1c28      	adds	r0, r5, #0
    3e04:	4908      	ldr	r1, [pc, #32]	; (3e28 <_open+0xf4>)
    3e06:	466a      	mov	r2, sp
    3e08:	f007 fb44 	bl	b494 <siscanf>
    3e0c:	9800      	ldr	r0, [sp, #0]
    3e0e:	e7d8      	b.n	3dc2 <_open+0x8e>
    3e10:	0000eed0 	.word	0x0000eed0
    3e14:	200046bc 	.word	0x200046bc
    3e18:	0000eee0 	.word	0x0000eee0
    3e1c:	0000eed8 	.word	0x0000eed8
    3e20:	200045b4 	.word	0x200045b4
    3e24:	fffeffff 	.word	0xfffeffff
    3e28:	0000ef14 	.word	0x0000ef14

00003e2c <_close>:
    3e2c:	b508      	push	{r3, lr}
    3e2e:	1c03      	adds	r3, r0, #0
    3e30:	2000      	movs	r0, #0
    3e32:	2b02      	cmp	r3, #2
    3e34:	dd0a      	ble.n	3e4c <_close+0x20>
    3e36:	4907      	ldr	r1, [pc, #28]	; (3e54 <_close+0x28>)
    3e38:	3b03      	subs	r3, #3
    3e3a:	009b      	lsls	r3, r3, #2
    3e3c:	585a      	ldr	r2, [r3, r1]
    3e3e:	5058      	str	r0, [r3, r1]
    3e40:	2a00      	cmp	r2, #0
    3e42:	d004      	beq.n	3e4e <_close+0x22>
    3e44:	6813      	ldr	r3, [r2, #0]
    3e46:	1c10      	adds	r0, r2, #0
    3e48:	685b      	ldr	r3, [r3, #4]
    3e4a:	4798      	blx	r3
    3e4c:	bd08      	pop	{r3, pc}
    3e4e:	2001      	movs	r0, #1
    3e50:	4240      	negs	r0, r0
    3e52:	e7fb      	b.n	3e4c <_close+0x20>
    3e54:	200045b4 	.word	0x200045b4

00003e58 <_write>:
    3e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e5a:	1c0c      	adds	r4, r1, #0
    3e5c:	1c17      	adds	r7, r2, #0
    3e5e:	2802      	cmp	r0, #2
    3e60:	dc12      	bgt.n	3e88 <_write+0x30>
    3e62:	4b10      	ldr	r3, [pc, #64]	; (3ea4 <_write+0x4c>)
    3e64:	681b      	ldr	r3, [r3, #0]
    3e66:	2b00      	cmp	r3, #0
    3e68:	d101      	bne.n	3e6e <_write+0x16>
    3e6a:	f7ff ff41 	bl	3cf0 <_ZL11init_serialv.part.0>
    3e6e:	2f00      	cmp	r7, #0
    3e70:	d008      	beq.n	3e84 <_write+0x2c>
    3e72:	4d0d      	ldr	r5, [pc, #52]	; (3ea8 <_write+0x50>)
    3e74:	19e6      	adds	r6, r4, r7
    3e76:	7821      	ldrb	r1, [r4, #0]
    3e78:	1c28      	adds	r0, r5, #0
    3e7a:	3401      	adds	r4, #1
    3e7c:	f000 fde6 	bl	4a4c <serial_putc>
    3e80:	42b4      	cmp	r4, r6
    3e82:	d1f8      	bne.n	3e76 <_write+0x1e>
    3e84:	1c38      	adds	r0, r7, #0
    3e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3e88:	3803      	subs	r0, #3
    3e8a:	4b08      	ldr	r3, [pc, #32]	; (3eac <_write+0x54>)
    3e8c:	0080      	lsls	r0, r0, #2
    3e8e:	58c0      	ldr	r0, [r0, r3]
    3e90:	2800      	cmp	r0, #0
    3e92:	d003      	beq.n	3e9c <_write+0x44>
    3e94:	6803      	ldr	r3, [r0, #0]
    3e96:	681b      	ldr	r3, [r3, #0]
    3e98:	4798      	blx	r3
    3e9a:	e7f4      	b.n	3e86 <_write+0x2e>
    3e9c:	2001      	movs	r0, #1
    3e9e:	4240      	negs	r0, r0
    3ea0:	e7f1      	b.n	3e86 <_write+0x2e>
    3ea2:	46c0      	nop			; (mov r8, r8)
    3ea4:	200046bc 	.word	0x200046bc
    3ea8:	20004758 	.word	0x20004758
    3eac:	200045b4 	.word	0x200045b4

00003eb0 <_read>:
    3eb0:	b510      	push	{r4, lr}
    3eb2:	1c0c      	adds	r4, r1, #0
    3eb4:	2802      	cmp	r0, #2
    3eb6:	dc09      	bgt.n	3ecc <_read+0x1c>
    3eb8:	4b0c      	ldr	r3, [pc, #48]	; (3eec <_read+0x3c>)
    3eba:	681b      	ldr	r3, [r3, #0]
    3ebc:	2b00      	cmp	r3, #0
    3ebe:	d00f      	beq.n	3ee0 <_read+0x30>
    3ec0:	480b      	ldr	r0, [pc, #44]	; (3ef0 <_read+0x40>)
    3ec2:	f000 fd97 	bl	49f4 <serial_getc>
    3ec6:	7020      	strb	r0, [r4, #0]
    3ec8:	2001      	movs	r0, #1
    3eca:	bd10      	pop	{r4, pc}
    3ecc:	3803      	subs	r0, #3
    3ece:	4b09      	ldr	r3, [pc, #36]	; (3ef4 <_read+0x44>)
    3ed0:	0080      	lsls	r0, r0, #2
    3ed2:	58c0      	ldr	r0, [r0, r3]
    3ed4:	2800      	cmp	r0, #0
    3ed6:	d006      	beq.n	3ee6 <_read+0x36>
    3ed8:	6803      	ldr	r3, [r0, #0]
    3eda:	689b      	ldr	r3, [r3, #8]
    3edc:	4798      	blx	r3
    3ede:	e7f4      	b.n	3eca <_read+0x1a>
    3ee0:	f7ff ff06 	bl	3cf0 <_ZL11init_serialv.part.0>
    3ee4:	e7ec      	b.n	3ec0 <_read+0x10>
    3ee6:	2001      	movs	r0, #1
    3ee8:	4240      	negs	r0, r0
    3eea:	e7ee      	b.n	3eca <_read+0x1a>
    3eec:	200046bc 	.word	0x200046bc
    3ef0:	20004758 	.word	0x20004758
    3ef4:	200045b4 	.word	0x200045b4

00003ef8 <_isatty>:
    3ef8:	b508      	push	{r3, lr}
    3efa:	1c03      	adds	r3, r0, #0
    3efc:	2001      	movs	r0, #1
    3efe:	2b02      	cmp	r3, #2
    3f00:	dd08      	ble.n	3f14 <_isatty+0x1c>
    3f02:	3b03      	subs	r3, #3
    3f04:	4a05      	ldr	r2, [pc, #20]	; (3f1c <_isatty+0x24>)
    3f06:	009b      	lsls	r3, r3, #2
    3f08:	5898      	ldr	r0, [r3, r2]
    3f0a:	2800      	cmp	r0, #0
    3f0c:	d003      	beq.n	3f16 <_isatty+0x1e>
    3f0e:	6803      	ldr	r3, [r0, #0]
    3f10:	68db      	ldr	r3, [r3, #12]
    3f12:	4798      	blx	r3
    3f14:	bd08      	pop	{r3, pc}
    3f16:	2001      	movs	r0, #1
    3f18:	4240      	negs	r0, r0
    3f1a:	e7fb      	b.n	3f14 <_isatty+0x1c>
    3f1c:	200045b4 	.word	0x200045b4

00003f20 <_lseek>:
    3f20:	b508      	push	{r3, lr}
    3f22:	1c03      	adds	r3, r0, #0
    3f24:	2000      	movs	r0, #0
    3f26:	2b02      	cmp	r3, #2
    3f28:	dd08      	ble.n	3f3c <_lseek+0x1c>
    3f2a:	3b03      	subs	r3, #3
    3f2c:	4805      	ldr	r0, [pc, #20]	; (3f44 <_lseek+0x24>)
    3f2e:	009b      	lsls	r3, r3, #2
    3f30:	5818      	ldr	r0, [r3, r0]
    3f32:	2800      	cmp	r0, #0
    3f34:	d003      	beq.n	3f3e <_lseek+0x1e>
    3f36:	6803      	ldr	r3, [r0, #0]
    3f38:	691b      	ldr	r3, [r3, #16]
    3f3a:	4798      	blx	r3
    3f3c:	bd08      	pop	{r3, pc}
    3f3e:	2001      	movs	r0, #1
    3f40:	4240      	negs	r0, r0
    3f42:	e7fb      	b.n	3f3c <_lseek+0x1c>
    3f44:	200045b4 	.word	0x200045b4

00003f48 <_fstat>:
    3f48:	b508      	push	{r3, lr}
    3f4a:	2802      	cmp	r0, #2
    3f4c:	d804      	bhi.n	3f58 <_fstat+0x10>
    3f4e:	2380      	movs	r3, #128	; 0x80
    3f50:	2000      	movs	r0, #0
    3f52:	019b      	lsls	r3, r3, #6
    3f54:	604b      	str	r3, [r1, #4]
    3f56:	bd08      	pop	{r3, pc}
    3f58:	f005 fbc6 	bl	96e8 <__errno>
    3f5c:	2309      	movs	r3, #9
    3f5e:	6003      	str	r3, [r0, #0]
    3f60:	2001      	movs	r0, #1
    3f62:	4240      	negs	r0, r0
    3f64:	e7f7      	b.n	3f56 <_fstat+0xe>
    3f66:	46c0      	nop			; (mov r8, r8)

00003f68 <__cxa_pure_virtual>:
    3f68:	b508      	push	{r3, lr}
    3f6a:	2001      	movs	r0, #1
    3f6c:	f005 fbc2 	bl	96f4 <exit>

00003f70 <mbed_main>:
    3f70:	4770      	bx	lr
    3f72:	46c0      	nop			; (mov r8, r8)

00003f74 <__wrap_main>:
    3f74:	b508      	push	{r3, lr}
    3f76:	f7ff fe95 	bl	3ca4 <mbed_sdk_init>
    3f7a:	f7ff fff9 	bl	3f70 <mbed_main>
    3f7e:	f7fd fe83 	bl	1c88 <main>
    3f82:	bd08      	pop	{r3, pc}

00003f84 <_sbrk>:
    3f84:	4a07      	ldr	r2, [pc, #28]	; (3fa4 <_sbrk+0x20>)
    3f86:	6813      	ldr	r3, [r2, #0]
    3f88:	1818      	adds	r0, r3, r0
    3f8a:	f3ef 8108 	mrs	r1, MSP
    3f8e:	4288      	cmp	r0, r1
    3f90:	d202      	bcs.n	3f98 <_sbrk+0x14>
    3f92:	6010      	str	r0, [r2, #0]
    3f94:	1c18      	adds	r0, r3, #0
    3f96:	4770      	bx	lr
    3f98:	220c      	movs	r2, #12
    3f9a:	2001      	movs	r0, #1
    3f9c:	4b02      	ldr	r3, [pc, #8]	; (3fa8 <_sbrk+0x24>)
    3f9e:	4240      	negs	r0, r0
    3fa0:	601a      	str	r2, [r3, #0]
    3fa2:	e7f8      	b.n	3f96 <_sbrk+0x12>
    3fa4:	200000cc 	.word	0x200000cc
    3fa8:	200047c8 	.word	0x200047c8

00003fac <_exit>:
    3fac:	b508      	push	{r3, lr}
    3fae:	2800      	cmp	r0, #0
    3fb0:	d100      	bne.n	3fb4 <_exit+0x8>
    3fb2:	e7fe      	b.n	3fb2 <_exit+0x6>
    3fb4:	f7ff fe52 	bl	3c5c <mbed_die>
    3fb8:	e7fb      	b.n	3fb2 <_exit+0x6>
    3fba:	46c0      	nop			; (mov r8, r8)

00003fbc <_ZN4mbed26mbed_set_unbuffered_streamEP7__sFILE>:
    3fbc:	b508      	push	{r3, lr}
    3fbe:	2100      	movs	r1, #0
    3fc0:	f007 f9b3 	bl	b32a <setbuf>
    3fc4:	bd08      	pop	{r3, pc}
    3fc6:	46c0      	nop			; (mov r8, r8)

00003fc8 <Dummy_Handler>:
    3fc8:	e7fe      	b.n	3fc8 <Dummy_Handler>
    3fca:	46c0      	nop			; (mov r8, r8)

00003fcc <Reset_Handler>:
    3fcc:	4816      	ldr	r0, [pc, #88]	; (4028 <Reset_Handler+0x5c>)
    3fce:	4917      	ldr	r1, [pc, #92]	; (402c <Reset_Handler+0x60>)
    3fd0:	b510      	push	{r4, lr}
    3fd2:	4288      	cmp	r0, r1
    3fd4:	d00d      	beq.n	3ff2 <Reset_Handler+0x26>
    3fd6:	4b16      	ldr	r3, [pc, #88]	; (4030 <Reset_Handler+0x64>)
    3fd8:	4299      	cmp	r1, r3
    3fda:	d20a      	bcs.n	3ff2 <Reset_Handler+0x26>
    3fdc:	43ca      	mvns	r2, r1
    3fde:	18d3      	adds	r3, r2, r3
    3fe0:	2200      	movs	r2, #0
    3fe2:	089b      	lsrs	r3, r3, #2
    3fe4:	3301      	adds	r3, #1
    3fe6:	009b      	lsls	r3, r3, #2
    3fe8:	5884      	ldr	r4, [r0, r2]
    3fea:	508c      	str	r4, [r1, r2]
    3fec:	3204      	adds	r2, #4
    3fee:	429a      	cmp	r2, r3
    3ff0:	d1fa      	bne.n	3fe8 <Reset_Handler+0x1c>
    3ff2:	4910      	ldr	r1, [pc, #64]	; (4034 <Reset_Handler+0x68>)
    3ff4:	4b10      	ldr	r3, [pc, #64]	; (4038 <Reset_Handler+0x6c>)
    3ff6:	4299      	cmp	r1, r3
    3ff8:	d20b      	bcs.n	4012 <Reset_Handler+0x46>
    3ffa:	43ca      	mvns	r2, r1
    3ffc:	2000      	movs	r0, #0
    3ffe:	18d3      	adds	r3, r2, r3
    4000:	2200      	movs	r2, #0
    4002:	089b      	lsrs	r3, r3, #2
    4004:	3301      	adds	r3, #1
    4006:	009b      	lsls	r3, r3, #2
    4008:	188c      	adds	r4, r1, r2
    400a:	3204      	adds	r2, #4
    400c:	6020      	str	r0, [r4, #0]
    400e:	429a      	cmp	r2, r3
    4010:	d1fa      	bne.n	4008 <Reset_Handler+0x3c>
    4012:	21ff      	movs	r1, #255	; 0xff
    4014:	4b09      	ldr	r3, [pc, #36]	; (403c <Reset_Handler+0x70>)
    4016:	4a0a      	ldr	r2, [pc, #40]	; (4040 <Reset_Handler+0x74>)
    4018:	438b      	bics	r3, r1
    401a:	6093      	str	r3, [r2, #8]
    401c:	f005 fe9a 	bl	9d54 <__libc_init_array>
    4020:	f7ff ffa8 	bl	3f74 <__wrap_main>
    4024:	e7fe      	b.n	4024 <Reset_Handler+0x58>
    4026:	46c0      	nop			; (mov r8, r8)
    4028:	0000fd5c 	.word	0x0000fd5c
    402c:	200000b0 	.word	0x200000b0
    4030:	20000174 	.word	0x20000174
    4034:	20000174 	.word	0x20000174
    4038:	200047cc 	.word	0x200047cc
    403c:	00000000 	.word	0x00000000
    4040:	e000ed00 	.word	0xe000ed00

00004044 <extint_register_callback>:
    4044:	2317      	movs	r3, #23
    4046:	2a00      	cmp	r2, #0
    4048:	d001      	beq.n	404e <extint_register_callback+0xa>
    404a:	1c18      	adds	r0, r3, #0
    404c:	4770      	bx	lr
    404e:	4a06      	ldr	r2, [pc, #24]	; (4068 <extint_register_callback+0x24>)
    4050:	0089      	lsls	r1, r1, #2
    4052:	588b      	ldr	r3, [r1, r2]
    4054:	2b00      	cmp	r3, #0
    4056:	d003      	beq.n	4060 <extint_register_callback+0x1c>
    4058:	4283      	cmp	r3, r0
    405a:	d003      	beq.n	4064 <extint_register_callback+0x20>
    405c:	231d      	movs	r3, #29
    405e:	e7f4      	b.n	404a <extint_register_callback+0x6>
    4060:	5088      	str	r0, [r1, r2]
    4062:	e7f2      	b.n	404a <extint_register_callback+0x6>
    4064:	2300      	movs	r3, #0
    4066:	e7f0      	b.n	404a <extint_register_callback+0x6>
    4068:	20004718 	.word	0x20004718

0000406c <extint_chan_enable_callback>:
    406c:	2317      	movs	r3, #23
    406e:	2900      	cmp	r1, #0
    4070:	d001      	beq.n	4076 <extint_chan_enable_callback+0xa>
    4072:	1c18      	adds	r0, r3, #0
    4074:	4770      	bx	lr
    4076:	2200      	movs	r2, #0
    4078:	281f      	cmp	r0, #31
    407a:	d800      	bhi.n	407e <extint_chan_enable_callback+0x12>
    407c:	4a02      	ldr	r2, [pc, #8]	; (4088 <extint_chan_enable_callback+0x1c>)
    407e:	2301      	movs	r3, #1
    4080:	4083      	lsls	r3, r0
    4082:	60d3      	str	r3, [r2, #12]
    4084:	2300      	movs	r3, #0
    4086:	e7f4      	b.n	4072 <extint_chan_enable_callback+0x6>
    4088:	40001800 	.word	0x40001800

0000408c <EIC_Handler>:
    408c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    408e:	2300      	movs	r3, #0
    4090:	2601      	movs	r6, #1
    4092:	4c0b      	ldr	r4, [pc, #44]	; (40c0 <EIC_Handler+0x34>)
    4094:	4d0b      	ldr	r5, [pc, #44]	; (40c4 <EIC_Handler+0x38>)
    4096:	4f0c      	ldr	r7, [pc, #48]	; (40c8 <EIC_Handler+0x3c>)
    4098:	7023      	strb	r3, [r4, #0]
    409a:	1c32      	adds	r2, r6, #0
    409c:	409a      	lsls	r2, r3
    409e:	6929      	ldr	r1, [r5, #16]
    40a0:	4211      	tst	r1, r2
    40a2:	d005      	beq.n	40b0 <EIC_Handler+0x24>
    40a4:	612a      	str	r2, [r5, #16]
    40a6:	009b      	lsls	r3, r3, #2
    40a8:	59db      	ldr	r3, [r3, r7]
    40aa:	2b00      	cmp	r3, #0
    40ac:	d000      	beq.n	40b0 <EIC_Handler+0x24>
    40ae:	4798      	blx	r3
    40b0:	7823      	ldrb	r3, [r4, #0]
    40b2:	3301      	adds	r3, #1
    40b4:	b2db      	uxtb	r3, r3
    40b6:	7023      	strb	r3, [r4, #0]
    40b8:	2b0f      	cmp	r3, #15
    40ba:	d9ee      	bls.n	409a <EIC_Handler+0xe>
    40bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    40be:	46c0      	nop			; (mov r8, r8)
    40c0:	20004714 	.word	0x20004714
    40c4:	40001800 	.word	0x40001800
    40c8:	20004718 	.word	0x20004718

000040cc <_extint_enable>:
    40cc:	2302      	movs	r3, #2
    40ce:	4a04      	ldr	r2, [pc, #16]	; (40e0 <_extint_enable+0x14>)
    40d0:	7811      	ldrb	r1, [r2, #0]
    40d2:	430b      	orrs	r3, r1
    40d4:	7013      	strb	r3, [r2, #0]
    40d6:	7853      	ldrb	r3, [r2, #1]
    40d8:	b25b      	sxtb	r3, r3
    40da:	2b00      	cmp	r3, #0
    40dc:	dbfb      	blt.n	40d6 <_extint_enable+0xa>
    40de:	4770      	bx	lr
    40e0:	40001800 	.word	0x40001800

000040e4 <_system_extint_init>:
    40e4:	2340      	movs	r3, #64	; 0x40
    40e6:	b500      	push	{lr}
    40e8:	4a12      	ldr	r2, [pc, #72]	; (4134 <_system_extint_init+0x50>)
    40ea:	b083      	sub	sp, #12
    40ec:	6991      	ldr	r1, [r2, #24]
    40ee:	2005      	movs	r0, #5
    40f0:	430b      	orrs	r3, r1
    40f2:	6193      	str	r3, [r2, #24]
    40f4:	2300      	movs	r3, #0
    40f6:	a901      	add	r1, sp, #4
    40f8:	700b      	strb	r3, [r1, #0]
    40fa:	f000 f9c9 	bl	4490 <system_gclk_chan_set_config>
    40fe:	2005      	movs	r0, #5
    4100:	f000 f988 	bl	4414 <system_gclk_chan_enable>
    4104:	2301      	movs	r3, #1
    4106:	4a0c      	ldr	r2, [pc, #48]	; (4138 <_system_extint_init+0x54>)
    4108:	7811      	ldrb	r1, [r2, #0]
    410a:	430b      	orrs	r3, r1
    410c:	7013      	strb	r3, [r2, #0]
    410e:	7853      	ldrb	r3, [r2, #1]
    4110:	b25b      	sxtb	r3, r3
    4112:	2b00      	cmp	r3, #0
    4114:	dbfb      	blt.n	410e <_system_extint_init+0x2a>
    4116:	4b09      	ldr	r3, [pc, #36]	; (413c <_system_extint_init+0x58>)
    4118:	2200      	movs	r2, #0
    411a:	1c19      	adds	r1, r3, #0
    411c:	3140      	adds	r1, #64	; 0x40
    411e:	c304      	stmia	r3!, {r2}
    4120:	428b      	cmp	r3, r1
    4122:	d1fc      	bne.n	411e <_system_extint_init+0x3a>
    4124:	2210      	movs	r2, #16
    4126:	4b06      	ldr	r3, [pc, #24]	; (4140 <_system_extint_init+0x5c>)
    4128:	601a      	str	r2, [r3, #0]
    412a:	f7ff ffcf 	bl	40cc <_extint_enable>
    412e:	b003      	add	sp, #12
    4130:	bd00      	pop	{pc}
    4132:	46c0      	nop			; (mov r8, r8)
    4134:	40000400 	.word	0x40000400
    4138:	40001800 	.word	0x40001800
    413c:	20004718 	.word	0x20004718
    4140:	e000e100 	.word	0xe000e100

00004144 <extint_chan_get_config_defaults>:
    4144:	2300      	movs	r3, #0
    4146:	2201      	movs	r2, #1
    4148:	6003      	str	r3, [r0, #0]
    414a:	6043      	str	r3, [r0, #4]
    414c:	7283      	strb	r3, [r0, #10]
    414e:	3302      	adds	r3, #2
    4150:	7202      	strb	r2, [r0, #8]
    4152:	7242      	strb	r2, [r0, #9]
    4154:	72c3      	strb	r3, [r0, #11]
    4156:	4770      	bx	lr

00004158 <extint_chan_set_config>:
    4158:	b5f0      	push	{r4, r5, r6, r7, lr}
    415a:	2300      	movs	r3, #0
    415c:	1c0c      	adds	r4, r1, #0
    415e:	b083      	sub	sp, #12
    4160:	a901      	add	r1, sp, #4
    4162:	704b      	strb	r3, [r1, #1]
    4164:	70cb      	strb	r3, [r1, #3]
    4166:	7923      	ldrb	r3, [r4, #4]
    4168:	1c05      	adds	r5, r0, #0
    416a:	700b      	strb	r3, [r1, #0]
    416c:	7a23      	ldrb	r3, [r4, #8]
    416e:	7820      	ldrb	r0, [r4, #0]
    4170:	708b      	strb	r3, [r1, #2]
    4172:	2600      	movs	r6, #0
    4174:	f000 f882 	bl	427c <system_pinmux_pin_set_config>
    4178:	2d1f      	cmp	r5, #31
    417a:	d800      	bhi.n	417e <extint_chan_set_config+0x26>
    417c:	4e12      	ldr	r6, [pc, #72]	; (41c8 <extint_chan_set_config+0x70>)
    417e:	2207      	movs	r2, #7
    4180:	7aa3      	ldrb	r3, [r4, #10]
    4182:	402a      	ands	r2, r5
    4184:	0092      	lsls	r2, r2, #2
    4186:	7ae0      	ldrb	r0, [r4, #11]
    4188:	2b00      	cmp	r3, #0
    418a:	d001      	beq.n	4190 <extint_chan_set_config+0x38>
    418c:	2308      	movs	r3, #8
    418e:	4318      	orrs	r0, r3
    4190:	270f      	movs	r7, #15
    4192:	4097      	lsls	r7, r2
    4194:	08eb      	lsrs	r3, r5, #3
    4196:	009b      	lsls	r3, r3, #2
    4198:	18f3      	adds	r3, r6, r3
    419a:	6999      	ldr	r1, [r3, #24]
    419c:	4090      	lsls	r0, r2
    419e:	43b9      	bics	r1, r7
    41a0:	1c0a      	adds	r2, r1, #0
    41a2:	4302      	orrs	r2, r0
    41a4:	619a      	str	r2, [r3, #24]
    41a6:	7a63      	ldrb	r3, [r4, #9]
    41a8:	2b00      	cmp	r3, #0
    41aa:	d106      	bne.n	41ba <extint_chan_set_config+0x62>
    41ac:	2201      	movs	r2, #1
    41ae:	40aa      	lsls	r2, r5
    41b0:	6973      	ldr	r3, [r6, #20]
    41b2:	4393      	bics	r3, r2
    41b4:	6173      	str	r3, [r6, #20]
    41b6:	b003      	add	sp, #12
    41b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    41ba:	2201      	movs	r2, #1
    41bc:	40aa      	lsls	r2, r5
    41be:	1c15      	adds	r5, r2, #0
    41c0:	6973      	ldr	r3, [r6, #20]
    41c2:	431d      	orrs	r5, r3
    41c4:	6175      	str	r5, [r6, #20]
    41c6:	e7f6      	b.n	41b6 <extint_chan_set_config+0x5e>
    41c8:	40001800 	.word	0x40001800

000041cc <_system_pinmux_config>:
    41cc:	78d3      	ldrb	r3, [r2, #3]
    41ce:	b570      	push	{r4, r5, r6, lr}
    41d0:	2b00      	cmp	r3, #0
    41d2:	d131      	bne.n	4238 <_system_pinmux_config+0x6c>
    41d4:	7814      	ldrb	r4, [r2, #0]
    41d6:	2c80      	cmp	r4, #128	; 0x80
    41d8:	d047      	beq.n	426a <_system_pinmux_config+0x9e>
    41da:	2380      	movs	r3, #128	; 0x80
    41dc:	0624      	lsls	r4, r4, #24
    41de:	025b      	lsls	r3, r3, #9
    41e0:	431c      	orrs	r4, r3
    41e2:	7853      	ldrb	r3, [r2, #1]
    41e4:	2502      	movs	r5, #2
    41e6:	1c1e      	adds	r6, r3, #0
    41e8:	43ae      	bics	r6, r5
    41ea:	d107      	bne.n	41fc <_system_pinmux_config+0x30>
    41ec:	7893      	ldrb	r3, [r2, #2]
    41ee:	2b00      	cmp	r3, #0
    41f0:	d137      	bne.n	4262 <_system_pinmux_config+0x96>
    41f2:	2380      	movs	r3, #128	; 0x80
    41f4:	029b      	lsls	r3, r3, #10
    41f6:	431c      	orrs	r4, r3
    41f8:	6041      	str	r1, [r0, #4]
    41fa:	7853      	ldrb	r3, [r2, #1]
    41fc:	3b01      	subs	r3, #1
    41fe:	2b01      	cmp	r3, #1
    4200:	d935      	bls.n	426e <_system_pinmux_config+0xa2>
    4202:	25a0      	movs	r5, #160	; 0xa0
    4204:	040b      	lsls	r3, r1, #16
    4206:	05ed      	lsls	r5, r5, #23
    4208:	0c1b      	lsrs	r3, r3, #16
    420a:	432b      	orrs	r3, r5
    420c:	25d0      	movs	r5, #208	; 0xd0
    420e:	4323      	orrs	r3, r4
    4210:	6283      	str	r3, [r0, #40]	; 0x28
    4212:	062d      	lsls	r5, r5, #24
    4214:	0c0b      	lsrs	r3, r1, #16
    4216:	432b      	orrs	r3, r5
    4218:	4323      	orrs	r3, r4
    421a:	6283      	str	r3, [r0, #40]	; 0x28
    421c:	78d3      	ldrb	r3, [r2, #3]
    421e:	2b00      	cmp	r3, #0
    4220:	d109      	bne.n	4236 <_system_pinmux_config+0x6a>
    4222:	0363      	lsls	r3, r4, #13
    4224:	d503      	bpl.n	422e <_system_pinmux_config+0x62>
    4226:	7893      	ldrb	r3, [r2, #2]
    4228:	2b01      	cmp	r3, #1
    422a:	d023      	beq.n	4274 <_system_pinmux_config+0xa8>
    422c:	6141      	str	r1, [r0, #20]
    422e:	7853      	ldrb	r3, [r2, #1]
    4230:	3b01      	subs	r3, #1
    4232:	2b01      	cmp	r3, #1
    4234:	d913      	bls.n	425e <_system_pinmux_config+0x92>
    4236:	bd70      	pop	{r4, r5, r6, pc}
    4238:	24a0      	movs	r4, #160	; 0xa0
    423a:	040b      	lsls	r3, r1, #16
    423c:	05e4      	lsls	r4, r4, #23
    423e:	0c1b      	lsrs	r3, r3, #16
    4240:	4323      	orrs	r3, r4
    4242:	24d0      	movs	r4, #208	; 0xd0
    4244:	6041      	str	r1, [r0, #4]
    4246:	0624      	lsls	r4, r4, #24
    4248:	6283      	str	r3, [r0, #40]	; 0x28
    424a:	0c0b      	lsrs	r3, r1, #16
    424c:	4323      	orrs	r3, r4
    424e:	6283      	str	r3, [r0, #40]	; 0x28
    4250:	78d3      	ldrb	r3, [r2, #3]
    4252:	2b00      	cmp	r3, #0
    4254:	d1ef      	bne.n	4236 <_system_pinmux_config+0x6a>
    4256:	7853      	ldrb	r3, [r2, #1]
    4258:	3b01      	subs	r3, #1
    425a:	2b01      	cmp	r3, #1
    425c:	d8eb      	bhi.n	4236 <_system_pinmux_config+0x6a>
    425e:	6081      	str	r1, [r0, #8]
    4260:	e7e9      	b.n	4236 <_system_pinmux_config+0x6a>
    4262:	23c0      	movs	r3, #192	; 0xc0
    4264:	02db      	lsls	r3, r3, #11
    4266:	431c      	orrs	r4, r3
    4268:	e7c6      	b.n	41f8 <_system_pinmux_config+0x2c>
    426a:	2400      	movs	r4, #0
    426c:	e7b9      	b.n	41e2 <_system_pinmux_config+0x16>
    426e:	4b02      	ldr	r3, [pc, #8]	; (4278 <_system_pinmux_config+0xac>)
    4270:	401c      	ands	r4, r3
    4272:	e7c6      	b.n	4202 <_system_pinmux_config+0x36>
    4274:	6181      	str	r1, [r0, #24]
    4276:	e7da      	b.n	422e <_system_pinmux_config+0x62>
    4278:	fffbffff 	.word	0xfffbffff

0000427c <system_pinmux_pin_set_config>:
    427c:	b508      	push	{r3, lr}
    427e:	1c0a      	adds	r2, r1, #0
    4280:	1c03      	adds	r3, r0, #0
    4282:	09c1      	lsrs	r1, r0, #7
    4284:	2000      	movs	r0, #0
    4286:	2900      	cmp	r1, #0
    4288:	d104      	bne.n	4294 <system_pinmux_pin_set_config+0x18>
    428a:	4906      	ldr	r1, [pc, #24]	; (42a4 <system_pinmux_pin_set_config+0x28>)
    428c:	0958      	lsrs	r0, r3, #5
    428e:	468c      	mov	ip, r1
    4290:	01c0      	lsls	r0, r0, #7
    4292:	4460      	add	r0, ip
    4294:	211f      	movs	r1, #31
    4296:	400b      	ands	r3, r1
    4298:	391e      	subs	r1, #30
    429a:	4099      	lsls	r1, r3
    429c:	f7ff ff96 	bl	41cc <_system_pinmux_config>
    42a0:	bd08      	pop	{r3, pc}
    42a2:	46c0      	nop			; (mov r8, r8)
    42a4:	41004400 	.word	0x41004400

000042a8 <system_gclk_init>:
    42a8:	2308      	movs	r3, #8
    42aa:	4a06      	ldr	r2, [pc, #24]	; (42c4 <system_gclk_init+0x1c>)
    42ac:	6991      	ldr	r1, [r2, #24]
    42ae:	430b      	orrs	r3, r1
    42b0:	6193      	str	r3, [r2, #24]
    42b2:	2301      	movs	r3, #1
    42b4:	2101      	movs	r1, #1
    42b6:	4a04      	ldr	r2, [pc, #16]	; (42c8 <system_gclk_init+0x20>)
    42b8:	7013      	strb	r3, [r2, #0]
    42ba:	7813      	ldrb	r3, [r2, #0]
    42bc:	4219      	tst	r1, r3
    42be:	d1fc      	bne.n	42ba <system_gclk_init+0x12>
    42c0:	4770      	bx	lr
    42c2:	46c0      	nop			; (mov r8, r8)
    42c4:	40000400 	.word	0x40000400
    42c8:	40000c00 	.word	0x40000c00

000042cc <system_gclk_gen_set_config>:
    42cc:	b570      	push	{r4, r5, r6, lr}
    42ce:	780d      	ldrb	r5, [r1, #0]
    42d0:	784b      	ldrb	r3, [r1, #1]
    42d2:	022d      	lsls	r5, r5, #8
    42d4:	1c04      	adds	r4, r0, #0
    42d6:	4305      	orrs	r5, r0
    42d8:	2b00      	cmp	r3, #0
    42da:	d002      	beq.n	42e2 <system_gclk_gen_set_config+0x16>
    42dc:	2380      	movs	r3, #128	; 0x80
    42de:	02db      	lsls	r3, r3, #11
    42e0:	431d      	orrs	r5, r3
    42e2:	7a4b      	ldrb	r3, [r1, #9]
    42e4:	2b00      	cmp	r3, #0
    42e6:	d002      	beq.n	42ee <system_gclk_gen_set_config+0x22>
    42e8:	2380      	movs	r3, #128	; 0x80
    42ea:	031b      	lsls	r3, r3, #12
    42ec:	431d      	orrs	r5, r3
    42ee:	684e      	ldr	r6, [r1, #4]
    42f0:	2e01      	cmp	r6, #1
    42f2:	d90f      	bls.n	4314 <system_gclk_gen_set_config+0x48>
    42f4:	1e73      	subs	r3, r6, #1
    42f6:	4033      	ands	r3, r6
    42f8:	d129      	bne.n	434e <system_gclk_gen_set_config+0x82>
    42fa:	2e02      	cmp	r6, #2
    42fc:	d005      	beq.n	430a <system_gclk_gen_set_config+0x3e>
    42fe:	2202      	movs	r2, #2
    4300:	3301      	adds	r3, #1
    4302:	0052      	lsls	r2, r2, #1
    4304:	4296      	cmp	r6, r2
    4306:	d8fb      	bhi.n	4300 <system_gclk_gen_set_config+0x34>
    4308:	021b      	lsls	r3, r3, #8
    430a:	4318      	orrs	r0, r3
    430c:	2380      	movs	r3, #128	; 0x80
    430e:	1c04      	adds	r4, r0, #0
    4310:	035b      	lsls	r3, r3, #13
    4312:	431d      	orrs	r5, r3
    4314:	7a0b      	ldrb	r3, [r1, #8]
    4316:	2b00      	cmp	r3, #0
    4318:	d002      	beq.n	4320 <system_gclk_gen_set_config+0x54>
    431a:	2380      	movs	r3, #128	; 0x80
    431c:	039b      	lsls	r3, r3, #14
    431e:	431d      	orrs	r5, r3
    4320:	4a0e      	ldr	r2, [pc, #56]	; (435c <system_gclk_gen_set_config+0x90>)
    4322:	7853      	ldrb	r3, [r2, #1]
    4324:	4e0d      	ldr	r6, [pc, #52]	; (435c <system_gclk_gen_set_config+0x90>)
    4326:	b25b      	sxtb	r3, r3
    4328:	2b00      	cmp	r3, #0
    432a:	dbfa      	blt.n	4322 <system_gclk_gen_set_config+0x56>
    432c:	f000 f8f2 	bl	4514 <cpu_irq_enter_critical>
    4330:	60b4      	str	r4, [r6, #8]
    4332:	7873      	ldrb	r3, [r6, #1]
    4334:	4a09      	ldr	r2, [pc, #36]	; (435c <system_gclk_gen_set_config+0x90>)
    4336:	b25b      	sxtb	r3, r3
    4338:	2b00      	cmp	r3, #0
    433a:	dbfa      	blt.n	4332 <system_gclk_gen_set_config+0x66>
    433c:	2380      	movs	r3, #128	; 0x80
    433e:	6851      	ldr	r1, [r2, #4]
    4340:	025b      	lsls	r3, r3, #9
    4342:	400b      	ands	r3, r1
    4344:	431d      	orrs	r5, r3
    4346:	6055      	str	r5, [r2, #4]
    4348:	f000 f902 	bl	4550 <cpu_irq_leave_critical>
    434c:	bd70      	pop	{r4, r5, r6, pc}
    434e:	2380      	movs	r3, #128	; 0x80
    4350:	0234      	lsls	r4, r6, #8
    4352:	029b      	lsls	r3, r3, #10
    4354:	4304      	orrs	r4, r0
    4356:	431d      	orrs	r5, r3
    4358:	e7dc      	b.n	4314 <system_gclk_gen_set_config+0x48>
    435a:	46c0      	nop			; (mov r8, r8)
    435c:	40000c00 	.word	0x40000c00

00004360 <system_gclk_gen_enable>:
    4360:	b510      	push	{r4, lr}
    4362:	1c04      	adds	r4, r0, #0
    4364:	4a0b      	ldr	r2, [pc, #44]	; (4394 <system_gclk_gen_enable+0x34>)
    4366:	7853      	ldrb	r3, [r2, #1]
    4368:	b25b      	sxtb	r3, r3
    436a:	2b00      	cmp	r3, #0
    436c:	dbfb      	blt.n	4366 <system_gclk_gen_enable+0x6>
    436e:	f000 f8d1 	bl	4514 <cpu_irq_enter_critical>
    4372:	4b09      	ldr	r3, [pc, #36]	; (4398 <system_gclk_gen_enable+0x38>)
    4374:	4907      	ldr	r1, [pc, #28]	; (4394 <system_gclk_gen_enable+0x34>)
    4376:	701c      	strb	r4, [r3, #0]
    4378:	784b      	ldrb	r3, [r1, #1]
    437a:	4a06      	ldr	r2, [pc, #24]	; (4394 <system_gclk_gen_enable+0x34>)
    437c:	b25b      	sxtb	r3, r3
    437e:	2b00      	cmp	r3, #0
    4380:	dbfa      	blt.n	4378 <system_gclk_gen_enable+0x18>
    4382:	2180      	movs	r1, #128	; 0x80
    4384:	6853      	ldr	r3, [r2, #4]
    4386:	0249      	lsls	r1, r1, #9
    4388:	430b      	orrs	r3, r1
    438a:	6053      	str	r3, [r2, #4]
    438c:	f000 f8e0 	bl	4550 <cpu_irq_leave_critical>
    4390:	bd10      	pop	{r4, pc}
    4392:	46c0      	nop			; (mov r8, r8)
    4394:	40000c00 	.word	0x40000c00
    4398:	40000c04 	.word	0x40000c04

0000439c <system_gclk_gen_get_hz>:
    439c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    439e:	1c07      	adds	r7, r0, #0
    43a0:	4a19      	ldr	r2, [pc, #100]	; (4408 <system_gclk_gen_get_hz+0x6c>)
    43a2:	7853      	ldrb	r3, [r2, #1]
    43a4:	b25b      	sxtb	r3, r3
    43a6:	2b00      	cmp	r3, #0
    43a8:	dbfb      	blt.n	43a2 <system_gclk_gen_get_hz+0x6>
    43aa:	f000 f8b3 	bl	4514 <cpu_irq_enter_critical>
    43ae:	4b17      	ldr	r3, [pc, #92]	; (440c <system_gclk_gen_get_hz+0x70>)
    43b0:	4a15      	ldr	r2, [pc, #84]	; (4408 <system_gclk_gen_get_hz+0x6c>)
    43b2:	701f      	strb	r7, [r3, #0]
    43b4:	7853      	ldrb	r3, [r2, #1]
    43b6:	4c14      	ldr	r4, [pc, #80]	; (4408 <system_gclk_gen_get_hz+0x6c>)
    43b8:	b25b      	sxtb	r3, r3
    43ba:	2b00      	cmp	r3, #0
    43bc:	dbfa      	blt.n	43b4 <system_gclk_gen_get_hz+0x18>
    43be:	6860      	ldr	r0, [r4, #4]
    43c0:	04c0      	lsls	r0, r0, #19
    43c2:	0ec0      	lsrs	r0, r0, #27
    43c4:	f000 ff6c 	bl	52a0 <system_clock_source_get_hz>
    43c8:	1c06      	adds	r6, r0, #0
    43ca:	4b10      	ldr	r3, [pc, #64]	; (440c <system_gclk_gen_get_hz+0x70>)
    43cc:	701f      	strb	r7, [r3, #0]
    43ce:	6865      	ldr	r5, [r4, #4]
    43d0:	4b0f      	ldr	r3, [pc, #60]	; (4410 <system_gclk_gen_get_hz+0x74>)
    43d2:	02ed      	lsls	r5, r5, #11
    43d4:	0fed      	lsrs	r5, r5, #31
    43d6:	701f      	strb	r7, [r3, #0]
    43d8:	7863      	ldrb	r3, [r4, #1]
    43da:	b25b      	sxtb	r3, r3
    43dc:	2b00      	cmp	r3, #0
    43de:	dbfb      	blt.n	43d8 <system_gclk_gen_get_hz+0x3c>
    43e0:	4b09      	ldr	r3, [pc, #36]	; (4408 <system_gclk_gen_get_hz+0x6c>)
    43e2:	6899      	ldr	r1, [r3, #8]
    43e4:	0a09      	lsrs	r1, r1, #8
    43e6:	b28c      	uxth	r4, r1
    43e8:	f000 f8b2 	bl	4550 <cpu_irq_leave_critical>
    43ec:	2d00      	cmp	r5, #0
    43ee:	d003      	beq.n	43f8 <system_gclk_gen_get_hz+0x5c>
    43f0:	1c61      	adds	r1, r4, #1
    43f2:	40ce      	lsrs	r6, r1
    43f4:	1c30      	adds	r0, r6, #0
    43f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    43f8:	2c01      	cmp	r4, #1
    43fa:	d9fb      	bls.n	43f4 <system_gclk_gen_get_hz+0x58>
    43fc:	1c30      	adds	r0, r6, #0
    43fe:	1c21      	adds	r1, r4, #0
    4400:	f002 f934 	bl	666c <__aeabi_uidiv>
    4404:	1c06      	adds	r6, r0, #0
    4406:	e7f5      	b.n	43f4 <system_gclk_gen_get_hz+0x58>
    4408:	40000c00 	.word	0x40000c00
    440c:	40000c04 	.word	0x40000c04
    4410:	40000c08 	.word	0x40000c08

00004414 <system_gclk_chan_enable>:
    4414:	b510      	push	{r4, lr}
    4416:	1c04      	adds	r4, r0, #0
    4418:	f000 f87c 	bl	4514 <cpu_irq_enter_critical>
    441c:	2180      	movs	r1, #128	; 0x80
    441e:	4b05      	ldr	r3, [pc, #20]	; (4434 <system_gclk_chan_enable+0x20>)
    4420:	4a05      	ldr	r2, [pc, #20]	; (4438 <system_gclk_chan_enable+0x24>)
    4422:	701c      	strb	r4, [r3, #0]
    4424:	8853      	ldrh	r3, [r2, #2]
    4426:	01c9      	lsls	r1, r1, #7
    4428:	430b      	orrs	r3, r1
    442a:	8053      	strh	r3, [r2, #2]
    442c:	f000 f890 	bl	4550 <cpu_irq_leave_critical>
    4430:	bd10      	pop	{r4, pc}
    4432:	46c0      	nop			; (mov r8, r8)
    4434:	40000c02 	.word	0x40000c02
    4438:	40000c00 	.word	0x40000c00

0000443c <system_gclk_chan_disable>:
    443c:	b510      	push	{r4, lr}
    443e:	1c04      	adds	r4, r0, #0
    4440:	f000 f868 	bl	4514 <cpu_irq_enter_critical>
    4444:	2080      	movs	r0, #128	; 0x80
    4446:	4b0e      	ldr	r3, [pc, #56]	; (4480 <system_gclk_chan_disable+0x44>)
    4448:	4a0e      	ldr	r2, [pc, #56]	; (4484 <system_gclk_chan_disable+0x48>)
    444a:	701c      	strb	r4, [r3, #0]
    444c:	8854      	ldrh	r4, [r2, #2]
    444e:	4b0e      	ldr	r3, [pc, #56]	; (4488 <system_gclk_chan_disable+0x4c>)
    4450:	8851      	ldrh	r1, [r2, #2]
    4452:	0524      	lsls	r4, r4, #20
    4454:	400b      	ands	r3, r1
    4456:	8053      	strh	r3, [r2, #2]
    4458:	8851      	ldrh	r1, [r2, #2]
    445a:	4b0c      	ldr	r3, [pc, #48]	; (448c <system_gclk_chan_disable+0x50>)
    445c:	0f24      	lsrs	r4, r4, #28
    445e:	400b      	ands	r3, r1
    4460:	8053      	strh	r3, [r2, #2]
    4462:	01c0      	lsls	r0, r0, #7
    4464:	8853      	ldrh	r3, [r2, #2]
    4466:	4907      	ldr	r1, [pc, #28]	; (4484 <system_gclk_chan_disable+0x48>)
    4468:	4203      	tst	r3, r0
    446a:	d1fb      	bne.n	4464 <system_gclk_chan_disable+0x28>
    446c:	8848      	ldrh	r0, [r1, #2]
    446e:	4b06      	ldr	r3, [pc, #24]	; (4488 <system_gclk_chan_disable+0x4c>)
    4470:	0222      	lsls	r2, r4, #8
    4472:	4003      	ands	r3, r0
    4474:	4313      	orrs	r3, r2
    4476:	804b      	strh	r3, [r1, #2]
    4478:	f000 f86a 	bl	4550 <cpu_irq_leave_critical>
    447c:	bd10      	pop	{r4, pc}
    447e:	46c0      	nop			; (mov r8, r8)
    4480:	40000c02 	.word	0x40000c02
    4484:	40000c00 	.word	0x40000c00
    4488:	fffff0ff 	.word	0xfffff0ff
    448c:	ffffbfff 	.word	0xffffbfff

00004490 <system_gclk_chan_set_config>:
    4490:	b510      	push	{r4, lr}
    4492:	780c      	ldrb	r4, [r1, #0]
    4494:	0224      	lsls	r4, r4, #8
    4496:	4304      	orrs	r4, r0
    4498:	f7ff ffd0 	bl	443c <system_gclk_chan_disable>
    449c:	4b01      	ldr	r3, [pc, #4]	; (44a4 <system_gclk_chan_set_config+0x14>)
    449e:	b2a4      	uxth	r4, r4
    44a0:	805c      	strh	r4, [r3, #2]
    44a2:	bd10      	pop	{r4, pc}
    44a4:	40000c00 	.word	0x40000c00

000044a8 <system_gclk_chan_lock>:
    44a8:	b510      	push	{r4, lr}
    44aa:	1c04      	adds	r4, r0, #0
    44ac:	f000 f832 	bl	4514 <cpu_irq_enter_critical>
    44b0:	4b05      	ldr	r3, [pc, #20]	; (44c8 <system_gclk_chan_lock+0x20>)
    44b2:	4a06      	ldr	r2, [pc, #24]	; (44cc <system_gclk_chan_lock+0x24>)
    44b4:	701c      	strb	r4, [r3, #0]
    44b6:	2380      	movs	r3, #128	; 0x80
    44b8:	8851      	ldrh	r1, [r2, #2]
    44ba:	021b      	lsls	r3, r3, #8
    44bc:	430b      	orrs	r3, r1
    44be:	8053      	strh	r3, [r2, #2]
    44c0:	f000 f846 	bl	4550 <cpu_irq_leave_critical>
    44c4:	bd10      	pop	{r4, pc}
    44c6:	46c0      	nop			; (mov r8, r8)
    44c8:	40000c02 	.word	0x40000c02
    44cc:	40000c00 	.word	0x40000c00

000044d0 <system_gclk_chan_get_hz>:
    44d0:	b510      	push	{r4, lr}
    44d2:	1c04      	adds	r4, r0, #0
    44d4:	f000 f81e 	bl	4514 <cpu_irq_enter_critical>
    44d8:	4b05      	ldr	r3, [pc, #20]	; (44f0 <system_gclk_chan_get_hz+0x20>)
    44da:	701c      	strb	r4, [r3, #0]
    44dc:	4b05      	ldr	r3, [pc, #20]	; (44f4 <system_gclk_chan_get_hz+0x24>)
    44de:	885c      	ldrh	r4, [r3, #2]
    44e0:	f000 f836 	bl	4550 <cpu_irq_leave_critical>
    44e4:	0524      	lsls	r4, r4, #20
    44e6:	0f24      	lsrs	r4, r4, #28
    44e8:	1c20      	adds	r0, r4, #0
    44ea:	f7ff ff57 	bl	439c <system_gclk_gen_get_hz>
    44ee:	bd10      	pop	{r4, pc}
    44f0:	40000c02 	.word	0x40000c02
    44f4:	40000c00 	.word	0x40000c00

000044f8 <_system_dummy_init>:
    44f8:	4770      	bx	lr
    44fa:	46c0      	nop			; (mov r8, r8)

000044fc <system_init>:
    44fc:	b508      	push	{r3, lr}
    44fe:	f000 ff63 	bl	53c8 <system_clock_init>
    4502:	f7ff fff9 	bl	44f8 <_system_dummy_init>
    4506:	f7ff fff7 	bl	44f8 <_system_dummy_init>
    450a:	f7ff fdeb 	bl	40e4 <_system_extint_init>
    450e:	f7ff fff3 	bl	44f8 <_system_dummy_init>
    4512:	bd08      	pop	{r3, pc}

00004514 <cpu_irq_enter_critical>:
    4514:	4b0b      	ldr	r3, [pc, #44]	; (4544 <cpu_irq_enter_critical+0x30>)
    4516:	681a      	ldr	r2, [r3, #0]
    4518:	2a00      	cmp	r2, #0
    451a:	d105      	bne.n	4528 <cpu_irq_enter_critical+0x14>
    451c:	f3ef 8110 	mrs	r1, PRIMASK
    4520:	2900      	cmp	r1, #0
    4522:	d005      	beq.n	4530 <cpu_irq_enter_critical+0x1c>
    4524:	4908      	ldr	r1, [pc, #32]	; (4548 <cpu_irq_enter_critical+0x34>)
    4526:	700a      	strb	r2, [r1, #0]
    4528:	681a      	ldr	r2, [r3, #0]
    452a:	3201      	adds	r2, #1
    452c:	601a      	str	r2, [r3, #0]
    452e:	4770      	bx	lr
    4530:	b672      	cpsid	i
    4532:	f3bf 8f5f 	dmb	sy
    4536:	4a05      	ldr	r2, [pc, #20]	; (454c <cpu_irq_enter_critical+0x38>)
    4538:	7011      	strb	r1, [r2, #0]
    453a:	4a03      	ldr	r2, [pc, #12]	; (4548 <cpu_irq_enter_critical+0x34>)
    453c:	3101      	adds	r1, #1
    453e:	7011      	strb	r1, [r2, #0]
    4540:	e7f2      	b.n	4528 <cpu_irq_enter_critical+0x14>
    4542:	46c0      	nop			; (mov r8, r8)
    4544:	200046b4 	.word	0x200046b4
    4548:	200046b8 	.word	0x200046b8
    454c:	200000d0 	.word	0x200000d0

00004550 <cpu_irq_leave_critical>:
    4550:	4b08      	ldr	r3, [pc, #32]	; (4574 <cpu_irq_leave_critical+0x24>)
    4552:	681a      	ldr	r2, [r3, #0]
    4554:	3a01      	subs	r2, #1
    4556:	601a      	str	r2, [r3, #0]
    4558:	681b      	ldr	r3, [r3, #0]
    455a:	2b00      	cmp	r3, #0
    455c:	d109      	bne.n	4572 <cpu_irq_leave_critical+0x22>
    455e:	4b06      	ldr	r3, [pc, #24]	; (4578 <cpu_irq_leave_critical+0x28>)
    4560:	781b      	ldrb	r3, [r3, #0]
    4562:	2b00      	cmp	r3, #0
    4564:	d005      	beq.n	4572 <cpu_irq_leave_critical+0x22>
    4566:	2201      	movs	r2, #1
    4568:	4b04      	ldr	r3, [pc, #16]	; (457c <cpu_irq_leave_critical+0x2c>)
    456a:	701a      	strb	r2, [r3, #0]
    456c:	f3bf 8f5f 	dmb	sy
    4570:	b662      	cpsie	i
    4572:	4770      	bx	lr
    4574:	200046b4 	.word	0x200046b4
    4578:	200046b8 	.word	0x200046b8
    457c:	200000d0 	.word	0x200000d0

00004580 <usart_set_config_default>:
    4580:	b5f0      	push	{r4, r5, r6, r7, lr}
    4582:	464f      	mov	r7, r9
    4584:	4646      	mov	r6, r8
    4586:	b4c0      	push	{r6, r7}
    4588:	1c04      	adds	r4, r0, #0
    458a:	b085      	sub	sp, #20
    458c:	2800      	cmp	r0, #0
    458e:	d05c      	beq.n	464a <usart_set_config_default+0xca>
    4590:	6800      	ldr	r0, [r0, #0]
    4592:	f000 fe6d 	bl	5270 <_sercom_get_sercom_inst_index>
    4596:	250e      	movs	r5, #14
    4598:	2300      	movs	r3, #0
    459a:	3014      	adds	r0, #20
    459c:	446d      	add	r5, sp
    459e:	b2c0      	uxtb	r0, r0
    45a0:	802b      	strh	r3, [r5, #0]
    45a2:	69a7      	ldr	r7, [r4, #24]
    45a4:	6966      	ldr	r6, [r4, #20]
    45a6:	f7ff ff93 	bl	44d0 <system_gclk_chan_get_hz>
    45aa:	2310      	movs	r3, #16
    45ac:	1c01      	adds	r1, r0, #0
    45ae:	9300      	str	r3, [sp, #0]
    45b0:	1c38      	adds	r0, r7, #0
    45b2:	1c2a      	adds	r2, r5, #0
    45b4:	2300      	movs	r3, #0
    45b6:	f000 fd73 	bl	50a0 <_sercom_get_async_baud_val>
    45ba:	6822      	ldr	r2, [r4, #0]
    45bc:	69d3      	ldr	r3, [r2, #28]
    45be:	2b00      	cmp	r3, #0
    45c0:	d1fc      	bne.n	45bc <usart_set_config_default+0x3c>
    45c2:	882b      	ldrh	r3, [r5, #0]
    45c4:	8193      	strh	r3, [r2, #12]
    45c6:	68e2      	ldr	r2, [r4, #12]
    45c8:	6923      	ldr	r3, [r4, #16]
    45ca:	4313      	orrs	r3, r2
    45cc:	221d      	movs	r2, #29
    45ce:	56a2      	ldrsb	r2, [r4, r2]
    45d0:	3201      	adds	r2, #1
    45d2:	d028      	beq.n	4626 <usart_set_config_default+0xa6>
    45d4:	25c0      	movs	r5, #192	; 0xc0
    45d6:	02ad      	lsls	r5, r5, #10
    45d8:	431d      	orrs	r5, r3
    45da:	231c      	movs	r3, #28
    45dc:	56e3      	ldrsb	r3, [r4, r3]
    45de:	3301      	adds	r3, #1
    45e0:	d019      	beq.n	4616 <usart_set_config_default+0x96>
    45e2:	68a2      	ldr	r2, [r4, #8]
    45e4:	2aff      	cmp	r2, #255	; 0xff
    45e6:	d01b      	beq.n	4620 <usart_set_config_default+0xa0>
    45e8:	4b29      	ldr	r3, [pc, #164]	; (4690 <usart_set_config_default+0x110>)
    45ea:	4315      	orrs	r5, r2
    45ec:	431e      	orrs	r6, r3
    45ee:	2c00      	cmp	r4, #0
    45f0:	d025      	beq.n	463e <usart_set_config_default+0xbe>
    45f2:	6822      	ldr	r2, [r4, #0]
    45f4:	69d3      	ldr	r3, [r2, #28]
    45f6:	2b00      	cmp	r3, #0
    45f8:	d1fc      	bne.n	45f4 <usart_set_config_default+0x74>
    45fa:	6055      	str	r5, [r2, #4]
    45fc:	2c00      	cmp	r4, #0
    45fe:	d018      	beq.n	4632 <usart_set_config_default+0xb2>
    4600:	6822      	ldr	r2, [r4, #0]
    4602:	69d3      	ldr	r3, [r2, #28]
    4604:	2b00      	cmp	r3, #0
    4606:	d1fc      	bne.n	4602 <usart_set_config_default+0x82>
    4608:	2000      	movs	r0, #0
    460a:	6016      	str	r6, [r2, #0]
    460c:	b005      	add	sp, #20
    460e:	bc0c      	pop	{r2, r3}
    4610:	4690      	mov	r8, r2
    4612:	4699      	mov	r9, r3
    4614:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4616:	4b1f      	ldr	r3, [pc, #124]	; (4694 <usart_set_config_default+0x114>)
    4618:	68a2      	ldr	r2, [r4, #8]
    461a:	401d      	ands	r5, r3
    461c:	2aff      	cmp	r2, #255	; 0xff
    461e:	d1e3      	bne.n	45e8 <usart_set_config_default+0x68>
    4620:	4b1d      	ldr	r3, [pc, #116]	; (4698 <usart_set_config_default+0x118>)
    4622:	431e      	orrs	r6, r3
    4624:	e7e3      	b.n	45ee <usart_set_config_default+0x6e>
    4626:	4d1d      	ldr	r5, [pc, #116]	; (469c <usart_set_config_default+0x11c>)
    4628:	401d      	ands	r5, r3
    462a:	2380      	movs	r3, #128	; 0x80
    462c:	025b      	lsls	r3, r3, #9
    462e:	431d      	orrs	r5, r3
    4630:	e7d3      	b.n	45da <usart_set_config_default+0x5a>
    4632:	481b      	ldr	r0, [pc, #108]	; (46a0 <usart_set_config_default+0x120>)
    4634:	491b      	ldr	r1, [pc, #108]	; (46a4 <usart_set_config_default+0x124>)
    4636:	223f      	movs	r2, #63	; 0x3f
    4638:	f000 fc9a 	bl	4f70 <mbed_assert_internal>
    463c:	e7e0      	b.n	4600 <usart_set_config_default+0x80>
    463e:	4818      	ldr	r0, [pc, #96]	; (46a0 <usart_set_config_default+0x120>)
    4640:	4918      	ldr	r1, [pc, #96]	; (46a4 <usart_set_config_default+0x124>)
    4642:	223f      	movs	r2, #63	; 0x3f
    4644:	f000 fc94 	bl	4f70 <mbed_assert_internal>
    4648:	e7d3      	b.n	45f2 <usart_set_config_default+0x72>
    464a:	4b15      	ldr	r3, [pc, #84]	; (46a0 <usart_set_config_default+0x120>)
    464c:	4f15      	ldr	r7, [pc, #84]	; (46a4 <usart_set_config_default+0x124>)
    464e:	1c18      	adds	r0, r3, #0
    4650:	1c39      	adds	r1, r7, #0
    4652:	229c      	movs	r2, #156	; 0x9c
    4654:	4698      	mov	r8, r3
    4656:	f000 fc8b 	bl	4f70 <mbed_assert_internal>
    465a:	6820      	ldr	r0, [r4, #0]
    465c:	f000 fe08 	bl	5270 <_sercom_get_sercom_inst_index>
    4660:	250e      	movs	r5, #14
    4662:	69a3      	ldr	r3, [r4, #24]
    4664:	3014      	adds	r0, #20
    4666:	446d      	add	r5, sp
    4668:	b2c0      	uxtb	r0, r0
    466a:	4699      	mov	r9, r3
    466c:	802c      	strh	r4, [r5, #0]
    466e:	6966      	ldr	r6, [r4, #20]
    4670:	f7ff ff2e 	bl	44d0 <system_gclk_chan_get_hz>
    4674:	2310      	movs	r3, #16
    4676:	1c01      	adds	r1, r0, #0
    4678:	9300      	str	r3, [sp, #0]
    467a:	1c2a      	adds	r2, r5, #0
    467c:	4648      	mov	r0, r9
    467e:	2300      	movs	r3, #0
    4680:	f000 fd0e 	bl	50a0 <_sercom_get_async_baud_val>
    4684:	4640      	mov	r0, r8
    4686:	1c39      	adds	r1, r7, #0
    4688:	223f      	movs	r2, #63	; 0x3f
    468a:	f000 fc71 	bl	4f70 <mbed_assert_internal>
    468e:	e794      	b.n	45ba <usart_set_config_default+0x3a>
    4690:	41000004 	.word	0x41000004
    4694:	fffeffff 	.word	0xfffeffff
    4698:	40000004 	.word	0x40000004
    469c:	fffdffff 	.word	0xfffdffff
    46a0:	0000ef30 	.word	0x0000ef30
    46a4:	0000ef34 	.word	0x0000ef34

000046a8 <serial_find_mux_settings>:
    46a8:	b570      	push	{r4, r5, r6, lr}
    46aa:	1c05      	adds	r5, r0, #0
    46ac:	b086      	sub	sp, #24
    46ae:	2800      	cmp	r0, #0
    46b0:	d03c      	beq.n	472c <serial_find_mux_settings+0x84>
    46b2:	201c      	movs	r0, #28
    46b4:	211d      	movs	r1, #29
    46b6:	2300      	movs	r3, #0
    46b8:	5628      	ldrsb	r0, [r5, r0]
    46ba:	5669      	ldrsb	r1, [r5, r1]
    46bc:	9302      	str	r3, [sp, #8]
    46be:	9303      	str	r3, [sp, #12]
    46c0:	9304      	str	r3, [sp, #16]
    46c2:	9305      	str	r3, [sp, #20]
    46c4:	f001 f82a 	bl	571c <pinmap_merge_sercom>
    46c8:	2400      	movs	r4, #0
    46ca:	1c06      	adds	r6, r0, #0
    46cc:	201c      	movs	r0, #28
    46ce:	192b      	adds	r3, r5, r4
    46d0:	5618      	ldrsb	r0, [r3, r0]
    46d2:	1c31      	adds	r1, r6, #0
    46d4:	f001 f8b2 	bl	583c <pinmap_pad_sercom>
    46d8:	00a3      	lsls	r3, r4, #2
    46da:	aa02      	add	r2, sp, #8
    46dc:	3401      	adds	r4, #1
    46de:	50d0      	str	r0, [r2, r3]
    46e0:	2c04      	cmp	r4, #4
    46e2:	d1f3      	bne.n	46cc <serial_find_mux_settings+0x24>
    46e4:	9b03      	ldr	r3, [sp, #12]
    46e6:	2000      	movs	r0, #0
    46e8:	9301      	str	r3, [sp, #4]
    46ea:	3b01      	subs	r3, #1
    46ec:	2b02      	cmp	r3, #2
    46ee:	d802      	bhi.n	46f6 <serial_find_mux_settings+0x4e>
    46f0:	4a11      	ldr	r2, [pc, #68]	; (4738 <serial_find_mux_settings+0x90>)
    46f2:	009b      	lsls	r3, r3, #2
    46f4:	5898      	ldr	r0, [r3, r2]
    46f6:	221e      	movs	r2, #30
    46f8:	5eab      	ldrsh	r3, [r5, r2]
    46fa:	3301      	adds	r3, #1
    46fc:	d008      	beq.n	4710 <serial_find_mux_settings+0x68>
    46fe:	9b02      	ldr	r3, [sp, #8]
    4700:	2b00      	cmp	r3, #0
    4702:	d103      	bne.n	470c <serial_find_mux_settings+0x64>
    4704:	9b04      	ldr	r3, [sp, #16]
    4706:	9301      	str	r3, [sp, #4]
    4708:	2b02      	cmp	r3, #2
    470a:	d008      	beq.n	471e <serial_find_mux_settings+0x76>
    470c:	b006      	add	sp, #24
    470e:	bd70      	pop	{r4, r5, r6, pc}
    4710:	9b02      	ldr	r3, [sp, #8]
    4712:	2b02      	cmp	r3, #2
    4714:	d1fa      	bne.n	470c <serial_find_mux_settings+0x64>
    4716:	2380      	movs	r3, #128	; 0x80
    4718:	025b      	lsls	r3, r3, #9
    471a:	4318      	orrs	r0, r3
    471c:	e7f6      	b.n	470c <serial_find_mux_settings+0x64>
    471e:	9b05      	ldr	r3, [sp, #20]
    4720:	2b03      	cmp	r3, #3
    4722:	d1f3      	bne.n	470c <serial_find_mux_settings+0x64>
    4724:	2380      	movs	r3, #128	; 0x80
    4726:	029b      	lsls	r3, r3, #10
    4728:	4318      	orrs	r0, r3
    472a:	e7ef      	b.n	470c <serial_find_mux_settings+0x64>
    472c:	4803      	ldr	r0, [pc, #12]	; (473c <serial_find_mux_settings+0x94>)
    472e:	4904      	ldr	r1, [pc, #16]	; (4740 <serial_find_mux_settings+0x98>)
    4730:	2271      	movs	r2, #113	; 0x71
    4732:	f000 fc1d 	bl	4f70 <mbed_assert_internal>
    4736:	e7bc      	b.n	46b2 <serial_find_mux_settings+0xa>
    4738:	0000ef24 	.word	0x0000ef24
    473c:	0000ef30 	.word	0x0000ef30
    4740:	0000ef34 	.word	0x0000ef34

00004744 <get_default_serial_values>:
    4744:	b510      	push	{r4, lr}
    4746:	1e04      	subs	r4, r0, #0
    4748:	d00b      	beq.n	4762 <get_default_serial_values+0x1e>
    474a:	23ff      	movs	r3, #255	; 0xff
    474c:	60a3      	str	r3, [r4, #8]
    474e:	2300      	movs	r3, #0
    4750:	60e3      	str	r3, [r4, #12]
    4752:	6123      	str	r3, [r4, #16]
    4754:	2396      	movs	r3, #150	; 0x96
    4756:	019b      	lsls	r3, r3, #6
    4758:	61a3      	str	r3, [r4, #24]
    475a:	2388      	movs	r3, #136	; 0x88
    475c:	035b      	lsls	r3, r3, #13
    475e:	6163      	str	r3, [r4, #20]
    4760:	bd10      	pop	{r4, pc}
    4762:	4803      	ldr	r0, [pc, #12]	; (4770 <get_default_serial_values+0x2c>)
    4764:	4903      	ldr	r1, [pc, #12]	; (4774 <get_default_serial_values+0x30>)
    4766:	22e1      	movs	r2, #225	; 0xe1
    4768:	f000 fc02 	bl	4f70 <mbed_assert_internal>
    476c:	e7ed      	b.n	474a <get_default_serial_values+0x6>
    476e:	46c0      	nop			; (mov r8, r8)
    4770:	0000ef30 	.word	0x0000ef30
    4774:	0000ef34 	.word	0x0000ef34

00004778 <serial_init>:
    4778:	b5f0      	push	{r4, r5, r6, r7, lr}
    477a:	464e      	mov	r6, r9
    477c:	4645      	mov	r5, r8
    477e:	4657      	mov	r7, sl
    4780:	b4e0      	push	{r5, r6, r7}
    4782:	1c04      	adds	r4, r0, #0
    4784:	b084      	sub	sp, #16
    4786:	1c0e      	adds	r6, r1, #0
    4788:	1c15      	adds	r5, r2, #0
    478a:	2800      	cmp	r0, #0
    478c:	d100      	bne.n	4790 <serial_init+0x18>
    478e:	e09d      	b.n	48cc <serial_init+0x154>
    4790:	4f60      	ldr	r7, [pc, #384]	; (4914 <serial_init+0x19c>)
    4792:	783b      	ldrb	r3, [r7, #0]
    4794:	2b00      	cmp	r3, #0
    4796:	d100      	bne.n	479a <serial_init+0x22>
    4798:	e083      	b.n	48a2 <serial_init+0x12a>
    479a:	1c20      	adds	r0, r4, #0
    479c:	f7ff ffd2 	bl	4744 <get_default_serial_values>
    47a0:	23ff      	movs	r3, #255	; 0xff
    47a2:	7726      	strb	r6, [r4, #28]
    47a4:	77a3      	strb	r3, [r4, #30]
    47a6:	77e3      	strb	r3, [r4, #31]
    47a8:	7765      	strb	r5, [r4, #29]
    47aa:	1c20      	adds	r0, r4, #0
    47ac:	f7ff ff7c 	bl	46a8 <serial_find_mux_settings>
    47b0:	1c29      	adds	r1, r5, #0
    47b2:	1c07      	adds	r7, r0, #0
    47b4:	1c30      	adds	r0, r6, #0
    47b6:	f000 ffb1 	bl	571c <pinmap_merge_sercom>
    47ba:	1c43      	adds	r3, r0, #1
    47bc:	d017      	beq.n	47ee <serial_init+0x76>
    47be:	250f      	movs	r5, #15
    47c0:	4005      	ands	r5, r0
    47c2:	2001      	movs	r0, #1
    47c4:	1c29      	adds	r1, r5, #0
    47c6:	4240      	negs	r0, r0
    47c8:	f001 f85a 	bl	5880 <pinmap_peripheral_sercom>
    47cc:	1c06      	adds	r6, r0, #0
    47ce:	1c02      	adds	r2, r0, #0
    47d0:	6020      	str	r0, [r4, #0]
    47d2:	2c00      	cmp	r4, #0
    47d4:	d06a      	beq.n	48ac <serial_init+0x134>
    47d6:	69d3      	ldr	r3, [r2, #28]
    47d8:	2b00      	cmp	r3, #0
    47da:	d1fc      	bne.n	47d6 <serial_init+0x5e>
    47dc:	2102      	movs	r1, #2
    47de:	6813      	ldr	r3, [r2, #0]
    47e0:	438b      	bics	r3, r1
    47e2:	6013      	str	r3, [r2, #0]
    47e4:	2201      	movs	r2, #1
    47e6:	6823      	ldr	r3, [r4, #0]
    47e8:	6818      	ldr	r0, [r3, #0]
    47ea:	4202      	tst	r2, r0
    47ec:	d005      	beq.n	47fa <serial_init+0x82>
    47ee:	b004      	add	sp, #16
    47f0:	bc1c      	pop	{r2, r3, r4}
    47f2:	4690      	mov	r8, r2
    47f4:	4699      	mov	r9, r3
    47f6:	46a2      	mov	sl, r4
    47f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    47fa:	681b      	ldr	r3, [r3, #0]
    47fc:	4019      	ands	r1, r3
    47fe:	4688      	mov	r8, r1
    4800:	d1f5      	bne.n	47ee <serial_init+0x76>
    4802:	1ca8      	adds	r0, r5, #2
    4804:	4082      	lsls	r2, r0
    4806:	4944      	ldr	r1, [pc, #272]	; (4918 <serial_init+0x1a0>)
    4808:	6a0b      	ldr	r3, [r1, #32]
    480a:	431a      	orrs	r2, r3
    480c:	620a      	str	r2, [r1, #32]
    480e:	4642      	mov	r2, r8
    4810:	ab02      	add	r3, sp, #8
    4812:	701a      	strb	r2, [r3, #0]
    4814:	2314      	movs	r3, #20
    4816:	4699      	mov	r9, r3
    4818:	44a9      	add	r9, r5
    481a:	a902      	add	r1, sp, #8
    481c:	4648      	mov	r0, r9
    481e:	f7ff fe37 	bl	4490 <system_gclk_chan_set_config>
    4822:	4648      	mov	r0, r9
    4824:	f7ff fdf6 	bl	4414 <system_gclk_chan_enable>
    4828:	2100      	movs	r1, #0
    482a:	2000      	movs	r0, #0
    482c:	f000 fd00 	bl	5230 <sercom_set_gclk_generator>
    4830:	6167      	str	r7, [r4, #20]
    4832:	1c20      	adds	r0, r4, #0
    4834:	f7ff fea4 	bl	4580 <usart_set_config_default>
    4838:	4642      	mov	r2, r8
    483a:	ab02      	add	r3, sp, #8
    483c:	715a      	strb	r2, [r3, #5]
    483e:	719a      	strb	r2, [r3, #6]
    4840:	71da      	strb	r2, [r3, #7]
    4842:	2320      	movs	r3, #32
    4844:	1c27      	adds	r7, r4, #0
    4846:	469a      	mov	sl, r3
    4848:	371c      	adds	r7, #28
    484a:	44a2      	add	sl, r4
    484c:	2300      	movs	r3, #0
    484e:	56fb      	ldrsb	r3, [r7, r3]
    4850:	4699      	mov	r9, r3
    4852:	3301      	adds	r3, #1
    4854:	d00f      	beq.n	4876 <serial_init+0xfe>
    4856:	4648      	mov	r0, r9
    4858:	1c29      	adds	r1, r5, #0
    485a:	f000 ffcb 	bl	57f4 <pinmap_function_sercom>
    485e:	ab02      	add	r3, sp, #8
    4860:	b2c0      	uxtb	r0, r0
    4862:	7118      	strb	r0, [r3, #4]
    4864:	28ff      	cmp	r0, #255	; 0xff
    4866:	d006      	beq.n	4876 <serial_init+0xfe>
    4868:	466a      	mov	r2, sp
    486a:	464b      	mov	r3, r9
    486c:	71d3      	strb	r3, [r2, #7]
    486e:	79d0      	ldrb	r0, [r2, #7]
    4870:	a903      	add	r1, sp, #12
    4872:	f7ff fd03 	bl	427c <system_pinmux_pin_set_config>
    4876:	3701      	adds	r7, #1
    4878:	4557      	cmp	r7, sl
    487a:	d1e7      	bne.n	484c <serial_init+0xd4>
    487c:	4b27      	ldr	r3, [pc, #156]	; (491c <serial_init+0x1a4>)
    487e:	429e      	cmp	r6, r3
    4880:	d030      	beq.n	48e4 <serial_init+0x16c>
    4882:	2c00      	cmp	r4, #0
    4884:	d028      	beq.n	48d8 <serial_init+0x160>
    4886:	6823      	ldr	r3, [r4, #0]
    4888:	69da      	ldr	r2, [r3, #28]
    488a:	2a00      	cmp	r2, #0
    488c:	d1fc      	bne.n	4888 <serial_init+0x110>
    488e:	2c00      	cmp	r4, #0
    4890:	d031      	beq.n	48f6 <serial_init+0x17e>
    4892:	69da      	ldr	r2, [r3, #28]
    4894:	2a00      	cmp	r2, #0
    4896:	d1fc      	bne.n	4892 <serial_init+0x11a>
    4898:	6819      	ldr	r1, [r3, #0]
    489a:	3202      	adds	r2, #2
    489c:	430a      	orrs	r2, r1
    489e:	601a      	str	r2, [r3, #0]
    48a0:	e7a5      	b.n	47ee <serial_init+0x76>
    48a2:	f7ff fe2b 	bl	44fc <system_init>
    48a6:	2301      	movs	r3, #1
    48a8:	703b      	strb	r3, [r7, #0]
    48aa:	e776      	b.n	479a <serial_init+0x22>
    48ac:	4b1c      	ldr	r3, [pc, #112]	; (4920 <serial_init+0x1a8>)
    48ae:	2256      	movs	r2, #86	; 0x56
    48b0:	4699      	mov	r9, r3
    48b2:	4b1c      	ldr	r3, [pc, #112]	; (4924 <serial_init+0x1ac>)
    48b4:	4648      	mov	r0, r9
    48b6:	4698      	mov	r8, r3
    48b8:	1c19      	adds	r1, r3, #0
    48ba:	f000 fb59 	bl	4f70 <mbed_assert_internal>
    48be:	223f      	movs	r2, #63	; 0x3f
    48c0:	4648      	mov	r0, r9
    48c2:	4641      	mov	r1, r8
    48c4:	f000 fb54 	bl	4f70 <mbed_assert_internal>
    48c8:	6822      	ldr	r2, [r4, #0]
    48ca:	e784      	b.n	47d6 <serial_init+0x5e>
    48cc:	4814      	ldr	r0, [pc, #80]	; (4920 <serial_init+0x1a8>)
    48ce:	4915      	ldr	r1, [pc, #84]	; (4924 <serial_init+0x1ac>)
    48d0:	22ed      	movs	r2, #237	; 0xed
    48d2:	f000 fb4d 	bl	4f70 <mbed_assert_internal>
    48d6:	e75b      	b.n	4790 <serial_init+0x18>
    48d8:	4811      	ldr	r0, [pc, #68]	; (4920 <serial_init+0x1a8>)
    48da:	4912      	ldr	r1, [pc, #72]	; (4924 <serial_init+0x1ac>)
    48dc:	223f      	movs	r2, #63	; 0x3f
    48de:	f000 fb47 	bl	4f70 <mbed_assert_internal>
    48e2:	e7d0      	b.n	4886 <serial_init+0x10e>
    48e4:	2201      	movs	r2, #1
    48e6:	4b10      	ldr	r3, [pc, #64]	; (4928 <serial_init+0x1b0>)
    48e8:	1c21      	adds	r1, r4, #0
    48ea:	601a      	str	r2, [r3, #0]
    48ec:	480f      	ldr	r0, [pc, #60]	; (492c <serial_init+0x1b4>)
    48ee:	3247      	adds	r2, #71	; 0x47
    48f0:	f005 facd 	bl	9e8e <memcpy>
    48f4:	e7c5      	b.n	4882 <serial_init+0x10a>
    48f6:	4e0a      	ldr	r6, [pc, #40]	; (4920 <serial_init+0x1a8>)
    48f8:	4d0a      	ldr	r5, [pc, #40]	; (4924 <serial_init+0x1ac>)
    48fa:	1c30      	adds	r0, r6, #0
    48fc:	1c29      	adds	r1, r5, #0
    48fe:	324a      	adds	r2, #74	; 0x4a
    4900:	f000 fb36 	bl	4f70 <mbed_assert_internal>
    4904:	1c30      	adds	r0, r6, #0
    4906:	1c29      	adds	r1, r5, #0
    4908:	223f      	movs	r2, #63	; 0x3f
    490a:	f000 fb31 	bl	4f70 <mbed_assert_internal>
    490e:	6823      	ldr	r3, [r4, #0]
    4910:	e7bf      	b.n	4892 <serial_init+0x11a>
    4912:	46c0      	nop			; (mov r8, r8)
    4914:	200045b0 	.word	0x200045b0
    4918:	40000400 	.word	0x40000400
    491c:	42000800 	.word	0x42000800
    4920:	0000ef30 	.word	0x0000ef30
    4924:	0000ef34 	.word	0x0000ef34
    4928:	200046bc 	.word	0x200046bc
    492c:	20004758 	.word	0x20004758

00004930 <serial_irq_handler>:
    4930:	b5f0      	push	{r4, r5, r6, r7, lr}
    4932:	4647      	mov	r7, r8
    4934:	1c04      	adds	r4, r0, #0
    4936:	b480      	push	{r7}
    4938:	1c0e      	adds	r6, r1, #0
    493a:	1c15      	adds	r5, r2, #0
    493c:	2800      	cmp	r0, #0
    493e:	d020      	beq.n	4982 <serial_irq_handler+0x52>
    4940:	4b18      	ldr	r3, [pc, #96]	; (49a4 <serial_irq_handler+0x74>)
    4942:	6019      	str	r1, [r3, #0]
    4944:	6822      	ldr	r2, [r4, #0]
    4946:	4b18      	ldr	r3, [pc, #96]	; (49a8 <serial_irq_handler+0x78>)
    4948:	429a      	cmp	r2, r3
    494a:	d018      	beq.n	497e <serial_irq_handler+0x4e>
    494c:	dc0d      	bgt.n	496a <serial_irq_handler+0x3a>
    494e:	4917      	ldr	r1, [pc, #92]	; (49ac <serial_irq_handler+0x7c>)
    4950:	2301      	movs	r3, #1
    4952:	428a      	cmp	r2, r1
    4954:	d003      	beq.n	495e <serial_irq_handler+0x2e>
    4956:	4916      	ldr	r1, [pc, #88]	; (49b0 <serial_irq_handler+0x80>)
    4958:	3301      	adds	r3, #1
    495a:	428a      	cmp	r2, r1
    495c:	d10d      	bne.n	497a <serial_irq_handler+0x4a>
    495e:	4a15      	ldr	r2, [pc, #84]	; (49b4 <serial_irq_handler+0x84>)
    4960:	009b      	lsls	r3, r3, #2
    4962:	509d      	str	r5, [r3, r2]
    4964:	bc04      	pop	{r2}
    4966:	4690      	mov	r8, r2
    4968:	bdf0      	pop	{r4, r5, r6, r7, pc}
    496a:	4913      	ldr	r1, [pc, #76]	; (49b8 <serial_irq_handler+0x88>)
    496c:	2304      	movs	r3, #4
    496e:	428a      	cmp	r2, r1
    4970:	d0f5      	beq.n	495e <serial_irq_handler+0x2e>
    4972:	4912      	ldr	r1, [pc, #72]	; (49bc <serial_irq_handler+0x8c>)
    4974:	3301      	adds	r3, #1
    4976:	428a      	cmp	r2, r1
    4978:	d0f1      	beq.n	495e <serial_irq_handler+0x2e>
    497a:	2300      	movs	r3, #0
    497c:	e7ef      	b.n	495e <serial_irq_handler+0x2e>
    497e:	2303      	movs	r3, #3
    4980:	e7ed      	b.n	495e <serial_irq_handler+0x2e>
    4982:	4b0f      	ldr	r3, [pc, #60]	; (49c0 <serial_irq_handler+0x90>)
    4984:	22b3      	movs	r2, #179	; 0xb3
    4986:	4698      	mov	r8, r3
    4988:	4f0e      	ldr	r7, [pc, #56]	; (49c4 <serial_irq_handler+0x94>)
    498a:	1c18      	adds	r0, r3, #0
    498c:	1c39      	adds	r1, r7, #0
    498e:	0092      	lsls	r2, r2, #2
    4990:	f000 faee 	bl	4f70 <mbed_assert_internal>
    4994:	4b03      	ldr	r3, [pc, #12]	; (49a4 <serial_irq_handler+0x74>)
    4996:	4640      	mov	r0, r8
    4998:	1c39      	adds	r1, r7, #0
    499a:	4a0b      	ldr	r2, [pc, #44]	; (49c8 <serial_irq_handler+0x98>)
    499c:	601e      	str	r6, [r3, #0]
    499e:	f000 fae7 	bl	4f70 <mbed_assert_internal>
    49a2:	e7cf      	b.n	4944 <serial_irq_handler+0x14>
    49a4:	200046d8 	.word	0x200046d8
    49a8:	42001400 	.word	0x42001400
    49ac:	42000c00 	.word	0x42000c00
    49b0:	42001000 	.word	0x42001000
    49b4:	200046c0 	.word	0x200046c0
    49b8:	42001800 	.word	0x42001800
    49bc:	42001c00 	.word	0x42001c00
    49c0:	0000ef30 	.word	0x0000ef30
    49c4:	0000ef34 	.word	0x0000ef34
    49c8:	00000266 	.word	0x00000266

000049cc <serial_readable>:
    49cc:	b510      	push	{r4, lr}
    49ce:	1e04      	subs	r4, r0, #0
    49d0:	d004      	beq.n	49dc <serial_readable+0x10>
    49d2:	6823      	ldr	r3, [r4, #0]
    49d4:	7e18      	ldrb	r0, [r3, #24]
    49d6:	0740      	lsls	r0, r0, #29
    49d8:	0fc0      	lsrs	r0, r0, #31
    49da:	bd10      	pop	{r4, pc}
    49dc:	4802      	ldr	r0, [pc, #8]	; (49e8 <serial_readable+0x1c>)
    49de:	4903      	ldr	r1, [pc, #12]	; (49ec <serial_readable+0x20>)
    49e0:	4a03      	ldr	r2, [pc, #12]	; (49f0 <serial_readable+0x24>)
    49e2:	f000 fac5 	bl	4f70 <mbed_assert_internal>
    49e6:	e7f4      	b.n	49d2 <serial_readable+0x6>
    49e8:	0000ef30 	.word	0x0000ef30
    49ec:	0000ef34 	.word	0x0000ef34
    49f0:	00000323 	.word	0x00000323

000049f4 <serial_getc>:
    49f4:	b510      	push	{r4, lr}
    49f6:	1e04      	subs	r4, r0, #0
    49f8:	d008      	beq.n	4a0c <serial_getc+0x18>
    49fa:	1c20      	adds	r0, r4, #0
    49fc:	f7ff ffe6 	bl	49cc <serial_readable>
    4a00:	2800      	cmp	r0, #0
    4a02:	d0fa      	beq.n	49fa <serial_getc+0x6>
    4a04:	6823      	ldr	r3, [r4, #0]
    4a06:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    4a08:	b280      	uxth	r0, r0
    4a0a:	bd10      	pop	{r4, pc}
    4a0c:	4802      	ldr	r0, [pc, #8]	; (4a18 <serial_getc+0x24>)
    4a0e:	4903      	ldr	r1, [pc, #12]	; (4a1c <serial_getc+0x28>)
    4a10:	4a03      	ldr	r2, [pc, #12]	; (4a20 <serial_getc+0x2c>)
    4a12:	f000 faad 	bl	4f70 <mbed_assert_internal>
    4a16:	e7f0      	b.n	49fa <serial_getc+0x6>
    4a18:	0000ef30 	.word	0x0000ef30
    4a1c:	0000ef34 	.word	0x0000ef34
    4a20:	00000311 	.word	0x00000311

00004a24 <serial_writable>:
    4a24:	b510      	push	{r4, lr}
    4a26:	1e04      	subs	r4, r0, #0
    4a28:	d004      	beq.n	4a34 <serial_writable+0x10>
    4a2a:	2001      	movs	r0, #1
    4a2c:	6823      	ldr	r3, [r4, #0]
    4a2e:	7e1b      	ldrb	r3, [r3, #24]
    4a30:	4018      	ands	r0, r3
    4a32:	bd10      	pop	{r4, pc}
    4a34:	22cc      	movs	r2, #204	; 0xcc
    4a36:	4803      	ldr	r0, [pc, #12]	; (4a44 <serial_writable+0x20>)
    4a38:	4903      	ldr	r1, [pc, #12]	; (4a48 <serial_writable+0x24>)
    4a3a:	0092      	lsls	r2, r2, #2
    4a3c:	f000 fa98 	bl	4f70 <mbed_assert_internal>
    4a40:	e7f3      	b.n	4a2a <serial_writable+0x6>
    4a42:	46c0      	nop			; (mov r8, r8)
    4a44:	0000ef30 	.word	0x0000ef30
    4a48:	0000ef34 	.word	0x0000ef34

00004a4c <serial_putc>:
    4a4c:	b538      	push	{r3, r4, r5, lr}
    4a4e:	1c04      	adds	r4, r0, #0
    4a50:	1c0d      	adds	r5, r1, #0
    4a52:	2800      	cmp	r0, #0
    4a54:	d00e      	beq.n	4a74 <serial_putc+0x28>
    4a56:	05ed      	lsls	r5, r5, #23
    4a58:	0ded      	lsrs	r5, r5, #23
    4a5a:	1c20      	adds	r0, r4, #0
    4a5c:	f7ff ffe2 	bl	4a24 <serial_writable>
    4a60:	2800      	cmp	r0, #0
    4a62:	d0fa      	beq.n	4a5a <serial_putc+0xe>
    4a64:	2202      	movs	r2, #2
    4a66:	6823      	ldr	r3, [r4, #0]
    4a68:	851d      	strh	r5, [r3, #40]	; 0x28
    4a6a:	6821      	ldr	r1, [r4, #0]
    4a6c:	7e0b      	ldrb	r3, [r1, #24]
    4a6e:	421a      	tst	r2, r3
    4a70:	d0fc      	beq.n	4a6c <serial_putc+0x20>
    4a72:	bd38      	pop	{r3, r4, r5, pc}
    4a74:	4802      	ldr	r0, [pc, #8]	; (4a80 <serial_putc+0x34>)
    4a76:	4903      	ldr	r1, [pc, #12]	; (4a84 <serial_putc+0x38>)
    4a78:	4a03      	ldr	r2, [pc, #12]	; (4a88 <serial_putc+0x3c>)
    4a7a:	f000 fa79 	bl	4f70 <mbed_assert_internal>
    4a7e:	e7ea      	b.n	4a56 <serial_putc+0xa>
    4a80:	0000ef30 	.word	0x0000ef30
    4a84:	0000ef34 	.word	0x0000ef34
    4a88:	00000319 	.word	0x00000319

00004a8c <_ZN4mbed8FilePathC1EPKc>:
    4a8c:	b538      	push	{r3, r4, r5, lr}
    4a8e:	2300      	movs	r3, #0
    4a90:	6003      	str	r3, [r0, #0]
    4a92:	6043      	str	r3, [r0, #4]
    4a94:	780b      	ldrb	r3, [r1, #0]
    4a96:	1c04      	adds	r4, r0, #0
    4a98:	2b2f      	cmp	r3, #47	; 0x2f
    4a9a:	d001      	beq.n	4aa0 <_ZN4mbed8FilePathC1EPKc+0x14>
    4a9c:	1c20      	adds	r0, r4, #0
    4a9e:	bd38      	pop	{r3, r4, r5, pc}
    4aa0:	784b      	ldrb	r3, [r1, #1]
    4aa2:	2b00      	cmp	r3, #0
    4aa4:	d0fa      	beq.n	4a9c <_ZN4mbed8FilePathC1EPKc+0x10>
    4aa6:	1c48      	adds	r0, r1, #1
    4aa8:	6020      	str	r0, [r4, #0]
    4aaa:	784b      	ldrb	r3, [r1, #1]
    4aac:	2b2f      	cmp	r3, #47	; 0x2f
    4aae:	d014      	beq.n	4ada <_ZN4mbed8FilePathC1EPKc+0x4e>
    4ab0:	2b00      	cmp	r3, #0
    4ab2:	d015      	beq.n	4ae0 <_ZN4mbed8FilePathC1EPKc+0x54>
    4ab4:	1c03      	adds	r3, r0, #0
    4ab6:	e001      	b.n	4abc <_ZN4mbed8FilePathC1EPKc+0x30>
    4ab8:	2a00      	cmp	r2, #0
    4aba:	d00c      	beq.n	4ad6 <_ZN4mbed8FilePathC1EPKc+0x4a>
    4abc:	1a5d      	subs	r5, r3, r1
    4abe:	3301      	adds	r3, #1
    4ac0:	6023      	str	r3, [r4, #0]
    4ac2:	781a      	ldrb	r2, [r3, #0]
    4ac4:	2a2f      	cmp	r2, #47	; 0x2f
    4ac6:	d1f7      	bne.n	4ab8 <_ZN4mbed8FilePathC1EPKc+0x2c>
    4ac8:	1c29      	adds	r1, r5, #0
    4aca:	3301      	adds	r3, #1
    4acc:	6023      	str	r3, [r4, #0]
    4ace:	f001 fb2f 	bl	6130 <_ZN4mbed8FileBase6lookupEPKcj>
    4ad2:	6060      	str	r0, [r4, #4]
    4ad4:	e7e2      	b.n	4a9c <_ZN4mbed8FilePathC1EPKc+0x10>
    4ad6:	1c29      	adds	r1, r5, #0
    4ad8:	e7f9      	b.n	4ace <_ZN4mbed8FilePathC1EPKc+0x42>
    4ada:	1c03      	adds	r3, r0, #0
    4adc:	2100      	movs	r1, #0
    4ade:	e7f4      	b.n	4aca <_ZN4mbed8FilePathC1EPKc+0x3e>
    4ae0:	2100      	movs	r1, #0
    4ae2:	e7f4      	b.n	4ace <_ZN4mbed8FilePathC1EPKc+0x42>

00004ae4 <_ZN4mbed8FilePath8fileNameEv>:
    4ae4:	6800      	ldr	r0, [r0, #0]
    4ae6:	4770      	bx	lr

00004ae8 <_ZN4mbed8FilePath10fileSystemEv>:
    4ae8:	6843      	ldr	r3, [r0, #4]
    4aea:	b510      	push	{r4, lr}
    4aec:	2b00      	cmp	r3, #0
    4aee:	d007      	beq.n	4b00 <_ZN4mbed8FilePath10fileSystemEv+0x18>
    4af0:	1c04      	adds	r4, r0, #0
    4af2:	1c18      	adds	r0, r3, #0
    4af4:	f001 fb3c 	bl	6170 <_ZN4mbed8FileBase11getPathTypeEv>
    4af8:	2801      	cmp	r0, #1
    4afa:	d101      	bne.n	4b00 <_ZN4mbed8FilePath10fileSystemEv+0x18>
    4afc:	6860      	ldr	r0, [r4, #4]
    4afe:	bd10      	pop	{r4, pc}
    4b00:	2000      	movs	r0, #0
    4b02:	e7fc      	b.n	4afe <_ZN4mbed8FilePath10fileSystemEv+0x16>

00004b04 <_ZN4mbed8FilePath6isFileEv>:
    4b04:	6840      	ldr	r0, [r0, #4]
    4b06:	b508      	push	{r3, lr}
    4b08:	2800      	cmp	r0, #0
    4b0a:	d005      	beq.n	4b18 <_ZN4mbed8FilePath6isFileEv+0x14>
    4b0c:	f001 fb30 	bl	6170 <_ZN4mbed8FileBase11getPathTypeEv>
    4b10:	4243      	negs	r3, r0
    4b12:	4158      	adcs	r0, r3
    4b14:	b2c0      	uxtb	r0, r0
    4b16:	bd08      	pop	{r3, pc}
    4b18:	2000      	movs	r0, #0
    4b1a:	e7fc      	b.n	4b16 <_ZN4mbed8FilePath6isFileEv+0x12>

00004b1c <_ZN4mbed8FilePath4fileEv>:
    4b1c:	6843      	ldr	r3, [r0, #4]
    4b1e:	b510      	push	{r4, lr}
    4b20:	2b00      	cmp	r3, #0
    4b22:	d00a      	beq.n	4b3a <_ZN4mbed8FilePath4fileEv+0x1e>
    4b24:	1c04      	adds	r4, r0, #0
    4b26:	1c18      	adds	r0, r3, #0
    4b28:	f001 fb22 	bl	6170 <_ZN4mbed8FileBase11getPathTypeEv>
    4b2c:	2800      	cmp	r0, #0
    4b2e:	d104      	bne.n	4b3a <_ZN4mbed8FilePath4fileEv+0x1e>
    4b30:	6860      	ldr	r0, [r4, #4]
    4b32:	2800      	cmp	r0, #0
    4b34:	d001      	beq.n	4b3a <_ZN4mbed8FilePath4fileEv+0x1e>
    4b36:	3804      	subs	r0, #4
    4b38:	bd10      	pop	{r4, pc}
    4b3a:	2000      	movs	r0, #0
    4b3c:	e7fc      	b.n	4b38 <_ZN4mbed8FilePath4fileEv+0x1c>
    4b3e:	46c0      	nop			; (mov r8, r8)

00004b40 <_ZN4mbed8FilePath6existsEv>:
    4b40:	6840      	ldr	r0, [r0, #4]
    4b42:	1e43      	subs	r3, r0, #1
    4b44:	4198      	sbcs	r0, r3
    4b46:	b2c0      	uxtb	r0, r0
    4b48:	4770      	bx	lr
    4b4a:	46c0      	nop			; (mov r8, r8)

00004b4c <_ZN4mbed3SPID1Ev>:
    4b4c:	4770      	bx	lr
    4b4e:	46c0      	nop			; (mov r8, r8)

00004b50 <_ZN6CThunkIN4mbed3SPIEE10trampolineEPS1_PvPMS1_FvS4_E>:
    4b50:	b510      	push	{r4, lr}
    4b52:	2800      	cmp	r0, #0
    4b54:	d008      	beq.n	4b68 <_ZN6CThunkIN4mbed3SPIEE10trampolineEPS1_PvPMS1_FvS4_E+0x18>
    4b56:	6814      	ldr	r4, [r2, #0]
    4b58:	6853      	ldr	r3, [r2, #4]
    4b5a:	2c00      	cmp	r4, #0
    4b5c:	d005      	beq.n	4b6a <_ZN6CThunkIN4mbed3SPIEE10trampolineEPS1_PvPMS1_FvS4_E+0x1a>
    4b5e:	07da      	lsls	r2, r3, #31
    4b60:	d405      	bmi.n	4b6e <_ZN6CThunkIN4mbed3SPIEE10trampolineEPS1_PvPMS1_FvS4_E+0x1e>
    4b62:	105b      	asrs	r3, r3, #1
    4b64:	18c0      	adds	r0, r0, r3
    4b66:	47a0      	blx	r4
    4b68:	bd10      	pop	{r4, pc}
    4b6a:	07da      	lsls	r2, r3, #31
    4b6c:	d5fc      	bpl.n	4b68 <_ZN6CThunkIN4mbed3SPIEE10trampolineEPS1_PvPMS1_FvS4_E+0x18>
    4b6e:	105b      	asrs	r3, r3, #1
    4b70:	18c0      	adds	r0, r0, r3
    4b72:	6803      	ldr	r3, [r0, #0]
    4b74:	591c      	ldr	r4, [r3, r4]
    4b76:	47a0      	blx	r4
    4b78:	e7f6      	b.n	4b68 <_ZN6CThunkIN4mbed3SPIEE10trampolineEPS1_PvPMS1_FvS4_E+0x18>
    4b7a:	46c0      	nop			; (mov r8, r8)

00004b7c <_ZN4mbed3SPID0Ev>:
    4b7c:	b510      	push	{r4, lr}
    4b7e:	1c04      	adds	r4, r0, #0
    4b80:	f001 fd6f 	bl	6662 <_ZdlPv>
    4b84:	1c20      	adds	r0, r4, #0
    4b86:	bd10      	pop	{r4, pc}

00004b88 <_ZN4mbed3SPIC1E7PinNameS1_S1_S1_>:
    4b88:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b8a:	4656      	mov	r6, sl
    4b8c:	465f      	mov	r7, fp
    4b8e:	464d      	mov	r5, r9
    4b90:	4644      	mov	r4, r8
    4b92:	4691      	mov	r9, r2
    4b94:	2200      	movs	r2, #0
    4b96:	b4f0      	push	{r4, r5, r6, r7}
    4b98:	1c05      	adds	r5, r0, #0
    4b9a:	1c04      	adds	r4, r0, #0
    4b9c:	b087      	sub	sp, #28
    4b9e:	9303      	str	r3, [sp, #12]
    4ba0:	ab10      	add	r3, sp, #64	; 0x40
    4ba2:	569a      	ldrsb	r2, [r3, r2]
    4ba4:	4b26      	ldr	r3, [pc, #152]	; (4c40 <_ZN4mbed3SPIC1E7PinNameS1_S1_S1_+0xb8>)
    4ba6:	468a      	mov	sl, r1
    4ba8:	3308      	adds	r3, #8
    4baa:	c508      	stmia	r5!, {r3}
    4bac:	4693      	mov	fp, r2
    4bae:	1c28      	adds	r0, r5, #0
    4bb0:	2100      	movs	r1, #0
    4bb2:	2240      	movs	r2, #64	; 0x40
    4bb4:	f005 f974 	bl	9ea0 <memset>
    4bb8:	2300      	movs	r3, #0
    4bba:	1c22      	adds	r2, r4, #0
    4bbc:	9304      	str	r3, [sp, #16]
    4bbe:	9305      	str	r3, [sp, #20]
    4bc0:	a904      	add	r1, sp, #16
    4bc2:	3248      	adds	r2, #72	; 0x48
    4bc4:	c941      	ldmia	r1!, {r0, r6}
    4bc6:	c241      	stmia	r2!, {r0, r6}
    4bc8:	4a1e      	ldr	r2, [pc, #120]	; (4c44 <_ZN4mbed3SPIC1E7PinNameS1_S1_S1_+0xbc>)
    4bca:	6522      	str	r2, [r4, #80]	; 0x50
    4bcc:	4a1e      	ldr	r2, [pc, #120]	; (4c48 <_ZN4mbed3SPIC1E7PinNameS1_S1_S1_+0xc0>)
    4bce:	6562      	str	r2, [r4, #84]	; 0x54
    4bd0:	4a1e      	ldr	r2, [pc, #120]	; (4c4c <_ZN4mbed3SPIC1E7PinNameS1_S1_S1_+0xc4>)
    4bd2:	65a2      	str	r2, [r4, #88]	; 0x58
    4bd4:	1c22      	adds	r2, r4, #0
    4bd6:	3248      	adds	r2, #72	; 0x48
    4bd8:	6623      	str	r3, [r4, #96]	; 0x60
    4bda:	65e4      	str	r4, [r4, #92]	; 0x5c
    4bdc:	6662      	str	r2, [r4, #100]	; 0x64
    4bde:	4a1c      	ldr	r2, [pc, #112]	; (4c50 <_ZN4mbed3SPIC1E7PinNameS1_S1_S1_+0xc8>)
    4be0:	66a2      	str	r2, [r4, #104]	; 0x68
    4be2:	f3bf 8f6f 	isb	sy
    4be6:	f3bf 8f4f 	dsb	sy
    4bea:	2280      	movs	r2, #128	; 0x80
    4bec:	66e3      	str	r3, [r4, #108]	; 0x6c
    4bee:	50a3      	str	r3, [r4, r2]
    4bf0:	3204      	adds	r2, #4
    4bf2:	54a3      	strb	r3, [r4, r2]
    4bf4:	3204      	adds	r2, #4
    4bf6:	4690      	mov	r8, r2
    4bf8:	4641      	mov	r1, r8
    4bfa:	278c      	movs	r7, #140	; 0x8c
    4bfc:	3a80      	subs	r2, #128	; 0x80
    4bfe:	5062      	str	r2, [r4, r1]
    4c00:	2690      	movs	r6, #144	; 0x90
    4c02:	465a      	mov	r2, fp
    4c04:	51e3      	str	r3, [r4, r7]
    4c06:	4b13      	ldr	r3, [pc, #76]	; (4c54 <_ZN4mbed3SPIC1E7PinNameS1_S1_S1_+0xcc>)
    4c08:	9200      	str	r2, [sp, #0]
    4c0a:	51a3      	str	r3, [r4, r6]
    4c0c:	1c28      	adds	r0, r5, #0
    4c0e:	4651      	mov	r1, sl
    4c10:	464a      	mov	r2, r9
    4c12:	9b03      	ldr	r3, [sp, #12]
    4c14:	f000 ff92 	bl	5b3c <spi_init>
    4c18:	4643      	mov	r3, r8
    4c1a:	59e2      	ldr	r2, [r4, r7]
    4c1c:	58e1      	ldr	r1, [r4, r3]
    4c1e:	1c28      	adds	r0, r5, #0
    4c20:	2300      	movs	r3, #0
    4c22:	f001 f883 	bl	5d2c <spi_format>
    4c26:	1c28      	adds	r0, r5, #0
    4c28:	59a1      	ldr	r1, [r4, r6]
    4c2a:	f001 f933 	bl	5e94 <spi_frequency>
    4c2e:	1c20      	adds	r0, r4, #0
    4c30:	b007      	add	sp, #28
    4c32:	bc3c      	pop	{r2, r3, r4, r5}
    4c34:	4690      	mov	r8, r2
    4c36:	4699      	mov	r9, r3
    4c38:	46a2      	mov	sl, r4
    4c3a:	46ab      	mov	fp, r5
    4c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4c3e:	46c0      	nop			; (mov r8, r8)
    4c40:	0000f1d0 	.word	0x0000f1d0
    4c44:	2404b51f 	.word	0x2404b51f
    4c48:	cc0f447c 	.word	0xcc0f447c
    4c4c:	bd1f4798 	.word	0xbd1f4798
    4c50:	00004b51 	.word	0x00004b51
    4c54:	000f4240 	.word	0x000f4240

00004c58 <_ZN4mbed3SPI6aquireEv>:
    4c58:	b570      	push	{r4, r5, r6, lr}
    4c5a:	4d0a      	ldr	r5, [pc, #40]	; (4c84 <_ZN4mbed3SPI6aquireEv+0x2c>)
    4c5c:	682b      	ldr	r3, [r5, #0]
    4c5e:	4283      	cmp	r3, r0
    4c60:	d00f      	beq.n	4c82 <_ZN4mbed3SPI6aquireEv+0x2a>
    4c62:	2388      	movs	r3, #136	; 0x88
    4c64:	1d06      	adds	r6, r0, #4
    4c66:	58c1      	ldr	r1, [r0, r3]
    4c68:	3304      	adds	r3, #4
    4c6a:	58c2      	ldr	r2, [r0, r3]
    4c6c:	1c04      	adds	r4, r0, #0
    4c6e:	2300      	movs	r3, #0
    4c70:	1c30      	adds	r0, r6, #0
    4c72:	f001 f85b 	bl	5d2c <spi_format>
    4c76:	2390      	movs	r3, #144	; 0x90
    4c78:	1c30      	adds	r0, r6, #0
    4c7a:	58e1      	ldr	r1, [r4, r3]
    4c7c:	f001 f90a 	bl	5e94 <spi_frequency>
    4c80:	602c      	str	r4, [r5, #0]
    4c82:	bd70      	pop	{r4, r5, r6, pc}
    4c84:	200046dc 	.word	0x200046dc

00004c88 <_ZN4mbed3SPI6formatEii>:
    4c88:	b508      	push	{r3, lr}
    4c8a:	2388      	movs	r3, #136	; 0x88
    4c8c:	50c1      	str	r1, [r0, r3]
    4c8e:	3304      	adds	r3, #4
    4c90:	50c2      	str	r2, [r0, r3]
    4c92:	2200      	movs	r2, #0
    4c94:	4b02      	ldr	r3, [pc, #8]	; (4ca0 <_ZN4mbed3SPI6formatEii+0x18>)
    4c96:	601a      	str	r2, [r3, #0]
    4c98:	f7ff ffde 	bl	4c58 <_ZN4mbed3SPI6aquireEv>
    4c9c:	bd08      	pop	{r3, pc}
    4c9e:	46c0      	nop			; (mov r8, r8)
    4ca0:	200046dc 	.word	0x200046dc

00004ca4 <_ZN4mbed3SPI9frequencyEi>:
    4ca4:	b508      	push	{r3, lr}
    4ca6:	2390      	movs	r3, #144	; 0x90
    4ca8:	2200      	movs	r2, #0
    4caa:	50c1      	str	r1, [r0, r3]
    4cac:	4b02      	ldr	r3, [pc, #8]	; (4cb8 <_ZN4mbed3SPI9frequencyEi+0x14>)
    4cae:	601a      	str	r2, [r3, #0]
    4cb0:	f7ff ffd2 	bl	4c58 <_ZN4mbed3SPI6aquireEv>
    4cb4:	bd08      	pop	{r3, pc}
    4cb6:	46c0      	nop			; (mov r8, r8)
    4cb8:	200046dc 	.word	0x200046dc

00004cbc <_ZN4mbed3SPI5writeEi>:
    4cbc:	b538      	push	{r3, r4, r5, lr}
    4cbe:	1c0d      	adds	r5, r1, #0
    4cc0:	1c04      	adds	r4, r0, #0
    4cc2:	f7ff ffc9 	bl	4c58 <_ZN4mbed3SPI6aquireEv>
    4cc6:	1c29      	adds	r1, r5, #0
    4cc8:	1d20      	adds	r0, r4, #4
    4cca:	f001 f95f 	bl	5f8c <spi_master_write>
    4cce:	bd38      	pop	{r3, r4, r5, pc}

00004cd0 <_ZN4mbed6Serial5_getcEv>:
    4cd0:	b508      	push	{r3, lr}
    4cd2:	f000 f8b5 	bl	4e40 <_ZN4mbed10SerialBase10_base_getcEv>
    4cd6:	bd08      	pop	{r3, pc}

00004cd8 <_ZThn220_N4mbed6Serial5_getcEv>:
    4cd8:	b408      	push	{r3}
    4cda:	4b02      	ldr	r3, [pc, #8]	; (4ce4 <_ZThn220_N4mbed6Serial5_getcEv+0xc>)
    4cdc:	469c      	mov	ip, r3
    4cde:	38dc      	subs	r0, #220	; 0xdc
    4ce0:	bc08      	pop	{r3}
    4ce2:	4760      	bx	ip
    4ce4:	00004cd1 	.word	0x00004cd1

00004ce8 <_ZN4mbed6Serial5_putcEi>:
    4ce8:	b508      	push	{r3, lr}
    4cea:	f000 f8af 	bl	4e4c <_ZN4mbed10SerialBase10_base_putcEi>
    4cee:	bd08      	pop	{r3, pc}

00004cf0 <_ZThn220_N4mbed6Serial5_putcEi>:
    4cf0:	b408      	push	{r3}
    4cf2:	4b02      	ldr	r3, [pc, #8]	; (4cfc <_ZThn220_N4mbed6Serial5_putcEi+0xc>)
    4cf4:	469c      	mov	ip, r3
    4cf6:	38dc      	subs	r0, #220	; 0xdc
    4cf8:	bc08      	pop	{r3}
    4cfa:	4760      	bx	ip
    4cfc:	00004ce9 	.word	0x00004ce9

00004d00 <_ZN4mbed6SerialC1E7PinNameS1_PKc>:
    4d00:	b538      	push	{r3, r4, r5, lr}
    4d02:	1c04      	adds	r4, r0, #0
    4d04:	1c1d      	adds	r5, r3, #0
    4d06:	f000 f843 	bl	4d90 <_ZN4mbed10SerialBaseC1E7PinNameS1_>
    4d0a:	1c20      	adds	r0, r4, #0
    4d0c:	1c29      	adds	r1, r5, #0
    4d0e:	30dc      	adds	r0, #220	; 0xdc
    4d10:	f000 f8da 	bl	4ec8 <_ZN4mbed6StreamC1EPKc>
    4d14:	4b06      	ldr	r3, [pc, #24]	; (4d30 <_ZN4mbed6SerialC1E7PinNameS1_PKc+0x30>)
    4d16:	1c20      	adds	r0, r4, #0
    4d18:	1c1a      	adds	r2, r3, #0
    4d1a:	1c19      	adds	r1, r3, #0
    4d1c:	3208      	adds	r2, #8
    4d1e:	6022      	str	r2, [r4, #0]
    4d20:	22dc      	movs	r2, #220	; 0xdc
    4d22:	3120      	adds	r1, #32
    4d24:	50a1      	str	r1, [r4, r2]
    4d26:	3354      	adds	r3, #84	; 0x54
    4d28:	3204      	adds	r2, #4
    4d2a:	50a3      	str	r3, [r4, r2]
    4d2c:	bd38      	pop	{r3, r4, r5, pc}
    4d2e:	46c0      	nop			; (mov r8, r8)
    4d30:	0000f1e8 	.word	0x0000f1e8

00004d34 <_ZN4mbed10SerialBase12_irq_handlerEm9SerialIrq>:
    4d34:	b508      	push	{r3, lr}
    4d36:	004b      	lsls	r3, r1, #1
    4d38:	1859      	adds	r1, r3, r1
    4d3a:	00c9      	lsls	r1, r1, #3
    4d3c:	1843      	adds	r3, r0, r1
    4d3e:	1c1a      	adds	r2, r3, #0
    4d40:	32b8      	adds	r2, #184	; 0xb8
    4d42:	6852      	ldr	r2, [r2, #4]
    4d44:	33a8      	adds	r3, #168	; 0xa8
    4d46:	681b      	ldr	r3, [r3, #0]
    4d48:	2a00      	cmp	r2, #0
    4d4a:	d006      	beq.n	4d5a <_ZN4mbed10SerialBase12_irq_handlerEm9SerialIrq+0x26>
    4d4c:	2b00      	cmp	r3, #0
    4d4e:	d003      	beq.n	4d58 <_ZN4mbed10SerialBase12_irq_handlerEm9SerialIrq+0x24>
    4d50:	1841      	adds	r1, r0, r1
    4d52:	31ac      	adds	r1, #172	; 0xac
    4d54:	1c18      	adds	r0, r3, #0
    4d56:	4790      	blx	r2
    4d58:	bd08      	pop	{r3, pc}
    4d5a:	2b00      	cmp	r3, #0
    4d5c:	d0fc      	beq.n	4d58 <_ZN4mbed10SerialBase12_irq_handlerEm9SerialIrq+0x24>
    4d5e:	4798      	blx	r3
    4d60:	e7fa      	b.n	4d58 <_ZN4mbed10SerialBase12_irq_handlerEm9SerialIrq+0x24>
    4d62:	46c0      	nop			; (mov r8, r8)

00004d64 <_ZN6CThunkIN4mbed10SerialBaseEE10trampolineEPS1_PvPMS1_FvS4_E>:
    4d64:	b510      	push	{r4, lr}
    4d66:	2800      	cmp	r0, #0
    4d68:	d008      	beq.n	4d7c <_ZN6CThunkIN4mbed10SerialBaseEE10trampolineEPS1_PvPMS1_FvS4_E+0x18>
    4d6a:	6814      	ldr	r4, [r2, #0]
    4d6c:	6853      	ldr	r3, [r2, #4]
    4d6e:	2c00      	cmp	r4, #0
    4d70:	d005      	beq.n	4d7e <_ZN6CThunkIN4mbed10SerialBaseEE10trampolineEPS1_PvPMS1_FvS4_E+0x1a>
    4d72:	07da      	lsls	r2, r3, #31
    4d74:	d405      	bmi.n	4d82 <_ZN6CThunkIN4mbed10SerialBaseEE10trampolineEPS1_PvPMS1_FvS4_E+0x1e>
    4d76:	105b      	asrs	r3, r3, #1
    4d78:	18c0      	adds	r0, r0, r3
    4d7a:	47a0      	blx	r4
    4d7c:	bd10      	pop	{r4, pc}
    4d7e:	07da      	lsls	r2, r3, #31
    4d80:	d5fc      	bpl.n	4d7c <_ZN6CThunkIN4mbed10SerialBaseEE10trampolineEPS1_PvPMS1_FvS4_E+0x18>
    4d82:	105b      	asrs	r3, r3, #1
    4d84:	18c0      	adds	r0, r0, r3
    4d86:	6803      	ldr	r3, [r0, #0]
    4d88:	591c      	ldr	r4, [r3, r4]
    4d8a:	47a0      	blx	r4
    4d8c:	e7f6      	b.n	4d7c <_ZN6CThunkIN4mbed10SerialBaseEE10trampolineEPS1_PvPMS1_FvS4_E+0x18>
    4d8e:	46c0      	nop			; (mov r8, r8)

00004d90 <_ZN4mbed10SerialBaseC1E7PinNameS1_>:
    4d90:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d92:	4647      	mov	r7, r8
    4d94:	b480      	push	{r7}
    4d96:	4b24      	ldr	r3, [pc, #144]	; (4e28 <_ZN4mbed10SerialBaseC1E7PinNameS1_+0x98>)
    4d98:	b082      	sub	sp, #8
    4d9a:	6003      	str	r3, [r0, #0]
    4d9c:	2500      	movs	r5, #0
    4d9e:	1c03      	adds	r3, r0, #0
    4da0:	1c17      	adds	r7, r2, #0
    4da2:	466a      	mov	r2, sp
    4da4:	1c04      	adds	r4, r0, #0
    4da6:	9500      	str	r5, [sp, #0]
    4da8:	9501      	str	r5, [sp, #4]
    4daa:	3308      	adds	r3, #8
    4dac:	4688      	mov	r8, r1
    4dae:	ca03      	ldmia	r2!, {r0, r1}
    4db0:	c303      	stmia	r3!, {r0, r1}
    4db2:	4b1e      	ldr	r3, [pc, #120]	; (4e2c <_ZN4mbed10SerialBaseC1E7PinNameS1_+0x9c>)
    4db4:	6123      	str	r3, [r4, #16]
    4db6:	4b1e      	ldr	r3, [pc, #120]	; (4e30 <_ZN4mbed10SerialBaseC1E7PinNameS1_+0xa0>)
    4db8:	6163      	str	r3, [r4, #20]
    4dba:	4b1e      	ldr	r3, [pc, #120]	; (4e34 <_ZN4mbed10SerialBaseC1E7PinNameS1_+0xa4>)
    4dbc:	61a3      	str	r3, [r4, #24]
    4dbe:	1c23      	adds	r3, r4, #0
    4dc0:	3308      	adds	r3, #8
    4dc2:	6225      	str	r5, [r4, #32]
    4dc4:	61e4      	str	r4, [r4, #28]
    4dc6:	6263      	str	r3, [r4, #36]	; 0x24
    4dc8:	4b1b      	ldr	r3, [pc, #108]	; (4e38 <_ZN4mbed10SerialBaseC1E7PinNameS1_+0xa8>)
    4dca:	62a3      	str	r3, [r4, #40]	; 0x28
    4dcc:	f3bf 8f6f 	isb	sy
    4dd0:	f3bf 8f4f 	dsb	sy
    4dd4:	235c      	movs	r3, #92	; 0x5c
    4dd6:	1c26      	adds	r6, r4, #0
    4dd8:	62e5      	str	r5, [r4, #44]	; 0x2c
    4dda:	6425      	str	r5, [r4, #64]	; 0x40
    4ddc:	6465      	str	r5, [r4, #68]	; 0x44
    4dde:	65a5      	str	r5, [r4, #88]	; 0x58
    4de0:	3660      	adds	r6, #96	; 0x60
    4de2:	54e5      	strb	r5, [r4, r3]
    4de4:	3301      	adds	r3, #1
    4de6:	54e5      	strb	r5, [r4, r3]
    4de8:	1c30      	adds	r0, r6, #0
    4dea:	2100      	movs	r1, #0
    4dec:	2248      	movs	r2, #72	; 0x48
    4dee:	f005 f857 	bl	9ea0 <memset>
    4df2:	23a8      	movs	r3, #168	; 0xa8
    4df4:	2296      	movs	r2, #150	; 0x96
    4df6:	50e5      	str	r5, [r4, r3]
    4df8:	3314      	adds	r3, #20
    4dfa:	50e5      	str	r5, [r4, r3]
    4dfc:	3304      	adds	r3, #4
    4dfe:	50e5      	str	r5, [r4, r3]
    4e00:	3314      	adds	r3, #20
    4e02:	50e5      	str	r5, [r4, r3]
    4e04:	0192      	lsls	r2, r2, #6
    4e06:	3304      	adds	r3, #4
    4e08:	50e2      	str	r2, [r4, r3]
    4e0a:	1c30      	adds	r0, r6, #0
    4e0c:	4641      	mov	r1, r8
    4e0e:	1c3a      	adds	r2, r7, #0
    4e10:	f7ff fcb2 	bl	4778 <serial_init>
    4e14:	1c30      	adds	r0, r6, #0
    4e16:	4909      	ldr	r1, [pc, #36]	; (4e3c <_ZN4mbed10SerialBaseC1E7PinNameS1_+0xac>)
    4e18:	1c22      	adds	r2, r4, #0
    4e1a:	f7ff fd89 	bl	4930 <serial_irq_handler>
    4e1e:	1c20      	adds	r0, r4, #0
    4e20:	b002      	add	sp, #8
    4e22:	bc04      	pop	{r2}
    4e24:	4690      	mov	r8, r2
    4e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4e28:	0000f250 	.word	0x0000f250
    4e2c:	2404b51f 	.word	0x2404b51f
    4e30:	cc0f447c 	.word	0xcc0f447c
    4e34:	bd1f4798 	.word	0xbd1f4798
    4e38:	00004d65 	.word	0x00004d65
    4e3c:	00004d35 	.word	0x00004d35

00004e40 <_ZN4mbed10SerialBase10_base_getcEv>:
    4e40:	b508      	push	{r3, lr}
    4e42:	3060      	adds	r0, #96	; 0x60
    4e44:	f7ff fdd6 	bl	49f4 <serial_getc>
    4e48:	bd08      	pop	{r3, pc}
    4e4a:	46c0      	nop			; (mov r8, r8)

00004e4c <_ZN4mbed10SerialBase10_base_putcEi>:
    4e4c:	b510      	push	{r4, lr}
    4e4e:	1c0c      	adds	r4, r1, #0
    4e50:	3060      	adds	r0, #96	; 0x60
    4e52:	f7ff fdfb 	bl	4a4c <serial_putc>
    4e56:	1c20      	adds	r0, r4, #0
    4e58:	bd10      	pop	{r4, pc}
    4e5a:	46c0      	nop			; (mov r8, r8)

00004e5c <_ZN4mbed6Stream5closeEv>:
    4e5c:	2000      	movs	r0, #0
    4e5e:	4770      	bx	lr

00004e60 <_ZN4mbed6Stream5writeEPKvj>:
    4e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4e62:	188e      	adds	r6, r1, r2
    4e64:	1c05      	adds	r5, r0, #0
    4e66:	1c0f      	adds	r7, r1, #0
    4e68:	1e0c      	subs	r4, r1, #0
    4e6a:	42b4      	cmp	r4, r6
    4e6c:	d102      	bne.n	4e74 <_ZN4mbed6Stream5writeEPKvj+0x14>
    4e6e:	e00a      	b.n	4e86 <_ZN4mbed6Stream5writeEPKvj+0x26>
    4e70:	42a6      	cmp	r6, r4
    4e72:	d008      	beq.n	4e86 <_ZN4mbed6Stream5writeEPKvj+0x26>
    4e74:	3401      	adds	r4, #1
    4e76:	682b      	ldr	r3, [r5, #0]
    4e78:	1e62      	subs	r2, r4, #1
    4e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4e7c:	7811      	ldrb	r1, [r2, #0]
    4e7e:	1c28      	adds	r0, r5, #0
    4e80:	4798      	blx	r3
    4e82:	1c43      	adds	r3, r0, #1
    4e84:	d1f4      	bne.n	4e70 <_ZN4mbed6Stream5writeEPKvj+0x10>
    4e86:	1be0      	subs	r0, r4, r7
    4e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4e8a:	46c0      	nop			; (mov r8, r8)

00004e8c <_ZN4mbed6Stream4readEPvj>:
    4e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4e8e:	188e      	adds	r6, r1, r2
    4e90:	1c05      	adds	r5, r0, #0
    4e92:	1c0f      	adds	r7, r1, #0
    4e94:	1e0c      	subs	r4, r1, #0
    4e96:	42b4      	cmp	r4, r6
    4e98:	d105      	bne.n	4ea6 <_ZN4mbed6Stream4readEPvj+0x1a>
    4e9a:	e00a      	b.n	4eb2 <_ZN4mbed6Stream4readEPvj+0x26>
    4e9c:	3401      	adds	r4, #1
    4e9e:	1e63      	subs	r3, r4, #1
    4ea0:	7018      	strb	r0, [r3, #0]
    4ea2:	42a6      	cmp	r6, r4
    4ea4:	d005      	beq.n	4eb2 <_ZN4mbed6Stream4readEPvj+0x26>
    4ea6:	682b      	ldr	r3, [r5, #0]
    4ea8:	1c28      	adds	r0, r5, #0
    4eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4eac:	4798      	blx	r3
    4eae:	1c43      	adds	r3, r0, #1
    4eb0:	d1f4      	bne.n	4e9c <_ZN4mbed6Stream4readEPvj+0x10>
    4eb2:	1be0      	subs	r0, r4, r7
    4eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4eb6:	46c0      	nop			; (mov r8, r8)

00004eb8 <_ZN4mbed6Stream5lseekEli>:
    4eb8:	2000      	movs	r0, #0
    4eba:	4770      	bx	lr

00004ebc <_ZN4mbed6Stream6isattyEv>:
    4ebc:	2000      	movs	r0, #0
    4ebe:	4770      	bx	lr

00004ec0 <_ZN4mbed6Stream5fsyncEv>:
    4ec0:	2000      	movs	r0, #0
    4ec2:	4770      	bx	lr

00004ec4 <_ZN4mbed6Stream4flenEv>:
    4ec4:	2000      	movs	r0, #0
    4ec6:	4770      	bx	lr

00004ec8 <_ZN4mbed6StreamC1EPKc>:
    4ec8:	b510      	push	{r4, lr}
    4eca:	1c04      	adds	r4, r0, #0
    4ecc:	b084      	sub	sp, #16
    4ece:	f001 f951 	bl	6174 <_ZN4mbed8FileLikeC1EPKc>
    4ed2:	4b0b      	ldr	r3, [pc, #44]	; (4f00 <_ZN4mbed6StreamC1EPKc+0x38>)
    4ed4:	a801      	add	r0, sp, #4
    4ed6:	1c1a      	adds	r2, r3, #0
    4ed8:	333c      	adds	r3, #60	; 0x3c
    4eda:	6063      	str	r3, [r4, #4]
    4edc:	2300      	movs	r3, #0
    4ede:	3208      	adds	r2, #8
    4ee0:	6163      	str	r3, [r4, #20]
    4ee2:	6022      	str	r2, [r4, #0]
    4ee4:	4907      	ldr	r1, [pc, #28]	; (4f04 <_ZN4mbed6StreamC1EPKc+0x3c>)
    4ee6:	1c22      	adds	r2, r4, #0
    4ee8:	f006 fab2 	bl	b450 <siprintf>
    4eec:	4906      	ldr	r1, [pc, #24]	; (4f08 <_ZN4mbed6StreamC1EPKc+0x40>)
    4eee:	a801      	add	r0, sp, #4
    4ef0:	f004 fe34 	bl	9b5c <fopen>
    4ef4:	6160      	str	r0, [r4, #20]
    4ef6:	f7ff f861 	bl	3fbc <_ZN4mbed26mbed_set_unbuffered_streamEP7__sFILE>
    4efa:	1c20      	adds	r0, r4, #0
    4efc:	b004      	add	sp, #16
    4efe:	bd10      	pop	{r4, pc}
    4f00:	0000f258 	.word	0x0000f258
    4f04:	0000ef14 	.word	0x0000ef14
    4f08:	0000f29c 	.word	0x0000f29c

00004f0c <_ZN4mbed6StreamD1Ev>:
    4f0c:	4b07      	ldr	r3, [pc, #28]	; (4f2c <_ZN4mbed6StreamD1Ev+0x20>)
    4f0e:	b510      	push	{r4, lr}
    4f10:	1c1a      	adds	r2, r3, #0
    4f12:	1c04      	adds	r4, r0, #0
    4f14:	3208      	adds	r2, #8
    4f16:	333c      	adds	r3, #60	; 0x3c
    4f18:	6002      	str	r2, [r0, #0]
    4f1a:	6043      	str	r3, [r0, #4]
    4f1c:	6940      	ldr	r0, [r0, #20]
    4f1e:	f004 fc57 	bl	97d0 <fclose>
    4f22:	1c20      	adds	r0, r4, #0
    4f24:	f001 f93a 	bl	619c <_ZN4mbed8FileLikeD1Ev>
    4f28:	1c20      	adds	r0, r4, #0
    4f2a:	bd10      	pop	{r4, pc}
    4f2c:	0000f258 	.word	0x0000f258

00004f30 <_ZN4mbed6Stream4putcEi>:
    4f30:	b538      	push	{r3, r4, r5, lr}
    4f32:	1c0d      	adds	r5, r1, #0
    4f34:	1c04      	adds	r4, r0, #0
    4f36:	6940      	ldr	r0, [r0, #20]
    4f38:	f004 fd0a 	bl	9950 <fflush>
    4f3c:	1c28      	adds	r0, r5, #0
    4f3e:	6961      	ldr	r1, [r4, #20]
    4f40:	f004 fe3e 	bl	9bc0 <fputc>
    4f44:	bd38      	pop	{r3, r4, r5, pc}
    4f46:	46c0      	nop			; (mov r8, r8)

00004f48 <_ZN4mbed6Stream6printfEPKcz>:
    4f48:	b40e      	push	{r1, r2, r3}
    4f4a:	b530      	push	{r4, r5, lr}
    4f4c:	1c04      	adds	r4, r0, #0
    4f4e:	b082      	sub	sp, #8
    4f50:	ab05      	add	r3, sp, #20
    4f52:	cb20      	ldmia	r3!, {r5}
    4f54:	6940      	ldr	r0, [r0, #20]
    4f56:	9301      	str	r3, [sp, #4]
    4f58:	f004 fcfa 	bl	9950 <fflush>
    4f5c:	6960      	ldr	r0, [r4, #20]
    4f5e:	1c29      	adds	r1, r5, #0
    4f60:	9a01      	ldr	r2, [sp, #4]
    4f62:	f005 f97b 	bl	a25c <vfiprintf>
    4f66:	b002      	add	sp, #8
    4f68:	bc30      	pop	{r4, r5}
    4f6a:	bc08      	pop	{r3}
    4f6c:	b003      	add	sp, #12
    4f6e:	4718      	bx	r3

00004f70 <mbed_assert_internal>:
    4f70:	b538      	push	{r3, r4, r5, lr}
    4f72:	1c05      	adds	r5, r0, #0
    4f74:	1c0c      	adds	r4, r1, #0
    4f76:	1c13      	adds	r3, r2, #0
    4f78:	1c29      	adds	r1, r5, #0
    4f7a:	4802      	ldr	r0, [pc, #8]	; (4f84 <mbed_assert_internal+0x14>)
    4f7c:	1c22      	adds	r2, r4, #0
    4f7e:	f000 f803 	bl	4f88 <error>
    4f82:	bd38      	pop	{r3, r4, r5, pc}
    4f84:	0000f2a0 	.word	0x0000f2a0

00004f88 <error>:
    4f88:	b40f      	push	{r0, r1, r2, r3}
    4f8a:	2001      	movs	r0, #1
    4f8c:	b508      	push	{r3, lr}
    4f8e:	f004 fbb1 	bl	96f4 <exit>
    4f92:	46c0      	nop			; (mov r8, r8)

00004f94 <gpio_init_out>:
    4f94:	b538      	push	{r3, r4, r5, lr}
    4f96:	1c0d      	adds	r5, r1, #0
    4f98:	1c04      	adds	r4, r0, #0
    4f9a:	f000 fa8b 	bl	54b4 <gpio_init>
    4f9e:	1c6b      	adds	r3, r5, #1
    4fa0:	d00e      	beq.n	4fc0 <gpio_init_out+0x2c>
    4fa2:	2300      	movs	r3, #0
    4fa4:	56e3      	ldrsb	r3, [r4, r3]
    4fa6:	3301      	adds	r3, #1
    4fa8:	d00b      	beq.n	4fc2 <gpio_init_out+0x2e>
    4faa:	68e3      	ldr	r3, [r4, #12]
    4fac:	6862      	ldr	r2, [r4, #4]
    4fae:	1c20      	adds	r0, r4, #0
    4fb0:	2101      	movs	r1, #1
    4fb2:	601a      	str	r2, [r3, #0]
    4fb4:	f000 fae6 	bl	5584 <gpio_dir>
    4fb8:	1c20      	adds	r0, r4, #0
    4fba:	2100      	movs	r1, #0
    4fbc:	f000 faba 	bl	5534 <gpio_mode>
    4fc0:	bd38      	pop	{r3, r4, r5, pc}
    4fc2:	4803      	ldr	r0, [pc, #12]	; (4fd0 <gpio_init_out+0x3c>)
    4fc4:	4903      	ldr	r1, [pc, #12]	; (4fd4 <gpio_init_out+0x40>)
    4fc6:	2228      	movs	r2, #40	; 0x28
    4fc8:	f7ff ffd2 	bl	4f70 <mbed_assert_internal>
    4fcc:	e7ed      	b.n	4faa <gpio_init_out+0x16>
    4fce:	46c0      	nop			; (mov r8, r8)
    4fd0:	0000eac0 	.word	0x0000eac0
    4fd4:	0000f2d4 	.word	0x0000f2d4

00004fd8 <pinmap_find_peripheral>:
    4fd8:	e002      	b.n	4fe0 <pinmap_find_peripheral+0x8>
    4fda:	4283      	cmp	r3, r0
    4fdc:	d006      	beq.n	4fec <pinmap_find_peripheral+0x14>
    4fde:	310c      	adds	r1, #12
    4fe0:	2300      	movs	r3, #0
    4fe2:	56cb      	ldrsb	r3, [r1, r3]
    4fe4:	1c5a      	adds	r2, r3, #1
    4fe6:	d1f8      	bne.n	4fda <pinmap_find_peripheral+0x2>
    4fe8:	1c18      	adds	r0, r3, #0
    4fea:	4770      	bx	lr
    4fec:	6848      	ldr	r0, [r1, #4]
    4fee:	e7fc      	b.n	4fea <pinmap_find_peripheral+0x12>

00004ff0 <pinmap_peripheral>:
    4ff0:	1c02      	adds	r2, r0, #0
    4ff2:	b508      	push	{r3, lr}
    4ff4:	1c53      	adds	r3, r2, #1
    4ff6:	d103      	bne.n	5000 <pinmap_peripheral+0x10>
    4ff8:	e00b      	b.n	5012 <pinmap_peripheral+0x22>
    4ffa:	429a      	cmp	r2, r3
    4ffc:	d00a      	beq.n	5014 <pinmap_peripheral+0x24>
    4ffe:	310c      	adds	r1, #12
    5000:	2300      	movs	r3, #0
    5002:	56cb      	ldrsb	r3, [r1, r3]
    5004:	1c58      	adds	r0, r3, #1
    5006:	d1f8      	bne.n	4ffa <pinmap_peripheral+0xa>
    5008:	4804      	ldr	r0, [pc, #16]	; (501c <pinmap_peripheral+0x2c>)
    500a:	f7ff ffbd 	bl	4f88 <error>
    500e:	2001      	movs	r0, #1
    5010:	4240      	negs	r0, r0
    5012:	bd08      	pop	{r3, pc}
    5014:	6848      	ldr	r0, [r1, #4]
    5016:	1c43      	adds	r3, r0, #1
    5018:	d1fb      	bne.n	5012 <pinmap_peripheral+0x22>
    501a:	e7f5      	b.n	5008 <pinmap_peripheral+0x18>
    501c:	0000f374 	.word	0x0000f374

00005020 <pinmap_function>:
    5020:	1c02      	adds	r2, r0, #0
    5022:	b508      	push	{r3, lr}
    5024:	1c53      	adds	r3, r2, #1
    5026:	d103      	bne.n	5030 <pinmap_function+0x10>
    5028:	e00b      	b.n	5042 <pinmap_function+0x22>
    502a:	429a      	cmp	r2, r3
    502c:	d00a      	beq.n	5044 <pinmap_function+0x24>
    502e:	310c      	adds	r1, #12
    5030:	2300      	movs	r3, #0
    5032:	56cb      	ldrsb	r3, [r1, r3]
    5034:	1c58      	adds	r0, r3, #1
    5036:	d1f8      	bne.n	502a <pinmap_function+0xa>
    5038:	4804      	ldr	r0, [pc, #16]	; (504c <pinmap_function+0x2c>)
    503a:	f7ff ffa5 	bl	4f88 <error>
    503e:	2001      	movs	r0, #1
    5040:	4240      	negs	r0, r0
    5042:	bd08      	pop	{r3, pc}
    5044:	6888      	ldr	r0, [r1, #8]
    5046:	1c43      	adds	r3, r0, #1
    5048:	d1fb      	bne.n	5042 <pinmap_function+0x22>
    504a:	e7f5      	b.n	5038 <pinmap_function+0x18>
    504c:	0000f394 	.word	0x0000f394

00005050 <wait_us>:
    5050:	b538      	push	{r3, r4, r5, lr}
    5052:	1c05      	adds	r5, r0, #0
    5054:	f000 fcbc 	bl	59d0 <us_ticker_read>
    5058:	1c04      	adds	r4, r0, #0
    505a:	f000 fcb9 	bl	59d0 <us_ticker_read>
    505e:	1b00      	subs	r0, r0, r4
    5060:	42a8      	cmp	r0, r5
    5062:	d3fa      	bcc.n	505a <wait_us+0xa>
    5064:	bd38      	pop	{r3, r4, r5, pc}
    5066:	46c0      	nop			; (mov r8, r8)

00005068 <wait_ms>:
    5068:	b508      	push	{r3, lr}
    506a:	23fa      	movs	r3, #250	; 0xfa
    506c:	009b      	lsls	r3, r3, #2
    506e:	4358      	muls	r0, r3
    5070:	f7ff ffee 	bl	5050 <wait_us>
    5074:	bd08      	pop	{r3, pc}
    5076:	46c0      	nop			; (mov r8, r8)

00005078 <_sercom_get_sync_baud_val>:
    5078:	b510      	push	{r4, lr}
    507a:	0849      	lsrs	r1, r1, #1
    507c:	2340      	movs	r3, #64	; 0x40
    507e:	2400      	movs	r4, #0
    5080:	4281      	cmp	r1, r0
    5082:	d202      	bcs.n	508a <_sercom_get_sync_baud_val+0x12>
    5084:	1c18      	adds	r0, r3, #0
    5086:	bd10      	pop	{r4, pc}
    5088:	1c1c      	adds	r4, r3, #0
    508a:	1c63      	adds	r3, r4, #1
    508c:	1a09      	subs	r1, r1, r0
    508e:	b29b      	uxth	r3, r3
    5090:	4288      	cmp	r0, r1
    5092:	d9f9      	bls.n	5088 <_sercom_get_sync_baud_val+0x10>
    5094:	2340      	movs	r3, #64	; 0x40
    5096:	2cff      	cmp	r4, #255	; 0xff
    5098:	d8f4      	bhi.n	5084 <_sercom_get_sync_baud_val+0xc>
    509a:	8014      	strh	r4, [r2, #0]
    509c:	2300      	movs	r3, #0
    509e:	e7f1      	b.n	5084 <_sercom_get_sync_baud_val+0xc>

000050a0 <_sercom_get_async_baud_val>:
    50a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    50a2:	4656      	mov	r6, sl
    50a4:	464d      	mov	r5, r9
    50a6:	4644      	mov	r4, r8
    50a8:	465f      	mov	r7, fp
    50aa:	b4f0      	push	{r4, r5, r6, r7}
    50ac:	1c04      	adds	r4, r0, #0
    50ae:	1c25      	adds	r5, r4, #0
    50b0:	b087      	sub	sp, #28
    50b2:	a810      	add	r0, sp, #64	; 0x40
    50b4:	7806      	ldrb	r6, [r0, #0]
    50b6:	2040      	movs	r0, #64	; 0x40
    50b8:	4375      	muls	r5, r6
    50ba:	428d      	cmp	r5, r1
    50bc:	d906      	bls.n	50cc <_sercom_get_async_baud_val+0x2c>
    50be:	b007      	add	sp, #28
    50c0:	bc3c      	pop	{r2, r3, r4, r5}
    50c2:	4690      	mov	r8, r2
    50c4:	4699      	mov	r9, r3
    50c6:	46a2      	mov	sl, r4
    50c8:	46ab      	mov	fp, r5
    50ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    50cc:	9204      	str	r2, [sp, #16]
    50ce:	1c0d      	adds	r5, r1, #0
    50d0:	1c22      	adds	r2, r4, #0
    50d2:	2b00      	cmp	r3, #0
    50d4:	d13f      	bne.n	5156 <_sercom_get_async_baud_val+0xb6>
    50d6:	1c30      	adds	r0, r6, #0
    50d8:	2100      	movs	r1, #0
    50da:	f001 fcc1 	bl	6a60 <__aeabi_lmul>
    50de:	2300      	movs	r3, #0
    50e0:	4683      	mov	fp, r0
    50e2:	213f      	movs	r1, #63	; 0x3f
    50e4:	2001      	movs	r0, #1
    50e6:	469c      	mov	ip, r3
    50e8:	469a      	mov	sl, r3
    50ea:	1c2e      	adds	r6, r5, #0
    50ec:	2700      	movs	r7, #0
    50ee:	2200      	movs	r2, #0
    50f0:	2300      	movs	r3, #0
    50f2:	4680      	mov	r8, r0
    50f4:	1c0c      	adds	r4, r1, #0
    50f6:	e024      	b.n	5142 <_sercom_get_async_baud_val+0xa2>
    50f8:	4641      	mov	r1, r8
    50fa:	40a9      	lsls	r1, r5
    50fc:	1c0d      	adds	r5, r1, #0
    50fe:	4641      	mov	r1, r8
    5100:	40a1      	lsls	r1, r4
    5102:	1c10      	adds	r0, r2, #0
    5104:	4689      	mov	r9, r1
    5106:	1c19      	adds	r1, r3, #0
    5108:	1880      	adds	r0, r0, r2
    510a:	4159      	adcs	r1, r3
    510c:	1c0b      	adds	r3, r1, #0
    510e:	1c02      	adds	r2, r0, #0
    5110:	4659      	mov	r1, fp
    5112:	9200      	str	r2, [sp, #0]
    5114:	9301      	str	r3, [sp, #4]
    5116:	4229      	tst	r1, r5
    5118:	d003      	beq.n	5122 <_sercom_get_async_baud_val+0x82>
    511a:	4640      	mov	r0, r8
    511c:	4310      	orrs	r0, r2
    511e:	1c02      	adds	r2, r0, #0
    5120:	9b01      	ldr	r3, [sp, #4]
    5122:	429f      	cmp	r7, r3
    5124:	d80b      	bhi.n	513e <_sercom_get_async_baud_val+0x9e>
    5126:	d101      	bne.n	512c <_sercom_get_async_baud_val+0x8c>
    5128:	4296      	cmp	r6, r2
    512a:	d808      	bhi.n	513e <_sercom_get_async_baud_val+0x9e>
    512c:	4661      	mov	r1, ip
    512e:	4648      	mov	r0, r9
    5130:	4301      	orrs	r1, r0
    5132:	4650      	mov	r0, sl
    5134:	4328      	orrs	r0, r5
    5136:	1b92      	subs	r2, r2, r6
    5138:	41bb      	sbcs	r3, r7
    513a:	468c      	mov	ip, r1
    513c:	4682      	mov	sl, r0
    513e:	3c01      	subs	r4, #1
    5140:	d310      	bcc.n	5164 <_sercom_get_async_baud_val+0xc4>
    5142:	2120      	movs	r1, #32
    5144:	4249      	negs	r1, r1
    5146:	1865      	adds	r5, r4, r1
    5148:	d5d6      	bpl.n	50f8 <_sercom_get_async_baud_val+0x58>
    514a:	2120      	movs	r1, #32
    514c:	1b0d      	subs	r5, r1, r4
    514e:	4641      	mov	r1, r8
    5150:	40e9      	lsrs	r1, r5
    5152:	1c0d      	adds	r5, r1, #0
    5154:	e7d3      	b.n	50fe <_sercom_get_async_baud_val+0x5e>
    5156:	2400      	movs	r4, #0
    5158:	2b01      	cmp	r3, #1
    515a:	d007      	beq.n	516c <_sercom_get_async_baud_val+0xcc>
    515c:	9b04      	ldr	r3, [sp, #16]
    515e:	2000      	movs	r0, #0
    5160:	801c      	strh	r4, [r3, #0]
    5162:	e7ac      	b.n	50be <_sercom_get_async_baud_val+0x1e>
    5164:	4663      	mov	r3, ip
    5166:	425c      	negs	r4, r3
    5168:	0c24      	lsrs	r4, r4, #16
    516a:	e7f7      	b.n	515c <_sercom_get_async_baud_val+0xbc>
    516c:	0f4b      	lsrs	r3, r1, #29
    516e:	1c1c      	adds	r4, r3, #0
    5170:	00cb      	lsls	r3, r1, #3
    5172:	4698      	mov	r8, r3
    5174:	1c30      	adds	r0, r6, #0
    5176:	2300      	movs	r3, #0
    5178:	2100      	movs	r1, #0
    517a:	f001 fc71 	bl	6a60 <__aeabi_lmul>
    517e:	2300      	movs	r3, #0
    5180:	469c      	mov	ip, r3
    5182:	3320      	adds	r3, #32
    5184:	469b      	mov	fp, r3
    5186:	4663      	mov	r3, ip
    5188:	46a1      	mov	r9, r4
    518a:	9000      	str	r0, [sp, #0]
    518c:	9101      	str	r1, [sp, #4]
    518e:	9303      	str	r3, [sp, #12]
    5190:	466b      	mov	r3, sp
    5192:	7b1b      	ldrb	r3, [r3, #12]
    5194:	2000      	movs	r0, #0
    5196:	9305      	str	r3, [sp, #20]
    5198:	2300      	movs	r3, #0
    519a:	2100      	movs	r1, #0
    519c:	469c      	mov	ip, r3
    519e:	223f      	movs	r2, #63	; 0x3f
    51a0:	e027      	b.n	51f2 <_sercom_get_async_baud_val+0x152>
    51a2:	2401      	movs	r4, #1
    51a4:	409c      	lsls	r4, r3
    51a6:	1c23      	adds	r3, r4, #0
    51a8:	2701      	movs	r7, #1
    51aa:	4646      	mov	r6, r8
    51ac:	4097      	lsls	r7, r2
    51ae:	403e      	ands	r6, r7
    51b0:	1c04      	adds	r4, r0, #0
    51b2:	1c0d      	adds	r5, r1, #0
    51b4:	46b2      	mov	sl, r6
    51b6:	464e      	mov	r6, r9
    51b8:	1824      	adds	r4, r4, r0
    51ba:	414d      	adcs	r5, r1
    51bc:	4033      	ands	r3, r6
    51be:	4656      	mov	r6, sl
    51c0:	1c20      	adds	r0, r4, #0
    51c2:	1c29      	adds	r1, r5, #0
    51c4:	4333      	orrs	r3, r6
    51c6:	d004      	beq.n	51d2 <_sercom_get_async_baud_val+0x132>
    51c8:	2101      	movs	r1, #1
    51ca:	1c23      	adds	r3, r4, #0
    51cc:	430b      	orrs	r3, r1
    51ce:	1c18      	adds	r0, r3, #0
    51d0:	1c29      	adds	r1, r5, #0
    51d2:	9b01      	ldr	r3, [sp, #4]
    51d4:	428b      	cmp	r3, r1
    51d6:	d80a      	bhi.n	51ee <_sercom_get_async_baud_val+0x14e>
    51d8:	d102      	bne.n	51e0 <_sercom_get_async_baud_val+0x140>
    51da:	9b00      	ldr	r3, [sp, #0]
    51dc:	4283      	cmp	r3, r0
    51de:	d806      	bhi.n	51ee <_sercom_get_async_baud_val+0x14e>
    51e0:	9b00      	ldr	r3, [sp, #0]
    51e2:	9c01      	ldr	r4, [sp, #4]
    51e4:	1ac0      	subs	r0, r0, r3
    51e6:	41a1      	sbcs	r1, r4
    51e8:	4663      	mov	r3, ip
    51ea:	433b      	orrs	r3, r7
    51ec:	469c      	mov	ip, r3
    51ee:	3a01      	subs	r2, #1
    51f0:	d309      	bcc.n	5206 <_sercom_get_async_baud_val+0x166>
    51f2:	2320      	movs	r3, #32
    51f4:	425b      	negs	r3, r3
    51f6:	18d3      	adds	r3, r2, r3
    51f8:	d5d3      	bpl.n	51a2 <_sercom_get_async_baud_val+0x102>
    51fa:	465b      	mov	r3, fp
    51fc:	2401      	movs	r4, #1
    51fe:	1a9b      	subs	r3, r3, r2
    5200:	40dc      	lsrs	r4, r3
    5202:	1c23      	adds	r3, r4, #0
    5204:	e7d0      	b.n	51a8 <_sercom_get_async_baud_val+0x108>
    5206:	4661      	mov	r1, ip
    5208:	9a03      	ldr	r2, [sp, #12]
    520a:	1a8b      	subs	r3, r1, r2
    520c:	4907      	ldr	r1, [pc, #28]	; (522c <_sercom_get_async_baud_val+0x18c>)
    520e:	08db      	lsrs	r3, r3, #3
    5210:	428b      	cmp	r3, r1
    5212:	d906      	bls.n	5222 <_sercom_get_async_baud_val+0x182>
    5214:	1c13      	adds	r3, r2, #0
    5216:	3301      	adds	r3, #1
    5218:	9303      	str	r3, [sp, #12]
    521a:	2b08      	cmp	r3, #8
    521c:	d1b8      	bne.n	5190 <_sercom_get_async_baud_val+0xf0>
    521e:	2040      	movs	r0, #64	; 0x40
    5220:	e74d      	b.n	50be <_sercom_get_async_baud_val+0x1e>
    5222:	9a05      	ldr	r2, [sp, #20]
    5224:	0354      	lsls	r4, r2, #13
    5226:	431c      	orrs	r4, r3
    5228:	b2a4      	uxth	r4, r4
    522a:	e797      	b.n	515c <_sercom_get_async_baud_val+0xbc>
    522c:	00001fff 	.word	0x00001fff

00005230 <sercom_set_gclk_generator>:
    5230:	b530      	push	{r4, r5, lr}
    5232:	4c0e      	ldr	r4, [pc, #56]	; (526c <sercom_set_gclk_generator+0x3c>)
    5234:	b083      	sub	sp, #12
    5236:	7823      	ldrb	r3, [r4, #0]
    5238:	1c05      	adds	r5, r0, #0
    523a:	2b00      	cmp	r3, #0
    523c:	d006      	beq.n	524c <sercom_set_gclk_generator+0x1c>
    523e:	2900      	cmp	r1, #0
    5240:	d104      	bne.n	524c <sercom_set_gclk_generator+0x1c>
    5242:	7863      	ldrb	r3, [r4, #1]
    5244:	4283      	cmp	r3, r0
    5246:	d00f      	beq.n	5268 <sercom_set_gclk_generator+0x38>
    5248:	201d      	movs	r0, #29
    524a:	e00b      	b.n	5264 <sercom_set_gclk_generator+0x34>
    524c:	a901      	add	r1, sp, #4
    524e:	2013      	movs	r0, #19
    5250:	700d      	strb	r5, [r1, #0]
    5252:	f7ff f91d 	bl	4490 <system_gclk_chan_set_config>
    5256:	2013      	movs	r0, #19
    5258:	f7ff f8dc 	bl	4414 <system_gclk_chan_enable>
    525c:	2301      	movs	r3, #1
    525e:	2000      	movs	r0, #0
    5260:	7065      	strb	r5, [r4, #1]
    5262:	7023      	strb	r3, [r4, #0]
    5264:	b003      	add	sp, #12
    5266:	bd30      	pop	{r4, r5, pc}
    5268:	2000      	movs	r0, #0
    526a:	e7fb      	b.n	5264 <sercom_set_gclk_generator+0x34>
    526c:	200046e0 	.word	0x200046e0

00005270 <_sercom_get_sercom_inst_index>:
    5270:	b570      	push	{r4, r5, r6, lr}
    5272:	b086      	sub	sp, #24
    5274:	4669      	mov	r1, sp
    5276:	4b09      	ldr	r3, [pc, #36]	; (529c <_sercom_get_sercom_inst_index+0x2c>)
    5278:	466a      	mov	r2, sp
    527a:	cb70      	ldmia	r3!, {r4, r5, r6}
    527c:	c170      	stmia	r1!, {r4, r5, r6}
    527e:	cb70      	ldmia	r3!, {r4, r5, r6}
    5280:	c170      	stmia	r1!, {r4, r5, r6}
    5282:	2300      	movs	r3, #0
    5284:	0099      	lsls	r1, r3, #2
    5286:	5851      	ldr	r1, [r2, r1]
    5288:	4281      	cmp	r1, r0
    528a:	d005      	beq.n	5298 <_sercom_get_sercom_inst_index+0x28>
    528c:	3301      	adds	r3, #1
    528e:	2b06      	cmp	r3, #6
    5290:	d1f8      	bne.n	5284 <_sercom_get_sercom_inst_index+0x14>
    5292:	2000      	movs	r0, #0
    5294:	b006      	add	sp, #24
    5296:	bd70      	pop	{r4, r5, r6, pc}
    5298:	b2d8      	uxtb	r0, r3
    529a:	e7fb      	b.n	5294 <_sercom_get_sercom_inst_index+0x24>
    529c:	0000f5c4 	.word	0x0000f5c4

000052a0 <system_clock_source_get_hz>:
    52a0:	b510      	push	{r4, lr}
    52a2:	2808      	cmp	r0, #8
    52a4:	d82c      	bhi.n	5300 <system_clock_source_get_hz+0x60>
    52a6:	4b1b      	ldr	r3, [pc, #108]	; (5314 <system_clock_source_get_hz+0x74>)
    52a8:	0080      	lsls	r0, r0, #2
    52aa:	581b      	ldr	r3, [r3, r0]
    52ac:	469f      	mov	pc, r3
    52ae:	2080      	movs	r0, #128	; 0x80
    52b0:	0200      	lsls	r0, r0, #8
    52b2:	bd10      	pop	{r4, pc}
    52b4:	4b18      	ldr	r3, [pc, #96]	; (5318 <system_clock_source_get_hz+0x78>)
    52b6:	6958      	ldr	r0, [r3, #20]
    52b8:	e7fb      	b.n	52b2 <system_clock_source_get_hz+0x12>
    52ba:	4b18      	ldr	r3, [pc, #96]	; (531c <system_clock_source_get_hz+0x7c>)
    52bc:	6a18      	ldr	r0, [r3, #32]
    52be:	4b18      	ldr	r3, [pc, #96]	; (5320 <system_clock_source_get_hz+0x80>)
    52c0:	0580      	lsls	r0, r0, #22
    52c2:	0f80      	lsrs	r0, r0, #30
    52c4:	40c3      	lsrs	r3, r0
    52c6:	1c18      	adds	r0, r3, #0
    52c8:	e7f3      	b.n	52b2 <system_clock_source_get_hz+0x12>
    52ca:	2002      	movs	r0, #2
    52cc:	4c12      	ldr	r4, [pc, #72]	; (5318 <system_clock_source_get_hz+0x78>)
    52ce:	6823      	ldr	r3, [r4, #0]
    52d0:	4018      	ands	r0, r3
    52d2:	d0ee      	beq.n	52b2 <system_clock_source_get_hz+0x12>
    52d4:	2210      	movs	r2, #16
    52d6:	4911      	ldr	r1, [pc, #68]	; (531c <system_clock_source_get_hz+0x7c>)
    52d8:	68cb      	ldr	r3, [r1, #12]
    52da:	421a      	tst	r2, r3
    52dc:	d0fc      	beq.n	52d8 <system_clock_source_get_hz+0x38>
    52de:	6823      	ldr	r3, [r4, #0]
    52e0:	075b      	lsls	r3, r3, #29
    52e2:	d40f      	bmi.n	5304 <system_clock_source_get_hz+0x64>
    52e4:	480f      	ldr	r0, [pc, #60]	; (5324 <system_clock_source_get_hz+0x84>)
    52e6:	e7e4      	b.n	52b2 <system_clock_source_get_hz+0x12>
    52e8:	4b0b      	ldr	r3, [pc, #44]	; (5318 <system_clock_source_get_hz+0x78>)
    52ea:	6918      	ldr	r0, [r3, #16]
    52ec:	e7e1      	b.n	52b2 <system_clock_source_get_hz+0x12>
    52ee:	2350      	movs	r3, #80	; 0x50
    52f0:	4a0a      	ldr	r2, [pc, #40]	; (531c <system_clock_source_get_hz+0x7c>)
    52f2:	2000      	movs	r0, #0
    52f4:	5cd3      	ldrb	r3, [r2, r3]
    52f6:	075b      	lsls	r3, r3, #29
    52f8:	d5db      	bpl.n	52b2 <system_clock_source_get_hz+0x12>
    52fa:	4b07      	ldr	r3, [pc, #28]	; (5318 <system_clock_source_get_hz+0x78>)
    52fc:	68d8      	ldr	r0, [r3, #12]
    52fe:	e7d8      	b.n	52b2 <system_clock_source_get_hz+0x12>
    5300:	2000      	movs	r0, #0
    5302:	e7d6      	b.n	52b2 <system_clock_source_get_hz+0x12>
    5304:	2000      	movs	r0, #0
    5306:	f7ff f8e3 	bl	44d0 <system_gclk_chan_get_hz>
    530a:	68a3      	ldr	r3, [r4, #8]
    530c:	041b      	lsls	r3, r3, #16
    530e:	0c1b      	lsrs	r3, r3, #16
    5310:	4358      	muls	r0, r3
    5312:	e7ce      	b.n	52b2 <system_clock_source_get_hz+0x12>
    5314:	0000f5dc 	.word	0x0000f5dc
    5318:	200046e4 	.word	0x200046e4
    531c:	40000800 	.word	0x40000800
    5320:	007a1200 	.word	0x007a1200
    5324:	02dc6c00 	.word	0x02dc6c00

00005328 <system_clock_source_enable>:
    5328:	b510      	push	{r4, lr}
    532a:	2808      	cmp	r0, #8
    532c:	d841      	bhi.n	53b2 <system_clock_source_enable+0x8a>
    532e:	4b22      	ldr	r3, [pc, #136]	; (53b8 <system_clock_source_enable+0x90>)
    5330:	0080      	lsls	r0, r0, #2
    5332:	581b      	ldr	r3, [r3, r0]
    5334:	469f      	mov	pc, r3
    5336:	2000      	movs	r0, #0
    5338:	bd10      	pop	{r4, pc}
    533a:	2302      	movs	r3, #2
    533c:	4a1f      	ldr	r2, [pc, #124]	; (53bc <system_clock_source_enable+0x94>)
    533e:	2000      	movs	r0, #0
    5340:	6991      	ldr	r1, [r2, #24]
    5342:	430b      	orrs	r3, r1
    5344:	6193      	str	r3, [r2, #24]
    5346:	e7f7      	b.n	5338 <system_clock_source_enable+0x10>
    5348:	2302      	movs	r3, #2
    534a:	4a1c      	ldr	r2, [pc, #112]	; (53bc <system_clock_source_enable+0x94>)
    534c:	2000      	movs	r0, #0
    534e:	8a91      	ldrh	r1, [r2, #20]
    5350:	430b      	orrs	r3, r1
    5352:	8293      	strh	r3, [r2, #20]
    5354:	e7f0      	b.n	5338 <system_clock_source_enable+0x10>
    5356:	2302      	movs	r3, #2
    5358:	4a18      	ldr	r2, [pc, #96]	; (53bc <system_clock_source_enable+0x94>)
    535a:	2000      	movs	r0, #0
    535c:	6a11      	ldr	r1, [r2, #32]
    535e:	430b      	orrs	r3, r1
    5360:	6213      	str	r3, [r2, #32]
    5362:	e7e9      	b.n	5338 <system_clock_source_enable+0x10>
    5364:	2302      	movs	r3, #2
    5366:	2010      	movs	r0, #16
    5368:	4c15      	ldr	r4, [pc, #84]	; (53c0 <system_clock_source_enable+0x98>)
    536a:	6822      	ldr	r2, [r4, #0]
    536c:	4313      	orrs	r3, r2
    536e:	6023      	str	r3, [r4, #0]
    5370:	6822      	ldr	r2, [r4, #0]
    5372:	4b14      	ldr	r3, [pc, #80]	; (53c4 <system_clock_source_enable+0x9c>)
    5374:	4013      	ands	r3, r2
    5376:	4a11      	ldr	r2, [pc, #68]	; (53bc <system_clock_source_enable+0x94>)
    5378:	8493      	strh	r3, [r2, #36]	; 0x24
    537a:	68d3      	ldr	r3, [r2, #12]
    537c:	490f      	ldr	r1, [pc, #60]	; (53bc <system_clock_source_enable+0x94>)
    537e:	4218      	tst	r0, r3
    5380:	d0fb      	beq.n	537a <system_clock_source_enable+0x52>
    5382:	68a3      	ldr	r3, [r4, #8]
    5384:	2000      	movs	r0, #0
    5386:	62cb      	str	r3, [r1, #44]	; 0x2c
    5388:	6863      	ldr	r3, [r4, #4]
    538a:	628b      	str	r3, [r1, #40]	; 0x28
    538c:	6823      	ldr	r3, [r4, #0]
    538e:	b29b      	uxth	r3, r3
    5390:	848b      	strh	r3, [r1, #36]	; 0x24
    5392:	e7d1      	b.n	5338 <system_clock_source_enable+0x10>
    5394:	2244      	movs	r2, #68	; 0x44
    5396:	2302      	movs	r3, #2
    5398:	4908      	ldr	r1, [pc, #32]	; (53bc <system_clock_source_enable+0x94>)
    539a:	5c88      	ldrb	r0, [r1, r2]
    539c:	4303      	orrs	r3, r0
    539e:	548b      	strb	r3, [r1, r2]
    53a0:	2000      	movs	r0, #0
    53a2:	e7c9      	b.n	5338 <system_clock_source_enable+0x10>
    53a4:	2302      	movs	r3, #2
    53a6:	4a05      	ldr	r2, [pc, #20]	; (53bc <system_clock_source_enable+0x94>)
    53a8:	2000      	movs	r0, #0
    53aa:	8a11      	ldrh	r1, [r2, #16]
    53ac:	430b      	orrs	r3, r1
    53ae:	8213      	strh	r3, [r2, #16]
    53b0:	e7c2      	b.n	5338 <system_clock_source_enable+0x10>
    53b2:	2017      	movs	r0, #23
    53b4:	e7c0      	b.n	5338 <system_clock_source_enable+0x10>
    53b6:	46c0      	nop			; (mov r8, r8)
    53b8:	0000f600 	.word	0x0000f600
    53bc:	40000800 	.word	0x40000800
    53c0:	200046e4 	.word	0x200046e4
    53c4:	0000ff7f 	.word	0x0000ff7f

000053c8 <system_clock_init>:
    53c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    53ca:	4647      	mov	r7, r8
    53cc:	22c2      	movs	r2, #194	; 0xc2
    53ce:	211e      	movs	r1, #30
    53d0:	b480      	push	{r7}
    53d2:	4b31      	ldr	r3, [pc, #196]	; (5498 <system_clock_init+0xd0>)
    53d4:	00d2      	lsls	r2, r2, #3
    53d6:	609a      	str	r2, [r3, #8]
    53d8:	4a30      	ldr	r2, [pc, #192]	; (549c <system_clock_init+0xd4>)
    53da:	2400      	movs	r4, #0
    53dc:	6853      	ldr	r3, [r2, #4]
    53de:	b084      	sub	sp, #16
    53e0:	438b      	bics	r3, r1
    53e2:	6053      	str	r3, [r2, #4]
    53e4:	2301      	movs	r3, #1
    53e6:	ad01      	add	r5, sp, #4
    53e8:	702b      	strb	r3, [r5, #0]
    53ea:	b2e0      	uxtb	r0, r4
    53ec:	1c29      	adds	r1, r5, #0
    53ee:	3401      	adds	r4, #1
    53f0:	f7ff f84e 	bl	4490 <system_gclk_chan_set_config>
    53f4:	2c25      	cmp	r4, #37	; 0x25
    53f6:	d1f8      	bne.n	53ea <system_clock_init+0x22>
    53f8:	4b29      	ldr	r3, [pc, #164]	; (54a0 <system_clock_init+0xd8>)
    53fa:	4c27      	ldr	r4, [pc, #156]	; (5498 <system_clock_init+0xd0>)
    53fc:	681b      	ldr	r3, [r3, #0]
    53fe:	69a1      	ldr	r1, [r4, #24]
    5400:	04db      	lsls	r3, r3, #19
    5402:	0e5b      	lsrs	r3, r3, #25
    5404:	041a      	lsls	r2, r3, #16
    5406:	4b27      	ldr	r3, [pc, #156]	; (54a4 <system_clock_init+0xdc>)
    5408:	2604      	movs	r6, #4
    540a:	400b      	ands	r3, r1
    540c:	4313      	orrs	r3, r2
    540e:	2208      	movs	r2, #8
    5410:	2740      	movs	r7, #64	; 0x40
    5412:	61a3      	str	r3, [r4, #24]
    5414:	69a3      	ldr	r3, [r4, #24]
    5416:	2004      	movs	r0, #4
    5418:	4333      	orrs	r3, r6
    541a:	4313      	orrs	r3, r2
    541c:	43bb      	bics	r3, r7
    541e:	3278      	adds	r2, #120	; 0x78
    5420:	4690      	mov	r8, r2
    5422:	4313      	orrs	r3, r2
    5424:	22e0      	movs	r2, #224	; 0xe0
    5426:	00d2      	lsls	r2, r2, #3
    5428:	4313      	orrs	r3, r2
    542a:	4a1f      	ldr	r2, [pc, #124]	; (54a8 <system_clock_init+0xe0>)
    542c:	4013      	ands	r3, r2
    542e:	61a3      	str	r3, [r4, #24]
    5430:	f7ff ff7a 	bl	5328 <system_clock_source_enable>
    5434:	4642      	mov	r2, r8
    5436:	6a23      	ldr	r3, [r4, #32]
    5438:	2006      	movs	r0, #6
    543a:	43bb      	bics	r3, r7
    543c:	4313      	orrs	r3, r2
    543e:	4a1b      	ldr	r2, [pc, #108]	; (54ac <system_clock_init+0xe4>)
    5440:	4013      	ands	r3, r2
    5442:	6223      	str	r3, [r4, #32]
    5444:	f7ff ff70 	bl	5328 <system_clock_source_enable>
    5448:	2400      	movs	r4, #0
    544a:	f7fe ff2d 	bl	42a8 <system_gclk_init>
    544e:	2320      	movs	r3, #32
    5450:	1c29      	adds	r1, r5, #0
    5452:	2002      	movs	r0, #2
    5454:	606b      	str	r3, [r5, #4]
    5456:	706c      	strb	r4, [r5, #1]
    5458:	722c      	strb	r4, [r5, #8]
    545a:	726c      	strb	r4, [r5, #9]
    545c:	702e      	strb	r6, [r5, #0]
    545e:	f7fe ff35 	bl	42cc <system_gclk_gen_set_config>
    5462:	2002      	movs	r0, #2
    5464:	f7fe ff7c 	bl	4360 <system_gclk_gen_enable>
    5468:	4b11      	ldr	r3, [pc, #68]	; (54b0 <system_clock_init+0xe8>)
    546a:	1c29      	adds	r1, r5, #0
    546c:	721c      	strb	r4, [r3, #8]
    546e:	725c      	strb	r4, [r3, #9]
    5470:	729c      	strb	r4, [r3, #10]
    5472:	72dc      	strb	r4, [r3, #11]
    5474:	2301      	movs	r3, #1
    5476:	2000      	movs	r0, #0
    5478:	606b      	str	r3, [r5, #4]
    547a:	3305      	adds	r3, #5
    547c:	702b      	strb	r3, [r5, #0]
    547e:	706c      	strb	r4, [r5, #1]
    5480:	722c      	strb	r4, [r5, #8]
    5482:	726c      	strb	r4, [r5, #9]
    5484:	f7fe ff22 	bl	42cc <system_gclk_gen_set_config>
    5488:	2000      	movs	r0, #0
    548a:	f7fe ff69 	bl	4360 <system_gclk_gen_enable>
    548e:	b004      	add	sp, #16
    5490:	bc04      	pop	{r2}
    5492:	4690      	mov	r8, r2
    5494:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5496:	46c0      	nop			; (mov r8, r8)
    5498:	40000800 	.word	0x40000800
    549c:	41004000 	.word	0x41004000
    54a0:	00806024 	.word	0x00806024
    54a4:	ff80ffff 	.word	0xff80ffff
    54a8:	ffffefff 	.word	0xffffefff
    54ac:	fffffcff 	.word	0xfffffcff
    54b0:	40000400 	.word	0x40000400

000054b4 <gpio_init>:
    54b4:	b570      	push	{r4, r5, r6, lr}
    54b6:	1c05      	adds	r5, r0, #0
    54b8:	b082      	sub	sp, #8
    54ba:	1c0c      	adds	r4, r1, #0
    54bc:	1c4b      	adds	r3, r1, #1
    54be:	d028      	beq.n	5512 <gpio_init+0x5e>
    54c0:	b2c8      	uxtb	r0, r1
    54c2:	2900      	cmp	r1, #0
    54c4:	db2c      	blt.n	5520 <gpio_init+0x6c>
    54c6:	4b18      	ldr	r3, [pc, #96]	; (5528 <gpio_init+0x74>)
    54c8:	0946      	lsrs	r6, r0, #5
    54ca:	469c      	mov	ip, r3
    54cc:	01f6      	lsls	r6, r6, #7
    54ce:	4466      	add	r6, ip
    54d0:	702c      	strb	r4, [r5, #0]
    54d2:	17e2      	asrs	r2, r4, #31
    54d4:	0ed2      	lsrs	r2, r2, #27
    54d6:	18a3      	adds	r3, r4, r2
    54d8:	241f      	movs	r4, #31
    54da:	401c      	ands	r4, r3
    54dc:	1aa4      	subs	r4, r4, r2
    54de:	2201      	movs	r2, #1
    54e0:	1c13      	adds	r3, r2, #0
    54e2:	b264      	sxtb	r4, r4
    54e4:	40a3      	lsls	r3, r4
    54e6:	606b      	str	r3, [r5, #4]
    54e8:	2300      	movs	r3, #0
    54ea:	a901      	add	r1, sp, #4
    54ec:	722b      	strb	r3, [r5, #8]
    54ee:	72ab      	strb	r3, [r5, #10]
    54f0:	726a      	strb	r2, [r5, #9]
    54f2:	700b      	strb	r3, [r1, #0]
    54f4:	708b      	strb	r3, [r1, #2]
    54f6:	704a      	strb	r2, [r1, #1]
    54f8:	f000 fe6a 	bl	61d0 <port_pin_set_config>
    54fc:	1c33      	adds	r3, r6, #0
    54fe:	3314      	adds	r3, #20
    5500:	60eb      	str	r3, [r5, #12]
    5502:	3304      	adds	r3, #4
    5504:	612b      	str	r3, [r5, #16]
    5506:	3610      	adds	r6, #16
    5508:	3308      	adds	r3, #8
    550a:	616b      	str	r3, [r5, #20]
    550c:	61ae      	str	r6, [r5, #24]
    550e:	b002      	add	sp, #8
    5510:	bd70      	pop	{r4, r5, r6, pc}
    5512:	4806      	ldr	r0, [pc, #24]	; (552c <gpio_init+0x78>)
    5514:	4906      	ldr	r1, [pc, #24]	; (5530 <gpio_init+0x7c>)
    5516:	221f      	movs	r2, #31
    5518:	f7ff fd2a 	bl	4f70 <mbed_assert_internal>
    551c:	702c      	strb	r4, [r5, #0]
    551e:	e7f6      	b.n	550e <gpio_init+0x5a>
    5520:	702c      	strb	r4, [r5, #0]
    5522:	2600      	movs	r6, #0
    5524:	e7d5      	b.n	54d2 <gpio_init+0x1e>
    5526:	46c0      	nop			; (mov r8, r8)
    5528:	41004400 	.word	0x41004400
    552c:	0000f624 	.word	0x0000f624
    5530:	0000f638 	.word	0x0000f638

00005534 <gpio_mode>:
    5534:	b530      	push	{r4, r5, lr}
    5536:	1c04      	adds	r4, r0, #0
    5538:	7800      	ldrb	r0, [r0, #0]
    553a:	b083      	sub	sp, #12
    553c:	b243      	sxtb	r3, r0
    553e:	1c0d      	adds	r5, r1, #0
    5540:	3301      	adds	r3, #1
    5542:	d013      	beq.n	556c <gpio_mode+0x38>
    5544:	7aa3      	ldrb	r3, [r4, #10]
    5546:	a901      	add	r1, sp, #4
    5548:	700b      	strb	r3, [r1, #0]
    554a:	7a23      	ldrb	r3, [r4, #8]
    554c:	7265      	strb	r5, [r4, #9]
    554e:	1e5a      	subs	r2, r3, #1
    5550:	4193      	sbcs	r3, r2
    5552:	708b      	strb	r3, [r1, #2]
    5554:	2d01      	cmp	r5, #1
    5556:	d003      	beq.n	5560 <gpio_mode+0x2c>
    5558:	2d00      	cmp	r5, #0
    555a:	d001      	beq.n	5560 <gpio_mode+0x2c>
    555c:	2d02      	cmp	r5, #2
    555e:	d100      	bne.n	5562 <gpio_mode+0x2e>
    5560:	704d      	strb	r5, [r1, #1]
    5562:	b2c0      	uxtb	r0, r0
    5564:	f000 fe34 	bl	61d0 <port_pin_set_config>
    5568:	b003      	add	sp, #12
    556a:	bd30      	pop	{r4, r5, pc}
    556c:	4803      	ldr	r0, [pc, #12]	; (557c <gpio_mode+0x48>)
    556e:	4904      	ldr	r1, [pc, #16]	; (5580 <gpio_mode+0x4c>)
    5570:	2236      	movs	r2, #54	; 0x36
    5572:	f7ff fcfd 	bl	4f70 <mbed_assert_internal>
    5576:	7820      	ldrb	r0, [r4, #0]
    5578:	e7e4      	b.n	5544 <gpio_mode+0x10>
    557a:	46c0      	nop			; (mov r8, r8)
    557c:	0000eac0 	.word	0x0000eac0
    5580:	0000f638 	.word	0x0000f638

00005584 <gpio_dir>:
    5584:	b530      	push	{r4, r5, lr}
    5586:	1c04      	adds	r4, r0, #0
    5588:	7800      	ldrb	r0, [r0, #0]
    558a:	b083      	sub	sp, #12
    558c:	b243      	sxtb	r3, r0
    558e:	1c0d      	adds	r5, r1, #0
    5590:	3301      	adds	r3, #1
    5592:	d013      	beq.n	55bc <gpio_dir+0x38>
    5594:	7a63      	ldrb	r3, [r4, #9]
    5596:	a901      	add	r1, sp, #4
    5598:	704b      	strb	r3, [r1, #1]
    559a:	7a23      	ldrb	r3, [r4, #8]
    559c:	72a5      	strb	r5, [r4, #10]
    559e:	1e5a      	subs	r2, r3, #1
    55a0:	4193      	sbcs	r3, r2
    55a2:	708b      	strb	r3, [r1, #2]
    55a4:	2d01      	cmp	r5, #1
    55a6:	d003      	beq.n	55b0 <gpio_dir+0x2c>
    55a8:	2d00      	cmp	r5, #0
    55aa:	d001      	beq.n	55b0 <gpio_dir+0x2c>
    55ac:	2d02      	cmp	r5, #2
    55ae:	d100      	bne.n	55b2 <gpio_dir+0x2e>
    55b0:	700d      	strb	r5, [r1, #0]
    55b2:	b2c0      	uxtb	r0, r0
    55b4:	f000 fe0c 	bl	61d0 <port_pin_set_config>
    55b8:	b003      	add	sp, #12
    55ba:	bd30      	pop	{r4, r5, pc}
    55bc:	4803      	ldr	r0, [pc, #12]	; (55cc <gpio_dir+0x48>)
    55be:	4904      	ldr	r1, [pc, #16]	; (55d0 <gpio_dir+0x4c>)
    55c0:	224c      	movs	r2, #76	; 0x4c
    55c2:	f7ff fcd5 	bl	4f70 <mbed_assert_internal>
    55c6:	7820      	ldrb	r0, [r4, #0]
    55c8:	e7e4      	b.n	5594 <gpio_dir+0x10>
    55ca:	46c0      	nop			; (mov r8, r8)
    55cc:	0000eac0 	.word	0x0000eac0
    55d0:	0000f638 	.word	0x0000f638

000055d4 <pin_mode>:
    55d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    55d6:	4645      	mov	r5, r8
    55d8:	4657      	mov	r7, sl
    55da:	464e      	mov	r6, r9
    55dc:	b4e0      	push	{r5, r6, r7}
    55de:	4688      	mov	r8, r1
    55e0:	b082      	sub	sp, #8
    55e2:	1c05      	adds	r5, r0, #0
    55e4:	1c43      	adds	r3, r0, #1
    55e6:	d062      	beq.n	56ae <pin_mode+0xda>
    55e8:	17c4      	asrs	r4, r0, #31
    55ea:	0ee2      	lsrs	r2, r4, #27
    55ec:	241f      	movs	r4, #31
    55ee:	2701      	movs	r7, #1
    55f0:	1883      	adds	r3, r0, r2
    55f2:	401c      	ands	r4, r3
    55f4:	1aa4      	subs	r4, r4, r2
    55f6:	b264      	sxtb	r4, r4
    55f8:	40a7      	lsls	r7, r4
    55fa:	b2c6      	uxtb	r6, r0
    55fc:	46ba      	mov	sl, r7
    55fe:	0975      	lsrs	r5, r6, #5
    5600:	09f3      	lsrs	r3, r6, #7
    5602:	d13e      	bne.n	5682 <pin_mode+0xae>
    5604:	4b37      	ldr	r3, [pc, #220]	; (56e4 <pin_mode+0x110>)
    5606:	01ed      	lsls	r5, r5, #7
    5608:	469c      	mov	ip, r3
    560a:	4465      	add	r5, ip
    560c:	2d00      	cmp	r5, #0
    560e:	d062      	beq.n	56d6 <pin_mode+0x102>
    5610:	1c28      	adds	r0, r5, #0
    5612:	231f      	movs	r3, #31
    5614:	4033      	ands	r3, r6
    5616:	18c2      	adds	r2, r0, r3
    5618:	3240      	adds	r2, #64	; 0x40
    561a:	7812      	ldrb	r2, [r2, #0]
    561c:	2101      	movs	r1, #1
    561e:	4694      	mov	ip, r2
    5620:	4667      	mov	r7, ip
    5622:	2280      	movs	r2, #128	; 0x80
    5624:	4239      	tst	r1, r7
    5626:	d136      	bne.n	5696 <pin_mode+0xc2>
    5628:	a901      	add	r1, sp, #4
    562a:	700a      	strb	r2, [r1, #0]
    562c:	2202      	movs	r2, #2
    562e:	192c      	adds	r4, r5, r4
    5630:	3440      	adds	r4, #64	; 0x40
    5632:	7823      	ldrb	r3, [r4, #0]
    5634:	421a      	tst	r2, r3
    5636:	d010      	beq.n	565a <pin_mode+0x86>
    5638:	4650      	mov	r0, sl
    563a:	682b      	ldr	r3, [r5, #0]
    563c:	4003      	ands	r3, r0
    563e:	d134      	bne.n	56aa <pin_mode+0xd6>
    5640:	704b      	strb	r3, [r1, #1]
    5642:	7823      	ldrb	r3, [r4, #0]
    5644:	075b      	lsls	r3, r3, #29
    5646:	d50a      	bpl.n	565e <pin_mode+0x8a>
    5648:	692b      	ldr	r3, [r5, #16]
    564a:	4642      	mov	r2, r8
    564c:	2300      	movs	r3, #0
    564e:	70cb      	strb	r3, [r1, #3]
    5650:	2a01      	cmp	r2, #1
    5652:	d109      	bne.n	5668 <pin_mode+0x94>
    5654:	4643      	mov	r3, r8
    5656:	708b      	strb	r3, [r1, #2]
    5658:	e00a      	b.n	5670 <pin_mode+0x9c>
    565a:	2301      	movs	r3, #1
    565c:	704b      	strb	r3, [r1, #1]
    565e:	2300      	movs	r3, #0
    5660:	4642      	mov	r2, r8
    5662:	70cb      	strb	r3, [r1, #3]
    5664:	2a01      	cmp	r2, #1
    5666:	d0f5      	beq.n	5654 <pin_mode+0x80>
    5668:	4642      	mov	r2, r8
    566a:	2a02      	cmp	r2, #2
    566c:	d0f2      	beq.n	5654 <pin_mode+0x80>
    566e:	708b      	strb	r3, [r1, #2]
    5670:	1c30      	adds	r0, r6, #0
    5672:	f7fe fe03 	bl	427c <system_pinmux_pin_set_config>
    5676:	b002      	add	sp, #8
    5678:	bc1c      	pop	{r2, r3, r4}
    567a:	4690      	mov	r8, r2
    567c:	4699      	mov	r9, r3
    567e:	46a2      	mov	sl, r4
    5680:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5682:	4b19      	ldr	r3, [pc, #100]	; (56e8 <pin_mode+0x114>)
    5684:	4699      	mov	r9, r3
    5686:	4819      	ldr	r0, [pc, #100]	; (56ec <pin_mode+0x118>)
    5688:	4649      	mov	r1, r9
    568a:	2223      	movs	r2, #35	; 0x23
    568c:	f7ff fc70 	bl	4f70 <mbed_assert_internal>
    5690:	2500      	movs	r5, #0
    5692:	2000      	movs	r0, #0
    5694:	e7bd      	b.n	5612 <pin_mode+0x3e>
    5696:	085b      	lsrs	r3, r3, #1
    5698:	18c3      	adds	r3, r0, r3
    569a:	3330      	adds	r3, #48	; 0x30
    569c:	781a      	ldrb	r2, [r3, #0]
    569e:	b2d2      	uxtb	r2, r2
    56a0:	4231      	tst	r1, r6
    56a2:	d116      	bne.n	56d2 <pin_mode+0xfe>
    56a4:	230f      	movs	r3, #15
    56a6:	401a      	ands	r2, r3
    56a8:	e7be      	b.n	5628 <pin_mode+0x54>
    56aa:	704a      	strb	r2, [r1, #1]
    56ac:	e7d7      	b.n	565e <pin_mode+0x8a>
    56ae:	4b0e      	ldr	r3, [pc, #56]	; (56e8 <pin_mode+0x114>)
    56b0:	4c0f      	ldr	r4, [pc, #60]	; (56f0 <pin_mode+0x11c>)
    56b2:	4699      	mov	r9, r3
    56b4:	1c19      	adds	r1, r3, #0
    56b6:	1c20      	adds	r0, r4, #0
    56b8:	225c      	movs	r2, #92	; 0x5c
    56ba:	f7ff fc59 	bl	4f70 <mbed_assert_internal>
    56be:	1c20      	adds	r0, r4, #0
    56c0:	4649      	mov	r1, r9
    56c2:	221e      	movs	r2, #30
    56c4:	f7ff fc54 	bl	4f70 <mbed_assert_internal>
    56c8:	2300      	movs	r3, #0
    56ca:	26ff      	movs	r6, #255	; 0xff
    56cc:	469a      	mov	sl, r3
    56ce:	1c2c      	adds	r4, r5, #0
    56d0:	e7d9      	b.n	5686 <pin_mode+0xb2>
    56d2:	0912      	lsrs	r2, r2, #4
    56d4:	e7a8      	b.n	5628 <pin_mode+0x54>
    56d6:	4805      	ldr	r0, [pc, #20]	; (56ec <pin_mode+0x118>)
    56d8:	4903      	ldr	r1, [pc, #12]	; (56e8 <pin_mode+0x114>)
    56da:	2223      	movs	r2, #35	; 0x23
    56dc:	f7ff fc48 	bl	4f70 <mbed_assert_internal>
    56e0:	2000      	movs	r0, #0
    56e2:	e796      	b.n	5612 <pin_mode+0x3e>
    56e4:	41004400 	.word	0x41004400
    56e8:	0000f6a0 	.word	0x0000f6a0
    56ec:	0000f708 	.word	0x0000f708
    56f0:	0000f624 	.word	0x0000f624

000056f4 <pinmap_find_peripheral_from_pad.part.0>:
    56f4:	b510      	push	{r4, lr}
    56f6:	1c04      	adds	r4, r0, #0
    56f8:	2901      	cmp	r1, #1
    56fa:	d004      	beq.n	5706 <pinmap_find_peripheral_from_pad.part.0+0x12>
    56fc:	1c20      	adds	r0, r4, #0
    56fe:	4905      	ldr	r1, [pc, #20]	; (5714 <pinmap_find_peripheral_from_pad.part.0+0x20>)
    5700:	f7ff fc6a 	bl	4fd8 <pinmap_find_peripheral>
    5704:	bd10      	pop	{r4, pc}
    5706:	4904      	ldr	r1, [pc, #16]	; (5718 <pinmap_find_peripheral_from_pad.part.0+0x24>)
    5708:	f7ff fc66 	bl	4fd8 <pinmap_find_peripheral>
    570c:	1c43      	adds	r3, r0, #1
    570e:	d1f9      	bne.n	5704 <pinmap_find_peripheral_from_pad.part.0+0x10>
    5710:	e7f4      	b.n	56fc <pinmap_find_peripheral_from_pad.part.0+0x8>
    5712:	46c0      	nop			; (mov r8, r8)
    5714:	0000f438 	.word	0x0000f438
    5718:	0000f3b4 	.word	0x0000f3b4

0000571c <pinmap_merge_sercom>:
    571c:	b538      	push	{r3, r4, r5, lr}
    571e:	1c0d      	adds	r5, r1, #0
    5720:	1c43      	adds	r3, r0, #1
    5722:	d01b      	beq.n	575c <pinmap_merge_sercom+0x40>
    5724:	2100      	movs	r1, #0
    5726:	f7ff ffe5 	bl	56f4 <pinmap_find_peripheral_from_pad.part.0>
    572a:	1c43      	adds	r3, r0, #1
    572c:	d016      	beq.n	575c <pinmap_merge_sercom+0x40>
    572e:	240f      	movs	r4, #15
    5730:	4004      	ands	r4, r0
    5732:	1c28      	adds	r0, r5, #0
    5734:	1c6b      	adds	r3, r5, #1
    5736:	d008      	beq.n	574a <pinmap_merge_sercom+0x2e>
    5738:	2100      	movs	r1, #0
    573a:	f7ff ffdb 	bl	56f4 <pinmap_find_peripheral_from_pad.part.0>
    573e:	1c43      	adds	r3, r0, #1
    5740:	d003      	beq.n	574a <pinmap_merge_sercom+0x2e>
    5742:	230f      	movs	r3, #15
    5744:	4018      	ands	r0, r3
    5746:	42a0      	cmp	r0, r4
    5748:	d006      	beq.n	5758 <pinmap_merge_sercom+0x3c>
    574a:	1c63      	adds	r3, r4, #1
    574c:	d003      	beq.n	5756 <pinmap_merge_sercom+0x3a>
    574e:	1c43      	adds	r3, r0, #1
    5750:	d002      	beq.n	5758 <pinmap_merge_sercom+0x3c>
    5752:	2001      	movs	r0, #1
    5754:	4240      	negs	r0, r0
    5756:	bd38      	pop	{r3, r4, r5, pc}
    5758:	1c20      	adds	r0, r4, #0
    575a:	e7fc      	b.n	5756 <pinmap_merge_sercom+0x3a>
    575c:	1c28      	adds	r0, r5, #0
    575e:	1c6b      	adds	r3, r5, #1
    5760:	d0f9      	beq.n	5756 <pinmap_merge_sercom+0x3a>
    5762:	2100      	movs	r1, #0
    5764:	2401      	movs	r4, #1
    5766:	f7ff ffc5 	bl	56f4 <pinmap_find_peripheral_from_pad.part.0>
    576a:	4264      	negs	r4, r4
    576c:	1c43      	adds	r3, r0, #1
    576e:	d1e8      	bne.n	5742 <pinmap_merge_sercom+0x26>
    5770:	e7f1      	b.n	5756 <pinmap_merge_sercom+0x3a>
    5772:	46c0      	nop			; (mov r8, r8)

00005774 <pinmap_find_sercom>:
    5774:	b5f0      	push	{r4, r5, r6, r7, lr}
    5776:	1c0f      	adds	r7, r1, #0
    5778:	b085      	sub	sp, #20
    577a:	1c16      	adds	r6, r2, #0
    577c:	1c1d      	adds	r5, r3, #0
    577e:	1c04      	adds	r4, r0, #0
    5780:	1c43      	adds	r3, r0, #1
    5782:	d003      	beq.n	578c <pinmap_find_sercom+0x18>
    5784:	2100      	movs	r1, #0
    5786:	f7ff ffb5 	bl	56f4 <pinmap_find_peripheral_from_pad.part.0>
    578a:	1c04      	adds	r4, r0, #0
    578c:	9400      	str	r4, [sp, #0]
    578e:	1c38      	adds	r0, r7, #0
    5790:	1c7b      	adds	r3, r7, #1
    5792:	d002      	beq.n	579a <pinmap_find_sercom+0x26>
    5794:	2100      	movs	r1, #0
    5796:	f7ff ffad 	bl	56f4 <pinmap_find_peripheral_from_pad.part.0>
    579a:	9001      	str	r0, [sp, #4]
    579c:	1c30      	adds	r0, r6, #0
    579e:	1c73      	adds	r3, r6, #1
    57a0:	d002      	beq.n	57a8 <pinmap_find_sercom+0x34>
    57a2:	2100      	movs	r1, #0
    57a4:	f7ff ffa6 	bl	56f4 <pinmap_find_peripheral_from_pad.part.0>
    57a8:	9002      	str	r0, [sp, #8]
    57aa:	1c28      	adds	r0, r5, #0
    57ac:	1c6b      	adds	r3, r5, #1
    57ae:	d002      	beq.n	57b6 <pinmap_find_sercom+0x42>
    57b0:	2100      	movs	r1, #0
    57b2:	f7ff ff9f 	bl	56f4 <pinmap_find_peripheral_from_pad.part.0>
    57b6:	9003      	str	r0, [sp, #12]
    57b8:	2001      	movs	r0, #1
    57ba:	2300      	movs	r3, #0
    57bc:	4240      	negs	r0, r0
    57be:	220f      	movs	r2, #15
    57c0:	1c61      	adds	r1, r4, #1
    57c2:	d004      	beq.n	57ce <pinmap_find_sercom+0x5a>
    57c4:	1c41      	adds	r1, r0, #1
    57c6:	d00b      	beq.n	57e0 <pinmap_find_sercom+0x6c>
    57c8:	4014      	ands	r4, r2
    57ca:	4284      	cmp	r4, r0
    57cc:	d10f      	bne.n	57ee <pinmap_find_sercom+0x7a>
    57ce:	3304      	adds	r3, #4
    57d0:	2b10      	cmp	r3, #16
    57d2:	d00a      	beq.n	57ea <pinmap_find_sercom+0x76>
    57d4:	4669      	mov	r1, sp
    57d6:	58cc      	ldr	r4, [r1, r3]
    57d8:	1c61      	adds	r1, r4, #1
    57da:	d0f8      	beq.n	57ce <pinmap_find_sercom+0x5a>
    57dc:	1c41      	adds	r1, r0, #1
    57de:	d1f3      	bne.n	57c8 <pinmap_find_sercom+0x54>
    57e0:	1c20      	adds	r0, r4, #0
    57e2:	3304      	adds	r3, #4
    57e4:	4010      	ands	r0, r2
    57e6:	2b10      	cmp	r3, #16
    57e8:	d1f4      	bne.n	57d4 <pinmap_find_sercom+0x60>
    57ea:	b005      	add	sp, #20
    57ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    57ee:	2001      	movs	r0, #1
    57f0:	4240      	negs	r0, r0
    57f2:	e7fa      	b.n	57ea <pinmap_find_sercom+0x76>

000057f4 <pinmap_function_sercom>:
    57f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    57f6:	1c43      	adds	r3, r0, #1
    57f8:	d004      	beq.n	5804 <pinmap_function_sercom+0x10>
    57fa:	260f      	movs	r6, #15
    57fc:	4031      	ands	r1, r6
    57fe:	1e0d      	subs	r5, r1, #0
    5800:	2d05      	cmp	r5, #5
    5802:	d902      	bls.n	580a <pinmap_function_sercom+0x16>
    5804:	2001      	movs	r0, #1
    5806:	4240      	negs	r0, r0
    5808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    580a:	4f0a      	ldr	r7, [pc, #40]	; (5834 <pinmap_function_sercom+0x40>)
    580c:	1c04      	adds	r4, r0, #0
    580e:	1c39      	adds	r1, r7, #0
    5810:	f7ff fbee 	bl	4ff0 <pinmap_peripheral>
    5814:	4030      	ands	r0, r6
    5816:	42a8      	cmp	r0, r5
    5818:	d007      	beq.n	582a <pinmap_function_sercom+0x36>
    581a:	4f07      	ldr	r7, [pc, #28]	; (5838 <pinmap_function_sercom+0x44>)
    581c:	1c20      	adds	r0, r4, #0
    581e:	1c39      	adds	r1, r7, #0
    5820:	f7ff fbe6 	bl	4ff0 <pinmap_peripheral>
    5824:	4006      	ands	r6, r0
    5826:	42ae      	cmp	r6, r5
    5828:	d1ec      	bne.n	5804 <pinmap_function_sercom+0x10>
    582a:	1c20      	adds	r0, r4, #0
    582c:	1c39      	adds	r1, r7, #0
    582e:	f7ff fbf7 	bl	5020 <pinmap_function>
    5832:	e7e9      	b.n	5808 <pinmap_function_sercom+0x14>
    5834:	0000f438 	.word	0x0000f438
    5838:	0000f3b4 	.word	0x0000f3b4

0000583c <pinmap_pad_sercom>:
    583c:	b570      	push	{r4, r5, r6, lr}
    583e:	1c43      	adds	r3, r0, #1
    5840:	d004      	beq.n	584c <pinmap_pad_sercom+0x10>
    5842:	240f      	movs	r4, #15
    5844:	4021      	ands	r1, r4
    5846:	1e0d      	subs	r5, r1, #0
    5848:	2d05      	cmp	r5, #5
    584a:	d902      	bls.n	5852 <pinmap_pad_sercom+0x16>
    584c:	2001      	movs	r0, #1
    584e:	4240      	negs	r0, r0
    5850:	bd70      	pop	{r4, r5, r6, pc}
    5852:	4909      	ldr	r1, [pc, #36]	; (5878 <pinmap_pad_sercom+0x3c>)
    5854:	1c06      	adds	r6, r0, #0
    5856:	f7ff fbcb 	bl	4ff0 <pinmap_peripheral>
    585a:	1c23      	adds	r3, r4, #0
    585c:	4003      	ands	r3, r0
    585e:	42ab      	cmp	r3, r5
    5860:	d007      	beq.n	5872 <pinmap_pad_sercom+0x36>
    5862:	1c30      	adds	r0, r6, #0
    5864:	4905      	ldr	r1, [pc, #20]	; (587c <pinmap_pad_sercom+0x40>)
    5866:	f7ff fbc3 	bl	4ff0 <pinmap_peripheral>
    586a:	1c23      	adds	r3, r4, #0
    586c:	4003      	ands	r3, r0
    586e:	42ab      	cmp	r3, r5
    5870:	d1ec      	bne.n	584c <pinmap_pad_sercom+0x10>
    5872:	0900      	lsrs	r0, r0, #4
    5874:	4020      	ands	r0, r4
    5876:	e7eb      	b.n	5850 <pinmap_pad_sercom+0x14>
    5878:	0000f438 	.word	0x0000f438
    587c:	0000f3b4 	.word	0x0000f3b4

00005880 <pinmap_peripheral_sercom>:
    5880:	b570      	push	{r4, r5, r6, lr}
    5882:	b086      	sub	sp, #24
    5884:	466a      	mov	r2, sp
    5886:	4b08      	ldr	r3, [pc, #32]	; (58a8 <pinmap_peripheral_sercom+0x28>)
    5888:	4668      	mov	r0, sp
    588a:	cb70      	ldmia	r3!, {r4, r5, r6}
    588c:	c270      	stmia	r2!, {r4, r5, r6}
    588e:	cb70      	ldmia	r3!, {r4, r5, r6}
    5890:	c270      	stmia	r2!, {r4, r5, r6}
    5892:	230f      	movs	r3, #15
    5894:	4019      	ands	r1, r3
    5896:	2905      	cmp	r1, #5
    5898:	d903      	bls.n	58a2 <pinmap_peripheral_sercom+0x22>
    589a:	2001      	movs	r0, #1
    589c:	4240      	negs	r0, r0
    589e:	b006      	add	sp, #24
    58a0:	bd70      	pop	{r4, r5, r6, pc}
    58a2:	0089      	lsls	r1, r1, #2
    58a4:	5808      	ldr	r0, [r1, r0]
    58a6:	e7fa      	b.n	589e <pinmap_peripheral_sercom+0x1e>
    58a8:	0000f710 	.word	0x0000f710

000058ac <us_ticker_irq_handler_internal>:
    58ac:	2203      	movs	r2, #3
    58ae:	b508      	push	{r3, lr}
    58b0:	4b02      	ldr	r3, [pc, #8]	; (58bc <us_ticker_irq_handler_internal+0x10>)
    58b2:	681b      	ldr	r3, [r3, #0]
    58b4:	739a      	strb	r2, [r3, #14]
    58b6:	f000 fc83 	bl	61c0 <us_ticker_irq_handler>
    58ba:	bd08      	pop	{r3, pc}
    58bc:	200047a0 	.word	0x200047a0

000058c0 <us_ticker_init.part.5>:
    58c0:	b530      	push	{r4, r5, lr}
    58c2:	2501      	movs	r5, #1
    58c4:	4b35      	ldr	r3, [pc, #212]	; (599c <us_ticker_init.part.5+0xdc>)
    58c6:	4c36      	ldr	r4, [pc, #216]	; (59a0 <us_ticker_init.part.5+0xe0>)
    58c8:	601d      	str	r5, [r3, #0]
    58ca:	7823      	ldrb	r3, [r4, #0]
    58cc:	b08f      	sub	sp, #60	; 0x3c
    58ce:	2b00      	cmp	r3, #0
    58d0:	d05c      	beq.n	598c <us_ticker_init.part.5+0xcc>
    58d2:	2300      	movs	r3, #0
    58d4:	2200      	movs	r2, #0
    58d6:	ac01      	add	r4, sp, #4
    58d8:	7422      	strb	r2, [r4, #16]
    58da:	6163      	str	r3, [r4, #20]
    58dc:	61a3      	str	r3, [r4, #24]
    58de:	7722      	strb	r2, [r4, #28]
    58e0:	6223      	str	r3, [r4, #32]
    58e2:	6263      	str	r3, [r4, #36]	; 0x24
    58e4:	2000      	movs	r0, #0
    58e6:	7023      	strb	r3, [r4, #0]
    58e8:	70a3      	strb	r3, [r4, #2]
    58ea:	80a3      	strh	r3, [r4, #4]
    58ec:	71a2      	strb	r2, [r4, #6]
    58ee:	8123      	strh	r3, [r4, #8]
    58f0:	7062      	strb	r2, [r4, #1]
    58f2:	72a2      	strb	r2, [r4, #10]
    58f4:	72e2      	strb	r2, [r4, #11]
    58f6:	7322      	strb	r2, [r4, #12]
    58f8:	73a2      	strb	r2, [r4, #14]
    58fa:	7362      	strb	r2, [r4, #13]
    58fc:	8523      	strh	r3, [r4, #40]	; 0x28
    58fe:	8563      	strh	r3, [r4, #42]	; 0x2a
    5900:	85a3      	strh	r3, [r4, #44]	; 0x2c
    5902:	f7fe fd4b 	bl	439c <system_gclk_gen_get_hz>
    5906:	4927      	ldr	r1, [pc, #156]	; (59a4 <us_ticker_init.part.5+0xe4>)
    5908:	f000 feb0 	bl	666c <__aeabi_uidiv>
    590c:	2800      	cmp	r0, #0
    590e:	d032      	beq.n	5976 <us_ticker_init.part.5+0xb6>
    5910:	2300      	movs	r3, #0
    5912:	2801      	cmp	r0, #1
    5914:	d007      	beq.n	5926 <us_ticker_init.part.5+0x66>
    5916:	0840      	lsrs	r0, r0, #1
    5918:	3301      	adds	r3, #1
    591a:	2801      	cmp	r0, #1
    591c:	d022      	beq.n	5964 <us_ticker_init.part.5+0xa4>
    591e:	2b0b      	cmp	r3, #11
    5920:	d1f9      	bne.n	5916 <us_ticker_init.part.5+0x56>
    5922:	23e0      	movs	r3, #224	; 0xe0
    5924:	00db      	lsls	r3, r3, #3
    5926:	80a3      	strh	r3, [r4, #4]
    5928:	2308      	movs	r3, #8
    592a:	70a3      	strb	r3, [r4, #2]
    592c:	3b07      	subs	r3, #7
    592e:	7063      	strb	r3, [r4, #1]
    5930:	2300      	movs	r3, #0
    5932:	4d1d      	ldr	r5, [pc, #116]	; (59a8 <us_ticker_init.part.5+0xe8>)
    5934:	62a3      	str	r3, [r4, #40]	; 0x28
    5936:	491d      	ldr	r1, [pc, #116]	; (59ac <us_ticker_init.part.5+0xec>)
    5938:	3b01      	subs	r3, #1
    593a:	1c22      	adds	r2, r4, #0
    593c:	1c28      	adds	r0, r5, #0
    593e:	62e3      	str	r3, [r4, #44]	; 0x2c
    5940:	f000 fcd2 	bl	62e8 <tc_init>
    5944:	491a      	ldr	r1, [pc, #104]	; (59b0 <us_ticker_init.part.5+0xf0>)
    5946:	2202      	movs	r2, #2
    5948:	1c28      	adds	r0, r5, #0
    594a:	f000 fc51 	bl	61f0 <tc_register_callback>
    594e:	217f      	movs	r1, #127	; 0x7f
    5950:	682a      	ldr	r2, [r5, #0]
    5952:	7bd3      	ldrb	r3, [r2, #15]
    5954:	438b      	bics	r3, r1
    5956:	d1fc      	bne.n	5952 <us_ticker_init.part.5+0x92>
    5958:	8811      	ldrh	r1, [r2, #0]
    595a:	3302      	adds	r3, #2
    595c:	430b      	orrs	r3, r1
    595e:	8013      	strh	r3, [r2, #0]
    5960:	b00f      	add	sp, #60	; 0x3c
    5962:	bd30      	pop	{r4, r5, pc}
    5964:	2b08      	cmp	r3, #8
    5966:	d8dc      	bhi.n	5922 <us_ticker_init.part.5+0x62>
    5968:	2b06      	cmp	r3, #6
    596a:	d813      	bhi.n	5994 <us_ticker_init.part.5+0xd4>
    596c:	2b04      	cmp	r3, #4
    596e:	d908      	bls.n	5982 <us_ticker_init.part.5+0xc2>
    5970:	23a0      	movs	r3, #160	; 0xa0
    5972:	00db      	lsls	r3, r3, #3
    5974:	e7d7      	b.n	5926 <us_ticker_init.part.5+0x66>
    5976:	480f      	ldr	r0, [pc, #60]	; (59b4 <us_ticker_init.part.5+0xf4>)
    5978:	490f      	ldr	r1, [pc, #60]	; (59b8 <us_ticker_init.part.5+0xf8>)
    597a:	2257      	movs	r2, #87	; 0x57
    597c:	f7ff faf8 	bl	4f70 <mbed_assert_internal>
    5980:	2300      	movs	r3, #0
    5982:	22e0      	movs	r2, #224	; 0xe0
    5984:	021b      	lsls	r3, r3, #8
    5986:	00d2      	lsls	r2, r2, #3
    5988:	4013      	ands	r3, r2
    598a:	e7cc      	b.n	5926 <us_ticker_init.part.5+0x66>
    598c:	f7fe fdb6 	bl	44fc <system_init>
    5990:	7025      	strb	r5, [r4, #0]
    5992:	e79e      	b.n	58d2 <us_ticker_init.part.5+0x12>
    5994:	23c0      	movs	r3, #192	; 0xc0
    5996:	00db      	lsls	r3, r3, #3
    5998:	e7c5      	b.n	5926 <us_ticker_init.part.5+0x66>
    599a:	46c0      	nop			; (mov r8, r8)
    599c:	200046fc 	.word	0x200046fc
    59a0:	200045b0 	.word	0x200045b0
    59a4:	000f4240 	.word	0x000f4240
    59a8:	200047a0 	.word	0x200047a0
    59ac:	42003000 	.word	0x42003000
    59b0:	000058ad 	.word	0x000058ad
    59b4:	0000f728 	.word	0x0000f728
    59b8:	0000f73c 	.word	0x0000f73c

000059bc <us_ticker_init>:
    59bc:	b508      	push	{r3, lr}
    59be:	4b03      	ldr	r3, [pc, #12]	; (59cc <us_ticker_init+0x10>)
    59c0:	681b      	ldr	r3, [r3, #0]
    59c2:	2b00      	cmp	r3, #0
    59c4:	d101      	bne.n	59ca <us_ticker_init+0xe>
    59c6:	f7ff ff7b 	bl	58c0 <us_ticker_init.part.5>
    59ca:	bd08      	pop	{r3, pc}
    59cc:	200046fc 	.word	0x200046fc

000059d0 <us_ticker_read>:
    59d0:	b508      	push	{r3, lr}
    59d2:	4b05      	ldr	r3, [pc, #20]	; (59e8 <us_ticker_read+0x18>)
    59d4:	681b      	ldr	r3, [r3, #0]
    59d6:	2b00      	cmp	r3, #0
    59d8:	d101      	bne.n	59de <us_ticker_read+0xe>
    59da:	f7ff ff71 	bl	58c0 <us_ticker_init.part.5>
    59de:	4803      	ldr	r0, [pc, #12]	; (59ec <us_ticker_read+0x1c>)
    59e0:	f000 fdd4 	bl	658c <tc_get_count_value>
    59e4:	bd08      	pop	{r3, pc}
    59e6:	46c0      	nop			; (mov r8, r8)
    59e8:	200046fc 	.word	0x200046fc
    59ec:	200047a0 	.word	0x200047a0

000059f0 <us_ticker_set_interrupt>:
    59f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    59f2:	1c06      	adds	r6, r0, #0
    59f4:	f7ff ffec 	bl	59d0 <us_ticker_read>
    59f8:	1a30      	subs	r0, r6, r0
    59fa:	d421      	bmi.n	5a40 <us_ticker_set_interrupt+0x50>
    59fc:	2780      	movs	r7, #128	; 0x80
    59fe:	2380      	movs	r3, #128	; 0x80
    5a00:	4d11      	ldr	r5, [pc, #68]	; (5a48 <us_ticker_set_interrupt+0x58>)
    5a02:	033f      	lsls	r7, r7, #12
    5a04:	50ef      	str	r7, [r5, r3]
    5a06:	4911      	ldr	r1, [pc, #68]	; (5a4c <us_ticker_set_interrupt+0x5c>)
    5a08:	2013      	movs	r0, #19
    5a0a:	f7fe f931 	bl	3c70 <NVIC_SetVector>
    5a0e:	4c10      	ldr	r4, [pc, #64]	; (5a50 <us_ticker_set_interrupt+0x60>)
    5a10:	6820      	ldr	r0, [r4, #0]
    5a12:	f000 fc49 	bl	62a8 <_tc_get_inst_index>
    5a16:	221f      	movs	r2, #31
    5a18:	4b0e      	ldr	r3, [pc, #56]	; (5a54 <us_ticker_set_interrupt+0x64>)
    5a1a:	2100      	movs	r1, #0
    5a1c:	5c1b      	ldrb	r3, [r3, r0]
    5a1e:	1c20      	adds	r0, r4, #0
    5a20:	4013      	ands	r3, r2
    5a22:	3a1e      	subs	r2, #30
    5a24:	409a      	lsls	r2, r3
    5a26:	2310      	movs	r3, #16
    5a28:	602a      	str	r2, [r5, #0]
    5a2a:	7e62      	ldrb	r2, [r4, #25]
    5a2c:	4313      	orrs	r3, r2
    5a2e:	7663      	strb	r3, [r4, #25]
    5a30:	2310      	movs	r3, #16
    5a32:	6822      	ldr	r2, [r4, #0]
    5a34:	7353      	strb	r3, [r2, #13]
    5a36:	1c32      	adds	r2, r6, #0
    5a38:	f000 fdbe 	bl	65b8 <tc_set_compare_value>
    5a3c:	602f      	str	r7, [r5, #0]
    5a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5a40:	f000 fbbe 	bl	61c0 <us_ticker_irq_handler>
    5a44:	e7fb      	b.n	5a3e <us_ticker_set_interrupt+0x4e>
    5a46:	46c0      	nop			; (mov r8, r8)
    5a48:	e000e100 	.word	0xe000e100
    5a4c:	00006291 	.word	0x00006291
    5a50:	200047a0 	.word	0x200047a0
    5a54:	0000f7ac 	.word	0x0000f7ac

00005a58 <us_ticker_disable_interrupt>:
    5a58:	2110      	movs	r1, #16
    5a5a:	4b06      	ldr	r3, [pc, #24]	; (5a74 <us_ticker_disable_interrupt+0x1c>)
    5a5c:	681a      	ldr	r2, [r3, #0]
    5a5e:	7311      	strb	r1, [r2, #12]
    5a60:	7e5a      	ldrb	r2, [r3, #25]
    5a62:	438a      	bics	r2, r1
    5a64:	2180      	movs	r1, #128	; 0x80
    5a66:	765a      	strb	r2, [r3, #25]
    5a68:	2380      	movs	r3, #128	; 0x80
    5a6a:	4a03      	ldr	r2, [pc, #12]	; (5a78 <us_ticker_disable_interrupt+0x20>)
    5a6c:	0309      	lsls	r1, r1, #12
    5a6e:	50d1      	str	r1, [r2, r3]
    5a70:	4770      	bx	lr
    5a72:	46c0      	nop			; (mov r8, r8)
    5a74:	200047a0 	.word	0x200047a0
    5a78:	e000e100 	.word	0xe000e100

00005a7c <us_ticker_clear_interrupt>:
    5a7c:	2210      	movs	r2, #16
    5a7e:	4b05      	ldr	r3, [pc, #20]	; (5a94 <us_ticker_clear_interrupt+0x18>)
    5a80:	2180      	movs	r1, #128	; 0x80
    5a82:	681b      	ldr	r3, [r3, #0]
    5a84:	0309      	lsls	r1, r1, #12
    5a86:	739a      	strb	r2, [r3, #14]
    5a88:	731a      	strb	r2, [r3, #12]
    5a8a:	23c0      	movs	r3, #192	; 0xc0
    5a8c:	4a02      	ldr	r2, [pc, #8]	; (5a98 <us_ticker_clear_interrupt+0x1c>)
    5a8e:	005b      	lsls	r3, r3, #1
    5a90:	50d1      	str	r1, [r2, r3]
    5a92:	4770      	bx	lr
    5a94:	200047a0 	.word	0x200047a0
    5a98:	e000e100 	.word	0xe000e100

00005a9c <spi_find_mux_settings>:
    5a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5a9e:	1e04      	subs	r4, r0, #0
    5aa0:	d03e      	beq.n	5b20 <spi_find_mux_settings+0x84>
    5aa2:	6820      	ldr	r0, [r4, #0]
    5aa4:	f7ff fbe4 	bl	5270 <_sercom_get_sercom_inst_index>
    5aa8:	7923      	ldrb	r3, [r4, #4]
    5aaa:	1c07      	adds	r7, r0, #0
    5aac:	2b01      	cmp	r3, #1
    5aae:	d02a      	beq.n	5b06 <spi_find_mux_settings+0x6a>
    5ab0:	2501      	movs	r5, #1
    5ab2:	2300      	movs	r3, #0
    5ab4:	2005      	movs	r0, #5
    5ab6:	18e3      	adds	r3, r4, r3
    5ab8:	5618      	ldrsb	r0, [r3, r0]
    5aba:	1c43      	adds	r3, r0, #1
    5abc:	d00f      	beq.n	5ade <spi_find_mux_settings+0x42>
    5abe:	1c39      	adds	r1, r7, #0
    5ac0:	f7ff febc 	bl	583c <pinmap_pad_sercom>
    5ac4:	1c43      	adds	r3, r0, #1
    5ac6:	d00a      	beq.n	5ade <spi_find_mux_settings+0x42>
    5ac8:	26c0      	movs	r6, #192	; 0xc0
    5aca:	0500      	lsls	r0, r0, #20
    5acc:	03b6      	lsls	r6, r6, #14
    5ace:	4006      	ands	r6, r0
    5ad0:	2005      	movs	r0, #5
    5ad2:	1965      	adds	r5, r4, r5
    5ad4:	5628      	ldrsb	r0, [r5, r0]
    5ad6:	1c43      	adds	r3, r0, #1
    5ad8:	d107      	bne.n	5aea <spi_find_mux_settings+0x4e>
    5ada:	1c30      	adds	r0, r6, #0
    5adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5ade:	2005      	movs	r0, #5
    5ae0:	1965      	adds	r5, r4, r5
    5ae2:	5628      	ldrsb	r0, [r5, r0]
    5ae4:	2600      	movs	r6, #0
    5ae6:	1c43      	adds	r3, r0, #1
    5ae8:	d0f7      	beq.n	5ada <spi_find_mux_settings+0x3e>
    5aea:	1c39      	adds	r1, r7, #0
    5aec:	f7ff fea6 	bl	583c <pinmap_pad_sercom>
    5af0:	1c43      	adds	r3, r0, #1
    5af2:	d0f2      	beq.n	5ada <spi_find_mux_settings+0x3e>
    5af4:	2800      	cmp	r0, #0
    5af6:	d009      	beq.n	5b0c <spi_find_mux_settings+0x70>
    5af8:	23c0      	movs	r3, #192	; 0xc0
    5afa:	3801      	subs	r0, #1
    5afc:	0400      	lsls	r0, r0, #16
    5afe:	029b      	lsls	r3, r3, #10
    5b00:	4018      	ands	r0, r3
    5b02:	4306      	orrs	r6, r0
    5b04:	e7e9      	b.n	5ada <spi_find_mux_settings+0x3e>
    5b06:	2500      	movs	r5, #0
    5b08:	2301      	movs	r3, #1
    5b0a:	e7d3      	b.n	5ab4 <spi_find_mux_settings+0x18>
    5b0c:	2007      	movs	r0, #7
    5b0e:	1c39      	adds	r1, r7, #0
    5b10:	5620      	ldrsb	r0, [r4, r0]
    5b12:	f7ff fe93 	bl	583c <pinmap_pad_sercom>
    5b16:	2803      	cmp	r0, #3
    5b18:	d008      	beq.n	5b2c <spi_find_mux_settings+0x90>
    5b1a:	2000      	movs	r0, #0
    5b1c:	4306      	orrs	r6, r0
    5b1e:	e7dc      	b.n	5ada <spi_find_mux_settings+0x3e>
    5b20:	4804      	ldr	r0, [pc, #16]	; (5b34 <spi_find_mux_settings+0x98>)
    5b22:	4905      	ldr	r1, [pc, #20]	; (5b38 <spi_find_mux_settings+0x9c>)
    5b24:	22b1      	movs	r2, #177	; 0xb1
    5b26:	f7ff fa23 	bl	4f70 <mbed_assert_internal>
    5b2a:	e7ba      	b.n	5aa2 <spi_find_mux_settings+0x6>
    5b2c:	20c0      	movs	r0, #192	; 0xc0
    5b2e:	0280      	lsls	r0, r0, #10
    5b30:	4306      	orrs	r6, r0
    5b32:	e7d2      	b.n	5ada <spi_find_mux_settings+0x3e>
    5b34:	0000ef30 	.word	0x0000ef30
    5b38:	0000f7b0 	.word	0x0000f7b0

00005b3c <spi_init>:
    5b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b3e:	4644      	mov	r4, r8
    5b40:	465f      	mov	r7, fp
    5b42:	464d      	mov	r5, r9
    5b44:	4656      	mov	r6, sl
    5b46:	b4f0      	push	{r4, r5, r6, r7}
    5b48:	b085      	sub	sp, #20
    5b4a:	4698      	mov	r8, r3
    5b4c:	ab0e      	add	r3, sp, #56	; 0x38
    5b4e:	781b      	ldrb	r3, [r3, #0]
    5b50:	1c04      	adds	r4, r0, #0
    5b52:	b25b      	sxtb	r3, r3
    5b54:	1c0d      	adds	r5, r1, #0
    5b56:	4693      	mov	fp, r2
    5b58:	9300      	str	r3, [sp, #0]
    5b5a:	2800      	cmp	r0, #0
    5b5c:	d100      	bne.n	5b60 <spi_init+0x24>
    5b5e:	e0c8      	b.n	5cf2 <spi_init+0x1b6>
    5b60:	4643      	mov	r3, r8
    5b62:	3301      	adds	r3, #1
    5b64:	d100      	bne.n	5b68 <spi_init+0x2c>
    5b66:	e0b8      	b.n	5cda <spi_init+0x19e>
    5b68:	2300      	movs	r3, #0
    5b6a:	4e6a      	ldr	r6, [pc, #424]	; (5d14 <spi_init+0x1d8>)
    5b6c:	aa02      	add	r2, sp, #8
    5b6e:	8053      	strh	r3, [r2, #2]
    5b70:	7833      	ldrb	r3, [r6, #0]
    5b72:	2b00      	cmp	r3, #0
    5b74:	d032      	beq.n	5bdc <spi_init+0xa0>
    5b76:	4659      	mov	r1, fp
    5b78:	4642      	mov	r2, r8
    5b7a:	9b00      	ldr	r3, [sp, #0]
    5b7c:	1c28      	adds	r0, r5, #0
    5b7e:	f7ff fdf9 	bl	5774 <pinmap_find_sercom>
    5b82:	4681      	mov	r9, r0
    5b84:	2001      	movs	r0, #1
    5b86:	4649      	mov	r1, r9
    5b88:	4240      	negs	r0, r0
    5b8a:	f7ff fe79 	bl	5880 <pinmap_peripheral_sercom>
    5b8e:	6020      	str	r0, [r4, #0]
    5b90:	2c00      	cmp	r4, #0
    5b92:	d100      	bne.n	5b96 <spi_init+0x5a>
    5b94:	e0a7      	b.n	5ce6 <spi_init+0x1aa>
    5b96:	4f60      	ldr	r7, [pc, #384]	; (5d18 <spi_init+0x1dc>)
    5b98:	4e60      	ldr	r6, [pc, #384]	; (5d1c <spi_init+0x1e0>)
    5b9a:	e003      	b.n	5ba4 <spi_init+0x68>
    5b9c:	6822      	ldr	r2, [r4, #0]
    5b9e:	8b53      	ldrh	r3, [r2, #26]
    5ba0:	0bdb      	lsrs	r3, r3, #15
    5ba2:	d00a      	beq.n	5bba <spi_init+0x7e>
    5ba4:	2c00      	cmp	r4, #0
    5ba6:	d1f9      	bne.n	5b9c <spi_init+0x60>
    5ba8:	2244      	movs	r2, #68	; 0x44
    5baa:	1c38      	adds	r0, r7, #0
    5bac:	1c31      	adds	r1, r6, #0
    5bae:	f7ff f9df 	bl	4f70 <mbed_assert_internal>
    5bb2:	6822      	ldr	r2, [r4, #0]
    5bb4:	8b53      	ldrh	r3, [r2, #26]
    5bb6:	0bdb      	lsrs	r3, r3, #15
    5bb8:	d1f4      	bne.n	5ba4 <spi_init+0x68>
    5bba:	2102      	movs	r1, #2
    5bbc:	6813      	ldr	r3, [r2, #0]
    5bbe:	438b      	bics	r3, r1
    5bc0:	6013      	str	r3, [r2, #0]
    5bc2:	6823      	ldr	r3, [r4, #0]
    5bc4:	681e      	ldr	r6, [r3, #0]
    5bc6:	2301      	movs	r3, #1
    5bc8:	469a      	mov	sl, r3
    5bca:	401e      	ands	r6, r3
    5bcc:	d00b      	beq.n	5be6 <spi_init+0xaa>
    5bce:	b005      	add	sp, #20
    5bd0:	bc3c      	pop	{r2, r3, r4, r5}
    5bd2:	4690      	mov	r8, r2
    5bd4:	4699      	mov	r9, r3
    5bd6:	46a2      	mov	sl, r4
    5bd8:	46ab      	mov	fp, r5
    5bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5bdc:	f7fe fc8e 	bl	44fc <system_init>
    5be0:	2301      	movs	r3, #1
    5be2:	7033      	strb	r3, [r6, #0]
    5be4:	e7c7      	b.n	5b76 <spi_init+0x3a>
    5be6:	464b      	mov	r3, r9
    5be8:	4650      	mov	r0, sl
    5bea:	3302      	adds	r3, #2
    5bec:	4098      	lsls	r0, r3
    5bee:	1c03      	adds	r3, r0, #0
    5bf0:	494b      	ldr	r1, [pc, #300]	; (5d20 <spi_init+0x1e4>)
    5bf2:	6a0a      	ldr	r2, [r1, #32]
    5bf4:	4313      	orrs	r3, r2
    5bf6:	620b      	str	r3, [r1, #32]
    5bf8:	ab02      	add	r3, sp, #8
    5bfa:	701e      	strb	r6, [r3, #0]
    5bfc:	464b      	mov	r3, r9
    5bfe:	3314      	adds	r3, #20
    5c00:	b2db      	uxtb	r3, r3
    5c02:	1c1f      	adds	r7, r3, #0
    5c04:	1c18      	adds	r0, r3, #0
    5c06:	a902      	add	r1, sp, #8
    5c08:	9301      	str	r3, [sp, #4]
    5c0a:	f7fe fc41 	bl	4490 <system_gclk_chan_set_config>
    5c0e:	1c38      	adds	r0, r7, #0
    5c10:	f7fe fc00 	bl	4414 <system_gclk_chan_enable>
    5c14:	2100      	movs	r1, #0
    5c16:	2000      	movs	r0, #0
    5c18:	f7ff fb0a 	bl	5230 <sercom_set_gclk_generator>
    5c1c:	230c      	movs	r3, #12
    5c1e:	6822      	ldr	r2, [r4, #0]
    5c20:	af03      	add	r7, sp, #12
    5c22:	6811      	ldr	r1, [r2, #0]
    5c24:	430b      	orrs	r3, r1
    5c26:	6013      	str	r3, [r2, #0]
    5c28:	4653      	mov	r3, sl
    5c2a:	7123      	strb	r3, [r4, #4]
    5c2c:	2380      	movs	r3, #128	; 0x80
    5c2e:	703b      	strb	r3, [r7, #0]
    5c30:	4653      	mov	r3, sl
    5c32:	70bb      	strb	r3, [r7, #2]
    5c34:	465b      	mov	r3, fp
    5c36:	71a3      	strb	r3, [r4, #6]
    5c38:	4643      	mov	r3, r8
    5c3a:	71e3      	strb	r3, [r4, #7]
    5c3c:	466b      	mov	r3, sp
    5c3e:	781b      	ldrb	r3, [r3, #0]
    5c40:	7165      	strb	r5, [r4, #5]
    5c42:	7223      	strb	r3, [r4, #8]
    5c44:	2309      	movs	r3, #9
    5c46:	4698      	mov	r8, r3
    5c48:	b26d      	sxtb	r5, r5
    5c4a:	707e      	strb	r6, [r7, #1]
    5c4c:	70fe      	strb	r6, [r7, #3]
    5c4e:	44a0      	add	r8, r4
    5c50:	1da6      	adds	r6, r4, #6
    5c52:	1c6b      	adds	r3, r5, #1
    5c54:	d00b      	beq.n	5c6e <spi_init+0x132>
    5c56:	1c28      	adds	r0, r5, #0
    5c58:	4649      	mov	r1, r9
    5c5a:	f7ff fdcb 	bl	57f4 <pinmap_function_sercom>
    5c5e:	b2c0      	uxtb	r0, r0
    5c60:	7038      	strb	r0, [r7, #0]
    5c62:	28ff      	cmp	r0, #255	; 0xff
    5c64:	d003      	beq.n	5c6e <spi_init+0x132>
    5c66:	b2e8      	uxtb	r0, r5
    5c68:	1c39      	adds	r1, r7, #0
    5c6a:	f7fe fb07 	bl	427c <system_pinmux_pin_set_config>
    5c6e:	4546      	cmp	r6, r8
    5c70:	d006      	beq.n	5c80 <spi_init+0x144>
    5c72:	7835      	ldrb	r5, [r6, #0]
    5c74:	3601      	adds	r6, #1
    5c76:	b26d      	sxtb	r5, r5
    5c78:	1c6b      	adds	r3, r5, #1
    5c7a:	d1ec      	bne.n	5c56 <spi_init+0x11a>
    5c7c:	4546      	cmp	r6, r8
    5c7e:	d1f8      	bne.n	5c72 <spi_init+0x136>
    5c80:	9801      	ldr	r0, [sp, #4]
    5c82:	f7fe fc25 	bl	44d0 <system_gclk_chan_get_hz>
    5c86:	ab02      	add	r3, sp, #8
    5c88:	1c01      	adds	r1, r0, #0
    5c8a:	1c9a      	adds	r2, r3, #2
    5c8c:	4825      	ldr	r0, [pc, #148]	; (5d24 <spi_init+0x1e8>)
    5c8e:	f7ff f9f3 	bl	5078 <_sercom_get_sync_baud_val>
    5c92:	2800      	cmp	r0, #0
    5c94:	d19b      	bne.n	5bce <spi_init+0x92>
    5c96:	ab02      	add	r3, sp, #8
    5c98:	789b      	ldrb	r3, [r3, #2]
    5c9a:	6822      	ldr	r2, [r4, #0]
    5c9c:	1c20      	adds	r0, r4, #0
    5c9e:	7313      	strb	r3, [r2, #12]
    5ca0:	f7ff fefc 	bl	5a9c <spi_find_mux_settings>
    5ca4:	2180      	movs	r1, #128	; 0x80
    5ca6:	6822      	ldr	r2, [r4, #0]
    5ca8:	0289      	lsls	r1, r1, #10
    5caa:	6813      	ldr	r3, [r2, #0]
    5cac:	4318      	orrs	r0, r3
    5cae:	6010      	str	r0, [r2, #0]
    5cb0:	6822      	ldr	r2, [r4, #0]
    5cb2:	6853      	ldr	r3, [r2, #4]
    5cb4:	430b      	orrs	r3, r1
    5cb6:	6053      	str	r3, [r2, #4]
    5cb8:	2c00      	cmp	r4, #0
    5cba:	d025      	beq.n	5d08 <spi_init+0x1cc>
    5cbc:	4e16      	ldr	r6, [pc, #88]	; (5d18 <spi_init+0x1dc>)
    5cbe:	4d17      	ldr	r5, [pc, #92]	; (5d1c <spi_init+0x1e0>)
    5cc0:	e003      	b.n	5cca <spi_init+0x18e>
    5cc2:	6822      	ldr	r2, [r4, #0]
    5cc4:	8b53      	ldrh	r3, [r2, #26]
    5cc6:	0bdb      	lsrs	r3, r3, #15
    5cc8:	d019      	beq.n	5cfe <spi_init+0x1c2>
    5cca:	2c00      	cmp	r4, #0
    5ccc:	d1f9      	bne.n	5cc2 <spi_init+0x186>
    5cce:	1c30      	adds	r0, r6, #0
    5cd0:	1c29      	adds	r1, r5, #0
    5cd2:	2244      	movs	r2, #68	; 0x44
    5cd4:	f7ff f94c 	bl	4f70 <mbed_assert_internal>
    5cd8:	e7f3      	b.n	5cc2 <spi_init+0x186>
    5cda:	4813      	ldr	r0, [pc, #76]	; (5d28 <spi_init+0x1ec>)
    5cdc:	490f      	ldr	r1, [pc, #60]	; (5d1c <spi_init+0x1e0>)
    5cde:	22f5      	movs	r2, #245	; 0xf5
    5ce0:	f7ff f946 	bl	4f70 <mbed_assert_internal>
    5ce4:	e740      	b.n	5b68 <spi_init+0x2c>
    5ce6:	480c      	ldr	r0, [pc, #48]	; (5d18 <spi_init+0x1dc>)
    5ce8:	490c      	ldr	r1, [pc, #48]	; (5d1c <spi_init+0x1e0>)
    5cea:	225e      	movs	r2, #94	; 0x5e
    5cec:	f7ff f940 	bl	4f70 <mbed_assert_internal>
    5cf0:	e751      	b.n	5b96 <spi_init+0x5a>
    5cf2:	4809      	ldr	r0, [pc, #36]	; (5d18 <spi_init+0x1dc>)
    5cf4:	4909      	ldr	r1, [pc, #36]	; (5d1c <spi_init+0x1e0>)
    5cf6:	22f4      	movs	r2, #244	; 0xf4
    5cf8:	f7ff f93a 	bl	4f70 <mbed_assert_internal>
    5cfc:	e730      	b.n	5b60 <spi_init+0x24>
    5cfe:	6811      	ldr	r1, [r2, #0]
    5d00:	3302      	adds	r3, #2
    5d02:	430b      	orrs	r3, r1
    5d04:	6013      	str	r3, [r2, #0]
    5d06:	e762      	b.n	5bce <spi_init+0x92>
    5d08:	4803      	ldr	r0, [pc, #12]	; (5d18 <spi_init+0x1dc>)
    5d0a:	4904      	ldr	r1, [pc, #16]	; (5d1c <spi_init+0x1e0>)
    5d0c:	2252      	movs	r2, #82	; 0x52
    5d0e:	f7ff f92f 	bl	4f70 <mbed_assert_internal>
    5d12:	e7d3      	b.n	5cbc <spi_init+0x180>
    5d14:	200045b0 	.word	0x200045b0
    5d18:	0000ef30 	.word	0x0000ef30
    5d1c:	0000f7b0 	.word	0x0000f7b0
    5d20:	40000400 	.word	0x40000400
    5d24:	000186a0 	.word	0x000186a0
    5d28:	0000f818 	.word	0x0000f818

00005d2c <spi_format>:
    5d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5d2e:	464f      	mov	r7, r9
    5d30:	4646      	mov	r6, r8
    5d32:	1c04      	adds	r4, r0, #0
    5d34:	b4c0      	push	{r6, r7}
    5d36:	4688      	mov	r8, r1
    5d38:	1c15      	adds	r5, r2, #0
    5d3a:	4699      	mov	r9, r3
    5d3c:	2800      	cmp	r0, #0
    5d3e:	d100      	bne.n	5d42 <spi_format+0x16>
    5d40:	e08a      	b.n	5e58 <spi_format+0x12c>
    5d42:	4f4f      	ldr	r7, [pc, #316]	; (5e80 <spi_format+0x154>)
    5d44:	4e4f      	ldr	r6, [pc, #316]	; (5e84 <spi_format+0x158>)
    5d46:	e006      	b.n	5d56 <spi_format+0x2a>
    5d48:	6822      	ldr	r2, [r4, #0]
    5d4a:	8b53      	ldrh	r3, [r2, #26]
    5d4c:	0bdb      	lsrs	r3, r3, #15
    5d4e:	03db      	lsls	r3, r3, #15
    5d50:	b29b      	uxth	r3, r3
    5d52:	2b00      	cmp	r3, #0
    5d54:	d00d      	beq.n	5d72 <spi_format+0x46>
    5d56:	2c00      	cmp	r4, #0
    5d58:	d1f6      	bne.n	5d48 <spi_format+0x1c>
    5d5a:	2244      	movs	r2, #68	; 0x44
    5d5c:	1c38      	adds	r0, r7, #0
    5d5e:	1c31      	adds	r1, r6, #0
    5d60:	f7ff f906 	bl	4f70 <mbed_assert_internal>
    5d64:	6822      	ldr	r2, [r4, #0]
    5d66:	8b53      	ldrh	r3, [r2, #26]
    5d68:	0bdb      	lsrs	r3, r3, #15
    5d6a:	03db      	lsls	r3, r3, #15
    5d6c:	b29b      	uxth	r3, r3
    5d6e:	2b00      	cmp	r3, #0
    5d70:	d1f1      	bne.n	5d56 <spi_format+0x2a>
    5d72:	2002      	movs	r0, #2
    5d74:	6811      	ldr	r1, [r2, #0]
    5d76:	4381      	bics	r1, r0
    5d78:	6011      	str	r1, [r2, #0]
    5d7a:	464a      	mov	r2, r9
    5d7c:	2a00      	cmp	r2, #0
    5d7e:	d060      	beq.n	5e42 <spi_format+0x116>
    5d80:	211c      	movs	r1, #28
    5d82:	6820      	ldr	r0, [r4, #0]
    5d84:	6802      	ldr	r2, [r0, #0]
    5d86:	438a      	bics	r2, r1
    5d88:	3914      	subs	r1, #20
    5d8a:	430a      	orrs	r2, r1
    5d8c:	6002      	str	r2, [r0, #0]
    5d8e:	6822      	ldr	r2, [r4, #0]
    5d90:	7123      	strb	r3, [r4, #4]
    5d92:	6851      	ldr	r1, [r2, #4]
    5d94:	3340      	adds	r3, #64	; 0x40
    5d96:	430b      	orrs	r3, r1
    5d98:	6053      	str	r3, [r2, #4]
    5d9a:	2300      	movs	r3, #0
    5d9c:	4699      	mov	r9, r3
    5d9e:	1c27      	adds	r7, r4, #0
    5da0:	1d66      	adds	r6, r4, #5
    5da2:	3709      	adds	r7, #9
    5da4:	2000      	movs	r0, #0
    5da6:	5630      	ldrsb	r0, [r6, r0]
    5da8:	1c43      	adds	r3, r0, #1
    5daa:	d002      	beq.n	5db2 <spi_format+0x86>
    5dac:	4649      	mov	r1, r9
    5dae:	f7ff fc11 	bl	55d4 <pin_mode>
    5db2:	3601      	adds	r6, #1
    5db4:	42be      	cmp	r6, r7
    5db6:	d1f5      	bne.n	5da4 <spi_format+0x78>
    5db8:	6823      	ldr	r3, [r4, #0]
    5dba:	1c20      	adds	r0, r4, #0
    5dbc:	681e      	ldr	r6, [r3, #0]
    5dbe:	4b32      	ldr	r3, [pc, #200]	; (5e88 <spi_format+0x15c>)
    5dc0:	401e      	ands	r6, r3
    5dc2:	f7ff fe6b 	bl	5a9c <spi_find_mux_settings>
    5dc6:	4642      	mov	r2, r8
    5dc8:	6823      	ldr	r3, [r4, #0]
    5dca:	4306      	orrs	r6, r0
    5dcc:	601e      	str	r6, [r3, #0]
    5dce:	6821      	ldr	r1, [r4, #0]
    5dd0:	2301      	movs	r3, #1
    5dd2:	2a08      	cmp	r2, #8
    5dd4:	dc00      	bgt.n	5dd8 <spi_format+0xac>
    5dd6:	2300      	movs	r3, #0
    5dd8:	2007      	movs	r0, #7
    5dda:	684a      	ldr	r2, [r1, #4]
    5ddc:	4003      	ands	r3, r0
    5dde:	4382      	bics	r2, r0
    5de0:	4313      	orrs	r3, r2
    5de2:	604b      	str	r3, [r1, #4]
    5de4:	2301      	movs	r3, #1
    5de6:	1c1a      	adds	r2, r3, #0
    5de8:	6820      	ldr	r0, [r4, #0]
    5dea:	402a      	ands	r2, r5
    5dec:	6806      	ldr	r6, [r0, #0]
    5dee:	0711      	lsls	r1, r2, #28
    5df0:	4a26      	ldr	r2, [pc, #152]	; (5e8c <spi_format+0x160>)
    5df2:	086d      	lsrs	r5, r5, #1
    5df4:	4032      	ands	r2, r6
    5df6:	430a      	orrs	r2, r1
    5df8:	6002      	str	r2, [r0, #0]
    5dfa:	6821      	ldr	r1, [r4, #0]
    5dfc:	401d      	ands	r5, r3
    5dfe:	076b      	lsls	r3, r5, #29
    5e00:	4a23      	ldr	r2, [pc, #140]	; (5e90 <spi_format+0x164>)
    5e02:	680d      	ldr	r5, [r1, #0]
    5e04:	4015      	ands	r5, r2
    5e06:	431d      	orrs	r5, r3
    5e08:	600d      	str	r5, [r1, #0]
    5e0a:	2c00      	cmp	r4, #0
    5e0c:	d032      	beq.n	5e74 <spi_format+0x148>
    5e0e:	4e1c      	ldr	r6, [pc, #112]	; (5e80 <spi_format+0x154>)
    5e10:	4d1c      	ldr	r5, [pc, #112]	; (5e84 <spi_format+0x158>)
    5e12:	e003      	b.n	5e1c <spi_format+0xf0>
    5e14:	6822      	ldr	r2, [r4, #0]
    5e16:	8b53      	ldrh	r3, [r2, #26]
    5e18:	0bdb      	lsrs	r3, r3, #15
    5e1a:	d00a      	beq.n	5e32 <spi_format+0x106>
    5e1c:	2c00      	cmp	r4, #0
    5e1e:	d1f9      	bne.n	5e14 <spi_format+0xe8>
    5e20:	2244      	movs	r2, #68	; 0x44
    5e22:	1c30      	adds	r0, r6, #0
    5e24:	1c29      	adds	r1, r5, #0
    5e26:	f7ff f8a3 	bl	4f70 <mbed_assert_internal>
    5e2a:	6822      	ldr	r2, [r4, #0]
    5e2c:	8b53      	ldrh	r3, [r2, #26]
    5e2e:	0bdb      	lsrs	r3, r3, #15
    5e30:	d1f4      	bne.n	5e1c <spi_format+0xf0>
    5e32:	6811      	ldr	r1, [r2, #0]
    5e34:	3302      	adds	r3, #2
    5e36:	430b      	orrs	r3, r1
    5e38:	6013      	str	r3, [r2, #0]
    5e3a:	bc0c      	pop	{r2, r3}
    5e3c:	4690      	mov	r8, r2
    5e3e:	4699      	mov	r9, r3
    5e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5e42:	221c      	movs	r2, #28
    5e44:	6821      	ldr	r1, [r4, #0]
    5e46:	680b      	ldr	r3, [r1, #0]
    5e48:	4393      	bics	r3, r2
    5e4a:	3a10      	subs	r2, #16
    5e4c:	4313      	orrs	r3, r2
    5e4e:	600b      	str	r3, [r1, #0]
    5e50:	2301      	movs	r3, #1
    5e52:	7123      	strb	r3, [r4, #4]
    5e54:	4699      	mov	r9, r3
    5e56:	e7a2      	b.n	5d9e <spi_format+0x72>
    5e58:	2296      	movs	r2, #150	; 0x96
    5e5a:	4f09      	ldr	r7, [pc, #36]	; (5e80 <spi_format+0x154>)
    5e5c:	4e09      	ldr	r6, [pc, #36]	; (5e84 <spi_format+0x158>)
    5e5e:	1c38      	adds	r0, r7, #0
    5e60:	1c31      	adds	r1, r6, #0
    5e62:	32ff      	adds	r2, #255	; 0xff
    5e64:	f7ff f884 	bl	4f70 <mbed_assert_internal>
    5e68:	1c38      	adds	r0, r7, #0
    5e6a:	1c31      	adds	r1, r6, #0
    5e6c:	225e      	movs	r2, #94	; 0x5e
    5e6e:	f7ff f87f 	bl	4f70 <mbed_assert_internal>
    5e72:	e766      	b.n	5d42 <spi_format+0x16>
    5e74:	4802      	ldr	r0, [pc, #8]	; (5e80 <spi_format+0x154>)
    5e76:	4903      	ldr	r1, [pc, #12]	; (5e84 <spi_format+0x158>)
    5e78:	2252      	movs	r2, #82	; 0x52
    5e7a:	f7ff f879 	bl	4f70 <mbed_assert_internal>
    5e7e:	e7c6      	b.n	5e0e <spi_format+0xe2>
    5e80:	0000ef30 	.word	0x0000ef30
    5e84:	0000f7b0 	.word	0x0000f7b0
    5e88:	ffccffff 	.word	0xffccffff
    5e8c:	efffffff 	.word	0xefffffff
    5e90:	dfffffff 	.word	0xdfffffff

00005e94 <spi_frequency>:
    5e94:	b5f0      	push	{r4, r5, r6, r7, lr}
    5e96:	b083      	sub	sp, #12
    5e98:	2300      	movs	r3, #0
    5e9a:	466a      	mov	r2, sp
    5e9c:	1c04      	adds	r4, r0, #0
    5e9e:	1c0d      	adds	r5, r1, #0
    5ea0:	80d3      	strh	r3, [r2, #6]
    5ea2:	2800      	cmp	r0, #0
    5ea4:	d053      	beq.n	5f4e <spi_frequency+0xba>
    5ea6:	4f37      	ldr	r7, [pc, #220]	; (5f84 <spi_frequency+0xf0>)
    5ea8:	4e37      	ldr	r6, [pc, #220]	; (5f88 <spi_frequency+0xf4>)
    5eaa:	e003      	b.n	5eb4 <spi_frequency+0x20>
    5eac:	6822      	ldr	r2, [r4, #0]
    5eae:	8b53      	ldrh	r3, [r2, #26]
    5eb0:	0bdb      	lsrs	r3, r3, #15
    5eb2:	d00a      	beq.n	5eca <spi_frequency+0x36>
    5eb4:	2c00      	cmp	r4, #0
    5eb6:	d1f9      	bne.n	5eac <spi_frequency+0x18>
    5eb8:	2244      	movs	r2, #68	; 0x44
    5eba:	1c38      	adds	r0, r7, #0
    5ebc:	1c31      	adds	r1, r6, #0
    5ebe:	f7ff f857 	bl	4f70 <mbed_assert_internal>
    5ec2:	6822      	ldr	r2, [r4, #0]
    5ec4:	8b53      	ldrh	r3, [r2, #26]
    5ec6:	0bdb      	lsrs	r3, r3, #15
    5ec8:	d1f4      	bne.n	5eb4 <spi_frequency+0x20>
    5eca:	2102      	movs	r1, #2
    5ecc:	6813      	ldr	r3, [r2, #0]
    5ece:	438b      	bics	r3, r1
    5ed0:	6013      	str	r3, [r2, #0]
    5ed2:	6820      	ldr	r0, [r4, #0]
    5ed4:	f7ff f9cc 	bl	5270 <_sercom_get_sercom_inst_index>
    5ed8:	3014      	adds	r0, #20
    5eda:	b2c0      	uxtb	r0, r0
    5edc:	f7fe faf8 	bl	44d0 <system_gclk_chan_get_hz>
    5ee0:	466b      	mov	r3, sp
    5ee2:	1c01      	adds	r1, r0, #0
    5ee4:	1d9a      	adds	r2, r3, #6
    5ee6:	1c28      	adds	r0, r5, #0
    5ee8:	f7ff f8c6 	bl	5078 <_sercom_get_sync_baud_val>
    5eec:	2800      	cmp	r0, #0
    5eee:	d11d      	bne.n	5f2c <spi_frequency+0x98>
    5ef0:	466b      	mov	r3, sp
    5ef2:	6822      	ldr	r2, [r4, #0]
    5ef4:	799b      	ldrb	r3, [r3, #6]
    5ef6:	7313      	strb	r3, [r2, #12]
    5ef8:	2c00      	cmp	r4, #0
    5efa:	d036      	beq.n	5f6a <spi_frequency+0xd6>
    5efc:	4e21      	ldr	r6, [pc, #132]	; (5f84 <spi_frequency+0xf0>)
    5efe:	4d22      	ldr	r5, [pc, #136]	; (5f88 <spi_frequency+0xf4>)
    5f00:	e003      	b.n	5f0a <spi_frequency+0x76>
    5f02:	6822      	ldr	r2, [r4, #0]
    5f04:	8b53      	ldrh	r3, [r2, #26]
    5f06:	0bdb      	lsrs	r3, r3, #15
    5f08:	d00a      	beq.n	5f20 <spi_frequency+0x8c>
    5f0a:	2c00      	cmp	r4, #0
    5f0c:	d1f9      	bne.n	5f02 <spi_frequency+0x6e>
    5f0e:	2244      	movs	r2, #68	; 0x44
    5f10:	1c30      	adds	r0, r6, #0
    5f12:	1c29      	adds	r1, r5, #0
    5f14:	f7ff f82c 	bl	4f70 <mbed_assert_internal>
    5f18:	6822      	ldr	r2, [r4, #0]
    5f1a:	8b53      	ldrh	r3, [r2, #26]
    5f1c:	0bdb      	lsrs	r3, r3, #15
    5f1e:	d1f4      	bne.n	5f0a <spi_frequency+0x76>
    5f20:	6811      	ldr	r1, [r2, #0]
    5f22:	3302      	adds	r3, #2
    5f24:	430b      	orrs	r3, r1
    5f26:	6013      	str	r3, [r2, #0]
    5f28:	b003      	add	sp, #12
    5f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5f2c:	2c00      	cmp	r4, #0
    5f2e:	d022      	beq.n	5f76 <spi_frequency+0xe2>
    5f30:	4e14      	ldr	r6, [pc, #80]	; (5f84 <spi_frequency+0xf0>)
    5f32:	4d15      	ldr	r5, [pc, #84]	; (5f88 <spi_frequency+0xf4>)
    5f34:	e003      	b.n	5f3e <spi_frequency+0xaa>
    5f36:	6822      	ldr	r2, [r4, #0]
    5f38:	8b53      	ldrh	r3, [r2, #26]
    5f3a:	0bdb      	lsrs	r3, r3, #15
    5f3c:	d0f0      	beq.n	5f20 <spi_frequency+0x8c>
    5f3e:	2c00      	cmp	r4, #0
    5f40:	d1f9      	bne.n	5f36 <spi_frequency+0xa2>
    5f42:	1c30      	adds	r0, r6, #0
    5f44:	1c29      	adds	r1, r5, #0
    5f46:	2244      	movs	r2, #68	; 0x44
    5f48:	f7ff f812 	bl	4f70 <mbed_assert_internal>
    5f4c:	e7f3      	b.n	5f36 <spi_frequency+0xa2>
    5f4e:	22d0      	movs	r2, #208	; 0xd0
    5f50:	4f0c      	ldr	r7, [pc, #48]	; (5f84 <spi_frequency+0xf0>)
    5f52:	4e0d      	ldr	r6, [pc, #52]	; (5f88 <spi_frequency+0xf4>)
    5f54:	1c38      	adds	r0, r7, #0
    5f56:	1c31      	adds	r1, r6, #0
    5f58:	32ff      	adds	r2, #255	; 0xff
    5f5a:	f7ff f809 	bl	4f70 <mbed_assert_internal>
    5f5e:	1c38      	adds	r0, r7, #0
    5f60:	1c31      	adds	r1, r6, #0
    5f62:	225e      	movs	r2, #94	; 0x5e
    5f64:	f7ff f804 	bl	4f70 <mbed_assert_internal>
    5f68:	e79d      	b.n	5ea6 <spi_frequency+0x12>
    5f6a:	4806      	ldr	r0, [pc, #24]	; (5f84 <spi_frequency+0xf0>)
    5f6c:	4906      	ldr	r1, [pc, #24]	; (5f88 <spi_frequency+0xf4>)
    5f6e:	2252      	movs	r2, #82	; 0x52
    5f70:	f7fe fffe 	bl	4f70 <mbed_assert_internal>
    5f74:	e7c2      	b.n	5efc <spi_frequency+0x68>
    5f76:	4803      	ldr	r0, [pc, #12]	; (5f84 <spi_frequency+0xf0>)
    5f78:	4903      	ldr	r1, [pc, #12]	; (5f88 <spi_frequency+0xf4>)
    5f7a:	2252      	movs	r2, #82	; 0x52
    5f7c:	f7fe fff8 	bl	4f70 <mbed_assert_internal>
    5f80:	e7d6      	b.n	5f30 <spi_frequency+0x9c>
    5f82:	46c0      	nop			; (mov r8, r8)
    5f84:	0000ef30 	.word	0x0000ef30
    5f88:	0000f7b0 	.word	0x0000f7b0

00005f8c <spi_master_write>:
    5f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5f8e:	4647      	mov	r7, r8
    5f90:	1c04      	adds	r4, r0, #0
    5f92:	b480      	push	{r7}
    5f94:	1c0e      	adds	r6, r1, #0
    5f96:	2800      	cmp	r0, #0
    5f98:	d052      	beq.n	6040 <spi_master_write+0xb4>
    5f9a:	7a63      	ldrb	r3, [r4, #9]
    5f9c:	2b05      	cmp	r3, #5
    5f9e:	d045      	beq.n	602c <spi_master_write+0xa0>
    5fa0:	4b3a      	ldr	r3, [pc, #232]	; (608c <spi_master_write+0x100>)
    5fa2:	4f3b      	ldr	r7, [pc, #236]	; (6090 <spi_master_write+0x104>)
    5fa4:	4698      	mov	r8, r3
    5fa6:	2501      	movs	r5, #1
    5fa8:	e003      	b.n	5fb2 <spi_master_write+0x26>
    5faa:	6823      	ldr	r3, [r4, #0]
    5fac:	7e1a      	ldrb	r2, [r3, #24]
    5fae:	4215      	tst	r5, r2
    5fb0:	d10a      	bne.n	5fc8 <spi_master_write+0x3c>
    5fb2:	2c00      	cmp	r4, #0
    5fb4:	d1f9      	bne.n	5faa <spi_master_write+0x1e>
    5fb6:	2273      	movs	r2, #115	; 0x73
    5fb8:	4640      	mov	r0, r8
    5fba:	1c39      	adds	r1, r7, #0
    5fbc:	f7fe ffd8 	bl	4f70 <mbed_assert_internal>
    5fc0:	6823      	ldr	r3, [r4, #0]
    5fc2:	7e1a      	ldrb	r2, [r3, #24]
    5fc4:	4215      	tst	r5, r2
    5fc6:	d0f4      	beq.n	5fb2 <spi_master_write+0x26>
    5fc8:	2c00      	cmp	r4, #0
    5fca:	d043      	beq.n	6054 <spi_master_write+0xc8>
    5fcc:	7e1a      	ldrb	r2, [r3, #24]
    5fce:	07d2      	lsls	r2, r2, #31
    5fd0:	d503      	bpl.n	5fda <spi_master_write+0x4e>
    5fd2:	05f6      	lsls	r6, r6, #23
    5fd4:	0df6      	lsrs	r6, r6, #23
    5fd6:	629e      	str	r6, [r3, #40]	; 0x28
    5fd8:	6823      	ldr	r3, [r4, #0]
    5fda:	685b      	ldr	r3, [r3, #4]
    5fdc:	039b      	lsls	r3, r3, #14
    5fde:	d525      	bpl.n	602c <spi_master_write+0xa0>
    5fe0:	4f2a      	ldr	r7, [pc, #168]	; (608c <spi_master_write+0x100>)
    5fe2:	4e2b      	ldr	r6, [pc, #172]	; (6090 <spi_master_write+0x104>)
    5fe4:	2504      	movs	r5, #4
    5fe6:	e003      	b.n	5ff0 <spi_master_write+0x64>
    5fe8:	6823      	ldr	r3, [r4, #0]
    5fea:	7e1a      	ldrb	r2, [r3, #24]
    5fec:	4215      	tst	r5, r2
    5fee:	d10a      	bne.n	6006 <spi_master_write+0x7a>
    5ff0:	2c00      	cmp	r4, #0
    5ff2:	d1f9      	bne.n	5fe8 <spi_master_write+0x5c>
    5ff4:	227c      	movs	r2, #124	; 0x7c
    5ff6:	1c38      	adds	r0, r7, #0
    5ff8:	1c31      	adds	r1, r6, #0
    5ffa:	f7fe ffb9 	bl	4f70 <mbed_assert_internal>
    5ffe:	6823      	ldr	r3, [r4, #0]
    6000:	7e1a      	ldrb	r2, [r3, #24]
    6002:	4215      	tst	r5, r2
    6004:	d0f4      	beq.n	5ff0 <spi_master_write+0x64>
    6006:	2c00      	cmp	r4, #0
    6008:	d032      	beq.n	6070 <spi_master_write+0xe4>
    600a:	2204      	movs	r2, #4
    600c:	7e19      	ldrb	r1, [r3, #24]
    600e:	2000      	movs	r0, #0
    6010:	420a      	tst	r2, r1
    6012:	d00c      	beq.n	602e <spi_master_write+0xa2>
    6014:	8b59      	ldrh	r1, [r3, #26]
    6016:	420a      	tst	r2, r1
    6018:	d10c      	bne.n	6034 <spi_master_write+0xa8>
    601a:	2107      	movs	r1, #7
    601c:	685a      	ldr	r2, [r3, #4]
    601e:	400a      	ands	r2, r1
    6020:	2a01      	cmp	r2, #1
    6022:	d013      	beq.n	604c <spi_master_write+0xc0>
    6024:	20ff      	movs	r0, #255	; 0xff
    6026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6028:	4018      	ands	r0, r3
    602a:	e000      	b.n	602e <spi_master_write+0xa2>
    602c:	2000      	movs	r0, #0
    602e:	bc04      	pop	{r2}
    6030:	4690      	mov	r8, r2
    6032:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6034:	8b59      	ldrh	r1, [r3, #26]
    6036:	430a      	orrs	r2, r1
    6038:	b292      	uxth	r2, r2
    603a:	835a      	strh	r2, [r3, #26]
    603c:	6823      	ldr	r3, [r4, #0]
    603e:	e7ec      	b.n	601a <spi_master_write+0x8e>
    6040:	4812      	ldr	r0, [pc, #72]	; (608c <spi_master_write+0x100>)
    6042:	4913      	ldr	r1, [pc, #76]	; (6090 <spi_master_write+0x104>)
    6044:	4a13      	ldr	r2, [pc, #76]	; (6094 <spi_master_write+0x108>)
    6046:	f7fe ff93 	bl	4f70 <mbed_assert_internal>
    604a:	e7a6      	b.n	5f9a <spi_master_write+0xe>
    604c:	6a98      	ldr	r0, [r3, #40]	; 0x28
    604e:	05c0      	lsls	r0, r0, #23
    6050:	0dc0      	lsrs	r0, r0, #23
    6052:	e7ec      	b.n	602e <spi_master_write+0xa2>
    6054:	4f0d      	ldr	r7, [pc, #52]	; (608c <spi_master_write+0x100>)
    6056:	4d0e      	ldr	r5, [pc, #56]	; (6090 <spi_master_write+0x104>)
    6058:	1c38      	adds	r0, r7, #0
    605a:	1c29      	adds	r1, r5, #0
    605c:	2285      	movs	r2, #133	; 0x85
    605e:	f7fe ff87 	bl	4f70 <mbed_assert_internal>
    6062:	1c38      	adds	r0, r7, #0
    6064:	1c29      	adds	r1, r5, #0
    6066:	2273      	movs	r2, #115	; 0x73
    6068:	f7fe ff82 	bl	4f70 <mbed_assert_internal>
    606c:	6823      	ldr	r3, [r4, #0]
    606e:	e7ad      	b.n	5fcc <spi_master_write+0x40>
    6070:	4e06      	ldr	r6, [pc, #24]	; (608c <spi_master_write+0x100>)
    6072:	4d07      	ldr	r5, [pc, #28]	; (6090 <spi_master_write+0x104>)
    6074:	1c30      	adds	r0, r6, #0
    6076:	1c29      	adds	r1, r5, #0
    6078:	2296      	movs	r2, #150	; 0x96
    607a:	f7fe ff79 	bl	4f70 <mbed_assert_internal>
    607e:	1c30      	adds	r0, r6, #0
    6080:	1c29      	adds	r1, r5, #0
    6082:	227c      	movs	r2, #124	; 0x7c
    6084:	f7fe ff74 	bl	4f70 <mbed_assert_internal>
    6088:	6823      	ldr	r3, [r4, #0]
    608a:	e7be      	b.n	600a <spi_master_write+0x7e>
    608c:	0000ef30 	.word	0x0000ef30
    6090:	0000f7b0 	.word	0x0000f7b0
    6094:	00000212 	.word	0x00000212

00006098 <_ZN4mbed8FileBaseD1Ev>:
    6098:	4b0a      	ldr	r3, [pc, #40]	; (60c4 <_ZN4mbed8FileBaseD1Ev+0x2c>)
    609a:	3308      	adds	r3, #8
    609c:	6003      	str	r3, [r0, #0]
    609e:	6883      	ldr	r3, [r0, #8]
    60a0:	2b00      	cmp	r3, #0
    60a2:	d00a      	beq.n	60ba <_ZN4mbed8FileBaseD1Ev+0x22>
    60a4:	4b08      	ldr	r3, [pc, #32]	; (60c8 <_ZN4mbed8FileBaseD1Ev+0x30>)
    60a6:	681a      	ldr	r2, [r3, #0]
    60a8:	4282      	cmp	r2, r0
    60aa:	d101      	bne.n	60b0 <_ZN4mbed8FileBaseD1Ev+0x18>
    60ac:	e006      	b.n	60bc <_ZN4mbed8FileBaseD1Ev+0x24>
    60ae:	1c1a      	adds	r2, r3, #0
    60b0:	6853      	ldr	r3, [r2, #4]
    60b2:	4283      	cmp	r3, r0
    60b4:	d1fb      	bne.n	60ae <_ZN4mbed8FileBaseD1Ev+0x16>
    60b6:	6843      	ldr	r3, [r0, #4]
    60b8:	6053      	str	r3, [r2, #4]
    60ba:	4770      	bx	lr
    60bc:	6842      	ldr	r2, [r0, #4]
    60be:	601a      	str	r2, [r3, #0]
    60c0:	e7fb      	b.n	60ba <_ZN4mbed8FileBaseD1Ev+0x22>
    60c2:	46c0      	nop			; (mov r8, r8)
    60c4:	0000f828 	.word	0x0000f828
    60c8:	20004700 	.word	0x20004700

000060cc <_ZN4mbed8FileBaseD0Ev>:
    60cc:	4b0d      	ldr	r3, [pc, #52]	; (6104 <_ZN4mbed8FileBaseD0Ev+0x38>)
    60ce:	b510      	push	{r4, lr}
    60d0:	3308      	adds	r3, #8
    60d2:	6003      	str	r3, [r0, #0]
    60d4:	6883      	ldr	r3, [r0, #8]
    60d6:	1c04      	adds	r4, r0, #0
    60d8:	2b00      	cmp	r3, #0
    60da:	d00a      	beq.n	60f2 <_ZN4mbed8FileBaseD0Ev+0x26>
    60dc:	4b0a      	ldr	r3, [pc, #40]	; (6108 <_ZN4mbed8FileBaseD0Ev+0x3c>)
    60de:	681a      	ldr	r2, [r3, #0]
    60e0:	4290      	cmp	r0, r2
    60e2:	d101      	bne.n	60e8 <_ZN4mbed8FileBaseD0Ev+0x1c>
    60e4:	e00a      	b.n	60fc <_ZN4mbed8FileBaseD0Ev+0x30>
    60e6:	1c1a      	adds	r2, r3, #0
    60e8:	6853      	ldr	r3, [r2, #4]
    60ea:	429c      	cmp	r4, r3
    60ec:	d1fb      	bne.n	60e6 <_ZN4mbed8FileBaseD0Ev+0x1a>
    60ee:	6863      	ldr	r3, [r4, #4]
    60f0:	6053      	str	r3, [r2, #4]
    60f2:	1c20      	adds	r0, r4, #0
    60f4:	f000 fab5 	bl	6662 <_ZdlPv>
    60f8:	1c20      	adds	r0, r4, #0
    60fa:	bd10      	pop	{r4, pc}
    60fc:	6842      	ldr	r2, [r0, #4]
    60fe:	601a      	str	r2, [r3, #0]
    6100:	e7f7      	b.n	60f2 <_ZN4mbed8FileBaseD0Ev+0x26>
    6102:	46c0      	nop			; (mov r8, r8)
    6104:	0000f828 	.word	0x0000f828
    6108:	20004700 	.word	0x20004700

0000610c <_ZN4mbed8FileBaseC1EPKcNS_8PathTypeE>:
    610c:	4b06      	ldr	r3, [pc, #24]	; (6128 <_ZN4mbed8FileBaseC1EPKcNS_8PathTypeE+0x1c>)
    610e:	6081      	str	r1, [r0, #8]
    6110:	3308      	adds	r3, #8
    6112:	6003      	str	r3, [r0, #0]
    6114:	2300      	movs	r3, #0
    6116:	7302      	strb	r2, [r0, #12]
    6118:	6043      	str	r3, [r0, #4]
    611a:	2900      	cmp	r1, #0
    611c:	d003      	beq.n	6126 <_ZN4mbed8FileBaseC1EPKcNS_8PathTypeE+0x1a>
    611e:	4b03      	ldr	r3, [pc, #12]	; (612c <_ZN4mbed8FileBaseC1EPKcNS_8PathTypeE+0x20>)
    6120:	681a      	ldr	r2, [r3, #0]
    6122:	6018      	str	r0, [r3, #0]
    6124:	6042      	str	r2, [r0, #4]
    6126:	4770      	bx	lr
    6128:	0000f828 	.word	0x0000f828
    612c:	20004700 	.word	0x20004700

00006130 <_ZN4mbed8FileBase6lookupEPKcj>:
    6130:	4b0e      	ldr	r3, [pc, #56]	; (616c <_ZN4mbed8FileBase6lookupEPKcj+0x3c>)
    6132:	b570      	push	{r4, r5, r6, lr}
    6134:	681c      	ldr	r4, [r3, #0]
    6136:	1c06      	adds	r6, r0, #0
    6138:	1c0d      	adds	r5, r1, #0
    613a:	2c00      	cmp	r4, #0
    613c:	d103      	bne.n	6146 <_ZN4mbed8FileBase6lookupEPKcj+0x16>
    613e:	e012      	b.n	6166 <_ZN4mbed8FileBase6lookupEPKcj+0x36>
    6140:	6864      	ldr	r4, [r4, #4]
    6142:	2c00      	cmp	r4, #0
    6144:	d00f      	beq.n	6166 <_ZN4mbed8FileBase6lookupEPKcj+0x36>
    6146:	68a0      	ldr	r0, [r4, #8]
    6148:	2800      	cmp	r0, #0
    614a:	d0f9      	beq.n	6140 <_ZN4mbed8FileBase6lookupEPKcj+0x10>
    614c:	1c31      	adds	r1, r6, #0
    614e:	1c2a      	adds	r2, r5, #0
    6150:	f005 fa27 	bl	b5a2 <strncmp>
    6154:	2800      	cmp	r0, #0
    6156:	d1f3      	bne.n	6140 <_ZN4mbed8FileBase6lookupEPKcj+0x10>
    6158:	68a0      	ldr	r0, [r4, #8]
    615a:	f005 fa1b 	bl	b594 <strlen>
    615e:	42a8      	cmp	r0, r5
    6160:	d1ee      	bne.n	6140 <_ZN4mbed8FileBase6lookupEPKcj+0x10>
    6162:	1c20      	adds	r0, r4, #0
    6164:	e000      	b.n	6168 <_ZN4mbed8FileBase6lookupEPKcj+0x38>
    6166:	2000      	movs	r0, #0
    6168:	bd70      	pop	{r4, r5, r6, pc}
    616a:	46c0      	nop			; (mov r8, r8)
    616c:	20004700 	.word	0x20004700

00006170 <_ZN4mbed8FileBase11getPathTypeEv>:
    6170:	7b00      	ldrb	r0, [r0, #12]
    6172:	4770      	bx	lr

00006174 <_ZN4mbed8FileLikeC1EPKc>:
    6174:	4b07      	ldr	r3, [pc, #28]	; (6194 <_ZN4mbed8FileLikeC1EPKc+0x20>)
    6176:	b510      	push	{r4, lr}
    6178:	2200      	movs	r2, #0
    617a:	1c04      	adds	r4, r0, #0
    617c:	c008      	stmia	r0!, {r3}
    617e:	f7ff ffc5 	bl	610c <_ZN4mbed8FileBaseC1EPKcNS_8PathTypeE>
    6182:	4b05      	ldr	r3, [pc, #20]	; (6198 <_ZN4mbed8FileLikeC1EPKc+0x24>)
    6184:	1c20      	adds	r0, r4, #0
    6186:	1c1a      	adds	r2, r3, #0
    6188:	3334      	adds	r3, #52	; 0x34
    618a:	3208      	adds	r2, #8
    618c:	6022      	str	r2, [r4, #0]
    618e:	6063      	str	r3, [r4, #4]
    6190:	bd10      	pop	{r4, pc}
    6192:	46c0      	nop			; (mov r8, r8)
    6194:	0000eef0 	.word	0x0000eef0
    6198:	0000f838 	.word	0x0000f838

0000619c <_ZN4mbed8FileLikeD1Ev>:
    619c:	4b07      	ldr	r3, [pc, #28]	; (61bc <_ZN4mbed8FileLikeD1Ev+0x20>)
    619e:	b510      	push	{r4, lr}
    61a0:	1c1a      	adds	r2, r3, #0
    61a2:	1c04      	adds	r4, r0, #0
    61a4:	3208      	adds	r2, #8
    61a6:	3334      	adds	r3, #52	; 0x34
    61a8:	6002      	str	r2, [r0, #0]
    61aa:	6043      	str	r3, [r0, #4]
    61ac:	3004      	adds	r0, #4
    61ae:	f7ff ff73 	bl	6098 <_ZN4mbed8FileBaseD1Ev>
    61b2:	1c20      	adds	r0, r4, #0
    61b4:	f7fd fda6 	bl	3d04 <_ZN4mbed10FileHandleD1Ev>
    61b8:	1c20      	adds	r0, r4, #0
    61ba:	bd10      	pop	{r4, pc}
    61bc:	0000f838 	.word	0x0000f838

000061c0 <us_ticker_irq_handler>:
    61c0:	b508      	push	{r3, lr}
    61c2:	4802      	ldr	r0, [pc, #8]	; (61cc <us_ticker_irq_handler+0xc>)
    61c4:	f000 fa20 	bl	6608 <ticker_irq_handler>
    61c8:	bd08      	pop	{r3, pc}
    61ca:	46c0      	nop			; (mov r8, r8)
    61cc:	0000f888 	.word	0x0000f888

000061d0 <port_pin_set_config>:
    61d0:	2280      	movs	r2, #128	; 0x80
    61d2:	b500      	push	{lr}
    61d4:	b083      	sub	sp, #12
    61d6:	ab01      	add	r3, sp, #4
    61d8:	701a      	strb	r2, [r3, #0]
    61da:	780a      	ldrb	r2, [r1, #0]
    61dc:	705a      	strb	r2, [r3, #1]
    61de:	784a      	ldrb	r2, [r1, #1]
    61e0:	709a      	strb	r2, [r3, #2]
    61e2:	788a      	ldrb	r2, [r1, #2]
    61e4:	1c19      	adds	r1, r3, #0
    61e6:	70da      	strb	r2, [r3, #3]
    61e8:	f7fe f848 	bl	427c <system_pinmux_pin_set_config>
    61ec:	b003      	add	sp, #12
    61ee:	bd00      	pop	{pc}

000061f0 <tc_register_callback>:
    61f0:	1c93      	adds	r3, r2, #2
    61f2:	009b      	lsls	r3, r3, #2
    61f4:	5019      	str	r1, [r3, r0]
    61f6:	2a02      	cmp	r2, #2
    61f8:	d009      	beq.n	620e <tc_register_callback+0x1e>
    61fa:	2a03      	cmp	r2, #3
    61fc:	d00c      	beq.n	6218 <tc_register_callback+0x28>
    61fe:	2301      	movs	r3, #1
    6200:	4093      	lsls	r3, r2
    6202:	1c1a      	adds	r2, r3, #0
    6204:	7e03      	ldrb	r3, [r0, #24]
    6206:	431a      	orrs	r2, r3
    6208:	7602      	strb	r2, [r0, #24]
    620a:	2000      	movs	r0, #0
    620c:	4770      	bx	lr
    620e:	2310      	movs	r3, #16
    6210:	7e02      	ldrb	r2, [r0, #24]
    6212:	4313      	orrs	r3, r2
    6214:	7603      	strb	r3, [r0, #24]
    6216:	e7f8      	b.n	620a <tc_register_callback+0x1a>
    6218:	2320      	movs	r3, #32
    621a:	7e02      	ldrb	r2, [r0, #24]
    621c:	4313      	orrs	r3, r2
    621e:	7603      	strb	r3, [r0, #24]
    6220:	e7f3      	b.n	620a <tc_register_callback+0x1a>
    6222:	46c0      	nop			; (mov r8, r8)

00006224 <_tc_interrupt_handler>:
    6224:	b570      	push	{r4, r5, r6, lr}
    6226:	2601      	movs	r6, #1
    6228:	4b15      	ldr	r3, [pc, #84]	; (6280 <_tc_interrupt_handler+0x5c>)
    622a:	0080      	lsls	r0, r0, #2
    622c:	58c5      	ldr	r5, [r0, r3]
    622e:	682b      	ldr	r3, [r5, #0]
    6230:	7e2c      	ldrb	r4, [r5, #24]
    6232:	7b9b      	ldrb	r3, [r3, #14]
    6234:	401c      	ands	r4, r3
    6236:	7e6b      	ldrb	r3, [r5, #25]
    6238:	401c      	ands	r4, r3
    623a:	4226      	tst	r6, r4
    623c:	d11a      	bne.n	6274 <_tc_interrupt_handler+0x50>
    623e:	2602      	movs	r6, #2
    6240:	4226      	tst	r6, r4
    6242:	d111      	bne.n	6268 <_tc_interrupt_handler+0x44>
    6244:	2610      	movs	r6, #16
    6246:	4226      	tst	r6, r4
    6248:	d108      	bne.n	625c <_tc_interrupt_handler+0x38>
    624a:	2620      	movs	r6, #32
    624c:	4226      	tst	r6, r4
    624e:	d004      	beq.n	625a <_tc_interrupt_handler+0x36>
    6250:	696b      	ldr	r3, [r5, #20]
    6252:	1c28      	adds	r0, r5, #0
    6254:	4798      	blx	r3
    6256:	682b      	ldr	r3, [r5, #0]
    6258:	739e      	strb	r6, [r3, #14]
    625a:	bd70      	pop	{r4, r5, r6, pc}
    625c:	692b      	ldr	r3, [r5, #16]
    625e:	1c28      	adds	r0, r5, #0
    6260:	4798      	blx	r3
    6262:	682b      	ldr	r3, [r5, #0]
    6264:	739e      	strb	r6, [r3, #14]
    6266:	e7f0      	b.n	624a <_tc_interrupt_handler+0x26>
    6268:	68eb      	ldr	r3, [r5, #12]
    626a:	1c28      	adds	r0, r5, #0
    626c:	4798      	blx	r3
    626e:	682b      	ldr	r3, [r5, #0]
    6270:	739e      	strb	r6, [r3, #14]
    6272:	e7e7      	b.n	6244 <_tc_interrupt_handler+0x20>
    6274:	68ab      	ldr	r3, [r5, #8]
    6276:	1c28      	adds	r0, r5, #0
    6278:	4798      	blx	r3
    627a:	682b      	ldr	r3, [r5, #0]
    627c:	739e      	strb	r6, [r3, #14]
    627e:	e7de      	b.n	623e <_tc_interrupt_handler+0x1a>
    6280:	200047bc 	.word	0x200047bc

00006284 <TC3_Handler>:
    6284:	b508      	push	{r3, lr}
    6286:	2000      	movs	r0, #0
    6288:	f7ff ffcc 	bl	6224 <_tc_interrupt_handler>
    628c:	bd08      	pop	{r3, pc}
    628e:	46c0      	nop			; (mov r8, r8)

00006290 <TC4_Handler>:
    6290:	b508      	push	{r3, lr}
    6292:	2001      	movs	r0, #1
    6294:	f7ff ffc6 	bl	6224 <_tc_interrupt_handler>
    6298:	bd08      	pop	{r3, pc}
    629a:	46c0      	nop			; (mov r8, r8)

0000629c <TC5_Handler>:
    629c:	b508      	push	{r3, lr}
    629e:	2002      	movs	r0, #2
    62a0:	f7ff ffc0 	bl	6224 <_tc_interrupt_handler>
    62a4:	bd08      	pop	{r3, pc}
    62a6:	46c0      	nop			; (mov r8, r8)

000062a8 <_tc_get_inst_index>:
    62a8:	4b0e      	ldr	r3, [pc, #56]	; (62e4 <_tc_get_inst_index+0x3c>)
    62aa:	1c01      	adds	r1, r0, #0
    62ac:	1c18      	adds	r0, r3, #0
    62ae:	b570      	push	{r4, r5, r6, lr}
    62b0:	b084      	sub	sp, #16
    62b2:	aa01      	add	r2, sp, #4
    62b4:	c870      	ldmia	r0!, {r4, r5, r6}
    62b6:	c270      	stmia	r2!, {r4, r5, r6}
    62b8:	9a01      	ldr	r2, [sp, #4]
    62ba:	428a      	cmp	r2, r1
    62bc:	d008      	beq.n	62d0 <_tc_get_inst_index+0x28>
    62be:	685a      	ldr	r2, [r3, #4]
    62c0:	428a      	cmp	r2, r1
    62c2:	d008      	beq.n	62d6 <_tc_get_inst_index+0x2e>
    62c4:	689b      	ldr	r3, [r3, #8]
    62c6:	2000      	movs	r0, #0
    62c8:	428b      	cmp	r3, r1
    62ca:	d007      	beq.n	62dc <_tc_get_inst_index+0x34>
    62cc:	b004      	add	sp, #16
    62ce:	bd70      	pop	{r4, r5, r6, pc}
    62d0:	2000      	movs	r0, #0
    62d2:	b2c0      	uxtb	r0, r0
    62d4:	e7fa      	b.n	62cc <_tc_get_inst_index+0x24>
    62d6:	2001      	movs	r0, #1
    62d8:	b2c0      	uxtb	r0, r0
    62da:	e7f7      	b.n	62cc <_tc_get_inst_index+0x24>
    62dc:	3002      	adds	r0, #2
    62de:	b2c0      	uxtb	r0, r0
    62e0:	e7f4      	b.n	62cc <_tc_get_inst_index+0x24>
    62e2:	46c0      	nop			; (mov r8, r8)
    62e4:	0000f890 	.word	0x0000f890

000062e8 <tc_init>:
    62e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    62ea:	4657      	mov	r7, sl
    62ec:	464e      	mov	r6, r9
    62ee:	4645      	mov	r5, r8
    62f0:	4ca3      	ldr	r4, [pc, #652]	; (6580 <tc_init+0x298>)
    62f2:	4691      	mov	r9, r2
    62f4:	1c22      	adds	r2, r4, #0
    62f6:	b4e0      	push	{r5, r6, r7}
    62f8:	b086      	sub	sp, #24
    62fa:	ab03      	add	r3, sp, #12
    62fc:	1c05      	adds	r5, r0, #0
    62fe:	1c0e      	adds	r6, r1, #0
    6300:	469a      	mov	sl, r3
    6302:	ca83      	ldmia	r2!, {r0, r1, r7}
    6304:	c383      	stmia	r3!, {r0, r1, r7}
    6306:	9b03      	ldr	r3, [sp, #12]
    6308:	429e      	cmp	r6, r3
    630a:	d100      	bne.n	630e <tc_init+0x26>
    630c:	e10c      	b.n	6528 <tc_init+0x240>
    630e:	6863      	ldr	r3, [r4, #4]
    6310:	429e      	cmp	r6, r3
    6312:	d100      	bne.n	6316 <tc_init+0x2e>
    6314:	e10b      	b.n	652e <tc_init+0x246>
    6316:	2300      	movs	r3, #0
    6318:	4698      	mov	r8, r3
    631a:	68a3      	ldr	r3, [r4, #8]
    631c:	429e      	cmp	r6, r3
    631e:	d100      	bne.n	6322 <tc_init+0x3a>
    6320:	e108      	b.n	6534 <tc_init+0x24c>
    6322:	1c21      	adds	r1, r4, #0
    6324:	2203      	movs	r2, #3
    6326:	310c      	adds	r1, #12
    6328:	a801      	add	r0, sp, #4
    632a:	f003 fdb0 	bl	9e8e <memcpy>
    632e:	1c21      	adds	r1, r4, #0
    6330:	2206      	movs	r2, #6
    6332:	3110      	adds	r1, #16
    6334:	4650      	mov	r0, sl
    6336:	f003 fdaa 	bl	9e8e <memcpy>
    633a:	2300      	movs	r3, #0
    633c:	60ab      	str	r3, [r5, #8]
    633e:	60eb      	str	r3, [r5, #12]
    6340:	612b      	str	r3, [r5, #16]
    6342:	616b      	str	r3, [r5, #20]
    6344:	762b      	strb	r3, [r5, #24]
    6346:	766b      	strb	r3, [r5, #25]
    6348:	4643      	mov	r3, r8
    634a:	4a8e      	ldr	r2, [pc, #568]	; (6584 <tc_init+0x29c>)
    634c:	009b      	lsls	r3, r3, #2
    634e:	509d      	str	r5, [r3, r2]
    6350:	464b      	mov	r3, r9
    6352:	602e      	str	r6, [r5, #0]
    6354:	789b      	ldrb	r3, [r3, #2]
    6356:	2b08      	cmp	r3, #8
    6358:	d00b      	beq.n	6372 <tc_init+0x8a>
    635a:	712b      	strb	r3, [r5, #4]
    635c:	8833      	ldrh	r3, [r6, #0]
    635e:	2201      	movs	r2, #1
    6360:	2005      	movs	r0, #5
    6362:	07db      	lsls	r3, r3, #31
    6364:	d50a      	bpl.n	637c <tc_init+0x94>
    6366:	b006      	add	sp, #24
    6368:	bc1c      	pop	{r2, r3, r4}
    636a:	4690      	mov	r8, r2
    636c:	4699      	mov	r9, r3
    636e:	46a2      	mov	sl, r4
    6370:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6372:	4642      	mov	r2, r8
    6374:	2017      	movs	r0, #23
    6376:	07d2      	lsls	r2, r2, #31
    6378:	d5f5      	bpl.n	6366 <tc_init+0x7e>
    637a:	e7ee      	b.n	635a <tc_init+0x72>
    637c:	7bf3      	ldrb	r3, [r6, #15]
    637e:	3017      	adds	r0, #23
    6380:	06db      	lsls	r3, r3, #27
    6382:	d4f0      	bmi.n	6366 <tc_init+0x7e>
    6384:	2102      	movs	r1, #2
    6386:	8833      	ldrh	r3, [r6, #0]
    6388:	400b      	ands	r3, r1
    638a:	d1ec      	bne.n	6366 <tc_init+0x7e>
    638c:	4649      	mov	r1, r9
    638e:	7c09      	ldrb	r1, [r1, #16]
    6390:	2900      	cmp	r1, #0
    6392:	d000      	beq.n	6396 <tc_init+0xae>
    6394:	e0d1      	b.n	653a <tc_init+0x252>
    6396:	464b      	mov	r3, r9
    6398:	7f1b      	ldrb	r3, [r3, #28]
    639a:	2b00      	cmp	r3, #0
    639c:	d000      	beq.n	63a0 <tc_init+0xb8>
    639e:	e0d8      	b.n	6552 <tc_init+0x26a>
    63a0:	4641      	mov	r1, r8
    63a2:	4650      	mov	r0, sl
    63a4:	4a78      	ldr	r2, [pc, #480]	; (6588 <tc_init+0x2a0>)
    63a6:	0049      	lsls	r1, r1, #1
    63a8:	6a13      	ldr	r3, [r2, #32]
    63aa:	5a41      	ldrh	r1, [r0, r1]
    63ac:	430b      	orrs	r3, r1
    63ae:	6213      	str	r3, [r2, #32]
    63b0:	464b      	mov	r3, r9
    63b2:	789b      	ldrb	r3, [r3, #2]
    63b4:	2b08      	cmp	r3, #8
    63b6:	d100      	bne.n	63ba <tc_init+0xd2>
    63b8:	e0da      	b.n	6570 <tc_init+0x288>
    63ba:	464b      	mov	r3, r9
    63bc:	466a      	mov	r2, sp
    63be:	781b      	ldrb	r3, [r3, #0]
    63c0:	4669      	mov	r1, sp
    63c2:	7013      	strb	r3, [r2, #0]
    63c4:	466b      	mov	r3, sp
    63c6:	4642      	mov	r2, r8
    63c8:	3304      	adds	r3, #4
    63ca:	5c9c      	ldrb	r4, [r3, r2]
    63cc:	1c20      	adds	r0, r4, #0
    63ce:	f7fe f85f 	bl	4490 <system_gclk_chan_set_config>
    63d2:	1c20      	adds	r0, r4, #0
    63d4:	f7fe f81e 	bl	4414 <system_gclk_chan_enable>
    63d8:	464b      	mov	r3, r9
    63da:	464a      	mov	r2, r9
    63dc:	8898      	ldrh	r0, [r3, #4]
    63de:	891b      	ldrh	r3, [r3, #8]
    63e0:	4303      	orrs	r3, r0
    63e2:	7990      	ldrb	r0, [r2, #6]
    63e4:	7892      	ldrb	r2, [r2, #2]
    63e6:	4310      	orrs	r0, r2
    63e8:	4318      	orrs	r0, r3
    63ea:	464b      	mov	r3, r9
    63ec:	785b      	ldrb	r3, [r3, #1]
    63ee:	2b00      	cmp	r3, #0
    63f0:	d002      	beq.n	63f8 <tc_init+0x110>
    63f2:	2380      	movs	r3, #128	; 0x80
    63f4:	011b      	lsls	r3, r3, #4
    63f6:	4318      	orrs	r0, r3
    63f8:	227f      	movs	r2, #127	; 0x7f
    63fa:	6829      	ldr	r1, [r5, #0]
    63fc:	7bcb      	ldrb	r3, [r1, #15]
    63fe:	4393      	bics	r3, r2
    6400:	d1fc      	bne.n	63fc <tc_init+0x114>
    6402:	464b      	mov	r3, r9
    6404:	8030      	strh	r0, [r6, #0]
    6406:	7b58      	ldrb	r0, [r3, #13]
    6408:	1e43      	subs	r3, r0, #1
    640a:	4198      	sbcs	r0, r3
    640c:	464b      	mov	r3, r9
    640e:	7b9b      	ldrb	r3, [r3, #14]
    6410:	0080      	lsls	r0, r0, #2
    6412:	2b00      	cmp	r3, #0
    6414:	d001      	beq.n	641a <tc_init+0x132>
    6416:	2301      	movs	r3, #1
    6418:	4318      	orrs	r0, r3
    641a:	227f      	movs	r2, #127	; 0x7f
    641c:	6829      	ldr	r1, [r5, #0]
    641e:	7bcb      	ldrb	r3, [r1, #15]
    6420:	4393      	bics	r3, r2
    6422:	d1fc      	bne.n	641e <tc_init+0x136>
    6424:	33ff      	adds	r3, #255	; 0xff
    6426:	7133      	strb	r3, [r6, #4]
    6428:	2800      	cmp	r0, #0
    642a:	d005      	beq.n	6438 <tc_init+0x150>
    642c:	227f      	movs	r2, #127	; 0x7f
    642e:	6829      	ldr	r1, [r5, #0]
    6430:	7bcb      	ldrb	r3, [r1, #15]
    6432:	4393      	bics	r3, r2
    6434:	d1fc      	bne.n	6430 <tc_init+0x148>
    6436:	7170      	strb	r0, [r6, #5]
    6438:	464b      	mov	r3, r9
    643a:	7a98      	ldrb	r0, [r3, #10]
    643c:	7adb      	ldrb	r3, [r3, #11]
    643e:	2b00      	cmp	r3, #0
    6440:	d001      	beq.n	6446 <tc_init+0x15e>
    6442:	2310      	movs	r3, #16
    6444:	4318      	orrs	r0, r3
    6446:	464b      	mov	r3, r9
    6448:	7b1b      	ldrb	r3, [r3, #12]
    644a:	2b00      	cmp	r3, #0
    644c:	d001      	beq.n	6452 <tc_init+0x16a>
    644e:	2320      	movs	r3, #32
    6450:	4318      	orrs	r0, r3
    6452:	227f      	movs	r2, #127	; 0x7f
    6454:	6829      	ldr	r1, [r5, #0]
    6456:	7bcb      	ldrb	r3, [r1, #15]
    6458:	4393      	bics	r3, r2
    645a:	d1fc      	bne.n	6456 <tc_init+0x16e>
    645c:	217f      	movs	r1, #127	; 0x7f
    645e:	71b0      	strb	r0, [r6, #6]
    6460:	682a      	ldr	r2, [r5, #0]
    6462:	7bd3      	ldrb	r3, [r2, #15]
    6464:	438b      	bics	r3, r1
    6466:	d1fc      	bne.n	6462 <tc_init+0x17a>
    6468:	792b      	ldrb	r3, [r5, #4]
    646a:	217f      	movs	r1, #127	; 0x7f
    646c:	2b04      	cmp	r3, #4
    646e:	d007      	beq.n	6480 <tc_init+0x198>
    6470:	217f      	movs	r1, #127	; 0x7f
    6472:	2b08      	cmp	r3, #8
    6474:	d040      	beq.n	64f8 <tc_init+0x210>
    6476:	217f      	movs	r1, #127	; 0x7f
    6478:	2b00      	cmp	r3, #0
    647a:	d025      	beq.n	64c8 <tc_init+0x1e0>
    647c:	2017      	movs	r0, #23
    647e:	e772      	b.n	6366 <tc_init+0x7e>
    6480:	7bd3      	ldrb	r3, [r2, #15]
    6482:	438b      	bics	r3, r1
    6484:	d1fc      	bne.n	6480 <tc_init+0x198>
    6486:	464a      	mov	r2, r9
    6488:	3328      	adds	r3, #40	; 0x28
    648a:	5cd3      	ldrb	r3, [r2, r3]
    648c:	227f      	movs	r2, #127	; 0x7f
    648e:	7433      	strb	r3, [r6, #16]
    6490:	6829      	ldr	r1, [r5, #0]
    6492:	7bcb      	ldrb	r3, [r1, #15]
    6494:	4393      	bics	r3, r2
    6496:	d1fc      	bne.n	6492 <tc_init+0x1aa>
    6498:	464a      	mov	r2, r9
    649a:	3329      	adds	r3, #41	; 0x29
    649c:	5cd3      	ldrb	r3, [r2, r3]
    649e:	227f      	movs	r2, #127	; 0x7f
    64a0:	7533      	strb	r3, [r6, #20]
    64a2:	6829      	ldr	r1, [r5, #0]
    64a4:	7bcb      	ldrb	r3, [r1, #15]
    64a6:	4393      	bics	r3, r2
    64a8:	d1fc      	bne.n	64a4 <tc_init+0x1bc>
    64aa:	464a      	mov	r2, r9
    64ac:	332a      	adds	r3, #42	; 0x2a
    64ae:	5cd3      	ldrb	r3, [r2, r3]
    64b0:	227f      	movs	r2, #127	; 0x7f
    64b2:	7633      	strb	r3, [r6, #24]
    64b4:	6829      	ldr	r1, [r5, #0]
    64b6:	7bcb      	ldrb	r3, [r1, #15]
    64b8:	4393      	bics	r3, r2
    64ba:	d1fc      	bne.n	64b6 <tc_init+0x1ce>
    64bc:	464a      	mov	r2, r9
    64be:	332b      	adds	r3, #43	; 0x2b
    64c0:	5cd3      	ldrb	r3, [r2, r3]
    64c2:	2000      	movs	r0, #0
    64c4:	7673      	strb	r3, [r6, #25]
    64c6:	e74e      	b.n	6366 <tc_init+0x7e>
    64c8:	7bd3      	ldrb	r3, [r2, #15]
    64ca:	438b      	bics	r3, r1
    64cc:	d1fc      	bne.n	64c8 <tc_init+0x1e0>
    64ce:	464b      	mov	r3, r9
    64d0:	227f      	movs	r2, #127	; 0x7f
    64d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    64d4:	8233      	strh	r3, [r6, #16]
    64d6:	6829      	ldr	r1, [r5, #0]
    64d8:	7bcb      	ldrb	r3, [r1, #15]
    64da:	4393      	bics	r3, r2
    64dc:	d1fc      	bne.n	64d8 <tc_init+0x1f0>
    64de:	464b      	mov	r3, r9
    64e0:	227f      	movs	r2, #127	; 0x7f
    64e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    64e4:	8333      	strh	r3, [r6, #24]
    64e6:	6829      	ldr	r1, [r5, #0]
    64e8:	7bcb      	ldrb	r3, [r1, #15]
    64ea:	4393      	bics	r3, r2
    64ec:	d1fc      	bne.n	64e8 <tc_init+0x200>
    64ee:	464b      	mov	r3, r9
    64f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    64f2:	2000      	movs	r0, #0
    64f4:	8373      	strh	r3, [r6, #26]
    64f6:	e736      	b.n	6366 <tc_init+0x7e>
    64f8:	7bd3      	ldrb	r3, [r2, #15]
    64fa:	438b      	bics	r3, r1
    64fc:	d1fc      	bne.n	64f8 <tc_init+0x210>
    64fe:	464b      	mov	r3, r9
    6500:	227f      	movs	r2, #127	; 0x7f
    6502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6504:	6133      	str	r3, [r6, #16]
    6506:	6829      	ldr	r1, [r5, #0]
    6508:	7bcb      	ldrb	r3, [r1, #15]
    650a:	4393      	bics	r3, r2
    650c:	d1fc      	bne.n	6508 <tc_init+0x220>
    650e:	464b      	mov	r3, r9
    6510:	227f      	movs	r2, #127	; 0x7f
    6512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6514:	61b3      	str	r3, [r6, #24]
    6516:	6829      	ldr	r1, [r5, #0]
    6518:	7bcb      	ldrb	r3, [r1, #15]
    651a:	4393      	bics	r3, r2
    651c:	d1fc      	bne.n	6518 <tc_init+0x230>
    651e:	464b      	mov	r3, r9
    6520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    6522:	2000      	movs	r0, #0
    6524:	61f3      	str	r3, [r6, #28]
    6526:	e71e      	b.n	6366 <tc_init+0x7e>
    6528:	2300      	movs	r3, #0
    652a:	4698      	mov	r8, r3
    652c:	e6f9      	b.n	6322 <tc_init+0x3a>
    652e:	2301      	movs	r3, #1
    6530:	4698      	mov	r8, r3
    6532:	e6f6      	b.n	6322 <tc_init+0x3a>
    6534:	2302      	movs	r3, #2
    6536:	4698      	mov	r8, r3
    6538:	e6f3      	b.n	6322 <tc_init+0x3a>
    653a:	a902      	add	r1, sp, #8
    653c:	70cb      	strb	r3, [r1, #3]
    653e:	464b      	mov	r3, r9
    6540:	7e1b      	ldrb	r3, [r3, #24]
    6542:	708a      	strb	r2, [r1, #2]
    6544:	700b      	strb	r3, [r1, #0]
    6546:	464b      	mov	r3, r9
    6548:	7d18      	ldrb	r0, [r3, #20]
    654a:	704a      	strb	r2, [r1, #1]
    654c:	f7fd fe96 	bl	427c <system_pinmux_pin_set_config>
    6550:	e721      	b.n	6396 <tc_init+0xae>
    6552:	2301      	movs	r3, #1
    6554:	2200      	movs	r2, #0
    6556:	a902      	add	r1, sp, #8
    6558:	708b      	strb	r3, [r1, #2]
    655a:	704b      	strb	r3, [r1, #1]
    655c:	464b      	mov	r3, r9
    655e:	70ca      	strb	r2, [r1, #3]
    6560:	464a      	mov	r2, r9
    6562:	6a1b      	ldr	r3, [r3, #32]
    6564:	6a52      	ldr	r2, [r2, #36]	; 0x24
    6566:	b2d8      	uxtb	r0, r3
    6568:	700a      	strb	r2, [r1, #0]
    656a:	f7fd fe87 	bl	427c <system_pinmux_pin_set_config>
    656e:	e717      	b.n	63a0 <tc_init+0xb8>
    6570:	4641      	mov	r1, r8
    6572:	3101      	adds	r1, #1
    6574:	0049      	lsls	r1, r1, #1
    6576:	6a13      	ldr	r3, [r2, #32]
    6578:	5a41      	ldrh	r1, [r0, r1]
    657a:	430b      	orrs	r3, r1
    657c:	6213      	str	r3, [r2, #32]
    657e:	e71c      	b.n	63ba <tc_init+0xd2>
    6580:	0000f890 	.word	0x0000f890
    6584:	200047bc 	.word	0x200047bc
    6588:	40000400 	.word	0x40000400

0000658c <tc_get_count_value>:
    658c:	217f      	movs	r1, #127	; 0x7f
    658e:	6802      	ldr	r2, [r0, #0]
    6590:	7bd3      	ldrb	r3, [r2, #15]
    6592:	438b      	bics	r3, r1
    6594:	d1fc      	bne.n	6590 <tc_get_count_value+0x4>
    6596:	7903      	ldrb	r3, [r0, #4]
    6598:	2b04      	cmp	r3, #4
    659a:	d00a      	beq.n	65b2 <tc_get_count_value+0x26>
    659c:	2b08      	cmp	r3, #8
    659e:	d006      	beq.n	65ae <tc_get_count_value+0x22>
    65a0:	2000      	movs	r0, #0
    65a2:	2b00      	cmp	r3, #0
    65a4:	d000      	beq.n	65a8 <tc_get_count_value+0x1c>
    65a6:	4770      	bx	lr
    65a8:	8a10      	ldrh	r0, [r2, #16]
    65aa:	b280      	uxth	r0, r0
    65ac:	e7fb      	b.n	65a6 <tc_get_count_value+0x1a>
    65ae:	6910      	ldr	r0, [r2, #16]
    65b0:	e7f9      	b.n	65a6 <tc_get_count_value+0x1a>
    65b2:	7c10      	ldrb	r0, [r2, #16]
    65b4:	b2c0      	uxtb	r0, r0
    65b6:	e7f6      	b.n	65a6 <tc_get_count_value+0x1a>

000065b8 <tc_set_compare_value>:
    65b8:	b530      	push	{r4, r5, lr}
    65ba:	257f      	movs	r5, #127	; 0x7f
    65bc:	6804      	ldr	r4, [r0, #0]
    65be:	7be3      	ldrb	r3, [r4, #15]
    65c0:	43ab      	bics	r3, r5
    65c2:	d1fc      	bne.n	65be <tc_set_compare_value+0x6>
    65c4:	7903      	ldrb	r3, [r0, #4]
    65c6:	2b04      	cmp	r3, #4
    65c8:	d016      	beq.n	65f8 <tc_set_compare_value+0x40>
    65ca:	2b08      	cmp	r3, #8
    65cc:	d00c      	beq.n	65e8 <tc_set_compare_value+0x30>
    65ce:	2017      	movs	r0, #23
    65d0:	2b00      	cmp	r3, #0
    65d2:	d000      	beq.n	65d6 <tc_set_compare_value+0x1e>
    65d4:	bd30      	pop	{r4, r5, pc}
    65d6:	2017      	movs	r0, #23
    65d8:	2901      	cmp	r1, #1
    65da:	d8fb      	bhi.n	65d4 <tc_set_compare_value+0x1c>
    65dc:	310c      	adds	r1, #12
    65de:	b292      	uxth	r2, r2
    65e0:	0049      	lsls	r1, r1, #1
    65e2:	530a      	strh	r2, [r1, r4]
    65e4:	2000      	movs	r0, #0
    65e6:	e7f5      	b.n	65d4 <tc_set_compare_value+0x1c>
    65e8:	2017      	movs	r0, #23
    65ea:	2901      	cmp	r1, #1
    65ec:	d8f2      	bhi.n	65d4 <tc_set_compare_value+0x1c>
    65ee:	3106      	adds	r1, #6
    65f0:	0089      	lsls	r1, r1, #2
    65f2:	510a      	str	r2, [r1, r4]
    65f4:	2000      	movs	r0, #0
    65f6:	e7ed      	b.n	65d4 <tc_set_compare_value+0x1c>
    65f8:	2017      	movs	r0, #23
    65fa:	2901      	cmp	r1, #1
    65fc:	d8ea      	bhi.n	65d4 <tc_set_compare_value+0x1c>
    65fe:	b2d2      	uxtb	r2, r2
    6600:	1861      	adds	r1, r4, r1
    6602:	760a      	strb	r2, [r1, #24]
    6604:	2000      	movs	r0, #0
    6606:	e7e5      	b.n	65d4 <tc_set_compare_value+0x1c>

00006608 <ticker_irq_handler>:
    6608:	b538      	push	{r3, r4, r5, lr}
    660a:	6803      	ldr	r3, [r0, #0]
    660c:	1c05      	adds	r5, r0, #0
    660e:	68db      	ldr	r3, [r3, #12]
    6610:	4798      	blx	r3
    6612:	686b      	ldr	r3, [r5, #4]
    6614:	685b      	ldr	r3, [r3, #4]
    6616:	e00d      	b.n	6634 <ticker_irq_handler+0x2c>
    6618:	681c      	ldr	r4, [r3, #0]
    661a:	682b      	ldr	r3, [r5, #0]
    661c:	685b      	ldr	r3, [r3, #4]
    661e:	4798      	blx	r3
    6620:	1a24      	subs	r4, r4, r0
    6622:	2c00      	cmp	r4, #0
    6624:	dc0c      	bgt.n	6640 <ticker_irq_handler+0x38>
    6626:	686a      	ldr	r2, [r5, #4]
    6628:	6851      	ldr	r1, [r2, #4]
    662a:	688b      	ldr	r3, [r1, #8]
    662c:	6053      	str	r3, [r2, #4]
    662e:	6812      	ldr	r2, [r2, #0]
    6630:	2a00      	cmp	r2, #0
    6632:	d10c      	bne.n	664e <ticker_irq_handler+0x46>
    6634:	2b00      	cmp	r3, #0
    6636:	d1ef      	bne.n	6618 <ticker_irq_handler+0x10>
    6638:	682b      	ldr	r3, [r5, #0]
    663a:	689b      	ldr	r3, [r3, #8]
    663c:	4798      	blx	r3
    663e:	bd38      	pop	{r3, r4, r5, pc}
    6640:	686a      	ldr	r2, [r5, #4]
    6642:	682b      	ldr	r3, [r5, #0]
    6644:	6852      	ldr	r2, [r2, #4]
    6646:	691b      	ldr	r3, [r3, #16]
    6648:	6810      	ldr	r0, [r2, #0]
    664a:	4798      	blx	r3
    664c:	e7f7      	b.n	663e <ticker_irq_handler+0x36>
    664e:	6848      	ldr	r0, [r1, #4]
    6650:	4790      	blx	r2
    6652:	e7de      	b.n	6612 <ticker_irq_handler+0xa>

00006654 <__aeabi_atexit>:
    6654:	b508      	push	{r3, lr}
    6656:	1c03      	adds	r3, r0, #0
    6658:	1c08      	adds	r0, r1, #0
    665a:	1c19      	adds	r1, r3, #0
    665c:	f003 f836 	bl	96cc <__cxa_atexit>
    6660:	bd08      	pop	{r3, pc}

00006662 <_ZdlPv>:
    6662:	b508      	push	{r3, lr}
    6664:	f003 fbfe 	bl	9e64 <free>
    6668:	bd08      	pop	{r3, pc}
	...

0000666c <__aeabi_uidiv>:
    666c:	2200      	movs	r2, #0
    666e:	0843      	lsrs	r3, r0, #1
    6670:	428b      	cmp	r3, r1
    6672:	d374      	bcc.n	675e <__aeabi_uidiv+0xf2>
    6674:	0903      	lsrs	r3, r0, #4
    6676:	428b      	cmp	r3, r1
    6678:	d35f      	bcc.n	673a <__aeabi_uidiv+0xce>
    667a:	0a03      	lsrs	r3, r0, #8
    667c:	428b      	cmp	r3, r1
    667e:	d344      	bcc.n	670a <__aeabi_uidiv+0x9e>
    6680:	0b03      	lsrs	r3, r0, #12
    6682:	428b      	cmp	r3, r1
    6684:	d328      	bcc.n	66d8 <__aeabi_uidiv+0x6c>
    6686:	0c03      	lsrs	r3, r0, #16
    6688:	428b      	cmp	r3, r1
    668a:	d30d      	bcc.n	66a8 <__aeabi_uidiv+0x3c>
    668c:	22ff      	movs	r2, #255	; 0xff
    668e:	0209      	lsls	r1, r1, #8
    6690:	ba12      	rev	r2, r2
    6692:	0c03      	lsrs	r3, r0, #16
    6694:	428b      	cmp	r3, r1
    6696:	d302      	bcc.n	669e <__aeabi_uidiv+0x32>
    6698:	1212      	asrs	r2, r2, #8
    669a:	0209      	lsls	r1, r1, #8
    669c:	d065      	beq.n	676a <__aeabi_uidiv+0xfe>
    669e:	0b03      	lsrs	r3, r0, #12
    66a0:	428b      	cmp	r3, r1
    66a2:	d319      	bcc.n	66d8 <__aeabi_uidiv+0x6c>
    66a4:	e000      	b.n	66a8 <__aeabi_uidiv+0x3c>
    66a6:	0a09      	lsrs	r1, r1, #8
    66a8:	0bc3      	lsrs	r3, r0, #15
    66aa:	428b      	cmp	r3, r1
    66ac:	d301      	bcc.n	66b2 <__aeabi_uidiv+0x46>
    66ae:	03cb      	lsls	r3, r1, #15
    66b0:	1ac0      	subs	r0, r0, r3
    66b2:	4152      	adcs	r2, r2
    66b4:	0b83      	lsrs	r3, r0, #14
    66b6:	428b      	cmp	r3, r1
    66b8:	d301      	bcc.n	66be <__aeabi_uidiv+0x52>
    66ba:	038b      	lsls	r3, r1, #14
    66bc:	1ac0      	subs	r0, r0, r3
    66be:	4152      	adcs	r2, r2
    66c0:	0b43      	lsrs	r3, r0, #13
    66c2:	428b      	cmp	r3, r1
    66c4:	d301      	bcc.n	66ca <__aeabi_uidiv+0x5e>
    66c6:	034b      	lsls	r3, r1, #13
    66c8:	1ac0      	subs	r0, r0, r3
    66ca:	4152      	adcs	r2, r2
    66cc:	0b03      	lsrs	r3, r0, #12
    66ce:	428b      	cmp	r3, r1
    66d0:	d301      	bcc.n	66d6 <__aeabi_uidiv+0x6a>
    66d2:	030b      	lsls	r3, r1, #12
    66d4:	1ac0      	subs	r0, r0, r3
    66d6:	4152      	adcs	r2, r2
    66d8:	0ac3      	lsrs	r3, r0, #11
    66da:	428b      	cmp	r3, r1
    66dc:	d301      	bcc.n	66e2 <__aeabi_uidiv+0x76>
    66de:	02cb      	lsls	r3, r1, #11
    66e0:	1ac0      	subs	r0, r0, r3
    66e2:	4152      	adcs	r2, r2
    66e4:	0a83      	lsrs	r3, r0, #10
    66e6:	428b      	cmp	r3, r1
    66e8:	d301      	bcc.n	66ee <__aeabi_uidiv+0x82>
    66ea:	028b      	lsls	r3, r1, #10
    66ec:	1ac0      	subs	r0, r0, r3
    66ee:	4152      	adcs	r2, r2
    66f0:	0a43      	lsrs	r3, r0, #9
    66f2:	428b      	cmp	r3, r1
    66f4:	d301      	bcc.n	66fa <__aeabi_uidiv+0x8e>
    66f6:	024b      	lsls	r3, r1, #9
    66f8:	1ac0      	subs	r0, r0, r3
    66fa:	4152      	adcs	r2, r2
    66fc:	0a03      	lsrs	r3, r0, #8
    66fe:	428b      	cmp	r3, r1
    6700:	d301      	bcc.n	6706 <__aeabi_uidiv+0x9a>
    6702:	020b      	lsls	r3, r1, #8
    6704:	1ac0      	subs	r0, r0, r3
    6706:	4152      	adcs	r2, r2
    6708:	d2cd      	bcs.n	66a6 <__aeabi_uidiv+0x3a>
    670a:	09c3      	lsrs	r3, r0, #7
    670c:	428b      	cmp	r3, r1
    670e:	d301      	bcc.n	6714 <__aeabi_uidiv+0xa8>
    6710:	01cb      	lsls	r3, r1, #7
    6712:	1ac0      	subs	r0, r0, r3
    6714:	4152      	adcs	r2, r2
    6716:	0983      	lsrs	r3, r0, #6
    6718:	428b      	cmp	r3, r1
    671a:	d301      	bcc.n	6720 <__aeabi_uidiv+0xb4>
    671c:	018b      	lsls	r3, r1, #6
    671e:	1ac0      	subs	r0, r0, r3
    6720:	4152      	adcs	r2, r2
    6722:	0943      	lsrs	r3, r0, #5
    6724:	428b      	cmp	r3, r1
    6726:	d301      	bcc.n	672c <__aeabi_uidiv+0xc0>
    6728:	014b      	lsls	r3, r1, #5
    672a:	1ac0      	subs	r0, r0, r3
    672c:	4152      	adcs	r2, r2
    672e:	0903      	lsrs	r3, r0, #4
    6730:	428b      	cmp	r3, r1
    6732:	d301      	bcc.n	6738 <__aeabi_uidiv+0xcc>
    6734:	010b      	lsls	r3, r1, #4
    6736:	1ac0      	subs	r0, r0, r3
    6738:	4152      	adcs	r2, r2
    673a:	08c3      	lsrs	r3, r0, #3
    673c:	428b      	cmp	r3, r1
    673e:	d301      	bcc.n	6744 <__aeabi_uidiv+0xd8>
    6740:	00cb      	lsls	r3, r1, #3
    6742:	1ac0      	subs	r0, r0, r3
    6744:	4152      	adcs	r2, r2
    6746:	0883      	lsrs	r3, r0, #2
    6748:	428b      	cmp	r3, r1
    674a:	d301      	bcc.n	6750 <__aeabi_uidiv+0xe4>
    674c:	008b      	lsls	r3, r1, #2
    674e:	1ac0      	subs	r0, r0, r3
    6750:	4152      	adcs	r2, r2
    6752:	0843      	lsrs	r3, r0, #1
    6754:	428b      	cmp	r3, r1
    6756:	d301      	bcc.n	675c <__aeabi_uidiv+0xf0>
    6758:	004b      	lsls	r3, r1, #1
    675a:	1ac0      	subs	r0, r0, r3
    675c:	4152      	adcs	r2, r2
    675e:	1a41      	subs	r1, r0, r1
    6760:	d200      	bcs.n	6764 <__aeabi_uidiv+0xf8>
    6762:	4601      	mov	r1, r0
    6764:	4152      	adcs	r2, r2
    6766:	4610      	mov	r0, r2
    6768:	4770      	bx	lr
    676a:	e7ff      	b.n	676c <__aeabi_uidiv+0x100>
    676c:	b501      	push	{r0, lr}
    676e:	2000      	movs	r0, #0
    6770:	f000 f8fc 	bl	696c <__aeabi_idiv0>
    6774:	bd02      	pop	{r1, pc}
    6776:	46c0      	nop			; (mov r8, r8)

00006778 <__aeabi_uidivmod>:
    6778:	2900      	cmp	r1, #0
    677a:	d0f7      	beq.n	676c <__aeabi_uidiv+0x100>
    677c:	b503      	push	{r0, r1, lr}
    677e:	f7ff ff75 	bl	666c <__aeabi_uidiv>
    6782:	bc0e      	pop	{r1, r2, r3}
    6784:	4342      	muls	r2, r0
    6786:	1a89      	subs	r1, r1, r2
    6788:	4718      	bx	r3
    678a:	46c0      	nop			; (mov r8, r8)

0000678c <__aeabi_idiv>:
    678c:	4603      	mov	r3, r0
    678e:	430b      	orrs	r3, r1
    6790:	d47f      	bmi.n	6892 <__aeabi_idiv+0x106>
    6792:	2200      	movs	r2, #0
    6794:	0843      	lsrs	r3, r0, #1
    6796:	428b      	cmp	r3, r1
    6798:	d374      	bcc.n	6884 <__aeabi_idiv+0xf8>
    679a:	0903      	lsrs	r3, r0, #4
    679c:	428b      	cmp	r3, r1
    679e:	d35f      	bcc.n	6860 <__aeabi_idiv+0xd4>
    67a0:	0a03      	lsrs	r3, r0, #8
    67a2:	428b      	cmp	r3, r1
    67a4:	d344      	bcc.n	6830 <__aeabi_idiv+0xa4>
    67a6:	0b03      	lsrs	r3, r0, #12
    67a8:	428b      	cmp	r3, r1
    67aa:	d328      	bcc.n	67fe <__aeabi_idiv+0x72>
    67ac:	0c03      	lsrs	r3, r0, #16
    67ae:	428b      	cmp	r3, r1
    67b0:	d30d      	bcc.n	67ce <__aeabi_idiv+0x42>
    67b2:	22ff      	movs	r2, #255	; 0xff
    67b4:	0209      	lsls	r1, r1, #8
    67b6:	ba12      	rev	r2, r2
    67b8:	0c03      	lsrs	r3, r0, #16
    67ba:	428b      	cmp	r3, r1
    67bc:	d302      	bcc.n	67c4 <__aeabi_idiv+0x38>
    67be:	1212      	asrs	r2, r2, #8
    67c0:	0209      	lsls	r1, r1, #8
    67c2:	d065      	beq.n	6890 <__aeabi_idiv+0x104>
    67c4:	0b03      	lsrs	r3, r0, #12
    67c6:	428b      	cmp	r3, r1
    67c8:	d319      	bcc.n	67fe <__aeabi_idiv+0x72>
    67ca:	e000      	b.n	67ce <__aeabi_idiv+0x42>
    67cc:	0a09      	lsrs	r1, r1, #8
    67ce:	0bc3      	lsrs	r3, r0, #15
    67d0:	428b      	cmp	r3, r1
    67d2:	d301      	bcc.n	67d8 <__aeabi_idiv+0x4c>
    67d4:	03cb      	lsls	r3, r1, #15
    67d6:	1ac0      	subs	r0, r0, r3
    67d8:	4152      	adcs	r2, r2
    67da:	0b83      	lsrs	r3, r0, #14
    67dc:	428b      	cmp	r3, r1
    67de:	d301      	bcc.n	67e4 <__aeabi_idiv+0x58>
    67e0:	038b      	lsls	r3, r1, #14
    67e2:	1ac0      	subs	r0, r0, r3
    67e4:	4152      	adcs	r2, r2
    67e6:	0b43      	lsrs	r3, r0, #13
    67e8:	428b      	cmp	r3, r1
    67ea:	d301      	bcc.n	67f0 <__aeabi_idiv+0x64>
    67ec:	034b      	lsls	r3, r1, #13
    67ee:	1ac0      	subs	r0, r0, r3
    67f0:	4152      	adcs	r2, r2
    67f2:	0b03      	lsrs	r3, r0, #12
    67f4:	428b      	cmp	r3, r1
    67f6:	d301      	bcc.n	67fc <__aeabi_idiv+0x70>
    67f8:	030b      	lsls	r3, r1, #12
    67fa:	1ac0      	subs	r0, r0, r3
    67fc:	4152      	adcs	r2, r2
    67fe:	0ac3      	lsrs	r3, r0, #11
    6800:	428b      	cmp	r3, r1
    6802:	d301      	bcc.n	6808 <__aeabi_idiv+0x7c>
    6804:	02cb      	lsls	r3, r1, #11
    6806:	1ac0      	subs	r0, r0, r3
    6808:	4152      	adcs	r2, r2
    680a:	0a83      	lsrs	r3, r0, #10
    680c:	428b      	cmp	r3, r1
    680e:	d301      	bcc.n	6814 <__aeabi_idiv+0x88>
    6810:	028b      	lsls	r3, r1, #10
    6812:	1ac0      	subs	r0, r0, r3
    6814:	4152      	adcs	r2, r2
    6816:	0a43      	lsrs	r3, r0, #9
    6818:	428b      	cmp	r3, r1
    681a:	d301      	bcc.n	6820 <__aeabi_idiv+0x94>
    681c:	024b      	lsls	r3, r1, #9
    681e:	1ac0      	subs	r0, r0, r3
    6820:	4152      	adcs	r2, r2
    6822:	0a03      	lsrs	r3, r0, #8
    6824:	428b      	cmp	r3, r1
    6826:	d301      	bcc.n	682c <__aeabi_idiv+0xa0>
    6828:	020b      	lsls	r3, r1, #8
    682a:	1ac0      	subs	r0, r0, r3
    682c:	4152      	adcs	r2, r2
    682e:	d2cd      	bcs.n	67cc <__aeabi_idiv+0x40>
    6830:	09c3      	lsrs	r3, r0, #7
    6832:	428b      	cmp	r3, r1
    6834:	d301      	bcc.n	683a <__aeabi_idiv+0xae>
    6836:	01cb      	lsls	r3, r1, #7
    6838:	1ac0      	subs	r0, r0, r3
    683a:	4152      	adcs	r2, r2
    683c:	0983      	lsrs	r3, r0, #6
    683e:	428b      	cmp	r3, r1
    6840:	d301      	bcc.n	6846 <__aeabi_idiv+0xba>
    6842:	018b      	lsls	r3, r1, #6
    6844:	1ac0      	subs	r0, r0, r3
    6846:	4152      	adcs	r2, r2
    6848:	0943      	lsrs	r3, r0, #5
    684a:	428b      	cmp	r3, r1
    684c:	d301      	bcc.n	6852 <__aeabi_idiv+0xc6>
    684e:	014b      	lsls	r3, r1, #5
    6850:	1ac0      	subs	r0, r0, r3
    6852:	4152      	adcs	r2, r2
    6854:	0903      	lsrs	r3, r0, #4
    6856:	428b      	cmp	r3, r1
    6858:	d301      	bcc.n	685e <__aeabi_idiv+0xd2>
    685a:	010b      	lsls	r3, r1, #4
    685c:	1ac0      	subs	r0, r0, r3
    685e:	4152      	adcs	r2, r2
    6860:	08c3      	lsrs	r3, r0, #3
    6862:	428b      	cmp	r3, r1
    6864:	d301      	bcc.n	686a <__aeabi_idiv+0xde>
    6866:	00cb      	lsls	r3, r1, #3
    6868:	1ac0      	subs	r0, r0, r3
    686a:	4152      	adcs	r2, r2
    686c:	0883      	lsrs	r3, r0, #2
    686e:	428b      	cmp	r3, r1
    6870:	d301      	bcc.n	6876 <__aeabi_idiv+0xea>
    6872:	008b      	lsls	r3, r1, #2
    6874:	1ac0      	subs	r0, r0, r3
    6876:	4152      	adcs	r2, r2
    6878:	0843      	lsrs	r3, r0, #1
    687a:	428b      	cmp	r3, r1
    687c:	d301      	bcc.n	6882 <__aeabi_idiv+0xf6>
    687e:	004b      	lsls	r3, r1, #1
    6880:	1ac0      	subs	r0, r0, r3
    6882:	4152      	adcs	r2, r2
    6884:	1a41      	subs	r1, r0, r1
    6886:	d200      	bcs.n	688a <__aeabi_idiv+0xfe>
    6888:	4601      	mov	r1, r0
    688a:	4152      	adcs	r2, r2
    688c:	4610      	mov	r0, r2
    688e:	4770      	bx	lr
    6890:	e05d      	b.n	694e <__aeabi_idiv+0x1c2>
    6892:	0fca      	lsrs	r2, r1, #31
    6894:	d000      	beq.n	6898 <__aeabi_idiv+0x10c>
    6896:	4249      	negs	r1, r1
    6898:	1003      	asrs	r3, r0, #32
    689a:	d300      	bcc.n	689e <__aeabi_idiv+0x112>
    689c:	4240      	negs	r0, r0
    689e:	4053      	eors	r3, r2
    68a0:	2200      	movs	r2, #0
    68a2:	469c      	mov	ip, r3
    68a4:	0903      	lsrs	r3, r0, #4
    68a6:	428b      	cmp	r3, r1
    68a8:	d32d      	bcc.n	6906 <__aeabi_idiv+0x17a>
    68aa:	0a03      	lsrs	r3, r0, #8
    68ac:	428b      	cmp	r3, r1
    68ae:	d312      	bcc.n	68d6 <__aeabi_idiv+0x14a>
    68b0:	22fc      	movs	r2, #252	; 0xfc
    68b2:	0189      	lsls	r1, r1, #6
    68b4:	ba12      	rev	r2, r2
    68b6:	0a03      	lsrs	r3, r0, #8
    68b8:	428b      	cmp	r3, r1
    68ba:	d30c      	bcc.n	68d6 <__aeabi_idiv+0x14a>
    68bc:	0189      	lsls	r1, r1, #6
    68be:	1192      	asrs	r2, r2, #6
    68c0:	428b      	cmp	r3, r1
    68c2:	d308      	bcc.n	68d6 <__aeabi_idiv+0x14a>
    68c4:	0189      	lsls	r1, r1, #6
    68c6:	1192      	asrs	r2, r2, #6
    68c8:	428b      	cmp	r3, r1
    68ca:	d304      	bcc.n	68d6 <__aeabi_idiv+0x14a>
    68cc:	0189      	lsls	r1, r1, #6
    68ce:	d03a      	beq.n	6946 <__aeabi_idiv+0x1ba>
    68d0:	1192      	asrs	r2, r2, #6
    68d2:	e000      	b.n	68d6 <__aeabi_idiv+0x14a>
    68d4:	0989      	lsrs	r1, r1, #6
    68d6:	09c3      	lsrs	r3, r0, #7
    68d8:	428b      	cmp	r3, r1
    68da:	d301      	bcc.n	68e0 <__aeabi_idiv+0x154>
    68dc:	01cb      	lsls	r3, r1, #7
    68de:	1ac0      	subs	r0, r0, r3
    68e0:	4152      	adcs	r2, r2
    68e2:	0983      	lsrs	r3, r0, #6
    68e4:	428b      	cmp	r3, r1
    68e6:	d301      	bcc.n	68ec <__aeabi_idiv+0x160>
    68e8:	018b      	lsls	r3, r1, #6
    68ea:	1ac0      	subs	r0, r0, r3
    68ec:	4152      	adcs	r2, r2
    68ee:	0943      	lsrs	r3, r0, #5
    68f0:	428b      	cmp	r3, r1
    68f2:	d301      	bcc.n	68f8 <__aeabi_idiv+0x16c>
    68f4:	014b      	lsls	r3, r1, #5
    68f6:	1ac0      	subs	r0, r0, r3
    68f8:	4152      	adcs	r2, r2
    68fa:	0903      	lsrs	r3, r0, #4
    68fc:	428b      	cmp	r3, r1
    68fe:	d301      	bcc.n	6904 <__aeabi_idiv+0x178>
    6900:	010b      	lsls	r3, r1, #4
    6902:	1ac0      	subs	r0, r0, r3
    6904:	4152      	adcs	r2, r2
    6906:	08c3      	lsrs	r3, r0, #3
    6908:	428b      	cmp	r3, r1
    690a:	d301      	bcc.n	6910 <__aeabi_idiv+0x184>
    690c:	00cb      	lsls	r3, r1, #3
    690e:	1ac0      	subs	r0, r0, r3
    6910:	4152      	adcs	r2, r2
    6912:	0883      	lsrs	r3, r0, #2
    6914:	428b      	cmp	r3, r1
    6916:	d301      	bcc.n	691c <__aeabi_idiv+0x190>
    6918:	008b      	lsls	r3, r1, #2
    691a:	1ac0      	subs	r0, r0, r3
    691c:	4152      	adcs	r2, r2
    691e:	d2d9      	bcs.n	68d4 <__aeabi_idiv+0x148>
    6920:	0843      	lsrs	r3, r0, #1
    6922:	428b      	cmp	r3, r1
    6924:	d301      	bcc.n	692a <__aeabi_idiv+0x19e>
    6926:	004b      	lsls	r3, r1, #1
    6928:	1ac0      	subs	r0, r0, r3
    692a:	4152      	adcs	r2, r2
    692c:	1a41      	subs	r1, r0, r1
    692e:	d200      	bcs.n	6932 <__aeabi_idiv+0x1a6>
    6930:	4601      	mov	r1, r0
    6932:	4663      	mov	r3, ip
    6934:	4152      	adcs	r2, r2
    6936:	105b      	asrs	r3, r3, #1
    6938:	4610      	mov	r0, r2
    693a:	d301      	bcc.n	6940 <__aeabi_idiv+0x1b4>
    693c:	4240      	negs	r0, r0
    693e:	2b00      	cmp	r3, #0
    6940:	d500      	bpl.n	6944 <__aeabi_idiv+0x1b8>
    6942:	4249      	negs	r1, r1
    6944:	4770      	bx	lr
    6946:	4663      	mov	r3, ip
    6948:	105b      	asrs	r3, r3, #1
    694a:	d300      	bcc.n	694e <__aeabi_idiv+0x1c2>
    694c:	4240      	negs	r0, r0
    694e:	b501      	push	{r0, lr}
    6950:	2000      	movs	r0, #0
    6952:	f000 f80b 	bl	696c <__aeabi_idiv0>
    6956:	bd02      	pop	{r1, pc}

00006958 <__aeabi_idivmod>:
    6958:	2900      	cmp	r1, #0
    695a:	d0f8      	beq.n	694e <__aeabi_idiv+0x1c2>
    695c:	b503      	push	{r0, r1, lr}
    695e:	f7ff ff15 	bl	678c <__aeabi_idiv>
    6962:	bc0e      	pop	{r1, r2, r3}
    6964:	4342      	muls	r2, r0
    6966:	1a89      	subs	r1, r1, r2
    6968:	4718      	bx	r3
    696a:	46c0      	nop			; (mov r8, r8)

0000696c <__aeabi_idiv0>:
    696c:	4770      	bx	lr
    696e:	46c0      	nop			; (mov r8, r8)

00006970 <__aeabi_cdrcmple>:
    6970:	4684      	mov	ip, r0
    6972:	1c10      	adds	r0, r2, #0
    6974:	4662      	mov	r2, ip
    6976:	468c      	mov	ip, r1
    6978:	1c19      	adds	r1, r3, #0
    697a:	4663      	mov	r3, ip
    697c:	e000      	b.n	6980 <__aeabi_cdcmpeq>
    697e:	46c0      	nop			; (mov r8, r8)

00006980 <__aeabi_cdcmpeq>:
    6980:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    6982:	f001 fe83 	bl	868c <__ledf2>
    6986:	2800      	cmp	r0, #0
    6988:	d401      	bmi.n	698e <__aeabi_cdcmpeq+0xe>
    698a:	2100      	movs	r1, #0
    698c:	42c8      	cmn	r0, r1
    698e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00006990 <__aeabi_dcmpeq>:
    6990:	b510      	push	{r4, lr}
    6992:	f001 fdc7 	bl	8524 <__eqdf2>
    6996:	4240      	negs	r0, r0
    6998:	3001      	adds	r0, #1
    699a:	bd10      	pop	{r4, pc}

0000699c <__aeabi_dcmplt>:
    699c:	b510      	push	{r4, lr}
    699e:	f001 fe75 	bl	868c <__ledf2>
    69a2:	2800      	cmp	r0, #0
    69a4:	db01      	blt.n	69aa <__aeabi_dcmplt+0xe>
    69a6:	2000      	movs	r0, #0
    69a8:	bd10      	pop	{r4, pc}
    69aa:	2001      	movs	r0, #1
    69ac:	bd10      	pop	{r4, pc}
    69ae:	46c0      	nop			; (mov r8, r8)

000069b0 <__aeabi_dcmple>:
    69b0:	b510      	push	{r4, lr}
    69b2:	f001 fe6b 	bl	868c <__ledf2>
    69b6:	2800      	cmp	r0, #0
    69b8:	dd01      	ble.n	69be <__aeabi_dcmple+0xe>
    69ba:	2000      	movs	r0, #0
    69bc:	bd10      	pop	{r4, pc}
    69be:	2001      	movs	r0, #1
    69c0:	bd10      	pop	{r4, pc}
    69c2:	46c0      	nop			; (mov r8, r8)

000069c4 <__aeabi_dcmpgt>:
    69c4:	b510      	push	{r4, lr}
    69c6:	f001 fdf1 	bl	85ac <__gedf2>
    69ca:	2800      	cmp	r0, #0
    69cc:	dc01      	bgt.n	69d2 <__aeabi_dcmpgt+0xe>
    69ce:	2000      	movs	r0, #0
    69d0:	bd10      	pop	{r4, pc}
    69d2:	2001      	movs	r0, #1
    69d4:	bd10      	pop	{r4, pc}
    69d6:	46c0      	nop			; (mov r8, r8)

000069d8 <__aeabi_dcmpge>:
    69d8:	b510      	push	{r4, lr}
    69da:	f001 fde7 	bl	85ac <__gedf2>
    69de:	2800      	cmp	r0, #0
    69e0:	da01      	bge.n	69e6 <__aeabi_dcmpge+0xe>
    69e2:	2000      	movs	r0, #0
    69e4:	bd10      	pop	{r4, pc}
    69e6:	2001      	movs	r0, #1
    69e8:	bd10      	pop	{r4, pc}
    69ea:	46c0      	nop			; (mov r8, r8)

000069ec <__aeabi_cfrcmple>:
    69ec:	4684      	mov	ip, r0
    69ee:	1c08      	adds	r0, r1, #0
    69f0:	4661      	mov	r1, ip
    69f2:	e7ff      	b.n	69f4 <__aeabi_cfcmpeq>

000069f4 <__aeabi_cfcmpeq>:
    69f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    69f6:	f000 fba3 	bl	7140 <__lesf2>
    69fa:	2800      	cmp	r0, #0
    69fc:	d401      	bmi.n	6a02 <__aeabi_cfcmpeq+0xe>
    69fe:	2100      	movs	r1, #0
    6a00:	42c8      	cmn	r0, r1
    6a02:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00006a04 <__aeabi_fcmpeq>:
    6a04:	b510      	push	{r4, lr}
    6a06:	f000 fb27 	bl	7058 <__eqsf2>
    6a0a:	4240      	negs	r0, r0
    6a0c:	3001      	adds	r0, #1
    6a0e:	bd10      	pop	{r4, pc}

00006a10 <__aeabi_fcmplt>:
    6a10:	b510      	push	{r4, lr}
    6a12:	f000 fb95 	bl	7140 <__lesf2>
    6a16:	2800      	cmp	r0, #0
    6a18:	db01      	blt.n	6a1e <__aeabi_fcmplt+0xe>
    6a1a:	2000      	movs	r0, #0
    6a1c:	bd10      	pop	{r4, pc}
    6a1e:	2001      	movs	r0, #1
    6a20:	bd10      	pop	{r4, pc}
    6a22:	46c0      	nop			; (mov r8, r8)

00006a24 <__aeabi_fcmple>:
    6a24:	b510      	push	{r4, lr}
    6a26:	f000 fb8b 	bl	7140 <__lesf2>
    6a2a:	2800      	cmp	r0, #0
    6a2c:	dd01      	ble.n	6a32 <__aeabi_fcmple+0xe>
    6a2e:	2000      	movs	r0, #0
    6a30:	bd10      	pop	{r4, pc}
    6a32:	2001      	movs	r0, #1
    6a34:	bd10      	pop	{r4, pc}
    6a36:	46c0      	nop			; (mov r8, r8)

00006a38 <__aeabi_fcmpgt>:
    6a38:	b510      	push	{r4, lr}
    6a3a:	f000 fb37 	bl	70ac <__gesf2>
    6a3e:	2800      	cmp	r0, #0
    6a40:	dc01      	bgt.n	6a46 <__aeabi_fcmpgt+0xe>
    6a42:	2000      	movs	r0, #0
    6a44:	bd10      	pop	{r4, pc}
    6a46:	2001      	movs	r0, #1
    6a48:	bd10      	pop	{r4, pc}
    6a4a:	46c0      	nop			; (mov r8, r8)

00006a4c <__aeabi_fcmpge>:
    6a4c:	b510      	push	{r4, lr}
    6a4e:	f000 fb2d 	bl	70ac <__gesf2>
    6a52:	2800      	cmp	r0, #0
    6a54:	da01      	bge.n	6a5a <__aeabi_fcmpge+0xe>
    6a56:	2000      	movs	r0, #0
    6a58:	bd10      	pop	{r4, pc}
    6a5a:	2001      	movs	r0, #1
    6a5c:	bd10      	pop	{r4, pc}
    6a5e:	46c0      	nop			; (mov r8, r8)

00006a60 <__aeabi_lmul>:
    6a60:	b5f0      	push	{r4, r5, r6, r7, lr}
    6a62:	464f      	mov	r7, r9
    6a64:	4646      	mov	r6, r8
    6a66:	0405      	lsls	r5, r0, #16
    6a68:	0c2d      	lsrs	r5, r5, #16
    6a6a:	1c2c      	adds	r4, r5, #0
    6a6c:	b4c0      	push	{r6, r7}
    6a6e:	0417      	lsls	r7, r2, #16
    6a70:	0c16      	lsrs	r6, r2, #16
    6a72:	0c3f      	lsrs	r7, r7, #16
    6a74:	4699      	mov	r9, r3
    6a76:	0c03      	lsrs	r3, r0, #16
    6a78:	437c      	muls	r4, r7
    6a7a:	4375      	muls	r5, r6
    6a7c:	435f      	muls	r7, r3
    6a7e:	4373      	muls	r3, r6
    6a80:	197d      	adds	r5, r7, r5
    6a82:	0c26      	lsrs	r6, r4, #16
    6a84:	19ad      	adds	r5, r5, r6
    6a86:	469c      	mov	ip, r3
    6a88:	42af      	cmp	r7, r5
    6a8a:	d903      	bls.n	6a94 <__aeabi_lmul+0x34>
    6a8c:	2380      	movs	r3, #128	; 0x80
    6a8e:	025b      	lsls	r3, r3, #9
    6a90:	4698      	mov	r8, r3
    6a92:	44c4      	add	ip, r8
    6a94:	464b      	mov	r3, r9
    6a96:	4351      	muls	r1, r2
    6a98:	4343      	muls	r3, r0
    6a9a:	0424      	lsls	r4, r4, #16
    6a9c:	0c2e      	lsrs	r6, r5, #16
    6a9e:	0c24      	lsrs	r4, r4, #16
    6aa0:	042d      	lsls	r5, r5, #16
    6aa2:	4466      	add	r6, ip
    6aa4:	192c      	adds	r4, r5, r4
    6aa6:	1859      	adds	r1, r3, r1
    6aa8:	1989      	adds	r1, r1, r6
    6aaa:	1c20      	adds	r0, r4, #0
    6aac:	bc0c      	pop	{r2, r3}
    6aae:	4690      	mov	r8, r2
    6ab0:	4699      	mov	r9, r3
    6ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006ab4 <__aeabi_d2uiz>:
    6ab4:	b538      	push	{r3, r4, r5, lr}
    6ab6:	2200      	movs	r2, #0
    6ab8:	4b0c      	ldr	r3, [pc, #48]	; (6aec <__aeabi_d2uiz+0x38>)
    6aba:	1c04      	adds	r4, r0, #0
    6abc:	1c0d      	adds	r5, r1, #0
    6abe:	f7ff ff8b 	bl	69d8 <__aeabi_dcmpge>
    6ac2:	2800      	cmp	r0, #0
    6ac4:	d104      	bne.n	6ad0 <__aeabi_d2uiz+0x1c>
    6ac6:	1c20      	adds	r0, r4, #0
    6ac8:	1c29      	adds	r1, r5, #0
    6aca:	f002 fc59 	bl	9380 <__aeabi_d2iz>
    6ace:	bd38      	pop	{r3, r4, r5, pc}
    6ad0:	4b06      	ldr	r3, [pc, #24]	; (6aec <__aeabi_d2uiz+0x38>)
    6ad2:	2200      	movs	r2, #0
    6ad4:	1c20      	adds	r0, r4, #0
    6ad6:	1c29      	adds	r1, r5, #0
    6ad8:	f002 f8d8 	bl	8c8c <__aeabi_dsub>
    6adc:	f002 fc50 	bl	9380 <__aeabi_d2iz>
    6ae0:	2380      	movs	r3, #128	; 0x80
    6ae2:	061b      	lsls	r3, r3, #24
    6ae4:	469c      	mov	ip, r3
    6ae6:	4460      	add	r0, ip
    6ae8:	e7f1      	b.n	6ace <__aeabi_d2uiz+0x1a>
    6aea:	46c0      	nop			; (mov r8, r8)
    6aec:	41e00000 	.word	0x41e00000

00006af0 <__aeabi_fadd>:
    6af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6af2:	004a      	lsls	r2, r1, #1
    6af4:	0243      	lsls	r3, r0, #9
    6af6:	0044      	lsls	r4, r0, #1
    6af8:	024e      	lsls	r6, r1, #9
    6afa:	0fc5      	lsrs	r5, r0, #31
    6afc:	0e24      	lsrs	r4, r4, #24
    6afe:	1c28      	adds	r0, r5, #0
    6b00:	099b      	lsrs	r3, r3, #6
    6b02:	0e12      	lsrs	r2, r2, #24
    6b04:	0fc9      	lsrs	r1, r1, #31
    6b06:	09b7      	lsrs	r7, r6, #6
    6b08:	428d      	cmp	r5, r1
    6b0a:	d040      	beq.n	6b8e <__aeabi_fadd+0x9e>
    6b0c:	1aa0      	subs	r0, r4, r2
    6b0e:	2800      	cmp	r0, #0
    6b10:	dc00      	bgt.n	6b14 <__aeabi_fadd+0x24>
    6b12:	e084      	b.n	6c1e <__aeabi_fadd+0x12e>
    6b14:	2a00      	cmp	r2, #0
    6b16:	d11c      	bne.n	6b52 <__aeabi_fadd+0x62>
    6b18:	2f00      	cmp	r7, #0
    6b1a:	d15c      	bne.n	6bd6 <__aeabi_fadd+0xe6>
    6b1c:	075a      	lsls	r2, r3, #29
    6b1e:	d004      	beq.n	6b2a <__aeabi_fadd+0x3a>
    6b20:	220f      	movs	r2, #15
    6b22:	401a      	ands	r2, r3
    6b24:	2a04      	cmp	r2, #4
    6b26:	d000      	beq.n	6b2a <__aeabi_fadd+0x3a>
    6b28:	3304      	adds	r3, #4
    6b2a:	2280      	movs	r2, #128	; 0x80
    6b2c:	04d2      	lsls	r2, r2, #19
    6b2e:	401a      	ands	r2, r3
    6b30:	1c28      	adds	r0, r5, #0
    6b32:	2a00      	cmp	r2, #0
    6b34:	d024      	beq.n	6b80 <__aeabi_fadd+0x90>
    6b36:	3401      	adds	r4, #1
    6b38:	2cff      	cmp	r4, #255	; 0xff
    6b3a:	d100      	bne.n	6b3e <__aeabi_fadd+0x4e>
    6b3c:	e07b      	b.n	6c36 <__aeabi_fadd+0x146>
    6b3e:	019b      	lsls	r3, r3, #6
    6b40:	0a5b      	lsrs	r3, r3, #9
    6b42:	b2e4      	uxtb	r4, r4
    6b44:	025b      	lsls	r3, r3, #9
    6b46:	05e4      	lsls	r4, r4, #23
    6b48:	0a5b      	lsrs	r3, r3, #9
    6b4a:	4323      	orrs	r3, r4
    6b4c:	07c0      	lsls	r0, r0, #31
    6b4e:	4318      	orrs	r0, r3
    6b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6b52:	2cff      	cmp	r4, #255	; 0xff
    6b54:	d0e2      	beq.n	6b1c <__aeabi_fadd+0x2c>
    6b56:	2280      	movs	r2, #128	; 0x80
    6b58:	04d2      	lsls	r2, r2, #19
    6b5a:	4317      	orrs	r7, r2
    6b5c:	2601      	movs	r6, #1
    6b5e:	281b      	cmp	r0, #27
    6b60:	dc08      	bgt.n	6b74 <__aeabi_fadd+0x84>
    6b62:	1c39      	adds	r1, r7, #0
    6b64:	2220      	movs	r2, #32
    6b66:	1c3e      	adds	r6, r7, #0
    6b68:	40c1      	lsrs	r1, r0
    6b6a:	1a10      	subs	r0, r2, r0
    6b6c:	4086      	lsls	r6, r0
    6b6e:	1e77      	subs	r7, r6, #1
    6b70:	41be      	sbcs	r6, r7
    6b72:	430e      	orrs	r6, r1
    6b74:	1b9b      	subs	r3, r3, r6
    6b76:	015a      	lsls	r2, r3, #5
    6b78:	d433      	bmi.n	6be2 <__aeabi_fadd+0xf2>
    6b7a:	1c28      	adds	r0, r5, #0
    6b7c:	075a      	lsls	r2, r3, #29
    6b7e:	d1cf      	bne.n	6b20 <__aeabi_fadd+0x30>
    6b80:	08db      	lsrs	r3, r3, #3
    6b82:	2cff      	cmp	r4, #255	; 0xff
    6b84:	d01e      	beq.n	6bc4 <__aeabi_fadd+0xd4>
    6b86:	025b      	lsls	r3, r3, #9
    6b88:	0a5b      	lsrs	r3, r3, #9
    6b8a:	b2e4      	uxtb	r4, r4
    6b8c:	e7da      	b.n	6b44 <__aeabi_fadd+0x54>
    6b8e:	1aa1      	subs	r1, r4, r2
    6b90:	2900      	cmp	r1, #0
    6b92:	dd57      	ble.n	6c44 <__aeabi_fadd+0x154>
    6b94:	2a00      	cmp	r2, #0
    6b96:	d03a      	beq.n	6c0e <__aeabi_fadd+0x11e>
    6b98:	2cff      	cmp	r4, #255	; 0xff
    6b9a:	d0bf      	beq.n	6b1c <__aeabi_fadd+0x2c>
    6b9c:	2280      	movs	r2, #128	; 0x80
    6b9e:	04d2      	lsls	r2, r2, #19
    6ba0:	4317      	orrs	r7, r2
    6ba2:	2601      	movs	r6, #1
    6ba4:	291b      	cmp	r1, #27
    6ba6:	dd72      	ble.n	6c8e <__aeabi_fadd+0x19e>
    6ba8:	199b      	adds	r3, r3, r6
    6baa:	015a      	lsls	r2, r3, #5
    6bac:	d5e5      	bpl.n	6b7a <__aeabi_fadd+0x8a>
    6bae:	3401      	adds	r4, #1
    6bb0:	2cff      	cmp	r4, #255	; 0xff
    6bb2:	d100      	bne.n	6bb6 <__aeabi_fadd+0xc6>
    6bb4:	e087      	b.n	6cc6 <__aeabi_fadd+0x1d6>
    6bb6:	2101      	movs	r1, #1
    6bb8:	4a8a      	ldr	r2, [pc, #552]	; (6de4 <__aeabi_fadd+0x2f4>)
    6bba:	4019      	ands	r1, r3
    6bbc:	4013      	ands	r3, r2
    6bbe:	085b      	lsrs	r3, r3, #1
    6bc0:	430b      	orrs	r3, r1
    6bc2:	e7ab      	b.n	6b1c <__aeabi_fadd+0x2c>
    6bc4:	2b00      	cmp	r3, #0
    6bc6:	d036      	beq.n	6c36 <__aeabi_fadd+0x146>
    6bc8:	2280      	movs	r2, #128	; 0x80
    6bca:	03d2      	lsls	r2, r2, #15
    6bcc:	4313      	orrs	r3, r2
    6bce:	025b      	lsls	r3, r3, #9
    6bd0:	0a5b      	lsrs	r3, r3, #9
    6bd2:	24ff      	movs	r4, #255	; 0xff
    6bd4:	e7b6      	b.n	6b44 <__aeabi_fadd+0x54>
    6bd6:	3801      	subs	r0, #1
    6bd8:	2800      	cmp	r0, #0
    6bda:	d13f      	bne.n	6c5c <__aeabi_fadd+0x16c>
    6bdc:	1bdb      	subs	r3, r3, r7
    6bde:	015a      	lsls	r2, r3, #5
    6be0:	d5cb      	bpl.n	6b7a <__aeabi_fadd+0x8a>
    6be2:	019b      	lsls	r3, r3, #6
    6be4:	099e      	lsrs	r6, r3, #6
    6be6:	1c30      	adds	r0, r6, #0
    6be8:	f002 fd52 	bl	9690 <__clzsi2>
    6bec:	3805      	subs	r0, #5
    6bee:	4086      	lsls	r6, r0
    6bf0:	4284      	cmp	r4, r0
    6bf2:	dc23      	bgt.n	6c3c <__aeabi_fadd+0x14c>
    6bf4:	1b00      	subs	r0, r0, r4
    6bf6:	241f      	movs	r4, #31
    6bf8:	1c32      	adds	r2, r6, #0
    6bfa:	1c43      	adds	r3, r0, #1
    6bfc:	1a20      	subs	r0, r4, r0
    6bfe:	40da      	lsrs	r2, r3
    6c00:	4086      	lsls	r6, r0
    6c02:	1c13      	adds	r3, r2, #0
    6c04:	1e74      	subs	r4, r6, #1
    6c06:	41a6      	sbcs	r6, r4
    6c08:	2400      	movs	r4, #0
    6c0a:	4333      	orrs	r3, r6
    6c0c:	e786      	b.n	6b1c <__aeabi_fadd+0x2c>
    6c0e:	2f00      	cmp	r7, #0
    6c10:	d100      	bne.n	6c14 <__aeabi_fadd+0x124>
    6c12:	e783      	b.n	6b1c <__aeabi_fadd+0x2c>
    6c14:	3901      	subs	r1, #1
    6c16:	2900      	cmp	r1, #0
    6c18:	d150      	bne.n	6cbc <__aeabi_fadd+0x1cc>
    6c1a:	19db      	adds	r3, r3, r7
    6c1c:	e7c5      	b.n	6baa <__aeabi_fadd+0xba>
    6c1e:	2800      	cmp	r0, #0
    6c20:	d120      	bne.n	6c64 <__aeabi_fadd+0x174>
    6c22:	1c62      	adds	r2, r4, #1
    6c24:	b2d2      	uxtb	r2, r2
    6c26:	2a01      	cmp	r2, #1
    6c28:	dd5e      	ble.n	6ce8 <__aeabi_fadd+0x1f8>
    6c2a:	1bde      	subs	r6, r3, r7
    6c2c:	0172      	lsls	r2, r6, #5
    6c2e:	d528      	bpl.n	6c82 <__aeabi_fadd+0x192>
    6c30:	1afe      	subs	r6, r7, r3
    6c32:	1c0d      	adds	r5, r1, #0
    6c34:	e7d7      	b.n	6be6 <__aeabi_fadd+0xf6>
    6c36:	24ff      	movs	r4, #255	; 0xff
    6c38:	2300      	movs	r3, #0
    6c3a:	e783      	b.n	6b44 <__aeabi_fadd+0x54>
    6c3c:	4b69      	ldr	r3, [pc, #420]	; (6de4 <__aeabi_fadd+0x2f4>)
    6c3e:	1a24      	subs	r4, r4, r0
    6c40:	4033      	ands	r3, r6
    6c42:	e76b      	b.n	6b1c <__aeabi_fadd+0x2c>
    6c44:	2900      	cmp	r1, #0
    6c46:	d158      	bne.n	6cfa <__aeabi_fadd+0x20a>
    6c48:	1c62      	adds	r2, r4, #1
    6c4a:	b2d1      	uxtb	r1, r2
    6c4c:	2901      	cmp	r1, #1
    6c4e:	dd3c      	ble.n	6cca <__aeabi_fadd+0x1da>
    6c50:	2aff      	cmp	r2, #255	; 0xff
    6c52:	d037      	beq.n	6cc4 <__aeabi_fadd+0x1d4>
    6c54:	18fb      	adds	r3, r7, r3
    6c56:	085b      	lsrs	r3, r3, #1
    6c58:	1c14      	adds	r4, r2, #0
    6c5a:	e75f      	b.n	6b1c <__aeabi_fadd+0x2c>
    6c5c:	2cff      	cmp	r4, #255	; 0xff
    6c5e:	d000      	beq.n	6c62 <__aeabi_fadd+0x172>
    6c60:	e77c      	b.n	6b5c <__aeabi_fadd+0x6c>
    6c62:	e75b      	b.n	6b1c <__aeabi_fadd+0x2c>
    6c64:	2c00      	cmp	r4, #0
    6c66:	d01e      	beq.n	6ca6 <__aeabi_fadd+0x1b6>
    6c68:	2aff      	cmp	r2, #255	; 0xff
    6c6a:	d023      	beq.n	6cb4 <__aeabi_fadd+0x1c4>
    6c6c:	2480      	movs	r4, #128	; 0x80
    6c6e:	04e4      	lsls	r4, r4, #19
    6c70:	4240      	negs	r0, r0
    6c72:	4323      	orrs	r3, r4
    6c74:	281b      	cmp	r0, #27
    6c76:	dd5b      	ble.n	6d30 <__aeabi_fadd+0x240>
    6c78:	2301      	movs	r3, #1
    6c7a:	1afb      	subs	r3, r7, r3
    6c7c:	1c14      	adds	r4, r2, #0
    6c7e:	1c0d      	adds	r5, r1, #0
    6c80:	e7ad      	b.n	6bde <__aeabi_fadd+0xee>
    6c82:	2e00      	cmp	r6, #0
    6c84:	d1af      	bne.n	6be6 <__aeabi_fadd+0xf6>
    6c86:	2300      	movs	r3, #0
    6c88:	2000      	movs	r0, #0
    6c8a:	2400      	movs	r4, #0
    6c8c:	e778      	b.n	6b80 <__aeabi_fadd+0x90>
    6c8e:	1c3a      	adds	r2, r7, #0
    6c90:	40ca      	lsrs	r2, r1
    6c92:	4694      	mov	ip, r2
    6c94:	2220      	movs	r2, #32
    6c96:	1c3e      	adds	r6, r7, #0
    6c98:	1a51      	subs	r1, r2, r1
    6c9a:	408e      	lsls	r6, r1
    6c9c:	4662      	mov	r2, ip
    6c9e:	1e77      	subs	r7, r6, #1
    6ca0:	41be      	sbcs	r6, r7
    6ca2:	4316      	orrs	r6, r2
    6ca4:	e780      	b.n	6ba8 <__aeabi_fadd+0xb8>
    6ca6:	2b00      	cmp	r3, #0
    6ca8:	d03e      	beq.n	6d28 <__aeabi_fadd+0x238>
    6caa:	43c0      	mvns	r0, r0
    6cac:	2800      	cmp	r0, #0
    6cae:	d0e4      	beq.n	6c7a <__aeabi_fadd+0x18a>
    6cb0:	2aff      	cmp	r2, #255	; 0xff
    6cb2:	d1df      	bne.n	6c74 <__aeabi_fadd+0x184>
    6cb4:	1c3b      	adds	r3, r7, #0
    6cb6:	24ff      	movs	r4, #255	; 0xff
    6cb8:	1c0d      	adds	r5, r1, #0
    6cba:	e72f      	b.n	6b1c <__aeabi_fadd+0x2c>
    6cbc:	2cff      	cmp	r4, #255	; 0xff
    6cbe:	d000      	beq.n	6cc2 <__aeabi_fadd+0x1d2>
    6cc0:	e76f      	b.n	6ba2 <__aeabi_fadd+0xb2>
    6cc2:	e72b      	b.n	6b1c <__aeabi_fadd+0x2c>
    6cc4:	24ff      	movs	r4, #255	; 0xff
    6cc6:	2300      	movs	r3, #0
    6cc8:	e75a      	b.n	6b80 <__aeabi_fadd+0x90>
    6cca:	2c00      	cmp	r4, #0
    6ccc:	d15a      	bne.n	6d84 <__aeabi_fadd+0x294>
    6cce:	2b00      	cmp	r3, #0
    6cd0:	d07f      	beq.n	6dd2 <__aeabi_fadd+0x2e2>
    6cd2:	2f00      	cmp	r7, #0
    6cd4:	d100      	bne.n	6cd8 <__aeabi_fadd+0x1e8>
    6cd6:	e721      	b.n	6b1c <__aeabi_fadd+0x2c>
    6cd8:	19db      	adds	r3, r3, r7
    6cda:	015a      	lsls	r2, r3, #5
    6cdc:	d400      	bmi.n	6ce0 <__aeabi_fadd+0x1f0>
    6cde:	e74c      	b.n	6b7a <__aeabi_fadd+0x8a>
    6ce0:	4a40      	ldr	r2, [pc, #256]	; (6de4 <__aeabi_fadd+0x2f4>)
    6ce2:	3401      	adds	r4, #1
    6ce4:	4013      	ands	r3, r2
    6ce6:	e719      	b.n	6b1c <__aeabi_fadd+0x2c>
    6ce8:	2c00      	cmp	r4, #0
    6cea:	d115      	bne.n	6d18 <__aeabi_fadd+0x228>
    6cec:	2b00      	cmp	r3, #0
    6cee:	d12f      	bne.n	6d50 <__aeabi_fadd+0x260>
    6cf0:	2f00      	cmp	r7, #0
    6cf2:	d05d      	beq.n	6db0 <__aeabi_fadd+0x2c0>
    6cf4:	1c3b      	adds	r3, r7, #0
    6cf6:	1c0d      	adds	r5, r1, #0
    6cf8:	e710      	b.n	6b1c <__aeabi_fadd+0x2c>
    6cfa:	2c00      	cmp	r4, #0
    6cfc:	d121      	bne.n	6d42 <__aeabi_fadd+0x252>
    6cfe:	2b00      	cmp	r3, #0
    6d00:	d053      	beq.n	6daa <__aeabi_fadd+0x2ba>
    6d02:	43c9      	mvns	r1, r1
    6d04:	2900      	cmp	r1, #0
    6d06:	d004      	beq.n	6d12 <__aeabi_fadd+0x222>
    6d08:	2aff      	cmp	r2, #255	; 0xff
    6d0a:	d04b      	beq.n	6da4 <__aeabi_fadd+0x2b4>
    6d0c:	291b      	cmp	r1, #27
    6d0e:	dd57      	ble.n	6dc0 <__aeabi_fadd+0x2d0>
    6d10:	2301      	movs	r3, #1
    6d12:	19db      	adds	r3, r3, r7
    6d14:	1c14      	adds	r4, r2, #0
    6d16:	e748      	b.n	6baa <__aeabi_fadd+0xba>
    6d18:	2b00      	cmp	r3, #0
    6d1a:	d122      	bne.n	6d62 <__aeabi_fadd+0x272>
    6d1c:	2f00      	cmp	r7, #0
    6d1e:	d04a      	beq.n	6db6 <__aeabi_fadd+0x2c6>
    6d20:	1c3b      	adds	r3, r7, #0
    6d22:	1c0d      	adds	r5, r1, #0
    6d24:	24ff      	movs	r4, #255	; 0xff
    6d26:	e6f9      	b.n	6b1c <__aeabi_fadd+0x2c>
    6d28:	1c3b      	adds	r3, r7, #0
    6d2a:	1c14      	adds	r4, r2, #0
    6d2c:	1c0d      	adds	r5, r1, #0
    6d2e:	e6f5      	b.n	6b1c <__aeabi_fadd+0x2c>
    6d30:	1c1d      	adds	r5, r3, #0
    6d32:	2420      	movs	r4, #32
    6d34:	40c5      	lsrs	r5, r0
    6d36:	1a20      	subs	r0, r4, r0
    6d38:	4083      	lsls	r3, r0
    6d3a:	1e58      	subs	r0, r3, #1
    6d3c:	4183      	sbcs	r3, r0
    6d3e:	432b      	orrs	r3, r5
    6d40:	e79b      	b.n	6c7a <__aeabi_fadd+0x18a>
    6d42:	2aff      	cmp	r2, #255	; 0xff
    6d44:	d02e      	beq.n	6da4 <__aeabi_fadd+0x2b4>
    6d46:	2480      	movs	r4, #128	; 0x80
    6d48:	04e4      	lsls	r4, r4, #19
    6d4a:	4249      	negs	r1, r1
    6d4c:	4323      	orrs	r3, r4
    6d4e:	e7dd      	b.n	6d0c <__aeabi_fadd+0x21c>
    6d50:	2f00      	cmp	r7, #0
    6d52:	d100      	bne.n	6d56 <__aeabi_fadd+0x266>
    6d54:	e6e2      	b.n	6b1c <__aeabi_fadd+0x2c>
    6d56:	1bda      	subs	r2, r3, r7
    6d58:	0150      	lsls	r0, r2, #5
    6d5a:	d53c      	bpl.n	6dd6 <__aeabi_fadd+0x2e6>
    6d5c:	1afb      	subs	r3, r7, r3
    6d5e:	1c0d      	adds	r5, r1, #0
    6d60:	e6dc      	b.n	6b1c <__aeabi_fadd+0x2c>
    6d62:	24ff      	movs	r4, #255	; 0xff
    6d64:	2f00      	cmp	r7, #0
    6d66:	d100      	bne.n	6d6a <__aeabi_fadd+0x27a>
    6d68:	e6d8      	b.n	6b1c <__aeabi_fadd+0x2c>
    6d6a:	2280      	movs	r2, #128	; 0x80
    6d6c:	08db      	lsrs	r3, r3, #3
    6d6e:	03d2      	lsls	r2, r2, #15
    6d70:	4213      	tst	r3, r2
    6d72:	d004      	beq.n	6d7e <__aeabi_fadd+0x28e>
    6d74:	08fe      	lsrs	r6, r7, #3
    6d76:	4216      	tst	r6, r2
    6d78:	d101      	bne.n	6d7e <__aeabi_fadd+0x28e>
    6d7a:	1c33      	adds	r3, r6, #0
    6d7c:	1c0d      	adds	r5, r1, #0
    6d7e:	00db      	lsls	r3, r3, #3
    6d80:	24ff      	movs	r4, #255	; 0xff
    6d82:	e6cb      	b.n	6b1c <__aeabi_fadd+0x2c>
    6d84:	2b00      	cmp	r3, #0
    6d86:	d00d      	beq.n	6da4 <__aeabi_fadd+0x2b4>
    6d88:	24ff      	movs	r4, #255	; 0xff
    6d8a:	2f00      	cmp	r7, #0
    6d8c:	d100      	bne.n	6d90 <__aeabi_fadd+0x2a0>
    6d8e:	e6c5      	b.n	6b1c <__aeabi_fadd+0x2c>
    6d90:	2280      	movs	r2, #128	; 0x80
    6d92:	08db      	lsrs	r3, r3, #3
    6d94:	03d2      	lsls	r2, r2, #15
    6d96:	4213      	tst	r3, r2
    6d98:	d0f1      	beq.n	6d7e <__aeabi_fadd+0x28e>
    6d9a:	08fe      	lsrs	r6, r7, #3
    6d9c:	4216      	tst	r6, r2
    6d9e:	d1ee      	bne.n	6d7e <__aeabi_fadd+0x28e>
    6da0:	1c33      	adds	r3, r6, #0
    6da2:	e7ec      	b.n	6d7e <__aeabi_fadd+0x28e>
    6da4:	1c3b      	adds	r3, r7, #0
    6da6:	24ff      	movs	r4, #255	; 0xff
    6da8:	e6b8      	b.n	6b1c <__aeabi_fadd+0x2c>
    6daa:	1c3b      	adds	r3, r7, #0
    6dac:	1c14      	adds	r4, r2, #0
    6dae:	e6b5      	b.n	6b1c <__aeabi_fadd+0x2c>
    6db0:	1c23      	adds	r3, r4, #0
    6db2:	2000      	movs	r0, #0
    6db4:	e6e4      	b.n	6b80 <__aeabi_fadd+0x90>
    6db6:	2380      	movs	r3, #128	; 0x80
    6db8:	2000      	movs	r0, #0
    6dba:	049b      	lsls	r3, r3, #18
    6dbc:	24ff      	movs	r4, #255	; 0xff
    6dbe:	e6df      	b.n	6b80 <__aeabi_fadd+0x90>
    6dc0:	1c1e      	adds	r6, r3, #0
    6dc2:	2420      	movs	r4, #32
    6dc4:	40ce      	lsrs	r6, r1
    6dc6:	1a61      	subs	r1, r4, r1
    6dc8:	408b      	lsls	r3, r1
    6dca:	1e59      	subs	r1, r3, #1
    6dcc:	418b      	sbcs	r3, r1
    6dce:	4333      	orrs	r3, r6
    6dd0:	e79f      	b.n	6d12 <__aeabi_fadd+0x222>
    6dd2:	1c3b      	adds	r3, r7, #0
    6dd4:	e6a2      	b.n	6b1c <__aeabi_fadd+0x2c>
    6dd6:	1e13      	subs	r3, r2, #0
    6dd8:	d000      	beq.n	6ddc <__aeabi_fadd+0x2ec>
    6dda:	e6ce      	b.n	6b7a <__aeabi_fadd+0x8a>
    6ddc:	2300      	movs	r3, #0
    6dde:	2000      	movs	r0, #0
    6de0:	e6ce      	b.n	6b80 <__aeabi_fadd+0x90>
    6de2:	46c0      	nop			; (mov r8, r8)
    6de4:	fbffffff 	.word	0xfbffffff

00006de8 <__aeabi_fdiv>:
    6de8:	b5f0      	push	{r4, r5, r6, r7, lr}
    6dea:	4656      	mov	r6, sl
    6dec:	464d      	mov	r5, r9
    6dee:	465f      	mov	r7, fp
    6df0:	4644      	mov	r4, r8
    6df2:	b4f0      	push	{r4, r5, r6, r7}
    6df4:	0243      	lsls	r3, r0, #9
    6df6:	0045      	lsls	r5, r0, #1
    6df8:	0fc7      	lsrs	r7, r0, #31
    6dfa:	b083      	sub	sp, #12
    6dfc:	468a      	mov	sl, r1
    6dfe:	0a5c      	lsrs	r4, r3, #9
    6e00:	0e2e      	lsrs	r6, r5, #24
    6e02:	46b9      	mov	r9, r7
    6e04:	d041      	beq.n	6e8a <__aeabi_fdiv+0xa2>
    6e06:	2eff      	cmp	r6, #255	; 0xff
    6e08:	d026      	beq.n	6e58 <__aeabi_fdiv+0x70>
    6e0a:	2380      	movs	r3, #128	; 0x80
    6e0c:	041b      	lsls	r3, r3, #16
    6e0e:	4323      	orrs	r3, r4
    6e10:	00dc      	lsls	r4, r3, #3
    6e12:	2300      	movs	r3, #0
    6e14:	4698      	mov	r8, r3
    6e16:	469b      	mov	fp, r3
    6e18:	3e7f      	subs	r6, #127	; 0x7f
    6e1a:	4653      	mov	r3, sl
    6e1c:	025b      	lsls	r3, r3, #9
    6e1e:	0a5d      	lsrs	r5, r3, #9
    6e20:	4653      	mov	r3, sl
    6e22:	005a      	lsls	r2, r3, #1
    6e24:	0fdb      	lsrs	r3, r3, #31
    6e26:	0e12      	lsrs	r2, r2, #24
    6e28:	469a      	mov	sl, r3
    6e2a:	d039      	beq.n	6ea0 <__aeabi_fdiv+0xb8>
    6e2c:	2aff      	cmp	r2, #255	; 0xff
    6e2e:	d033      	beq.n	6e98 <__aeabi_fdiv+0xb0>
    6e30:	2380      	movs	r3, #128	; 0x80
    6e32:	041b      	lsls	r3, r3, #16
    6e34:	432b      	orrs	r3, r5
    6e36:	00dd      	lsls	r5, r3, #3
    6e38:	2300      	movs	r3, #0
    6e3a:	3a7f      	subs	r2, #127	; 0x7f
    6e3c:	4651      	mov	r1, sl
    6e3e:	1ab2      	subs	r2, r6, r2
    6e40:	4646      	mov	r6, r8
    6e42:	4079      	eors	r1, r7
    6e44:	1c08      	adds	r0, r1, #0
    6e46:	9201      	str	r2, [sp, #4]
    6e48:	431e      	orrs	r6, r3
    6e4a:	2e0f      	cmp	r6, #15
    6e4c:	d900      	bls.n	6e50 <__aeabi_fdiv+0x68>
    6e4e:	e076      	b.n	6f3e <__aeabi_fdiv+0x156>
    6e50:	4a7e      	ldr	r2, [pc, #504]	; (704c <__aeabi_fdiv+0x264>)
    6e52:	00b6      	lsls	r6, r6, #2
    6e54:	5996      	ldr	r6, [r2, r6]
    6e56:	46b7      	mov	pc, r6
    6e58:	2c00      	cmp	r4, #0
    6e5a:	d130      	bne.n	6ebe <__aeabi_fdiv+0xd6>
    6e5c:	2308      	movs	r3, #8
    6e5e:	4698      	mov	r8, r3
    6e60:	3b06      	subs	r3, #6
    6e62:	469b      	mov	fp, r3
    6e64:	e7d9      	b.n	6e1a <__aeabi_fdiv+0x32>
    6e66:	2380      	movs	r3, #128	; 0x80
    6e68:	2100      	movs	r1, #0
    6e6a:	03db      	lsls	r3, r3, #15
    6e6c:	24ff      	movs	r4, #255	; 0xff
    6e6e:	025b      	lsls	r3, r3, #9
    6e70:	05e4      	lsls	r4, r4, #23
    6e72:	0a5b      	lsrs	r3, r3, #9
    6e74:	07c9      	lsls	r1, r1, #31
    6e76:	4323      	orrs	r3, r4
    6e78:	430b      	orrs	r3, r1
    6e7a:	1c18      	adds	r0, r3, #0
    6e7c:	b003      	add	sp, #12
    6e7e:	bc3c      	pop	{r2, r3, r4, r5}
    6e80:	4690      	mov	r8, r2
    6e82:	4699      	mov	r9, r3
    6e84:	46a2      	mov	sl, r4
    6e86:	46ab      	mov	fp, r5
    6e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6e8a:	2c00      	cmp	r4, #0
    6e8c:	d128      	bne.n	6ee0 <__aeabi_fdiv+0xf8>
    6e8e:	2304      	movs	r3, #4
    6e90:	4698      	mov	r8, r3
    6e92:	3b03      	subs	r3, #3
    6e94:	469b      	mov	fp, r3
    6e96:	e7c0      	b.n	6e1a <__aeabi_fdiv+0x32>
    6e98:	2d00      	cmp	r5, #0
    6e9a:	d11f      	bne.n	6edc <__aeabi_fdiv+0xf4>
    6e9c:	2302      	movs	r3, #2
    6e9e:	e002      	b.n	6ea6 <__aeabi_fdiv+0xbe>
    6ea0:	2d00      	cmp	r5, #0
    6ea2:	d111      	bne.n	6ec8 <__aeabi_fdiv+0xe0>
    6ea4:	2301      	movs	r3, #1
    6ea6:	1ab2      	subs	r2, r6, r2
    6ea8:	4650      	mov	r0, sl
    6eaa:	4646      	mov	r6, r8
    6eac:	4078      	eors	r0, r7
    6eae:	9201      	str	r2, [sp, #4]
    6eb0:	431e      	orrs	r6, r3
    6eb2:	2e0f      	cmp	r6, #15
    6eb4:	d827      	bhi.n	6f06 <__aeabi_fdiv+0x11e>
    6eb6:	4966      	ldr	r1, [pc, #408]	; (7050 <__aeabi_fdiv+0x268>)
    6eb8:	00b6      	lsls	r6, r6, #2
    6eba:	5989      	ldr	r1, [r1, r6]
    6ebc:	468f      	mov	pc, r1
    6ebe:	230c      	movs	r3, #12
    6ec0:	4698      	mov	r8, r3
    6ec2:	3b09      	subs	r3, #9
    6ec4:	469b      	mov	fp, r3
    6ec6:	e7a8      	b.n	6e1a <__aeabi_fdiv+0x32>
    6ec8:	1c28      	adds	r0, r5, #0
    6eca:	f002 fbe1 	bl	9690 <__clzsi2>
    6ece:	2276      	movs	r2, #118	; 0x76
    6ed0:	1f43      	subs	r3, r0, #5
    6ed2:	4252      	negs	r2, r2
    6ed4:	409d      	lsls	r5, r3
    6ed6:	1a12      	subs	r2, r2, r0
    6ed8:	2300      	movs	r3, #0
    6eda:	e7af      	b.n	6e3c <__aeabi_fdiv+0x54>
    6edc:	2303      	movs	r3, #3
    6ede:	e7ad      	b.n	6e3c <__aeabi_fdiv+0x54>
    6ee0:	1c20      	adds	r0, r4, #0
    6ee2:	f002 fbd5 	bl	9690 <__clzsi2>
    6ee6:	1f43      	subs	r3, r0, #5
    6ee8:	409c      	lsls	r4, r3
    6eea:	2376      	movs	r3, #118	; 0x76
    6eec:	425b      	negs	r3, r3
    6eee:	1a1e      	subs	r6, r3, r0
    6ef0:	2300      	movs	r3, #0
    6ef2:	4698      	mov	r8, r3
    6ef4:	469b      	mov	fp, r3
    6ef6:	e790      	b.n	6e1a <__aeabi_fdiv+0x32>
    6ef8:	2500      	movs	r5, #0
    6efa:	46d1      	mov	r9, sl
    6efc:	469b      	mov	fp, r3
    6efe:	465b      	mov	r3, fp
    6f00:	4648      	mov	r0, r9
    6f02:	2b02      	cmp	r3, #2
    6f04:	d16f      	bne.n	6fe6 <__aeabi_fdiv+0x1fe>
    6f06:	2101      	movs	r1, #1
    6f08:	24ff      	movs	r4, #255	; 0xff
    6f0a:	4001      	ands	r1, r0
    6f0c:	2300      	movs	r3, #0
    6f0e:	e7ae      	b.n	6e6e <__aeabi_fdiv+0x86>
    6f10:	237e      	movs	r3, #126	; 0x7e
    6f12:	9a01      	ldr	r2, [sp, #4]
    6f14:	425b      	negs	r3, r3
    6f16:	1a9b      	subs	r3, r3, r2
    6f18:	2b1b      	cmp	r3, #27
    6f1a:	dd6d      	ble.n	6ff8 <__aeabi_fdiv+0x210>
    6f1c:	2101      	movs	r1, #1
    6f1e:	464b      	mov	r3, r9
    6f20:	4019      	ands	r1, r3
    6f22:	2400      	movs	r4, #0
    6f24:	2300      	movs	r3, #0
    6f26:	e7a2      	b.n	6e6e <__aeabi_fdiv+0x86>
    6f28:	2380      	movs	r3, #128	; 0x80
    6f2a:	03db      	lsls	r3, r3, #15
    6f2c:	421c      	tst	r4, r3
    6f2e:	d149      	bne.n	6fc4 <__aeabi_fdiv+0x1dc>
    6f30:	2380      	movs	r3, #128	; 0x80
    6f32:	03db      	lsls	r3, r3, #15
    6f34:	4323      	orrs	r3, r4
    6f36:	025b      	lsls	r3, r3, #9
    6f38:	0a5b      	lsrs	r3, r3, #9
    6f3a:	1c39      	adds	r1, r7, #0
    6f3c:	e796      	b.n	6e6c <__aeabi_fdiv+0x84>
    6f3e:	0163      	lsls	r3, r4, #5
    6f40:	016d      	lsls	r5, r5, #5
    6f42:	42ab      	cmp	r3, r5
    6f44:	d337      	bcc.n	6fb6 <__aeabi_fdiv+0x1ce>
    6f46:	4689      	mov	r9, r1
    6f48:	201a      	movs	r0, #26
    6f4a:	2101      	movs	r1, #1
    6f4c:	1b5b      	subs	r3, r3, r5
    6f4e:	2401      	movs	r4, #1
    6f50:	1c1e      	adds	r6, r3, #0
    6f52:	0049      	lsls	r1, r1, #1
    6f54:	005b      	lsls	r3, r3, #1
    6f56:	2e00      	cmp	r6, #0
    6f58:	db01      	blt.n	6f5e <__aeabi_fdiv+0x176>
    6f5a:	42ab      	cmp	r3, r5
    6f5c:	d301      	bcc.n	6f62 <__aeabi_fdiv+0x17a>
    6f5e:	1b5b      	subs	r3, r3, r5
    6f60:	4321      	orrs	r1, r4
    6f62:	3801      	subs	r0, #1
    6f64:	2800      	cmp	r0, #0
    6f66:	d1f3      	bne.n	6f50 <__aeabi_fdiv+0x168>
    6f68:	1e58      	subs	r0, r3, #1
    6f6a:	4183      	sbcs	r3, r0
    6f6c:	430b      	orrs	r3, r1
    6f6e:	1c1d      	adds	r5, r3, #0
    6f70:	9c01      	ldr	r4, [sp, #4]
    6f72:	347f      	adds	r4, #127	; 0x7f
    6f74:	2c00      	cmp	r4, #0
    6f76:	ddcb      	ble.n	6f10 <__aeabi_fdiv+0x128>
    6f78:	076b      	lsls	r3, r5, #29
    6f7a:	d004      	beq.n	6f86 <__aeabi_fdiv+0x19e>
    6f7c:	230f      	movs	r3, #15
    6f7e:	402b      	ands	r3, r5
    6f80:	2b04      	cmp	r3, #4
    6f82:	d000      	beq.n	6f86 <__aeabi_fdiv+0x19e>
    6f84:	3504      	adds	r5, #4
    6f86:	012b      	lsls	r3, r5, #4
    6f88:	d504      	bpl.n	6f94 <__aeabi_fdiv+0x1ac>
    6f8a:	9a01      	ldr	r2, [sp, #4]
    6f8c:	4b31      	ldr	r3, [pc, #196]	; (7054 <__aeabi_fdiv+0x26c>)
    6f8e:	3280      	adds	r2, #128	; 0x80
    6f90:	1c14      	adds	r4, r2, #0
    6f92:	401d      	ands	r5, r3
    6f94:	2cfe      	cmp	r4, #254	; 0xfe
    6f96:	dd07      	ble.n	6fa8 <__aeabi_fdiv+0x1c0>
    6f98:	464b      	mov	r3, r9
    6f9a:	2101      	movs	r1, #1
    6f9c:	24ff      	movs	r4, #255	; 0xff
    6f9e:	4019      	ands	r1, r3
    6fa0:	2300      	movs	r3, #0
    6fa2:	e764      	b.n	6e6e <__aeabi_fdiv+0x86>
    6fa4:	1c25      	adds	r5, r4, #0
    6fa6:	e7aa      	b.n	6efe <__aeabi_fdiv+0x116>
    6fa8:	2101      	movs	r1, #1
    6faa:	464a      	mov	r2, r9
    6fac:	01ab      	lsls	r3, r5, #6
    6fae:	0a5b      	lsrs	r3, r3, #9
    6fb0:	b2e4      	uxtb	r4, r4
    6fb2:	4011      	ands	r1, r2
    6fb4:	e75b      	b.n	6e6e <__aeabi_fdiv+0x86>
    6fb6:	9a01      	ldr	r2, [sp, #4]
    6fb8:	4689      	mov	r9, r1
    6fba:	3a01      	subs	r2, #1
    6fbc:	9201      	str	r2, [sp, #4]
    6fbe:	201b      	movs	r0, #27
    6fc0:	2100      	movs	r1, #0
    6fc2:	e7c4      	b.n	6f4e <__aeabi_fdiv+0x166>
    6fc4:	421d      	tst	r5, r3
    6fc6:	d007      	beq.n	6fd8 <__aeabi_fdiv+0x1f0>
    6fc8:	4323      	orrs	r3, r4
    6fca:	025b      	lsls	r3, r3, #9
    6fcc:	0a5b      	lsrs	r3, r3, #9
    6fce:	1c39      	adds	r1, r7, #0
    6fd0:	e74c      	b.n	6e6c <__aeabi_fdiv+0x84>
    6fd2:	2500      	movs	r5, #0
    6fd4:	0263      	lsls	r3, r4, #9
    6fd6:	d5ab      	bpl.n	6f30 <__aeabi_fdiv+0x148>
    6fd8:	2380      	movs	r3, #128	; 0x80
    6fda:	03db      	lsls	r3, r3, #15
    6fdc:	432b      	orrs	r3, r5
    6fde:	025b      	lsls	r3, r3, #9
    6fe0:	0a5b      	lsrs	r3, r3, #9
    6fe2:	4651      	mov	r1, sl
    6fe4:	e742      	b.n	6e6c <__aeabi_fdiv+0x84>
    6fe6:	2b03      	cmp	r3, #3
    6fe8:	d025      	beq.n	7036 <__aeabi_fdiv+0x24e>
    6fea:	2b01      	cmp	r3, #1
    6fec:	d1c0      	bne.n	6f70 <__aeabi_fdiv+0x188>
    6fee:	2101      	movs	r1, #1
    6ff0:	2400      	movs	r4, #0
    6ff2:	4001      	ands	r1, r0
    6ff4:	2300      	movs	r3, #0
    6ff6:	e73a      	b.n	6e6e <__aeabi_fdiv+0x86>
    6ff8:	1c29      	adds	r1, r5, #0
    6ffa:	40d9      	lsrs	r1, r3
    6ffc:	1c2b      	adds	r3, r5, #0
    6ffe:	9a01      	ldr	r2, [sp, #4]
    7000:	329e      	adds	r2, #158	; 0x9e
    7002:	4093      	lsls	r3, r2
    7004:	1e5d      	subs	r5, r3, #1
    7006:	41ab      	sbcs	r3, r5
    7008:	430b      	orrs	r3, r1
    700a:	075a      	lsls	r2, r3, #29
    700c:	d004      	beq.n	7018 <__aeabi_fdiv+0x230>
    700e:	220f      	movs	r2, #15
    7010:	401a      	ands	r2, r3
    7012:	2a04      	cmp	r2, #4
    7014:	d000      	beq.n	7018 <__aeabi_fdiv+0x230>
    7016:	3304      	adds	r3, #4
    7018:	015a      	lsls	r2, r3, #5
    701a:	d505      	bpl.n	7028 <__aeabi_fdiv+0x240>
    701c:	464b      	mov	r3, r9
    701e:	2101      	movs	r1, #1
    7020:	2401      	movs	r4, #1
    7022:	4019      	ands	r1, r3
    7024:	2300      	movs	r3, #0
    7026:	e722      	b.n	6e6e <__aeabi_fdiv+0x86>
    7028:	2101      	movs	r1, #1
    702a:	464a      	mov	r2, r9
    702c:	019b      	lsls	r3, r3, #6
    702e:	0a5b      	lsrs	r3, r3, #9
    7030:	4011      	ands	r1, r2
    7032:	2400      	movs	r4, #0
    7034:	e71b      	b.n	6e6e <__aeabi_fdiv+0x86>
    7036:	2380      	movs	r3, #128	; 0x80
    7038:	2101      	movs	r1, #1
    703a:	464a      	mov	r2, r9
    703c:	03db      	lsls	r3, r3, #15
    703e:	432b      	orrs	r3, r5
    7040:	025b      	lsls	r3, r3, #9
    7042:	400a      	ands	r2, r1
    7044:	0a5b      	lsrs	r3, r3, #9
    7046:	1c11      	adds	r1, r2, #0
    7048:	e710      	b.n	6e6c <__aeabi_fdiv+0x84>
    704a:	46c0      	nop			; (mov r8, r8)
    704c:	0000f8a8 	.word	0x0000f8a8
    7050:	0000f8e8 	.word	0x0000f8e8
    7054:	f7ffffff 	.word	0xf7ffffff

00007058 <__eqsf2>:
    7058:	0243      	lsls	r3, r0, #9
    705a:	b570      	push	{r4, r5, r6, lr}
    705c:	0042      	lsls	r2, r0, #1
    705e:	004c      	lsls	r4, r1, #1
    7060:	0a5d      	lsrs	r5, r3, #9
    7062:	0fc3      	lsrs	r3, r0, #31
    7064:	0248      	lsls	r0, r1, #9
    7066:	0e12      	lsrs	r2, r2, #24
    7068:	0a46      	lsrs	r6, r0, #9
    706a:	0e24      	lsrs	r4, r4, #24
    706c:	0fc9      	lsrs	r1, r1, #31
    706e:	2aff      	cmp	r2, #255	; 0xff
    7070:	d005      	beq.n	707e <__eqsf2+0x26>
    7072:	2cff      	cmp	r4, #255	; 0xff
    7074:	d008      	beq.n	7088 <__eqsf2+0x30>
    7076:	2001      	movs	r0, #1
    7078:	42a2      	cmp	r2, r4
    707a:	d00b      	beq.n	7094 <__eqsf2+0x3c>
    707c:	bd70      	pop	{r4, r5, r6, pc}
    707e:	2001      	movs	r0, #1
    7080:	2d00      	cmp	r5, #0
    7082:	d1fb      	bne.n	707c <__eqsf2+0x24>
    7084:	2cff      	cmp	r4, #255	; 0xff
    7086:	d1f6      	bne.n	7076 <__eqsf2+0x1e>
    7088:	2001      	movs	r0, #1
    708a:	2e00      	cmp	r6, #0
    708c:	d1f6      	bne.n	707c <__eqsf2+0x24>
    708e:	2001      	movs	r0, #1
    7090:	42a2      	cmp	r2, r4
    7092:	d1f3      	bne.n	707c <__eqsf2+0x24>
    7094:	42b5      	cmp	r5, r6
    7096:	d1f1      	bne.n	707c <__eqsf2+0x24>
    7098:	428b      	cmp	r3, r1
    709a:	d005      	beq.n	70a8 <__eqsf2+0x50>
    709c:	2a00      	cmp	r2, #0
    709e:	d1ed      	bne.n	707c <__eqsf2+0x24>
    70a0:	1c28      	adds	r0, r5, #0
    70a2:	1e43      	subs	r3, r0, #1
    70a4:	4198      	sbcs	r0, r3
    70a6:	e7e9      	b.n	707c <__eqsf2+0x24>
    70a8:	2000      	movs	r0, #0
    70aa:	e7e7      	b.n	707c <__eqsf2+0x24>

000070ac <__gesf2>:
    70ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    70ae:	0243      	lsls	r3, r0, #9
    70b0:	024d      	lsls	r5, r1, #9
    70b2:	004a      	lsls	r2, r1, #1
    70b4:	0044      	lsls	r4, r0, #1
    70b6:	0a5e      	lsrs	r6, r3, #9
    70b8:	0e24      	lsrs	r4, r4, #24
    70ba:	0fc3      	lsrs	r3, r0, #31
    70bc:	0a6d      	lsrs	r5, r5, #9
    70be:	0e12      	lsrs	r2, r2, #24
    70c0:	0fc9      	lsrs	r1, r1, #31
    70c2:	2cff      	cmp	r4, #255	; 0xff
    70c4:	d00d      	beq.n	70e2 <__gesf2+0x36>
    70c6:	2aff      	cmp	r2, #255	; 0xff
    70c8:	d031      	beq.n	712e <__gesf2+0x82>
    70ca:	2c00      	cmp	r4, #0
    70cc:	d10d      	bne.n	70ea <__gesf2+0x3e>
    70ce:	4277      	negs	r7, r6
    70d0:	4177      	adcs	r7, r6
    70d2:	2a00      	cmp	r2, #0
    70d4:	d123      	bne.n	711e <__gesf2+0x72>
    70d6:	2d00      	cmp	r5, #0
    70d8:	d121      	bne.n	711e <__gesf2+0x72>
    70da:	2000      	movs	r0, #0
    70dc:	2f00      	cmp	r7, #0
    70de:	d10b      	bne.n	70f8 <__gesf2+0x4c>
    70e0:	e007      	b.n	70f2 <__gesf2+0x46>
    70e2:	2e00      	cmp	r6, #0
    70e4:	d128      	bne.n	7138 <__gesf2+0x8c>
    70e6:	2aff      	cmp	r2, #255	; 0xff
    70e8:	d021      	beq.n	712e <__gesf2+0x82>
    70ea:	2a00      	cmp	r2, #0
    70ec:	d005      	beq.n	70fa <__gesf2+0x4e>
    70ee:	428b      	cmp	r3, r1
    70f0:	d007      	beq.n	7102 <__gesf2+0x56>
    70f2:	4258      	negs	r0, r3
    70f4:	2301      	movs	r3, #1
    70f6:	4318      	orrs	r0, r3
    70f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    70fa:	2d00      	cmp	r5, #0
    70fc:	d0f9      	beq.n	70f2 <__gesf2+0x46>
    70fe:	428b      	cmp	r3, r1
    7100:	d1f7      	bne.n	70f2 <__gesf2+0x46>
    7102:	4294      	cmp	r4, r2
    7104:	dcf5      	bgt.n	70f2 <__gesf2+0x46>
    7106:	db04      	blt.n	7112 <__gesf2+0x66>
    7108:	42ae      	cmp	r6, r5
    710a:	d8f2      	bhi.n	70f2 <__gesf2+0x46>
    710c:	2000      	movs	r0, #0
    710e:	42ae      	cmp	r6, r5
    7110:	d2f2      	bcs.n	70f8 <__gesf2+0x4c>
    7112:	4258      	negs	r0, r3
    7114:	4143      	adcs	r3, r0
    7116:	2001      	movs	r0, #1
    7118:	425b      	negs	r3, r3
    711a:	4318      	orrs	r0, r3
    711c:	e7ec      	b.n	70f8 <__gesf2+0x4c>
    711e:	2f00      	cmp	r7, #0
    7120:	d0e5      	beq.n	70ee <__gesf2+0x42>
    7122:	4248      	negs	r0, r1
    7124:	4141      	adcs	r1, r0
    7126:	2001      	movs	r0, #1
    7128:	4249      	negs	r1, r1
    712a:	4308      	orrs	r0, r1
    712c:	e7e4      	b.n	70f8 <__gesf2+0x4c>
    712e:	2d00      	cmp	r5, #0
    7130:	d102      	bne.n	7138 <__gesf2+0x8c>
    7132:	2c00      	cmp	r4, #0
    7134:	d0cb      	beq.n	70ce <__gesf2+0x22>
    7136:	e7da      	b.n	70ee <__gesf2+0x42>
    7138:	2002      	movs	r0, #2
    713a:	4240      	negs	r0, r0
    713c:	e7dc      	b.n	70f8 <__gesf2+0x4c>
    713e:	46c0      	nop			; (mov r8, r8)

00007140 <__lesf2>:
    7140:	0243      	lsls	r3, r0, #9
    7142:	b5f0      	push	{r4, r5, r6, r7, lr}
    7144:	0042      	lsls	r2, r0, #1
    7146:	004c      	lsls	r4, r1, #1
    7148:	0a5e      	lsrs	r6, r3, #9
    714a:	0fc3      	lsrs	r3, r0, #31
    714c:	0248      	lsls	r0, r1, #9
    714e:	0e12      	lsrs	r2, r2, #24
    7150:	0a45      	lsrs	r5, r0, #9
    7152:	0e24      	lsrs	r4, r4, #24
    7154:	0fc9      	lsrs	r1, r1, #31
    7156:	2aff      	cmp	r2, #255	; 0xff
    7158:	d00f      	beq.n	717a <__lesf2+0x3a>
    715a:	2cff      	cmp	r4, #255	; 0xff
    715c:	d01a      	beq.n	7194 <__lesf2+0x54>
    715e:	2a00      	cmp	r2, #0
    7160:	d110      	bne.n	7184 <__lesf2+0x44>
    7162:	4277      	negs	r7, r6
    7164:	4177      	adcs	r7, r6
    7166:	2c00      	cmp	r4, #0
    7168:	d029      	beq.n	71be <__lesf2+0x7e>
    716a:	2f00      	cmp	r7, #0
    716c:	d017      	beq.n	719e <__lesf2+0x5e>
    716e:	4248      	negs	r0, r1
    7170:	4141      	adcs	r1, r0
    7172:	2001      	movs	r0, #1
    7174:	4249      	negs	r1, r1
    7176:	4308      	orrs	r0, r1
    7178:	e00b      	b.n	7192 <__lesf2+0x52>
    717a:	2002      	movs	r0, #2
    717c:	2e00      	cmp	r6, #0
    717e:	d108      	bne.n	7192 <__lesf2+0x52>
    7180:	2cff      	cmp	r4, #255	; 0xff
    7182:	d007      	beq.n	7194 <__lesf2+0x54>
    7184:	2c00      	cmp	r4, #0
    7186:	d10a      	bne.n	719e <__lesf2+0x5e>
    7188:	2d00      	cmp	r5, #0
    718a:	d108      	bne.n	719e <__lesf2+0x5e>
    718c:	4258      	negs	r0, r3
    718e:	2301      	movs	r3, #1
    7190:	4318      	orrs	r0, r3
    7192:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7194:	2002      	movs	r0, #2
    7196:	2d00      	cmp	r5, #0
    7198:	d1fb      	bne.n	7192 <__lesf2+0x52>
    719a:	2a00      	cmp	r2, #0
    719c:	d0e1      	beq.n	7162 <__lesf2+0x22>
    719e:	428b      	cmp	r3, r1
    71a0:	d1f4      	bne.n	718c <__lesf2+0x4c>
    71a2:	42a2      	cmp	r2, r4
    71a4:	dcf2      	bgt.n	718c <__lesf2+0x4c>
    71a6:	db04      	blt.n	71b2 <__lesf2+0x72>
    71a8:	42ae      	cmp	r6, r5
    71aa:	d8ef      	bhi.n	718c <__lesf2+0x4c>
    71ac:	2000      	movs	r0, #0
    71ae:	42ae      	cmp	r6, r5
    71b0:	d2ef      	bcs.n	7192 <__lesf2+0x52>
    71b2:	4258      	negs	r0, r3
    71b4:	4143      	adcs	r3, r0
    71b6:	2001      	movs	r0, #1
    71b8:	425b      	negs	r3, r3
    71ba:	4318      	orrs	r0, r3
    71bc:	e7e9      	b.n	7192 <__lesf2+0x52>
    71be:	2d00      	cmp	r5, #0
    71c0:	d1d3      	bne.n	716a <__lesf2+0x2a>
    71c2:	2000      	movs	r0, #0
    71c4:	2f00      	cmp	r7, #0
    71c6:	d1e4      	bne.n	7192 <__lesf2+0x52>
    71c8:	e7e0      	b.n	718c <__lesf2+0x4c>
    71ca:	46c0      	nop			; (mov r8, r8)

000071cc <__aeabi_fmul>:
    71cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    71ce:	465f      	mov	r7, fp
    71d0:	4656      	mov	r6, sl
    71d2:	464d      	mov	r5, r9
    71d4:	4644      	mov	r4, r8
    71d6:	b4f0      	push	{r4, r5, r6, r7}
    71d8:	0245      	lsls	r5, r0, #9
    71da:	0046      	lsls	r6, r0, #1
    71dc:	0fc4      	lsrs	r4, r0, #31
    71de:	b083      	sub	sp, #12
    71e0:	1c0f      	adds	r7, r1, #0
    71e2:	0a6d      	lsrs	r5, r5, #9
    71e4:	0e36      	lsrs	r6, r6, #24
    71e6:	46a3      	mov	fp, r4
    71e8:	d045      	beq.n	7276 <__aeabi_fmul+0xaa>
    71ea:	2eff      	cmp	r6, #255	; 0xff
    71ec:	d025      	beq.n	723a <__aeabi_fmul+0x6e>
    71ee:	2380      	movs	r3, #128	; 0x80
    71f0:	041b      	lsls	r3, r3, #16
    71f2:	431d      	orrs	r5, r3
    71f4:	2300      	movs	r3, #0
    71f6:	469a      	mov	sl, r3
    71f8:	00ed      	lsls	r5, r5, #3
    71fa:	3e7f      	subs	r6, #127	; 0x7f
    71fc:	9301      	str	r3, [sp, #4]
    71fe:	027b      	lsls	r3, r7, #9
    7200:	0a5b      	lsrs	r3, r3, #9
    7202:	4698      	mov	r8, r3
    7204:	0078      	lsls	r0, r7, #1
    7206:	0ffb      	lsrs	r3, r7, #31
    7208:	0e00      	lsrs	r0, r0, #24
    720a:	4699      	mov	r9, r3
    720c:	d040      	beq.n	7290 <__aeabi_fmul+0xc4>
    720e:	28ff      	cmp	r0, #255	; 0xff
    7210:	d038      	beq.n	7284 <__aeabi_fmul+0xb8>
    7212:	2380      	movs	r3, #128	; 0x80
    7214:	4642      	mov	r2, r8
    7216:	041b      	lsls	r3, r3, #16
    7218:	4313      	orrs	r3, r2
    721a:	00db      	lsls	r3, r3, #3
    721c:	4698      	mov	r8, r3
    721e:	2300      	movs	r3, #0
    7220:	387f      	subs	r0, #127	; 0x7f
    7222:	464a      	mov	r2, r9
    7224:	9f01      	ldr	r7, [sp, #4]
    7226:	1830      	adds	r0, r6, r0
    7228:	4062      	eors	r2, r4
    722a:	1c41      	adds	r1, r0, #1
    722c:	431f      	orrs	r7, r3
    722e:	2f0f      	cmp	r7, #15
    7230:	d869      	bhi.n	7306 <__aeabi_fmul+0x13a>
    7232:	4e7d      	ldr	r6, [pc, #500]	; (7428 <__aeabi_fmul+0x25c>)
    7234:	00bf      	lsls	r7, r7, #2
    7236:	59f6      	ldr	r6, [r6, r7]
    7238:	46b7      	mov	pc, r6
    723a:	2d00      	cmp	r5, #0
    723c:	d145      	bne.n	72ca <__aeabi_fmul+0xfe>
    723e:	2308      	movs	r3, #8
    7240:	9301      	str	r3, [sp, #4]
    7242:	3b06      	subs	r3, #6
    7244:	469a      	mov	sl, r3
    7246:	e7da      	b.n	71fe <__aeabi_fmul+0x32>
    7248:	4693      	mov	fp, r2
    724a:	4653      	mov	r3, sl
    724c:	2b02      	cmp	r3, #2
    724e:	d12f      	bne.n	72b0 <__aeabi_fmul+0xe4>
    7250:	465b      	mov	r3, fp
    7252:	2401      	movs	r4, #1
    7254:	2500      	movs	r5, #0
    7256:	401c      	ands	r4, r3
    7258:	23ff      	movs	r3, #255	; 0xff
    725a:	026d      	lsls	r5, r5, #9
    725c:	05db      	lsls	r3, r3, #23
    725e:	0a6d      	lsrs	r5, r5, #9
    7260:	07e4      	lsls	r4, r4, #31
    7262:	431d      	orrs	r5, r3
    7264:	4325      	orrs	r5, r4
    7266:	1c28      	adds	r0, r5, #0
    7268:	b003      	add	sp, #12
    726a:	bc3c      	pop	{r2, r3, r4, r5}
    726c:	4690      	mov	r8, r2
    726e:	4699      	mov	r9, r3
    7270:	46a2      	mov	sl, r4
    7272:	46ab      	mov	fp, r5
    7274:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7276:	2d00      	cmp	r5, #0
    7278:	d12c      	bne.n	72d4 <__aeabi_fmul+0x108>
    727a:	2304      	movs	r3, #4
    727c:	9301      	str	r3, [sp, #4]
    727e:	3b03      	subs	r3, #3
    7280:	469a      	mov	sl, r3
    7282:	e7bc      	b.n	71fe <__aeabi_fmul+0x32>
    7284:	4643      	mov	r3, r8
    7286:	425a      	negs	r2, r3
    7288:	4153      	adcs	r3, r2
    728a:	2203      	movs	r2, #3
    728c:	1ad3      	subs	r3, r2, r3
    728e:	e7c8      	b.n	7222 <__aeabi_fmul+0x56>
    7290:	4642      	mov	r2, r8
    7292:	2301      	movs	r3, #1
    7294:	2a00      	cmp	r2, #0
    7296:	d0c4      	beq.n	7222 <__aeabi_fmul+0x56>
    7298:	4640      	mov	r0, r8
    729a:	f002 f9f9 	bl	9690 <__clzsi2>
    729e:	4642      	mov	r2, r8
    72a0:	1f43      	subs	r3, r0, #5
    72a2:	409a      	lsls	r2, r3
    72a4:	2376      	movs	r3, #118	; 0x76
    72a6:	425b      	negs	r3, r3
    72a8:	1a18      	subs	r0, r3, r0
    72aa:	4690      	mov	r8, r2
    72ac:	2300      	movs	r3, #0
    72ae:	e7b8      	b.n	7222 <__aeabi_fmul+0x56>
    72b0:	2b03      	cmp	r3, #3
    72b2:	d100      	bne.n	72b6 <__aeabi_fmul+0xea>
    72b4:	e0ad      	b.n	7412 <__aeabi_fmul+0x246>
    72b6:	2b01      	cmp	r3, #1
    72b8:	d000      	beq.n	72bc <__aeabi_fmul+0xf0>
    72ba:	e08c      	b.n	73d6 <__aeabi_fmul+0x20a>
    72bc:	465b      	mov	r3, fp
    72be:	4654      	mov	r4, sl
    72c0:	401c      	ands	r4, r3
    72c2:	b2e4      	uxtb	r4, r4
    72c4:	2300      	movs	r3, #0
    72c6:	2500      	movs	r5, #0
    72c8:	e7c7      	b.n	725a <__aeabi_fmul+0x8e>
    72ca:	230c      	movs	r3, #12
    72cc:	9301      	str	r3, [sp, #4]
    72ce:	3b09      	subs	r3, #9
    72d0:	469a      	mov	sl, r3
    72d2:	e794      	b.n	71fe <__aeabi_fmul+0x32>
    72d4:	1c28      	adds	r0, r5, #0
    72d6:	f002 f9db 	bl	9690 <__clzsi2>
    72da:	2676      	movs	r6, #118	; 0x76
    72dc:	1f43      	subs	r3, r0, #5
    72de:	409d      	lsls	r5, r3
    72e0:	2300      	movs	r3, #0
    72e2:	4276      	negs	r6, r6
    72e4:	1a36      	subs	r6, r6, r0
    72e6:	9301      	str	r3, [sp, #4]
    72e8:	469a      	mov	sl, r3
    72ea:	e788      	b.n	71fe <__aeabi_fmul+0x32>
    72ec:	2580      	movs	r5, #128	; 0x80
    72ee:	2400      	movs	r4, #0
    72f0:	03ed      	lsls	r5, r5, #15
    72f2:	23ff      	movs	r3, #255	; 0xff
    72f4:	e7b1      	b.n	725a <__aeabi_fmul+0x8e>
    72f6:	4645      	mov	r5, r8
    72f8:	46cb      	mov	fp, r9
    72fa:	469a      	mov	sl, r3
    72fc:	e7a5      	b.n	724a <__aeabi_fmul+0x7e>
    72fe:	4645      	mov	r5, r8
    7300:	4693      	mov	fp, r2
    7302:	469a      	mov	sl, r3
    7304:	e7a1      	b.n	724a <__aeabi_fmul+0x7e>
    7306:	4643      	mov	r3, r8
    7308:	042c      	lsls	r4, r5, #16
    730a:	0c1b      	lsrs	r3, r3, #16
    730c:	469c      	mov	ip, r3
    730e:	0c23      	lsrs	r3, r4, #16
    7310:	4644      	mov	r4, r8
    7312:	0426      	lsls	r6, r4, #16
    7314:	1c1c      	adds	r4, r3, #0
    7316:	0c36      	lsrs	r6, r6, #16
    7318:	0c2f      	lsrs	r7, r5, #16
    731a:	4374      	muls	r4, r6
    731c:	1c35      	adds	r5, r6, #0
    731e:	4666      	mov	r6, ip
    7320:	437d      	muls	r5, r7
    7322:	4373      	muls	r3, r6
    7324:	4377      	muls	r7, r6
    7326:	18eb      	adds	r3, r5, r3
    7328:	0c26      	lsrs	r6, r4, #16
    732a:	199e      	adds	r6, r3, r6
    732c:	42b5      	cmp	r5, r6
    732e:	d903      	bls.n	7338 <__aeabi_fmul+0x16c>
    7330:	2380      	movs	r3, #128	; 0x80
    7332:	025b      	lsls	r3, r3, #9
    7334:	469c      	mov	ip, r3
    7336:	4467      	add	r7, ip
    7338:	0424      	lsls	r4, r4, #16
    733a:	0433      	lsls	r3, r6, #16
    733c:	0c24      	lsrs	r4, r4, #16
    733e:	191b      	adds	r3, r3, r4
    7340:	019d      	lsls	r5, r3, #6
    7342:	1e6c      	subs	r4, r5, #1
    7344:	41a5      	sbcs	r5, r4
    7346:	0e9b      	lsrs	r3, r3, #26
    7348:	0c36      	lsrs	r6, r6, #16
    734a:	432b      	orrs	r3, r5
    734c:	19bd      	adds	r5, r7, r6
    734e:	01ad      	lsls	r5, r5, #6
    7350:	431d      	orrs	r5, r3
    7352:	012b      	lsls	r3, r5, #4
    7354:	d504      	bpl.n	7360 <__aeabi_fmul+0x194>
    7356:	2301      	movs	r3, #1
    7358:	0868      	lsrs	r0, r5, #1
    735a:	401d      	ands	r5, r3
    735c:	4305      	orrs	r5, r0
    735e:	1c08      	adds	r0, r1, #0
    7360:	1c03      	adds	r3, r0, #0
    7362:	337f      	adds	r3, #127	; 0x7f
    7364:	2b00      	cmp	r3, #0
    7366:	dd2c      	ble.n	73c2 <__aeabi_fmul+0x1f6>
    7368:	0769      	lsls	r1, r5, #29
    736a:	d004      	beq.n	7376 <__aeabi_fmul+0x1aa>
    736c:	210f      	movs	r1, #15
    736e:	4029      	ands	r1, r5
    7370:	2904      	cmp	r1, #4
    7372:	d000      	beq.n	7376 <__aeabi_fmul+0x1aa>
    7374:	3504      	adds	r5, #4
    7376:	0129      	lsls	r1, r5, #4
    7378:	d503      	bpl.n	7382 <__aeabi_fmul+0x1b6>
    737a:	4b2c      	ldr	r3, [pc, #176]	; (742c <__aeabi_fmul+0x260>)
    737c:	401d      	ands	r5, r3
    737e:	1c03      	adds	r3, r0, #0
    7380:	3380      	adds	r3, #128	; 0x80
    7382:	2bfe      	cmp	r3, #254	; 0xfe
    7384:	dd17      	ble.n	73b6 <__aeabi_fmul+0x1ea>
    7386:	2401      	movs	r4, #1
    7388:	23ff      	movs	r3, #255	; 0xff
    738a:	4014      	ands	r4, r2
    738c:	2500      	movs	r5, #0
    738e:	e764      	b.n	725a <__aeabi_fmul+0x8e>
    7390:	2080      	movs	r0, #128	; 0x80
    7392:	03c0      	lsls	r0, r0, #15
    7394:	4205      	tst	r5, r0
    7396:	d009      	beq.n	73ac <__aeabi_fmul+0x1e0>
    7398:	4643      	mov	r3, r8
    739a:	4203      	tst	r3, r0
    739c:	d106      	bne.n	73ac <__aeabi_fmul+0x1e0>
    739e:	4645      	mov	r5, r8
    73a0:	4305      	orrs	r5, r0
    73a2:	026d      	lsls	r5, r5, #9
    73a4:	0a6d      	lsrs	r5, r5, #9
    73a6:	464c      	mov	r4, r9
    73a8:	23ff      	movs	r3, #255	; 0xff
    73aa:	e756      	b.n	725a <__aeabi_fmul+0x8e>
    73ac:	4305      	orrs	r5, r0
    73ae:	026d      	lsls	r5, r5, #9
    73b0:	0a6d      	lsrs	r5, r5, #9
    73b2:	23ff      	movs	r3, #255	; 0xff
    73b4:	e751      	b.n	725a <__aeabi_fmul+0x8e>
    73b6:	2401      	movs	r4, #1
    73b8:	01ad      	lsls	r5, r5, #6
    73ba:	0a6d      	lsrs	r5, r5, #9
    73bc:	b2db      	uxtb	r3, r3
    73be:	4014      	ands	r4, r2
    73c0:	e74b      	b.n	725a <__aeabi_fmul+0x8e>
    73c2:	237e      	movs	r3, #126	; 0x7e
    73c4:	425b      	negs	r3, r3
    73c6:	1a1b      	subs	r3, r3, r0
    73c8:	2b1b      	cmp	r3, #27
    73ca:	dd07      	ble.n	73dc <__aeabi_fmul+0x210>
    73cc:	2401      	movs	r4, #1
    73ce:	2300      	movs	r3, #0
    73d0:	4014      	ands	r4, r2
    73d2:	2500      	movs	r5, #0
    73d4:	e741      	b.n	725a <__aeabi_fmul+0x8e>
    73d6:	1c08      	adds	r0, r1, #0
    73d8:	465a      	mov	r2, fp
    73da:	e7c1      	b.n	7360 <__aeabi_fmul+0x194>
    73dc:	309e      	adds	r0, #158	; 0x9e
    73de:	1c29      	adds	r1, r5, #0
    73e0:	4085      	lsls	r5, r0
    73e2:	40d9      	lsrs	r1, r3
    73e4:	1e68      	subs	r0, r5, #1
    73e6:	4185      	sbcs	r5, r0
    73e8:	430d      	orrs	r5, r1
    73ea:	076b      	lsls	r3, r5, #29
    73ec:	d004      	beq.n	73f8 <__aeabi_fmul+0x22c>
    73ee:	230f      	movs	r3, #15
    73f0:	402b      	ands	r3, r5
    73f2:	2b04      	cmp	r3, #4
    73f4:	d000      	beq.n	73f8 <__aeabi_fmul+0x22c>
    73f6:	3504      	adds	r5, #4
    73f8:	016b      	lsls	r3, r5, #5
    73fa:	d504      	bpl.n	7406 <__aeabi_fmul+0x23a>
    73fc:	2401      	movs	r4, #1
    73fe:	2301      	movs	r3, #1
    7400:	4014      	ands	r4, r2
    7402:	2500      	movs	r5, #0
    7404:	e729      	b.n	725a <__aeabi_fmul+0x8e>
    7406:	2401      	movs	r4, #1
    7408:	01ad      	lsls	r5, r5, #6
    740a:	0a6d      	lsrs	r5, r5, #9
    740c:	4014      	ands	r4, r2
    740e:	2300      	movs	r3, #0
    7410:	e723      	b.n	725a <__aeabi_fmul+0x8e>
    7412:	2380      	movs	r3, #128	; 0x80
    7414:	03db      	lsls	r3, r3, #15
    7416:	431d      	orrs	r5, r3
    7418:	2401      	movs	r4, #1
    741a:	465b      	mov	r3, fp
    741c:	026d      	lsls	r5, r5, #9
    741e:	4023      	ands	r3, r4
    7420:	1c1c      	adds	r4, r3, #0
    7422:	0a6d      	lsrs	r5, r5, #9
    7424:	23ff      	movs	r3, #255	; 0xff
    7426:	e718      	b.n	725a <__aeabi_fmul+0x8e>
    7428:	0000f928 	.word	0x0000f928
    742c:	f7ffffff 	.word	0xf7ffffff

00007430 <__aeabi_fsub>:
    7430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7432:	004a      	lsls	r2, r1, #1
    7434:	0243      	lsls	r3, r0, #9
    7436:	0044      	lsls	r4, r0, #1
    7438:	024d      	lsls	r5, r1, #9
    743a:	0fc0      	lsrs	r0, r0, #31
    743c:	0e24      	lsrs	r4, r4, #24
    743e:	1c06      	adds	r6, r0, #0
    7440:	099b      	lsrs	r3, r3, #6
    7442:	0e12      	lsrs	r2, r2, #24
    7444:	0fc9      	lsrs	r1, r1, #31
    7446:	09ad      	lsrs	r5, r5, #6
    7448:	2aff      	cmp	r2, #255	; 0xff
    744a:	d100      	bne.n	744e <__aeabi_fsub+0x1e>
    744c:	e075      	b.n	753a <__aeabi_fsub+0x10a>
    744e:	2701      	movs	r7, #1
    7450:	4079      	eors	r1, r7
    7452:	4288      	cmp	r0, r1
    7454:	d050      	beq.n	74f8 <__aeabi_fsub+0xc8>
    7456:	1aa0      	subs	r0, r4, r2
    7458:	2800      	cmp	r0, #0
    745a:	dc00      	bgt.n	745e <__aeabi_fsub+0x2e>
    745c:	e08f      	b.n	757e <__aeabi_fsub+0x14e>
    745e:	2a00      	cmp	r2, #0
    7460:	d11e      	bne.n	74a0 <__aeabi_fsub+0x70>
    7462:	2d00      	cmp	r5, #0
    7464:	d000      	beq.n	7468 <__aeabi_fsub+0x38>
    7466:	e075      	b.n	7554 <__aeabi_fsub+0x124>
    7468:	075a      	lsls	r2, r3, #29
    746a:	d004      	beq.n	7476 <__aeabi_fsub+0x46>
    746c:	220f      	movs	r2, #15
    746e:	401a      	ands	r2, r3
    7470:	2a04      	cmp	r2, #4
    7472:	d000      	beq.n	7476 <__aeabi_fsub+0x46>
    7474:	3304      	adds	r3, #4
    7476:	2280      	movs	r2, #128	; 0x80
    7478:	2001      	movs	r0, #1
    747a:	04d2      	lsls	r2, r2, #19
    747c:	401a      	ands	r2, r3
    747e:	4030      	ands	r0, r6
    7480:	2a00      	cmp	r2, #0
    7482:	d032      	beq.n	74ea <__aeabi_fsub+0xba>
    7484:	3401      	adds	r4, #1
    7486:	2cff      	cmp	r4, #255	; 0xff
    7488:	d100      	bne.n	748c <__aeabi_fsub+0x5c>
    748a:	e084      	b.n	7596 <__aeabi_fsub+0x166>
    748c:	019b      	lsls	r3, r3, #6
    748e:	0a5b      	lsrs	r3, r3, #9
    7490:	b2e4      	uxtb	r4, r4
    7492:	025b      	lsls	r3, r3, #9
    7494:	05e4      	lsls	r4, r4, #23
    7496:	0a5b      	lsrs	r3, r3, #9
    7498:	4323      	orrs	r3, r4
    749a:	07c0      	lsls	r0, r0, #31
    749c:	4318      	orrs	r0, r3
    749e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    74a0:	2cff      	cmp	r4, #255	; 0xff
    74a2:	d0e1      	beq.n	7468 <__aeabi_fsub+0x38>
    74a4:	2280      	movs	r2, #128	; 0x80
    74a6:	04d2      	lsls	r2, r2, #19
    74a8:	4315      	orrs	r5, r2
    74aa:	281b      	cmp	r0, #27
    74ac:	dd7a      	ble.n	75a4 <__aeabi_fsub+0x174>
    74ae:	2501      	movs	r5, #1
    74b0:	1b5b      	subs	r3, r3, r5
    74b2:	015a      	lsls	r2, r3, #5
    74b4:	d55d      	bpl.n	7572 <__aeabi_fsub+0x142>
    74b6:	019b      	lsls	r3, r3, #6
    74b8:	099f      	lsrs	r7, r3, #6
    74ba:	1c38      	adds	r0, r7, #0
    74bc:	f002 f8e8 	bl	9690 <__clzsi2>
    74c0:	3805      	subs	r0, #5
    74c2:	4087      	lsls	r7, r0
    74c4:	4284      	cmp	r4, r0
    74c6:	dc69      	bgt.n	759c <__aeabi_fsub+0x16c>
    74c8:	1b00      	subs	r0, r0, r4
    74ca:	241f      	movs	r4, #31
    74cc:	1c3a      	adds	r2, r7, #0
    74ce:	1c43      	adds	r3, r0, #1
    74d0:	1a20      	subs	r0, r4, r0
    74d2:	40da      	lsrs	r2, r3
    74d4:	4087      	lsls	r7, r0
    74d6:	1c13      	adds	r3, r2, #0
    74d8:	1e7c      	subs	r4, r7, #1
    74da:	41a7      	sbcs	r7, r4
    74dc:	2400      	movs	r4, #0
    74de:	433b      	orrs	r3, r7
    74e0:	e7c2      	b.n	7468 <__aeabi_fsub+0x38>
    74e2:	1e13      	subs	r3, r2, #0
    74e4:	d145      	bne.n	7572 <__aeabi_fsub+0x142>
    74e6:	2300      	movs	r3, #0
    74e8:	2000      	movs	r0, #0
    74ea:	08db      	lsrs	r3, r3, #3
    74ec:	2cff      	cmp	r4, #255	; 0xff
    74ee:	d028      	beq.n	7542 <__aeabi_fsub+0x112>
    74f0:	025b      	lsls	r3, r3, #9
    74f2:	0a5b      	lsrs	r3, r3, #9
    74f4:	b2e4      	uxtb	r4, r4
    74f6:	e7cc      	b.n	7492 <__aeabi_fsub+0x62>
    74f8:	1aa1      	subs	r1, r4, r2
    74fa:	2900      	cmp	r1, #0
    74fc:	dd5b      	ble.n	75b6 <__aeabi_fsub+0x186>
    74fe:	2a00      	cmp	r2, #0
    7500:	d02e      	beq.n	7560 <__aeabi_fsub+0x130>
    7502:	2cff      	cmp	r4, #255	; 0xff
    7504:	d0b0      	beq.n	7468 <__aeabi_fsub+0x38>
    7506:	2280      	movs	r2, #128	; 0x80
    7508:	04d2      	lsls	r2, r2, #19
    750a:	4315      	orrs	r5, r2
    750c:	291b      	cmp	r1, #27
    750e:	dc74      	bgt.n	75fa <__aeabi_fsub+0x1ca>
    7510:	1c2f      	adds	r7, r5, #0
    7512:	2220      	movs	r2, #32
    7514:	40cf      	lsrs	r7, r1
    7516:	1a51      	subs	r1, r2, r1
    7518:	408d      	lsls	r5, r1
    751a:	1e69      	subs	r1, r5, #1
    751c:	418d      	sbcs	r5, r1
    751e:	433d      	orrs	r5, r7
    7520:	195b      	adds	r3, r3, r5
    7522:	015a      	lsls	r2, r3, #5
    7524:	d525      	bpl.n	7572 <__aeabi_fsub+0x142>
    7526:	3401      	adds	r4, #1
    7528:	2cff      	cmp	r4, #255	; 0xff
    752a:	d074      	beq.n	7616 <__aeabi_fsub+0x1e6>
    752c:	2101      	movs	r1, #1
    752e:	4a7e      	ldr	r2, [pc, #504]	; (7728 <__aeabi_fsub+0x2f8>)
    7530:	4019      	ands	r1, r3
    7532:	4013      	ands	r3, r2
    7534:	085b      	lsrs	r3, r3, #1
    7536:	430b      	orrs	r3, r1
    7538:	e796      	b.n	7468 <__aeabi_fsub+0x38>
    753a:	2d00      	cmp	r5, #0
    753c:	d000      	beq.n	7540 <__aeabi_fsub+0x110>
    753e:	e788      	b.n	7452 <__aeabi_fsub+0x22>
    7540:	e785      	b.n	744e <__aeabi_fsub+0x1e>
    7542:	2b00      	cmp	r3, #0
    7544:	d027      	beq.n	7596 <__aeabi_fsub+0x166>
    7546:	2280      	movs	r2, #128	; 0x80
    7548:	03d2      	lsls	r2, r2, #15
    754a:	4313      	orrs	r3, r2
    754c:	025b      	lsls	r3, r3, #9
    754e:	0a5b      	lsrs	r3, r3, #9
    7550:	24ff      	movs	r4, #255	; 0xff
    7552:	e79e      	b.n	7492 <__aeabi_fsub+0x62>
    7554:	3801      	subs	r0, #1
    7556:	2800      	cmp	r0, #0
    7558:	d0aa      	beq.n	74b0 <__aeabi_fsub+0x80>
    755a:	2cff      	cmp	r4, #255	; 0xff
    755c:	d1a5      	bne.n	74aa <__aeabi_fsub+0x7a>
    755e:	e783      	b.n	7468 <__aeabi_fsub+0x38>
    7560:	2d00      	cmp	r5, #0
    7562:	d100      	bne.n	7566 <__aeabi_fsub+0x136>
    7564:	e780      	b.n	7468 <__aeabi_fsub+0x38>
    7566:	3901      	subs	r1, #1
    7568:	2900      	cmp	r1, #0
    756a:	d0d9      	beq.n	7520 <__aeabi_fsub+0xf0>
    756c:	2cff      	cmp	r4, #255	; 0xff
    756e:	d1cd      	bne.n	750c <__aeabi_fsub+0xdc>
    7570:	e77a      	b.n	7468 <__aeabi_fsub+0x38>
    7572:	075a      	lsls	r2, r3, #29
    7574:	d000      	beq.n	7578 <__aeabi_fsub+0x148>
    7576:	e779      	b.n	746c <__aeabi_fsub+0x3c>
    7578:	2001      	movs	r0, #1
    757a:	4030      	ands	r0, r6
    757c:	e7b5      	b.n	74ea <__aeabi_fsub+0xba>
    757e:	2800      	cmp	r0, #0
    7580:	d125      	bne.n	75ce <__aeabi_fsub+0x19e>
    7582:	1c62      	adds	r2, r4, #1
    7584:	b2d2      	uxtb	r2, r2
    7586:	2a01      	cmp	r2, #1
    7588:	dd55      	ble.n	7636 <__aeabi_fsub+0x206>
    758a:	1b5f      	subs	r7, r3, r5
    758c:	017a      	lsls	r2, r7, #5
    758e:	d52d      	bpl.n	75ec <__aeabi_fsub+0x1bc>
    7590:	1aef      	subs	r7, r5, r3
    7592:	1c0e      	adds	r6, r1, #0
    7594:	e791      	b.n	74ba <__aeabi_fsub+0x8a>
    7596:	24ff      	movs	r4, #255	; 0xff
    7598:	2300      	movs	r3, #0
    759a:	e77a      	b.n	7492 <__aeabi_fsub+0x62>
    759c:	4b62      	ldr	r3, [pc, #392]	; (7728 <__aeabi_fsub+0x2f8>)
    759e:	1a24      	subs	r4, r4, r0
    75a0:	403b      	ands	r3, r7
    75a2:	e761      	b.n	7468 <__aeabi_fsub+0x38>
    75a4:	1c29      	adds	r1, r5, #0
    75a6:	2220      	movs	r2, #32
    75a8:	40c1      	lsrs	r1, r0
    75aa:	1a10      	subs	r0, r2, r0
    75ac:	4085      	lsls	r5, r0
    75ae:	1e68      	subs	r0, r5, #1
    75b0:	4185      	sbcs	r5, r0
    75b2:	430d      	orrs	r5, r1
    75b4:	e77c      	b.n	74b0 <__aeabi_fsub+0x80>
    75b6:	2900      	cmp	r1, #0
    75b8:	d146      	bne.n	7648 <__aeabi_fsub+0x218>
    75ba:	1c62      	adds	r2, r4, #1
    75bc:	b2d1      	uxtb	r1, r2
    75be:	2901      	cmp	r1, #1
    75c0:	dd2b      	ble.n	761a <__aeabi_fsub+0x1ea>
    75c2:	2aff      	cmp	r2, #255	; 0xff
    75c4:	d026      	beq.n	7614 <__aeabi_fsub+0x1e4>
    75c6:	18eb      	adds	r3, r5, r3
    75c8:	085b      	lsrs	r3, r3, #1
    75ca:	1c14      	adds	r4, r2, #0
    75cc:	e74c      	b.n	7468 <__aeabi_fsub+0x38>
    75ce:	2c00      	cmp	r4, #0
    75d0:	d015      	beq.n	75fe <__aeabi_fsub+0x1ce>
    75d2:	2aff      	cmp	r2, #255	; 0xff
    75d4:	d01a      	beq.n	760c <__aeabi_fsub+0x1dc>
    75d6:	2480      	movs	r4, #128	; 0x80
    75d8:	04e4      	lsls	r4, r4, #19
    75da:	4240      	negs	r0, r0
    75dc:	4323      	orrs	r3, r4
    75de:	281b      	cmp	r0, #27
    75e0:	dd4d      	ble.n	767e <__aeabi_fsub+0x24e>
    75e2:	2301      	movs	r3, #1
    75e4:	1aeb      	subs	r3, r5, r3
    75e6:	1c14      	adds	r4, r2, #0
    75e8:	1c0e      	adds	r6, r1, #0
    75ea:	e762      	b.n	74b2 <__aeabi_fsub+0x82>
    75ec:	2f00      	cmp	r7, #0
    75ee:	d000      	beq.n	75f2 <__aeabi_fsub+0x1c2>
    75f0:	e763      	b.n	74ba <__aeabi_fsub+0x8a>
    75f2:	2300      	movs	r3, #0
    75f4:	2000      	movs	r0, #0
    75f6:	2400      	movs	r4, #0
    75f8:	e777      	b.n	74ea <__aeabi_fsub+0xba>
    75fa:	2501      	movs	r5, #1
    75fc:	e790      	b.n	7520 <__aeabi_fsub+0xf0>
    75fe:	2b00      	cmp	r3, #0
    7600:	d039      	beq.n	7676 <__aeabi_fsub+0x246>
    7602:	43c0      	mvns	r0, r0
    7604:	2800      	cmp	r0, #0
    7606:	d0ed      	beq.n	75e4 <__aeabi_fsub+0x1b4>
    7608:	2aff      	cmp	r2, #255	; 0xff
    760a:	d1e8      	bne.n	75de <__aeabi_fsub+0x1ae>
    760c:	1c2b      	adds	r3, r5, #0
    760e:	24ff      	movs	r4, #255	; 0xff
    7610:	1c0e      	adds	r6, r1, #0
    7612:	e729      	b.n	7468 <__aeabi_fsub+0x38>
    7614:	24ff      	movs	r4, #255	; 0xff
    7616:	2300      	movs	r3, #0
    7618:	e767      	b.n	74ea <__aeabi_fsub+0xba>
    761a:	2c00      	cmp	r4, #0
    761c:	d15a      	bne.n	76d4 <__aeabi_fsub+0x2a4>
    761e:	2b00      	cmp	r3, #0
    7620:	d07f      	beq.n	7722 <__aeabi_fsub+0x2f2>
    7622:	2d00      	cmp	r5, #0
    7624:	d100      	bne.n	7628 <__aeabi_fsub+0x1f8>
    7626:	e71f      	b.n	7468 <__aeabi_fsub+0x38>
    7628:	195b      	adds	r3, r3, r5
    762a:	015a      	lsls	r2, r3, #5
    762c:	d5a1      	bpl.n	7572 <__aeabi_fsub+0x142>
    762e:	4a3e      	ldr	r2, [pc, #248]	; (7728 <__aeabi_fsub+0x2f8>)
    7630:	3401      	adds	r4, #1
    7632:	4013      	ands	r3, r2
    7634:	e718      	b.n	7468 <__aeabi_fsub+0x38>
    7636:	2c00      	cmp	r4, #0
    7638:	d115      	bne.n	7666 <__aeabi_fsub+0x236>
    763a:	2b00      	cmp	r3, #0
    763c:	d12f      	bne.n	769e <__aeabi_fsub+0x26e>
    763e:	2d00      	cmp	r5, #0
    7640:	d05e      	beq.n	7700 <__aeabi_fsub+0x2d0>
    7642:	1c2b      	adds	r3, r5, #0
    7644:	1c0e      	adds	r6, r1, #0
    7646:	e70f      	b.n	7468 <__aeabi_fsub+0x38>
    7648:	2c00      	cmp	r4, #0
    764a:	d121      	bne.n	7690 <__aeabi_fsub+0x260>
    764c:	2b00      	cmp	r3, #0
    764e:	d054      	beq.n	76fa <__aeabi_fsub+0x2ca>
    7650:	43c9      	mvns	r1, r1
    7652:	2900      	cmp	r1, #0
    7654:	d004      	beq.n	7660 <__aeabi_fsub+0x230>
    7656:	2aff      	cmp	r2, #255	; 0xff
    7658:	d04c      	beq.n	76f4 <__aeabi_fsub+0x2c4>
    765a:	291b      	cmp	r1, #27
    765c:	dd58      	ble.n	7710 <__aeabi_fsub+0x2e0>
    765e:	2301      	movs	r3, #1
    7660:	195b      	adds	r3, r3, r5
    7662:	1c14      	adds	r4, r2, #0
    7664:	e75d      	b.n	7522 <__aeabi_fsub+0xf2>
    7666:	2b00      	cmp	r3, #0
    7668:	d123      	bne.n	76b2 <__aeabi_fsub+0x282>
    766a:	2d00      	cmp	r5, #0
    766c:	d04b      	beq.n	7706 <__aeabi_fsub+0x2d6>
    766e:	1c2b      	adds	r3, r5, #0
    7670:	1c0e      	adds	r6, r1, #0
    7672:	24ff      	movs	r4, #255	; 0xff
    7674:	e6f8      	b.n	7468 <__aeabi_fsub+0x38>
    7676:	1c2b      	adds	r3, r5, #0
    7678:	1c14      	adds	r4, r2, #0
    767a:	1c0e      	adds	r6, r1, #0
    767c:	e6f4      	b.n	7468 <__aeabi_fsub+0x38>
    767e:	1c1e      	adds	r6, r3, #0
    7680:	2420      	movs	r4, #32
    7682:	40c6      	lsrs	r6, r0
    7684:	1a20      	subs	r0, r4, r0
    7686:	4083      	lsls	r3, r0
    7688:	1e58      	subs	r0, r3, #1
    768a:	4183      	sbcs	r3, r0
    768c:	4333      	orrs	r3, r6
    768e:	e7a9      	b.n	75e4 <__aeabi_fsub+0x1b4>
    7690:	2aff      	cmp	r2, #255	; 0xff
    7692:	d02f      	beq.n	76f4 <__aeabi_fsub+0x2c4>
    7694:	2480      	movs	r4, #128	; 0x80
    7696:	04e4      	lsls	r4, r4, #19
    7698:	4249      	negs	r1, r1
    769a:	4323      	orrs	r3, r4
    769c:	e7dd      	b.n	765a <__aeabi_fsub+0x22a>
    769e:	2d00      	cmp	r5, #0
    76a0:	d100      	bne.n	76a4 <__aeabi_fsub+0x274>
    76a2:	e6e1      	b.n	7468 <__aeabi_fsub+0x38>
    76a4:	1b5a      	subs	r2, r3, r5
    76a6:	0150      	lsls	r0, r2, #5
    76a8:	d400      	bmi.n	76ac <__aeabi_fsub+0x27c>
    76aa:	e71a      	b.n	74e2 <__aeabi_fsub+0xb2>
    76ac:	1aeb      	subs	r3, r5, r3
    76ae:	1c0e      	adds	r6, r1, #0
    76b0:	e6da      	b.n	7468 <__aeabi_fsub+0x38>
    76b2:	24ff      	movs	r4, #255	; 0xff
    76b4:	2d00      	cmp	r5, #0
    76b6:	d100      	bne.n	76ba <__aeabi_fsub+0x28a>
    76b8:	e6d6      	b.n	7468 <__aeabi_fsub+0x38>
    76ba:	2280      	movs	r2, #128	; 0x80
    76bc:	08db      	lsrs	r3, r3, #3
    76be:	03d2      	lsls	r2, r2, #15
    76c0:	4213      	tst	r3, r2
    76c2:	d004      	beq.n	76ce <__aeabi_fsub+0x29e>
    76c4:	08ed      	lsrs	r5, r5, #3
    76c6:	4215      	tst	r5, r2
    76c8:	d101      	bne.n	76ce <__aeabi_fsub+0x29e>
    76ca:	1c2b      	adds	r3, r5, #0
    76cc:	1c0e      	adds	r6, r1, #0
    76ce:	00db      	lsls	r3, r3, #3
    76d0:	24ff      	movs	r4, #255	; 0xff
    76d2:	e6c9      	b.n	7468 <__aeabi_fsub+0x38>
    76d4:	2b00      	cmp	r3, #0
    76d6:	d00d      	beq.n	76f4 <__aeabi_fsub+0x2c4>
    76d8:	24ff      	movs	r4, #255	; 0xff
    76da:	2d00      	cmp	r5, #0
    76dc:	d100      	bne.n	76e0 <__aeabi_fsub+0x2b0>
    76de:	e6c3      	b.n	7468 <__aeabi_fsub+0x38>
    76e0:	2280      	movs	r2, #128	; 0x80
    76e2:	08db      	lsrs	r3, r3, #3
    76e4:	03d2      	lsls	r2, r2, #15
    76e6:	4213      	tst	r3, r2
    76e8:	d0f1      	beq.n	76ce <__aeabi_fsub+0x29e>
    76ea:	08ed      	lsrs	r5, r5, #3
    76ec:	4215      	tst	r5, r2
    76ee:	d1ee      	bne.n	76ce <__aeabi_fsub+0x29e>
    76f0:	1c2b      	adds	r3, r5, #0
    76f2:	e7ec      	b.n	76ce <__aeabi_fsub+0x29e>
    76f4:	1c2b      	adds	r3, r5, #0
    76f6:	24ff      	movs	r4, #255	; 0xff
    76f8:	e6b6      	b.n	7468 <__aeabi_fsub+0x38>
    76fa:	1c2b      	adds	r3, r5, #0
    76fc:	1c14      	adds	r4, r2, #0
    76fe:	e6b3      	b.n	7468 <__aeabi_fsub+0x38>
    7700:	1c23      	adds	r3, r4, #0
    7702:	2000      	movs	r0, #0
    7704:	e6f1      	b.n	74ea <__aeabi_fsub+0xba>
    7706:	2380      	movs	r3, #128	; 0x80
    7708:	2000      	movs	r0, #0
    770a:	049b      	lsls	r3, r3, #18
    770c:	24ff      	movs	r4, #255	; 0xff
    770e:	e6ec      	b.n	74ea <__aeabi_fsub+0xba>
    7710:	1c1f      	adds	r7, r3, #0
    7712:	2420      	movs	r4, #32
    7714:	40cf      	lsrs	r7, r1
    7716:	1a61      	subs	r1, r4, r1
    7718:	408b      	lsls	r3, r1
    771a:	1e59      	subs	r1, r3, #1
    771c:	418b      	sbcs	r3, r1
    771e:	433b      	orrs	r3, r7
    7720:	e79e      	b.n	7660 <__aeabi_fsub+0x230>
    7722:	1c2b      	adds	r3, r5, #0
    7724:	e6a0      	b.n	7468 <__aeabi_fsub+0x38>
    7726:	46c0      	nop			; (mov r8, r8)
    7728:	fbffffff 	.word	0xfbffffff

0000772c <__aeabi_f2iz>:
    772c:	0242      	lsls	r2, r0, #9
    772e:	0a51      	lsrs	r1, r2, #9
    7730:	0042      	lsls	r2, r0, #1
    7732:	0fc3      	lsrs	r3, r0, #31
    7734:	0e12      	lsrs	r2, r2, #24
    7736:	2000      	movs	r0, #0
    7738:	2a7e      	cmp	r2, #126	; 0x7e
    773a:	dd0d      	ble.n	7758 <__aeabi_f2iz+0x2c>
    773c:	2a9d      	cmp	r2, #157	; 0x9d
    773e:	dc0c      	bgt.n	775a <__aeabi_f2iz+0x2e>
    7740:	2080      	movs	r0, #128	; 0x80
    7742:	0400      	lsls	r0, r0, #16
    7744:	4301      	orrs	r1, r0
    7746:	2a95      	cmp	r2, #149	; 0x95
    7748:	dc0a      	bgt.n	7760 <__aeabi_f2iz+0x34>
    774a:	2096      	movs	r0, #150	; 0x96
    774c:	1a82      	subs	r2, r0, r2
    774e:	40d1      	lsrs	r1, r2
    7750:	1c0a      	adds	r2, r1, #0
    7752:	4258      	negs	r0, r3
    7754:	4042      	eors	r2, r0
    7756:	18d0      	adds	r0, r2, r3
    7758:	4770      	bx	lr
    775a:	4a03      	ldr	r2, [pc, #12]	; (7768 <__aeabi_f2iz+0x3c>)
    775c:	1898      	adds	r0, r3, r2
    775e:	e7fb      	b.n	7758 <__aeabi_f2iz+0x2c>
    7760:	3a96      	subs	r2, #150	; 0x96
    7762:	4091      	lsls	r1, r2
    7764:	1c0a      	adds	r2, r1, #0
    7766:	e7f4      	b.n	7752 <__aeabi_f2iz+0x26>
    7768:	7fffffff 	.word	0x7fffffff

0000776c <__aeabi_i2f>:
    776c:	b570      	push	{r4, r5, r6, lr}
    776e:	1e04      	subs	r4, r0, #0
    7770:	d039      	beq.n	77e6 <__aeabi_i2f+0x7a>
    7772:	0fc5      	lsrs	r5, r0, #31
    7774:	d000      	beq.n	7778 <__aeabi_i2f+0xc>
    7776:	4244      	negs	r4, r0
    7778:	1c20      	adds	r0, r4, #0
    777a:	f001 ff89 	bl	9690 <__clzsi2>
    777e:	239e      	movs	r3, #158	; 0x9e
    7780:	1c26      	adds	r6, r4, #0
    7782:	1a1b      	subs	r3, r3, r0
    7784:	2b96      	cmp	r3, #150	; 0x96
    7786:	dc07      	bgt.n	7798 <__aeabi_i2f+0x2c>
    7788:	2808      	cmp	r0, #8
    778a:	dd01      	ble.n	7790 <__aeabi_i2f+0x24>
    778c:	3808      	subs	r0, #8
    778e:	4084      	lsls	r4, r0
    7790:	0264      	lsls	r4, r4, #9
    7792:	0a64      	lsrs	r4, r4, #9
    7794:	b2d8      	uxtb	r0, r3
    7796:	e01e      	b.n	77d6 <__aeabi_i2f+0x6a>
    7798:	2b99      	cmp	r3, #153	; 0x99
    779a:	dd0a      	ble.n	77b2 <__aeabi_i2f+0x46>
    779c:	2205      	movs	r2, #5
    779e:	1c21      	adds	r1, r4, #0
    77a0:	1a12      	subs	r2, r2, r0
    77a2:	40d1      	lsrs	r1, r2
    77a4:	1c0a      	adds	r2, r1, #0
    77a6:	1c01      	adds	r1, r0, #0
    77a8:	311b      	adds	r1, #27
    77aa:	408e      	lsls	r6, r1
    77ac:	1e71      	subs	r1, r6, #1
    77ae:	418e      	sbcs	r6, r1
    77b0:	4316      	orrs	r6, r2
    77b2:	2805      	cmp	r0, #5
    77b4:	dd01      	ble.n	77ba <__aeabi_i2f+0x4e>
    77b6:	1f42      	subs	r2, r0, #5
    77b8:	4096      	lsls	r6, r2
    77ba:	4c0f      	ldr	r4, [pc, #60]	; (77f8 <__aeabi_i2f+0x8c>)
    77bc:	4034      	ands	r4, r6
    77be:	0772      	lsls	r2, r6, #29
    77c0:	d004      	beq.n	77cc <__aeabi_i2f+0x60>
    77c2:	220f      	movs	r2, #15
    77c4:	4016      	ands	r6, r2
    77c6:	2e04      	cmp	r6, #4
    77c8:	d000      	beq.n	77cc <__aeabi_i2f+0x60>
    77ca:	3404      	adds	r4, #4
    77cc:	0162      	lsls	r2, r4, #5
    77ce:	d40e      	bmi.n	77ee <__aeabi_i2f+0x82>
    77d0:	01a4      	lsls	r4, r4, #6
    77d2:	0a64      	lsrs	r4, r4, #9
    77d4:	b2d8      	uxtb	r0, r3
    77d6:	0264      	lsls	r4, r4, #9
    77d8:	05c0      	lsls	r0, r0, #23
    77da:	0a64      	lsrs	r4, r4, #9
    77dc:	07ed      	lsls	r5, r5, #31
    77de:	4304      	orrs	r4, r0
    77e0:	432c      	orrs	r4, r5
    77e2:	1c20      	adds	r0, r4, #0
    77e4:	bd70      	pop	{r4, r5, r6, pc}
    77e6:	2500      	movs	r5, #0
    77e8:	2000      	movs	r0, #0
    77ea:	2400      	movs	r4, #0
    77ec:	e7f3      	b.n	77d6 <__aeabi_i2f+0x6a>
    77ee:	4b02      	ldr	r3, [pc, #8]	; (77f8 <__aeabi_i2f+0x8c>)
    77f0:	401c      	ands	r4, r3
    77f2:	239f      	movs	r3, #159	; 0x9f
    77f4:	1a1b      	subs	r3, r3, r0
    77f6:	e7eb      	b.n	77d0 <__aeabi_i2f+0x64>
    77f8:	fbffffff 	.word	0xfbffffff

000077fc <__aeabi_ui2f>:
    77fc:	b510      	push	{r4, lr}
    77fe:	1e04      	subs	r4, r0, #0
    7800:	d035      	beq.n	786e <__aeabi_ui2f+0x72>
    7802:	f001 ff45 	bl	9690 <__clzsi2>
    7806:	219e      	movs	r1, #158	; 0x9e
    7808:	1a09      	subs	r1, r1, r0
    780a:	2996      	cmp	r1, #150	; 0x96
    780c:	dc09      	bgt.n	7822 <__aeabi_ui2f+0x26>
    780e:	2808      	cmp	r0, #8
    7810:	dd30      	ble.n	7874 <__aeabi_ui2f+0x78>
    7812:	1c02      	adds	r2, r0, #0
    7814:	1c23      	adds	r3, r4, #0
    7816:	3a08      	subs	r2, #8
    7818:	4093      	lsls	r3, r2
    781a:	025b      	lsls	r3, r3, #9
    781c:	0a5b      	lsrs	r3, r3, #9
    781e:	b2c8      	uxtb	r0, r1
    7820:	e020      	b.n	7864 <__aeabi_ui2f+0x68>
    7822:	2999      	cmp	r1, #153	; 0x99
    7824:	dd0c      	ble.n	7840 <__aeabi_ui2f+0x44>
    7826:	2205      	movs	r2, #5
    7828:	1c23      	adds	r3, r4, #0
    782a:	1a12      	subs	r2, r2, r0
    782c:	40d3      	lsrs	r3, r2
    782e:	1c1a      	adds	r2, r3, #0
    7830:	1c03      	adds	r3, r0, #0
    7832:	331b      	adds	r3, #27
    7834:	409c      	lsls	r4, r3
    7836:	1c23      	adds	r3, r4, #0
    7838:	1e5c      	subs	r4, r3, #1
    783a:	41a3      	sbcs	r3, r4
    783c:	4313      	orrs	r3, r2
    783e:	1c1c      	adds	r4, r3, #0
    7840:	2805      	cmp	r0, #5
    7842:	dd01      	ble.n	7848 <__aeabi_ui2f+0x4c>
    7844:	1f43      	subs	r3, r0, #5
    7846:	409c      	lsls	r4, r3
    7848:	4b0f      	ldr	r3, [pc, #60]	; (7888 <__aeabi_ui2f+0x8c>)
    784a:	4023      	ands	r3, r4
    784c:	0762      	lsls	r2, r4, #29
    784e:	d004      	beq.n	785a <__aeabi_ui2f+0x5e>
    7850:	220f      	movs	r2, #15
    7852:	4014      	ands	r4, r2
    7854:	2c04      	cmp	r4, #4
    7856:	d000      	beq.n	785a <__aeabi_ui2f+0x5e>
    7858:	3304      	adds	r3, #4
    785a:	015a      	lsls	r2, r3, #5
    785c:	d40e      	bmi.n	787c <__aeabi_ui2f+0x80>
    785e:	019b      	lsls	r3, r3, #6
    7860:	0a5b      	lsrs	r3, r3, #9
    7862:	b2c8      	uxtb	r0, r1
    7864:	025b      	lsls	r3, r3, #9
    7866:	0a5b      	lsrs	r3, r3, #9
    7868:	05c0      	lsls	r0, r0, #23
    786a:	4318      	orrs	r0, r3
    786c:	bd10      	pop	{r4, pc}
    786e:	2000      	movs	r0, #0
    7870:	2300      	movs	r3, #0
    7872:	e7f7      	b.n	7864 <__aeabi_ui2f+0x68>
    7874:	0263      	lsls	r3, r4, #9
    7876:	0a5b      	lsrs	r3, r3, #9
    7878:	b2c8      	uxtb	r0, r1
    787a:	e7f3      	b.n	7864 <__aeabi_ui2f+0x68>
    787c:	219f      	movs	r1, #159	; 0x9f
    787e:	4a02      	ldr	r2, [pc, #8]	; (7888 <__aeabi_ui2f+0x8c>)
    7880:	1a09      	subs	r1, r1, r0
    7882:	4013      	ands	r3, r2
    7884:	e7eb      	b.n	785e <__aeabi_ui2f+0x62>
    7886:	46c0      	nop			; (mov r8, r8)
    7888:	fbffffff 	.word	0xfbffffff

0000788c <__aeabi_dadd>:
    788c:	b5f0      	push	{r4, r5, r6, r7, lr}
    788e:	4645      	mov	r5, r8
    7890:	4657      	mov	r7, sl
    7892:	464e      	mov	r6, r9
    7894:	4694      	mov	ip, r2
    7896:	004c      	lsls	r4, r1, #1
    7898:	030a      	lsls	r2, r1, #12
    789a:	0fc9      	lsrs	r1, r1, #31
    789c:	b4e0      	push	{r5, r6, r7}
    789e:	4688      	mov	r8, r1
    78a0:	1c0e      	adds	r6, r1, #0
    78a2:	0319      	lsls	r1, r3, #12
    78a4:	0f47      	lsrs	r7, r0, #29
    78a6:	00c5      	lsls	r5, r0, #3
    78a8:	0a48      	lsrs	r0, r1, #9
    78aa:	4661      	mov	r1, ip
    78ac:	0f49      	lsrs	r1, r1, #29
    78ae:	4301      	orrs	r1, r0
    78b0:	4660      	mov	r0, ip
    78b2:	0a52      	lsrs	r2, r2, #9
    78b4:	4317      	orrs	r7, r2
    78b6:	00c0      	lsls	r0, r0, #3
    78b8:	005a      	lsls	r2, r3, #1
    78ba:	0d64      	lsrs	r4, r4, #21
    78bc:	0d52      	lsrs	r2, r2, #21
    78be:	0fdb      	lsrs	r3, r3, #31
    78c0:	4684      	mov	ip, r0
    78c2:	4598      	cmp	r8, r3
    78c4:	d100      	bne.n	78c8 <__aeabi_dadd+0x3c>
    78c6:	e0a7      	b.n	7a18 <__aeabi_dadd+0x18c>
    78c8:	1aa0      	subs	r0, r4, r2
    78ca:	2800      	cmp	r0, #0
    78cc:	dc00      	bgt.n	78d0 <__aeabi_dadd+0x44>
    78ce:	e101      	b.n	7ad4 <__aeabi_dadd+0x248>
    78d0:	2a00      	cmp	r2, #0
    78d2:	d13d      	bne.n	7950 <__aeabi_dadd+0xc4>
    78d4:	4663      	mov	r3, ip
    78d6:	430b      	orrs	r3, r1
    78d8:	d000      	beq.n	78dc <__aeabi_dadd+0x50>
    78da:	e0d4      	b.n	7a86 <__aeabi_dadd+0x1fa>
    78dc:	076b      	lsls	r3, r5, #29
    78de:	d100      	bne.n	78e2 <__aeabi_dadd+0x56>
    78e0:	e088      	b.n	79f4 <__aeabi_dadd+0x168>
    78e2:	230f      	movs	r3, #15
    78e4:	402b      	ands	r3, r5
    78e6:	2b04      	cmp	r3, #4
    78e8:	d100      	bne.n	78ec <__aeabi_dadd+0x60>
    78ea:	e083      	b.n	79f4 <__aeabi_dadd+0x168>
    78ec:	1d2a      	adds	r2, r5, #4
    78ee:	42aa      	cmp	r2, r5
    78f0:	41ad      	sbcs	r5, r5
    78f2:	2380      	movs	r3, #128	; 0x80
    78f4:	426d      	negs	r5, r5
    78f6:	197f      	adds	r7, r7, r5
    78f8:	041b      	lsls	r3, r3, #16
    78fa:	403b      	ands	r3, r7
    78fc:	4646      	mov	r6, r8
    78fe:	1c15      	adds	r5, r2, #0
    7900:	2b00      	cmp	r3, #0
    7902:	d100      	bne.n	7906 <__aeabi_dadd+0x7a>
    7904:	e07c      	b.n	7a00 <__aeabi_dadd+0x174>
    7906:	4bcc      	ldr	r3, [pc, #816]	; (7c38 <__aeabi_dadd+0x3ac>)
    7908:	3401      	adds	r4, #1
    790a:	429c      	cmp	r4, r3
    790c:	d100      	bne.n	7910 <__aeabi_dadd+0x84>
    790e:	e0fd      	b.n	7b0c <__aeabi_dadd+0x280>
    7910:	1c3a      	adds	r2, r7, #0
    7912:	4bca      	ldr	r3, [pc, #808]	; (7c3c <__aeabi_dadd+0x3b0>)
    7914:	08ed      	lsrs	r5, r5, #3
    7916:	401a      	ands	r2, r3
    7918:	0750      	lsls	r0, r2, #29
    791a:	0564      	lsls	r4, r4, #21
    791c:	0252      	lsls	r2, r2, #9
    791e:	4305      	orrs	r5, r0
    7920:	0b12      	lsrs	r2, r2, #12
    7922:	0d64      	lsrs	r4, r4, #21
    7924:	2100      	movs	r1, #0
    7926:	0312      	lsls	r2, r2, #12
    7928:	0d0b      	lsrs	r3, r1, #20
    792a:	051b      	lsls	r3, r3, #20
    792c:	0564      	lsls	r4, r4, #21
    792e:	0b12      	lsrs	r2, r2, #12
    7930:	431a      	orrs	r2, r3
    7932:	0863      	lsrs	r3, r4, #1
    7934:	4cc2      	ldr	r4, [pc, #776]	; (7c40 <__aeabi_dadd+0x3b4>)
    7936:	07f6      	lsls	r6, r6, #31
    7938:	4014      	ands	r4, r2
    793a:	431c      	orrs	r4, r3
    793c:	0064      	lsls	r4, r4, #1
    793e:	0864      	lsrs	r4, r4, #1
    7940:	4334      	orrs	r4, r6
    7942:	1c28      	adds	r0, r5, #0
    7944:	1c21      	adds	r1, r4, #0
    7946:	bc1c      	pop	{r2, r3, r4}
    7948:	4690      	mov	r8, r2
    794a:	4699      	mov	r9, r3
    794c:	46a2      	mov	sl, r4
    794e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7950:	4bb9      	ldr	r3, [pc, #740]	; (7c38 <__aeabi_dadd+0x3ac>)
    7952:	429c      	cmp	r4, r3
    7954:	d0c2      	beq.n	78dc <__aeabi_dadd+0x50>
    7956:	2380      	movs	r3, #128	; 0x80
    7958:	041b      	lsls	r3, r3, #16
    795a:	4319      	orrs	r1, r3
    795c:	2838      	cmp	r0, #56	; 0x38
    795e:	dd00      	ble.n	7962 <__aeabi_dadd+0xd6>
    7960:	e0ec      	b.n	7b3c <__aeabi_dadd+0x2b0>
    7962:	281f      	cmp	r0, #31
    7964:	dd00      	ble.n	7968 <__aeabi_dadd+0xdc>
    7966:	e121      	b.n	7bac <__aeabi_dadd+0x320>
    7968:	2220      	movs	r2, #32
    796a:	1c0e      	adds	r6, r1, #0
    796c:	4663      	mov	r3, ip
    796e:	1a12      	subs	r2, r2, r0
    7970:	4096      	lsls	r6, r2
    7972:	40c3      	lsrs	r3, r0
    7974:	4333      	orrs	r3, r6
    7976:	4666      	mov	r6, ip
    7978:	4096      	lsls	r6, r2
    797a:	1c32      	adds	r2, r6, #0
    797c:	1e56      	subs	r6, r2, #1
    797e:	41b2      	sbcs	r2, r6
    7980:	4313      	orrs	r3, r2
    7982:	1c0a      	adds	r2, r1, #0
    7984:	40c2      	lsrs	r2, r0
    7986:	1aeb      	subs	r3, r5, r3
    7988:	429d      	cmp	r5, r3
    798a:	41b6      	sbcs	r6, r6
    798c:	1c1d      	adds	r5, r3, #0
    798e:	1aba      	subs	r2, r7, r2
    7990:	4276      	negs	r6, r6
    7992:	1b97      	subs	r7, r2, r6
    7994:	023b      	lsls	r3, r7, #8
    7996:	d400      	bmi.n	799a <__aeabi_dadd+0x10e>
    7998:	e097      	b.n	7aca <__aeabi_dadd+0x23e>
    799a:	027a      	lsls	r2, r7, #9
    799c:	0a56      	lsrs	r6, r2, #9
    799e:	2e00      	cmp	r6, #0
    79a0:	d100      	bne.n	79a4 <__aeabi_dadd+0x118>
    79a2:	e0b6      	b.n	7b12 <__aeabi_dadd+0x286>
    79a4:	1c30      	adds	r0, r6, #0
    79a6:	f001 fe73 	bl	9690 <__clzsi2>
    79aa:	1c03      	adds	r3, r0, #0
    79ac:	3b08      	subs	r3, #8
    79ae:	2b1f      	cmp	r3, #31
    79b0:	dd00      	ble.n	79b4 <__aeabi_dadd+0x128>
    79b2:	e0b7      	b.n	7b24 <__aeabi_dadd+0x298>
    79b4:	409e      	lsls	r6, r3
    79b6:	1c37      	adds	r7, r6, #0
    79b8:	2628      	movs	r6, #40	; 0x28
    79ba:	1c2a      	adds	r2, r5, #0
    79bc:	1a36      	subs	r6, r6, r0
    79be:	40f2      	lsrs	r2, r6
    79c0:	1c16      	adds	r6, r2, #0
    79c2:	409d      	lsls	r5, r3
    79c4:	433e      	orrs	r6, r7
    79c6:	429c      	cmp	r4, r3
    79c8:	dd00      	ble.n	79cc <__aeabi_dadd+0x140>
    79ca:	e0b2      	b.n	7b32 <__aeabi_dadd+0x2a6>
    79cc:	1b1c      	subs	r4, r3, r4
    79ce:	1c62      	adds	r2, r4, #1
    79d0:	2a1f      	cmp	r2, #31
    79d2:	dd00      	ble.n	79d6 <__aeabi_dadd+0x14a>
    79d4:	e0d8      	b.n	7b88 <__aeabi_dadd+0x2fc>
    79d6:	231f      	movs	r3, #31
    79d8:	1c29      	adds	r1, r5, #0
    79da:	1b1c      	subs	r4, r3, r4
    79dc:	1c33      	adds	r3, r6, #0
    79de:	40a5      	lsls	r5, r4
    79e0:	40a3      	lsls	r3, r4
    79e2:	40d1      	lsrs	r1, r2
    79e4:	1e6c      	subs	r4, r5, #1
    79e6:	41a5      	sbcs	r5, r4
    79e8:	40d6      	lsrs	r6, r2
    79ea:	4319      	orrs	r1, r3
    79ec:	430d      	orrs	r5, r1
    79ee:	1c37      	adds	r7, r6, #0
    79f0:	2400      	movs	r4, #0
    79f2:	e773      	b.n	78dc <__aeabi_dadd+0x50>
    79f4:	2380      	movs	r3, #128	; 0x80
    79f6:	041b      	lsls	r3, r3, #16
    79f8:	403b      	ands	r3, r7
    79fa:	4646      	mov	r6, r8
    79fc:	d000      	beq.n	7a00 <__aeabi_dadd+0x174>
    79fe:	e782      	b.n	7906 <__aeabi_dadd+0x7a>
    7a00:	4b8d      	ldr	r3, [pc, #564]	; (7c38 <__aeabi_dadd+0x3ac>)
    7a02:	08ed      	lsrs	r5, r5, #3
    7a04:	0778      	lsls	r0, r7, #29
    7a06:	4305      	orrs	r5, r0
    7a08:	08fa      	lsrs	r2, r7, #3
    7a0a:	429c      	cmp	r4, r3
    7a0c:	d032      	beq.n	7a74 <__aeabi_dadd+0x1e8>
    7a0e:	0312      	lsls	r2, r2, #12
    7a10:	0564      	lsls	r4, r4, #21
    7a12:	0b12      	lsrs	r2, r2, #12
    7a14:	0d64      	lsrs	r4, r4, #21
    7a16:	e785      	b.n	7924 <__aeabi_dadd+0x98>
    7a18:	1aa3      	subs	r3, r4, r2
    7a1a:	2b00      	cmp	r3, #0
    7a1c:	dc00      	bgt.n	7a20 <__aeabi_dadd+0x194>
    7a1e:	e094      	b.n	7b4a <__aeabi_dadd+0x2be>
    7a20:	2a00      	cmp	r2, #0
    7a22:	d03c      	beq.n	7a9e <__aeabi_dadd+0x212>
    7a24:	4a84      	ldr	r2, [pc, #528]	; (7c38 <__aeabi_dadd+0x3ac>)
    7a26:	4294      	cmp	r4, r2
    7a28:	d100      	bne.n	7a2c <__aeabi_dadd+0x1a0>
    7a2a:	e757      	b.n	78dc <__aeabi_dadd+0x50>
    7a2c:	2280      	movs	r2, #128	; 0x80
    7a2e:	0412      	lsls	r2, r2, #16
    7a30:	4311      	orrs	r1, r2
    7a32:	2b38      	cmp	r3, #56	; 0x38
    7a34:	dc00      	bgt.n	7a38 <__aeabi_dadd+0x1ac>
    7a36:	e105      	b.n	7c44 <__aeabi_dadd+0x3b8>
    7a38:	4663      	mov	r3, ip
    7a3a:	4319      	orrs	r1, r3
    7a3c:	1e48      	subs	r0, r1, #1
    7a3e:	4181      	sbcs	r1, r0
    7a40:	2200      	movs	r2, #0
    7a42:	b2c8      	uxtb	r0, r1
    7a44:	1940      	adds	r0, r0, r5
    7a46:	42a8      	cmp	r0, r5
    7a48:	419b      	sbcs	r3, r3
    7a4a:	1c05      	adds	r5, r0, #0
    7a4c:	19d2      	adds	r2, r2, r7
    7a4e:	425b      	negs	r3, r3
    7a50:	18d7      	adds	r7, r2, r3
    7a52:	023b      	lsls	r3, r7, #8
    7a54:	d539      	bpl.n	7aca <__aeabi_dadd+0x23e>
    7a56:	4b78      	ldr	r3, [pc, #480]	; (7c38 <__aeabi_dadd+0x3ac>)
    7a58:	3401      	adds	r4, #1
    7a5a:	429c      	cmp	r4, r3
    7a5c:	d100      	bne.n	7a60 <__aeabi_dadd+0x1d4>
    7a5e:	e14c      	b.n	7cfa <__aeabi_dadd+0x46e>
    7a60:	2001      	movs	r0, #1
    7a62:	4a76      	ldr	r2, [pc, #472]	; (7c3c <__aeabi_dadd+0x3b0>)
    7a64:	086b      	lsrs	r3, r5, #1
    7a66:	403a      	ands	r2, r7
    7a68:	4028      	ands	r0, r5
    7a6a:	4318      	orrs	r0, r3
    7a6c:	07d5      	lsls	r5, r2, #31
    7a6e:	4305      	orrs	r5, r0
    7a70:	0857      	lsrs	r7, r2, #1
    7a72:	e733      	b.n	78dc <__aeabi_dadd+0x50>
    7a74:	1c2b      	adds	r3, r5, #0
    7a76:	4313      	orrs	r3, r2
    7a78:	d048      	beq.n	7b0c <__aeabi_dadd+0x280>
    7a7a:	2380      	movs	r3, #128	; 0x80
    7a7c:	031b      	lsls	r3, r3, #12
    7a7e:	431a      	orrs	r2, r3
    7a80:	0312      	lsls	r2, r2, #12
    7a82:	0b12      	lsrs	r2, r2, #12
    7a84:	e74e      	b.n	7924 <__aeabi_dadd+0x98>
    7a86:	3801      	subs	r0, #1
    7a88:	2800      	cmp	r0, #0
    7a8a:	d178      	bne.n	7b7e <__aeabi_dadd+0x2f2>
    7a8c:	4663      	mov	r3, ip
    7a8e:	1aee      	subs	r6, r5, r3
    7a90:	42b5      	cmp	r5, r6
    7a92:	419b      	sbcs	r3, r3
    7a94:	1a7a      	subs	r2, r7, r1
    7a96:	425b      	negs	r3, r3
    7a98:	1ad7      	subs	r7, r2, r3
    7a9a:	1c35      	adds	r5, r6, #0
    7a9c:	e77a      	b.n	7994 <__aeabi_dadd+0x108>
    7a9e:	1c02      	adds	r2, r0, #0
    7aa0:	430a      	orrs	r2, r1
    7aa2:	d100      	bne.n	7aa6 <__aeabi_dadd+0x21a>
    7aa4:	e71a      	b.n	78dc <__aeabi_dadd+0x50>
    7aa6:	3b01      	subs	r3, #1
    7aa8:	2b00      	cmp	r3, #0
    7aaa:	d000      	beq.n	7aae <__aeabi_dadd+0x222>
    7aac:	e0f2      	b.n	7c94 <__aeabi_dadd+0x408>
    7aae:	1940      	adds	r0, r0, r5
    7ab0:	42a8      	cmp	r0, r5
    7ab2:	419b      	sbcs	r3, r3
    7ab4:	19ca      	adds	r2, r1, r7
    7ab6:	425b      	negs	r3, r3
    7ab8:	18d7      	adds	r7, r2, r3
    7aba:	1c05      	adds	r5, r0, #0
    7abc:	e7c9      	b.n	7a52 <__aeabi_dadd+0x1c6>
    7abe:	1c13      	adds	r3, r2, #0
    7ac0:	4333      	orrs	r3, r6
    7ac2:	d100      	bne.n	7ac6 <__aeabi_dadd+0x23a>
    7ac4:	e118      	b.n	7cf8 <__aeabi_dadd+0x46c>
    7ac6:	1c17      	adds	r7, r2, #0
    7ac8:	1c35      	adds	r5, r6, #0
    7aca:	4646      	mov	r6, r8
    7acc:	076b      	lsls	r3, r5, #29
    7ace:	d000      	beq.n	7ad2 <__aeabi_dadd+0x246>
    7ad0:	e707      	b.n	78e2 <__aeabi_dadd+0x56>
    7ad2:	e795      	b.n	7a00 <__aeabi_dadd+0x174>
    7ad4:	2800      	cmp	r0, #0
    7ad6:	d17a      	bne.n	7bce <__aeabi_dadd+0x342>
    7ad8:	1c62      	adds	r2, r4, #1
    7ada:	0552      	lsls	r2, r2, #21
    7adc:	0d52      	lsrs	r2, r2, #21
    7ade:	2a01      	cmp	r2, #1
    7ae0:	dc00      	bgt.n	7ae4 <__aeabi_dadd+0x258>
    7ae2:	e0fb      	b.n	7cdc <__aeabi_dadd+0x450>
    7ae4:	4662      	mov	r2, ip
    7ae6:	1aaa      	subs	r2, r5, r2
    7ae8:	4295      	cmp	r5, r2
    7aea:	41b6      	sbcs	r6, r6
    7aec:	4691      	mov	r9, r2
    7aee:	1a78      	subs	r0, r7, r1
    7af0:	4272      	negs	r2, r6
    7af2:	1a86      	subs	r6, r0, r2
    7af4:	0232      	lsls	r2, r6, #8
    7af6:	d400      	bmi.n	7afa <__aeabi_dadd+0x26e>
    7af8:	e093      	b.n	7c22 <__aeabi_dadd+0x396>
    7afa:	4662      	mov	r2, ip
    7afc:	1b55      	subs	r5, r2, r5
    7afe:	45ac      	cmp	ip, r5
    7b00:	4180      	sbcs	r0, r0
    7b02:	1bcf      	subs	r7, r1, r7
    7b04:	4240      	negs	r0, r0
    7b06:	1a3e      	subs	r6, r7, r0
    7b08:	4698      	mov	r8, r3
    7b0a:	e748      	b.n	799e <__aeabi_dadd+0x112>
    7b0c:	2200      	movs	r2, #0
    7b0e:	2500      	movs	r5, #0
    7b10:	e708      	b.n	7924 <__aeabi_dadd+0x98>
    7b12:	1c28      	adds	r0, r5, #0
    7b14:	f001 fdbc 	bl	9690 <__clzsi2>
    7b18:	3020      	adds	r0, #32
    7b1a:	1c03      	adds	r3, r0, #0
    7b1c:	3b08      	subs	r3, #8
    7b1e:	2b1f      	cmp	r3, #31
    7b20:	dc00      	bgt.n	7b24 <__aeabi_dadd+0x298>
    7b22:	e747      	b.n	79b4 <__aeabi_dadd+0x128>
    7b24:	3828      	subs	r0, #40	; 0x28
    7b26:	4085      	lsls	r5, r0
    7b28:	1c2e      	adds	r6, r5, #0
    7b2a:	2500      	movs	r5, #0
    7b2c:	429c      	cmp	r4, r3
    7b2e:	dc00      	bgt.n	7b32 <__aeabi_dadd+0x2a6>
    7b30:	e74c      	b.n	79cc <__aeabi_dadd+0x140>
    7b32:	4a42      	ldr	r2, [pc, #264]	; (7c3c <__aeabi_dadd+0x3b0>)
    7b34:	1ae4      	subs	r4, r4, r3
    7b36:	4016      	ands	r6, r2
    7b38:	1c37      	adds	r7, r6, #0
    7b3a:	e6cf      	b.n	78dc <__aeabi_dadd+0x50>
    7b3c:	4663      	mov	r3, ip
    7b3e:	4319      	orrs	r1, r3
    7b40:	1e4b      	subs	r3, r1, #1
    7b42:	4199      	sbcs	r1, r3
    7b44:	2200      	movs	r2, #0
    7b46:	b2cb      	uxtb	r3, r1
    7b48:	e71d      	b.n	7986 <__aeabi_dadd+0xfa>
    7b4a:	2b00      	cmp	r3, #0
    7b4c:	d000      	beq.n	7b50 <__aeabi_dadd+0x2c4>
    7b4e:	e0f2      	b.n	7d36 <__aeabi_dadd+0x4aa>
    7b50:	1c60      	adds	r0, r4, #1
    7b52:	0543      	lsls	r3, r0, #21
    7b54:	0d5b      	lsrs	r3, r3, #21
    7b56:	2b01      	cmp	r3, #1
    7b58:	dc00      	bgt.n	7b5c <__aeabi_dadd+0x2d0>
    7b5a:	e0a4      	b.n	7ca6 <__aeabi_dadd+0x41a>
    7b5c:	4b36      	ldr	r3, [pc, #216]	; (7c38 <__aeabi_dadd+0x3ac>)
    7b5e:	4298      	cmp	r0, r3
    7b60:	d100      	bne.n	7b64 <__aeabi_dadd+0x2d8>
    7b62:	e121      	b.n	7da8 <__aeabi_dadd+0x51c>
    7b64:	4663      	mov	r3, ip
    7b66:	195c      	adds	r4, r3, r5
    7b68:	42ac      	cmp	r4, r5
    7b6a:	419b      	sbcs	r3, r3
    7b6c:	19cf      	adds	r7, r1, r7
    7b6e:	425b      	negs	r3, r3
    7b70:	18fa      	adds	r2, r7, r3
    7b72:	0864      	lsrs	r4, r4, #1
    7b74:	07d5      	lsls	r5, r2, #31
    7b76:	4325      	orrs	r5, r4
    7b78:	0857      	lsrs	r7, r2, #1
    7b7a:	1c04      	adds	r4, r0, #0
    7b7c:	e6ae      	b.n	78dc <__aeabi_dadd+0x50>
    7b7e:	4b2e      	ldr	r3, [pc, #184]	; (7c38 <__aeabi_dadd+0x3ac>)
    7b80:	429c      	cmp	r4, r3
    7b82:	d000      	beq.n	7b86 <__aeabi_dadd+0x2fa>
    7b84:	e6ea      	b.n	795c <__aeabi_dadd+0xd0>
    7b86:	e6a9      	b.n	78dc <__aeabi_dadd+0x50>
    7b88:	1c21      	adds	r1, r4, #0
    7b8a:	1c33      	adds	r3, r6, #0
    7b8c:	391f      	subs	r1, #31
    7b8e:	40cb      	lsrs	r3, r1
    7b90:	1c19      	adds	r1, r3, #0
    7b92:	2a20      	cmp	r2, #32
    7b94:	d100      	bne.n	7b98 <__aeabi_dadd+0x30c>
    7b96:	e082      	b.n	7c9e <__aeabi_dadd+0x412>
    7b98:	233f      	movs	r3, #63	; 0x3f
    7b9a:	1b1c      	subs	r4, r3, r4
    7b9c:	40a6      	lsls	r6, r4
    7b9e:	4335      	orrs	r5, r6
    7ba0:	1e6e      	subs	r6, r5, #1
    7ba2:	41b5      	sbcs	r5, r6
    7ba4:	2700      	movs	r7, #0
    7ba6:	430d      	orrs	r5, r1
    7ba8:	2400      	movs	r4, #0
    7baa:	e78e      	b.n	7aca <__aeabi_dadd+0x23e>
    7bac:	1c03      	adds	r3, r0, #0
    7bae:	1c0e      	adds	r6, r1, #0
    7bb0:	3b20      	subs	r3, #32
    7bb2:	40de      	lsrs	r6, r3
    7bb4:	2820      	cmp	r0, #32
    7bb6:	d074      	beq.n	7ca2 <__aeabi_dadd+0x416>
    7bb8:	2340      	movs	r3, #64	; 0x40
    7bba:	1a1b      	subs	r3, r3, r0
    7bbc:	4099      	lsls	r1, r3
    7bbe:	1c0b      	adds	r3, r1, #0
    7bc0:	4662      	mov	r2, ip
    7bc2:	4313      	orrs	r3, r2
    7bc4:	1e59      	subs	r1, r3, #1
    7bc6:	418b      	sbcs	r3, r1
    7bc8:	2200      	movs	r2, #0
    7bca:	4333      	orrs	r3, r6
    7bcc:	e6db      	b.n	7986 <__aeabi_dadd+0xfa>
    7bce:	2c00      	cmp	r4, #0
    7bd0:	d050      	beq.n	7c74 <__aeabi_dadd+0x3e8>
    7bd2:	4c19      	ldr	r4, [pc, #100]	; (7c38 <__aeabi_dadd+0x3ac>)
    7bd4:	42a2      	cmp	r2, r4
    7bd6:	d100      	bne.n	7bda <__aeabi_dadd+0x34e>
    7bd8:	e0a8      	b.n	7d2c <__aeabi_dadd+0x4a0>
    7bda:	2480      	movs	r4, #128	; 0x80
    7bdc:	0424      	lsls	r4, r4, #16
    7bde:	4240      	negs	r0, r0
    7be0:	4327      	orrs	r7, r4
    7be2:	2838      	cmp	r0, #56	; 0x38
    7be4:	dd00      	ble.n	7be8 <__aeabi_dadd+0x35c>
    7be6:	e0d9      	b.n	7d9c <__aeabi_dadd+0x510>
    7be8:	281f      	cmp	r0, #31
    7bea:	dd00      	ble.n	7bee <__aeabi_dadd+0x362>
    7bec:	e139      	b.n	7e62 <__aeabi_dadd+0x5d6>
    7bee:	2420      	movs	r4, #32
    7bf0:	1c3e      	adds	r6, r7, #0
    7bf2:	1a24      	subs	r4, r4, r0
    7bf4:	40a6      	lsls	r6, r4
    7bf6:	46b0      	mov	r8, r6
    7bf8:	1c2e      	adds	r6, r5, #0
    7bfa:	46a1      	mov	r9, r4
    7bfc:	40c6      	lsrs	r6, r0
    7bfe:	4644      	mov	r4, r8
    7c00:	4326      	orrs	r6, r4
    7c02:	464c      	mov	r4, r9
    7c04:	40a5      	lsls	r5, r4
    7c06:	1e6c      	subs	r4, r5, #1
    7c08:	41a5      	sbcs	r5, r4
    7c0a:	40c7      	lsrs	r7, r0
    7c0c:	4335      	orrs	r5, r6
    7c0e:	4660      	mov	r0, ip
    7c10:	1b45      	subs	r5, r0, r5
    7c12:	1bcf      	subs	r7, r1, r7
    7c14:	45ac      	cmp	ip, r5
    7c16:	4189      	sbcs	r1, r1
    7c18:	4249      	negs	r1, r1
    7c1a:	1a7f      	subs	r7, r7, r1
    7c1c:	1c14      	adds	r4, r2, #0
    7c1e:	4698      	mov	r8, r3
    7c20:	e6b8      	b.n	7994 <__aeabi_dadd+0x108>
    7c22:	464b      	mov	r3, r9
    7c24:	464d      	mov	r5, r9
    7c26:	4333      	orrs	r3, r6
    7c28:	d000      	beq.n	7c2c <__aeabi_dadd+0x3a0>
    7c2a:	e6b8      	b.n	799e <__aeabi_dadd+0x112>
    7c2c:	2600      	movs	r6, #0
    7c2e:	2700      	movs	r7, #0
    7c30:	2400      	movs	r4, #0
    7c32:	2500      	movs	r5, #0
    7c34:	e6e4      	b.n	7a00 <__aeabi_dadd+0x174>
    7c36:	46c0      	nop			; (mov r8, r8)
    7c38:	000007ff 	.word	0x000007ff
    7c3c:	ff7fffff 	.word	0xff7fffff
    7c40:	800fffff 	.word	0x800fffff
    7c44:	2b1f      	cmp	r3, #31
    7c46:	dc5b      	bgt.n	7d00 <__aeabi_dadd+0x474>
    7c48:	2220      	movs	r2, #32
    7c4a:	1c08      	adds	r0, r1, #0
    7c4c:	1ad2      	subs	r2, r2, r3
    7c4e:	4090      	lsls	r0, r2
    7c50:	4681      	mov	r9, r0
    7c52:	4660      	mov	r0, ip
    7c54:	4692      	mov	sl, r2
    7c56:	40d8      	lsrs	r0, r3
    7c58:	464a      	mov	r2, r9
    7c5a:	4310      	orrs	r0, r2
    7c5c:	4681      	mov	r9, r0
    7c5e:	4652      	mov	r2, sl
    7c60:	4660      	mov	r0, ip
    7c62:	4090      	lsls	r0, r2
    7c64:	1c02      	adds	r2, r0, #0
    7c66:	1e50      	subs	r0, r2, #1
    7c68:	4182      	sbcs	r2, r0
    7c6a:	4648      	mov	r0, r9
    7c6c:	4310      	orrs	r0, r2
    7c6e:	1c0a      	adds	r2, r1, #0
    7c70:	40da      	lsrs	r2, r3
    7c72:	e6e7      	b.n	7a44 <__aeabi_dadd+0x1b8>
    7c74:	1c3c      	adds	r4, r7, #0
    7c76:	432c      	orrs	r4, r5
    7c78:	d058      	beq.n	7d2c <__aeabi_dadd+0x4a0>
    7c7a:	43c0      	mvns	r0, r0
    7c7c:	2800      	cmp	r0, #0
    7c7e:	d151      	bne.n	7d24 <__aeabi_dadd+0x498>
    7c80:	4660      	mov	r0, ip
    7c82:	1b45      	subs	r5, r0, r5
    7c84:	45ac      	cmp	ip, r5
    7c86:	4180      	sbcs	r0, r0
    7c88:	1bcf      	subs	r7, r1, r7
    7c8a:	4240      	negs	r0, r0
    7c8c:	1a3f      	subs	r7, r7, r0
    7c8e:	1c14      	adds	r4, r2, #0
    7c90:	4698      	mov	r8, r3
    7c92:	e67f      	b.n	7994 <__aeabi_dadd+0x108>
    7c94:	4a8f      	ldr	r2, [pc, #572]	; (7ed4 <__aeabi_dadd+0x648>)
    7c96:	4294      	cmp	r4, r2
    7c98:	d000      	beq.n	7c9c <__aeabi_dadd+0x410>
    7c9a:	e6ca      	b.n	7a32 <__aeabi_dadd+0x1a6>
    7c9c:	e61e      	b.n	78dc <__aeabi_dadd+0x50>
    7c9e:	2600      	movs	r6, #0
    7ca0:	e77d      	b.n	7b9e <__aeabi_dadd+0x312>
    7ca2:	2300      	movs	r3, #0
    7ca4:	e78c      	b.n	7bc0 <__aeabi_dadd+0x334>
    7ca6:	1c3b      	adds	r3, r7, #0
    7ca8:	432b      	orrs	r3, r5
    7caa:	2c00      	cmp	r4, #0
    7cac:	d000      	beq.n	7cb0 <__aeabi_dadd+0x424>
    7cae:	e0bd      	b.n	7e2c <__aeabi_dadd+0x5a0>
    7cb0:	2b00      	cmp	r3, #0
    7cb2:	d100      	bne.n	7cb6 <__aeabi_dadd+0x42a>
    7cb4:	e0f5      	b.n	7ea2 <__aeabi_dadd+0x616>
    7cb6:	4663      	mov	r3, ip
    7cb8:	430b      	orrs	r3, r1
    7cba:	d100      	bne.n	7cbe <__aeabi_dadd+0x432>
    7cbc:	e60e      	b.n	78dc <__aeabi_dadd+0x50>
    7cbe:	4663      	mov	r3, ip
    7cc0:	195b      	adds	r3, r3, r5
    7cc2:	42ab      	cmp	r3, r5
    7cc4:	4180      	sbcs	r0, r0
    7cc6:	19ca      	adds	r2, r1, r7
    7cc8:	4240      	negs	r0, r0
    7cca:	1817      	adds	r7, r2, r0
    7ccc:	023a      	lsls	r2, r7, #8
    7cce:	d400      	bmi.n	7cd2 <__aeabi_dadd+0x446>
    7cd0:	e0fc      	b.n	7ecc <__aeabi_dadd+0x640>
    7cd2:	4a81      	ldr	r2, [pc, #516]	; (7ed8 <__aeabi_dadd+0x64c>)
    7cd4:	1c1d      	adds	r5, r3, #0
    7cd6:	4017      	ands	r7, r2
    7cd8:	3401      	adds	r4, #1
    7cda:	e5ff      	b.n	78dc <__aeabi_dadd+0x50>
    7cdc:	1c3a      	adds	r2, r7, #0
    7cde:	432a      	orrs	r2, r5
    7ce0:	2c00      	cmp	r4, #0
    7ce2:	d151      	bne.n	7d88 <__aeabi_dadd+0x4fc>
    7ce4:	2a00      	cmp	r2, #0
    7ce6:	d000      	beq.n	7cea <__aeabi_dadd+0x45e>
    7ce8:	e085      	b.n	7df6 <__aeabi_dadd+0x56a>
    7cea:	4662      	mov	r2, ip
    7cec:	430a      	orrs	r2, r1
    7cee:	d003      	beq.n	7cf8 <__aeabi_dadd+0x46c>
    7cf0:	1c0f      	adds	r7, r1, #0
    7cf2:	4665      	mov	r5, ip
    7cf4:	4698      	mov	r8, r3
    7cf6:	e5f1      	b.n	78dc <__aeabi_dadd+0x50>
    7cf8:	2600      	movs	r6, #0
    7cfa:	2700      	movs	r7, #0
    7cfc:	2500      	movs	r5, #0
    7cfe:	e67f      	b.n	7a00 <__aeabi_dadd+0x174>
    7d00:	1c18      	adds	r0, r3, #0
    7d02:	1c0a      	adds	r2, r1, #0
    7d04:	3820      	subs	r0, #32
    7d06:	40c2      	lsrs	r2, r0
    7d08:	2b20      	cmp	r3, #32
    7d0a:	d100      	bne.n	7d0e <__aeabi_dadd+0x482>
    7d0c:	e0a7      	b.n	7e5e <__aeabi_dadd+0x5d2>
    7d0e:	2040      	movs	r0, #64	; 0x40
    7d10:	1ac0      	subs	r0, r0, r3
    7d12:	4081      	lsls	r1, r0
    7d14:	1c08      	adds	r0, r1, #0
    7d16:	4663      	mov	r3, ip
    7d18:	4318      	orrs	r0, r3
    7d1a:	1e41      	subs	r1, r0, #1
    7d1c:	4188      	sbcs	r0, r1
    7d1e:	4310      	orrs	r0, r2
    7d20:	2200      	movs	r2, #0
    7d22:	e68f      	b.n	7a44 <__aeabi_dadd+0x1b8>
    7d24:	4c6b      	ldr	r4, [pc, #428]	; (7ed4 <__aeabi_dadd+0x648>)
    7d26:	42a2      	cmp	r2, r4
    7d28:	d000      	beq.n	7d2c <__aeabi_dadd+0x4a0>
    7d2a:	e75a      	b.n	7be2 <__aeabi_dadd+0x356>
    7d2c:	1c0f      	adds	r7, r1, #0
    7d2e:	4665      	mov	r5, ip
    7d30:	1c14      	adds	r4, r2, #0
    7d32:	4698      	mov	r8, r3
    7d34:	e5d2      	b.n	78dc <__aeabi_dadd+0x50>
    7d36:	2c00      	cmp	r4, #0
    7d38:	d13a      	bne.n	7db0 <__aeabi_dadd+0x524>
    7d3a:	1c38      	adds	r0, r7, #0
    7d3c:	4328      	orrs	r0, r5
    7d3e:	d071      	beq.n	7e24 <__aeabi_dadd+0x598>
    7d40:	43db      	mvns	r3, r3
    7d42:	2b00      	cmp	r3, #0
    7d44:	d018      	beq.n	7d78 <__aeabi_dadd+0x4ec>
    7d46:	4863      	ldr	r0, [pc, #396]	; (7ed4 <__aeabi_dadd+0x648>)
    7d48:	4282      	cmp	r2, r0
    7d4a:	d06b      	beq.n	7e24 <__aeabi_dadd+0x598>
    7d4c:	2b38      	cmp	r3, #56	; 0x38
    7d4e:	dd00      	ble.n	7d52 <__aeabi_dadd+0x4c6>
    7d50:	e09d      	b.n	7e8e <__aeabi_dadd+0x602>
    7d52:	2b1f      	cmp	r3, #31
    7d54:	dd00      	ble.n	7d58 <__aeabi_dadd+0x4cc>
    7d56:	e0a7      	b.n	7ea8 <__aeabi_dadd+0x61c>
    7d58:	2020      	movs	r0, #32
    7d5a:	1c3c      	adds	r4, r7, #0
    7d5c:	1ac0      	subs	r0, r0, r3
    7d5e:	4084      	lsls	r4, r0
    7d60:	46a1      	mov	r9, r4
    7d62:	1c2c      	adds	r4, r5, #0
    7d64:	4682      	mov	sl, r0
    7d66:	40dc      	lsrs	r4, r3
    7d68:	4648      	mov	r0, r9
    7d6a:	4304      	orrs	r4, r0
    7d6c:	4650      	mov	r0, sl
    7d6e:	4085      	lsls	r5, r0
    7d70:	1e68      	subs	r0, r5, #1
    7d72:	4185      	sbcs	r5, r0
    7d74:	40df      	lsrs	r7, r3
    7d76:	4325      	orrs	r5, r4
    7d78:	4465      	add	r5, ip
    7d7a:	4565      	cmp	r5, ip
    7d7c:	419b      	sbcs	r3, r3
    7d7e:	187f      	adds	r7, r7, r1
    7d80:	425b      	negs	r3, r3
    7d82:	18ff      	adds	r7, r7, r3
    7d84:	1c14      	adds	r4, r2, #0
    7d86:	e664      	b.n	7a52 <__aeabi_dadd+0x1c6>
    7d88:	2a00      	cmp	r2, #0
    7d8a:	d119      	bne.n	7dc0 <__aeabi_dadd+0x534>
    7d8c:	4662      	mov	r2, ip
    7d8e:	430a      	orrs	r2, r1
    7d90:	d077      	beq.n	7e82 <__aeabi_dadd+0x5f6>
    7d92:	1c0f      	adds	r7, r1, #0
    7d94:	4665      	mov	r5, ip
    7d96:	4698      	mov	r8, r3
    7d98:	4c4e      	ldr	r4, [pc, #312]	; (7ed4 <__aeabi_dadd+0x648>)
    7d9a:	e59f      	b.n	78dc <__aeabi_dadd+0x50>
    7d9c:	433d      	orrs	r5, r7
    7d9e:	1e6f      	subs	r7, r5, #1
    7da0:	41bd      	sbcs	r5, r7
    7da2:	2700      	movs	r7, #0
    7da4:	b2ed      	uxtb	r5, r5
    7da6:	e732      	b.n	7c0e <__aeabi_dadd+0x382>
    7da8:	1c04      	adds	r4, r0, #0
    7daa:	2700      	movs	r7, #0
    7dac:	2500      	movs	r5, #0
    7dae:	e627      	b.n	7a00 <__aeabi_dadd+0x174>
    7db0:	4848      	ldr	r0, [pc, #288]	; (7ed4 <__aeabi_dadd+0x648>)
    7db2:	4282      	cmp	r2, r0
    7db4:	d036      	beq.n	7e24 <__aeabi_dadd+0x598>
    7db6:	2080      	movs	r0, #128	; 0x80
    7db8:	0400      	lsls	r0, r0, #16
    7dba:	425b      	negs	r3, r3
    7dbc:	4307      	orrs	r7, r0
    7dbe:	e7c5      	b.n	7d4c <__aeabi_dadd+0x4c0>
    7dc0:	4662      	mov	r2, ip
    7dc2:	430a      	orrs	r2, r1
    7dc4:	d049      	beq.n	7e5a <__aeabi_dadd+0x5ce>
    7dc6:	2480      	movs	r4, #128	; 0x80
    7dc8:	08ed      	lsrs	r5, r5, #3
    7dca:	0778      	lsls	r0, r7, #29
    7dcc:	08fa      	lsrs	r2, r7, #3
    7dce:	0324      	lsls	r4, r4, #12
    7dd0:	4328      	orrs	r0, r5
    7dd2:	4222      	tst	r2, r4
    7dd4:	d009      	beq.n	7dea <__aeabi_dadd+0x55e>
    7dd6:	08ce      	lsrs	r6, r1, #3
    7dd8:	4226      	tst	r6, r4
    7dda:	d106      	bne.n	7dea <__aeabi_dadd+0x55e>
    7ddc:	4662      	mov	r2, ip
    7dde:	074f      	lsls	r7, r1, #29
    7de0:	1c38      	adds	r0, r7, #0
    7de2:	08d2      	lsrs	r2, r2, #3
    7de4:	4310      	orrs	r0, r2
    7de6:	4698      	mov	r8, r3
    7de8:	1c32      	adds	r2, r6, #0
    7dea:	00d2      	lsls	r2, r2, #3
    7dec:	0f47      	lsrs	r7, r0, #29
    7dee:	4317      	orrs	r7, r2
    7df0:	00c5      	lsls	r5, r0, #3
    7df2:	4c38      	ldr	r4, [pc, #224]	; (7ed4 <__aeabi_dadd+0x648>)
    7df4:	e572      	b.n	78dc <__aeabi_dadd+0x50>
    7df6:	4662      	mov	r2, ip
    7df8:	430a      	orrs	r2, r1
    7dfa:	d100      	bne.n	7dfe <__aeabi_dadd+0x572>
    7dfc:	e56e      	b.n	78dc <__aeabi_dadd+0x50>
    7dfe:	4662      	mov	r2, ip
    7e00:	1aae      	subs	r6, r5, r2
    7e02:	42b5      	cmp	r5, r6
    7e04:	4192      	sbcs	r2, r2
    7e06:	1a78      	subs	r0, r7, r1
    7e08:	4252      	negs	r2, r2
    7e0a:	1a82      	subs	r2, r0, r2
    7e0c:	0210      	lsls	r0, r2, #8
    7e0e:	d400      	bmi.n	7e12 <__aeabi_dadd+0x586>
    7e10:	e655      	b.n	7abe <__aeabi_dadd+0x232>
    7e12:	4662      	mov	r2, ip
    7e14:	1b55      	subs	r5, r2, r5
    7e16:	45ac      	cmp	ip, r5
    7e18:	4180      	sbcs	r0, r0
    7e1a:	1bca      	subs	r2, r1, r7
    7e1c:	4240      	negs	r0, r0
    7e1e:	1a17      	subs	r7, r2, r0
    7e20:	4698      	mov	r8, r3
    7e22:	e55b      	b.n	78dc <__aeabi_dadd+0x50>
    7e24:	1c0f      	adds	r7, r1, #0
    7e26:	4665      	mov	r5, ip
    7e28:	1c14      	adds	r4, r2, #0
    7e2a:	e557      	b.n	78dc <__aeabi_dadd+0x50>
    7e2c:	2b00      	cmp	r3, #0
    7e2e:	d034      	beq.n	7e9a <__aeabi_dadd+0x60e>
    7e30:	4663      	mov	r3, ip
    7e32:	430b      	orrs	r3, r1
    7e34:	d011      	beq.n	7e5a <__aeabi_dadd+0x5ce>
    7e36:	2480      	movs	r4, #128	; 0x80
    7e38:	08ed      	lsrs	r5, r5, #3
    7e3a:	0778      	lsls	r0, r7, #29
    7e3c:	08fa      	lsrs	r2, r7, #3
    7e3e:	0324      	lsls	r4, r4, #12
    7e40:	4328      	orrs	r0, r5
    7e42:	4222      	tst	r2, r4
    7e44:	d0d1      	beq.n	7dea <__aeabi_dadd+0x55e>
    7e46:	08cb      	lsrs	r3, r1, #3
    7e48:	4223      	tst	r3, r4
    7e4a:	d1ce      	bne.n	7dea <__aeabi_dadd+0x55e>
    7e4c:	4662      	mov	r2, ip
    7e4e:	074f      	lsls	r7, r1, #29
    7e50:	1c38      	adds	r0, r7, #0
    7e52:	08d2      	lsrs	r2, r2, #3
    7e54:	4310      	orrs	r0, r2
    7e56:	1c1a      	adds	r2, r3, #0
    7e58:	e7c7      	b.n	7dea <__aeabi_dadd+0x55e>
    7e5a:	4c1e      	ldr	r4, [pc, #120]	; (7ed4 <__aeabi_dadd+0x648>)
    7e5c:	e53e      	b.n	78dc <__aeabi_dadd+0x50>
    7e5e:	2000      	movs	r0, #0
    7e60:	e759      	b.n	7d16 <__aeabi_dadd+0x48a>
    7e62:	1c04      	adds	r4, r0, #0
    7e64:	1c3e      	adds	r6, r7, #0
    7e66:	3c20      	subs	r4, #32
    7e68:	40e6      	lsrs	r6, r4
    7e6a:	1c34      	adds	r4, r6, #0
    7e6c:	2820      	cmp	r0, #32
    7e6e:	d02b      	beq.n	7ec8 <__aeabi_dadd+0x63c>
    7e70:	2640      	movs	r6, #64	; 0x40
    7e72:	1a30      	subs	r0, r6, r0
    7e74:	4087      	lsls	r7, r0
    7e76:	433d      	orrs	r5, r7
    7e78:	1e6f      	subs	r7, r5, #1
    7e7a:	41bd      	sbcs	r5, r7
    7e7c:	2700      	movs	r7, #0
    7e7e:	4325      	orrs	r5, r4
    7e80:	e6c5      	b.n	7c0e <__aeabi_dadd+0x382>
    7e82:	2780      	movs	r7, #128	; 0x80
    7e84:	2600      	movs	r6, #0
    7e86:	03ff      	lsls	r7, r7, #15
    7e88:	4c12      	ldr	r4, [pc, #72]	; (7ed4 <__aeabi_dadd+0x648>)
    7e8a:	2500      	movs	r5, #0
    7e8c:	e5b8      	b.n	7a00 <__aeabi_dadd+0x174>
    7e8e:	433d      	orrs	r5, r7
    7e90:	1e6f      	subs	r7, r5, #1
    7e92:	41bd      	sbcs	r5, r7
    7e94:	2700      	movs	r7, #0
    7e96:	b2ed      	uxtb	r5, r5
    7e98:	e76e      	b.n	7d78 <__aeabi_dadd+0x4ec>
    7e9a:	1c0f      	adds	r7, r1, #0
    7e9c:	4665      	mov	r5, ip
    7e9e:	4c0d      	ldr	r4, [pc, #52]	; (7ed4 <__aeabi_dadd+0x648>)
    7ea0:	e51c      	b.n	78dc <__aeabi_dadd+0x50>
    7ea2:	1c0f      	adds	r7, r1, #0
    7ea4:	4665      	mov	r5, ip
    7ea6:	e519      	b.n	78dc <__aeabi_dadd+0x50>
    7ea8:	1c1c      	adds	r4, r3, #0
    7eaa:	1c38      	adds	r0, r7, #0
    7eac:	3c20      	subs	r4, #32
    7eae:	40e0      	lsrs	r0, r4
    7eb0:	1c04      	adds	r4, r0, #0
    7eb2:	2b20      	cmp	r3, #32
    7eb4:	d00c      	beq.n	7ed0 <__aeabi_dadd+0x644>
    7eb6:	2040      	movs	r0, #64	; 0x40
    7eb8:	1ac3      	subs	r3, r0, r3
    7eba:	409f      	lsls	r7, r3
    7ebc:	433d      	orrs	r5, r7
    7ebe:	1e6f      	subs	r7, r5, #1
    7ec0:	41bd      	sbcs	r5, r7
    7ec2:	2700      	movs	r7, #0
    7ec4:	4325      	orrs	r5, r4
    7ec6:	e757      	b.n	7d78 <__aeabi_dadd+0x4ec>
    7ec8:	2700      	movs	r7, #0
    7eca:	e7d4      	b.n	7e76 <__aeabi_dadd+0x5ea>
    7ecc:	1c1d      	adds	r5, r3, #0
    7ece:	e5fc      	b.n	7aca <__aeabi_dadd+0x23e>
    7ed0:	2700      	movs	r7, #0
    7ed2:	e7f3      	b.n	7ebc <__aeabi_dadd+0x630>
    7ed4:	000007ff 	.word	0x000007ff
    7ed8:	ff7fffff 	.word	0xff7fffff

00007edc <__aeabi_ddiv>:
    7edc:	b5f0      	push	{r4, r5, r6, r7, lr}
    7ede:	465f      	mov	r7, fp
    7ee0:	4656      	mov	r6, sl
    7ee2:	464d      	mov	r5, r9
    7ee4:	4644      	mov	r4, r8
    7ee6:	b4f0      	push	{r4, r5, r6, r7}
    7ee8:	030f      	lsls	r7, r1, #12
    7eea:	b087      	sub	sp, #28
    7eec:	4698      	mov	r8, r3
    7eee:	004d      	lsls	r5, r1, #1
    7ef0:	0b3b      	lsrs	r3, r7, #12
    7ef2:	0fcc      	lsrs	r4, r1, #31
    7ef4:	1c06      	adds	r6, r0, #0
    7ef6:	4692      	mov	sl, r2
    7ef8:	4681      	mov	r9, r0
    7efa:	469b      	mov	fp, r3
    7efc:	0d6d      	lsrs	r5, r5, #21
    7efe:	9401      	str	r4, [sp, #4]
    7f00:	d06b      	beq.n	7fda <__aeabi_ddiv+0xfe>
    7f02:	4b66      	ldr	r3, [pc, #408]	; (809c <__aeabi_ddiv+0x1c0>)
    7f04:	429d      	cmp	r5, r3
    7f06:	d035      	beq.n	7f74 <__aeabi_ddiv+0x98>
    7f08:	2780      	movs	r7, #128	; 0x80
    7f0a:	465b      	mov	r3, fp
    7f0c:	037f      	lsls	r7, r7, #13
    7f0e:	431f      	orrs	r7, r3
    7f10:	00f3      	lsls	r3, r6, #3
    7f12:	4699      	mov	r9, r3
    7f14:	4b62      	ldr	r3, [pc, #392]	; (80a0 <__aeabi_ddiv+0x1c4>)
    7f16:	00ff      	lsls	r7, r7, #3
    7f18:	0f40      	lsrs	r0, r0, #29
    7f1a:	469c      	mov	ip, r3
    7f1c:	4307      	orrs	r7, r0
    7f1e:	2300      	movs	r3, #0
    7f20:	46bb      	mov	fp, r7
    7f22:	2600      	movs	r6, #0
    7f24:	4465      	add	r5, ip
    7f26:	9300      	str	r3, [sp, #0]
    7f28:	4642      	mov	r2, r8
    7f2a:	0317      	lsls	r7, r2, #12
    7f2c:	0050      	lsls	r0, r2, #1
    7f2e:	0fd2      	lsrs	r2, r2, #31
    7f30:	4653      	mov	r3, sl
    7f32:	0b3f      	lsrs	r7, r7, #12
    7f34:	0d40      	lsrs	r0, r0, #21
    7f36:	4690      	mov	r8, r2
    7f38:	d100      	bne.n	7f3c <__aeabi_ddiv+0x60>
    7f3a:	e072      	b.n	8022 <__aeabi_ddiv+0x146>
    7f3c:	4a57      	ldr	r2, [pc, #348]	; (809c <__aeabi_ddiv+0x1c0>)
    7f3e:	4290      	cmp	r0, r2
    7f40:	d067      	beq.n	8012 <__aeabi_ddiv+0x136>
    7f42:	2380      	movs	r3, #128	; 0x80
    7f44:	035b      	lsls	r3, r3, #13
    7f46:	431f      	orrs	r7, r3
    7f48:	4653      	mov	r3, sl
    7f4a:	4a55      	ldr	r2, [pc, #340]	; (80a0 <__aeabi_ddiv+0x1c4>)
    7f4c:	0f5b      	lsrs	r3, r3, #29
    7f4e:	00ff      	lsls	r7, r7, #3
    7f50:	431f      	orrs	r7, r3
    7f52:	4694      	mov	ip, r2
    7f54:	4653      	mov	r3, sl
    7f56:	2100      	movs	r1, #0
    7f58:	00db      	lsls	r3, r3, #3
    7f5a:	4460      	add	r0, ip
    7f5c:	4642      	mov	r2, r8
    7f5e:	4062      	eors	r2, r4
    7f60:	4692      	mov	sl, r2
    7f62:	1a2d      	subs	r5, r5, r0
    7f64:	430e      	orrs	r6, r1
    7f66:	2e0f      	cmp	r6, #15
    7f68:	d900      	bls.n	7f6c <__aeabi_ddiv+0x90>
    7f6a:	e0a1      	b.n	80b0 <__aeabi_ddiv+0x1d4>
    7f6c:	484d      	ldr	r0, [pc, #308]	; (80a4 <__aeabi_ddiv+0x1c8>)
    7f6e:	00b6      	lsls	r6, r6, #2
    7f70:	5980      	ldr	r0, [r0, r6]
    7f72:	4687      	mov	pc, r0
    7f74:	465b      	mov	r3, fp
    7f76:	431e      	orrs	r6, r3
    7f78:	d000      	beq.n	7f7c <__aeabi_ddiv+0xa0>
    7f7a:	e076      	b.n	806a <__aeabi_ddiv+0x18e>
    7f7c:	2300      	movs	r3, #0
    7f7e:	469b      	mov	fp, r3
    7f80:	4699      	mov	r9, r3
    7f82:	3302      	adds	r3, #2
    7f84:	2608      	movs	r6, #8
    7f86:	9300      	str	r3, [sp, #0]
    7f88:	e7ce      	b.n	7f28 <__aeabi_ddiv+0x4c>
    7f8a:	4699      	mov	r9, r3
    7f8c:	4643      	mov	r3, r8
    7f8e:	46bb      	mov	fp, r7
    7f90:	9301      	str	r3, [sp, #4]
    7f92:	9100      	str	r1, [sp, #0]
    7f94:	9b00      	ldr	r3, [sp, #0]
    7f96:	2b02      	cmp	r3, #2
    7f98:	d16b      	bne.n	8072 <__aeabi_ddiv+0x196>
    7f9a:	9b01      	ldr	r3, [sp, #4]
    7f9c:	469a      	mov	sl, r3
    7f9e:	2100      	movs	r1, #0
    7fa0:	4653      	mov	r3, sl
    7fa2:	2201      	movs	r2, #1
    7fa4:	2700      	movs	r7, #0
    7fa6:	4689      	mov	r9, r1
    7fa8:	401a      	ands	r2, r3
    7faa:	4b3c      	ldr	r3, [pc, #240]	; (809c <__aeabi_ddiv+0x1c0>)
    7fac:	2100      	movs	r1, #0
    7fae:	033f      	lsls	r7, r7, #12
    7fb0:	0d0c      	lsrs	r4, r1, #20
    7fb2:	0524      	lsls	r4, r4, #20
    7fb4:	0b3f      	lsrs	r7, r7, #12
    7fb6:	4327      	orrs	r7, r4
    7fb8:	4c3b      	ldr	r4, [pc, #236]	; (80a8 <__aeabi_ddiv+0x1cc>)
    7fba:	051b      	lsls	r3, r3, #20
    7fbc:	4027      	ands	r7, r4
    7fbe:	431f      	orrs	r7, r3
    7fc0:	007f      	lsls	r7, r7, #1
    7fc2:	07d2      	lsls	r2, r2, #31
    7fc4:	087f      	lsrs	r7, r7, #1
    7fc6:	4317      	orrs	r7, r2
    7fc8:	4648      	mov	r0, r9
    7fca:	1c39      	adds	r1, r7, #0
    7fcc:	b007      	add	sp, #28
    7fce:	bc3c      	pop	{r2, r3, r4, r5}
    7fd0:	4690      	mov	r8, r2
    7fd2:	4699      	mov	r9, r3
    7fd4:	46a2      	mov	sl, r4
    7fd6:	46ab      	mov	fp, r5
    7fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7fda:	4303      	orrs	r3, r0
    7fdc:	d03e      	beq.n	805c <__aeabi_ddiv+0x180>
    7fde:	465b      	mov	r3, fp
    7fe0:	2b00      	cmp	r3, #0
    7fe2:	d100      	bne.n	7fe6 <__aeabi_ddiv+0x10a>
    7fe4:	e19c      	b.n	8320 <__aeabi_ddiv+0x444>
    7fe6:	4658      	mov	r0, fp
    7fe8:	f001 fb52 	bl	9690 <__clzsi2>
    7fec:	2328      	movs	r3, #40	; 0x28
    7fee:	1c31      	adds	r1, r6, #0
    7ff0:	1a1b      	subs	r3, r3, r0
    7ff2:	1c02      	adds	r2, r0, #0
    7ff4:	465f      	mov	r7, fp
    7ff6:	40d9      	lsrs	r1, r3
    7ff8:	3a08      	subs	r2, #8
    7ffa:	4097      	lsls	r7, r2
    7ffc:	1c0b      	adds	r3, r1, #0
    7ffe:	4096      	lsls	r6, r2
    8000:	433b      	orrs	r3, r7
    8002:	469b      	mov	fp, r3
    8004:	46b1      	mov	r9, r6
    8006:	2300      	movs	r3, #0
    8008:	4d28      	ldr	r5, [pc, #160]	; (80ac <__aeabi_ddiv+0x1d0>)
    800a:	2600      	movs	r6, #0
    800c:	1a2d      	subs	r5, r5, r0
    800e:	9300      	str	r3, [sp, #0]
    8010:	e78a      	b.n	7f28 <__aeabi_ddiv+0x4c>
    8012:	4652      	mov	r2, sl
    8014:	2103      	movs	r1, #3
    8016:	433a      	orrs	r2, r7
    8018:	d1a0      	bne.n	7f5c <__aeabi_ddiv+0x80>
    801a:	2700      	movs	r7, #0
    801c:	2300      	movs	r3, #0
    801e:	2102      	movs	r1, #2
    8020:	e79c      	b.n	7f5c <__aeabi_ddiv+0x80>
    8022:	4652      	mov	r2, sl
    8024:	433a      	orrs	r2, r7
    8026:	d015      	beq.n	8054 <__aeabi_ddiv+0x178>
    8028:	2f00      	cmp	r7, #0
    802a:	d100      	bne.n	802e <__aeabi_ddiv+0x152>
    802c:	e185      	b.n	833a <__aeabi_ddiv+0x45e>
    802e:	1c38      	adds	r0, r7, #0
    8030:	f001 fb2e 	bl	9690 <__clzsi2>
    8034:	1c02      	adds	r2, r0, #0
    8036:	2128      	movs	r1, #40	; 0x28
    8038:	4650      	mov	r0, sl
    803a:	1a89      	subs	r1, r1, r2
    803c:	1c13      	adds	r3, r2, #0
    803e:	40c8      	lsrs	r0, r1
    8040:	4651      	mov	r1, sl
    8042:	3b08      	subs	r3, #8
    8044:	4099      	lsls	r1, r3
    8046:	409f      	lsls	r7, r3
    8048:	1c0b      	adds	r3, r1, #0
    804a:	4307      	orrs	r7, r0
    804c:	4817      	ldr	r0, [pc, #92]	; (80ac <__aeabi_ddiv+0x1d0>)
    804e:	2100      	movs	r1, #0
    8050:	1a80      	subs	r0, r0, r2
    8052:	e783      	b.n	7f5c <__aeabi_ddiv+0x80>
    8054:	2700      	movs	r7, #0
    8056:	2300      	movs	r3, #0
    8058:	2101      	movs	r1, #1
    805a:	e77f      	b.n	7f5c <__aeabi_ddiv+0x80>
    805c:	2300      	movs	r3, #0
    805e:	469b      	mov	fp, r3
    8060:	4699      	mov	r9, r3
    8062:	3301      	adds	r3, #1
    8064:	2604      	movs	r6, #4
    8066:	9300      	str	r3, [sp, #0]
    8068:	e75e      	b.n	7f28 <__aeabi_ddiv+0x4c>
    806a:	2303      	movs	r3, #3
    806c:	260c      	movs	r6, #12
    806e:	9300      	str	r3, [sp, #0]
    8070:	e75a      	b.n	7f28 <__aeabi_ddiv+0x4c>
    8072:	2b03      	cmp	r3, #3
    8074:	d100      	bne.n	8078 <__aeabi_ddiv+0x19c>
    8076:	e23c      	b.n	84f2 <__aeabi_ddiv+0x616>
    8078:	2b01      	cmp	r3, #1
    807a:	d000      	beq.n	807e <__aeabi_ddiv+0x1a2>
    807c:	e1bf      	b.n	83fe <__aeabi_ddiv+0x522>
    807e:	1c1a      	adds	r2, r3, #0
    8080:	9b01      	ldr	r3, [sp, #4]
    8082:	401a      	ands	r2, r3
    8084:	2100      	movs	r1, #0
    8086:	2300      	movs	r3, #0
    8088:	2700      	movs	r7, #0
    808a:	4689      	mov	r9, r1
    808c:	e78e      	b.n	7fac <__aeabi_ddiv+0xd0>
    808e:	2300      	movs	r3, #0
    8090:	2780      	movs	r7, #128	; 0x80
    8092:	4699      	mov	r9, r3
    8094:	2200      	movs	r2, #0
    8096:	033f      	lsls	r7, r7, #12
    8098:	4b00      	ldr	r3, [pc, #0]	; (809c <__aeabi_ddiv+0x1c0>)
    809a:	e787      	b.n	7fac <__aeabi_ddiv+0xd0>
    809c:	000007ff 	.word	0x000007ff
    80a0:	fffffc01 	.word	0xfffffc01
    80a4:	0000f968 	.word	0x0000f968
    80a8:	800fffff 	.word	0x800fffff
    80ac:	fffffc0d 	.word	0xfffffc0d
    80b0:	45bb      	cmp	fp, r7
    80b2:	d900      	bls.n	80b6 <__aeabi_ddiv+0x1da>
    80b4:	e151      	b.n	835a <__aeabi_ddiv+0x47e>
    80b6:	d100      	bne.n	80ba <__aeabi_ddiv+0x1de>
    80b8:	e14c      	b.n	8354 <__aeabi_ddiv+0x478>
    80ba:	464a      	mov	r2, r9
    80bc:	9203      	str	r2, [sp, #12]
    80be:	2200      	movs	r2, #0
    80c0:	465c      	mov	r4, fp
    80c2:	4690      	mov	r8, r2
    80c4:	3d01      	subs	r5, #1
    80c6:	0e18      	lsrs	r0, r3, #24
    80c8:	023f      	lsls	r7, r7, #8
    80ca:	4338      	orrs	r0, r7
    80cc:	021b      	lsls	r3, r3, #8
    80ce:	9301      	str	r3, [sp, #4]
    80d0:	0c03      	lsrs	r3, r0, #16
    80d2:	4699      	mov	r9, r3
    80d4:	0403      	lsls	r3, r0, #16
    80d6:	0c1b      	lsrs	r3, r3, #16
    80d8:	4649      	mov	r1, r9
    80da:	1c06      	adds	r6, r0, #0
    80dc:	1c20      	adds	r0, r4, #0
    80de:	1c1f      	adds	r7, r3, #0
    80e0:	9300      	str	r3, [sp, #0]
    80e2:	f7fe fac3 	bl	666c <__aeabi_uidiv>
    80e6:	1c02      	adds	r2, r0, #0
    80e8:	437a      	muls	r2, r7
    80ea:	9002      	str	r0, [sp, #8]
    80ec:	4649      	mov	r1, r9
    80ee:	1c20      	adds	r0, r4, #0
    80f0:	1c17      	adds	r7, r2, #0
    80f2:	f7fe fb41 	bl	6778 <__aeabi_uidivmod>
    80f6:	9b03      	ldr	r3, [sp, #12]
    80f8:	0409      	lsls	r1, r1, #16
    80fa:	0c1b      	lsrs	r3, r3, #16
    80fc:	4319      	orrs	r1, r3
    80fe:	428f      	cmp	r7, r1
    8100:	d90c      	bls.n	811c <__aeabi_ddiv+0x240>
    8102:	9b02      	ldr	r3, [sp, #8]
    8104:	1989      	adds	r1, r1, r6
    8106:	3b01      	subs	r3, #1
    8108:	428e      	cmp	r6, r1
    810a:	d900      	bls.n	810e <__aeabi_ddiv+0x232>
    810c:	e152      	b.n	83b4 <__aeabi_ddiv+0x4d8>
    810e:	428f      	cmp	r7, r1
    8110:	d800      	bhi.n	8114 <__aeabi_ddiv+0x238>
    8112:	e14f      	b.n	83b4 <__aeabi_ddiv+0x4d8>
    8114:	9b02      	ldr	r3, [sp, #8]
    8116:	1989      	adds	r1, r1, r6
    8118:	3b02      	subs	r3, #2
    811a:	9302      	str	r3, [sp, #8]
    811c:	1bcc      	subs	r4, r1, r7
    811e:	1c20      	adds	r0, r4, #0
    8120:	4649      	mov	r1, r9
    8122:	f7fe faa3 	bl	666c <__aeabi_uidiv>
    8126:	9f00      	ldr	r7, [sp, #0]
    8128:	4683      	mov	fp, r0
    812a:	4347      	muls	r7, r0
    812c:	4649      	mov	r1, r9
    812e:	1c20      	adds	r0, r4, #0
    8130:	f7fe fb22 	bl	6778 <__aeabi_uidivmod>
    8134:	9a03      	ldr	r2, [sp, #12]
    8136:	040b      	lsls	r3, r1, #16
    8138:	0414      	lsls	r4, r2, #16
    813a:	0c24      	lsrs	r4, r4, #16
    813c:	4323      	orrs	r3, r4
    813e:	429f      	cmp	r7, r3
    8140:	d90d      	bls.n	815e <__aeabi_ddiv+0x282>
    8142:	465a      	mov	r2, fp
    8144:	199b      	adds	r3, r3, r6
    8146:	3a01      	subs	r2, #1
    8148:	429e      	cmp	r6, r3
    814a:	d900      	bls.n	814e <__aeabi_ddiv+0x272>
    814c:	e130      	b.n	83b0 <__aeabi_ddiv+0x4d4>
    814e:	429f      	cmp	r7, r3
    8150:	d800      	bhi.n	8154 <__aeabi_ddiv+0x278>
    8152:	e12d      	b.n	83b0 <__aeabi_ddiv+0x4d4>
    8154:	2202      	movs	r2, #2
    8156:	4252      	negs	r2, r2
    8158:	4694      	mov	ip, r2
    815a:	199b      	adds	r3, r3, r6
    815c:	44e3      	add	fp, ip
    815e:	9a02      	ldr	r2, [sp, #8]
    8160:	1bdb      	subs	r3, r3, r7
    8162:	0417      	lsls	r7, r2, #16
    8164:	465a      	mov	r2, fp
    8166:	433a      	orrs	r2, r7
    8168:	4693      	mov	fp, r2
    816a:	9c01      	ldr	r4, [sp, #4]
    816c:	0c17      	lsrs	r7, r2, #16
    816e:	0c22      	lsrs	r2, r4, #16
    8170:	1c10      	adds	r0, r2, #0
    8172:	9204      	str	r2, [sp, #16]
    8174:	465a      	mov	r2, fp
    8176:	0411      	lsls	r1, r2, #16
    8178:	0422      	lsls	r2, r4, #16
    817a:	0c12      	lsrs	r2, r2, #16
    817c:	1c14      	adds	r4, r2, #0
    817e:	0c09      	lsrs	r1, r1, #16
    8180:	437c      	muls	r4, r7
    8182:	9205      	str	r2, [sp, #20]
    8184:	434a      	muls	r2, r1
    8186:	4341      	muls	r1, r0
    8188:	4347      	muls	r7, r0
    818a:	1861      	adds	r1, r4, r1
    818c:	0c10      	lsrs	r0, r2, #16
    818e:	1809      	adds	r1, r1, r0
    8190:	428c      	cmp	r4, r1
    8192:	d903      	bls.n	819c <__aeabi_ddiv+0x2c0>
    8194:	2080      	movs	r0, #128	; 0x80
    8196:	0240      	lsls	r0, r0, #9
    8198:	4684      	mov	ip, r0
    819a:	4467      	add	r7, ip
    819c:	0c0c      	lsrs	r4, r1, #16
    819e:	0412      	lsls	r2, r2, #16
    81a0:	0408      	lsls	r0, r1, #16
    81a2:	0c12      	lsrs	r2, r2, #16
    81a4:	193c      	adds	r4, r7, r4
    81a6:	1881      	adds	r1, r0, r2
    81a8:	42a3      	cmp	r3, r4
    81aa:	d200      	bcs.n	81ae <__aeabi_ddiv+0x2d2>
    81ac:	e0e5      	b.n	837a <__aeabi_ddiv+0x49e>
    81ae:	d100      	bne.n	81b2 <__aeabi_ddiv+0x2d6>
    81b0:	e0df      	b.n	8372 <__aeabi_ddiv+0x496>
    81b2:	1b1f      	subs	r7, r3, r4
    81b4:	4643      	mov	r3, r8
    81b6:	1a5c      	subs	r4, r3, r1
    81b8:	45a0      	cmp	r8, r4
    81ba:	4192      	sbcs	r2, r2
    81bc:	4252      	negs	r2, r2
    81be:	1abf      	subs	r7, r7, r2
    81c0:	42b7      	cmp	r7, r6
    81c2:	d100      	bne.n	81c6 <__aeabi_ddiv+0x2ea>
    81c4:	e10e      	b.n	83e4 <__aeabi_ddiv+0x508>
    81c6:	1c38      	adds	r0, r7, #0
    81c8:	4649      	mov	r1, r9
    81ca:	f7fe fa4f 	bl	666c <__aeabi_uidiv>
    81ce:	9b00      	ldr	r3, [sp, #0]
    81d0:	9002      	str	r0, [sp, #8]
    81d2:	4343      	muls	r3, r0
    81d4:	4649      	mov	r1, r9
    81d6:	1c38      	adds	r0, r7, #0
    81d8:	4698      	mov	r8, r3
    81da:	f7fe facd 	bl	6778 <__aeabi_uidivmod>
    81de:	0c23      	lsrs	r3, r4, #16
    81e0:	040f      	lsls	r7, r1, #16
    81e2:	431f      	orrs	r7, r3
    81e4:	45b8      	cmp	r8, r7
    81e6:	d90c      	bls.n	8202 <__aeabi_ddiv+0x326>
    81e8:	9b02      	ldr	r3, [sp, #8]
    81ea:	19bf      	adds	r7, r7, r6
    81ec:	3b01      	subs	r3, #1
    81ee:	42be      	cmp	r6, r7
    81f0:	d900      	bls.n	81f4 <__aeabi_ddiv+0x318>
    81f2:	e0fb      	b.n	83ec <__aeabi_ddiv+0x510>
    81f4:	45b8      	cmp	r8, r7
    81f6:	d800      	bhi.n	81fa <__aeabi_ddiv+0x31e>
    81f8:	e0f8      	b.n	83ec <__aeabi_ddiv+0x510>
    81fa:	9b02      	ldr	r3, [sp, #8]
    81fc:	19bf      	adds	r7, r7, r6
    81fe:	3b02      	subs	r3, #2
    8200:	9302      	str	r3, [sp, #8]
    8202:	4643      	mov	r3, r8
    8204:	1aff      	subs	r7, r7, r3
    8206:	4649      	mov	r1, r9
    8208:	1c38      	adds	r0, r7, #0
    820a:	f7fe fa2f 	bl	666c <__aeabi_uidiv>
    820e:	9b00      	ldr	r3, [sp, #0]
    8210:	9003      	str	r0, [sp, #12]
    8212:	4343      	muls	r3, r0
    8214:	4649      	mov	r1, r9
    8216:	1c38      	adds	r0, r7, #0
    8218:	4698      	mov	r8, r3
    821a:	f7fe faad 	bl	6778 <__aeabi_uidivmod>
    821e:	0424      	lsls	r4, r4, #16
    8220:	0409      	lsls	r1, r1, #16
    8222:	0c24      	lsrs	r4, r4, #16
    8224:	4321      	orrs	r1, r4
    8226:	4588      	cmp	r8, r1
    8228:	d90c      	bls.n	8244 <__aeabi_ddiv+0x368>
    822a:	9b03      	ldr	r3, [sp, #12]
    822c:	1989      	adds	r1, r1, r6
    822e:	3b01      	subs	r3, #1
    8230:	428e      	cmp	r6, r1
    8232:	d900      	bls.n	8236 <__aeabi_ddiv+0x35a>
    8234:	e0dc      	b.n	83f0 <__aeabi_ddiv+0x514>
    8236:	4588      	cmp	r8, r1
    8238:	d800      	bhi.n	823c <__aeabi_ddiv+0x360>
    823a:	e0d9      	b.n	83f0 <__aeabi_ddiv+0x514>
    823c:	9b03      	ldr	r3, [sp, #12]
    823e:	1989      	adds	r1, r1, r6
    8240:	3b02      	subs	r3, #2
    8242:	9303      	str	r3, [sp, #12]
    8244:	4643      	mov	r3, r8
    8246:	1ac9      	subs	r1, r1, r3
    8248:	9b02      	ldr	r3, [sp, #8]
    824a:	9a03      	ldr	r2, [sp, #12]
    824c:	041b      	lsls	r3, r3, #16
    824e:	9c05      	ldr	r4, [sp, #20]
    8250:	431a      	orrs	r2, r3
    8252:	0c10      	lsrs	r0, r2, #16
    8254:	0413      	lsls	r3, r2, #16
    8256:	4691      	mov	r9, r2
    8258:	1c22      	adds	r2, r4, #0
    825a:	9f04      	ldr	r7, [sp, #16]
    825c:	0c1b      	lsrs	r3, r3, #16
    825e:	435a      	muls	r2, r3
    8260:	4344      	muls	r4, r0
    8262:	437b      	muls	r3, r7
    8264:	4378      	muls	r0, r7
    8266:	18e3      	adds	r3, r4, r3
    8268:	0c17      	lsrs	r7, r2, #16
    826a:	19db      	adds	r3, r3, r7
    826c:	429c      	cmp	r4, r3
    826e:	d903      	bls.n	8278 <__aeabi_ddiv+0x39c>
    8270:	2480      	movs	r4, #128	; 0x80
    8272:	0264      	lsls	r4, r4, #9
    8274:	46a4      	mov	ip, r4
    8276:	4460      	add	r0, ip
    8278:	0c1c      	lsrs	r4, r3, #16
    827a:	0412      	lsls	r2, r2, #16
    827c:	041b      	lsls	r3, r3, #16
    827e:	0c12      	lsrs	r2, r2, #16
    8280:	1900      	adds	r0, r0, r4
    8282:	189b      	adds	r3, r3, r2
    8284:	4281      	cmp	r1, r0
    8286:	d200      	bcs.n	828a <__aeabi_ddiv+0x3ae>
    8288:	e096      	b.n	83b8 <__aeabi_ddiv+0x4dc>
    828a:	d100      	bne.n	828e <__aeabi_ddiv+0x3b2>
    828c:	e0fc      	b.n	8488 <__aeabi_ddiv+0x5ac>
    828e:	464a      	mov	r2, r9
    8290:	2301      	movs	r3, #1
    8292:	431a      	orrs	r2, r3
    8294:	4691      	mov	r9, r2
    8296:	4b9b      	ldr	r3, [pc, #620]	; (8504 <__aeabi_ddiv+0x628>)
    8298:	18eb      	adds	r3, r5, r3
    829a:	2b00      	cmp	r3, #0
    829c:	dc00      	bgt.n	82a0 <__aeabi_ddiv+0x3c4>
    829e:	e099      	b.n	83d4 <__aeabi_ddiv+0x4f8>
    82a0:	464a      	mov	r2, r9
    82a2:	0752      	lsls	r2, r2, #29
    82a4:	d00a      	beq.n	82bc <__aeabi_ddiv+0x3e0>
    82a6:	220f      	movs	r2, #15
    82a8:	4649      	mov	r1, r9
    82aa:	400a      	ands	r2, r1
    82ac:	2a04      	cmp	r2, #4
    82ae:	d005      	beq.n	82bc <__aeabi_ddiv+0x3e0>
    82b0:	3104      	adds	r1, #4
    82b2:	4549      	cmp	r1, r9
    82b4:	4192      	sbcs	r2, r2
    82b6:	4689      	mov	r9, r1
    82b8:	4252      	negs	r2, r2
    82ba:	4493      	add	fp, r2
    82bc:	465a      	mov	r2, fp
    82be:	01d2      	lsls	r2, r2, #7
    82c0:	d506      	bpl.n	82d0 <__aeabi_ddiv+0x3f4>
    82c2:	465a      	mov	r2, fp
    82c4:	4b90      	ldr	r3, [pc, #576]	; (8508 <__aeabi_ddiv+0x62c>)
    82c6:	401a      	ands	r2, r3
    82c8:	2380      	movs	r3, #128	; 0x80
    82ca:	4693      	mov	fp, r2
    82cc:	00db      	lsls	r3, r3, #3
    82ce:	18eb      	adds	r3, r5, r3
    82d0:	4a8e      	ldr	r2, [pc, #568]	; (850c <__aeabi_ddiv+0x630>)
    82d2:	4293      	cmp	r3, r2
    82d4:	dd00      	ble.n	82d8 <__aeabi_ddiv+0x3fc>
    82d6:	e662      	b.n	7f9e <__aeabi_ddiv+0xc2>
    82d8:	464a      	mov	r2, r9
    82da:	4659      	mov	r1, fp
    82dc:	08d2      	lsrs	r2, r2, #3
    82de:	0749      	lsls	r1, r1, #29
    82e0:	4311      	orrs	r1, r2
    82e2:	465a      	mov	r2, fp
    82e4:	4689      	mov	r9, r1
    82e6:	0257      	lsls	r7, r2, #9
    82e8:	4651      	mov	r1, sl
    82ea:	2201      	movs	r2, #1
    82ec:	055b      	lsls	r3, r3, #21
    82ee:	0b3f      	lsrs	r7, r7, #12
    82f0:	0d5b      	lsrs	r3, r3, #21
    82f2:	400a      	ands	r2, r1
    82f4:	e65a      	b.n	7fac <__aeabi_ddiv+0xd0>
    82f6:	2080      	movs	r0, #128	; 0x80
    82f8:	465a      	mov	r2, fp
    82fa:	0300      	lsls	r0, r0, #12
    82fc:	4202      	tst	r2, r0
    82fe:	d008      	beq.n	8312 <__aeabi_ddiv+0x436>
    8300:	4207      	tst	r7, r0
    8302:	d106      	bne.n	8312 <__aeabi_ddiv+0x436>
    8304:	4307      	orrs	r7, r0
    8306:	033f      	lsls	r7, r7, #12
    8308:	4699      	mov	r9, r3
    830a:	0b3f      	lsrs	r7, r7, #12
    830c:	4642      	mov	r2, r8
    830e:	4b80      	ldr	r3, [pc, #512]	; (8510 <__aeabi_ddiv+0x634>)
    8310:	e64c      	b.n	7fac <__aeabi_ddiv+0xd0>
    8312:	465f      	mov	r7, fp
    8314:	4307      	orrs	r7, r0
    8316:	033f      	lsls	r7, r7, #12
    8318:	0b3f      	lsrs	r7, r7, #12
    831a:	1c22      	adds	r2, r4, #0
    831c:	4b7c      	ldr	r3, [pc, #496]	; (8510 <__aeabi_ddiv+0x634>)
    831e:	e645      	b.n	7fac <__aeabi_ddiv+0xd0>
    8320:	f001 f9b6 	bl	9690 <__clzsi2>
    8324:	1c03      	adds	r3, r0, #0
    8326:	3020      	adds	r0, #32
    8328:	2827      	cmp	r0, #39	; 0x27
    832a:	dc00      	bgt.n	832e <__aeabi_ddiv+0x452>
    832c:	e65e      	b.n	7fec <__aeabi_ddiv+0x110>
    832e:	3b08      	subs	r3, #8
    8330:	409e      	lsls	r6, r3
    8332:	2300      	movs	r3, #0
    8334:	46b3      	mov	fp, r6
    8336:	4699      	mov	r9, r3
    8338:	e665      	b.n	8006 <__aeabi_ddiv+0x12a>
    833a:	4650      	mov	r0, sl
    833c:	f001 f9a8 	bl	9690 <__clzsi2>
    8340:	1c02      	adds	r2, r0, #0
    8342:	3220      	adds	r2, #32
    8344:	2a27      	cmp	r2, #39	; 0x27
    8346:	dc00      	bgt.n	834a <__aeabi_ddiv+0x46e>
    8348:	e675      	b.n	8036 <__aeabi_ddiv+0x15a>
    834a:	4657      	mov	r7, sl
    834c:	3808      	subs	r0, #8
    834e:	4087      	lsls	r7, r0
    8350:	2300      	movs	r3, #0
    8352:	e67b      	b.n	804c <__aeabi_ddiv+0x170>
    8354:	4599      	cmp	r9, r3
    8356:	d200      	bcs.n	835a <__aeabi_ddiv+0x47e>
    8358:	e6af      	b.n	80ba <__aeabi_ddiv+0x1de>
    835a:	465a      	mov	r2, fp
    835c:	4659      	mov	r1, fp
    835e:	0854      	lsrs	r4, r2, #1
    8360:	464a      	mov	r2, r9
    8362:	07c8      	lsls	r0, r1, #31
    8364:	0852      	lsrs	r2, r2, #1
    8366:	4302      	orrs	r2, r0
    8368:	9203      	str	r2, [sp, #12]
    836a:	464a      	mov	r2, r9
    836c:	07d2      	lsls	r2, r2, #31
    836e:	4690      	mov	r8, r2
    8370:	e6a9      	b.n	80c6 <__aeabi_ddiv+0x1ea>
    8372:	2700      	movs	r7, #0
    8374:	4588      	cmp	r8, r1
    8376:	d300      	bcc.n	837a <__aeabi_ddiv+0x49e>
    8378:	e71c      	b.n	81b4 <__aeabi_ddiv+0x2d8>
    837a:	9f01      	ldr	r7, [sp, #4]
    837c:	465a      	mov	r2, fp
    837e:	46bc      	mov	ip, r7
    8380:	44e0      	add	r8, ip
    8382:	45b8      	cmp	r8, r7
    8384:	41bf      	sbcs	r7, r7
    8386:	427f      	negs	r7, r7
    8388:	19bf      	adds	r7, r7, r6
    838a:	18ff      	adds	r7, r7, r3
    838c:	3a01      	subs	r2, #1
    838e:	42be      	cmp	r6, r7
    8390:	d206      	bcs.n	83a0 <__aeabi_ddiv+0x4c4>
    8392:	42bc      	cmp	r4, r7
    8394:	d85f      	bhi.n	8456 <__aeabi_ddiv+0x57a>
    8396:	d100      	bne.n	839a <__aeabi_ddiv+0x4be>
    8398:	e09f      	b.n	84da <__aeabi_ddiv+0x5fe>
    839a:	1b3f      	subs	r7, r7, r4
    839c:	4693      	mov	fp, r2
    839e:	e709      	b.n	81b4 <__aeabi_ddiv+0x2d8>
    83a0:	42b7      	cmp	r7, r6
    83a2:	d1fa      	bne.n	839a <__aeabi_ddiv+0x4be>
    83a4:	9b01      	ldr	r3, [sp, #4]
    83a6:	4543      	cmp	r3, r8
    83a8:	d9f3      	bls.n	8392 <__aeabi_ddiv+0x4b6>
    83aa:	1b37      	subs	r7, r6, r4
    83ac:	4693      	mov	fp, r2
    83ae:	e701      	b.n	81b4 <__aeabi_ddiv+0x2d8>
    83b0:	4693      	mov	fp, r2
    83b2:	e6d4      	b.n	815e <__aeabi_ddiv+0x282>
    83b4:	9302      	str	r3, [sp, #8]
    83b6:	e6b1      	b.n	811c <__aeabi_ddiv+0x240>
    83b8:	464a      	mov	r2, r9
    83ba:	1989      	adds	r1, r1, r6
    83bc:	3a01      	subs	r2, #1
    83be:	428e      	cmp	r6, r1
    83c0:	d918      	bls.n	83f4 <__aeabi_ddiv+0x518>
    83c2:	4691      	mov	r9, r2
    83c4:	4281      	cmp	r1, r0
    83c6:	d000      	beq.n	83ca <__aeabi_ddiv+0x4ee>
    83c8:	e761      	b.n	828e <__aeabi_ddiv+0x3b2>
    83ca:	9a01      	ldr	r2, [sp, #4]
    83cc:	429a      	cmp	r2, r3
    83ce:	d000      	beq.n	83d2 <__aeabi_ddiv+0x4f6>
    83d0:	e75d      	b.n	828e <__aeabi_ddiv+0x3b2>
    83d2:	e760      	b.n	8296 <__aeabi_ddiv+0x3ba>
    83d4:	4f4f      	ldr	r7, [pc, #316]	; (8514 <__aeabi_ddiv+0x638>)
    83d6:	1b7f      	subs	r7, r7, r5
    83d8:	2f38      	cmp	r7, #56	; 0x38
    83da:	dd13      	ble.n	8404 <__aeabi_ddiv+0x528>
    83dc:	2201      	movs	r2, #1
    83de:	4653      	mov	r3, sl
    83e0:	401a      	ands	r2, r3
    83e2:	e64f      	b.n	8084 <__aeabi_ddiv+0x1a8>
    83e4:	2301      	movs	r3, #1
    83e6:	425b      	negs	r3, r3
    83e8:	4699      	mov	r9, r3
    83ea:	e754      	b.n	8296 <__aeabi_ddiv+0x3ba>
    83ec:	9302      	str	r3, [sp, #8]
    83ee:	e708      	b.n	8202 <__aeabi_ddiv+0x326>
    83f0:	9303      	str	r3, [sp, #12]
    83f2:	e727      	b.n	8244 <__aeabi_ddiv+0x368>
    83f4:	4288      	cmp	r0, r1
    83f6:	d83c      	bhi.n	8472 <__aeabi_ddiv+0x596>
    83f8:	d074      	beq.n	84e4 <__aeabi_ddiv+0x608>
    83fa:	4691      	mov	r9, r2
    83fc:	e747      	b.n	828e <__aeabi_ddiv+0x3b2>
    83fe:	9b01      	ldr	r3, [sp, #4]
    8400:	469a      	mov	sl, r3
    8402:	e748      	b.n	8296 <__aeabi_ddiv+0x3ba>
    8404:	2f1f      	cmp	r7, #31
    8406:	dc44      	bgt.n	8492 <__aeabi_ddiv+0x5b6>
    8408:	4b43      	ldr	r3, [pc, #268]	; (8518 <__aeabi_ddiv+0x63c>)
    840a:	464a      	mov	r2, r9
    840c:	469c      	mov	ip, r3
    840e:	465b      	mov	r3, fp
    8410:	4465      	add	r5, ip
    8412:	40fa      	lsrs	r2, r7
    8414:	40ab      	lsls	r3, r5
    8416:	4313      	orrs	r3, r2
    8418:	464a      	mov	r2, r9
    841a:	40aa      	lsls	r2, r5
    841c:	1c15      	adds	r5, r2, #0
    841e:	1e6a      	subs	r2, r5, #1
    8420:	4195      	sbcs	r5, r2
    8422:	465a      	mov	r2, fp
    8424:	40fa      	lsrs	r2, r7
    8426:	432b      	orrs	r3, r5
    8428:	1c17      	adds	r7, r2, #0
    842a:	075a      	lsls	r2, r3, #29
    842c:	d009      	beq.n	8442 <__aeabi_ddiv+0x566>
    842e:	220f      	movs	r2, #15
    8430:	401a      	ands	r2, r3
    8432:	2a04      	cmp	r2, #4
    8434:	d005      	beq.n	8442 <__aeabi_ddiv+0x566>
    8436:	1d1a      	adds	r2, r3, #4
    8438:	429a      	cmp	r2, r3
    843a:	419b      	sbcs	r3, r3
    843c:	425b      	negs	r3, r3
    843e:	18ff      	adds	r7, r7, r3
    8440:	1c13      	adds	r3, r2, #0
    8442:	023a      	lsls	r2, r7, #8
    8444:	d53e      	bpl.n	84c4 <__aeabi_ddiv+0x5e8>
    8446:	4653      	mov	r3, sl
    8448:	2201      	movs	r2, #1
    844a:	2100      	movs	r1, #0
    844c:	401a      	ands	r2, r3
    844e:	2700      	movs	r7, #0
    8450:	2301      	movs	r3, #1
    8452:	4689      	mov	r9, r1
    8454:	e5aa      	b.n	7fac <__aeabi_ddiv+0xd0>
    8456:	2302      	movs	r3, #2
    8458:	425b      	negs	r3, r3
    845a:	469c      	mov	ip, r3
    845c:	9a01      	ldr	r2, [sp, #4]
    845e:	44e3      	add	fp, ip
    8460:	4694      	mov	ip, r2
    8462:	44e0      	add	r8, ip
    8464:	4590      	cmp	r8, r2
    8466:	419b      	sbcs	r3, r3
    8468:	425b      	negs	r3, r3
    846a:	199b      	adds	r3, r3, r6
    846c:	19df      	adds	r7, r3, r7
    846e:	1b3f      	subs	r7, r7, r4
    8470:	e6a0      	b.n	81b4 <__aeabi_ddiv+0x2d8>
    8472:	9f01      	ldr	r7, [sp, #4]
    8474:	464a      	mov	r2, r9
    8476:	007c      	lsls	r4, r7, #1
    8478:	42bc      	cmp	r4, r7
    847a:	41bf      	sbcs	r7, r7
    847c:	427f      	negs	r7, r7
    847e:	19bf      	adds	r7, r7, r6
    8480:	3a02      	subs	r2, #2
    8482:	19c9      	adds	r1, r1, r7
    8484:	9401      	str	r4, [sp, #4]
    8486:	e79c      	b.n	83c2 <__aeabi_ddiv+0x4e6>
    8488:	2b00      	cmp	r3, #0
    848a:	d195      	bne.n	83b8 <__aeabi_ddiv+0x4dc>
    848c:	2200      	movs	r2, #0
    848e:	9201      	str	r2, [sp, #4]
    8490:	e79b      	b.n	83ca <__aeabi_ddiv+0x4ee>
    8492:	465a      	mov	r2, fp
    8494:	4b21      	ldr	r3, [pc, #132]	; (851c <__aeabi_ddiv+0x640>)
    8496:	1b5b      	subs	r3, r3, r5
    8498:	40da      	lsrs	r2, r3
    849a:	2f20      	cmp	r7, #32
    849c:	d027      	beq.n	84ee <__aeabi_ddiv+0x612>
    849e:	4b20      	ldr	r3, [pc, #128]	; (8520 <__aeabi_ddiv+0x644>)
    84a0:	469c      	mov	ip, r3
    84a2:	465b      	mov	r3, fp
    84a4:	4465      	add	r5, ip
    84a6:	40ab      	lsls	r3, r5
    84a8:	4649      	mov	r1, r9
    84aa:	430b      	orrs	r3, r1
    84ac:	1e59      	subs	r1, r3, #1
    84ae:	418b      	sbcs	r3, r1
    84b0:	4313      	orrs	r3, r2
    84b2:	2207      	movs	r2, #7
    84b4:	2700      	movs	r7, #0
    84b6:	401a      	ands	r2, r3
    84b8:	d007      	beq.n	84ca <__aeabi_ddiv+0x5ee>
    84ba:	220f      	movs	r2, #15
    84bc:	2700      	movs	r7, #0
    84be:	401a      	ands	r2, r3
    84c0:	2a04      	cmp	r2, #4
    84c2:	d1b8      	bne.n	8436 <__aeabi_ddiv+0x55a>
    84c4:	077a      	lsls	r2, r7, #29
    84c6:	027f      	lsls	r7, r7, #9
    84c8:	0b3f      	lsrs	r7, r7, #12
    84ca:	08db      	lsrs	r3, r3, #3
    84cc:	4313      	orrs	r3, r2
    84ce:	4699      	mov	r9, r3
    84d0:	2201      	movs	r2, #1
    84d2:	4653      	mov	r3, sl
    84d4:	401a      	ands	r2, r3
    84d6:	2300      	movs	r3, #0
    84d8:	e568      	b.n	7fac <__aeabi_ddiv+0xd0>
    84da:	4541      	cmp	r1, r8
    84dc:	d8bb      	bhi.n	8456 <__aeabi_ddiv+0x57a>
    84de:	4693      	mov	fp, r2
    84e0:	2700      	movs	r7, #0
    84e2:	e667      	b.n	81b4 <__aeabi_ddiv+0x2d8>
    84e4:	9c01      	ldr	r4, [sp, #4]
    84e6:	429c      	cmp	r4, r3
    84e8:	d3c3      	bcc.n	8472 <__aeabi_ddiv+0x596>
    84ea:	4691      	mov	r9, r2
    84ec:	e76d      	b.n	83ca <__aeabi_ddiv+0x4ee>
    84ee:	2300      	movs	r3, #0
    84f0:	e7da      	b.n	84a8 <__aeabi_ddiv+0x5cc>
    84f2:	2780      	movs	r7, #128	; 0x80
    84f4:	465b      	mov	r3, fp
    84f6:	033f      	lsls	r7, r7, #12
    84f8:	431f      	orrs	r7, r3
    84fa:	033f      	lsls	r7, r7, #12
    84fc:	0b3f      	lsrs	r7, r7, #12
    84fe:	9a01      	ldr	r2, [sp, #4]
    8500:	4b03      	ldr	r3, [pc, #12]	; (8510 <__aeabi_ddiv+0x634>)
    8502:	e553      	b.n	7fac <__aeabi_ddiv+0xd0>
    8504:	000003ff 	.word	0x000003ff
    8508:	feffffff 	.word	0xfeffffff
    850c:	000007fe 	.word	0x000007fe
    8510:	000007ff 	.word	0x000007ff
    8514:	fffffc02 	.word	0xfffffc02
    8518:	0000041e 	.word	0x0000041e
    851c:	fffffbe2 	.word	0xfffffbe2
    8520:	0000043e 	.word	0x0000043e

00008524 <__eqdf2>:
    8524:	b5f0      	push	{r4, r5, r6, r7, lr}
    8526:	465f      	mov	r7, fp
    8528:	464d      	mov	r5, r9
    852a:	4644      	mov	r4, r8
    852c:	4656      	mov	r6, sl
    852e:	b4f0      	push	{r4, r5, r6, r7}
    8530:	031f      	lsls	r7, r3, #12
    8532:	005c      	lsls	r4, r3, #1
    8534:	0fdb      	lsrs	r3, r3, #31
    8536:	4699      	mov	r9, r3
    8538:	4b1b      	ldr	r3, [pc, #108]	; (85a8 <__eqdf2+0x84>)
    853a:	030e      	lsls	r6, r1, #12
    853c:	004d      	lsls	r5, r1, #1
    853e:	0fc9      	lsrs	r1, r1, #31
    8540:	4684      	mov	ip, r0
    8542:	0b36      	lsrs	r6, r6, #12
    8544:	0d6d      	lsrs	r5, r5, #21
    8546:	468b      	mov	fp, r1
    8548:	4690      	mov	r8, r2
    854a:	0b3f      	lsrs	r7, r7, #12
    854c:	0d64      	lsrs	r4, r4, #21
    854e:	429d      	cmp	r5, r3
    8550:	d00c      	beq.n	856c <__eqdf2+0x48>
    8552:	4b15      	ldr	r3, [pc, #84]	; (85a8 <__eqdf2+0x84>)
    8554:	429c      	cmp	r4, r3
    8556:	d010      	beq.n	857a <__eqdf2+0x56>
    8558:	2301      	movs	r3, #1
    855a:	42a5      	cmp	r5, r4
    855c:	d014      	beq.n	8588 <__eqdf2+0x64>
    855e:	1c18      	adds	r0, r3, #0
    8560:	bc3c      	pop	{r2, r3, r4, r5}
    8562:	4690      	mov	r8, r2
    8564:	4699      	mov	r9, r3
    8566:	46a2      	mov	sl, r4
    8568:	46ab      	mov	fp, r5
    856a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    856c:	1c31      	adds	r1, r6, #0
    856e:	2301      	movs	r3, #1
    8570:	4301      	orrs	r1, r0
    8572:	d1f4      	bne.n	855e <__eqdf2+0x3a>
    8574:	4b0c      	ldr	r3, [pc, #48]	; (85a8 <__eqdf2+0x84>)
    8576:	429c      	cmp	r4, r3
    8578:	d1ee      	bne.n	8558 <__eqdf2+0x34>
    857a:	433a      	orrs	r2, r7
    857c:	2301      	movs	r3, #1
    857e:	2a00      	cmp	r2, #0
    8580:	d1ed      	bne.n	855e <__eqdf2+0x3a>
    8582:	2301      	movs	r3, #1
    8584:	42a5      	cmp	r5, r4
    8586:	d1ea      	bne.n	855e <__eqdf2+0x3a>
    8588:	42be      	cmp	r6, r7
    858a:	d1e8      	bne.n	855e <__eqdf2+0x3a>
    858c:	45c4      	cmp	ip, r8
    858e:	d1e6      	bne.n	855e <__eqdf2+0x3a>
    8590:	45cb      	cmp	fp, r9
    8592:	d006      	beq.n	85a2 <__eqdf2+0x7e>
    8594:	2d00      	cmp	r5, #0
    8596:	d1e2      	bne.n	855e <__eqdf2+0x3a>
    8598:	4330      	orrs	r0, r6
    859a:	1c03      	adds	r3, r0, #0
    859c:	1e58      	subs	r0, r3, #1
    859e:	4183      	sbcs	r3, r0
    85a0:	e7dd      	b.n	855e <__eqdf2+0x3a>
    85a2:	2300      	movs	r3, #0
    85a4:	e7db      	b.n	855e <__eqdf2+0x3a>
    85a6:	46c0      	nop			; (mov r8, r8)
    85a8:	000007ff 	.word	0x000007ff

000085ac <__gedf2>:
    85ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    85ae:	4657      	mov	r7, sl
    85b0:	4645      	mov	r5, r8
    85b2:	464e      	mov	r6, r9
    85b4:	b4e0      	push	{r5, r6, r7}
    85b6:	030f      	lsls	r7, r1, #12
    85b8:	004e      	lsls	r6, r1, #1
    85ba:	0fc9      	lsrs	r1, r1, #31
    85bc:	468a      	mov	sl, r1
    85be:	4932      	ldr	r1, [pc, #200]	; (8688 <__gedf2+0xdc>)
    85c0:	031d      	lsls	r5, r3, #12
    85c2:	005c      	lsls	r4, r3, #1
    85c4:	4684      	mov	ip, r0
    85c6:	0b3f      	lsrs	r7, r7, #12
    85c8:	0d76      	lsrs	r6, r6, #21
    85ca:	4690      	mov	r8, r2
    85cc:	0b2d      	lsrs	r5, r5, #12
    85ce:	0d64      	lsrs	r4, r4, #21
    85d0:	0fdb      	lsrs	r3, r3, #31
    85d2:	428e      	cmp	r6, r1
    85d4:	d00f      	beq.n	85f6 <__gedf2+0x4a>
    85d6:	428c      	cmp	r4, r1
    85d8:	d039      	beq.n	864e <__gedf2+0xa2>
    85da:	2e00      	cmp	r6, #0
    85dc:	d110      	bne.n	8600 <__gedf2+0x54>
    85de:	4338      	orrs	r0, r7
    85e0:	4241      	negs	r1, r0
    85e2:	4141      	adcs	r1, r0
    85e4:	4689      	mov	r9, r1
    85e6:	2c00      	cmp	r4, #0
    85e8:	d127      	bne.n	863a <__gedf2+0x8e>
    85ea:	432a      	orrs	r2, r5
    85ec:	d125      	bne.n	863a <__gedf2+0x8e>
    85ee:	2000      	movs	r0, #0
    85f0:	2900      	cmp	r1, #0
    85f2:	d10e      	bne.n	8612 <__gedf2+0x66>
    85f4:	e008      	b.n	8608 <__gedf2+0x5c>
    85f6:	1c39      	adds	r1, r7, #0
    85f8:	4301      	orrs	r1, r0
    85fa:	d12e      	bne.n	865a <__gedf2+0xae>
    85fc:	42b4      	cmp	r4, r6
    85fe:	d026      	beq.n	864e <__gedf2+0xa2>
    8600:	2c00      	cmp	r4, #0
    8602:	d00b      	beq.n	861c <__gedf2+0x70>
    8604:	459a      	cmp	sl, r3
    8606:	d00d      	beq.n	8624 <__gedf2+0x78>
    8608:	4653      	mov	r3, sl
    860a:	4259      	negs	r1, r3
    860c:	2301      	movs	r3, #1
    860e:	4319      	orrs	r1, r3
    8610:	1c08      	adds	r0, r1, #0
    8612:	bc1c      	pop	{r2, r3, r4}
    8614:	4690      	mov	r8, r2
    8616:	4699      	mov	r9, r3
    8618:	46a2      	mov	sl, r4
    861a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    861c:	432a      	orrs	r2, r5
    861e:	d0f3      	beq.n	8608 <__gedf2+0x5c>
    8620:	459a      	cmp	sl, r3
    8622:	d1f1      	bne.n	8608 <__gedf2+0x5c>
    8624:	42a6      	cmp	r6, r4
    8626:	dcef      	bgt.n	8608 <__gedf2+0x5c>
    8628:	da1a      	bge.n	8660 <__gedf2+0xb4>
    862a:	4650      	mov	r0, sl
    862c:	4241      	negs	r1, r0
    862e:	4148      	adcs	r0, r1
    8630:	2301      	movs	r3, #1
    8632:	4241      	negs	r1, r0
    8634:	4319      	orrs	r1, r3
    8636:	1c08      	adds	r0, r1, #0
    8638:	e7eb      	b.n	8612 <__gedf2+0x66>
    863a:	464a      	mov	r2, r9
    863c:	2a00      	cmp	r2, #0
    863e:	d0e1      	beq.n	8604 <__gedf2+0x58>
    8640:	4258      	negs	r0, r3
    8642:	4158      	adcs	r0, r3
    8644:	2201      	movs	r2, #1
    8646:	4241      	negs	r1, r0
    8648:	4311      	orrs	r1, r2
    864a:	1c08      	adds	r0, r1, #0
    864c:	e7e1      	b.n	8612 <__gedf2+0x66>
    864e:	1c29      	adds	r1, r5, #0
    8650:	4311      	orrs	r1, r2
    8652:	d102      	bne.n	865a <__gedf2+0xae>
    8654:	2e00      	cmp	r6, #0
    8656:	d0c2      	beq.n	85de <__gedf2+0x32>
    8658:	e7d4      	b.n	8604 <__gedf2+0x58>
    865a:	2002      	movs	r0, #2
    865c:	4240      	negs	r0, r0
    865e:	e7d8      	b.n	8612 <__gedf2+0x66>
    8660:	42af      	cmp	r7, r5
    8662:	d8d1      	bhi.n	8608 <__gedf2+0x5c>
    8664:	d009      	beq.n	867a <__gedf2+0xce>
    8666:	2000      	movs	r0, #0
    8668:	42af      	cmp	r7, r5
    866a:	d2d2      	bcs.n	8612 <__gedf2+0x66>
    866c:	4650      	mov	r0, sl
    866e:	4241      	negs	r1, r0
    8670:	4148      	adcs	r0, r1
    8672:	2301      	movs	r3, #1
    8674:	4240      	negs	r0, r0
    8676:	4318      	orrs	r0, r3
    8678:	e7cb      	b.n	8612 <__gedf2+0x66>
    867a:	45c4      	cmp	ip, r8
    867c:	d8c4      	bhi.n	8608 <__gedf2+0x5c>
    867e:	2000      	movs	r0, #0
    8680:	45c4      	cmp	ip, r8
    8682:	d3f3      	bcc.n	866c <__gedf2+0xc0>
    8684:	e7c5      	b.n	8612 <__gedf2+0x66>
    8686:	46c0      	nop			; (mov r8, r8)
    8688:	000007ff 	.word	0x000007ff

0000868c <__ledf2>:
    868c:	b5f0      	push	{r4, r5, r6, r7, lr}
    868e:	465f      	mov	r7, fp
    8690:	464d      	mov	r5, r9
    8692:	4644      	mov	r4, r8
    8694:	4656      	mov	r6, sl
    8696:	4680      	mov	r8, r0
    8698:	b4f0      	push	{r4, r5, r6, r7}
    869a:	1c06      	adds	r6, r0, #0
    869c:	0308      	lsls	r0, r1, #12
    869e:	0b00      	lsrs	r0, r0, #12
    86a0:	4684      	mov	ip, r0
    86a2:	482c      	ldr	r0, [pc, #176]	; (8754 <__ledf2+0xc8>)
    86a4:	004c      	lsls	r4, r1, #1
    86a6:	031f      	lsls	r7, r3, #12
    86a8:	005d      	lsls	r5, r3, #1
    86aa:	0fc9      	lsrs	r1, r1, #31
    86ac:	0d64      	lsrs	r4, r4, #21
    86ae:	468b      	mov	fp, r1
    86b0:	4691      	mov	r9, r2
    86b2:	0b3f      	lsrs	r7, r7, #12
    86b4:	0d6d      	lsrs	r5, r5, #21
    86b6:	0fdb      	lsrs	r3, r3, #31
    86b8:	4284      	cmp	r4, r0
    86ba:	d012      	beq.n	86e2 <__ledf2+0x56>
    86bc:	4285      	cmp	r5, r0
    86be:	d025      	beq.n	870c <__ledf2+0x80>
    86c0:	2c00      	cmp	r4, #0
    86c2:	d114      	bne.n	86ee <__ledf2+0x62>
    86c4:	4661      	mov	r1, ip
    86c6:	430e      	orrs	r6, r1
    86c8:	4270      	negs	r0, r6
    86ca:	4146      	adcs	r6, r0
    86cc:	2d00      	cmp	r5, #0
    86ce:	d035      	beq.n	873c <__ledf2+0xb0>
    86d0:	2e00      	cmp	r6, #0
    86d2:	d021      	beq.n	8718 <__ledf2+0x8c>
    86d4:	4258      	negs	r0, r3
    86d6:	4158      	adcs	r0, r3
    86d8:	2101      	movs	r1, #1
    86da:	4243      	negs	r3, r0
    86dc:	430b      	orrs	r3, r1
    86de:	1c18      	adds	r0, r3, #0
    86e0:	e00e      	b.n	8700 <__ledf2+0x74>
    86e2:	4661      	mov	r1, ip
    86e4:	2002      	movs	r0, #2
    86e6:	4331      	orrs	r1, r6
    86e8:	d10a      	bne.n	8700 <__ledf2+0x74>
    86ea:	42a5      	cmp	r5, r4
    86ec:	d00e      	beq.n	870c <__ledf2+0x80>
    86ee:	2d00      	cmp	r5, #0
    86f0:	d112      	bne.n	8718 <__ledf2+0x8c>
    86f2:	433a      	orrs	r2, r7
    86f4:	d110      	bne.n	8718 <__ledf2+0x8c>
    86f6:	465b      	mov	r3, fp
    86f8:	4259      	negs	r1, r3
    86fa:	2301      	movs	r3, #1
    86fc:	4319      	orrs	r1, r3
    86fe:	1c08      	adds	r0, r1, #0
    8700:	bc3c      	pop	{r2, r3, r4, r5}
    8702:	4690      	mov	r8, r2
    8704:	4699      	mov	r9, r3
    8706:	46a2      	mov	sl, r4
    8708:	46ab      	mov	fp, r5
    870a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    870c:	1c39      	adds	r1, r7, #0
    870e:	2002      	movs	r0, #2
    8710:	4311      	orrs	r1, r2
    8712:	d1f5      	bne.n	8700 <__ledf2+0x74>
    8714:	2c00      	cmp	r4, #0
    8716:	d0d5      	beq.n	86c4 <__ledf2+0x38>
    8718:	459b      	cmp	fp, r3
    871a:	d1ec      	bne.n	86f6 <__ledf2+0x6a>
    871c:	42ac      	cmp	r4, r5
    871e:	dcea      	bgt.n	86f6 <__ledf2+0x6a>
    8720:	db05      	blt.n	872e <__ledf2+0xa2>
    8722:	45bc      	cmp	ip, r7
    8724:	d8e7      	bhi.n	86f6 <__ledf2+0x6a>
    8726:	d00f      	beq.n	8748 <__ledf2+0xbc>
    8728:	2000      	movs	r0, #0
    872a:	45bc      	cmp	ip, r7
    872c:	d2e8      	bcs.n	8700 <__ledf2+0x74>
    872e:	4658      	mov	r0, fp
    8730:	4241      	negs	r1, r0
    8732:	4148      	adcs	r0, r1
    8734:	4241      	negs	r1, r0
    8736:	2001      	movs	r0, #1
    8738:	4308      	orrs	r0, r1
    873a:	e7e1      	b.n	8700 <__ledf2+0x74>
    873c:	433a      	orrs	r2, r7
    873e:	d1c7      	bne.n	86d0 <__ledf2+0x44>
    8740:	2000      	movs	r0, #0
    8742:	2e00      	cmp	r6, #0
    8744:	d1dc      	bne.n	8700 <__ledf2+0x74>
    8746:	e7d6      	b.n	86f6 <__ledf2+0x6a>
    8748:	45c8      	cmp	r8, r9
    874a:	d8d4      	bhi.n	86f6 <__ledf2+0x6a>
    874c:	2000      	movs	r0, #0
    874e:	45c8      	cmp	r8, r9
    8750:	d3ed      	bcc.n	872e <__ledf2+0xa2>
    8752:	e7d5      	b.n	8700 <__ledf2+0x74>
    8754:	000007ff 	.word	0x000007ff

00008758 <__aeabi_dmul>:
    8758:	b5f0      	push	{r4, r5, r6, r7, lr}
    875a:	465f      	mov	r7, fp
    875c:	4656      	mov	r6, sl
    875e:	464d      	mov	r5, r9
    8760:	4644      	mov	r4, r8
    8762:	b4f0      	push	{r4, r5, r6, r7}
    8764:	1c05      	adds	r5, r0, #0
    8766:	1c06      	adds	r6, r0, #0
    8768:	0308      	lsls	r0, r1, #12
    876a:	b087      	sub	sp, #28
    876c:	4699      	mov	r9, r3
    876e:	004f      	lsls	r7, r1, #1
    8770:	0b03      	lsrs	r3, r0, #12
    8772:	0fcc      	lsrs	r4, r1, #31
    8774:	4692      	mov	sl, r2
    8776:	469b      	mov	fp, r3
    8778:	0d7f      	lsrs	r7, r7, #21
    877a:	9401      	str	r4, [sp, #4]
    877c:	d067      	beq.n	884e <__aeabi_dmul+0xf6>
    877e:	4b6c      	ldr	r3, [pc, #432]	; (8930 <__aeabi_dmul+0x1d8>)
    8780:	429f      	cmp	r7, r3
    8782:	d036      	beq.n	87f2 <__aeabi_dmul+0x9a>
    8784:	2080      	movs	r0, #128	; 0x80
    8786:	465b      	mov	r3, fp
    8788:	0340      	lsls	r0, r0, #13
    878a:	4318      	orrs	r0, r3
    878c:	00c0      	lsls	r0, r0, #3
    878e:	0f6b      	lsrs	r3, r5, #29
    8790:	4318      	orrs	r0, r3
    8792:	4b68      	ldr	r3, [pc, #416]	; (8934 <__aeabi_dmul+0x1dc>)
    8794:	4683      	mov	fp, r0
    8796:	469c      	mov	ip, r3
    8798:	2300      	movs	r3, #0
    879a:	4698      	mov	r8, r3
    879c:	00ee      	lsls	r6, r5, #3
    879e:	4467      	add	r7, ip
    87a0:	9300      	str	r3, [sp, #0]
    87a2:	464b      	mov	r3, r9
    87a4:	4649      	mov	r1, r9
    87a6:	031d      	lsls	r5, r3, #12
    87a8:	0fc9      	lsrs	r1, r1, #31
    87aa:	005b      	lsls	r3, r3, #1
    87ac:	4652      	mov	r2, sl
    87ae:	0b2d      	lsrs	r5, r5, #12
    87b0:	0d5b      	lsrs	r3, r3, #21
    87b2:	4689      	mov	r9, r1
    87b4:	d100      	bne.n	87b8 <__aeabi_dmul+0x60>
    87b6:	e06e      	b.n	8896 <__aeabi_dmul+0x13e>
    87b8:	495d      	ldr	r1, [pc, #372]	; (8930 <__aeabi_dmul+0x1d8>)
    87ba:	428b      	cmp	r3, r1
    87bc:	d064      	beq.n	8888 <__aeabi_dmul+0x130>
    87be:	2080      	movs	r0, #128	; 0x80
    87c0:	495c      	ldr	r1, [pc, #368]	; (8934 <__aeabi_dmul+0x1dc>)
    87c2:	0340      	lsls	r0, r0, #13
    87c4:	468c      	mov	ip, r1
    87c6:	2100      	movs	r1, #0
    87c8:	4305      	orrs	r5, r0
    87ca:	00ed      	lsls	r5, r5, #3
    87cc:	0f50      	lsrs	r0, r2, #29
    87ce:	4305      	orrs	r5, r0
    87d0:	00d2      	lsls	r2, r2, #3
    87d2:	4463      	add	r3, ip
    87d4:	4648      	mov	r0, r9
    87d6:	18ff      	adds	r7, r7, r3
    87d8:	1c7b      	adds	r3, r7, #1
    87da:	469a      	mov	sl, r3
    87dc:	9b00      	ldr	r3, [sp, #0]
    87de:	4060      	eors	r0, r4
    87e0:	9002      	str	r0, [sp, #8]
    87e2:	430b      	orrs	r3, r1
    87e4:	2b0f      	cmp	r3, #15
    87e6:	d900      	bls.n	87ea <__aeabi_dmul+0x92>
    87e8:	e0ac      	b.n	8944 <__aeabi_dmul+0x1ec>
    87ea:	4853      	ldr	r0, [pc, #332]	; (8938 <__aeabi_dmul+0x1e0>)
    87ec:	009b      	lsls	r3, r3, #2
    87ee:	58c3      	ldr	r3, [r0, r3]
    87f0:	469f      	mov	pc, r3
    87f2:	465b      	mov	r3, fp
    87f4:	431d      	orrs	r5, r3
    87f6:	d000      	beq.n	87fa <__aeabi_dmul+0xa2>
    87f8:	e082      	b.n	8900 <__aeabi_dmul+0x1a8>
    87fa:	2308      	movs	r3, #8
    87fc:	9300      	str	r3, [sp, #0]
    87fe:	2300      	movs	r3, #0
    8800:	469b      	mov	fp, r3
    8802:	3302      	adds	r3, #2
    8804:	2600      	movs	r6, #0
    8806:	4698      	mov	r8, r3
    8808:	e7cb      	b.n	87a2 <__aeabi_dmul+0x4a>
    880a:	9b02      	ldr	r3, [sp, #8]
    880c:	9301      	str	r3, [sp, #4]
    880e:	4643      	mov	r3, r8
    8810:	2b02      	cmp	r3, #2
    8812:	d159      	bne.n	88c8 <__aeabi_dmul+0x170>
    8814:	2401      	movs	r4, #1
    8816:	2500      	movs	r5, #0
    8818:	2600      	movs	r6, #0
    881a:	9b01      	ldr	r3, [sp, #4]
    881c:	401c      	ands	r4, r3
    881e:	4b44      	ldr	r3, [pc, #272]	; (8930 <__aeabi_dmul+0x1d8>)
    8820:	2100      	movs	r1, #0
    8822:	032d      	lsls	r5, r5, #12
    8824:	0d0a      	lsrs	r2, r1, #20
    8826:	0512      	lsls	r2, r2, #20
    8828:	0b2d      	lsrs	r5, r5, #12
    882a:	4315      	orrs	r5, r2
    882c:	4a43      	ldr	r2, [pc, #268]	; (893c <__aeabi_dmul+0x1e4>)
    882e:	051b      	lsls	r3, r3, #20
    8830:	4015      	ands	r5, r2
    8832:	431d      	orrs	r5, r3
    8834:	006d      	lsls	r5, r5, #1
    8836:	07e4      	lsls	r4, r4, #31
    8838:	086d      	lsrs	r5, r5, #1
    883a:	4325      	orrs	r5, r4
    883c:	1c30      	adds	r0, r6, #0
    883e:	1c29      	adds	r1, r5, #0
    8840:	b007      	add	sp, #28
    8842:	bc3c      	pop	{r2, r3, r4, r5}
    8844:	4690      	mov	r8, r2
    8846:	4699      	mov	r9, r3
    8848:	46a2      	mov	sl, r4
    884a:	46ab      	mov	fp, r5
    884c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    884e:	432b      	orrs	r3, r5
    8850:	d04e      	beq.n	88f0 <__aeabi_dmul+0x198>
    8852:	465b      	mov	r3, fp
    8854:	2b00      	cmp	r3, #0
    8856:	d100      	bne.n	885a <__aeabi_dmul+0x102>
    8858:	e185      	b.n	8b66 <__aeabi_dmul+0x40e>
    885a:	4658      	mov	r0, fp
    885c:	f000 ff18 	bl	9690 <__clzsi2>
    8860:	1c02      	adds	r2, r0, #0
    8862:	2328      	movs	r3, #40	; 0x28
    8864:	1c29      	adds	r1, r5, #0
    8866:	1a9b      	subs	r3, r3, r2
    8868:	1c16      	adds	r6, r2, #0
    886a:	4658      	mov	r0, fp
    886c:	40d9      	lsrs	r1, r3
    886e:	3e08      	subs	r6, #8
    8870:	40b0      	lsls	r0, r6
    8872:	1c0b      	adds	r3, r1, #0
    8874:	40b5      	lsls	r5, r6
    8876:	4303      	orrs	r3, r0
    8878:	469b      	mov	fp, r3
    887a:	1c2e      	adds	r6, r5, #0
    887c:	2300      	movs	r3, #0
    887e:	4f30      	ldr	r7, [pc, #192]	; (8940 <__aeabi_dmul+0x1e8>)
    8880:	9300      	str	r3, [sp, #0]
    8882:	1abf      	subs	r7, r7, r2
    8884:	4698      	mov	r8, r3
    8886:	e78c      	b.n	87a2 <__aeabi_dmul+0x4a>
    8888:	4651      	mov	r1, sl
    888a:	4329      	orrs	r1, r5
    888c:	d12e      	bne.n	88ec <__aeabi_dmul+0x194>
    888e:	2500      	movs	r5, #0
    8890:	2200      	movs	r2, #0
    8892:	2102      	movs	r1, #2
    8894:	e79e      	b.n	87d4 <__aeabi_dmul+0x7c>
    8896:	4651      	mov	r1, sl
    8898:	4329      	orrs	r1, r5
    889a:	d023      	beq.n	88e4 <__aeabi_dmul+0x18c>
    889c:	2d00      	cmp	r5, #0
    889e:	d100      	bne.n	88a2 <__aeabi_dmul+0x14a>
    88a0:	e154      	b.n	8b4c <__aeabi_dmul+0x3f4>
    88a2:	1c28      	adds	r0, r5, #0
    88a4:	f000 fef4 	bl	9690 <__clzsi2>
    88a8:	1c03      	adds	r3, r0, #0
    88aa:	2128      	movs	r1, #40	; 0x28
    88ac:	4650      	mov	r0, sl
    88ae:	1ac9      	subs	r1, r1, r3
    88b0:	1c1a      	adds	r2, r3, #0
    88b2:	40c8      	lsrs	r0, r1
    88b4:	4651      	mov	r1, sl
    88b6:	3a08      	subs	r2, #8
    88b8:	4091      	lsls	r1, r2
    88ba:	4095      	lsls	r5, r2
    88bc:	1c0a      	adds	r2, r1, #0
    88be:	4305      	orrs	r5, r0
    88c0:	481f      	ldr	r0, [pc, #124]	; (8940 <__aeabi_dmul+0x1e8>)
    88c2:	2100      	movs	r1, #0
    88c4:	1ac3      	subs	r3, r0, r3
    88c6:	e785      	b.n	87d4 <__aeabi_dmul+0x7c>
    88c8:	2b03      	cmp	r3, #3
    88ca:	d100      	bne.n	88ce <__aeabi_dmul+0x176>
    88cc:	e1c2      	b.n	8c54 <__aeabi_dmul+0x4fc>
    88ce:	2b01      	cmp	r3, #1
    88d0:	d000      	beq.n	88d4 <__aeabi_dmul+0x17c>
    88d2:	e16d      	b.n	8bb0 <__aeabi_dmul+0x458>
    88d4:	4644      	mov	r4, r8
    88d6:	9b01      	ldr	r3, [sp, #4]
    88d8:	2500      	movs	r5, #0
    88da:	401c      	ands	r4, r3
    88dc:	b2e4      	uxtb	r4, r4
    88de:	2300      	movs	r3, #0
    88e0:	2600      	movs	r6, #0
    88e2:	e79d      	b.n	8820 <__aeabi_dmul+0xc8>
    88e4:	2500      	movs	r5, #0
    88e6:	2200      	movs	r2, #0
    88e8:	2101      	movs	r1, #1
    88ea:	e773      	b.n	87d4 <__aeabi_dmul+0x7c>
    88ec:	2103      	movs	r1, #3
    88ee:	e771      	b.n	87d4 <__aeabi_dmul+0x7c>
    88f0:	2304      	movs	r3, #4
    88f2:	9300      	str	r3, [sp, #0]
    88f4:	2300      	movs	r3, #0
    88f6:	469b      	mov	fp, r3
    88f8:	3301      	adds	r3, #1
    88fa:	2600      	movs	r6, #0
    88fc:	4698      	mov	r8, r3
    88fe:	e750      	b.n	87a2 <__aeabi_dmul+0x4a>
    8900:	230c      	movs	r3, #12
    8902:	9300      	str	r3, [sp, #0]
    8904:	3b09      	subs	r3, #9
    8906:	4698      	mov	r8, r3
    8908:	e74b      	b.n	87a2 <__aeabi_dmul+0x4a>
    890a:	2580      	movs	r5, #128	; 0x80
    890c:	2400      	movs	r4, #0
    890e:	032d      	lsls	r5, r5, #12
    8910:	2600      	movs	r6, #0
    8912:	4b07      	ldr	r3, [pc, #28]	; (8930 <__aeabi_dmul+0x1d8>)
    8914:	e784      	b.n	8820 <__aeabi_dmul+0xc8>
    8916:	464b      	mov	r3, r9
    8918:	46ab      	mov	fp, r5
    891a:	1c16      	adds	r6, r2, #0
    891c:	9301      	str	r3, [sp, #4]
    891e:	4688      	mov	r8, r1
    8920:	e775      	b.n	880e <__aeabi_dmul+0xb6>
    8922:	9b02      	ldr	r3, [sp, #8]
    8924:	46ab      	mov	fp, r5
    8926:	1c16      	adds	r6, r2, #0
    8928:	9301      	str	r3, [sp, #4]
    892a:	4688      	mov	r8, r1
    892c:	e76f      	b.n	880e <__aeabi_dmul+0xb6>
    892e:	46c0      	nop			; (mov r8, r8)
    8930:	000007ff 	.word	0x000007ff
    8934:	fffffc01 	.word	0xfffffc01
    8938:	0000f9a8 	.word	0x0000f9a8
    893c:	800fffff 	.word	0x800fffff
    8940:	fffffc0d 	.word	0xfffffc0d
    8944:	0c33      	lsrs	r3, r6, #16
    8946:	0436      	lsls	r6, r6, #16
    8948:	0c36      	lsrs	r6, r6, #16
    894a:	469c      	mov	ip, r3
    894c:	1c33      	adds	r3, r6, #0
    894e:	0c14      	lsrs	r4, r2, #16
    8950:	0412      	lsls	r2, r2, #16
    8952:	0c12      	lsrs	r2, r2, #16
    8954:	4353      	muls	r3, r2
    8956:	4698      	mov	r8, r3
    8958:	4663      	mov	r3, ip
    895a:	4353      	muls	r3, r2
    895c:	4699      	mov	r9, r3
    895e:	4663      	mov	r3, ip
    8960:	4363      	muls	r3, r4
    8962:	9301      	str	r3, [sp, #4]
    8964:	1c33      	adds	r3, r6, #0
    8966:	4641      	mov	r1, r8
    8968:	4363      	muls	r3, r4
    896a:	0c09      	lsrs	r1, r1, #16
    896c:	444b      	add	r3, r9
    896e:	185b      	adds	r3, r3, r1
    8970:	4599      	cmp	r9, r3
    8972:	d905      	bls.n	8980 <__aeabi_dmul+0x228>
    8974:	2080      	movs	r0, #128	; 0x80
    8976:	0240      	lsls	r0, r0, #9
    8978:	4681      	mov	r9, r0
    897a:	9901      	ldr	r1, [sp, #4]
    897c:	4449      	add	r1, r9
    897e:	9101      	str	r1, [sp, #4]
    8980:	0c19      	lsrs	r1, r3, #16
    8982:	9103      	str	r1, [sp, #12]
    8984:	4641      	mov	r1, r8
    8986:	0409      	lsls	r1, r1, #16
    8988:	0c09      	lsrs	r1, r1, #16
    898a:	041b      	lsls	r3, r3, #16
    898c:	185b      	adds	r3, r3, r1
    898e:	9304      	str	r3, [sp, #16]
    8990:	0c2b      	lsrs	r3, r5, #16
    8992:	4698      	mov	r8, r3
    8994:	1c33      	adds	r3, r6, #0
    8996:	042d      	lsls	r5, r5, #16
    8998:	0c29      	lsrs	r1, r5, #16
    899a:	434b      	muls	r3, r1
    899c:	4660      	mov	r0, ip
    899e:	9300      	str	r3, [sp, #0]
    89a0:	4643      	mov	r3, r8
    89a2:	4665      	mov	r5, ip
    89a4:	4358      	muls	r0, r3
    89a6:	435e      	muls	r6, r3
    89a8:	9b00      	ldr	r3, [sp, #0]
    89aa:	434d      	muls	r5, r1
    89ac:	0c1b      	lsrs	r3, r3, #16
    89ae:	4699      	mov	r9, r3
    89b0:	19ae      	adds	r6, r5, r6
    89b2:	444e      	add	r6, r9
    89b4:	4684      	mov	ip, r0
    89b6:	42b5      	cmp	r5, r6
    89b8:	d903      	bls.n	89c2 <__aeabi_dmul+0x26a>
    89ba:	2380      	movs	r3, #128	; 0x80
    89bc:	025b      	lsls	r3, r3, #9
    89be:	4699      	mov	r9, r3
    89c0:	44cc      	add	ip, r9
    89c2:	0c35      	lsrs	r5, r6, #16
    89c4:	1c2b      	adds	r3, r5, #0
    89c6:	9803      	ldr	r0, [sp, #12]
    89c8:	4463      	add	r3, ip
    89ca:	4684      	mov	ip, r0
    89cc:	9305      	str	r3, [sp, #20]
    89ce:	9b00      	ldr	r3, [sp, #0]
    89d0:	0436      	lsls	r6, r6, #16
    89d2:	041b      	lsls	r3, r3, #16
    89d4:	0c1b      	lsrs	r3, r3, #16
    89d6:	18f3      	adds	r3, r6, r3
    89d8:	449c      	add	ip, r3
    89da:	4660      	mov	r0, ip
    89dc:	9003      	str	r0, [sp, #12]
    89de:	4658      	mov	r0, fp
    89e0:	0405      	lsls	r5, r0, #16
    89e2:	0c06      	lsrs	r6, r0, #16
    89e4:	0c28      	lsrs	r0, r5, #16
    89e6:	4684      	mov	ip, r0
    89e8:	4350      	muls	r0, r2
    89ea:	1c35      	adds	r5, r6, #0
    89ec:	4681      	mov	r9, r0
    89ee:	4660      	mov	r0, ip
    89f0:	4365      	muls	r5, r4
    89f2:	4344      	muls	r4, r0
    89f4:	4648      	mov	r0, r9
    89f6:	0c00      	lsrs	r0, r0, #16
    89f8:	4683      	mov	fp, r0
    89fa:	4372      	muls	r2, r6
    89fc:	1914      	adds	r4, r2, r4
    89fe:	445c      	add	r4, fp
    8a00:	42a2      	cmp	r2, r4
    8a02:	d903      	bls.n	8a0c <__aeabi_dmul+0x2b4>
    8a04:	2280      	movs	r2, #128	; 0x80
    8a06:	0252      	lsls	r2, r2, #9
    8a08:	4693      	mov	fp, r2
    8a0a:	445d      	add	r5, fp
    8a0c:	0c22      	lsrs	r2, r4, #16
    8a0e:	18ad      	adds	r5, r5, r2
    8a10:	464a      	mov	r2, r9
    8a12:	0412      	lsls	r2, r2, #16
    8a14:	0c12      	lsrs	r2, r2, #16
    8a16:	0424      	lsls	r4, r4, #16
    8a18:	4640      	mov	r0, r8
    8a1a:	18a4      	adds	r4, r4, r2
    8a1c:	4662      	mov	r2, ip
    8a1e:	434a      	muls	r2, r1
    8a20:	4371      	muls	r1, r6
    8a22:	4346      	muls	r6, r0
    8a24:	4660      	mov	r0, ip
    8a26:	9600      	str	r6, [sp, #0]
    8a28:	4646      	mov	r6, r8
    8a2a:	4370      	muls	r0, r6
    8a2c:	4680      	mov	r8, r0
    8a2e:	0c10      	lsrs	r0, r2, #16
    8a30:	4684      	mov	ip, r0
    8a32:	4488      	add	r8, r1
    8a34:	44e0      	add	r8, ip
    8a36:	4541      	cmp	r1, r8
    8a38:	d905      	bls.n	8a46 <__aeabi_dmul+0x2ee>
    8a3a:	2180      	movs	r1, #128	; 0x80
    8a3c:	0249      	lsls	r1, r1, #9
    8a3e:	468c      	mov	ip, r1
    8a40:	9900      	ldr	r1, [sp, #0]
    8a42:	4461      	add	r1, ip
    8a44:	9100      	str	r1, [sp, #0]
    8a46:	9801      	ldr	r0, [sp, #4]
    8a48:	9903      	ldr	r1, [sp, #12]
    8a4a:	4684      	mov	ip, r0
    8a4c:	4461      	add	r1, ip
    8a4e:	4299      	cmp	r1, r3
    8a50:	419b      	sbcs	r3, r3
    8a52:	425b      	negs	r3, r3
    8a54:	4699      	mov	r9, r3
    8a56:	9805      	ldr	r0, [sp, #20]
    8a58:	4643      	mov	r3, r8
    8a5a:	4684      	mov	ip, r0
    8a5c:	0412      	lsls	r2, r2, #16
    8a5e:	0c12      	lsrs	r2, r2, #16
    8a60:	041b      	lsls	r3, r3, #16
    8a62:	189b      	adds	r3, r3, r2
    8a64:	4463      	add	r3, ip
    8a66:	469c      	mov	ip, r3
    8a68:	46ab      	mov	fp, r5
    8a6a:	4283      	cmp	r3, r0
    8a6c:	419b      	sbcs	r3, r3
    8a6e:	4640      	mov	r0, r8
    8a70:	190a      	adds	r2, r1, r4
    8a72:	44cc      	add	ip, r9
    8a74:	42a2      	cmp	r2, r4
    8a76:	4189      	sbcs	r1, r1
    8a78:	44e3      	add	fp, ip
    8a7a:	45cc      	cmp	ip, r9
    8a7c:	41b6      	sbcs	r6, r6
    8a7e:	465c      	mov	r4, fp
    8a80:	0c00      	lsrs	r0, r0, #16
    8a82:	4680      	mov	r8, r0
    8a84:	4249      	negs	r1, r1
    8a86:	4276      	negs	r6, r6
    8a88:	425b      	negs	r3, r3
    8a8a:	1864      	adds	r4, r4, r1
    8a8c:	4333      	orrs	r3, r6
    8a8e:	4498      	add	r8, r3
    8a90:	428c      	cmp	r4, r1
    8a92:	4189      	sbcs	r1, r1
    8a94:	45ab      	cmp	fp, r5
    8a96:	419b      	sbcs	r3, r3
    8a98:	4249      	negs	r1, r1
    8a9a:	425b      	negs	r3, r3
    8a9c:	4319      	orrs	r1, r3
    8a9e:	1c0d      	adds	r5, r1, #0
    8aa0:	9b00      	ldr	r3, [sp, #0]
    8aa2:	4445      	add	r5, r8
    8aa4:	18ee      	adds	r6, r5, r3
    8aa6:	0276      	lsls	r6, r6, #9
    8aa8:	0de5      	lsrs	r5, r4, #23
    8aaa:	432e      	orrs	r6, r5
    8aac:	46b3      	mov	fp, r6
    8aae:	9b04      	ldr	r3, [sp, #16]
    8ab0:	0256      	lsls	r6, r2, #9
    8ab2:	431e      	orrs	r6, r3
    8ab4:	1e73      	subs	r3, r6, #1
    8ab6:	419e      	sbcs	r6, r3
    8ab8:	465b      	mov	r3, fp
    8aba:	0dd2      	lsrs	r2, r2, #23
    8abc:	4332      	orrs	r2, r6
    8abe:	0266      	lsls	r6, r4, #9
    8ac0:	4316      	orrs	r6, r2
    8ac2:	01db      	lsls	r3, r3, #7
    8ac4:	d50a      	bpl.n	8adc <__aeabi_dmul+0x384>
    8ac6:	2301      	movs	r3, #1
    8ac8:	4033      	ands	r3, r6
    8aca:	0876      	lsrs	r6, r6, #1
    8acc:	431e      	orrs	r6, r3
    8ace:	465b      	mov	r3, fp
    8ad0:	07db      	lsls	r3, r3, #31
    8ad2:	431e      	orrs	r6, r3
    8ad4:	465b      	mov	r3, fp
    8ad6:	085b      	lsrs	r3, r3, #1
    8ad8:	469b      	mov	fp, r3
    8ada:	4657      	mov	r7, sl
    8adc:	4b63      	ldr	r3, [pc, #396]	; (8c6c <__aeabi_dmul+0x514>)
    8ade:	18fb      	adds	r3, r7, r3
    8ae0:	2b00      	cmp	r3, #0
    8ae2:	dd5a      	ble.n	8b9a <__aeabi_dmul+0x442>
    8ae4:	0772      	lsls	r2, r6, #29
    8ae6:	d009      	beq.n	8afc <__aeabi_dmul+0x3a4>
    8ae8:	220f      	movs	r2, #15
    8aea:	4032      	ands	r2, r6
    8aec:	2a04      	cmp	r2, #4
    8aee:	d005      	beq.n	8afc <__aeabi_dmul+0x3a4>
    8af0:	1d32      	adds	r2, r6, #4
    8af2:	42b2      	cmp	r2, r6
    8af4:	41b6      	sbcs	r6, r6
    8af6:	4276      	negs	r6, r6
    8af8:	44b3      	add	fp, r6
    8afa:	1c16      	adds	r6, r2, #0
    8afc:	465a      	mov	r2, fp
    8afe:	01d2      	lsls	r2, r2, #7
    8b00:	d506      	bpl.n	8b10 <__aeabi_dmul+0x3b8>
    8b02:	465a      	mov	r2, fp
    8b04:	4b5a      	ldr	r3, [pc, #360]	; (8c70 <__aeabi_dmul+0x518>)
    8b06:	401a      	ands	r2, r3
    8b08:	2380      	movs	r3, #128	; 0x80
    8b0a:	4693      	mov	fp, r2
    8b0c:	00db      	lsls	r3, r3, #3
    8b0e:	18fb      	adds	r3, r7, r3
    8b10:	4a58      	ldr	r2, [pc, #352]	; (8c74 <__aeabi_dmul+0x51c>)
    8b12:	4293      	cmp	r3, r2
    8b14:	dd34      	ble.n	8b80 <__aeabi_dmul+0x428>
    8b16:	2401      	movs	r4, #1
    8b18:	9b02      	ldr	r3, [sp, #8]
    8b1a:	2500      	movs	r5, #0
    8b1c:	401c      	ands	r4, r3
    8b1e:	2600      	movs	r6, #0
    8b20:	4b55      	ldr	r3, [pc, #340]	; (8c78 <__aeabi_dmul+0x520>)
    8b22:	e67d      	b.n	8820 <__aeabi_dmul+0xc8>
    8b24:	2080      	movs	r0, #128	; 0x80
    8b26:	465b      	mov	r3, fp
    8b28:	0300      	lsls	r0, r0, #12
    8b2a:	4203      	tst	r3, r0
    8b2c:	d008      	beq.n	8b40 <__aeabi_dmul+0x3e8>
    8b2e:	4205      	tst	r5, r0
    8b30:	d106      	bne.n	8b40 <__aeabi_dmul+0x3e8>
    8b32:	4305      	orrs	r5, r0
    8b34:	032d      	lsls	r5, r5, #12
    8b36:	0b2d      	lsrs	r5, r5, #12
    8b38:	464c      	mov	r4, r9
    8b3a:	1c16      	adds	r6, r2, #0
    8b3c:	4b4e      	ldr	r3, [pc, #312]	; (8c78 <__aeabi_dmul+0x520>)
    8b3e:	e66f      	b.n	8820 <__aeabi_dmul+0xc8>
    8b40:	465d      	mov	r5, fp
    8b42:	4305      	orrs	r5, r0
    8b44:	032d      	lsls	r5, r5, #12
    8b46:	0b2d      	lsrs	r5, r5, #12
    8b48:	4b4b      	ldr	r3, [pc, #300]	; (8c78 <__aeabi_dmul+0x520>)
    8b4a:	e669      	b.n	8820 <__aeabi_dmul+0xc8>
    8b4c:	4650      	mov	r0, sl
    8b4e:	f000 fd9f 	bl	9690 <__clzsi2>
    8b52:	1c03      	adds	r3, r0, #0
    8b54:	3320      	adds	r3, #32
    8b56:	2b27      	cmp	r3, #39	; 0x27
    8b58:	dc00      	bgt.n	8b5c <__aeabi_dmul+0x404>
    8b5a:	e6a6      	b.n	88aa <__aeabi_dmul+0x152>
    8b5c:	4655      	mov	r5, sl
    8b5e:	3808      	subs	r0, #8
    8b60:	4085      	lsls	r5, r0
    8b62:	2200      	movs	r2, #0
    8b64:	e6ac      	b.n	88c0 <__aeabi_dmul+0x168>
    8b66:	1c28      	adds	r0, r5, #0
    8b68:	f000 fd92 	bl	9690 <__clzsi2>
    8b6c:	1c02      	adds	r2, r0, #0
    8b6e:	3220      	adds	r2, #32
    8b70:	2a27      	cmp	r2, #39	; 0x27
    8b72:	dc00      	bgt.n	8b76 <__aeabi_dmul+0x41e>
    8b74:	e675      	b.n	8862 <__aeabi_dmul+0x10a>
    8b76:	3808      	subs	r0, #8
    8b78:	4085      	lsls	r5, r0
    8b7a:	2600      	movs	r6, #0
    8b7c:	46ab      	mov	fp, r5
    8b7e:	e67d      	b.n	887c <__aeabi_dmul+0x124>
    8b80:	465a      	mov	r2, fp
    8b82:	08f6      	lsrs	r6, r6, #3
    8b84:	0752      	lsls	r2, r2, #29
    8b86:	4316      	orrs	r6, r2
    8b88:	465a      	mov	r2, fp
    8b8a:	2401      	movs	r4, #1
    8b8c:	0255      	lsls	r5, r2, #9
    8b8e:	9a02      	ldr	r2, [sp, #8]
    8b90:	055b      	lsls	r3, r3, #21
    8b92:	0b2d      	lsrs	r5, r5, #12
    8b94:	0d5b      	lsrs	r3, r3, #21
    8b96:	4014      	ands	r4, r2
    8b98:	e642      	b.n	8820 <__aeabi_dmul+0xc8>
    8b9a:	4d38      	ldr	r5, [pc, #224]	; (8c7c <__aeabi_dmul+0x524>)
    8b9c:	1bed      	subs	r5, r5, r7
    8b9e:	2d38      	cmp	r5, #56	; 0x38
    8ba0:	dd0a      	ble.n	8bb8 <__aeabi_dmul+0x460>
    8ba2:	2401      	movs	r4, #1
    8ba4:	9b02      	ldr	r3, [sp, #8]
    8ba6:	2500      	movs	r5, #0
    8ba8:	401c      	ands	r4, r3
    8baa:	2600      	movs	r6, #0
    8bac:	2300      	movs	r3, #0
    8bae:	e637      	b.n	8820 <__aeabi_dmul+0xc8>
    8bb0:	9b01      	ldr	r3, [sp, #4]
    8bb2:	4657      	mov	r7, sl
    8bb4:	9302      	str	r3, [sp, #8]
    8bb6:	e791      	b.n	8adc <__aeabi_dmul+0x384>
    8bb8:	2d1f      	cmp	r5, #31
    8bba:	dc25      	bgt.n	8c08 <__aeabi_dmul+0x4b0>
    8bbc:	4b30      	ldr	r3, [pc, #192]	; (8c80 <__aeabi_dmul+0x528>)
    8bbe:	1c32      	adds	r2, r6, #0
    8bc0:	469c      	mov	ip, r3
    8bc2:	4467      	add	r7, ip
    8bc4:	40be      	lsls	r6, r7
    8bc6:	465b      	mov	r3, fp
    8bc8:	40bb      	lsls	r3, r7
    8bca:	1c37      	adds	r7, r6, #0
    8bcc:	40ea      	lsrs	r2, r5
    8bce:	1e7e      	subs	r6, r7, #1
    8bd0:	41b7      	sbcs	r7, r6
    8bd2:	4313      	orrs	r3, r2
    8bd4:	433b      	orrs	r3, r7
    8bd6:	1c1e      	adds	r6, r3, #0
    8bd8:	465b      	mov	r3, fp
    8bda:	40eb      	lsrs	r3, r5
    8bdc:	1c1d      	adds	r5, r3, #0
    8bde:	0773      	lsls	r3, r6, #29
    8be0:	d009      	beq.n	8bf6 <__aeabi_dmul+0x49e>
    8be2:	230f      	movs	r3, #15
    8be4:	4033      	ands	r3, r6
    8be6:	2b04      	cmp	r3, #4
    8be8:	d005      	beq.n	8bf6 <__aeabi_dmul+0x49e>
    8bea:	1d33      	adds	r3, r6, #4
    8bec:	42b3      	cmp	r3, r6
    8bee:	41b6      	sbcs	r6, r6
    8bf0:	4276      	negs	r6, r6
    8bf2:	19ad      	adds	r5, r5, r6
    8bf4:	1c1e      	adds	r6, r3, #0
    8bf6:	022b      	lsls	r3, r5, #8
    8bf8:	d520      	bpl.n	8c3c <__aeabi_dmul+0x4e4>
    8bfa:	2401      	movs	r4, #1
    8bfc:	9b02      	ldr	r3, [sp, #8]
    8bfe:	2500      	movs	r5, #0
    8c00:	401c      	ands	r4, r3
    8c02:	2600      	movs	r6, #0
    8c04:	2301      	movs	r3, #1
    8c06:	e60b      	b.n	8820 <__aeabi_dmul+0xc8>
    8c08:	465a      	mov	r2, fp
    8c0a:	4b1e      	ldr	r3, [pc, #120]	; (8c84 <__aeabi_dmul+0x52c>)
    8c0c:	1bdb      	subs	r3, r3, r7
    8c0e:	40da      	lsrs	r2, r3
    8c10:	1c13      	adds	r3, r2, #0
    8c12:	2d20      	cmp	r5, #32
    8c14:	d01c      	beq.n	8c50 <__aeabi_dmul+0x4f8>
    8c16:	4a1c      	ldr	r2, [pc, #112]	; (8c88 <__aeabi_dmul+0x530>)
    8c18:	4694      	mov	ip, r2
    8c1a:	465a      	mov	r2, fp
    8c1c:	4467      	add	r7, ip
    8c1e:	40ba      	lsls	r2, r7
    8c20:	1c17      	adds	r7, r2, #0
    8c22:	433e      	orrs	r6, r7
    8c24:	1e72      	subs	r2, r6, #1
    8c26:	4196      	sbcs	r6, r2
    8c28:	431e      	orrs	r6, r3
    8c2a:	2307      	movs	r3, #7
    8c2c:	2500      	movs	r5, #0
    8c2e:	4033      	ands	r3, r6
    8c30:	d007      	beq.n	8c42 <__aeabi_dmul+0x4ea>
    8c32:	230f      	movs	r3, #15
    8c34:	2500      	movs	r5, #0
    8c36:	4033      	ands	r3, r6
    8c38:	2b04      	cmp	r3, #4
    8c3a:	d1d6      	bne.n	8bea <__aeabi_dmul+0x492>
    8c3c:	076b      	lsls	r3, r5, #29
    8c3e:	026d      	lsls	r5, r5, #9
    8c40:	0b2d      	lsrs	r5, r5, #12
    8c42:	2401      	movs	r4, #1
    8c44:	08f6      	lsrs	r6, r6, #3
    8c46:	431e      	orrs	r6, r3
    8c48:	9b02      	ldr	r3, [sp, #8]
    8c4a:	401c      	ands	r4, r3
    8c4c:	2300      	movs	r3, #0
    8c4e:	e5e7      	b.n	8820 <__aeabi_dmul+0xc8>
    8c50:	2700      	movs	r7, #0
    8c52:	e7e6      	b.n	8c22 <__aeabi_dmul+0x4ca>
    8c54:	2580      	movs	r5, #128	; 0x80
    8c56:	465b      	mov	r3, fp
    8c58:	2401      	movs	r4, #1
    8c5a:	032d      	lsls	r5, r5, #12
    8c5c:	431d      	orrs	r5, r3
    8c5e:	9b01      	ldr	r3, [sp, #4]
    8c60:	032d      	lsls	r5, r5, #12
    8c62:	4023      	ands	r3, r4
    8c64:	1c1c      	adds	r4, r3, #0
    8c66:	0b2d      	lsrs	r5, r5, #12
    8c68:	4b03      	ldr	r3, [pc, #12]	; (8c78 <__aeabi_dmul+0x520>)
    8c6a:	e5d9      	b.n	8820 <__aeabi_dmul+0xc8>
    8c6c:	000003ff 	.word	0x000003ff
    8c70:	feffffff 	.word	0xfeffffff
    8c74:	000007fe 	.word	0x000007fe
    8c78:	000007ff 	.word	0x000007ff
    8c7c:	fffffc02 	.word	0xfffffc02
    8c80:	0000041e 	.word	0x0000041e
    8c84:	fffffbe2 	.word	0xfffffbe2
    8c88:	0000043e 	.word	0x0000043e

00008c8c <__aeabi_dsub>:
    8c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8c8e:	464d      	mov	r5, r9
    8c90:	4644      	mov	r4, r8
    8c92:	465f      	mov	r7, fp
    8c94:	4656      	mov	r6, sl
    8c96:	b4f0      	push	{r4, r5, r6, r7}
    8c98:	1c0e      	adds	r6, r1, #0
    8c9a:	1c11      	adds	r1, r2, #0
    8c9c:	0332      	lsls	r2, r6, #12
    8c9e:	0a52      	lsrs	r2, r2, #9
    8ca0:	0f47      	lsrs	r7, r0, #29
    8ca2:	4317      	orrs	r7, r2
    8ca4:	00c5      	lsls	r5, r0, #3
    8ca6:	031a      	lsls	r2, r3, #12
    8ca8:	0058      	lsls	r0, r3, #1
    8caa:	0fdb      	lsrs	r3, r3, #31
    8cac:	4699      	mov	r9, r3
    8cae:	0a52      	lsrs	r2, r2, #9
    8cb0:	0f4b      	lsrs	r3, r1, #29
    8cb2:	b083      	sub	sp, #12
    8cb4:	431a      	orrs	r2, r3
    8cb6:	00cb      	lsls	r3, r1, #3
    8cb8:	9301      	str	r3, [sp, #4]
    8cba:	4bcf      	ldr	r3, [pc, #828]	; (8ff8 <__aeabi_dsub+0x36c>)
    8cbc:	0074      	lsls	r4, r6, #1
    8cbe:	0ff6      	lsrs	r6, r6, #31
    8cc0:	0d64      	lsrs	r4, r4, #21
    8cc2:	46b0      	mov	r8, r6
    8cc4:	0d40      	lsrs	r0, r0, #21
    8cc6:	4298      	cmp	r0, r3
    8cc8:	d100      	bne.n	8ccc <__aeabi_dsub+0x40>
    8cca:	e0e8      	b.n	8e9e <__aeabi_dsub+0x212>
    8ccc:	2301      	movs	r3, #1
    8cce:	4649      	mov	r1, r9
    8cd0:	4059      	eors	r1, r3
    8cd2:	1c0b      	adds	r3, r1, #0
    8cd4:	429e      	cmp	r6, r3
    8cd6:	d100      	bne.n	8cda <__aeabi_dsub+0x4e>
    8cd8:	e0b1      	b.n	8e3e <__aeabi_dsub+0x1b2>
    8cda:	1a26      	subs	r6, r4, r0
    8cdc:	2e00      	cmp	r6, #0
    8cde:	dc00      	bgt.n	8ce2 <__aeabi_dsub+0x56>
    8ce0:	e11c      	b.n	8f1c <__aeabi_dsub+0x290>
    8ce2:	2800      	cmp	r0, #0
    8ce4:	d142      	bne.n	8d6c <__aeabi_dsub+0xe0>
    8ce6:	1c13      	adds	r3, r2, #0
    8ce8:	9901      	ldr	r1, [sp, #4]
    8cea:	430b      	orrs	r3, r1
    8cec:	d000      	beq.n	8cf0 <__aeabi_dsub+0x64>
    8cee:	e0e6      	b.n	8ebe <__aeabi_dsub+0x232>
    8cf0:	076b      	lsls	r3, r5, #29
    8cf2:	d100      	bne.n	8cf6 <__aeabi_dsub+0x6a>
    8cf4:	e08e      	b.n	8e14 <__aeabi_dsub+0x188>
    8cf6:	230f      	movs	r3, #15
    8cf8:	402b      	ands	r3, r5
    8cfa:	2b04      	cmp	r3, #4
    8cfc:	d100      	bne.n	8d00 <__aeabi_dsub+0x74>
    8cfe:	e089      	b.n	8e14 <__aeabi_dsub+0x188>
    8d00:	1d2a      	adds	r2, r5, #4
    8d02:	42aa      	cmp	r2, r5
    8d04:	41ad      	sbcs	r5, r5
    8d06:	2380      	movs	r3, #128	; 0x80
    8d08:	2601      	movs	r6, #1
    8d0a:	4641      	mov	r1, r8
    8d0c:	426d      	negs	r5, r5
    8d0e:	197f      	adds	r7, r7, r5
    8d10:	041b      	lsls	r3, r3, #16
    8d12:	403b      	ands	r3, r7
    8d14:	400e      	ands	r6, r1
    8d16:	1c15      	adds	r5, r2, #0
    8d18:	2b00      	cmp	r3, #0
    8d1a:	d100      	bne.n	8d1e <__aeabi_dsub+0x92>
    8d1c:	e083      	b.n	8e26 <__aeabi_dsub+0x19a>
    8d1e:	4bb6      	ldr	r3, [pc, #728]	; (8ff8 <__aeabi_dsub+0x36c>)
    8d20:	3401      	adds	r4, #1
    8d22:	429c      	cmp	r4, r3
    8d24:	d100      	bne.n	8d28 <__aeabi_dsub+0x9c>
    8d26:	e116      	b.n	8f56 <__aeabi_dsub+0x2ca>
    8d28:	1c3a      	adds	r2, r7, #0
    8d2a:	4bb4      	ldr	r3, [pc, #720]	; (8ffc <__aeabi_dsub+0x370>)
    8d2c:	08ed      	lsrs	r5, r5, #3
    8d2e:	401a      	ands	r2, r3
    8d30:	0750      	lsls	r0, r2, #29
    8d32:	0564      	lsls	r4, r4, #21
    8d34:	0252      	lsls	r2, r2, #9
    8d36:	4305      	orrs	r5, r0
    8d38:	0b12      	lsrs	r2, r2, #12
    8d3a:	0d64      	lsrs	r4, r4, #21
    8d3c:	2100      	movs	r1, #0
    8d3e:	0312      	lsls	r2, r2, #12
    8d40:	0d0b      	lsrs	r3, r1, #20
    8d42:	051b      	lsls	r3, r3, #20
    8d44:	0564      	lsls	r4, r4, #21
    8d46:	0b12      	lsrs	r2, r2, #12
    8d48:	431a      	orrs	r2, r3
    8d4a:	0863      	lsrs	r3, r4, #1
    8d4c:	4cac      	ldr	r4, [pc, #688]	; (9000 <__aeabi_dsub+0x374>)
    8d4e:	07f6      	lsls	r6, r6, #31
    8d50:	4014      	ands	r4, r2
    8d52:	431c      	orrs	r4, r3
    8d54:	0064      	lsls	r4, r4, #1
    8d56:	0864      	lsrs	r4, r4, #1
    8d58:	4334      	orrs	r4, r6
    8d5a:	1c28      	adds	r0, r5, #0
    8d5c:	1c21      	adds	r1, r4, #0
    8d5e:	b003      	add	sp, #12
    8d60:	bc3c      	pop	{r2, r3, r4, r5}
    8d62:	4690      	mov	r8, r2
    8d64:	4699      	mov	r9, r3
    8d66:	46a2      	mov	sl, r4
    8d68:	46ab      	mov	fp, r5
    8d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8d6c:	4ba2      	ldr	r3, [pc, #648]	; (8ff8 <__aeabi_dsub+0x36c>)
    8d6e:	429c      	cmp	r4, r3
    8d70:	d0be      	beq.n	8cf0 <__aeabi_dsub+0x64>
    8d72:	2380      	movs	r3, #128	; 0x80
    8d74:	041b      	lsls	r3, r3, #16
    8d76:	431a      	orrs	r2, r3
    8d78:	2e38      	cmp	r6, #56	; 0x38
    8d7a:	dd00      	ble.n	8d7e <__aeabi_dsub+0xf2>
    8d7c:	e103      	b.n	8f86 <__aeabi_dsub+0x2fa>
    8d7e:	2e1f      	cmp	r6, #31
    8d80:	dd00      	ble.n	8d84 <__aeabi_dsub+0xf8>
    8d82:	e13f      	b.n	9004 <__aeabi_dsub+0x378>
    8d84:	2020      	movs	r0, #32
    8d86:	1b83      	subs	r3, r0, r6
    8d88:	4699      	mov	r9, r3
    8d8a:	1c13      	adds	r3, r2, #0
    8d8c:	4649      	mov	r1, r9
    8d8e:	408b      	lsls	r3, r1
    8d90:	469c      	mov	ip, r3
    8d92:	9b01      	ldr	r3, [sp, #4]
    8d94:	4660      	mov	r0, ip
    8d96:	40f3      	lsrs	r3, r6
    8d98:	4303      	orrs	r3, r0
    8d9a:	9801      	ldr	r0, [sp, #4]
    8d9c:	40f2      	lsrs	r2, r6
    8d9e:	4088      	lsls	r0, r1
    8da0:	1c01      	adds	r1, r0, #0
    8da2:	1e48      	subs	r0, r1, #1
    8da4:	4181      	sbcs	r1, r0
    8da6:	430b      	orrs	r3, r1
    8da8:	1aeb      	subs	r3, r5, r3
    8daa:	429d      	cmp	r5, r3
    8dac:	4180      	sbcs	r0, r0
    8dae:	1c1d      	adds	r5, r3, #0
    8db0:	1aba      	subs	r2, r7, r2
    8db2:	4240      	negs	r0, r0
    8db4:	1a17      	subs	r7, r2, r0
    8db6:	023b      	lsls	r3, r7, #8
    8db8:	d400      	bmi.n	8dbc <__aeabi_dsub+0x130>
    8dba:	e0a8      	b.n	8f0e <__aeabi_dsub+0x282>
    8dbc:	027a      	lsls	r2, r7, #9
    8dbe:	0a56      	lsrs	r6, r2, #9
    8dc0:	2e00      	cmp	r6, #0
    8dc2:	d100      	bne.n	8dc6 <__aeabi_dsub+0x13a>
    8dc4:	e0ca      	b.n	8f5c <__aeabi_dsub+0x2d0>
    8dc6:	1c30      	adds	r0, r6, #0
    8dc8:	f000 fc62 	bl	9690 <__clzsi2>
    8dcc:	1c03      	adds	r3, r0, #0
    8dce:	3b08      	subs	r3, #8
    8dd0:	2b1f      	cmp	r3, #31
    8dd2:	dd00      	ble.n	8dd6 <__aeabi_dsub+0x14a>
    8dd4:	e0cb      	b.n	8f6e <__aeabi_dsub+0x2e2>
    8dd6:	2228      	movs	r2, #40	; 0x28
    8dd8:	1c29      	adds	r1, r5, #0
    8dda:	1a12      	subs	r2, r2, r0
    8ddc:	40d1      	lsrs	r1, r2
    8dde:	409e      	lsls	r6, r3
    8de0:	1c0a      	adds	r2, r1, #0
    8de2:	409d      	lsls	r5, r3
    8de4:	4332      	orrs	r2, r6
    8de6:	429c      	cmp	r4, r3
    8de8:	dd00      	ble.n	8dec <__aeabi_dsub+0x160>
    8dea:	e0c8      	b.n	8f7e <__aeabi_dsub+0x2f2>
    8dec:	1b1c      	subs	r4, r3, r4
    8dee:	1c67      	adds	r7, r4, #1
    8df0:	2f1f      	cmp	r7, #31
    8df2:	dd00      	ble.n	8df6 <__aeabi_dsub+0x16a>
    8df4:	e0ed      	b.n	8fd2 <__aeabi_dsub+0x346>
    8df6:	231f      	movs	r3, #31
    8df8:	1c29      	adds	r1, r5, #0
    8dfa:	1b1c      	subs	r4, r3, r4
    8dfc:	1c13      	adds	r3, r2, #0
    8dfe:	40a5      	lsls	r5, r4
    8e00:	40a3      	lsls	r3, r4
    8e02:	40f9      	lsrs	r1, r7
    8e04:	1e6c      	subs	r4, r5, #1
    8e06:	41a5      	sbcs	r5, r4
    8e08:	40fa      	lsrs	r2, r7
    8e0a:	4319      	orrs	r1, r3
    8e0c:	430d      	orrs	r5, r1
    8e0e:	1c17      	adds	r7, r2, #0
    8e10:	2400      	movs	r4, #0
    8e12:	e76d      	b.n	8cf0 <__aeabi_dsub+0x64>
    8e14:	2380      	movs	r3, #128	; 0x80
    8e16:	2601      	movs	r6, #1
    8e18:	4642      	mov	r2, r8
    8e1a:	041b      	lsls	r3, r3, #16
    8e1c:	403b      	ands	r3, r7
    8e1e:	4016      	ands	r6, r2
    8e20:	2b00      	cmp	r3, #0
    8e22:	d000      	beq.n	8e26 <__aeabi_dsub+0x19a>
    8e24:	e77b      	b.n	8d1e <__aeabi_dsub+0x92>
    8e26:	4b74      	ldr	r3, [pc, #464]	; (8ff8 <__aeabi_dsub+0x36c>)
    8e28:	08ed      	lsrs	r5, r5, #3
    8e2a:	0778      	lsls	r0, r7, #29
    8e2c:	4305      	orrs	r5, r0
    8e2e:	08fa      	lsrs	r2, r7, #3
    8e30:	429c      	cmp	r4, r3
    8e32:	d03b      	beq.n	8eac <__aeabi_dsub+0x220>
    8e34:	0312      	lsls	r2, r2, #12
    8e36:	0564      	lsls	r4, r4, #21
    8e38:	0b12      	lsrs	r2, r2, #12
    8e3a:	0d64      	lsrs	r4, r4, #21
    8e3c:	e77e      	b.n	8d3c <__aeabi_dsub+0xb0>
    8e3e:	1a23      	subs	r3, r4, r0
    8e40:	469a      	mov	sl, r3
    8e42:	2b00      	cmp	r3, #0
    8e44:	dc00      	bgt.n	8e48 <__aeabi_dsub+0x1bc>
    8e46:	e0a5      	b.n	8f94 <__aeabi_dsub+0x308>
    8e48:	2800      	cmp	r0, #0
    8e4a:	d044      	beq.n	8ed6 <__aeabi_dsub+0x24a>
    8e4c:	486a      	ldr	r0, [pc, #424]	; (8ff8 <__aeabi_dsub+0x36c>)
    8e4e:	4284      	cmp	r4, r0
    8e50:	d100      	bne.n	8e54 <__aeabi_dsub+0x1c8>
    8e52:	e74d      	b.n	8cf0 <__aeabi_dsub+0x64>
    8e54:	2080      	movs	r0, #128	; 0x80
    8e56:	0400      	lsls	r0, r0, #16
    8e58:	4302      	orrs	r2, r0
    8e5a:	4653      	mov	r3, sl
    8e5c:	2b38      	cmp	r3, #56	; 0x38
    8e5e:	dc00      	bgt.n	8e62 <__aeabi_dsub+0x1d6>
    8e60:	e11c      	b.n	909c <__aeabi_dsub+0x410>
    8e62:	9b01      	ldr	r3, [sp, #4]
    8e64:	431a      	orrs	r2, r3
    8e66:	1e51      	subs	r1, r2, #1
    8e68:	418a      	sbcs	r2, r1
    8e6a:	b2d1      	uxtb	r1, r2
    8e6c:	2200      	movs	r2, #0
    8e6e:	1949      	adds	r1, r1, r5
    8e70:	42a9      	cmp	r1, r5
    8e72:	4180      	sbcs	r0, r0
    8e74:	1c0d      	adds	r5, r1, #0
    8e76:	19d2      	adds	r2, r2, r7
    8e78:	4240      	negs	r0, r0
    8e7a:	1817      	adds	r7, r2, r0
    8e7c:	023b      	lsls	r3, r7, #8
    8e7e:	d546      	bpl.n	8f0e <__aeabi_dsub+0x282>
    8e80:	4b5d      	ldr	r3, [pc, #372]	; (8ff8 <__aeabi_dsub+0x36c>)
    8e82:	3401      	adds	r4, #1
    8e84:	429c      	cmp	r4, r3
    8e86:	d100      	bne.n	8e8a <__aeabi_dsub+0x1fe>
    8e88:	e169      	b.n	915e <__aeabi_dsub+0x4d2>
    8e8a:	2001      	movs	r0, #1
    8e8c:	4a5b      	ldr	r2, [pc, #364]	; (8ffc <__aeabi_dsub+0x370>)
    8e8e:	086b      	lsrs	r3, r5, #1
    8e90:	403a      	ands	r2, r7
    8e92:	4028      	ands	r0, r5
    8e94:	4318      	orrs	r0, r3
    8e96:	07d5      	lsls	r5, r2, #31
    8e98:	4305      	orrs	r5, r0
    8e9a:	0857      	lsrs	r7, r2, #1
    8e9c:	e728      	b.n	8cf0 <__aeabi_dsub+0x64>
    8e9e:	1c13      	adds	r3, r2, #0
    8ea0:	9901      	ldr	r1, [sp, #4]
    8ea2:	430b      	orrs	r3, r1
    8ea4:	d100      	bne.n	8ea8 <__aeabi_dsub+0x21c>
    8ea6:	e711      	b.n	8ccc <__aeabi_dsub+0x40>
    8ea8:	464b      	mov	r3, r9
    8eaa:	e713      	b.n	8cd4 <__aeabi_dsub+0x48>
    8eac:	1c2b      	adds	r3, r5, #0
    8eae:	4313      	orrs	r3, r2
    8eb0:	d051      	beq.n	8f56 <__aeabi_dsub+0x2ca>
    8eb2:	2380      	movs	r3, #128	; 0x80
    8eb4:	031b      	lsls	r3, r3, #12
    8eb6:	431a      	orrs	r2, r3
    8eb8:	0312      	lsls	r2, r2, #12
    8eba:	0b12      	lsrs	r2, r2, #12
    8ebc:	e73e      	b.n	8d3c <__aeabi_dsub+0xb0>
    8ebe:	3e01      	subs	r6, #1
    8ec0:	2e00      	cmp	r6, #0
    8ec2:	d000      	beq.n	8ec6 <__aeabi_dsub+0x23a>
    8ec4:	e080      	b.n	8fc8 <__aeabi_dsub+0x33c>
    8ec6:	1a69      	subs	r1, r5, r1
    8ec8:	428d      	cmp	r5, r1
    8eca:	419b      	sbcs	r3, r3
    8ecc:	1aba      	subs	r2, r7, r2
    8ece:	425b      	negs	r3, r3
    8ed0:	1ad7      	subs	r7, r2, r3
    8ed2:	1c0d      	adds	r5, r1, #0
    8ed4:	e76f      	b.n	8db6 <__aeabi_dsub+0x12a>
    8ed6:	1c10      	adds	r0, r2, #0
    8ed8:	9b01      	ldr	r3, [sp, #4]
    8eda:	4318      	orrs	r0, r3
    8edc:	d100      	bne.n	8ee0 <__aeabi_dsub+0x254>
    8ede:	e707      	b.n	8cf0 <__aeabi_dsub+0x64>
    8ee0:	2301      	movs	r3, #1
    8ee2:	425b      	negs	r3, r3
    8ee4:	469c      	mov	ip, r3
    8ee6:	44e2      	add	sl, ip
    8ee8:	4653      	mov	r3, sl
    8eea:	2b00      	cmp	r3, #0
    8eec:	d000      	beq.n	8ef0 <__aeabi_dsub+0x264>
    8eee:	e102      	b.n	90f6 <__aeabi_dsub+0x46a>
    8ef0:	9b01      	ldr	r3, [sp, #4]
    8ef2:	19d2      	adds	r2, r2, r7
    8ef4:	1959      	adds	r1, r3, r5
    8ef6:	42a9      	cmp	r1, r5
    8ef8:	419b      	sbcs	r3, r3
    8efa:	425b      	negs	r3, r3
    8efc:	18d7      	adds	r7, r2, r3
    8efe:	1c0d      	adds	r5, r1, #0
    8f00:	e7bc      	b.n	8e7c <__aeabi_dsub+0x1f0>
    8f02:	4663      	mov	r3, ip
    8f04:	4303      	orrs	r3, r0
    8f06:	d100      	bne.n	8f0a <__aeabi_dsub+0x27e>
    8f08:	e128      	b.n	915c <__aeabi_dsub+0x4d0>
    8f0a:	1c07      	adds	r7, r0, #0
    8f0c:	4665      	mov	r5, ip
    8f0e:	076b      	lsls	r3, r5, #29
    8f10:	d000      	beq.n	8f14 <__aeabi_dsub+0x288>
    8f12:	e6f0      	b.n	8cf6 <__aeabi_dsub+0x6a>
    8f14:	2601      	movs	r6, #1
    8f16:	4643      	mov	r3, r8
    8f18:	401e      	ands	r6, r3
    8f1a:	e784      	b.n	8e26 <__aeabi_dsub+0x19a>
    8f1c:	2e00      	cmp	r6, #0
    8f1e:	d000      	beq.n	8f22 <__aeabi_dsub+0x296>
    8f20:	e081      	b.n	9026 <__aeabi_dsub+0x39a>
    8f22:	1c60      	adds	r0, r4, #1
    8f24:	0540      	lsls	r0, r0, #21
    8f26:	0d40      	lsrs	r0, r0, #21
    8f28:	2801      	cmp	r0, #1
    8f2a:	dc00      	bgt.n	8f2e <__aeabi_dsub+0x2a2>
    8f2c:	e107      	b.n	913e <__aeabi_dsub+0x4b2>
    8f2e:	9901      	ldr	r1, [sp, #4]
    8f30:	1a68      	subs	r0, r5, r1
    8f32:	4684      	mov	ip, r0
    8f34:	4565      	cmp	r5, ip
    8f36:	41b6      	sbcs	r6, r6
    8f38:	1ab8      	subs	r0, r7, r2
    8f3a:	4276      	negs	r6, r6
    8f3c:	1b86      	subs	r6, r0, r6
    8f3e:	0230      	lsls	r0, r6, #8
    8f40:	d400      	bmi.n	8f44 <__aeabi_dsub+0x2b8>
    8f42:	e0a1      	b.n	9088 <__aeabi_dsub+0x3fc>
    8f44:	468c      	mov	ip, r1
    8f46:	1b4d      	subs	r5, r1, r5
    8f48:	45ac      	cmp	ip, r5
    8f4a:	4189      	sbcs	r1, r1
    8f4c:	1bd2      	subs	r2, r2, r7
    8f4e:	4249      	negs	r1, r1
    8f50:	1a56      	subs	r6, r2, r1
    8f52:	4698      	mov	r8, r3
    8f54:	e734      	b.n	8dc0 <__aeabi_dsub+0x134>
    8f56:	2200      	movs	r2, #0
    8f58:	2500      	movs	r5, #0
    8f5a:	e6ef      	b.n	8d3c <__aeabi_dsub+0xb0>
    8f5c:	1c28      	adds	r0, r5, #0
    8f5e:	f000 fb97 	bl	9690 <__clzsi2>
    8f62:	3020      	adds	r0, #32
    8f64:	1c03      	adds	r3, r0, #0
    8f66:	3b08      	subs	r3, #8
    8f68:	2b1f      	cmp	r3, #31
    8f6a:	dc00      	bgt.n	8f6e <__aeabi_dsub+0x2e2>
    8f6c:	e733      	b.n	8dd6 <__aeabi_dsub+0x14a>
    8f6e:	1c02      	adds	r2, r0, #0
    8f70:	3a28      	subs	r2, #40	; 0x28
    8f72:	4095      	lsls	r5, r2
    8f74:	1c2a      	adds	r2, r5, #0
    8f76:	2500      	movs	r5, #0
    8f78:	429c      	cmp	r4, r3
    8f7a:	dc00      	bgt.n	8f7e <__aeabi_dsub+0x2f2>
    8f7c:	e736      	b.n	8dec <__aeabi_dsub+0x160>
    8f7e:	4f1f      	ldr	r7, [pc, #124]	; (8ffc <__aeabi_dsub+0x370>)
    8f80:	1ae4      	subs	r4, r4, r3
    8f82:	4017      	ands	r7, r2
    8f84:	e6b4      	b.n	8cf0 <__aeabi_dsub+0x64>
    8f86:	9b01      	ldr	r3, [sp, #4]
    8f88:	431a      	orrs	r2, r3
    8f8a:	1e51      	subs	r1, r2, #1
    8f8c:	418a      	sbcs	r2, r1
    8f8e:	b2d3      	uxtb	r3, r2
    8f90:	2200      	movs	r2, #0
    8f92:	e709      	b.n	8da8 <__aeabi_dsub+0x11c>
    8f94:	2b00      	cmp	r3, #0
    8f96:	d000      	beq.n	8f9a <__aeabi_dsub+0x30e>
    8f98:	e101      	b.n	919e <__aeabi_dsub+0x512>
    8f9a:	1c60      	adds	r0, r4, #1
    8f9c:	0543      	lsls	r3, r0, #21
    8f9e:	0d5b      	lsrs	r3, r3, #21
    8fa0:	2b01      	cmp	r3, #1
    8fa2:	dc00      	bgt.n	8fa6 <__aeabi_dsub+0x31a>
    8fa4:	e0b0      	b.n	9108 <__aeabi_dsub+0x47c>
    8fa6:	4b14      	ldr	r3, [pc, #80]	; (8ff8 <__aeabi_dsub+0x36c>)
    8fa8:	4298      	cmp	r0, r3
    8faa:	d100      	bne.n	8fae <__aeabi_dsub+0x322>
    8fac:	e11e      	b.n	91ec <__aeabi_dsub+0x560>
    8fae:	9b01      	ldr	r3, [sp, #4]
    8fb0:	19d2      	adds	r2, r2, r7
    8fb2:	1959      	adds	r1, r3, r5
    8fb4:	42a9      	cmp	r1, r5
    8fb6:	419b      	sbcs	r3, r3
    8fb8:	425b      	negs	r3, r3
    8fba:	18d2      	adds	r2, r2, r3
    8fbc:	0849      	lsrs	r1, r1, #1
    8fbe:	07d5      	lsls	r5, r2, #31
    8fc0:	430d      	orrs	r5, r1
    8fc2:	0857      	lsrs	r7, r2, #1
    8fc4:	1c04      	adds	r4, r0, #0
    8fc6:	e693      	b.n	8cf0 <__aeabi_dsub+0x64>
    8fc8:	4b0b      	ldr	r3, [pc, #44]	; (8ff8 <__aeabi_dsub+0x36c>)
    8fca:	429c      	cmp	r4, r3
    8fcc:	d000      	beq.n	8fd0 <__aeabi_dsub+0x344>
    8fce:	e6d3      	b.n	8d78 <__aeabi_dsub+0xec>
    8fd0:	e68e      	b.n	8cf0 <__aeabi_dsub+0x64>
    8fd2:	1c21      	adds	r1, r4, #0
    8fd4:	1c13      	adds	r3, r2, #0
    8fd6:	391f      	subs	r1, #31
    8fd8:	40cb      	lsrs	r3, r1
    8fda:	1c19      	adds	r1, r3, #0
    8fdc:	2f20      	cmp	r7, #32
    8fde:	d100      	bne.n	8fe2 <__aeabi_dsub+0x356>
    8fe0:	e08e      	b.n	9100 <__aeabi_dsub+0x474>
    8fe2:	233f      	movs	r3, #63	; 0x3f
    8fe4:	1b1c      	subs	r4, r3, r4
    8fe6:	40a2      	lsls	r2, r4
    8fe8:	4315      	orrs	r5, r2
    8fea:	1e6a      	subs	r2, r5, #1
    8fec:	4195      	sbcs	r5, r2
    8fee:	2700      	movs	r7, #0
    8ff0:	430d      	orrs	r5, r1
    8ff2:	2400      	movs	r4, #0
    8ff4:	e78b      	b.n	8f0e <__aeabi_dsub+0x282>
    8ff6:	46c0      	nop			; (mov r8, r8)
    8ff8:	000007ff 	.word	0x000007ff
    8ffc:	ff7fffff 	.word	0xff7fffff
    9000:	800fffff 	.word	0x800fffff
    9004:	1c33      	adds	r3, r6, #0
    9006:	1c10      	adds	r0, r2, #0
    9008:	3b20      	subs	r3, #32
    900a:	40d8      	lsrs	r0, r3
    900c:	2e20      	cmp	r6, #32
    900e:	d079      	beq.n	9104 <__aeabi_dsub+0x478>
    9010:	2340      	movs	r3, #64	; 0x40
    9012:	1b9b      	subs	r3, r3, r6
    9014:	409a      	lsls	r2, r3
    9016:	1c13      	adds	r3, r2, #0
    9018:	9a01      	ldr	r2, [sp, #4]
    901a:	4313      	orrs	r3, r2
    901c:	1e59      	subs	r1, r3, #1
    901e:	418b      	sbcs	r3, r1
    9020:	2200      	movs	r2, #0
    9022:	4303      	orrs	r3, r0
    9024:	e6c0      	b.n	8da8 <__aeabi_dsub+0x11c>
    9026:	2c00      	cmp	r4, #0
    9028:	d053      	beq.n	90d2 <__aeabi_dsub+0x446>
    902a:	4cc7      	ldr	r4, [pc, #796]	; (9348 <__aeabi_dsub+0x6bc>)
    902c:	42a0      	cmp	r0, r4
    902e:	d100      	bne.n	9032 <__aeabi_dsub+0x3a6>
    9030:	e0b0      	b.n	9194 <__aeabi_dsub+0x508>
    9032:	2480      	movs	r4, #128	; 0x80
    9034:	4271      	negs	r1, r6
    9036:	4689      	mov	r9, r1
    9038:	0424      	lsls	r4, r4, #16
    903a:	4327      	orrs	r7, r4
    903c:	4649      	mov	r1, r9
    903e:	2938      	cmp	r1, #56	; 0x38
    9040:	dd00      	ble.n	9044 <__aeabi_dsub+0x3b8>
    9042:	e0cd      	b.n	91e0 <__aeabi_dsub+0x554>
    9044:	291f      	cmp	r1, #31
    9046:	dd00      	ble.n	904a <__aeabi_dsub+0x3be>
    9048:	e159      	b.n	92fe <__aeabi_dsub+0x672>
    904a:	2420      	movs	r4, #32
    904c:	1c3e      	adds	r6, r7, #0
    904e:	1a61      	subs	r1, r4, r1
    9050:	408e      	lsls	r6, r1
    9052:	468a      	mov	sl, r1
    9054:	46b0      	mov	r8, r6
    9056:	4649      	mov	r1, r9
    9058:	1c2e      	adds	r6, r5, #0
    905a:	40ce      	lsrs	r6, r1
    905c:	4651      	mov	r1, sl
    905e:	46b4      	mov	ip, r6
    9060:	408d      	lsls	r5, r1
    9062:	4664      	mov	r4, ip
    9064:	4646      	mov	r6, r8
    9066:	4649      	mov	r1, r9
    9068:	4326      	orrs	r6, r4
    906a:	1e6c      	subs	r4, r5, #1
    906c:	41a5      	sbcs	r5, r4
    906e:	40cf      	lsrs	r7, r1
    9070:	4335      	orrs	r5, r6
    9072:	9901      	ldr	r1, [sp, #4]
    9074:	1bd7      	subs	r7, r2, r7
    9076:	468c      	mov	ip, r1
    9078:	1b4d      	subs	r5, r1, r5
    907a:	45ac      	cmp	ip, r5
    907c:	4192      	sbcs	r2, r2
    907e:	4252      	negs	r2, r2
    9080:	1abf      	subs	r7, r7, r2
    9082:	1c04      	adds	r4, r0, #0
    9084:	4698      	mov	r8, r3
    9086:	e696      	b.n	8db6 <__aeabi_dsub+0x12a>
    9088:	4663      	mov	r3, ip
    908a:	4665      	mov	r5, ip
    908c:	4333      	orrs	r3, r6
    908e:	d000      	beq.n	9092 <__aeabi_dsub+0x406>
    9090:	e696      	b.n	8dc0 <__aeabi_dsub+0x134>
    9092:	2600      	movs	r6, #0
    9094:	2700      	movs	r7, #0
    9096:	2400      	movs	r4, #0
    9098:	2500      	movs	r5, #0
    909a:	e6c4      	b.n	8e26 <__aeabi_dsub+0x19a>
    909c:	2b1f      	cmp	r3, #31
    909e:	dc61      	bgt.n	9164 <__aeabi_dsub+0x4d8>
    90a0:	2020      	movs	r0, #32
    90a2:	1ac3      	subs	r3, r0, r3
    90a4:	469b      	mov	fp, r3
    90a6:	1c13      	adds	r3, r2, #0
    90a8:	4659      	mov	r1, fp
    90aa:	408b      	lsls	r3, r1
    90ac:	4651      	mov	r1, sl
    90ae:	4699      	mov	r9, r3
    90b0:	9b01      	ldr	r3, [sp, #4]
    90b2:	40cb      	lsrs	r3, r1
    90b4:	469c      	mov	ip, r3
    90b6:	464b      	mov	r3, r9
    90b8:	4660      	mov	r0, ip
    90ba:	4303      	orrs	r3, r0
    90bc:	469c      	mov	ip, r3
    90be:	465b      	mov	r3, fp
    90c0:	9901      	ldr	r1, [sp, #4]
    90c2:	4099      	lsls	r1, r3
    90c4:	4663      	mov	r3, ip
    90c6:	1e48      	subs	r0, r1, #1
    90c8:	4181      	sbcs	r1, r0
    90ca:	4319      	orrs	r1, r3
    90cc:	4653      	mov	r3, sl
    90ce:	40da      	lsrs	r2, r3
    90d0:	e6cd      	b.n	8e6e <__aeabi_dsub+0x1e2>
    90d2:	1c3c      	adds	r4, r7, #0
    90d4:	432c      	orrs	r4, r5
    90d6:	d05d      	beq.n	9194 <__aeabi_dsub+0x508>
    90d8:	43f1      	mvns	r1, r6
    90da:	4689      	mov	r9, r1
    90dc:	2900      	cmp	r1, #0
    90de:	d155      	bne.n	918c <__aeabi_dsub+0x500>
    90e0:	9901      	ldr	r1, [sp, #4]
    90e2:	1bd2      	subs	r2, r2, r7
    90e4:	468c      	mov	ip, r1
    90e6:	1b4d      	subs	r5, r1, r5
    90e8:	45ac      	cmp	ip, r5
    90ea:	4189      	sbcs	r1, r1
    90ec:	4249      	negs	r1, r1
    90ee:	1a57      	subs	r7, r2, r1
    90f0:	1c04      	adds	r4, r0, #0
    90f2:	4698      	mov	r8, r3
    90f4:	e65f      	b.n	8db6 <__aeabi_dsub+0x12a>
    90f6:	4894      	ldr	r0, [pc, #592]	; (9348 <__aeabi_dsub+0x6bc>)
    90f8:	4284      	cmp	r4, r0
    90fa:	d000      	beq.n	90fe <__aeabi_dsub+0x472>
    90fc:	e6ad      	b.n	8e5a <__aeabi_dsub+0x1ce>
    90fe:	e5f7      	b.n	8cf0 <__aeabi_dsub+0x64>
    9100:	2200      	movs	r2, #0
    9102:	e771      	b.n	8fe8 <__aeabi_dsub+0x35c>
    9104:	2300      	movs	r3, #0
    9106:	e787      	b.n	9018 <__aeabi_dsub+0x38c>
    9108:	1c3b      	adds	r3, r7, #0
    910a:	432b      	orrs	r3, r5
    910c:	2c00      	cmp	r4, #0
    910e:	d000      	beq.n	9112 <__aeabi_dsub+0x486>
    9110:	e0da      	b.n	92c8 <__aeabi_dsub+0x63c>
    9112:	2b00      	cmp	r3, #0
    9114:	d100      	bne.n	9118 <__aeabi_dsub+0x48c>
    9116:	e113      	b.n	9340 <__aeabi_dsub+0x6b4>
    9118:	1c13      	adds	r3, r2, #0
    911a:	9901      	ldr	r1, [sp, #4]
    911c:	430b      	orrs	r3, r1
    911e:	d100      	bne.n	9122 <__aeabi_dsub+0x496>
    9120:	e5e6      	b.n	8cf0 <__aeabi_dsub+0x64>
    9122:	1949      	adds	r1, r1, r5
    9124:	42a9      	cmp	r1, r5
    9126:	419b      	sbcs	r3, r3
    9128:	19d2      	adds	r2, r2, r7
    912a:	425b      	negs	r3, r3
    912c:	18d7      	adds	r7, r2, r3
    912e:	023b      	lsls	r3, r7, #8
    9130:	d400      	bmi.n	9134 <__aeabi_dsub+0x4a8>
    9132:	e121      	b.n	9378 <__aeabi_dsub+0x6ec>
    9134:	4b85      	ldr	r3, [pc, #532]	; (934c <__aeabi_dsub+0x6c0>)
    9136:	1c0d      	adds	r5, r1, #0
    9138:	401f      	ands	r7, r3
    913a:	1c04      	adds	r4, r0, #0
    913c:	e5d8      	b.n	8cf0 <__aeabi_dsub+0x64>
    913e:	1c38      	adds	r0, r7, #0
    9140:	4328      	orrs	r0, r5
    9142:	2c00      	cmp	r4, #0
    9144:	d140      	bne.n	91c8 <__aeabi_dsub+0x53c>
    9146:	2800      	cmp	r0, #0
    9148:	d000      	beq.n	914c <__aeabi_dsub+0x4c0>
    914a:	e083      	b.n	9254 <__aeabi_dsub+0x5c8>
    914c:	1c10      	adds	r0, r2, #0
    914e:	9901      	ldr	r1, [sp, #4]
    9150:	4308      	orrs	r0, r1
    9152:	d003      	beq.n	915c <__aeabi_dsub+0x4d0>
    9154:	1c17      	adds	r7, r2, #0
    9156:	1c0d      	adds	r5, r1, #0
    9158:	4698      	mov	r8, r3
    915a:	e5c9      	b.n	8cf0 <__aeabi_dsub+0x64>
    915c:	2600      	movs	r6, #0
    915e:	2700      	movs	r7, #0
    9160:	2500      	movs	r5, #0
    9162:	e660      	b.n	8e26 <__aeabi_dsub+0x19a>
    9164:	4650      	mov	r0, sl
    9166:	1c13      	adds	r3, r2, #0
    9168:	3820      	subs	r0, #32
    916a:	40c3      	lsrs	r3, r0
    916c:	1c18      	adds	r0, r3, #0
    916e:	4653      	mov	r3, sl
    9170:	2b20      	cmp	r3, #32
    9172:	d100      	bne.n	9176 <__aeabi_dsub+0x4ea>
    9174:	e0c1      	b.n	92fa <__aeabi_dsub+0x66e>
    9176:	2340      	movs	r3, #64	; 0x40
    9178:	4651      	mov	r1, sl
    917a:	1a5b      	subs	r3, r3, r1
    917c:	409a      	lsls	r2, r3
    917e:	9901      	ldr	r1, [sp, #4]
    9180:	4311      	orrs	r1, r2
    9182:	1e4a      	subs	r2, r1, #1
    9184:	4191      	sbcs	r1, r2
    9186:	2200      	movs	r2, #0
    9188:	4301      	orrs	r1, r0
    918a:	e670      	b.n	8e6e <__aeabi_dsub+0x1e2>
    918c:	4c6e      	ldr	r4, [pc, #440]	; (9348 <__aeabi_dsub+0x6bc>)
    918e:	42a0      	cmp	r0, r4
    9190:	d000      	beq.n	9194 <__aeabi_dsub+0x508>
    9192:	e753      	b.n	903c <__aeabi_dsub+0x3b0>
    9194:	1c17      	adds	r7, r2, #0
    9196:	9d01      	ldr	r5, [sp, #4]
    9198:	1c04      	adds	r4, r0, #0
    919a:	4698      	mov	r8, r3
    919c:	e5a8      	b.n	8cf0 <__aeabi_dsub+0x64>
    919e:	2c00      	cmp	r4, #0
    91a0:	d128      	bne.n	91f4 <__aeabi_dsub+0x568>
    91a2:	1c3c      	adds	r4, r7, #0
    91a4:	432c      	orrs	r4, r5
    91a6:	d100      	bne.n	91aa <__aeabi_dsub+0x51e>
    91a8:	e08a      	b.n	92c0 <__aeabi_dsub+0x634>
    91aa:	43db      	mvns	r3, r3
    91ac:	469a      	mov	sl, r3
    91ae:	2b00      	cmp	r3, #0
    91b0:	d000      	beq.n	91b4 <__aeabi_dsub+0x528>
    91b2:	e082      	b.n	92ba <__aeabi_dsub+0x62e>
    91b4:	9b01      	ldr	r3, [sp, #4]
    91b6:	19d2      	adds	r2, r2, r7
    91b8:	469c      	mov	ip, r3
    91ba:	4465      	add	r5, ip
    91bc:	429d      	cmp	r5, r3
    91be:	4189      	sbcs	r1, r1
    91c0:	4249      	negs	r1, r1
    91c2:	1857      	adds	r7, r2, r1
    91c4:	1c04      	adds	r4, r0, #0
    91c6:	e659      	b.n	8e7c <__aeabi_dsub+0x1f0>
    91c8:	2800      	cmp	r0, #0
    91ca:	d15b      	bne.n	9284 <__aeabi_dsub+0x5f8>
    91cc:	1c10      	adds	r0, r2, #0
    91ce:	9901      	ldr	r1, [sp, #4]
    91d0:	4308      	orrs	r0, r1
    91d2:	d100      	bne.n	91d6 <__aeabi_dsub+0x54a>
    91d4:	e0a4      	b.n	9320 <__aeabi_dsub+0x694>
    91d6:	1c17      	adds	r7, r2, #0
    91d8:	1c0d      	adds	r5, r1, #0
    91da:	4698      	mov	r8, r3
    91dc:	4c5a      	ldr	r4, [pc, #360]	; (9348 <__aeabi_dsub+0x6bc>)
    91de:	e587      	b.n	8cf0 <__aeabi_dsub+0x64>
    91e0:	433d      	orrs	r5, r7
    91e2:	1e6f      	subs	r7, r5, #1
    91e4:	41bd      	sbcs	r5, r7
    91e6:	2700      	movs	r7, #0
    91e8:	b2ed      	uxtb	r5, r5
    91ea:	e742      	b.n	9072 <__aeabi_dsub+0x3e6>
    91ec:	1c04      	adds	r4, r0, #0
    91ee:	2700      	movs	r7, #0
    91f0:	2500      	movs	r5, #0
    91f2:	e618      	b.n	8e26 <__aeabi_dsub+0x19a>
    91f4:	4c54      	ldr	r4, [pc, #336]	; (9348 <__aeabi_dsub+0x6bc>)
    91f6:	42a0      	cmp	r0, r4
    91f8:	d062      	beq.n	92c0 <__aeabi_dsub+0x634>
    91fa:	4653      	mov	r3, sl
    91fc:	2480      	movs	r4, #128	; 0x80
    91fe:	425b      	negs	r3, r3
    9200:	469a      	mov	sl, r3
    9202:	0424      	lsls	r4, r4, #16
    9204:	4327      	orrs	r7, r4
    9206:	4653      	mov	r3, sl
    9208:	2b38      	cmp	r3, #56	; 0x38
    920a:	dd00      	ble.n	920e <__aeabi_dsub+0x582>
    920c:	e08e      	b.n	932c <__aeabi_dsub+0x6a0>
    920e:	2b1f      	cmp	r3, #31
    9210:	dd00      	ble.n	9214 <__aeabi_dsub+0x588>
    9212:	e09d      	b.n	9350 <__aeabi_dsub+0x6c4>
    9214:	2420      	movs	r4, #32
    9216:	1ae3      	subs	r3, r4, r3
    9218:	469b      	mov	fp, r3
    921a:	1c3b      	adds	r3, r7, #0
    921c:	4659      	mov	r1, fp
    921e:	408b      	lsls	r3, r1
    9220:	4651      	mov	r1, sl
    9222:	4699      	mov	r9, r3
    9224:	1c2b      	adds	r3, r5, #0
    9226:	40cb      	lsrs	r3, r1
    9228:	469c      	mov	ip, r3
    922a:	464b      	mov	r3, r9
    922c:	4664      	mov	r4, ip
    922e:	4323      	orrs	r3, r4
    9230:	469c      	mov	ip, r3
    9232:	465b      	mov	r3, fp
    9234:	409d      	lsls	r5, r3
    9236:	4663      	mov	r3, ip
    9238:	1e6c      	subs	r4, r5, #1
    923a:	41a5      	sbcs	r5, r4
    923c:	40cf      	lsrs	r7, r1
    923e:	431d      	orrs	r5, r3
    9240:	9b01      	ldr	r3, [sp, #4]
    9242:	18bf      	adds	r7, r7, r2
    9244:	469c      	mov	ip, r3
    9246:	4465      	add	r5, ip
    9248:	429d      	cmp	r5, r3
    924a:	4192      	sbcs	r2, r2
    924c:	4252      	negs	r2, r2
    924e:	18bf      	adds	r7, r7, r2
    9250:	1c04      	adds	r4, r0, #0
    9252:	e613      	b.n	8e7c <__aeabi_dsub+0x1f0>
    9254:	1c10      	adds	r0, r2, #0
    9256:	9901      	ldr	r1, [sp, #4]
    9258:	4308      	orrs	r0, r1
    925a:	d100      	bne.n	925e <__aeabi_dsub+0x5d2>
    925c:	e548      	b.n	8cf0 <__aeabi_dsub+0x64>
    925e:	1a68      	subs	r0, r5, r1
    9260:	4684      	mov	ip, r0
    9262:	4285      	cmp	r5, r0
    9264:	4180      	sbcs	r0, r0
    9266:	1abe      	subs	r6, r7, r2
    9268:	4240      	negs	r0, r0
    926a:	1a30      	subs	r0, r6, r0
    926c:	0206      	lsls	r6, r0, #8
    926e:	d400      	bmi.n	9272 <__aeabi_dsub+0x5e6>
    9270:	e647      	b.n	8f02 <__aeabi_dsub+0x276>
    9272:	468c      	mov	ip, r1
    9274:	1b4d      	subs	r5, r1, r5
    9276:	45ac      	cmp	ip, r5
    9278:	4189      	sbcs	r1, r1
    927a:	1bd2      	subs	r2, r2, r7
    927c:	4249      	negs	r1, r1
    927e:	1a57      	subs	r7, r2, r1
    9280:	4698      	mov	r8, r3
    9282:	e535      	b.n	8cf0 <__aeabi_dsub+0x64>
    9284:	1c10      	adds	r0, r2, #0
    9286:	9901      	ldr	r1, [sp, #4]
    9288:	4308      	orrs	r0, r1
    928a:	d034      	beq.n	92f6 <__aeabi_dsub+0x66a>
    928c:	2480      	movs	r4, #128	; 0x80
    928e:	0778      	lsls	r0, r7, #29
    9290:	08ed      	lsrs	r5, r5, #3
    9292:	08ff      	lsrs	r7, r7, #3
    9294:	0324      	lsls	r4, r4, #12
    9296:	4328      	orrs	r0, r5
    9298:	4227      	tst	r7, r4
    929a:	d008      	beq.n	92ae <__aeabi_dsub+0x622>
    929c:	08d6      	lsrs	r6, r2, #3
    929e:	4226      	tst	r6, r4
    92a0:	d105      	bne.n	92ae <__aeabi_dsub+0x622>
    92a2:	08c9      	lsrs	r1, r1, #3
    92a4:	0752      	lsls	r2, r2, #29
    92a6:	430a      	orrs	r2, r1
    92a8:	1c10      	adds	r0, r2, #0
    92aa:	1c37      	adds	r7, r6, #0
    92ac:	4698      	mov	r8, r3
    92ae:	00ff      	lsls	r7, r7, #3
    92b0:	0f42      	lsrs	r2, r0, #29
    92b2:	4317      	orrs	r7, r2
    92b4:	00c5      	lsls	r5, r0, #3
    92b6:	4c24      	ldr	r4, [pc, #144]	; (9348 <__aeabi_dsub+0x6bc>)
    92b8:	e51a      	b.n	8cf0 <__aeabi_dsub+0x64>
    92ba:	4c23      	ldr	r4, [pc, #140]	; (9348 <__aeabi_dsub+0x6bc>)
    92bc:	42a0      	cmp	r0, r4
    92be:	d1a2      	bne.n	9206 <__aeabi_dsub+0x57a>
    92c0:	1c17      	adds	r7, r2, #0
    92c2:	9d01      	ldr	r5, [sp, #4]
    92c4:	1c04      	adds	r4, r0, #0
    92c6:	e513      	b.n	8cf0 <__aeabi_dsub+0x64>
    92c8:	2b00      	cmp	r3, #0
    92ca:	d035      	beq.n	9338 <__aeabi_dsub+0x6ac>
    92cc:	1c13      	adds	r3, r2, #0
    92ce:	9901      	ldr	r1, [sp, #4]
    92d0:	430b      	orrs	r3, r1
    92d2:	d010      	beq.n	92f6 <__aeabi_dsub+0x66a>
    92d4:	2480      	movs	r4, #128	; 0x80
    92d6:	0778      	lsls	r0, r7, #29
    92d8:	08ed      	lsrs	r5, r5, #3
    92da:	08ff      	lsrs	r7, r7, #3
    92dc:	0324      	lsls	r4, r4, #12
    92de:	4328      	orrs	r0, r5
    92e0:	4227      	tst	r7, r4
    92e2:	d0e4      	beq.n	92ae <__aeabi_dsub+0x622>
    92e4:	08d3      	lsrs	r3, r2, #3
    92e6:	4223      	tst	r3, r4
    92e8:	d1e1      	bne.n	92ae <__aeabi_dsub+0x622>
    92ea:	08c9      	lsrs	r1, r1, #3
    92ec:	0752      	lsls	r2, r2, #29
    92ee:	430a      	orrs	r2, r1
    92f0:	1c10      	adds	r0, r2, #0
    92f2:	1c1f      	adds	r7, r3, #0
    92f4:	e7db      	b.n	92ae <__aeabi_dsub+0x622>
    92f6:	4c14      	ldr	r4, [pc, #80]	; (9348 <__aeabi_dsub+0x6bc>)
    92f8:	e4fa      	b.n	8cf0 <__aeabi_dsub+0x64>
    92fa:	2200      	movs	r2, #0
    92fc:	e73f      	b.n	917e <__aeabi_dsub+0x4f2>
    92fe:	464c      	mov	r4, r9
    9300:	1c3e      	adds	r6, r7, #0
    9302:	3c20      	subs	r4, #32
    9304:	40e6      	lsrs	r6, r4
    9306:	4649      	mov	r1, r9
    9308:	1c34      	adds	r4, r6, #0
    930a:	2920      	cmp	r1, #32
    930c:	d032      	beq.n	9374 <__aeabi_dsub+0x6e8>
    930e:	2640      	movs	r6, #64	; 0x40
    9310:	1a76      	subs	r6, r6, r1
    9312:	40b7      	lsls	r7, r6
    9314:	433d      	orrs	r5, r7
    9316:	1e6f      	subs	r7, r5, #1
    9318:	41bd      	sbcs	r5, r7
    931a:	2700      	movs	r7, #0
    931c:	4325      	orrs	r5, r4
    931e:	e6a8      	b.n	9072 <__aeabi_dsub+0x3e6>
    9320:	2780      	movs	r7, #128	; 0x80
    9322:	2600      	movs	r6, #0
    9324:	03ff      	lsls	r7, r7, #15
    9326:	4c08      	ldr	r4, [pc, #32]	; (9348 <__aeabi_dsub+0x6bc>)
    9328:	2500      	movs	r5, #0
    932a:	e57c      	b.n	8e26 <__aeabi_dsub+0x19a>
    932c:	433d      	orrs	r5, r7
    932e:	1e6f      	subs	r7, r5, #1
    9330:	41bd      	sbcs	r5, r7
    9332:	2700      	movs	r7, #0
    9334:	b2ed      	uxtb	r5, r5
    9336:	e783      	b.n	9240 <__aeabi_dsub+0x5b4>
    9338:	1c17      	adds	r7, r2, #0
    933a:	9d01      	ldr	r5, [sp, #4]
    933c:	4c02      	ldr	r4, [pc, #8]	; (9348 <__aeabi_dsub+0x6bc>)
    933e:	e4d7      	b.n	8cf0 <__aeabi_dsub+0x64>
    9340:	1c17      	adds	r7, r2, #0
    9342:	9d01      	ldr	r5, [sp, #4]
    9344:	e4d4      	b.n	8cf0 <__aeabi_dsub+0x64>
    9346:	46c0      	nop			; (mov r8, r8)
    9348:	000007ff 	.word	0x000007ff
    934c:	ff7fffff 	.word	0xff7fffff
    9350:	4654      	mov	r4, sl
    9352:	1c3b      	adds	r3, r7, #0
    9354:	3c20      	subs	r4, #32
    9356:	40e3      	lsrs	r3, r4
    9358:	1c1c      	adds	r4, r3, #0
    935a:	4653      	mov	r3, sl
    935c:	2b20      	cmp	r3, #32
    935e:	d00d      	beq.n	937c <__aeabi_dsub+0x6f0>
    9360:	2340      	movs	r3, #64	; 0x40
    9362:	4651      	mov	r1, sl
    9364:	1a5b      	subs	r3, r3, r1
    9366:	409f      	lsls	r7, r3
    9368:	433d      	orrs	r5, r7
    936a:	1e6f      	subs	r7, r5, #1
    936c:	41bd      	sbcs	r5, r7
    936e:	2700      	movs	r7, #0
    9370:	4325      	orrs	r5, r4
    9372:	e765      	b.n	9240 <__aeabi_dsub+0x5b4>
    9374:	2700      	movs	r7, #0
    9376:	e7cd      	b.n	9314 <__aeabi_dsub+0x688>
    9378:	1c0d      	adds	r5, r1, #0
    937a:	e5c8      	b.n	8f0e <__aeabi_dsub+0x282>
    937c:	2700      	movs	r7, #0
    937e:	e7f3      	b.n	9368 <__aeabi_dsub+0x6dc>

00009380 <__aeabi_d2iz>:
    9380:	030b      	lsls	r3, r1, #12
    9382:	b530      	push	{r4, r5, lr}
    9384:	4c13      	ldr	r4, [pc, #76]	; (93d4 <__aeabi_d2iz+0x54>)
    9386:	0b1a      	lsrs	r2, r3, #12
    9388:	004b      	lsls	r3, r1, #1
    938a:	1c05      	adds	r5, r0, #0
    938c:	0d5b      	lsrs	r3, r3, #21
    938e:	0fc9      	lsrs	r1, r1, #31
    9390:	2000      	movs	r0, #0
    9392:	42a3      	cmp	r3, r4
    9394:	dd10      	ble.n	93b8 <__aeabi_d2iz+0x38>
    9396:	4810      	ldr	r0, [pc, #64]	; (93d8 <__aeabi_d2iz+0x58>)
    9398:	4283      	cmp	r3, r0
    939a:	dc0e      	bgt.n	93ba <__aeabi_d2iz+0x3a>
    939c:	2080      	movs	r0, #128	; 0x80
    939e:	4c0f      	ldr	r4, [pc, #60]	; (93dc <__aeabi_d2iz+0x5c>)
    93a0:	0340      	lsls	r0, r0, #13
    93a2:	4302      	orrs	r2, r0
    93a4:	1ae4      	subs	r4, r4, r3
    93a6:	2c1f      	cmp	r4, #31
    93a8:	dd0a      	ble.n	93c0 <__aeabi_d2iz+0x40>
    93aa:	480d      	ldr	r0, [pc, #52]	; (93e0 <__aeabi_d2iz+0x60>)
    93ac:	1ac3      	subs	r3, r0, r3
    93ae:	40da      	lsrs	r2, r3
    93b0:	1c13      	adds	r3, r2, #0
    93b2:	4248      	negs	r0, r1
    93b4:	4043      	eors	r3, r0
    93b6:	1858      	adds	r0, r3, r1
    93b8:	bd30      	pop	{r4, r5, pc}
    93ba:	4b0a      	ldr	r3, [pc, #40]	; (93e4 <__aeabi_d2iz+0x64>)
    93bc:	18c8      	adds	r0, r1, r3
    93be:	e7fb      	b.n	93b8 <__aeabi_d2iz+0x38>
    93c0:	1c28      	adds	r0, r5, #0
    93c2:	40e0      	lsrs	r0, r4
    93c4:	4c08      	ldr	r4, [pc, #32]	; (93e8 <__aeabi_d2iz+0x68>)
    93c6:	46a4      	mov	ip, r4
    93c8:	4463      	add	r3, ip
    93ca:	409a      	lsls	r2, r3
    93cc:	1c13      	adds	r3, r2, #0
    93ce:	4303      	orrs	r3, r0
    93d0:	e7ef      	b.n	93b2 <__aeabi_d2iz+0x32>
    93d2:	46c0      	nop			; (mov r8, r8)
    93d4:	000003fe 	.word	0x000003fe
    93d8:	0000041d 	.word	0x0000041d
    93dc:	00000433 	.word	0x00000433
    93e0:	00000413 	.word	0x00000413
    93e4:	7fffffff 	.word	0x7fffffff
    93e8:	fffffbed 	.word	0xfffffbed

000093ec <__aeabi_i2d>:
    93ec:	b538      	push	{r3, r4, r5, lr}
    93ee:	1e04      	subs	r4, r0, #0
    93f0:	d016      	beq.n	9420 <__aeabi_i2d+0x34>
    93f2:	0fc5      	lsrs	r5, r0, #31
    93f4:	d000      	beq.n	93f8 <__aeabi_i2d+0xc>
    93f6:	4244      	negs	r4, r0
    93f8:	1c20      	adds	r0, r4, #0
    93fa:	f000 f949 	bl	9690 <__clzsi2>
    93fe:	4b17      	ldr	r3, [pc, #92]	; (945c <__aeabi_i2d+0x70>)
    9400:	1a1b      	subs	r3, r3, r0
    9402:	280a      	cmp	r0, #10
    9404:	dc21      	bgt.n	944a <__aeabi_i2d+0x5e>
    9406:	1c02      	adds	r2, r0, #0
    9408:	1c21      	adds	r1, r4, #0
    940a:	3215      	adds	r2, #21
    940c:	4091      	lsls	r1, r2
    940e:	1c0a      	adds	r2, r1, #0
    9410:	210b      	movs	r1, #11
    9412:	1a08      	subs	r0, r1, r0
    9414:	40c4      	lsrs	r4, r0
    9416:	055b      	lsls	r3, r3, #21
    9418:	0324      	lsls	r4, r4, #12
    941a:	0b24      	lsrs	r4, r4, #12
    941c:	0d5b      	lsrs	r3, r3, #21
    941e:	e003      	b.n	9428 <__aeabi_i2d+0x3c>
    9420:	2500      	movs	r5, #0
    9422:	2300      	movs	r3, #0
    9424:	2400      	movs	r4, #0
    9426:	2200      	movs	r2, #0
    9428:	2100      	movs	r1, #0
    942a:	1c10      	adds	r0, r2, #0
    942c:	0324      	lsls	r4, r4, #12
    942e:	0d0a      	lsrs	r2, r1, #20
    9430:	0512      	lsls	r2, r2, #20
    9432:	0b24      	lsrs	r4, r4, #12
    9434:	4314      	orrs	r4, r2
    9436:	4a0a      	ldr	r2, [pc, #40]	; (9460 <__aeabi_i2d+0x74>)
    9438:	051b      	lsls	r3, r3, #20
    943a:	4014      	ands	r4, r2
    943c:	431c      	orrs	r4, r3
    943e:	0064      	lsls	r4, r4, #1
    9440:	07ed      	lsls	r5, r5, #31
    9442:	0864      	lsrs	r4, r4, #1
    9444:	432c      	orrs	r4, r5
    9446:	1c21      	adds	r1, r4, #0
    9448:	bd38      	pop	{r3, r4, r5, pc}
    944a:	380b      	subs	r0, #11
    944c:	4084      	lsls	r4, r0
    944e:	055b      	lsls	r3, r3, #21
    9450:	0324      	lsls	r4, r4, #12
    9452:	0b24      	lsrs	r4, r4, #12
    9454:	0d5b      	lsrs	r3, r3, #21
    9456:	2200      	movs	r2, #0
    9458:	e7e6      	b.n	9428 <__aeabi_i2d+0x3c>
    945a:	46c0      	nop			; (mov r8, r8)
    945c:	0000041e 	.word	0x0000041e
    9460:	800fffff 	.word	0x800fffff

00009464 <__aeabi_ui2d>:
    9464:	b510      	push	{r4, lr}
    9466:	1e04      	subs	r4, r0, #0
    9468:	d010      	beq.n	948c <__aeabi_ui2d+0x28>
    946a:	f000 f911 	bl	9690 <__clzsi2>
    946e:	4a14      	ldr	r2, [pc, #80]	; (94c0 <__aeabi_ui2d+0x5c>)
    9470:	1a12      	subs	r2, r2, r0
    9472:	280a      	cmp	r0, #10
    9474:	dc1a      	bgt.n	94ac <__aeabi_ui2d+0x48>
    9476:	230b      	movs	r3, #11
    9478:	1c21      	adds	r1, r4, #0
    947a:	1a1b      	subs	r3, r3, r0
    947c:	40d9      	lsrs	r1, r3
    947e:	3015      	adds	r0, #21
    9480:	030b      	lsls	r3, r1, #12
    9482:	0552      	lsls	r2, r2, #21
    9484:	4084      	lsls	r4, r0
    9486:	0b1b      	lsrs	r3, r3, #12
    9488:	0d52      	lsrs	r2, r2, #21
    948a:	e001      	b.n	9490 <__aeabi_ui2d+0x2c>
    948c:	2200      	movs	r2, #0
    948e:	2300      	movs	r3, #0
    9490:	2100      	movs	r1, #0
    9492:	031b      	lsls	r3, r3, #12
    9494:	1c20      	adds	r0, r4, #0
    9496:	0b1c      	lsrs	r4, r3, #12
    9498:	0d0b      	lsrs	r3, r1, #20
    949a:	051b      	lsls	r3, r3, #20
    949c:	4323      	orrs	r3, r4
    949e:	4c09      	ldr	r4, [pc, #36]	; (94c4 <__aeabi_ui2d+0x60>)
    94a0:	0512      	lsls	r2, r2, #20
    94a2:	4023      	ands	r3, r4
    94a4:	4313      	orrs	r3, r2
    94a6:	005b      	lsls	r3, r3, #1
    94a8:	0859      	lsrs	r1, r3, #1
    94aa:	bd10      	pop	{r4, pc}
    94ac:	1c03      	adds	r3, r0, #0
    94ae:	3b0b      	subs	r3, #11
    94b0:	409c      	lsls	r4, r3
    94b2:	0552      	lsls	r2, r2, #21
    94b4:	0323      	lsls	r3, r4, #12
    94b6:	0b1b      	lsrs	r3, r3, #12
    94b8:	0d52      	lsrs	r2, r2, #21
    94ba:	2400      	movs	r4, #0
    94bc:	e7e8      	b.n	9490 <__aeabi_ui2d+0x2c>
    94be:	46c0      	nop			; (mov r8, r8)
    94c0:	0000041e 	.word	0x0000041e
    94c4:	800fffff 	.word	0x800fffff

000094c8 <__aeabi_f2d>:
    94c8:	0042      	lsls	r2, r0, #1
    94ca:	0e12      	lsrs	r2, r2, #24
    94cc:	1c51      	adds	r1, r2, #1
    94ce:	b538      	push	{r3, r4, r5, lr}
    94d0:	b2c9      	uxtb	r1, r1
    94d2:	0243      	lsls	r3, r0, #9
    94d4:	0a5d      	lsrs	r5, r3, #9
    94d6:	0fc4      	lsrs	r4, r0, #31
    94d8:	2901      	cmp	r1, #1
    94da:	dd15      	ble.n	9508 <__aeabi_f2d+0x40>
    94dc:	21e0      	movs	r1, #224	; 0xe0
    94de:	0089      	lsls	r1, r1, #2
    94e0:	468c      	mov	ip, r1
    94e2:	076d      	lsls	r5, r5, #29
    94e4:	0b1b      	lsrs	r3, r3, #12
    94e6:	4462      	add	r2, ip
    94e8:	2100      	movs	r1, #0
    94ea:	1c28      	adds	r0, r5, #0
    94ec:	0d0d      	lsrs	r5, r1, #20
    94ee:	052d      	lsls	r5, r5, #20
    94f0:	432b      	orrs	r3, r5
    94f2:	4d1c      	ldr	r5, [pc, #112]	; (9564 <__aeabi_f2d+0x9c>)
    94f4:	0552      	lsls	r2, r2, #21
    94f6:	402b      	ands	r3, r5
    94f8:	0852      	lsrs	r2, r2, #1
    94fa:	4313      	orrs	r3, r2
    94fc:	005b      	lsls	r3, r3, #1
    94fe:	07e4      	lsls	r4, r4, #31
    9500:	085b      	lsrs	r3, r3, #1
    9502:	4323      	orrs	r3, r4
    9504:	1c19      	adds	r1, r3, #0
    9506:	bd38      	pop	{r3, r4, r5, pc}
    9508:	2a00      	cmp	r2, #0
    950a:	d115      	bne.n	9538 <__aeabi_f2d+0x70>
    950c:	2d00      	cmp	r5, #0
    950e:	d01f      	beq.n	9550 <__aeabi_f2d+0x88>
    9510:	1c28      	adds	r0, r5, #0
    9512:	f000 f8bd 	bl	9690 <__clzsi2>
    9516:	280a      	cmp	r0, #10
    9518:	dc1d      	bgt.n	9556 <__aeabi_f2d+0x8e>
    951a:	230b      	movs	r3, #11
    951c:	1c2a      	adds	r2, r5, #0
    951e:	1a1b      	subs	r3, r3, r0
    9520:	40da      	lsrs	r2, r3
    9522:	1c13      	adds	r3, r2, #0
    9524:	1c02      	adds	r2, r0, #0
    9526:	3215      	adds	r2, #21
    9528:	4095      	lsls	r5, r2
    952a:	4a0f      	ldr	r2, [pc, #60]	; (9568 <__aeabi_f2d+0xa0>)
    952c:	031b      	lsls	r3, r3, #12
    952e:	1a12      	subs	r2, r2, r0
    9530:	0552      	lsls	r2, r2, #21
    9532:	0b1b      	lsrs	r3, r3, #12
    9534:	0d52      	lsrs	r2, r2, #21
    9536:	e7d7      	b.n	94e8 <__aeabi_f2d+0x20>
    9538:	2d00      	cmp	r5, #0
    953a:	d006      	beq.n	954a <__aeabi_f2d+0x82>
    953c:	2280      	movs	r2, #128	; 0x80
    953e:	0b1b      	lsrs	r3, r3, #12
    9540:	0312      	lsls	r2, r2, #12
    9542:	4313      	orrs	r3, r2
    9544:	076d      	lsls	r5, r5, #29
    9546:	4a09      	ldr	r2, [pc, #36]	; (956c <__aeabi_f2d+0xa4>)
    9548:	e7ce      	b.n	94e8 <__aeabi_f2d+0x20>
    954a:	4a08      	ldr	r2, [pc, #32]	; (956c <__aeabi_f2d+0xa4>)
    954c:	2300      	movs	r3, #0
    954e:	e7cb      	b.n	94e8 <__aeabi_f2d+0x20>
    9550:	2200      	movs	r2, #0
    9552:	2300      	movs	r3, #0
    9554:	e7c8      	b.n	94e8 <__aeabi_f2d+0x20>
    9556:	1c03      	adds	r3, r0, #0
    9558:	3b0b      	subs	r3, #11
    955a:	409d      	lsls	r5, r3
    955c:	1c2b      	adds	r3, r5, #0
    955e:	2500      	movs	r5, #0
    9560:	e7e3      	b.n	952a <__aeabi_f2d+0x62>
    9562:	46c0      	nop			; (mov r8, r8)
    9564:	800fffff 	.word	0x800fffff
    9568:	00000389 	.word	0x00000389
    956c:	000007ff 	.word	0x000007ff

00009570 <__aeabi_d2f>:
    9570:	b570      	push	{r4, r5, r6, lr}
    9572:	030b      	lsls	r3, r1, #12
    9574:	004d      	lsls	r5, r1, #1
    9576:	0f44      	lsrs	r4, r0, #29
    9578:	0d6d      	lsrs	r5, r5, #21
    957a:	0a5b      	lsrs	r3, r3, #9
    957c:	4323      	orrs	r3, r4
    957e:	1c6c      	adds	r4, r5, #1
    9580:	0564      	lsls	r4, r4, #21
    9582:	0fc9      	lsrs	r1, r1, #31
    9584:	00c2      	lsls	r2, r0, #3
    9586:	0d64      	lsrs	r4, r4, #21
    9588:	2c01      	cmp	r4, #1
    958a:	dd2a      	ble.n	95e2 <__aeabi_d2f+0x72>
    958c:	4c3b      	ldr	r4, [pc, #236]	; (967c <__aeabi_d2f+0x10c>)
    958e:	192c      	adds	r4, r5, r4
    9590:	2cfe      	cmp	r4, #254	; 0xfe
    9592:	dc1a      	bgt.n	95ca <__aeabi_d2f+0x5a>
    9594:	2c00      	cmp	r4, #0
    9596:	dd35      	ble.n	9604 <__aeabi_d2f+0x94>
    9598:	0180      	lsls	r0, r0, #6
    959a:	1e45      	subs	r5, r0, #1
    959c:	41a8      	sbcs	r0, r5
    959e:	00db      	lsls	r3, r3, #3
    95a0:	4303      	orrs	r3, r0
    95a2:	0f52      	lsrs	r2, r2, #29
    95a4:	4313      	orrs	r3, r2
    95a6:	075a      	lsls	r2, r3, #29
    95a8:	d004      	beq.n	95b4 <__aeabi_d2f+0x44>
    95aa:	220f      	movs	r2, #15
    95ac:	401a      	ands	r2, r3
    95ae:	2a04      	cmp	r2, #4
    95b0:	d000      	beq.n	95b4 <__aeabi_d2f+0x44>
    95b2:	3304      	adds	r3, #4
    95b4:	2280      	movs	r2, #128	; 0x80
    95b6:	04d2      	lsls	r2, r2, #19
    95b8:	401a      	ands	r2, r3
    95ba:	d027      	beq.n	960c <__aeabi_d2f+0x9c>
    95bc:	3401      	adds	r4, #1
    95be:	2cff      	cmp	r4, #255	; 0xff
    95c0:	d003      	beq.n	95ca <__aeabi_d2f+0x5a>
    95c2:	019b      	lsls	r3, r3, #6
    95c4:	0a5b      	lsrs	r3, r3, #9
    95c6:	b2e4      	uxtb	r4, r4
    95c8:	e001      	b.n	95ce <__aeabi_d2f+0x5e>
    95ca:	24ff      	movs	r4, #255	; 0xff
    95cc:	2300      	movs	r3, #0
    95ce:	025b      	lsls	r3, r3, #9
    95d0:	05e4      	lsls	r4, r4, #23
    95d2:	0a5b      	lsrs	r3, r3, #9
    95d4:	4323      	orrs	r3, r4
    95d6:	005b      	lsls	r3, r3, #1
    95d8:	07c9      	lsls	r1, r1, #31
    95da:	085b      	lsrs	r3, r3, #1
    95dc:	430b      	orrs	r3, r1
    95de:	1c18      	adds	r0, r3, #0
    95e0:	bd70      	pop	{r4, r5, r6, pc}
    95e2:	2d00      	cmp	r5, #0
    95e4:	d106      	bne.n	95f4 <__aeabi_d2f+0x84>
    95e6:	4313      	orrs	r3, r2
    95e8:	d10e      	bne.n	9608 <__aeabi_d2f+0x98>
    95ea:	2400      	movs	r4, #0
    95ec:	025b      	lsls	r3, r3, #9
    95ee:	0a5b      	lsrs	r3, r3, #9
    95f0:	b2e4      	uxtb	r4, r4
    95f2:	e7ec      	b.n	95ce <__aeabi_d2f+0x5e>
    95f4:	431a      	orrs	r2, r3
    95f6:	d0e8      	beq.n	95ca <__aeabi_d2f+0x5a>
    95f8:	2080      	movs	r0, #128	; 0x80
    95fa:	00db      	lsls	r3, r3, #3
    95fc:	0480      	lsls	r0, r0, #18
    95fe:	4303      	orrs	r3, r0
    9600:	24ff      	movs	r4, #255	; 0xff
    9602:	e7d0      	b.n	95a6 <__aeabi_d2f+0x36>
    9604:	3417      	adds	r4, #23
    9606:	da0c      	bge.n	9622 <__aeabi_d2f+0xb2>
    9608:	2305      	movs	r3, #5
    960a:	2400      	movs	r4, #0
    960c:	08db      	lsrs	r3, r3, #3
    960e:	2cff      	cmp	r4, #255	; 0xff
    9610:	d1ec      	bne.n	95ec <__aeabi_d2f+0x7c>
    9612:	2b00      	cmp	r3, #0
    9614:	d02d      	beq.n	9672 <__aeabi_d2f+0x102>
    9616:	2280      	movs	r2, #128	; 0x80
    9618:	03d2      	lsls	r2, r2, #15
    961a:	4313      	orrs	r3, r2
    961c:	025b      	lsls	r3, r3, #9
    961e:	0a5b      	lsrs	r3, r3, #9
    9620:	e7d5      	b.n	95ce <__aeabi_d2f+0x5e>
    9622:	2480      	movs	r4, #128	; 0x80
    9624:	4816      	ldr	r0, [pc, #88]	; (9680 <__aeabi_d2f+0x110>)
    9626:	0424      	lsls	r4, r4, #16
    9628:	4323      	orrs	r3, r4
    962a:	1b40      	subs	r0, r0, r5
    962c:	281f      	cmp	r0, #31
    962e:	dc0d      	bgt.n	964c <__aeabi_d2f+0xdc>
    9630:	4c14      	ldr	r4, [pc, #80]	; (9684 <__aeabi_d2f+0x114>)
    9632:	46a4      	mov	ip, r4
    9634:	4465      	add	r5, ip
    9636:	40ab      	lsls	r3, r5
    9638:	1c1c      	adds	r4, r3, #0
    963a:	1c13      	adds	r3, r2, #0
    963c:	40ab      	lsls	r3, r5
    963e:	1e5d      	subs	r5, r3, #1
    9640:	41ab      	sbcs	r3, r5
    9642:	40c2      	lsrs	r2, r0
    9644:	4323      	orrs	r3, r4
    9646:	4313      	orrs	r3, r2
    9648:	2400      	movs	r4, #0
    964a:	e7ac      	b.n	95a6 <__aeabi_d2f+0x36>
    964c:	1c1e      	adds	r6, r3, #0
    964e:	4c0e      	ldr	r4, [pc, #56]	; (9688 <__aeabi_d2f+0x118>)
    9650:	1b64      	subs	r4, r4, r5
    9652:	40e6      	lsrs	r6, r4
    9654:	1c34      	adds	r4, r6, #0
    9656:	2820      	cmp	r0, #32
    9658:	d00d      	beq.n	9676 <__aeabi_d2f+0x106>
    965a:	480c      	ldr	r0, [pc, #48]	; (968c <__aeabi_d2f+0x11c>)
    965c:	4684      	mov	ip, r0
    965e:	4465      	add	r5, ip
    9660:	40ab      	lsls	r3, r5
    9662:	1c1d      	adds	r5, r3, #0
    9664:	432a      	orrs	r2, r5
    9666:	1e53      	subs	r3, r2, #1
    9668:	419a      	sbcs	r2, r3
    966a:	1c13      	adds	r3, r2, #0
    966c:	4323      	orrs	r3, r4
    966e:	2400      	movs	r4, #0
    9670:	e799      	b.n	95a6 <__aeabi_d2f+0x36>
    9672:	2300      	movs	r3, #0
    9674:	e7ab      	b.n	95ce <__aeabi_d2f+0x5e>
    9676:	2500      	movs	r5, #0
    9678:	e7f4      	b.n	9664 <__aeabi_d2f+0xf4>
    967a:	46c0      	nop			; (mov r8, r8)
    967c:	fffffc80 	.word	0xfffffc80
    9680:	0000039e 	.word	0x0000039e
    9684:	fffffc82 	.word	0xfffffc82
    9688:	0000037e 	.word	0x0000037e
    968c:	fffffca2 	.word	0xfffffca2

00009690 <__clzsi2>:
    9690:	211c      	movs	r1, #28
    9692:	2301      	movs	r3, #1
    9694:	041b      	lsls	r3, r3, #16
    9696:	4298      	cmp	r0, r3
    9698:	d301      	bcc.n	969e <__clzsi2+0xe>
    969a:	0c00      	lsrs	r0, r0, #16
    969c:	3910      	subs	r1, #16
    969e:	0a1b      	lsrs	r3, r3, #8
    96a0:	4298      	cmp	r0, r3
    96a2:	d301      	bcc.n	96a8 <__clzsi2+0x18>
    96a4:	0a00      	lsrs	r0, r0, #8
    96a6:	3908      	subs	r1, #8
    96a8:	091b      	lsrs	r3, r3, #4
    96aa:	4298      	cmp	r0, r3
    96ac:	d301      	bcc.n	96b2 <__clzsi2+0x22>
    96ae:	0900      	lsrs	r0, r0, #4
    96b0:	3904      	subs	r1, #4
    96b2:	a202      	add	r2, pc, #8	; (adr r2, 96bc <__clzsi2+0x2c>)
    96b4:	5c10      	ldrb	r0, [r2, r0]
    96b6:	1840      	adds	r0, r0, r1
    96b8:	4770      	bx	lr
    96ba:	46c0      	nop			; (mov r8, r8)
    96bc:	02020304 	.word	0x02020304
    96c0:	01010101 	.word	0x01010101
	...

000096cc <__cxa_atexit>:
    96cc:	4b05      	ldr	r3, [pc, #20]	; (96e4 <__cxa_atexit+0x18>)
    96ce:	b510      	push	{r4, lr}
    96d0:	1c04      	adds	r4, r0, #0
    96d2:	1e18      	subs	r0, r3, #0
    96d4:	d005      	beq.n	96e2 <__cxa_atexit+0x16>
    96d6:	1c13      	adds	r3, r2, #0
    96d8:	2002      	movs	r0, #2
    96da:	1c0a      	adds	r2, r1, #0
    96dc:	1c21      	adds	r1, r4, #0
    96de:	e000      	b.n	96e2 <__cxa_atexit+0x16>
    96e0:	bf00      	nop
    96e2:	bd10      	pop	{r4, pc}
    96e4:	00000000 	.word	0x00000000

000096e8 <__errno>:
    96e8:	4b01      	ldr	r3, [pc, #4]	; (96f0 <__errno+0x8>)
    96ea:	6818      	ldr	r0, [r3, #0]
    96ec:	4770      	bx	lr
    96ee:	46c0      	nop			; (mov r8, r8)
    96f0:	20000134 	.word	0x20000134

000096f4 <exit>:
    96f4:	4b08      	ldr	r3, [pc, #32]	; (9718 <exit+0x24>)
    96f6:	b510      	push	{r4, lr}
    96f8:	1c04      	adds	r4, r0, #0
    96fa:	2b00      	cmp	r3, #0
    96fc:	d002      	beq.n	9704 <exit+0x10>
    96fe:	2100      	movs	r1, #0
    9700:	e000      	b.n	9704 <exit+0x10>
    9702:	bf00      	nop
    9704:	4b05      	ldr	r3, [pc, #20]	; (971c <exit+0x28>)
    9706:	6818      	ldr	r0, [r3, #0]
    9708:	6a83      	ldr	r3, [r0, #40]	; 0x28
    970a:	2b00      	cmp	r3, #0
    970c:	d000      	beq.n	9710 <exit+0x1c>
    970e:	4798      	blx	r3
    9710:	1c20      	adds	r0, r4, #0
    9712:	f7fa fc4b 	bl	3fac <_exit>
    9716:	46c0      	nop			; (mov r8, r8)
    9718:	00000000 	.word	0x00000000
    971c:	0000fa4c 	.word	0x0000fa4c

00009720 <_fclose_r>:
    9720:	b570      	push	{r4, r5, r6, lr}
    9722:	1c05      	adds	r5, r0, #0
    9724:	1e0c      	subs	r4, r1, #0
    9726:	d101      	bne.n	972c <_fclose_r+0xc>
    9728:	2000      	movs	r0, #0
    972a:	e049      	b.n	97c0 <_fclose_r+0xa0>
    972c:	2800      	cmp	r0, #0
    972e:	d004      	beq.n	973a <_fclose_r+0x1a>
    9730:	6983      	ldr	r3, [r0, #24]
    9732:	2b00      	cmp	r3, #0
    9734:	d101      	bne.n	973a <_fclose_r+0x1a>
    9736:	f000 f961 	bl	99fc <__sinit>
    973a:	4b22      	ldr	r3, [pc, #136]	; (97c4 <_fclose_r+0xa4>)
    973c:	429c      	cmp	r4, r3
    973e:	d101      	bne.n	9744 <_fclose_r+0x24>
    9740:	686c      	ldr	r4, [r5, #4]
    9742:	e008      	b.n	9756 <_fclose_r+0x36>
    9744:	4b20      	ldr	r3, [pc, #128]	; (97c8 <_fclose_r+0xa8>)
    9746:	429c      	cmp	r4, r3
    9748:	d101      	bne.n	974e <_fclose_r+0x2e>
    974a:	68ac      	ldr	r4, [r5, #8]
    974c:	e003      	b.n	9756 <_fclose_r+0x36>
    974e:	4b1f      	ldr	r3, [pc, #124]	; (97cc <_fclose_r+0xac>)
    9750:	429c      	cmp	r4, r3
    9752:	d100      	bne.n	9756 <_fclose_r+0x36>
    9754:	68ec      	ldr	r4, [r5, #12]
    9756:	220c      	movs	r2, #12
    9758:	5ea3      	ldrsh	r3, [r4, r2]
    975a:	2b00      	cmp	r3, #0
    975c:	d0e4      	beq.n	9728 <_fclose_r+0x8>
    975e:	1c28      	adds	r0, r5, #0
    9760:	1c21      	adds	r1, r4, #0
    9762:	f000 f83f 	bl	97e4 <__sflush_r>
    9766:	6b23      	ldr	r3, [r4, #48]	; 0x30
    9768:	1c06      	adds	r6, r0, #0
    976a:	2b00      	cmp	r3, #0
    976c:	d006      	beq.n	977c <_fclose_r+0x5c>
    976e:	1c28      	adds	r0, r5, #0
    9770:	6a21      	ldr	r1, [r4, #32]
    9772:	4798      	blx	r3
    9774:	2800      	cmp	r0, #0
    9776:	da01      	bge.n	977c <_fclose_r+0x5c>
    9778:	2601      	movs	r6, #1
    977a:	4276      	negs	r6, r6
    977c:	89a3      	ldrh	r3, [r4, #12]
    977e:	061b      	lsls	r3, r3, #24
    9780:	d503      	bpl.n	978a <_fclose_r+0x6a>
    9782:	1c28      	adds	r0, r5, #0
    9784:	6921      	ldr	r1, [r4, #16]
    9786:	f000 fb93 	bl	9eb0 <_free_r>
    978a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    978c:	2900      	cmp	r1, #0
    978e:	d008      	beq.n	97a2 <_fclose_r+0x82>
    9790:	1c23      	adds	r3, r4, #0
    9792:	3344      	adds	r3, #68	; 0x44
    9794:	4299      	cmp	r1, r3
    9796:	d002      	beq.n	979e <_fclose_r+0x7e>
    9798:	1c28      	adds	r0, r5, #0
    979a:	f000 fb89 	bl	9eb0 <_free_r>
    979e:	2300      	movs	r3, #0
    97a0:	6363      	str	r3, [r4, #52]	; 0x34
    97a2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    97a4:	2900      	cmp	r1, #0
    97a6:	d004      	beq.n	97b2 <_fclose_r+0x92>
    97a8:	1c28      	adds	r0, r5, #0
    97aa:	f000 fb81 	bl	9eb0 <_free_r>
    97ae:	2300      	movs	r3, #0
    97b0:	64a3      	str	r3, [r4, #72]	; 0x48
    97b2:	f000 f993 	bl	9adc <__sfp_lock_acquire>
    97b6:	2300      	movs	r3, #0
    97b8:	81a3      	strh	r3, [r4, #12]
    97ba:	f000 f990 	bl	9ade <__sfp_lock_release>
    97be:	1c30      	adds	r0, r6, #0
    97c0:	bd70      	pop	{r4, r5, r6, pc}
    97c2:	46c0      	nop			; (mov r8, r8)
    97c4:	0000f9e8 	.word	0x0000f9e8
    97c8:	0000fa08 	.word	0x0000fa08
    97cc:	0000fa28 	.word	0x0000fa28

000097d0 <fclose>:
    97d0:	b508      	push	{r3, lr}
    97d2:	4b03      	ldr	r3, [pc, #12]	; (97e0 <fclose+0x10>)
    97d4:	1c01      	adds	r1, r0, #0
    97d6:	6818      	ldr	r0, [r3, #0]
    97d8:	f7ff ffa2 	bl	9720 <_fclose_r>
    97dc:	bd08      	pop	{r3, pc}
    97de:	46c0      	nop			; (mov r8, r8)
    97e0:	20000134 	.word	0x20000134

000097e4 <__sflush_r>:
    97e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    97e6:	898a      	ldrh	r2, [r1, #12]
    97e8:	1c05      	adds	r5, r0, #0
    97ea:	1c0c      	adds	r4, r1, #0
    97ec:	0713      	lsls	r3, r2, #28
    97ee:	d45e      	bmi.n	98ae <__sflush_r+0xca>
    97f0:	684b      	ldr	r3, [r1, #4]
    97f2:	2b00      	cmp	r3, #0
    97f4:	dc02      	bgt.n	97fc <__sflush_r+0x18>
    97f6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    97f8:	2b00      	cmp	r3, #0
    97fa:	dd1a      	ble.n	9832 <__sflush_r+0x4e>
    97fc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    97fe:	2f00      	cmp	r7, #0
    9800:	d017      	beq.n	9832 <__sflush_r+0x4e>
    9802:	2300      	movs	r3, #0
    9804:	682e      	ldr	r6, [r5, #0]
    9806:	602b      	str	r3, [r5, #0]
    9808:	2380      	movs	r3, #128	; 0x80
    980a:	015b      	lsls	r3, r3, #5
    980c:	401a      	ands	r2, r3
    980e:	d001      	beq.n	9814 <__sflush_r+0x30>
    9810:	6d62      	ldr	r2, [r4, #84]	; 0x54
    9812:	e015      	b.n	9840 <__sflush_r+0x5c>
    9814:	1c28      	adds	r0, r5, #0
    9816:	6a21      	ldr	r1, [r4, #32]
    9818:	2301      	movs	r3, #1
    981a:	47b8      	blx	r7
    981c:	1c02      	adds	r2, r0, #0
    981e:	1c43      	adds	r3, r0, #1
    9820:	d10e      	bne.n	9840 <__sflush_r+0x5c>
    9822:	682b      	ldr	r3, [r5, #0]
    9824:	2b00      	cmp	r3, #0
    9826:	d00b      	beq.n	9840 <__sflush_r+0x5c>
    9828:	2b1d      	cmp	r3, #29
    982a:	d001      	beq.n	9830 <__sflush_r+0x4c>
    982c:	2b16      	cmp	r3, #22
    982e:	d102      	bne.n	9836 <__sflush_r+0x52>
    9830:	602e      	str	r6, [r5, #0]
    9832:	2000      	movs	r0, #0
    9834:	e05e      	b.n	98f4 <__sflush_r+0x110>
    9836:	2140      	movs	r1, #64	; 0x40
    9838:	89a3      	ldrh	r3, [r4, #12]
    983a:	430b      	orrs	r3, r1
    983c:	81a3      	strh	r3, [r4, #12]
    983e:	e059      	b.n	98f4 <__sflush_r+0x110>
    9840:	89a3      	ldrh	r3, [r4, #12]
    9842:	075b      	lsls	r3, r3, #29
    9844:	d506      	bpl.n	9854 <__sflush_r+0x70>
    9846:	6863      	ldr	r3, [r4, #4]
    9848:	1ad2      	subs	r2, r2, r3
    984a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    984c:	2b00      	cmp	r3, #0
    984e:	d001      	beq.n	9854 <__sflush_r+0x70>
    9850:	6c23      	ldr	r3, [r4, #64]	; 0x40
    9852:	1ad2      	subs	r2, r2, r3
    9854:	2300      	movs	r3, #0
    9856:	1c28      	adds	r0, r5, #0
    9858:	6a21      	ldr	r1, [r4, #32]
    985a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    985c:	47b8      	blx	r7
    985e:	89a3      	ldrh	r3, [r4, #12]
    9860:	1c42      	adds	r2, r0, #1
    9862:	d106      	bne.n	9872 <__sflush_r+0x8e>
    9864:	682a      	ldr	r2, [r5, #0]
    9866:	2a00      	cmp	r2, #0
    9868:	d003      	beq.n	9872 <__sflush_r+0x8e>
    986a:	2a1d      	cmp	r2, #29
    986c:	d001      	beq.n	9872 <__sflush_r+0x8e>
    986e:	2a16      	cmp	r2, #22
    9870:	d119      	bne.n	98a6 <__sflush_r+0xc2>
    9872:	2200      	movs	r2, #0
    9874:	6062      	str	r2, [r4, #4]
    9876:	6922      	ldr	r2, [r4, #16]
    9878:	6022      	str	r2, [r4, #0]
    987a:	04db      	lsls	r3, r3, #19
    987c:	d505      	bpl.n	988a <__sflush_r+0xa6>
    987e:	1c43      	adds	r3, r0, #1
    9880:	d102      	bne.n	9888 <__sflush_r+0xa4>
    9882:	682b      	ldr	r3, [r5, #0]
    9884:	2b00      	cmp	r3, #0
    9886:	d100      	bne.n	988a <__sflush_r+0xa6>
    9888:	6560      	str	r0, [r4, #84]	; 0x54
    988a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    988c:	602e      	str	r6, [r5, #0]
    988e:	2900      	cmp	r1, #0
    9890:	d0cf      	beq.n	9832 <__sflush_r+0x4e>
    9892:	1c23      	adds	r3, r4, #0
    9894:	3344      	adds	r3, #68	; 0x44
    9896:	4299      	cmp	r1, r3
    9898:	d002      	beq.n	98a0 <__sflush_r+0xbc>
    989a:	1c28      	adds	r0, r5, #0
    989c:	f000 fb08 	bl	9eb0 <_free_r>
    98a0:	2000      	movs	r0, #0
    98a2:	6360      	str	r0, [r4, #52]	; 0x34
    98a4:	e026      	b.n	98f4 <__sflush_r+0x110>
    98a6:	2240      	movs	r2, #64	; 0x40
    98a8:	4313      	orrs	r3, r2
    98aa:	81a3      	strh	r3, [r4, #12]
    98ac:	e022      	b.n	98f4 <__sflush_r+0x110>
    98ae:	690f      	ldr	r7, [r1, #16]
    98b0:	2f00      	cmp	r7, #0
    98b2:	d0be      	beq.n	9832 <__sflush_r+0x4e>
    98b4:	680b      	ldr	r3, [r1, #0]
    98b6:	600f      	str	r7, [r1, #0]
    98b8:	1bdb      	subs	r3, r3, r7
    98ba:	9301      	str	r3, [sp, #4]
    98bc:	2300      	movs	r3, #0
    98be:	0792      	lsls	r2, r2, #30
    98c0:	d100      	bne.n	98c4 <__sflush_r+0xe0>
    98c2:	694b      	ldr	r3, [r1, #20]
    98c4:	60a3      	str	r3, [r4, #8]
    98c6:	9b01      	ldr	r3, [sp, #4]
    98c8:	2b00      	cmp	r3, #0
    98ca:	ddb2      	ble.n	9832 <__sflush_r+0x4e>
    98cc:	1c28      	adds	r0, r5, #0
    98ce:	6a21      	ldr	r1, [r4, #32]
    98d0:	1c3a      	adds	r2, r7, #0
    98d2:	9b01      	ldr	r3, [sp, #4]
    98d4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    98d6:	47b0      	blx	r6
    98d8:	2800      	cmp	r0, #0
    98da:	dc06      	bgt.n	98ea <__sflush_r+0x106>
    98dc:	2240      	movs	r2, #64	; 0x40
    98de:	2001      	movs	r0, #1
    98e0:	89a3      	ldrh	r3, [r4, #12]
    98e2:	4240      	negs	r0, r0
    98e4:	4313      	orrs	r3, r2
    98e6:	81a3      	strh	r3, [r4, #12]
    98e8:	e004      	b.n	98f4 <__sflush_r+0x110>
    98ea:	9b01      	ldr	r3, [sp, #4]
    98ec:	183f      	adds	r7, r7, r0
    98ee:	1a1b      	subs	r3, r3, r0
    98f0:	9301      	str	r3, [sp, #4]
    98f2:	e7e8      	b.n	98c6 <__sflush_r+0xe2>
    98f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

000098f8 <_fflush_r>:
    98f8:	b538      	push	{r3, r4, r5, lr}
    98fa:	690b      	ldr	r3, [r1, #16]
    98fc:	1c05      	adds	r5, r0, #0
    98fe:	1c0c      	adds	r4, r1, #0
    9900:	2b00      	cmp	r3, #0
    9902:	d101      	bne.n	9908 <_fflush_r+0x10>
    9904:	2000      	movs	r0, #0
    9906:	e01c      	b.n	9942 <_fflush_r+0x4a>
    9908:	2800      	cmp	r0, #0
    990a:	d004      	beq.n	9916 <_fflush_r+0x1e>
    990c:	6983      	ldr	r3, [r0, #24]
    990e:	2b00      	cmp	r3, #0
    9910:	d101      	bne.n	9916 <_fflush_r+0x1e>
    9912:	f000 f873 	bl	99fc <__sinit>
    9916:	4b0b      	ldr	r3, [pc, #44]	; (9944 <_fflush_r+0x4c>)
    9918:	429c      	cmp	r4, r3
    991a:	d101      	bne.n	9920 <_fflush_r+0x28>
    991c:	686c      	ldr	r4, [r5, #4]
    991e:	e008      	b.n	9932 <_fflush_r+0x3a>
    9920:	4b09      	ldr	r3, [pc, #36]	; (9948 <_fflush_r+0x50>)
    9922:	429c      	cmp	r4, r3
    9924:	d101      	bne.n	992a <_fflush_r+0x32>
    9926:	68ac      	ldr	r4, [r5, #8]
    9928:	e003      	b.n	9932 <_fflush_r+0x3a>
    992a:	4b08      	ldr	r3, [pc, #32]	; (994c <_fflush_r+0x54>)
    992c:	429c      	cmp	r4, r3
    992e:	d100      	bne.n	9932 <_fflush_r+0x3a>
    9930:	68ec      	ldr	r4, [r5, #12]
    9932:	220c      	movs	r2, #12
    9934:	5ea3      	ldrsh	r3, [r4, r2]
    9936:	2b00      	cmp	r3, #0
    9938:	d0e4      	beq.n	9904 <_fflush_r+0xc>
    993a:	1c28      	adds	r0, r5, #0
    993c:	1c21      	adds	r1, r4, #0
    993e:	f7ff ff51 	bl	97e4 <__sflush_r>
    9942:	bd38      	pop	{r3, r4, r5, pc}
    9944:	0000f9e8 	.word	0x0000f9e8
    9948:	0000fa08 	.word	0x0000fa08
    994c:	0000fa28 	.word	0x0000fa28

00009950 <fflush>:
    9950:	b508      	push	{r3, lr}
    9952:	1e01      	subs	r1, r0, #0
    9954:	d105      	bne.n	9962 <fflush+0x12>
    9956:	4b05      	ldr	r3, [pc, #20]	; (996c <fflush+0x1c>)
    9958:	4905      	ldr	r1, [pc, #20]	; (9970 <fflush+0x20>)
    995a:	6818      	ldr	r0, [r3, #0]
    995c:	f000 f9d8 	bl	9d10 <_fwalk_reent>
    9960:	e003      	b.n	996a <fflush+0x1a>
    9962:	4b04      	ldr	r3, [pc, #16]	; (9974 <fflush+0x24>)
    9964:	6818      	ldr	r0, [r3, #0]
    9966:	f7ff ffc7 	bl	98f8 <_fflush_r>
    996a:	bd08      	pop	{r3, pc}
    996c:	0000fa4c 	.word	0x0000fa4c
    9970:	000098f9 	.word	0x000098f9
    9974:	20000134 	.word	0x20000134

00009978 <_cleanup_r>:
    9978:	b508      	push	{r3, lr}
    997a:	4902      	ldr	r1, [pc, #8]	; (9984 <_cleanup_r+0xc>)
    997c:	f000 f9c8 	bl	9d10 <_fwalk_reent>
    9980:	bd08      	pop	{r3, pc}
    9982:	46c0      	nop			; (mov r8, r8)
    9984:	000098f9 	.word	0x000098f9

00009988 <std.isra.0>:
    9988:	2300      	movs	r3, #0
    998a:	b510      	push	{r4, lr}
    998c:	1c04      	adds	r4, r0, #0
    998e:	6003      	str	r3, [r0, #0]
    9990:	6043      	str	r3, [r0, #4]
    9992:	6083      	str	r3, [r0, #8]
    9994:	8181      	strh	r1, [r0, #12]
    9996:	6643      	str	r3, [r0, #100]	; 0x64
    9998:	81c2      	strh	r2, [r0, #14]
    999a:	6103      	str	r3, [r0, #16]
    999c:	6143      	str	r3, [r0, #20]
    999e:	6183      	str	r3, [r0, #24]
    99a0:	1c19      	adds	r1, r3, #0
    99a2:	2208      	movs	r2, #8
    99a4:	305c      	adds	r0, #92	; 0x5c
    99a6:	f000 fa7b 	bl	9ea0 <memset>
    99aa:	4b05      	ldr	r3, [pc, #20]	; (99c0 <std.isra.0+0x38>)
    99ac:	6224      	str	r4, [r4, #32]
    99ae:	6263      	str	r3, [r4, #36]	; 0x24
    99b0:	4b04      	ldr	r3, [pc, #16]	; (99c4 <std.isra.0+0x3c>)
    99b2:	62a3      	str	r3, [r4, #40]	; 0x28
    99b4:	4b04      	ldr	r3, [pc, #16]	; (99c8 <std.isra.0+0x40>)
    99b6:	62e3      	str	r3, [r4, #44]	; 0x2c
    99b8:	4b04      	ldr	r3, [pc, #16]	; (99cc <std.isra.0+0x44>)
    99ba:	6323      	str	r3, [r4, #48]	; 0x30
    99bc:	bd10      	pop	{r4, pc}
    99be:	46c0      	nop			; (mov r8, r8)
    99c0:	0000b4e5 	.word	0x0000b4e5
    99c4:	0000b511 	.word	0x0000b511
    99c8:	0000b549 	.word	0x0000b549
    99cc:	0000b575 	.word	0x0000b575

000099d0 <__sfmoreglue>:
    99d0:	b570      	push	{r4, r5, r6, lr}
    99d2:	2568      	movs	r5, #104	; 0x68
    99d4:	1e4b      	subs	r3, r1, #1
    99d6:	435d      	muls	r5, r3
    99d8:	1c0e      	adds	r6, r1, #0
    99da:	1c29      	adds	r1, r5, #0
    99dc:	3174      	adds	r1, #116	; 0x74
    99de:	f000 faad 	bl	9f3c <_malloc_r>
    99e2:	1e04      	subs	r4, r0, #0
    99e4:	d008      	beq.n	99f8 <__sfmoreglue+0x28>
    99e6:	2100      	movs	r1, #0
    99e8:	1c2a      	adds	r2, r5, #0
    99ea:	6001      	str	r1, [r0, #0]
    99ec:	6046      	str	r6, [r0, #4]
    99ee:	300c      	adds	r0, #12
    99f0:	60a0      	str	r0, [r4, #8]
    99f2:	3268      	adds	r2, #104	; 0x68
    99f4:	f000 fa54 	bl	9ea0 <memset>
    99f8:	1c20      	adds	r0, r4, #0
    99fa:	bd70      	pop	{r4, r5, r6, pc}

000099fc <__sinit>:
    99fc:	6983      	ldr	r3, [r0, #24]
    99fe:	b513      	push	{r0, r1, r4, lr}
    9a00:	2b00      	cmp	r3, #0
    9a02:	d128      	bne.n	9a56 <__sinit+0x5a>
    9a04:	6483      	str	r3, [r0, #72]	; 0x48
    9a06:	64c3      	str	r3, [r0, #76]	; 0x4c
    9a08:	6503      	str	r3, [r0, #80]	; 0x50
    9a0a:	4b13      	ldr	r3, [pc, #76]	; (9a58 <__sinit+0x5c>)
    9a0c:	4a13      	ldr	r2, [pc, #76]	; (9a5c <__sinit+0x60>)
    9a0e:	681b      	ldr	r3, [r3, #0]
    9a10:	6282      	str	r2, [r0, #40]	; 0x28
    9a12:	9301      	str	r3, [sp, #4]
    9a14:	4298      	cmp	r0, r3
    9a16:	d101      	bne.n	9a1c <__sinit+0x20>
    9a18:	2301      	movs	r3, #1
    9a1a:	6183      	str	r3, [r0, #24]
    9a1c:	1c04      	adds	r4, r0, #0
    9a1e:	f000 f81f 	bl	9a60 <__sfp>
    9a22:	6060      	str	r0, [r4, #4]
    9a24:	1c20      	adds	r0, r4, #0
    9a26:	f000 f81b 	bl	9a60 <__sfp>
    9a2a:	60a0      	str	r0, [r4, #8]
    9a2c:	1c20      	adds	r0, r4, #0
    9a2e:	f000 f817 	bl	9a60 <__sfp>
    9a32:	2104      	movs	r1, #4
    9a34:	60e0      	str	r0, [r4, #12]
    9a36:	2200      	movs	r2, #0
    9a38:	6860      	ldr	r0, [r4, #4]
    9a3a:	f7ff ffa5 	bl	9988 <std.isra.0>
    9a3e:	68a0      	ldr	r0, [r4, #8]
    9a40:	2109      	movs	r1, #9
    9a42:	2201      	movs	r2, #1
    9a44:	f7ff ffa0 	bl	9988 <std.isra.0>
    9a48:	68e0      	ldr	r0, [r4, #12]
    9a4a:	2112      	movs	r1, #18
    9a4c:	2202      	movs	r2, #2
    9a4e:	f7ff ff9b 	bl	9988 <std.isra.0>
    9a52:	2301      	movs	r3, #1
    9a54:	61a3      	str	r3, [r4, #24]
    9a56:	bd13      	pop	{r0, r1, r4, pc}
    9a58:	0000fa4c 	.word	0x0000fa4c
    9a5c:	00009979 	.word	0x00009979

00009a60 <__sfp>:
    9a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9a62:	4b1d      	ldr	r3, [pc, #116]	; (9ad8 <__sfp+0x78>)
    9a64:	1c06      	adds	r6, r0, #0
    9a66:	681d      	ldr	r5, [r3, #0]
    9a68:	69ab      	ldr	r3, [r5, #24]
    9a6a:	2b00      	cmp	r3, #0
    9a6c:	d102      	bne.n	9a74 <__sfp+0x14>
    9a6e:	1c28      	adds	r0, r5, #0
    9a70:	f7ff ffc4 	bl	99fc <__sinit>
    9a74:	3548      	adds	r5, #72	; 0x48
    9a76:	68ac      	ldr	r4, [r5, #8]
    9a78:	686b      	ldr	r3, [r5, #4]
    9a7a:	3b01      	subs	r3, #1
    9a7c:	d405      	bmi.n	9a8a <__sfp+0x2a>
    9a7e:	220c      	movs	r2, #12
    9a80:	5ea7      	ldrsh	r7, [r4, r2]
    9a82:	2f00      	cmp	r7, #0
    9a84:	d010      	beq.n	9aa8 <__sfp+0x48>
    9a86:	3468      	adds	r4, #104	; 0x68
    9a88:	e7f7      	b.n	9a7a <__sfp+0x1a>
    9a8a:	682b      	ldr	r3, [r5, #0]
    9a8c:	2b00      	cmp	r3, #0
    9a8e:	d106      	bne.n	9a9e <__sfp+0x3e>
    9a90:	1c30      	adds	r0, r6, #0
    9a92:	2104      	movs	r1, #4
    9a94:	f7ff ff9c 	bl	99d0 <__sfmoreglue>
    9a98:	6028      	str	r0, [r5, #0]
    9a9a:	2800      	cmp	r0, #0
    9a9c:	d001      	beq.n	9aa2 <__sfp+0x42>
    9a9e:	682d      	ldr	r5, [r5, #0]
    9aa0:	e7e9      	b.n	9a76 <__sfp+0x16>
    9aa2:	230c      	movs	r3, #12
    9aa4:	6033      	str	r3, [r6, #0]
    9aa6:	e016      	b.n	9ad6 <__sfp+0x76>
    9aa8:	2301      	movs	r3, #1
    9aaa:	1c20      	adds	r0, r4, #0
    9aac:	425b      	negs	r3, r3
    9aae:	81e3      	strh	r3, [r4, #14]
    9ab0:	3302      	adds	r3, #2
    9ab2:	81a3      	strh	r3, [r4, #12]
    9ab4:	6667      	str	r7, [r4, #100]	; 0x64
    9ab6:	6027      	str	r7, [r4, #0]
    9ab8:	60a7      	str	r7, [r4, #8]
    9aba:	6067      	str	r7, [r4, #4]
    9abc:	6127      	str	r7, [r4, #16]
    9abe:	6167      	str	r7, [r4, #20]
    9ac0:	61a7      	str	r7, [r4, #24]
    9ac2:	305c      	adds	r0, #92	; 0x5c
    9ac4:	1c39      	adds	r1, r7, #0
    9ac6:	2208      	movs	r2, #8
    9ac8:	f000 f9ea 	bl	9ea0 <memset>
    9acc:	1c20      	adds	r0, r4, #0
    9ace:	6367      	str	r7, [r4, #52]	; 0x34
    9ad0:	63a7      	str	r7, [r4, #56]	; 0x38
    9ad2:	64a7      	str	r7, [r4, #72]	; 0x48
    9ad4:	64e7      	str	r7, [r4, #76]	; 0x4c
    9ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9ad8:	0000fa4c 	.word	0x0000fa4c

00009adc <__sfp_lock_acquire>:
    9adc:	4770      	bx	lr

00009ade <__sfp_lock_release>:
    9ade:	4770      	bx	lr

00009ae0 <_fopen_r>:
    9ae0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9ae2:	1c0f      	adds	r7, r1, #0
    9ae4:	1c11      	adds	r1, r2, #0
    9ae6:	aa01      	add	r2, sp, #4
    9ae8:	1c05      	adds	r5, r0, #0
    9aea:	f003 fc91 	bl	d410 <__sflags>
    9aee:	1e06      	subs	r6, r0, #0
    9af0:	d101      	bne.n	9af6 <_fopen_r+0x16>
    9af2:	2400      	movs	r4, #0
    9af4:	e027      	b.n	9b46 <_fopen_r+0x66>
    9af6:	1c28      	adds	r0, r5, #0
    9af8:	f7ff ffb2 	bl	9a60 <__sfp>
    9afc:	1e04      	subs	r4, r0, #0
    9afe:	d0f8      	beq.n	9af2 <_fopen_r+0x12>
    9b00:	23db      	movs	r3, #219	; 0xdb
    9b02:	1c28      	adds	r0, r5, #0
    9b04:	1c39      	adds	r1, r7, #0
    9b06:	9a01      	ldr	r2, [sp, #4]
    9b08:	005b      	lsls	r3, r3, #1
    9b0a:	f001 fb51 	bl	b1b0 <_open_r>
    9b0e:	2800      	cmp	r0, #0
    9b10:	da06      	bge.n	9b20 <_fopen_r+0x40>
    9b12:	2500      	movs	r5, #0
    9b14:	f7ff ffe2 	bl	9adc <__sfp_lock_acquire>
    9b18:	81a5      	strh	r5, [r4, #12]
    9b1a:	f7ff ffe0 	bl	9ade <__sfp_lock_release>
    9b1e:	e7e8      	b.n	9af2 <_fopen_r+0x12>
    9b20:	4b0a      	ldr	r3, [pc, #40]	; (9b4c <_fopen_r+0x6c>)
    9b22:	81e0      	strh	r0, [r4, #14]
    9b24:	6263      	str	r3, [r4, #36]	; 0x24
    9b26:	4b0a      	ldr	r3, [pc, #40]	; (9b50 <_fopen_r+0x70>)
    9b28:	81a6      	strh	r6, [r4, #12]
    9b2a:	62a3      	str	r3, [r4, #40]	; 0x28
    9b2c:	4b09      	ldr	r3, [pc, #36]	; (9b54 <_fopen_r+0x74>)
    9b2e:	6224      	str	r4, [r4, #32]
    9b30:	62e3      	str	r3, [r4, #44]	; 0x2c
    9b32:	4b09      	ldr	r3, [pc, #36]	; (9b58 <_fopen_r+0x78>)
    9b34:	6323      	str	r3, [r4, #48]	; 0x30
    9b36:	05f3      	lsls	r3, r6, #23
    9b38:	d505      	bpl.n	9b46 <_fopen_r+0x66>
    9b3a:	1c28      	adds	r0, r5, #0
    9b3c:	1c21      	adds	r1, r4, #0
    9b3e:	2200      	movs	r2, #0
    9b40:	2302      	movs	r3, #2
    9b42:	f000 f849 	bl	9bd8 <_fseek_r>
    9b46:	1c20      	adds	r0, r4, #0
    9b48:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    9b4a:	46c0      	nop			; (mov r8, r8)
    9b4c:	0000b4e5 	.word	0x0000b4e5
    9b50:	0000b511 	.word	0x0000b511
    9b54:	0000b549 	.word	0x0000b549
    9b58:	0000b575 	.word	0x0000b575

00009b5c <fopen>:
    9b5c:	b508      	push	{r3, lr}
    9b5e:	1c03      	adds	r3, r0, #0
    9b60:	1c0a      	adds	r2, r1, #0
    9b62:	4903      	ldr	r1, [pc, #12]	; (9b70 <fopen+0x14>)
    9b64:	6808      	ldr	r0, [r1, #0]
    9b66:	1c19      	adds	r1, r3, #0
    9b68:	f7ff ffba 	bl	9ae0 <_fopen_r>
    9b6c:	bd08      	pop	{r3, pc}
    9b6e:	46c0      	nop			; (mov r8, r8)
    9b70:	20000134 	.word	0x20000134

00009b74 <_fputc_r>:
    9b74:	b570      	push	{r4, r5, r6, lr}
    9b76:	1c05      	adds	r5, r0, #0
    9b78:	1c0e      	adds	r6, r1, #0
    9b7a:	1c14      	adds	r4, r2, #0
    9b7c:	2800      	cmp	r0, #0
    9b7e:	d004      	beq.n	9b8a <_fputc_r+0x16>
    9b80:	6983      	ldr	r3, [r0, #24]
    9b82:	2b00      	cmp	r3, #0
    9b84:	d101      	bne.n	9b8a <_fputc_r+0x16>
    9b86:	f7ff ff39 	bl	99fc <__sinit>
    9b8a:	4b0a      	ldr	r3, [pc, #40]	; (9bb4 <_fputc_r+0x40>)
    9b8c:	429c      	cmp	r4, r3
    9b8e:	d101      	bne.n	9b94 <_fputc_r+0x20>
    9b90:	686c      	ldr	r4, [r5, #4]
    9b92:	e008      	b.n	9ba6 <_fputc_r+0x32>
    9b94:	4b08      	ldr	r3, [pc, #32]	; (9bb8 <_fputc_r+0x44>)
    9b96:	429c      	cmp	r4, r3
    9b98:	d101      	bne.n	9b9e <_fputc_r+0x2a>
    9b9a:	68ac      	ldr	r4, [r5, #8]
    9b9c:	e003      	b.n	9ba6 <_fputc_r+0x32>
    9b9e:	4b07      	ldr	r3, [pc, #28]	; (9bbc <_fputc_r+0x48>)
    9ba0:	429c      	cmp	r4, r3
    9ba2:	d100      	bne.n	9ba6 <_fputc_r+0x32>
    9ba4:	68ec      	ldr	r4, [r5, #12]
    9ba6:	1c28      	adds	r0, r5, #0
    9ba8:	1c31      	adds	r1, r6, #0
    9baa:	1c22      	adds	r2, r4, #0
    9bac:	f001 fb14 	bl	b1d8 <_putc_r>
    9bb0:	bd70      	pop	{r4, r5, r6, pc}
    9bb2:	46c0      	nop			; (mov r8, r8)
    9bb4:	0000f9e8 	.word	0x0000f9e8
    9bb8:	0000fa08 	.word	0x0000fa08
    9bbc:	0000fa28 	.word	0x0000fa28

00009bc0 <fputc>:
    9bc0:	b508      	push	{r3, lr}
    9bc2:	1c03      	adds	r3, r0, #0
    9bc4:	1c0a      	adds	r2, r1, #0
    9bc6:	4903      	ldr	r1, [pc, #12]	; (9bd4 <fputc+0x14>)
    9bc8:	6808      	ldr	r0, [r1, #0]
    9bca:	1c19      	adds	r1, r3, #0
    9bcc:	f7ff ffd2 	bl	9b74 <_fputc_r>
    9bd0:	bd08      	pop	{r3, pc}
    9bd2:	46c0      	nop			; (mov r8, r8)
    9bd4:	20000134 	.word	0x20000134

00009bd8 <_fseek_r>:
    9bd8:	b508      	push	{r3, lr}
    9bda:	f000 f801 	bl	9be0 <_fseeko_r>
    9bde:	bd08      	pop	{r3, pc}

00009be0 <_fseeko_r>:
    9be0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9be2:	1c05      	adds	r5, r0, #0
    9be4:	1c0c      	adds	r4, r1, #0
    9be6:	9201      	str	r2, [sp, #4]
    9be8:	1c1e      	adds	r6, r3, #0
    9bea:	2800      	cmp	r0, #0
    9bec:	d004      	beq.n	9bf8 <_fseeko_r+0x18>
    9bee:	6983      	ldr	r3, [r0, #24]
    9bf0:	2b00      	cmp	r3, #0
    9bf2:	d101      	bne.n	9bf8 <_fseeko_r+0x18>
    9bf4:	f7ff ff02 	bl	99fc <__sinit>
    9bf8:	4b41      	ldr	r3, [pc, #260]	; (9d00 <_fseeko_r+0x120>)
    9bfa:	429c      	cmp	r4, r3
    9bfc:	d101      	bne.n	9c02 <_fseeko_r+0x22>
    9bfe:	686c      	ldr	r4, [r5, #4]
    9c00:	e008      	b.n	9c14 <_fseeko_r+0x34>
    9c02:	4b40      	ldr	r3, [pc, #256]	; (9d04 <_fseeko_r+0x124>)
    9c04:	429c      	cmp	r4, r3
    9c06:	d101      	bne.n	9c0c <_fseeko_r+0x2c>
    9c08:	68ac      	ldr	r4, [r5, #8]
    9c0a:	e003      	b.n	9c14 <_fseeko_r+0x34>
    9c0c:	4b3e      	ldr	r3, [pc, #248]	; (9d08 <_fseeko_r+0x128>)
    9c0e:	429c      	cmp	r4, r3
    9c10:	d100      	bne.n	9c14 <_fseeko_r+0x34>
    9c12:	68ec      	ldr	r4, [r5, #12]
    9c14:	2284      	movs	r2, #132	; 0x84
    9c16:	89a3      	ldrh	r3, [r4, #12]
    9c18:	0052      	lsls	r2, r2, #1
    9c1a:	4013      	ands	r3, r2
    9c1c:	4293      	cmp	r3, r2
    9c1e:	d103      	bne.n	9c28 <_fseeko_r+0x48>
    9c20:	1c28      	adds	r0, r5, #0
    9c22:	1c21      	adds	r1, r4, #0
    9c24:	f7ff fe68 	bl	98f8 <_fflush_r>
    9c28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    9c2a:	9300      	str	r3, [sp, #0]
    9c2c:	2b00      	cmp	r3, #0
    9c2e:	d101      	bne.n	9c34 <_fseeko_r+0x54>
    9c30:	331d      	adds	r3, #29
    9c32:	e031      	b.n	9c98 <_fseeko_r+0xb8>
    9c34:	2e01      	cmp	r6, #1
    9c36:	d005      	beq.n	9c44 <_fseeko_r+0x64>
    9c38:	2e02      	cmp	r6, #2
    9c3a:	d031      	beq.n	9ca0 <_fseeko_r+0xc0>
    9c3c:	2316      	movs	r3, #22
    9c3e:	2e00      	cmp	r6, #0
    9c40:	d12a      	bne.n	9c98 <_fseeko_r+0xb8>
    9c42:	e02d      	b.n	9ca0 <_fseeko_r+0xc0>
    9c44:	1c28      	adds	r0, r5, #0
    9c46:	1c21      	adds	r1, r4, #0
    9c48:	f7ff fe56 	bl	98f8 <_fflush_r>
    9c4c:	2380      	movs	r3, #128	; 0x80
    9c4e:	89a2      	ldrh	r2, [r4, #12]
    9c50:	015b      	lsls	r3, r3, #5
    9c52:	401a      	ands	r2, r3
    9c54:	d001      	beq.n	9c5a <_fseeko_r+0x7a>
    9c56:	6d60      	ldr	r0, [r4, #84]	; 0x54
    9c58:	e006      	b.n	9c68 <_fseeko_r+0x88>
    9c5a:	1c33      	adds	r3, r6, #0
    9c5c:	1c28      	adds	r0, r5, #0
    9c5e:	6a21      	ldr	r1, [r4, #32]
    9c60:	9e00      	ldr	r6, [sp, #0]
    9c62:	47b0      	blx	r6
    9c64:	1c43      	adds	r3, r0, #1
    9c66:	d018      	beq.n	9c9a <_fseeko_r+0xba>
    9c68:	89a3      	ldrh	r3, [r4, #12]
    9c6a:	075a      	lsls	r2, r3, #29
    9c6c:	d507      	bpl.n	9c7e <_fseeko_r+0x9e>
    9c6e:	6863      	ldr	r3, [r4, #4]
    9c70:	1ac0      	subs	r0, r0, r3
    9c72:	6b63      	ldr	r3, [r4, #52]	; 0x34
    9c74:	2b00      	cmp	r3, #0
    9c76:	d00a      	beq.n	9c8e <_fseeko_r+0xae>
    9c78:	6c23      	ldr	r3, [r4, #64]	; 0x40
    9c7a:	1ac0      	subs	r0, r0, r3
    9c7c:	e007      	b.n	9c8e <_fseeko_r+0xae>
    9c7e:	071b      	lsls	r3, r3, #28
    9c80:	d505      	bpl.n	9c8e <_fseeko_r+0xae>
    9c82:	6823      	ldr	r3, [r4, #0]
    9c84:	2b00      	cmp	r3, #0
    9c86:	d002      	beq.n	9c8e <_fseeko_r+0xae>
    9c88:	6922      	ldr	r2, [r4, #16]
    9c8a:	1a9b      	subs	r3, r3, r2
    9c8c:	18c0      	adds	r0, r0, r3
    9c8e:	9b01      	ldr	r3, [sp, #4]
    9c90:	2600      	movs	r6, #0
    9c92:	181b      	adds	r3, r3, r0
    9c94:	9301      	str	r3, [sp, #4]
    9c96:	e003      	b.n	9ca0 <_fseeko_r+0xc0>
    9c98:	602b      	str	r3, [r5, #0]
    9c9a:	2701      	movs	r7, #1
    9c9c:	427f      	negs	r7, r7
    9c9e:	e02d      	b.n	9cfc <_fseeko_r+0x11c>
    9ca0:	6923      	ldr	r3, [r4, #16]
    9ca2:	2b00      	cmp	r3, #0
    9ca4:	d103      	bne.n	9cae <_fseeko_r+0xce>
    9ca6:	1c28      	adds	r0, r5, #0
    9ca8:	1c21      	adds	r1, r4, #0
    9caa:	f000 f879 	bl	9da0 <__smakebuf_r>
    9cae:	1c28      	adds	r0, r5, #0
    9cb0:	1c21      	adds	r1, r4, #0
    9cb2:	f7ff fe21 	bl	98f8 <_fflush_r>
    9cb6:	1e07      	subs	r7, r0, #0
    9cb8:	d1ef      	bne.n	9c9a <_fseeko_r+0xba>
    9cba:	1c33      	adds	r3, r6, #0
    9cbc:	1c28      	adds	r0, r5, #0
    9cbe:	6a21      	ldr	r1, [r4, #32]
    9cc0:	9a01      	ldr	r2, [sp, #4]
    9cc2:	9e00      	ldr	r6, [sp, #0]
    9cc4:	47b0      	blx	r6
    9cc6:	1c43      	adds	r3, r0, #1
    9cc8:	d0e7      	beq.n	9c9a <_fseeko_r+0xba>
    9cca:	6b61      	ldr	r1, [r4, #52]	; 0x34
    9ccc:	2900      	cmp	r1, #0
    9cce:	d008      	beq.n	9ce2 <_fseeko_r+0x102>
    9cd0:	1c23      	adds	r3, r4, #0
    9cd2:	3344      	adds	r3, #68	; 0x44
    9cd4:	4299      	cmp	r1, r3
    9cd6:	d002      	beq.n	9cde <_fseeko_r+0xfe>
    9cd8:	1c28      	adds	r0, r5, #0
    9cda:	f000 f8e9 	bl	9eb0 <_free_r>
    9cde:	2300      	movs	r3, #0
    9ce0:	6363      	str	r3, [r4, #52]	; 0x34
    9ce2:	2100      	movs	r1, #0
    9ce4:	1c20      	adds	r0, r4, #0
    9ce6:	6923      	ldr	r3, [r4, #16]
    9ce8:	89a2      	ldrh	r2, [r4, #12]
    9cea:	6023      	str	r3, [r4, #0]
    9cec:	4b07      	ldr	r3, [pc, #28]	; (9d0c <_fseeko_r+0x12c>)
    9cee:	6061      	str	r1, [r4, #4]
    9cf0:	4013      	ands	r3, r2
    9cf2:	81a3      	strh	r3, [r4, #12]
    9cf4:	305c      	adds	r0, #92	; 0x5c
    9cf6:	2208      	movs	r2, #8
    9cf8:	f000 f8d2 	bl	9ea0 <memset>
    9cfc:	1c38      	adds	r0, r7, #0
    9cfe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    9d00:	0000f9e8 	.word	0x0000f9e8
    9d04:	0000fa08 	.word	0x0000fa08
    9d08:	0000fa28 	.word	0x0000fa28
    9d0c:	fffff7df 	.word	0xfffff7df

00009d10 <_fwalk_reent>:
    9d10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9d12:	1c04      	adds	r4, r0, #0
    9d14:	1c07      	adds	r7, r0, #0
    9d16:	2600      	movs	r6, #0
    9d18:	9101      	str	r1, [sp, #4]
    9d1a:	3448      	adds	r4, #72	; 0x48
    9d1c:	2c00      	cmp	r4, #0
    9d1e:	d016      	beq.n	9d4e <_fwalk_reent+0x3e>
    9d20:	6863      	ldr	r3, [r4, #4]
    9d22:	68a5      	ldr	r5, [r4, #8]
    9d24:	9300      	str	r3, [sp, #0]
    9d26:	9b00      	ldr	r3, [sp, #0]
    9d28:	3b01      	subs	r3, #1
    9d2a:	9300      	str	r3, [sp, #0]
    9d2c:	d40d      	bmi.n	9d4a <_fwalk_reent+0x3a>
    9d2e:	89ab      	ldrh	r3, [r5, #12]
    9d30:	2b01      	cmp	r3, #1
    9d32:	d908      	bls.n	9d46 <_fwalk_reent+0x36>
    9d34:	220e      	movs	r2, #14
    9d36:	5eab      	ldrsh	r3, [r5, r2]
    9d38:	3301      	adds	r3, #1
    9d3a:	d004      	beq.n	9d46 <_fwalk_reent+0x36>
    9d3c:	1c38      	adds	r0, r7, #0
    9d3e:	1c29      	adds	r1, r5, #0
    9d40:	9b01      	ldr	r3, [sp, #4]
    9d42:	4798      	blx	r3
    9d44:	4306      	orrs	r6, r0
    9d46:	3568      	adds	r5, #104	; 0x68
    9d48:	e7ed      	b.n	9d26 <_fwalk_reent+0x16>
    9d4a:	6824      	ldr	r4, [r4, #0]
    9d4c:	e7e6      	b.n	9d1c <_fwalk_reent+0xc>
    9d4e:	1c30      	adds	r0, r6, #0
    9d50:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00009d54 <__libc_init_array>:
    9d54:	4b0e      	ldr	r3, [pc, #56]	; (9d90 <__libc_init_array+0x3c>)
    9d56:	b570      	push	{r4, r5, r6, lr}
    9d58:	2500      	movs	r5, #0
    9d5a:	1c1e      	adds	r6, r3, #0
    9d5c:	4c0d      	ldr	r4, [pc, #52]	; (9d94 <__libc_init_array+0x40>)
    9d5e:	1ae4      	subs	r4, r4, r3
    9d60:	10a4      	asrs	r4, r4, #2
    9d62:	42a5      	cmp	r5, r4
    9d64:	d004      	beq.n	9d70 <__libc_init_array+0x1c>
    9d66:	00ab      	lsls	r3, r5, #2
    9d68:	58f3      	ldr	r3, [r6, r3]
    9d6a:	4798      	blx	r3
    9d6c:	3501      	adds	r5, #1
    9d6e:	e7f8      	b.n	9d62 <__libc_init_array+0xe>
    9d70:	f005 ffdc 	bl	fd2c <_init>
    9d74:	4b08      	ldr	r3, [pc, #32]	; (9d98 <__libc_init_array+0x44>)
    9d76:	2500      	movs	r5, #0
    9d78:	1c1e      	adds	r6, r3, #0
    9d7a:	4c08      	ldr	r4, [pc, #32]	; (9d9c <__libc_init_array+0x48>)
    9d7c:	1ae4      	subs	r4, r4, r3
    9d7e:	10a4      	asrs	r4, r4, #2
    9d80:	42a5      	cmp	r5, r4
    9d82:	d004      	beq.n	9d8e <__libc_init_array+0x3a>
    9d84:	00ab      	lsls	r3, r5, #2
    9d86:	58f3      	ldr	r3, [r6, r3]
    9d88:	4798      	blx	r3
    9d8a:	3501      	adds	r5, #1
    9d8c:	e7f8      	b.n	9d80 <__libc_init_array+0x2c>
    9d8e:	bd70      	pop	{r4, r5, r6, pc}
    9d90:	0000fd38 	.word	0x0000fd38
    9d94:	0000fd38 	.word	0x0000fd38
    9d98:	0000fd38 	.word	0x0000fd38
    9d9c:	0000fd4c 	.word	0x0000fd4c

00009da0 <__smakebuf_r>:
    9da0:	b5f0      	push	{r4, r5, r6, r7, lr}
    9da2:	898b      	ldrh	r3, [r1, #12]
    9da4:	b091      	sub	sp, #68	; 0x44
    9da6:	079b      	lsls	r3, r3, #30
    9da8:	d506      	bpl.n	9db8 <__smakebuf_r+0x18>
    9daa:	1c0b      	adds	r3, r1, #0
    9dac:	3347      	adds	r3, #71	; 0x47
    9dae:	600b      	str	r3, [r1, #0]
    9db0:	610b      	str	r3, [r1, #16]
    9db2:	2301      	movs	r3, #1
    9db4:	614b      	str	r3, [r1, #20]
    9db6:	e045      	b.n	9e44 <__smakebuf_r+0xa4>
    9db8:	1c0c      	adds	r4, r1, #0
    9dba:	230e      	movs	r3, #14
    9dbc:	5ec9      	ldrsh	r1, [r1, r3]
    9dbe:	1c06      	adds	r6, r0, #0
    9dc0:	2900      	cmp	r1, #0
    9dc2:	da04      	bge.n	9dce <__smakebuf_r+0x2e>
    9dc4:	2380      	movs	r3, #128	; 0x80
    9dc6:	89a5      	ldrh	r5, [r4, #12]
    9dc8:	401d      	ands	r5, r3
    9dca:	d110      	bne.n	9dee <__smakebuf_r+0x4e>
    9dcc:	e00c      	b.n	9de8 <__smakebuf_r+0x48>
    9dce:	aa01      	add	r2, sp, #4
    9dd0:	f003 fb56 	bl	d480 <_fstat_r>
    9dd4:	2800      	cmp	r0, #0
    9dd6:	dbf5      	blt.n	9dc4 <__smakebuf_r+0x24>
    9dd8:	23f0      	movs	r3, #240	; 0xf0
    9dda:	9d02      	ldr	r5, [sp, #8]
    9ddc:	021b      	lsls	r3, r3, #8
    9dde:	401d      	ands	r5, r3
    9de0:	4b19      	ldr	r3, [pc, #100]	; (9e48 <__smakebuf_r+0xa8>)
    9de2:	18ed      	adds	r5, r5, r3
    9de4:	426b      	negs	r3, r5
    9de6:	415d      	adcs	r5, r3
    9de8:	2780      	movs	r7, #128	; 0x80
    9dea:	00ff      	lsls	r7, r7, #3
    9dec:	e001      	b.n	9df2 <__smakebuf_r+0x52>
    9dee:	2500      	movs	r5, #0
    9df0:	2740      	movs	r7, #64	; 0x40
    9df2:	1c30      	adds	r0, r6, #0
    9df4:	1c39      	adds	r1, r7, #0
    9df6:	f000 f8a1 	bl	9f3c <_malloc_r>
    9dfa:	2800      	cmp	r0, #0
    9dfc:	d10c      	bne.n	9e18 <__smakebuf_r+0x78>
    9dfe:	89a3      	ldrh	r3, [r4, #12]
    9e00:	059a      	lsls	r2, r3, #22
    9e02:	d41f      	bmi.n	9e44 <__smakebuf_r+0xa4>
    9e04:	2202      	movs	r2, #2
    9e06:	4313      	orrs	r3, r2
    9e08:	81a3      	strh	r3, [r4, #12]
    9e0a:	1c23      	adds	r3, r4, #0
    9e0c:	3347      	adds	r3, #71	; 0x47
    9e0e:	6023      	str	r3, [r4, #0]
    9e10:	6123      	str	r3, [r4, #16]
    9e12:	2301      	movs	r3, #1
    9e14:	6163      	str	r3, [r4, #20]
    9e16:	e015      	b.n	9e44 <__smakebuf_r+0xa4>
    9e18:	2280      	movs	r2, #128	; 0x80
    9e1a:	4b0c      	ldr	r3, [pc, #48]	; (9e4c <__smakebuf_r+0xac>)
    9e1c:	62b3      	str	r3, [r6, #40]	; 0x28
    9e1e:	89a3      	ldrh	r3, [r4, #12]
    9e20:	6020      	str	r0, [r4, #0]
    9e22:	4313      	orrs	r3, r2
    9e24:	81a3      	strh	r3, [r4, #12]
    9e26:	6120      	str	r0, [r4, #16]
    9e28:	6167      	str	r7, [r4, #20]
    9e2a:	2d00      	cmp	r5, #0
    9e2c:	d00a      	beq.n	9e44 <__smakebuf_r+0xa4>
    9e2e:	230e      	movs	r3, #14
    9e30:	5ee1      	ldrsh	r1, [r4, r3]
    9e32:	1c30      	adds	r0, r6, #0
    9e34:	f003 fe4e 	bl	dad4 <_isatty_r>
    9e38:	2800      	cmp	r0, #0
    9e3a:	d003      	beq.n	9e44 <__smakebuf_r+0xa4>
    9e3c:	2201      	movs	r2, #1
    9e3e:	89a3      	ldrh	r3, [r4, #12]
    9e40:	4313      	orrs	r3, r2
    9e42:	81a3      	strh	r3, [r4, #12]
    9e44:	b011      	add	sp, #68	; 0x44
    9e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9e48:	ffffe000 	.word	0xffffe000
    9e4c:	00009979 	.word	0x00009979

00009e50 <malloc>:
    9e50:	b508      	push	{r3, lr}
    9e52:	4b03      	ldr	r3, [pc, #12]	; (9e60 <malloc+0x10>)
    9e54:	1c01      	adds	r1, r0, #0
    9e56:	6818      	ldr	r0, [r3, #0]
    9e58:	f000 f870 	bl	9f3c <_malloc_r>
    9e5c:	bd08      	pop	{r3, pc}
    9e5e:	46c0      	nop			; (mov r8, r8)
    9e60:	20000134 	.word	0x20000134

00009e64 <free>:
    9e64:	b508      	push	{r3, lr}
    9e66:	4b03      	ldr	r3, [pc, #12]	; (9e74 <free+0x10>)
    9e68:	1c01      	adds	r1, r0, #0
    9e6a:	6818      	ldr	r0, [r3, #0]
    9e6c:	f000 f820 	bl	9eb0 <_free_r>
    9e70:	bd08      	pop	{r3, pc}
    9e72:	46c0      	nop			; (mov r8, r8)
    9e74:	20000134 	.word	0x20000134

00009e78 <memchr>:
    9e78:	b2c9      	uxtb	r1, r1
    9e7a:	1882      	adds	r2, r0, r2
    9e7c:	4290      	cmp	r0, r2
    9e7e:	d004      	beq.n	9e8a <memchr+0x12>
    9e80:	7803      	ldrb	r3, [r0, #0]
    9e82:	428b      	cmp	r3, r1
    9e84:	d002      	beq.n	9e8c <memchr+0x14>
    9e86:	3001      	adds	r0, #1
    9e88:	e7f8      	b.n	9e7c <memchr+0x4>
    9e8a:	2000      	movs	r0, #0
    9e8c:	4770      	bx	lr

00009e8e <memcpy>:
    9e8e:	2300      	movs	r3, #0
    9e90:	b510      	push	{r4, lr}
    9e92:	4293      	cmp	r3, r2
    9e94:	d003      	beq.n	9e9e <memcpy+0x10>
    9e96:	5ccc      	ldrb	r4, [r1, r3]
    9e98:	54c4      	strb	r4, [r0, r3]
    9e9a:	3301      	adds	r3, #1
    9e9c:	e7f9      	b.n	9e92 <memcpy+0x4>
    9e9e:	bd10      	pop	{r4, pc}

00009ea0 <memset>:
    9ea0:	1c03      	adds	r3, r0, #0
    9ea2:	1882      	adds	r2, r0, r2
    9ea4:	4293      	cmp	r3, r2
    9ea6:	d002      	beq.n	9eae <memset+0xe>
    9ea8:	7019      	strb	r1, [r3, #0]
    9eaa:	3301      	adds	r3, #1
    9eac:	e7fa      	b.n	9ea4 <memset+0x4>
    9eae:	4770      	bx	lr

00009eb0 <_free_r>:
    9eb0:	b530      	push	{r4, r5, lr}
    9eb2:	2900      	cmp	r1, #0
    9eb4:	d03e      	beq.n	9f34 <_free_r+0x84>
    9eb6:	3904      	subs	r1, #4
    9eb8:	680b      	ldr	r3, [r1, #0]
    9eba:	2b00      	cmp	r3, #0
    9ebc:	da00      	bge.n	9ec0 <_free_r+0x10>
    9ebe:	18c9      	adds	r1, r1, r3
    9ec0:	4a1d      	ldr	r2, [pc, #116]	; (9f38 <_free_r+0x88>)
    9ec2:	6813      	ldr	r3, [r2, #0]
    9ec4:	1c14      	adds	r4, r2, #0
    9ec6:	2b00      	cmp	r3, #0
    9ec8:	d102      	bne.n	9ed0 <_free_r+0x20>
    9eca:	604b      	str	r3, [r1, #4]
    9ecc:	6011      	str	r1, [r2, #0]
    9ece:	e031      	b.n	9f34 <_free_r+0x84>
    9ed0:	4299      	cmp	r1, r3
    9ed2:	d20d      	bcs.n	9ef0 <_free_r+0x40>
    9ed4:	6808      	ldr	r0, [r1, #0]
    9ed6:	180a      	adds	r2, r1, r0
    9ed8:	429a      	cmp	r2, r3
    9eda:	d103      	bne.n	9ee4 <_free_r+0x34>
    9edc:	6813      	ldr	r3, [r2, #0]
    9ede:	18c3      	adds	r3, r0, r3
    9ee0:	600b      	str	r3, [r1, #0]
    9ee2:	6853      	ldr	r3, [r2, #4]
    9ee4:	604b      	str	r3, [r1, #4]
    9ee6:	6021      	str	r1, [r4, #0]
    9ee8:	e024      	b.n	9f34 <_free_r+0x84>
    9eea:	428a      	cmp	r2, r1
    9eec:	d803      	bhi.n	9ef6 <_free_r+0x46>
    9eee:	1c13      	adds	r3, r2, #0
    9ef0:	685a      	ldr	r2, [r3, #4]
    9ef2:	2a00      	cmp	r2, #0
    9ef4:	d1f9      	bne.n	9eea <_free_r+0x3a>
    9ef6:	681d      	ldr	r5, [r3, #0]
    9ef8:	195c      	adds	r4, r3, r5
    9efa:	428c      	cmp	r4, r1
    9efc:	d10b      	bne.n	9f16 <_free_r+0x66>
    9efe:	6809      	ldr	r1, [r1, #0]
    9f00:	1869      	adds	r1, r5, r1
    9f02:	1858      	adds	r0, r3, r1
    9f04:	6019      	str	r1, [r3, #0]
    9f06:	4290      	cmp	r0, r2
    9f08:	d114      	bne.n	9f34 <_free_r+0x84>
    9f0a:	6810      	ldr	r0, [r2, #0]
    9f0c:	6852      	ldr	r2, [r2, #4]
    9f0e:	1809      	adds	r1, r1, r0
    9f10:	6019      	str	r1, [r3, #0]
    9f12:	605a      	str	r2, [r3, #4]
    9f14:	e00e      	b.n	9f34 <_free_r+0x84>
    9f16:	428c      	cmp	r4, r1
    9f18:	d902      	bls.n	9f20 <_free_r+0x70>
    9f1a:	230c      	movs	r3, #12
    9f1c:	6003      	str	r3, [r0, #0]
    9f1e:	e009      	b.n	9f34 <_free_r+0x84>
    9f20:	6808      	ldr	r0, [r1, #0]
    9f22:	180c      	adds	r4, r1, r0
    9f24:	4294      	cmp	r4, r2
    9f26:	d103      	bne.n	9f30 <_free_r+0x80>
    9f28:	6814      	ldr	r4, [r2, #0]
    9f2a:	6852      	ldr	r2, [r2, #4]
    9f2c:	1900      	adds	r0, r0, r4
    9f2e:	6008      	str	r0, [r1, #0]
    9f30:	604a      	str	r2, [r1, #4]
    9f32:	6059      	str	r1, [r3, #4]
    9f34:	bd30      	pop	{r4, r5, pc}
    9f36:	46c0      	nop			; (mov r8, r8)
    9f38:	20004710 	.word	0x20004710

00009f3c <_malloc_r>:
    9f3c:	2303      	movs	r3, #3
    9f3e:	b570      	push	{r4, r5, r6, lr}
    9f40:	1ccc      	adds	r4, r1, #3
    9f42:	439c      	bics	r4, r3
    9f44:	3408      	adds	r4, #8
    9f46:	1c05      	adds	r5, r0, #0
    9f48:	2c0c      	cmp	r4, #12
    9f4a:	d201      	bcs.n	9f50 <_malloc_r+0x14>
    9f4c:	240c      	movs	r4, #12
    9f4e:	e005      	b.n	9f5c <_malloc_r+0x20>
    9f50:	2c00      	cmp	r4, #0
    9f52:	da03      	bge.n	9f5c <_malloc_r+0x20>
    9f54:	230c      	movs	r3, #12
    9f56:	2000      	movs	r0, #0
    9f58:	602b      	str	r3, [r5, #0]
    9f5a:	e042      	b.n	9fe2 <_malloc_r+0xa6>
    9f5c:	428c      	cmp	r4, r1
    9f5e:	d3f9      	bcc.n	9f54 <_malloc_r+0x18>
    9f60:	4a20      	ldr	r2, [pc, #128]	; (9fe4 <_malloc_r+0xa8>)
    9f62:	6813      	ldr	r3, [r2, #0]
    9f64:	1c10      	adds	r0, r2, #0
    9f66:	1c19      	adds	r1, r3, #0
    9f68:	2900      	cmp	r1, #0
    9f6a:	d013      	beq.n	9f94 <_malloc_r+0x58>
    9f6c:	680a      	ldr	r2, [r1, #0]
    9f6e:	1b12      	subs	r2, r2, r4
    9f70:	d40d      	bmi.n	9f8e <_malloc_r+0x52>
    9f72:	2a0b      	cmp	r2, #11
    9f74:	d902      	bls.n	9f7c <_malloc_r+0x40>
    9f76:	600a      	str	r2, [r1, #0]
    9f78:	188b      	adds	r3, r1, r2
    9f7a:	e01f      	b.n	9fbc <_malloc_r+0x80>
    9f7c:	428b      	cmp	r3, r1
    9f7e:	d102      	bne.n	9f86 <_malloc_r+0x4a>
    9f80:	685a      	ldr	r2, [r3, #4]
    9f82:	6002      	str	r2, [r0, #0]
    9f84:	e01b      	b.n	9fbe <_malloc_r+0x82>
    9f86:	684a      	ldr	r2, [r1, #4]
    9f88:	605a      	str	r2, [r3, #4]
    9f8a:	1c0b      	adds	r3, r1, #0
    9f8c:	e017      	b.n	9fbe <_malloc_r+0x82>
    9f8e:	1c0b      	adds	r3, r1, #0
    9f90:	6849      	ldr	r1, [r1, #4]
    9f92:	e7e9      	b.n	9f68 <_malloc_r+0x2c>
    9f94:	4e14      	ldr	r6, [pc, #80]	; (9fe8 <_malloc_r+0xac>)
    9f96:	6833      	ldr	r3, [r6, #0]
    9f98:	2b00      	cmp	r3, #0
    9f9a:	d103      	bne.n	9fa4 <_malloc_r+0x68>
    9f9c:	1c28      	adds	r0, r5, #0
    9f9e:	f001 f97f 	bl	b2a0 <_sbrk_r>
    9fa2:	6030      	str	r0, [r6, #0]
    9fa4:	1c28      	adds	r0, r5, #0
    9fa6:	1c21      	adds	r1, r4, #0
    9fa8:	f001 f97a 	bl	b2a0 <_sbrk_r>
    9fac:	1c03      	adds	r3, r0, #0
    9fae:	1c42      	adds	r2, r0, #1
    9fb0:	d0d0      	beq.n	9f54 <_malloc_r+0x18>
    9fb2:	2203      	movs	r2, #3
    9fb4:	1cc6      	adds	r6, r0, #3
    9fb6:	4396      	bics	r6, r2
    9fb8:	4286      	cmp	r6, r0
    9fba:	d10a      	bne.n	9fd2 <_malloc_r+0x96>
    9fbc:	601c      	str	r4, [r3, #0]
    9fbe:	1c18      	adds	r0, r3, #0
    9fc0:	2107      	movs	r1, #7
    9fc2:	300b      	adds	r0, #11
    9fc4:	1d1a      	adds	r2, r3, #4
    9fc6:	4388      	bics	r0, r1
    9fc8:	1a82      	subs	r2, r0, r2
    9fca:	d00a      	beq.n	9fe2 <_malloc_r+0xa6>
    9fcc:	4251      	negs	r1, r2
    9fce:	5099      	str	r1, [r3, r2]
    9fd0:	e007      	b.n	9fe2 <_malloc_r+0xa6>
    9fd2:	1a31      	subs	r1, r6, r0
    9fd4:	1c28      	adds	r0, r5, #0
    9fd6:	f001 f963 	bl	b2a0 <_sbrk_r>
    9fda:	1c43      	adds	r3, r0, #1
    9fdc:	d0ba      	beq.n	9f54 <_malloc_r+0x18>
    9fde:	1c33      	adds	r3, r6, #0
    9fe0:	e7ec      	b.n	9fbc <_malloc_r+0x80>
    9fe2:	bd70      	pop	{r4, r5, r6, pc}
    9fe4:	20004710 	.word	0x20004710
    9fe8:	2000470c 	.word	0x2000470c

00009fec <__sfputc_r>:
    9fec:	6893      	ldr	r3, [r2, #8]
    9fee:	b510      	push	{r4, lr}
    9ff0:	3b01      	subs	r3, #1
    9ff2:	6093      	str	r3, [r2, #8]
    9ff4:	2b00      	cmp	r3, #0
    9ff6:	da05      	bge.n	a004 <__sfputc_r+0x18>
    9ff8:	6994      	ldr	r4, [r2, #24]
    9ffa:	42a3      	cmp	r3, r4
    9ffc:	db08      	blt.n	a010 <__sfputc_r+0x24>
    9ffe:	b2cb      	uxtb	r3, r1
    a000:	2b0a      	cmp	r3, #10
    a002:	d005      	beq.n	a010 <__sfputc_r+0x24>
    a004:	6813      	ldr	r3, [r2, #0]
    a006:	1c58      	adds	r0, r3, #1
    a008:	6010      	str	r0, [r2, #0]
    a00a:	7019      	strb	r1, [r3, #0]
    a00c:	b2c8      	uxtb	r0, r1
    a00e:	e001      	b.n	a014 <__sfputc_r+0x28>
    a010:	f002 fa84 	bl	c51c <__swbuf_r>
    a014:	bd10      	pop	{r4, pc}

0000a016 <__sfputs_r>:
    a016:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a018:	1c06      	adds	r6, r0, #0
    a01a:	1c0f      	adds	r7, r1, #0
    a01c:	1c14      	adds	r4, r2, #0
    a01e:	18d5      	adds	r5, r2, r3
    a020:	42ac      	cmp	r4, r5
    a022:	d008      	beq.n	a036 <__sfputs_r+0x20>
    a024:	7821      	ldrb	r1, [r4, #0]
    a026:	1c30      	adds	r0, r6, #0
    a028:	1c3a      	adds	r2, r7, #0
    a02a:	f7ff ffdf 	bl	9fec <__sfputc_r>
    a02e:	3401      	adds	r4, #1
    a030:	1c43      	adds	r3, r0, #1
    a032:	d1f5      	bne.n	a020 <__sfputs_r+0xa>
    a034:	e000      	b.n	a038 <__sfputs_r+0x22>
    a036:	2000      	movs	r0, #0
    a038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000a03c <_vfiprintf_r>:
    a03c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a03e:	b09f      	sub	sp, #124	; 0x7c
    a040:	1c06      	adds	r6, r0, #0
    a042:	1c0f      	adds	r7, r1, #0
    a044:	9202      	str	r2, [sp, #8]
    a046:	9305      	str	r3, [sp, #20]
    a048:	2800      	cmp	r0, #0
    a04a:	d004      	beq.n	a056 <_vfiprintf_r+0x1a>
    a04c:	6983      	ldr	r3, [r0, #24]
    a04e:	2b00      	cmp	r3, #0
    a050:	d101      	bne.n	a056 <_vfiprintf_r+0x1a>
    a052:	f7ff fcd3 	bl	99fc <__sinit>
    a056:	4b79      	ldr	r3, [pc, #484]	; (a23c <_vfiprintf_r+0x200>)
    a058:	429f      	cmp	r7, r3
    a05a:	d101      	bne.n	a060 <_vfiprintf_r+0x24>
    a05c:	6877      	ldr	r7, [r6, #4]
    a05e:	e008      	b.n	a072 <_vfiprintf_r+0x36>
    a060:	4b77      	ldr	r3, [pc, #476]	; (a240 <_vfiprintf_r+0x204>)
    a062:	429f      	cmp	r7, r3
    a064:	d101      	bne.n	a06a <_vfiprintf_r+0x2e>
    a066:	68b7      	ldr	r7, [r6, #8]
    a068:	e003      	b.n	a072 <_vfiprintf_r+0x36>
    a06a:	4b76      	ldr	r3, [pc, #472]	; (a244 <_vfiprintf_r+0x208>)
    a06c:	429f      	cmp	r7, r3
    a06e:	d100      	bne.n	a072 <_vfiprintf_r+0x36>
    a070:	68f7      	ldr	r7, [r6, #12]
    a072:	89bb      	ldrh	r3, [r7, #12]
    a074:	071b      	lsls	r3, r3, #28
    a076:	d50a      	bpl.n	a08e <_vfiprintf_r+0x52>
    a078:	693b      	ldr	r3, [r7, #16]
    a07a:	2b00      	cmp	r3, #0
    a07c:	d007      	beq.n	a08e <_vfiprintf_r+0x52>
    a07e:	2300      	movs	r3, #0
    a080:	ad06      	add	r5, sp, #24
    a082:	616b      	str	r3, [r5, #20]
    a084:	3320      	adds	r3, #32
    a086:	766b      	strb	r3, [r5, #25]
    a088:	3310      	adds	r3, #16
    a08a:	76ab      	strb	r3, [r5, #26]
    a08c:	e03d      	b.n	a10a <_vfiprintf_r+0xce>
    a08e:	1c30      	adds	r0, r6, #0
    a090:	1c39      	adds	r1, r7, #0
    a092:	f002 faaf 	bl	c5f4 <__swsetup_r>
    a096:	2800      	cmp	r0, #0
    a098:	d0f1      	beq.n	a07e <_vfiprintf_r+0x42>
    a09a:	2001      	movs	r0, #1
    a09c:	4240      	negs	r0, r0
    a09e:	e0ca      	b.n	a236 <_vfiprintf_r+0x1fa>
    a0a0:	9a05      	ldr	r2, [sp, #20]
    a0a2:	1d11      	adds	r1, r2, #4
    a0a4:	6812      	ldr	r2, [r2, #0]
    a0a6:	9105      	str	r1, [sp, #20]
    a0a8:	2a00      	cmp	r2, #0
    a0aa:	db7e      	blt.n	a1aa <_vfiprintf_r+0x16e>
    a0ac:	9209      	str	r2, [sp, #36]	; 0x24
    a0ae:	3401      	adds	r4, #1
    a0b0:	7823      	ldrb	r3, [r4, #0]
    a0b2:	2b2e      	cmp	r3, #46	; 0x2e
    a0b4:	d100      	bne.n	a0b8 <_vfiprintf_r+0x7c>
    a0b6:	e089      	b.n	a1cc <_vfiprintf_r+0x190>
    a0b8:	7821      	ldrb	r1, [r4, #0]
    a0ba:	4863      	ldr	r0, [pc, #396]	; (a248 <_vfiprintf_r+0x20c>)
    a0bc:	2203      	movs	r2, #3
    a0be:	f7ff fedb 	bl	9e78 <memchr>
    a0c2:	2800      	cmp	r0, #0
    a0c4:	d008      	beq.n	a0d8 <_vfiprintf_r+0x9c>
    a0c6:	4b60      	ldr	r3, [pc, #384]	; (a248 <_vfiprintf_r+0x20c>)
    a0c8:	3401      	adds	r4, #1
    a0ca:	1ac0      	subs	r0, r0, r3
    a0cc:	2340      	movs	r3, #64	; 0x40
    a0ce:	4083      	lsls	r3, r0
    a0d0:	1c18      	adds	r0, r3, #0
    a0d2:	682b      	ldr	r3, [r5, #0]
    a0d4:	4318      	orrs	r0, r3
    a0d6:	6028      	str	r0, [r5, #0]
    a0d8:	7821      	ldrb	r1, [r4, #0]
    a0da:	1c63      	adds	r3, r4, #1
    a0dc:	485b      	ldr	r0, [pc, #364]	; (a24c <_vfiprintf_r+0x210>)
    a0de:	2206      	movs	r2, #6
    a0e0:	9302      	str	r3, [sp, #8]
    a0e2:	7629      	strb	r1, [r5, #24]
    a0e4:	f7ff fec8 	bl	9e78 <memchr>
    a0e8:	2800      	cmp	r0, #0
    a0ea:	d100      	bne.n	a0ee <_vfiprintf_r+0xb2>
    a0ec:	e091      	b.n	a212 <_vfiprintf_r+0x1d6>
    a0ee:	4b58      	ldr	r3, [pc, #352]	; (a250 <_vfiprintf_r+0x214>)
    a0f0:	2b00      	cmp	r3, #0
    a0f2:	d000      	beq.n	a0f6 <_vfiprintf_r+0xba>
    a0f4:	e084      	b.n	a200 <_vfiprintf_r+0x1c4>
    a0f6:	2207      	movs	r2, #7
    a0f8:	9b05      	ldr	r3, [sp, #20]
    a0fa:	3307      	adds	r3, #7
    a0fc:	4393      	bics	r3, r2
    a0fe:	3308      	adds	r3, #8
    a100:	9305      	str	r3, [sp, #20]
    a102:	696b      	ldr	r3, [r5, #20]
    a104:	9a03      	ldr	r2, [sp, #12]
    a106:	189b      	adds	r3, r3, r2
    a108:	616b      	str	r3, [r5, #20]
    a10a:	9c02      	ldr	r4, [sp, #8]
    a10c:	7823      	ldrb	r3, [r4, #0]
    a10e:	2b00      	cmp	r3, #0
    a110:	d104      	bne.n	a11c <_vfiprintf_r+0xe0>
    a112:	9b02      	ldr	r3, [sp, #8]
    a114:	1ae3      	subs	r3, r4, r3
    a116:	9304      	str	r3, [sp, #16]
    a118:	d011      	beq.n	a13e <_vfiprintf_r+0x102>
    a11a:	e003      	b.n	a124 <_vfiprintf_r+0xe8>
    a11c:	2b25      	cmp	r3, #37	; 0x25
    a11e:	d0f8      	beq.n	a112 <_vfiprintf_r+0xd6>
    a120:	3401      	adds	r4, #1
    a122:	e7f3      	b.n	a10c <_vfiprintf_r+0xd0>
    a124:	9b04      	ldr	r3, [sp, #16]
    a126:	1c30      	adds	r0, r6, #0
    a128:	1c39      	adds	r1, r7, #0
    a12a:	9a02      	ldr	r2, [sp, #8]
    a12c:	f7ff ff73 	bl	a016 <__sfputs_r>
    a130:	1c43      	adds	r3, r0, #1
    a132:	d07b      	beq.n	a22c <_vfiprintf_r+0x1f0>
    a134:	696a      	ldr	r2, [r5, #20]
    a136:	9b04      	ldr	r3, [sp, #16]
    a138:	4694      	mov	ip, r2
    a13a:	4463      	add	r3, ip
    a13c:	616b      	str	r3, [r5, #20]
    a13e:	7823      	ldrb	r3, [r4, #0]
    a140:	2b00      	cmp	r3, #0
    a142:	d073      	beq.n	a22c <_vfiprintf_r+0x1f0>
    a144:	2201      	movs	r2, #1
    a146:	2300      	movs	r3, #0
    a148:	4252      	negs	r2, r2
    a14a:	606a      	str	r2, [r5, #4]
    a14c:	a902      	add	r1, sp, #8
    a14e:	3254      	adds	r2, #84	; 0x54
    a150:	1852      	adds	r2, r2, r1
    a152:	3401      	adds	r4, #1
    a154:	602b      	str	r3, [r5, #0]
    a156:	60eb      	str	r3, [r5, #12]
    a158:	60ab      	str	r3, [r5, #8]
    a15a:	7013      	strb	r3, [r2, #0]
    a15c:	65ab      	str	r3, [r5, #88]	; 0x58
    a15e:	7821      	ldrb	r1, [r4, #0]
    a160:	483c      	ldr	r0, [pc, #240]	; (a254 <_vfiprintf_r+0x218>)
    a162:	2205      	movs	r2, #5
    a164:	f7ff fe88 	bl	9e78 <memchr>
    a168:	2800      	cmp	r0, #0
    a16a:	d009      	beq.n	a180 <_vfiprintf_r+0x144>
    a16c:	4b39      	ldr	r3, [pc, #228]	; (a254 <_vfiprintf_r+0x218>)
    a16e:	3401      	adds	r4, #1
    a170:	1ac0      	subs	r0, r0, r3
    a172:	2301      	movs	r3, #1
    a174:	4083      	lsls	r3, r0
    a176:	1c18      	adds	r0, r3, #0
    a178:	682b      	ldr	r3, [r5, #0]
    a17a:	4318      	orrs	r0, r3
    a17c:	6028      	str	r0, [r5, #0]
    a17e:	e7ee      	b.n	a15e <_vfiprintf_r+0x122>
    a180:	682b      	ldr	r3, [r5, #0]
    a182:	06da      	lsls	r2, r3, #27
    a184:	d504      	bpl.n	a190 <_vfiprintf_r+0x154>
    a186:	2253      	movs	r2, #83	; 0x53
    a188:	2120      	movs	r1, #32
    a18a:	a802      	add	r0, sp, #8
    a18c:	1812      	adds	r2, r2, r0
    a18e:	7011      	strb	r1, [r2, #0]
    a190:	071a      	lsls	r2, r3, #28
    a192:	d504      	bpl.n	a19e <_vfiprintf_r+0x162>
    a194:	2253      	movs	r2, #83	; 0x53
    a196:	212b      	movs	r1, #43	; 0x2b
    a198:	a802      	add	r0, sp, #8
    a19a:	1812      	adds	r2, r2, r0
    a19c:	7011      	strb	r1, [r2, #0]
    a19e:	7822      	ldrb	r2, [r4, #0]
    a1a0:	2a2a      	cmp	r2, #42	; 0x2a
    a1a2:	d100      	bne.n	a1a6 <_vfiprintf_r+0x16a>
    a1a4:	e77c      	b.n	a0a0 <_vfiprintf_r+0x64>
    a1a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a1a8:	e005      	b.n	a1b6 <_vfiprintf_r+0x17a>
    a1aa:	4252      	negs	r2, r2
    a1ac:	60ea      	str	r2, [r5, #12]
    a1ae:	2202      	movs	r2, #2
    a1b0:	4313      	orrs	r3, r2
    a1b2:	602b      	str	r3, [r5, #0]
    a1b4:	e77b      	b.n	a0ae <_vfiprintf_r+0x72>
    a1b6:	7822      	ldrb	r2, [r4, #0]
    a1b8:	3a30      	subs	r2, #48	; 0x30
    a1ba:	2a09      	cmp	r2, #9
    a1bc:	d804      	bhi.n	a1c8 <_vfiprintf_r+0x18c>
    a1be:	210a      	movs	r1, #10
    a1c0:	434b      	muls	r3, r1
    a1c2:	3401      	adds	r4, #1
    a1c4:	189b      	adds	r3, r3, r2
    a1c6:	e7f6      	b.n	a1b6 <_vfiprintf_r+0x17a>
    a1c8:	9309      	str	r3, [sp, #36]	; 0x24
    a1ca:	e771      	b.n	a0b0 <_vfiprintf_r+0x74>
    a1cc:	7863      	ldrb	r3, [r4, #1]
    a1ce:	2b2a      	cmp	r3, #42	; 0x2a
    a1d0:	d109      	bne.n	a1e6 <_vfiprintf_r+0x1aa>
    a1d2:	9b05      	ldr	r3, [sp, #20]
    a1d4:	3402      	adds	r4, #2
    a1d6:	1d1a      	adds	r2, r3, #4
    a1d8:	681b      	ldr	r3, [r3, #0]
    a1da:	9205      	str	r2, [sp, #20]
    a1dc:	2b00      	cmp	r3, #0
    a1de:	da0d      	bge.n	a1fc <_vfiprintf_r+0x1c0>
    a1e0:	2301      	movs	r3, #1
    a1e2:	425b      	negs	r3, r3
    a1e4:	e00a      	b.n	a1fc <_vfiprintf_r+0x1c0>
    a1e6:	2300      	movs	r3, #0
    a1e8:	3401      	adds	r4, #1
    a1ea:	7822      	ldrb	r2, [r4, #0]
    a1ec:	3a30      	subs	r2, #48	; 0x30
    a1ee:	2a09      	cmp	r2, #9
    a1f0:	d804      	bhi.n	a1fc <_vfiprintf_r+0x1c0>
    a1f2:	210a      	movs	r1, #10
    a1f4:	434b      	muls	r3, r1
    a1f6:	3401      	adds	r4, #1
    a1f8:	189b      	adds	r3, r3, r2
    a1fa:	e7f6      	b.n	a1ea <_vfiprintf_r+0x1ae>
    a1fc:	9307      	str	r3, [sp, #28]
    a1fe:	e75b      	b.n	a0b8 <_vfiprintf_r+0x7c>
    a200:	ab05      	add	r3, sp, #20
    a202:	9300      	str	r3, [sp, #0]
    a204:	1c30      	adds	r0, r6, #0
    a206:	1c29      	adds	r1, r5, #0
    a208:	1c3a      	adds	r2, r7, #0
    a20a:	4b13      	ldr	r3, [pc, #76]	; (a258 <_vfiprintf_r+0x21c>)
    a20c:	f000 f8ca 	bl	a3a4 <_printf_float>
    a210:	e007      	b.n	a222 <_vfiprintf_r+0x1e6>
    a212:	ab05      	add	r3, sp, #20
    a214:	9300      	str	r3, [sp, #0]
    a216:	1c30      	adds	r0, r6, #0
    a218:	1c29      	adds	r1, r5, #0
    a21a:	1c3a      	adds	r2, r7, #0
    a21c:	4b0e      	ldr	r3, [pc, #56]	; (a258 <_vfiprintf_r+0x21c>)
    a21e:	f000 fb6d 	bl	a8fc <_printf_i>
    a222:	9003      	str	r0, [sp, #12]
    a224:	9b03      	ldr	r3, [sp, #12]
    a226:	3301      	adds	r3, #1
    a228:	d000      	beq.n	a22c <_vfiprintf_r+0x1f0>
    a22a:	e76a      	b.n	a102 <_vfiprintf_r+0xc6>
    a22c:	89bb      	ldrh	r3, [r7, #12]
    a22e:	065b      	lsls	r3, r3, #25
    a230:	d500      	bpl.n	a234 <_vfiprintf_r+0x1f8>
    a232:	e732      	b.n	a09a <_vfiprintf_r+0x5e>
    a234:	980b      	ldr	r0, [sp, #44]	; 0x2c
    a236:	b01f      	add	sp, #124	; 0x7c
    a238:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a23a:	46c0      	nop			; (mov r8, r8)
    a23c:	0000f9e8 	.word	0x0000f9e8
    a240:	0000fa08 	.word	0x0000fa08
    a244:	0000fa28 	.word	0x0000fa28
    a248:	0000fa56 	.word	0x0000fa56
    a24c:	0000fa5a 	.word	0x0000fa5a
    a250:	0000a3a5 	.word	0x0000a3a5
    a254:	0000fa50 	.word	0x0000fa50
    a258:	0000a017 	.word	0x0000a017

0000a25c <vfiprintf>:
    a25c:	b538      	push	{r3, r4, r5, lr}
    a25e:	1c05      	adds	r5, r0, #0
    a260:	1c0c      	adds	r4, r1, #0
    a262:	1c13      	adds	r3, r2, #0
    a264:	4a03      	ldr	r2, [pc, #12]	; (a274 <vfiprintf+0x18>)
    a266:	1c29      	adds	r1, r5, #0
    a268:	6810      	ldr	r0, [r2, #0]
    a26a:	1c22      	adds	r2, r4, #0
    a26c:	f7ff fee6 	bl	a03c <_vfiprintf_r>
    a270:	bd38      	pop	{r3, r4, r5, pc}
    a272:	46c0      	nop			; (mov r8, r8)
    a274:	20000134 	.word	0x20000134

0000a278 <__cvt>:
    a278:	b5f0      	push	{r4, r5, r6, r7, lr}
    a27a:	b08b      	sub	sp, #44	; 0x2c
    a27c:	1c14      	adds	r4, r2, #0
    a27e:	1e1d      	subs	r5, r3, #0
    a280:	9912      	ldr	r1, [sp, #72]	; 0x48
    a282:	da06      	bge.n	a292 <__cvt+0x1a>
    a284:	2480      	movs	r4, #128	; 0x80
    a286:	0624      	lsls	r4, r4, #24
    a288:	192b      	adds	r3, r5, r4
    a28a:	1c1d      	adds	r5, r3, #0
    a28c:	1c14      	adds	r4, r2, #0
    a28e:	232d      	movs	r3, #45	; 0x2d
    a290:	e000      	b.n	a294 <__cvt+0x1c>
    a292:	2300      	movs	r3, #0
    a294:	700b      	strb	r3, [r1, #0]
    a296:	2320      	movs	r3, #32
    a298:	9e14      	ldr	r6, [sp, #80]	; 0x50
    a29a:	2203      	movs	r2, #3
    a29c:	439e      	bics	r6, r3
    a29e:	2e46      	cmp	r6, #70	; 0x46
    a2a0:	d007      	beq.n	a2b2 <__cvt+0x3a>
    a2a2:	1c33      	adds	r3, r6, #0
    a2a4:	3b45      	subs	r3, #69	; 0x45
    a2a6:	4259      	negs	r1, r3
    a2a8:	414b      	adcs	r3, r1
    a2aa:	9910      	ldr	r1, [sp, #64]	; 0x40
    a2ac:	3a01      	subs	r2, #1
    a2ae:	18cb      	adds	r3, r1, r3
    a2b0:	9310      	str	r3, [sp, #64]	; 0x40
    a2b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a2b4:	9200      	str	r2, [sp, #0]
    a2b6:	9301      	str	r3, [sp, #4]
    a2b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    a2ba:	1c22      	adds	r2, r4, #0
    a2bc:	9302      	str	r3, [sp, #8]
    a2be:	ab08      	add	r3, sp, #32
    a2c0:	9303      	str	r3, [sp, #12]
    a2c2:	ab09      	add	r3, sp, #36	; 0x24
    a2c4:	9304      	str	r3, [sp, #16]
    a2c6:	1c2b      	adds	r3, r5, #0
    a2c8:	f002 faa2 	bl	c810 <_dtoa_r>
    a2cc:	1c07      	adds	r7, r0, #0
    a2ce:	2e47      	cmp	r6, #71	; 0x47
    a2d0:	d102      	bne.n	a2d8 <__cvt+0x60>
    a2d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a2d4:	07db      	lsls	r3, r3, #31
    a2d6:	d52c      	bpl.n	a332 <__cvt+0xba>
    a2d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a2da:	18fb      	adds	r3, r7, r3
    a2dc:	9307      	str	r3, [sp, #28]
    a2de:	2e46      	cmp	r6, #70	; 0x46
    a2e0:	d114      	bne.n	a30c <__cvt+0x94>
    a2e2:	783b      	ldrb	r3, [r7, #0]
    a2e4:	2b30      	cmp	r3, #48	; 0x30
    a2e6:	d10c      	bne.n	a302 <__cvt+0x8a>
    a2e8:	1c20      	adds	r0, r4, #0
    a2ea:	1c29      	adds	r1, r5, #0
    a2ec:	2200      	movs	r2, #0
    a2ee:	2300      	movs	r3, #0
    a2f0:	f7fc fb4e 	bl	6990 <__aeabi_dcmpeq>
    a2f4:	2800      	cmp	r0, #0
    a2f6:	d104      	bne.n	a302 <__cvt+0x8a>
    a2f8:	2301      	movs	r3, #1
    a2fa:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a2fc:	1a9b      	subs	r3, r3, r2
    a2fe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    a300:	6013      	str	r3, [r2, #0]
    a302:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    a304:	9a07      	ldr	r2, [sp, #28]
    a306:	681b      	ldr	r3, [r3, #0]
    a308:	18d3      	adds	r3, r2, r3
    a30a:	9307      	str	r3, [sp, #28]
    a30c:	1c20      	adds	r0, r4, #0
    a30e:	1c29      	adds	r1, r5, #0
    a310:	2200      	movs	r2, #0
    a312:	2300      	movs	r3, #0
    a314:	f7fc fb3c 	bl	6990 <__aeabi_dcmpeq>
    a318:	2800      	cmp	r0, #0
    a31a:	d001      	beq.n	a320 <__cvt+0xa8>
    a31c:	9b07      	ldr	r3, [sp, #28]
    a31e:	9309      	str	r3, [sp, #36]	; 0x24
    a320:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a322:	9a07      	ldr	r2, [sp, #28]
    a324:	4293      	cmp	r3, r2
    a326:	d204      	bcs.n	a332 <__cvt+0xba>
    a328:	1c5a      	adds	r2, r3, #1
    a32a:	9209      	str	r2, [sp, #36]	; 0x24
    a32c:	2230      	movs	r2, #48	; 0x30
    a32e:	701a      	strb	r2, [r3, #0]
    a330:	e7f6      	b.n	a320 <__cvt+0xa8>
    a332:	1c38      	adds	r0, r7, #0
    a334:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a336:	9a15      	ldr	r2, [sp, #84]	; 0x54
    a338:	1bdb      	subs	r3, r3, r7
    a33a:	6013      	str	r3, [r2, #0]
    a33c:	b00b      	add	sp, #44	; 0x2c
    a33e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000a340 <__exponent>:
    a340:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a342:	232b      	movs	r3, #43	; 0x2b
    a344:	1c07      	adds	r7, r0, #0
    a346:	1c0c      	adds	r4, r1, #0
    a348:	7002      	strb	r2, [r0, #0]
    a34a:	1c86      	adds	r6, r0, #2
    a34c:	2900      	cmp	r1, #0
    a34e:	da01      	bge.n	a354 <__exponent+0x14>
    a350:	232d      	movs	r3, #45	; 0x2d
    a352:	424c      	negs	r4, r1
    a354:	707b      	strb	r3, [r7, #1]
    a356:	2c09      	cmp	r4, #9
    a358:	dd1c      	ble.n	a394 <__exponent+0x54>
    a35a:	466b      	mov	r3, sp
    a35c:	1ddd      	adds	r5, r3, #7
    a35e:	1c20      	adds	r0, r4, #0
    a360:	210a      	movs	r1, #10
    a362:	f7fc faf9 	bl	6958 <__aeabi_idivmod>
    a366:	3d01      	subs	r5, #1
    a368:	3130      	adds	r1, #48	; 0x30
    a36a:	7029      	strb	r1, [r5, #0]
    a36c:	1c20      	adds	r0, r4, #0
    a36e:	210a      	movs	r1, #10
    a370:	f7fc fa0c 	bl	678c <__aeabi_idiv>
    a374:	1e04      	subs	r4, r0, #0
    a376:	2c09      	cmp	r4, #9
    a378:	dcf1      	bgt.n	a35e <__exponent+0x1e>
    a37a:	3d01      	subs	r5, #1
    a37c:	3430      	adds	r4, #48	; 0x30
    a37e:	702c      	strb	r4, [r5, #0]
    a380:	466b      	mov	r3, sp
    a382:	3307      	adds	r3, #7
    a384:	1c30      	adds	r0, r6, #0
    a386:	42ab      	cmp	r3, r5
    a388:	d909      	bls.n	a39e <__exponent+0x5e>
    a38a:	782b      	ldrb	r3, [r5, #0]
    a38c:	3501      	adds	r5, #1
    a38e:	7033      	strb	r3, [r6, #0]
    a390:	3601      	adds	r6, #1
    a392:	e7f5      	b.n	a380 <__exponent+0x40>
    a394:	2330      	movs	r3, #48	; 0x30
    a396:	18e4      	adds	r4, r4, r3
    a398:	7033      	strb	r3, [r6, #0]
    a39a:	1cb0      	adds	r0, r6, #2
    a39c:	7074      	strb	r4, [r6, #1]
    a39e:	1bc0      	subs	r0, r0, r7
    a3a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

0000a3a4 <_printf_float>:
    a3a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    a3a6:	b093      	sub	sp, #76	; 0x4c
    a3a8:	1c0c      	adds	r4, r1, #0
    a3aa:	9208      	str	r2, [sp, #32]
    a3ac:	9309      	str	r3, [sp, #36]	; 0x24
    a3ae:	9e18      	ldr	r6, [sp, #96]	; 0x60
    a3b0:	1c05      	adds	r5, r0, #0
    a3b2:	f003 fba1 	bl	daf8 <_localeconv_r>
    a3b6:	6803      	ldr	r3, [r0, #0]
    a3b8:	1c18      	adds	r0, r3, #0
    a3ba:	930b      	str	r3, [sp, #44]	; 0x2c
    a3bc:	f001 f8ea 	bl	b594 <strlen>
    a3c0:	2300      	movs	r3, #0
    a3c2:	6821      	ldr	r1, [r4, #0]
    a3c4:	9310      	str	r3, [sp, #64]	; 0x40
    a3c6:	900c      	str	r0, [sp, #48]	; 0x30
    a3c8:	7e27      	ldrb	r7, [r4, #24]
    a3ca:	6833      	ldr	r3, [r6, #0]
    a3cc:	2207      	movs	r2, #7
    a3ce:	05c9      	lsls	r1, r1, #23
    a3d0:	d501      	bpl.n	a3d6 <_printf_float+0x32>
    a3d2:	189b      	adds	r3, r3, r2
    a3d4:	e000      	b.n	a3d8 <_printf_float+0x34>
    a3d6:	3307      	adds	r3, #7
    a3d8:	4393      	bics	r3, r2
    a3da:	1c1a      	adds	r2, r3, #0
    a3dc:	3208      	adds	r2, #8
    a3de:	6032      	str	r2, [r6, #0]
    a3e0:	681a      	ldr	r2, [r3, #0]
    a3e2:	685b      	ldr	r3, [r3, #4]
    a3e4:	64a2      	str	r2, [r4, #72]	; 0x48
    a3e6:	64e3      	str	r3, [r4, #76]	; 0x4c
    a3e8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    a3ea:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    a3ec:	f000 ff30 	bl	b250 <__fpclassifyd>
    a3f0:	2801      	cmp	r0, #1
    a3f2:	d118      	bne.n	a426 <_printf_float+0x82>
    a3f4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    a3f6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    a3f8:	2200      	movs	r2, #0
    a3fa:	2300      	movs	r3, #0
    a3fc:	f7fc face 	bl	699c <__aeabi_dcmplt>
    a400:	2800      	cmp	r0, #0
    a402:	d003      	beq.n	a40c <_printf_float+0x68>
    a404:	1c23      	adds	r3, r4, #0
    a406:	222d      	movs	r2, #45	; 0x2d
    a408:	3343      	adds	r3, #67	; 0x43
    a40a:	701a      	strb	r2, [r3, #0]
    a40c:	4bb6      	ldr	r3, [pc, #728]	; (a6e8 <_printf_float+0x344>)
    a40e:	930a      	str	r3, [sp, #40]	; 0x28
    a410:	2f47      	cmp	r7, #71	; 0x47
    a412:	d901      	bls.n	a418 <_printf_float+0x74>
    a414:	4bb5      	ldr	r3, [pc, #724]	; (a6ec <_printf_float+0x348>)
    a416:	930a      	str	r3, [sp, #40]	; 0x28
    a418:	2303      	movs	r3, #3
    a41a:	6822      	ldr	r2, [r4, #0]
    a41c:	6123      	str	r3, [r4, #16]
    a41e:	3301      	adds	r3, #1
    a420:	439a      	bics	r2, r3
    a422:	6022      	str	r2, [r4, #0]
    a424:	e012      	b.n	a44c <_printf_float+0xa8>
    a426:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    a428:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    a42a:	f000 ff11 	bl	b250 <__fpclassifyd>
    a42e:	6826      	ldr	r6, [r4, #0]
    a430:	2800      	cmp	r0, #0
    a432:	d10d      	bne.n	a450 <_printf_float+0xac>
    a434:	4bae      	ldr	r3, [pc, #696]	; (a6f0 <_printf_float+0x34c>)
    a436:	930a      	str	r3, [sp, #40]	; 0x28
    a438:	2f47      	cmp	r7, #71	; 0x47
    a43a:	d901      	bls.n	a440 <_printf_float+0x9c>
    a43c:	4bad      	ldr	r3, [pc, #692]	; (a6f4 <_printf_float+0x350>)
    a43e:	930a      	str	r3, [sp, #40]	; 0x28
    a440:	2303      	movs	r3, #3
    a442:	1c31      	adds	r1, r6, #0
    a444:	6123      	str	r3, [r4, #16]
    a446:	3301      	adds	r3, #1
    a448:	4399      	bics	r1, r3
    a44a:	6021      	str	r1, [r4, #0]
    a44c:	2600      	movs	r6, #0
    a44e:	e080      	b.n	a552 <_printf_float+0x1ae>
    a450:	2180      	movs	r1, #128	; 0x80
    a452:	6860      	ldr	r0, [r4, #4]
    a454:	00c9      	lsls	r1, r1, #3
    a456:	1c43      	adds	r3, r0, #1
    a458:	d101      	bne.n	a45e <_printf_float+0xba>
    a45a:	2306      	movs	r3, #6
    a45c:	e009      	b.n	a472 <_printf_float+0xce>
    a45e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    a460:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    a462:	2f67      	cmp	r7, #103	; 0x67
    a464:	d001      	beq.n	a46a <_printf_float+0xc6>
    a466:	2f47      	cmp	r7, #71	; 0x47
    a468:	d104      	bne.n	a474 <_printf_float+0xd0>
    a46a:	2800      	cmp	r0, #0
    a46c:	d000      	beq.n	a470 <_printf_float+0xcc>
    a46e:	e1c0      	b.n	a7f2 <_printf_float+0x44e>
    a470:	2301      	movs	r3, #1
    a472:	6063      	str	r3, [r4, #4]
    a474:	6863      	ldr	r3, [r4, #4]
    a476:	4331      	orrs	r1, r6
    a478:	9300      	str	r3, [sp, #0]
    a47a:	2323      	movs	r3, #35	; 0x23
    a47c:	6021      	str	r1, [r4, #0]
    a47e:	9101      	str	r1, [sp, #4]
    a480:	2100      	movs	r1, #0
    a482:	aa06      	add	r2, sp, #24
    a484:	189b      	adds	r3, r3, r2
    a486:	9302      	str	r3, [sp, #8]
    a488:	ab0f      	add	r3, sp, #60	; 0x3c
    a48a:	9303      	str	r3, [sp, #12]
    a48c:	ab10      	add	r3, sp, #64	; 0x40
    a48e:	9305      	str	r3, [sp, #20]
    a490:	9704      	str	r7, [sp, #16]
    a492:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    a494:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    a496:	9106      	str	r1, [sp, #24]
    a498:	1c28      	adds	r0, r5, #0
    a49a:	f7ff feed 	bl	a278 <__cvt>
    a49e:	2320      	movs	r3, #32
    a4a0:	1c3a      	adds	r2, r7, #0
    a4a2:	900a      	str	r0, [sp, #40]	; 0x28
    a4a4:	439a      	bics	r2, r3
    a4a6:	2a47      	cmp	r2, #71	; 0x47
    a4a8:	d107      	bne.n	a4ba <_printf_float+0x116>
    a4aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a4ac:	1cda      	adds	r2, r3, #3
    a4ae:	db02      	blt.n	a4b6 <_printf_float+0x112>
    a4b0:	6862      	ldr	r2, [r4, #4]
    a4b2:	4293      	cmp	r3, r2
    a4b4:	dd2d      	ble.n	a512 <_printf_float+0x16e>
    a4b6:	3f02      	subs	r7, #2
    a4b8:	b2ff      	uxtb	r7, r7
    a4ba:	990f      	ldr	r1, [sp, #60]	; 0x3c
    a4bc:	2f65      	cmp	r7, #101	; 0x65
    a4be:	d812      	bhi.n	a4e6 <_printf_float+0x142>
    a4c0:	1c20      	adds	r0, r4, #0
    a4c2:	3901      	subs	r1, #1
    a4c4:	1c3a      	adds	r2, r7, #0
    a4c6:	3050      	adds	r0, #80	; 0x50
    a4c8:	910f      	str	r1, [sp, #60]	; 0x3c
    a4ca:	f7ff ff39 	bl	a340 <__exponent>
    a4ce:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a4d0:	1c06      	adds	r6, r0, #0
    a4d2:	1883      	adds	r3, r0, r2
    a4d4:	6123      	str	r3, [r4, #16]
    a4d6:	2a01      	cmp	r2, #1
    a4d8:	dc02      	bgt.n	a4e0 <_printf_float+0x13c>
    a4da:	6822      	ldr	r2, [r4, #0]
    a4dc:	07d2      	lsls	r2, r2, #31
    a4de:	d52e      	bpl.n	a53e <_printf_float+0x19a>
    a4e0:	3301      	adds	r3, #1
    a4e2:	6123      	str	r3, [r4, #16]
    a4e4:	e02b      	b.n	a53e <_printf_float+0x19a>
    a4e6:	2f66      	cmp	r7, #102	; 0x66
    a4e8:	d114      	bne.n	a514 <_printf_float+0x170>
    a4ea:	6863      	ldr	r3, [r4, #4]
    a4ec:	2900      	cmp	r1, #0
    a4ee:	dd08      	ble.n	a502 <_printf_float+0x15e>
    a4f0:	6121      	str	r1, [r4, #16]
    a4f2:	2b00      	cmp	r3, #0
    a4f4:	d102      	bne.n	a4fc <_printf_float+0x158>
    a4f6:	6822      	ldr	r2, [r4, #0]
    a4f8:	07d2      	lsls	r2, r2, #31
    a4fa:	d51d      	bpl.n	a538 <_printf_float+0x194>
    a4fc:	3301      	adds	r3, #1
    a4fe:	18cb      	adds	r3, r1, r3
    a500:	e011      	b.n	a526 <_printf_float+0x182>
    a502:	2b00      	cmp	r3, #0
    a504:	d103      	bne.n	a50e <_printf_float+0x16a>
    a506:	2201      	movs	r2, #1
    a508:	6821      	ldr	r1, [r4, #0]
    a50a:	4211      	tst	r1, r2
    a50c:	d013      	beq.n	a536 <_printf_float+0x192>
    a50e:	1c9a      	adds	r2, r3, #2
    a510:	e011      	b.n	a536 <_printf_float+0x192>
    a512:	2767      	movs	r7, #103	; 0x67
    a514:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a516:	9810      	ldr	r0, [sp, #64]	; 0x40
    a518:	4283      	cmp	r3, r0
    a51a:	db06      	blt.n	a52a <_printf_float+0x186>
    a51c:	6822      	ldr	r2, [r4, #0]
    a51e:	6123      	str	r3, [r4, #16]
    a520:	07d2      	lsls	r2, r2, #31
    a522:	d509      	bpl.n	a538 <_printf_float+0x194>
    a524:	3301      	adds	r3, #1
    a526:	6123      	str	r3, [r4, #16]
    a528:	e006      	b.n	a538 <_printf_float+0x194>
    a52a:	2201      	movs	r2, #1
    a52c:	2b00      	cmp	r3, #0
    a52e:	dc01      	bgt.n	a534 <_printf_float+0x190>
    a530:	2102      	movs	r1, #2
    a532:	1aca      	subs	r2, r1, r3
    a534:	1882      	adds	r2, r0, r2
    a536:	6122      	str	r2, [r4, #16]
    a538:	2600      	movs	r6, #0
    a53a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a53c:	65a3      	str	r3, [r4, #88]	; 0x58
    a53e:	2323      	movs	r3, #35	; 0x23
    a540:	aa06      	add	r2, sp, #24
    a542:	189b      	adds	r3, r3, r2
    a544:	781b      	ldrb	r3, [r3, #0]
    a546:	2b00      	cmp	r3, #0
    a548:	d003      	beq.n	a552 <_printf_float+0x1ae>
    a54a:	1c23      	adds	r3, r4, #0
    a54c:	222d      	movs	r2, #45	; 0x2d
    a54e:	3343      	adds	r3, #67	; 0x43
    a550:	701a      	strb	r2, [r3, #0]
    a552:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a554:	1c28      	adds	r0, r5, #0
    a556:	9300      	str	r3, [sp, #0]
    a558:	1c21      	adds	r1, r4, #0
    a55a:	9b08      	ldr	r3, [sp, #32]
    a55c:	aa11      	add	r2, sp, #68	; 0x44
    a55e:	f000 f95f 	bl	a820 <_printf_common>
    a562:	1c43      	adds	r3, r0, #1
    a564:	d102      	bne.n	a56c <_printf_float+0x1c8>
    a566:	2001      	movs	r0, #1
    a568:	4240      	negs	r0, r0
    a56a:	e156      	b.n	a81a <_printf_float+0x476>
    a56c:	6822      	ldr	r2, [r4, #0]
    a56e:	0553      	lsls	r3, r2, #21
    a570:	d404      	bmi.n	a57c <_printf_float+0x1d8>
    a572:	1c28      	adds	r0, r5, #0
    a574:	9908      	ldr	r1, [sp, #32]
    a576:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a578:	6923      	ldr	r3, [r4, #16]
    a57a:	e116      	b.n	a7aa <_printf_float+0x406>
    a57c:	2f65      	cmp	r7, #101	; 0x65
    a57e:	d800      	bhi.n	a582 <_printf_float+0x1de>
    a580:	e0d4      	b.n	a72c <_printf_float+0x388>
    a582:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    a584:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    a586:	2200      	movs	r2, #0
    a588:	2300      	movs	r3, #0
    a58a:	f7fc fa01 	bl	6990 <__aeabi_dcmpeq>
    a58e:	2800      	cmp	r0, #0
    a590:	d02b      	beq.n	a5ea <_printf_float+0x246>
    a592:	2301      	movs	r3, #1
    a594:	1c28      	adds	r0, r5, #0
    a596:	9908      	ldr	r1, [sp, #32]
    a598:	4a57      	ldr	r2, [pc, #348]	; (a6f8 <_printf_float+0x354>)
    a59a:	9e09      	ldr	r6, [sp, #36]	; 0x24
    a59c:	47b0      	blx	r6
    a59e:	1c43      	adds	r3, r0, #1
    a5a0:	d0e1      	beq.n	a566 <_printf_float+0x1c2>
    a5a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a5a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a5a6:	4293      	cmp	r3, r2
    a5a8:	db07      	blt.n	a5ba <_printf_float+0x216>
    a5aa:	6823      	ldr	r3, [r4, #0]
    a5ac:	07db      	lsls	r3, r3, #31
    a5ae:	d404      	bmi.n	a5ba <_printf_float+0x216>
    a5b0:	6823      	ldr	r3, [r4, #0]
    a5b2:	079b      	lsls	r3, r3, #30
    a5b4:	d500      	bpl.n	a5b8 <_printf_float+0x214>
    a5b6:	e11a      	b.n	a7ee <_printf_float+0x44a>
    a5b8:	e113      	b.n	a7e2 <_printf_float+0x43e>
    a5ba:	9e09      	ldr	r6, [sp, #36]	; 0x24
    a5bc:	1c28      	adds	r0, r5, #0
    a5be:	9908      	ldr	r1, [sp, #32]
    a5c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a5c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a5c4:	47b0      	blx	r6
    a5c6:	2600      	movs	r6, #0
    a5c8:	1c43      	adds	r3, r0, #1
    a5ca:	d0cc      	beq.n	a566 <_printf_float+0x1c2>
    a5cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a5ce:	3b01      	subs	r3, #1
    a5d0:	429e      	cmp	r6, r3
    a5d2:	daed      	bge.n	a5b0 <_printf_float+0x20c>
    a5d4:	1c22      	adds	r2, r4, #0
    a5d6:	2301      	movs	r3, #1
    a5d8:	1c28      	adds	r0, r5, #0
    a5da:	9908      	ldr	r1, [sp, #32]
    a5dc:	321a      	adds	r2, #26
    a5de:	9f09      	ldr	r7, [sp, #36]	; 0x24
    a5e0:	47b8      	blx	r7
    a5e2:	1c43      	adds	r3, r0, #1
    a5e4:	d0bf      	beq.n	a566 <_printf_float+0x1c2>
    a5e6:	3601      	adds	r6, #1
    a5e8:	e7f0      	b.n	a5cc <_printf_float+0x228>
    a5ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a5ec:	2b00      	cmp	r3, #0
    a5ee:	dc2b      	bgt.n	a648 <_printf_float+0x2a4>
    a5f0:	2301      	movs	r3, #1
    a5f2:	1c28      	adds	r0, r5, #0
    a5f4:	9908      	ldr	r1, [sp, #32]
    a5f6:	4a40      	ldr	r2, [pc, #256]	; (a6f8 <_printf_float+0x354>)
    a5f8:	9e09      	ldr	r6, [sp, #36]	; 0x24
    a5fa:	47b0      	blx	r6
    a5fc:	1c43      	adds	r3, r0, #1
    a5fe:	d0b2      	beq.n	a566 <_printf_float+0x1c2>
    a600:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a602:	2b00      	cmp	r3, #0
    a604:	d105      	bne.n	a612 <_printf_float+0x26e>
    a606:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a608:	2b00      	cmp	r3, #0
    a60a:	d102      	bne.n	a612 <_printf_float+0x26e>
    a60c:	6823      	ldr	r3, [r4, #0]
    a60e:	07db      	lsls	r3, r3, #31
    a610:	d5ce      	bpl.n	a5b0 <_printf_float+0x20c>
    a612:	9e09      	ldr	r6, [sp, #36]	; 0x24
    a614:	1c28      	adds	r0, r5, #0
    a616:	9908      	ldr	r1, [sp, #32]
    a618:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a61a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a61c:	47b0      	blx	r6
    a61e:	2600      	movs	r6, #0
    a620:	1c43      	adds	r3, r0, #1
    a622:	d0a0      	beq.n	a566 <_printf_float+0x1c2>
    a624:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a626:	1c28      	adds	r0, r5, #0
    a628:	425b      	negs	r3, r3
    a62a:	9908      	ldr	r1, [sp, #32]
    a62c:	429e      	cmp	r6, r3
    a62e:	da08      	bge.n	a642 <_printf_float+0x29e>
    a630:	1c22      	adds	r2, r4, #0
    a632:	2301      	movs	r3, #1
    a634:	321a      	adds	r2, #26
    a636:	9f09      	ldr	r7, [sp, #36]	; 0x24
    a638:	47b8      	blx	r7
    a63a:	1c43      	adds	r3, r0, #1
    a63c:	d093      	beq.n	a566 <_printf_float+0x1c2>
    a63e:	3601      	adds	r6, #1
    a640:	e7f0      	b.n	a624 <_printf_float+0x280>
    a642:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a644:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a646:	e0b0      	b.n	a7aa <_printf_float+0x406>
    a648:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a64a:	6da6      	ldr	r6, [r4, #88]	; 0x58
    a64c:	429e      	cmp	r6, r3
    a64e:	dd00      	ble.n	a652 <_printf_float+0x2ae>
    a650:	1c1e      	adds	r6, r3, #0
    a652:	2e00      	cmp	r6, #0
    a654:	dc01      	bgt.n	a65a <_printf_float+0x2b6>
    a656:	2300      	movs	r3, #0
    a658:	e014      	b.n	a684 <_printf_float+0x2e0>
    a65a:	1c33      	adds	r3, r6, #0
    a65c:	1c28      	adds	r0, r5, #0
    a65e:	9908      	ldr	r1, [sp, #32]
    a660:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a662:	9f09      	ldr	r7, [sp, #36]	; 0x24
    a664:	47b8      	blx	r7
    a666:	1c43      	adds	r3, r0, #1
    a668:	d1f5      	bne.n	a656 <_printf_float+0x2b2>
    a66a:	e77c      	b.n	a566 <_printf_float+0x1c2>
    a66c:	1c22      	adds	r2, r4, #0
    a66e:	2301      	movs	r3, #1
    a670:	1c28      	adds	r0, r5, #0
    a672:	9908      	ldr	r1, [sp, #32]
    a674:	321a      	adds	r2, #26
    a676:	9f09      	ldr	r7, [sp, #36]	; 0x24
    a678:	47b8      	blx	r7
    a67a:	1c43      	adds	r3, r0, #1
    a67c:	d100      	bne.n	a680 <_printf_float+0x2dc>
    a67e:	e772      	b.n	a566 <_printf_float+0x1c2>
    a680:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a682:	3301      	adds	r3, #1
    a684:	930d      	str	r3, [sp, #52]	; 0x34
    a686:	43f3      	mvns	r3, r6
    a688:	6da2      	ldr	r2, [r4, #88]	; 0x58
    a68a:	17db      	asrs	r3, r3, #31
    a68c:	990d      	ldr	r1, [sp, #52]	; 0x34
    a68e:	4033      	ands	r3, r6
    a690:	1ad3      	subs	r3, r2, r3
    a692:	4299      	cmp	r1, r3
    a694:	dbea      	blt.n	a66c <_printf_float+0x2c8>
    a696:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a698:	189e      	adds	r6, r3, r2
    a69a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a69c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    a69e:	4293      	cmp	r3, r2
    a6a0:	db0e      	blt.n	a6c0 <_printf_float+0x31c>
    a6a2:	6823      	ldr	r3, [r4, #0]
    a6a4:	07db      	lsls	r3, r3, #31
    a6a6:	d40b      	bmi.n	a6c0 <_printf_float+0x31c>
    a6a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a6aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a6ac:	18d7      	adds	r7, r2, r3
    a6ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    a6b0:	1bbf      	subs	r7, r7, r6
    a6b2:	1a9b      	subs	r3, r3, r2
    a6b4:	429f      	cmp	r7, r3
    a6b6:	dd00      	ble.n	a6ba <_printf_float+0x316>
    a6b8:	1c1f      	adds	r7, r3, #0
    a6ba:	2f00      	cmp	r7, #0
    a6bc:	dc09      	bgt.n	a6d2 <_printf_float+0x32e>
    a6be:	e011      	b.n	a6e4 <_printf_float+0x340>
    a6c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a6c2:	1c28      	adds	r0, r5, #0
    a6c4:	9908      	ldr	r1, [sp, #32]
    a6c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a6c8:	9f09      	ldr	r7, [sp, #36]	; 0x24
    a6ca:	47b8      	blx	r7
    a6cc:	1c43      	adds	r3, r0, #1
    a6ce:	d1eb      	bne.n	a6a8 <_printf_float+0x304>
    a6d0:	e749      	b.n	a566 <_printf_float+0x1c2>
    a6d2:	1c32      	adds	r2, r6, #0
    a6d4:	1c3b      	adds	r3, r7, #0
    a6d6:	1c28      	adds	r0, r5, #0
    a6d8:	9908      	ldr	r1, [sp, #32]
    a6da:	9e09      	ldr	r6, [sp, #36]	; 0x24
    a6dc:	47b0      	blx	r6
    a6de:	1c43      	adds	r3, r0, #1
    a6e0:	d100      	bne.n	a6e4 <_printf_float+0x340>
    a6e2:	e740      	b.n	a566 <_printf_float+0x1c2>
    a6e4:	2300      	movs	r3, #0
    a6e6:	e015      	b.n	a714 <_printf_float+0x370>
    a6e8:	0000fa61 	.word	0x0000fa61
    a6ec:	0000fa65 	.word	0x0000fa65
    a6f0:	0000fa69 	.word	0x0000fa69
    a6f4:	0000fa6d 	.word	0x0000fa6d
    a6f8:	0000faba 	.word	0x0000faba
    a6fc:	1c22      	adds	r2, r4, #0
    a6fe:	2301      	movs	r3, #1
    a700:	1c28      	adds	r0, r5, #0
    a702:	9908      	ldr	r1, [sp, #32]
    a704:	321a      	adds	r2, #26
    a706:	9e09      	ldr	r6, [sp, #36]	; 0x24
    a708:	47b0      	blx	r6
    a70a:	1c43      	adds	r3, r0, #1
    a70c:	d100      	bne.n	a710 <_printf_float+0x36c>
    a70e:	e72a      	b.n	a566 <_printf_float+0x1c2>
    a710:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a712:	3301      	adds	r3, #1
    a714:	930a      	str	r3, [sp, #40]	; 0x28
    a716:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    a718:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a71a:	1a9a      	subs	r2, r3, r2
    a71c:	43fb      	mvns	r3, r7
    a71e:	17db      	asrs	r3, r3, #31
    a720:	403b      	ands	r3, r7
    a722:	1ad3      	subs	r3, r2, r3
    a724:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a726:	429a      	cmp	r2, r3
    a728:	dbe8      	blt.n	a6fc <_printf_float+0x358>
    a72a:	e741      	b.n	a5b0 <_printf_float+0x20c>
    a72c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a72e:	1c28      	adds	r0, r5, #0
    a730:	9908      	ldr	r1, [sp, #32]
    a732:	2b01      	cmp	r3, #1
    a734:	dc02      	bgt.n	a73c <_printf_float+0x398>
    a736:	2301      	movs	r3, #1
    a738:	421a      	tst	r2, r3
    a73a:	d03c      	beq.n	a7b6 <_printf_float+0x412>
    a73c:	2301      	movs	r3, #1
    a73e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a740:	9f09      	ldr	r7, [sp, #36]	; 0x24
    a742:	47b8      	blx	r7
    a744:	1c43      	adds	r3, r0, #1
    a746:	d100      	bne.n	a74a <_printf_float+0x3a6>
    a748:	e70d      	b.n	a566 <_printf_float+0x1c2>
    a74a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a74c:	1c28      	adds	r0, r5, #0
    a74e:	9908      	ldr	r1, [sp, #32]
    a750:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a752:	9f09      	ldr	r7, [sp, #36]	; 0x24
    a754:	47b8      	blx	r7
    a756:	1c43      	adds	r3, r0, #1
    a758:	d100      	bne.n	a75c <_printf_float+0x3b8>
    a75a:	e704      	b.n	a566 <_printf_float+0x1c2>
    a75c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    a75e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    a760:	2300      	movs	r3, #0
    a762:	2200      	movs	r2, #0
    a764:	f7fc f914 	bl	6990 <__aeabi_dcmpeq>
    a768:	2300      	movs	r3, #0
    a76a:	2800      	cmp	r0, #0
    a76c:	d112      	bne.n	a794 <_printf_float+0x3f0>
    a76e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a770:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a772:	3201      	adds	r2, #1
    a774:	3b01      	subs	r3, #1
    a776:	1c28      	adds	r0, r5, #0
    a778:	9908      	ldr	r1, [sp, #32]
    a77a:	e01d      	b.n	a7b8 <_printf_float+0x414>
    a77c:	1c22      	adds	r2, r4, #0
    a77e:	2301      	movs	r3, #1
    a780:	1c28      	adds	r0, r5, #0
    a782:	9908      	ldr	r1, [sp, #32]
    a784:	321a      	adds	r2, #26
    a786:	9f09      	ldr	r7, [sp, #36]	; 0x24
    a788:	47b8      	blx	r7
    a78a:	1c43      	adds	r3, r0, #1
    a78c:	d100      	bne.n	a790 <_printf_float+0x3ec>
    a78e:	e6ea      	b.n	a566 <_printf_float+0x1c2>
    a790:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a792:	3301      	adds	r3, #1
    a794:	930a      	str	r3, [sp, #40]	; 0x28
    a796:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a798:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a79a:	3b01      	subs	r3, #1
    a79c:	429a      	cmp	r2, r3
    a79e:	dbed      	blt.n	a77c <_printf_float+0x3d8>
    a7a0:	1c22      	adds	r2, r4, #0
    a7a2:	1c28      	adds	r0, r5, #0
    a7a4:	1c33      	adds	r3, r6, #0
    a7a6:	9908      	ldr	r1, [sp, #32]
    a7a8:	3250      	adds	r2, #80	; 0x50
    a7aa:	9e09      	ldr	r6, [sp, #36]	; 0x24
    a7ac:	47b0      	blx	r6
    a7ae:	1c43      	adds	r3, r0, #1
    a7b0:	d000      	beq.n	a7b4 <_printf_float+0x410>
    a7b2:	e6fd      	b.n	a5b0 <_printf_float+0x20c>
    a7b4:	e6d7      	b.n	a566 <_printf_float+0x1c2>
    a7b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a7b8:	9f09      	ldr	r7, [sp, #36]	; 0x24
    a7ba:	47b8      	blx	r7
    a7bc:	1c43      	adds	r3, r0, #1
    a7be:	d1ef      	bne.n	a7a0 <_printf_float+0x3fc>
    a7c0:	e6d1      	b.n	a566 <_printf_float+0x1c2>
    a7c2:	1c22      	adds	r2, r4, #0
    a7c4:	2301      	movs	r3, #1
    a7c6:	1c28      	adds	r0, r5, #0
    a7c8:	9908      	ldr	r1, [sp, #32]
    a7ca:	3219      	adds	r2, #25
    a7cc:	9f09      	ldr	r7, [sp, #36]	; 0x24
    a7ce:	47b8      	blx	r7
    a7d0:	1c43      	adds	r3, r0, #1
    a7d2:	d100      	bne.n	a7d6 <_printf_float+0x432>
    a7d4:	e6c7      	b.n	a566 <_printf_float+0x1c2>
    a7d6:	3601      	adds	r6, #1
    a7d8:	68e3      	ldr	r3, [r4, #12]
    a7da:	9a11      	ldr	r2, [sp, #68]	; 0x44
    a7dc:	1a9b      	subs	r3, r3, r2
    a7de:	429e      	cmp	r6, r3
    a7e0:	dbef      	blt.n	a7c2 <_printf_float+0x41e>
    a7e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a7e4:	68e0      	ldr	r0, [r4, #12]
    a7e6:	4298      	cmp	r0, r3
    a7e8:	da17      	bge.n	a81a <_printf_float+0x476>
    a7ea:	1c18      	adds	r0, r3, #0
    a7ec:	e015      	b.n	a81a <_printf_float+0x476>
    a7ee:	2600      	movs	r6, #0
    a7f0:	e7f2      	b.n	a7d8 <_printf_float+0x434>
    a7f2:	4331      	orrs	r1, r6
    a7f4:	6021      	str	r1, [r4, #0]
    a7f6:	9101      	str	r1, [sp, #4]
    a7f8:	2123      	movs	r1, #35	; 0x23
    a7fa:	9000      	str	r0, [sp, #0]
    a7fc:	a806      	add	r0, sp, #24
    a7fe:	1809      	adds	r1, r1, r0
    a800:	9102      	str	r1, [sp, #8]
    a802:	a90f      	add	r1, sp, #60	; 0x3c
    a804:	9103      	str	r1, [sp, #12]
    a806:	a910      	add	r1, sp, #64	; 0x40
    a808:	9105      	str	r1, [sp, #20]
    a80a:	2100      	movs	r1, #0
    a80c:	9704      	str	r7, [sp, #16]
    a80e:	9106      	str	r1, [sp, #24]
    a810:	1c28      	adds	r0, r5, #0
    a812:	f7ff fd31 	bl	a278 <__cvt>
    a816:	900a      	str	r0, [sp, #40]	; 0x28
    a818:	e647      	b.n	a4aa <_printf_float+0x106>
    a81a:	b013      	add	sp, #76	; 0x4c
    a81c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a81e:	46c0      	nop			; (mov r8, r8)

0000a820 <_printf_common>:
    a820:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a822:	1c17      	adds	r7, r2, #0
    a824:	9301      	str	r3, [sp, #4]
    a826:	690a      	ldr	r2, [r1, #16]
    a828:	688b      	ldr	r3, [r1, #8]
    a82a:	9000      	str	r0, [sp, #0]
    a82c:	1c0c      	adds	r4, r1, #0
    a82e:	4293      	cmp	r3, r2
    a830:	da00      	bge.n	a834 <_printf_common+0x14>
    a832:	1c13      	adds	r3, r2, #0
    a834:	1c22      	adds	r2, r4, #0
    a836:	603b      	str	r3, [r7, #0]
    a838:	3243      	adds	r2, #67	; 0x43
    a83a:	7812      	ldrb	r2, [r2, #0]
    a83c:	2a00      	cmp	r2, #0
    a83e:	d001      	beq.n	a844 <_printf_common+0x24>
    a840:	3301      	adds	r3, #1
    a842:	603b      	str	r3, [r7, #0]
    a844:	6823      	ldr	r3, [r4, #0]
    a846:	069b      	lsls	r3, r3, #26
    a848:	d502      	bpl.n	a850 <_printf_common+0x30>
    a84a:	683b      	ldr	r3, [r7, #0]
    a84c:	3302      	adds	r3, #2
    a84e:	603b      	str	r3, [r7, #0]
    a850:	2506      	movs	r5, #6
    a852:	6823      	ldr	r3, [r4, #0]
    a854:	401d      	ands	r5, r3
    a856:	d01e      	beq.n	a896 <_printf_common+0x76>
    a858:	1c23      	adds	r3, r4, #0
    a85a:	3343      	adds	r3, #67	; 0x43
    a85c:	781b      	ldrb	r3, [r3, #0]
    a85e:	1e5a      	subs	r2, r3, #1
    a860:	4193      	sbcs	r3, r2
    a862:	6822      	ldr	r2, [r4, #0]
    a864:	0692      	lsls	r2, r2, #26
    a866:	d51c      	bpl.n	a8a2 <_printf_common+0x82>
    a868:	2030      	movs	r0, #48	; 0x30
    a86a:	18e1      	adds	r1, r4, r3
    a86c:	3140      	adds	r1, #64	; 0x40
    a86e:	70c8      	strb	r0, [r1, #3]
    a870:	1c21      	adds	r1, r4, #0
    a872:	1c5a      	adds	r2, r3, #1
    a874:	3145      	adds	r1, #69	; 0x45
    a876:	7809      	ldrb	r1, [r1, #0]
    a878:	18a2      	adds	r2, r4, r2
    a87a:	3240      	adds	r2, #64	; 0x40
    a87c:	3302      	adds	r3, #2
    a87e:	70d1      	strb	r1, [r2, #3]
    a880:	e00f      	b.n	a8a2 <_printf_common+0x82>
    a882:	1c22      	adds	r2, r4, #0
    a884:	2301      	movs	r3, #1
    a886:	9800      	ldr	r0, [sp, #0]
    a888:	9901      	ldr	r1, [sp, #4]
    a88a:	3219      	adds	r2, #25
    a88c:	9e08      	ldr	r6, [sp, #32]
    a88e:	47b0      	blx	r6
    a890:	1c43      	adds	r3, r0, #1
    a892:	d00e      	beq.n	a8b2 <_printf_common+0x92>
    a894:	3501      	adds	r5, #1
    a896:	68e3      	ldr	r3, [r4, #12]
    a898:	683a      	ldr	r2, [r7, #0]
    a89a:	1a9b      	subs	r3, r3, r2
    a89c:	429d      	cmp	r5, r3
    a89e:	dbf0      	blt.n	a882 <_printf_common+0x62>
    a8a0:	e7da      	b.n	a858 <_printf_common+0x38>
    a8a2:	1c22      	adds	r2, r4, #0
    a8a4:	9800      	ldr	r0, [sp, #0]
    a8a6:	9901      	ldr	r1, [sp, #4]
    a8a8:	3243      	adds	r2, #67	; 0x43
    a8aa:	9d08      	ldr	r5, [sp, #32]
    a8ac:	47a8      	blx	r5
    a8ae:	1c43      	adds	r3, r0, #1
    a8b0:	d102      	bne.n	a8b8 <_printf_common+0x98>
    a8b2:	2001      	movs	r0, #1
    a8b4:	4240      	negs	r0, r0
    a8b6:	e020      	b.n	a8fa <_printf_common+0xda>
    a8b8:	2306      	movs	r3, #6
    a8ba:	6820      	ldr	r0, [r4, #0]
    a8bc:	68e1      	ldr	r1, [r4, #12]
    a8be:	683a      	ldr	r2, [r7, #0]
    a8c0:	4003      	ands	r3, r0
    a8c2:	2500      	movs	r5, #0
    a8c4:	2b04      	cmp	r3, #4
    a8c6:	d103      	bne.n	a8d0 <_printf_common+0xb0>
    a8c8:	1a8d      	subs	r5, r1, r2
    a8ca:	43eb      	mvns	r3, r5
    a8cc:	17db      	asrs	r3, r3, #31
    a8ce:	401d      	ands	r5, r3
    a8d0:	68a3      	ldr	r3, [r4, #8]
    a8d2:	6922      	ldr	r2, [r4, #16]
    a8d4:	4293      	cmp	r3, r2
    a8d6:	dd01      	ble.n	a8dc <_printf_common+0xbc>
    a8d8:	1a9b      	subs	r3, r3, r2
    a8da:	18ed      	adds	r5, r5, r3
    a8dc:	2700      	movs	r7, #0
    a8de:	42af      	cmp	r7, r5
    a8e0:	da0a      	bge.n	a8f8 <_printf_common+0xd8>
    a8e2:	1c22      	adds	r2, r4, #0
    a8e4:	2301      	movs	r3, #1
    a8e6:	9800      	ldr	r0, [sp, #0]
    a8e8:	9901      	ldr	r1, [sp, #4]
    a8ea:	321a      	adds	r2, #26
    a8ec:	9e08      	ldr	r6, [sp, #32]
    a8ee:	47b0      	blx	r6
    a8f0:	1c43      	adds	r3, r0, #1
    a8f2:	d0de      	beq.n	a8b2 <_printf_common+0x92>
    a8f4:	3701      	adds	r7, #1
    a8f6:	e7f2      	b.n	a8de <_printf_common+0xbe>
    a8f8:	2000      	movs	r0, #0
    a8fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000a8fc <_printf_i>:
    a8fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    a8fe:	b08b      	sub	sp, #44	; 0x2c
    a900:	9206      	str	r2, [sp, #24]
    a902:	1c0a      	adds	r2, r1, #0
    a904:	3243      	adds	r2, #67	; 0x43
    a906:	9307      	str	r3, [sp, #28]
    a908:	9005      	str	r0, [sp, #20]
    a90a:	9204      	str	r2, [sp, #16]
    a90c:	7e0a      	ldrb	r2, [r1, #24]
    a90e:	1c0c      	adds	r4, r1, #0
    a910:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a912:	2a6e      	cmp	r2, #110	; 0x6e
    a914:	d100      	bne.n	a918 <_printf_i+0x1c>
    a916:	e0a8      	b.n	aa6a <_printf_i+0x16e>
    a918:	d811      	bhi.n	a93e <_printf_i+0x42>
    a91a:	2a63      	cmp	r2, #99	; 0x63
    a91c:	d022      	beq.n	a964 <_printf_i+0x68>
    a91e:	d809      	bhi.n	a934 <_printf_i+0x38>
    a920:	2a00      	cmp	r2, #0
    a922:	d100      	bne.n	a926 <_printf_i+0x2a>
    a924:	e0b2      	b.n	aa8c <_printf_i+0x190>
    a926:	2a58      	cmp	r2, #88	; 0x58
    a928:	d000      	beq.n	a92c <_printf_i+0x30>
    a92a:	e0c2      	b.n	aab2 <_printf_i+0x1b6>
    a92c:	3145      	adds	r1, #69	; 0x45
    a92e:	700a      	strb	r2, [r1, #0]
    a930:	4a7c      	ldr	r2, [pc, #496]	; (ab24 <_printf_i+0x228>)
    a932:	e04f      	b.n	a9d4 <_printf_i+0xd8>
    a934:	2a64      	cmp	r2, #100	; 0x64
    a936:	d01d      	beq.n	a974 <_printf_i+0x78>
    a938:	2a69      	cmp	r2, #105	; 0x69
    a93a:	d01b      	beq.n	a974 <_printf_i+0x78>
    a93c:	e0b9      	b.n	aab2 <_printf_i+0x1b6>
    a93e:	2a73      	cmp	r2, #115	; 0x73
    a940:	d100      	bne.n	a944 <_printf_i+0x48>
    a942:	e0a7      	b.n	aa94 <_printf_i+0x198>
    a944:	d809      	bhi.n	a95a <_printf_i+0x5e>
    a946:	2a6f      	cmp	r2, #111	; 0x6f
    a948:	d029      	beq.n	a99e <_printf_i+0xa2>
    a94a:	2a70      	cmp	r2, #112	; 0x70
    a94c:	d000      	beq.n	a950 <_printf_i+0x54>
    a94e:	e0b0      	b.n	aab2 <_printf_i+0x1b6>
    a950:	2220      	movs	r2, #32
    a952:	6809      	ldr	r1, [r1, #0]
    a954:	430a      	orrs	r2, r1
    a956:	6022      	str	r2, [r4, #0]
    a958:	e037      	b.n	a9ca <_printf_i+0xce>
    a95a:	2a75      	cmp	r2, #117	; 0x75
    a95c:	d01f      	beq.n	a99e <_printf_i+0xa2>
    a95e:	2a78      	cmp	r2, #120	; 0x78
    a960:	d033      	beq.n	a9ca <_printf_i+0xce>
    a962:	e0a6      	b.n	aab2 <_printf_i+0x1b6>
    a964:	1c0e      	adds	r6, r1, #0
    a966:	681a      	ldr	r2, [r3, #0]
    a968:	3642      	adds	r6, #66	; 0x42
    a96a:	1d11      	adds	r1, r2, #4
    a96c:	6019      	str	r1, [r3, #0]
    a96e:	6813      	ldr	r3, [r2, #0]
    a970:	7033      	strb	r3, [r6, #0]
    a972:	e0a1      	b.n	aab8 <_printf_i+0x1bc>
    a974:	6821      	ldr	r1, [r4, #0]
    a976:	681a      	ldr	r2, [r3, #0]
    a978:	0608      	lsls	r0, r1, #24
    a97a:	d406      	bmi.n	a98a <_printf_i+0x8e>
    a97c:	0649      	lsls	r1, r1, #25
    a97e:	d504      	bpl.n	a98a <_printf_i+0x8e>
    a980:	1d11      	adds	r1, r2, #4
    a982:	6019      	str	r1, [r3, #0]
    a984:	2300      	movs	r3, #0
    a986:	5ed5      	ldrsh	r5, [r2, r3]
    a988:	e002      	b.n	a990 <_printf_i+0x94>
    a98a:	1d11      	adds	r1, r2, #4
    a98c:	6019      	str	r1, [r3, #0]
    a98e:	6815      	ldr	r5, [r2, #0]
    a990:	2d00      	cmp	r5, #0
    a992:	da3b      	bge.n	aa0c <_printf_i+0x110>
    a994:	232d      	movs	r3, #45	; 0x2d
    a996:	9a04      	ldr	r2, [sp, #16]
    a998:	426d      	negs	r5, r5
    a99a:	7013      	strb	r3, [r2, #0]
    a99c:	e036      	b.n	aa0c <_printf_i+0x110>
    a99e:	6821      	ldr	r1, [r4, #0]
    a9a0:	681a      	ldr	r2, [r3, #0]
    a9a2:	0608      	lsls	r0, r1, #24
    a9a4:	d406      	bmi.n	a9b4 <_printf_i+0xb8>
    a9a6:	0649      	lsls	r1, r1, #25
    a9a8:	d504      	bpl.n	a9b4 <_printf_i+0xb8>
    a9aa:	6815      	ldr	r5, [r2, #0]
    a9ac:	1d11      	adds	r1, r2, #4
    a9ae:	6019      	str	r1, [r3, #0]
    a9b0:	b2ad      	uxth	r5, r5
    a9b2:	e002      	b.n	a9ba <_printf_i+0xbe>
    a9b4:	1d11      	adds	r1, r2, #4
    a9b6:	6019      	str	r1, [r3, #0]
    a9b8:	6815      	ldr	r5, [r2, #0]
    a9ba:	4b5a      	ldr	r3, [pc, #360]	; (ab24 <_printf_i+0x228>)
    a9bc:	7e22      	ldrb	r2, [r4, #24]
    a9be:	9303      	str	r3, [sp, #12]
    a9c0:	270a      	movs	r7, #10
    a9c2:	2a6f      	cmp	r2, #111	; 0x6f
    a9c4:	d11d      	bne.n	aa02 <_printf_i+0x106>
    a9c6:	2708      	movs	r7, #8
    a9c8:	e01b      	b.n	aa02 <_printf_i+0x106>
    a9ca:	1c22      	adds	r2, r4, #0
    a9cc:	2178      	movs	r1, #120	; 0x78
    a9ce:	3245      	adds	r2, #69	; 0x45
    a9d0:	7011      	strb	r1, [r2, #0]
    a9d2:	4a55      	ldr	r2, [pc, #340]	; (ab28 <_printf_i+0x22c>)
    a9d4:	6819      	ldr	r1, [r3, #0]
    a9d6:	9203      	str	r2, [sp, #12]
    a9d8:	1d08      	adds	r0, r1, #4
    a9da:	6822      	ldr	r2, [r4, #0]
    a9dc:	6018      	str	r0, [r3, #0]
    a9de:	680d      	ldr	r5, [r1, #0]
    a9e0:	0610      	lsls	r0, r2, #24
    a9e2:	d402      	bmi.n	a9ea <_printf_i+0xee>
    a9e4:	0650      	lsls	r0, r2, #25
    a9e6:	d500      	bpl.n	a9ea <_printf_i+0xee>
    a9e8:	b2ad      	uxth	r5, r5
    a9ea:	07d3      	lsls	r3, r2, #31
    a9ec:	d502      	bpl.n	a9f4 <_printf_i+0xf8>
    a9ee:	2320      	movs	r3, #32
    a9f0:	431a      	orrs	r2, r3
    a9f2:	6022      	str	r2, [r4, #0]
    a9f4:	2710      	movs	r7, #16
    a9f6:	2d00      	cmp	r5, #0
    a9f8:	d103      	bne.n	aa02 <_printf_i+0x106>
    a9fa:	2320      	movs	r3, #32
    a9fc:	6822      	ldr	r2, [r4, #0]
    a9fe:	439a      	bics	r2, r3
    aa00:	6022      	str	r2, [r4, #0]
    aa02:	1c23      	adds	r3, r4, #0
    aa04:	2200      	movs	r2, #0
    aa06:	3343      	adds	r3, #67	; 0x43
    aa08:	701a      	strb	r2, [r3, #0]
    aa0a:	e002      	b.n	aa12 <_printf_i+0x116>
    aa0c:	270a      	movs	r7, #10
    aa0e:	4b45      	ldr	r3, [pc, #276]	; (ab24 <_printf_i+0x228>)
    aa10:	9303      	str	r3, [sp, #12]
    aa12:	6863      	ldr	r3, [r4, #4]
    aa14:	60a3      	str	r3, [r4, #8]
    aa16:	2b00      	cmp	r3, #0
    aa18:	db03      	blt.n	aa22 <_printf_i+0x126>
    aa1a:	2204      	movs	r2, #4
    aa1c:	6821      	ldr	r1, [r4, #0]
    aa1e:	4391      	bics	r1, r2
    aa20:	6021      	str	r1, [r4, #0]
    aa22:	2d00      	cmp	r5, #0
    aa24:	d102      	bne.n	aa2c <_printf_i+0x130>
    aa26:	9e04      	ldr	r6, [sp, #16]
    aa28:	2b00      	cmp	r3, #0
    aa2a:	d00e      	beq.n	aa4a <_printf_i+0x14e>
    aa2c:	9e04      	ldr	r6, [sp, #16]
    aa2e:	1c28      	adds	r0, r5, #0
    aa30:	1c39      	adds	r1, r7, #0
    aa32:	f7fb fea1 	bl	6778 <__aeabi_uidivmod>
    aa36:	9b03      	ldr	r3, [sp, #12]
    aa38:	3e01      	subs	r6, #1
    aa3a:	5c5b      	ldrb	r3, [r3, r1]
    aa3c:	1c28      	adds	r0, r5, #0
    aa3e:	7033      	strb	r3, [r6, #0]
    aa40:	1c39      	adds	r1, r7, #0
    aa42:	f7fb fe13 	bl	666c <__aeabi_uidiv>
    aa46:	1e05      	subs	r5, r0, #0
    aa48:	d1f1      	bne.n	aa2e <_printf_i+0x132>
    aa4a:	2f08      	cmp	r7, #8
    aa4c:	d109      	bne.n	aa62 <_printf_i+0x166>
    aa4e:	6823      	ldr	r3, [r4, #0]
    aa50:	07db      	lsls	r3, r3, #31
    aa52:	d506      	bpl.n	aa62 <_printf_i+0x166>
    aa54:	6863      	ldr	r3, [r4, #4]
    aa56:	6922      	ldr	r2, [r4, #16]
    aa58:	4293      	cmp	r3, r2
    aa5a:	dc02      	bgt.n	aa62 <_printf_i+0x166>
    aa5c:	2330      	movs	r3, #48	; 0x30
    aa5e:	3e01      	subs	r6, #1
    aa60:	7033      	strb	r3, [r6, #0]
    aa62:	9b04      	ldr	r3, [sp, #16]
    aa64:	1b9b      	subs	r3, r3, r6
    aa66:	6123      	str	r3, [r4, #16]
    aa68:	e02b      	b.n	aac2 <_printf_i+0x1c6>
    aa6a:	6809      	ldr	r1, [r1, #0]
    aa6c:	681a      	ldr	r2, [r3, #0]
    aa6e:	0608      	lsls	r0, r1, #24
    aa70:	d407      	bmi.n	aa82 <_printf_i+0x186>
    aa72:	0649      	lsls	r1, r1, #25
    aa74:	d505      	bpl.n	aa82 <_printf_i+0x186>
    aa76:	1d11      	adds	r1, r2, #4
    aa78:	6019      	str	r1, [r3, #0]
    aa7a:	6813      	ldr	r3, [r2, #0]
    aa7c:	8aa2      	ldrh	r2, [r4, #20]
    aa7e:	801a      	strh	r2, [r3, #0]
    aa80:	e004      	b.n	aa8c <_printf_i+0x190>
    aa82:	1d11      	adds	r1, r2, #4
    aa84:	6019      	str	r1, [r3, #0]
    aa86:	6813      	ldr	r3, [r2, #0]
    aa88:	6962      	ldr	r2, [r4, #20]
    aa8a:	601a      	str	r2, [r3, #0]
    aa8c:	2300      	movs	r3, #0
    aa8e:	9e04      	ldr	r6, [sp, #16]
    aa90:	6123      	str	r3, [r4, #16]
    aa92:	e016      	b.n	aac2 <_printf_i+0x1c6>
    aa94:	681a      	ldr	r2, [r3, #0]
    aa96:	1d11      	adds	r1, r2, #4
    aa98:	6019      	str	r1, [r3, #0]
    aa9a:	6816      	ldr	r6, [r2, #0]
    aa9c:	2100      	movs	r1, #0
    aa9e:	1c30      	adds	r0, r6, #0
    aaa0:	6862      	ldr	r2, [r4, #4]
    aaa2:	f7ff f9e9 	bl	9e78 <memchr>
    aaa6:	2800      	cmp	r0, #0
    aaa8:	d001      	beq.n	aaae <_printf_i+0x1b2>
    aaaa:	1b80      	subs	r0, r0, r6
    aaac:	6060      	str	r0, [r4, #4]
    aaae:	6863      	ldr	r3, [r4, #4]
    aab0:	e003      	b.n	aaba <_printf_i+0x1be>
    aab2:	1c26      	adds	r6, r4, #0
    aab4:	3642      	adds	r6, #66	; 0x42
    aab6:	7032      	strb	r2, [r6, #0]
    aab8:	2301      	movs	r3, #1
    aaba:	6123      	str	r3, [r4, #16]
    aabc:	2300      	movs	r3, #0
    aabe:	9a04      	ldr	r2, [sp, #16]
    aac0:	7013      	strb	r3, [r2, #0]
    aac2:	9b07      	ldr	r3, [sp, #28]
    aac4:	9805      	ldr	r0, [sp, #20]
    aac6:	9300      	str	r3, [sp, #0]
    aac8:	1c21      	adds	r1, r4, #0
    aaca:	9b06      	ldr	r3, [sp, #24]
    aacc:	aa09      	add	r2, sp, #36	; 0x24
    aace:	f7ff fea7 	bl	a820 <_printf_common>
    aad2:	1c43      	adds	r3, r0, #1
    aad4:	d102      	bne.n	aadc <_printf_i+0x1e0>
    aad6:	2001      	movs	r0, #1
    aad8:	4240      	negs	r0, r0
    aada:	e021      	b.n	ab20 <_printf_i+0x224>
    aadc:	6923      	ldr	r3, [r4, #16]
    aade:	9805      	ldr	r0, [sp, #20]
    aae0:	9906      	ldr	r1, [sp, #24]
    aae2:	1c32      	adds	r2, r6, #0
    aae4:	9d07      	ldr	r5, [sp, #28]
    aae6:	47a8      	blx	r5
    aae8:	1c43      	adds	r3, r0, #1
    aaea:	d0f4      	beq.n	aad6 <_printf_i+0x1da>
    aaec:	6823      	ldr	r3, [r4, #0]
    aaee:	079b      	lsls	r3, r3, #30
    aaf0:	d405      	bmi.n	aafe <_printf_i+0x202>
    aaf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    aaf4:	68e0      	ldr	r0, [r4, #12]
    aaf6:	4298      	cmp	r0, r3
    aaf8:	da12      	bge.n	ab20 <_printf_i+0x224>
    aafa:	1c18      	adds	r0, r3, #0
    aafc:	e010      	b.n	ab20 <_printf_i+0x224>
    aafe:	2500      	movs	r5, #0
    ab00:	68e3      	ldr	r3, [r4, #12]
    ab02:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ab04:	1a9b      	subs	r3, r3, r2
    ab06:	429d      	cmp	r5, r3
    ab08:	daf3      	bge.n	aaf2 <_printf_i+0x1f6>
    ab0a:	1c22      	adds	r2, r4, #0
    ab0c:	2301      	movs	r3, #1
    ab0e:	9805      	ldr	r0, [sp, #20]
    ab10:	9906      	ldr	r1, [sp, #24]
    ab12:	3219      	adds	r2, #25
    ab14:	9e07      	ldr	r6, [sp, #28]
    ab16:	47b0      	blx	r6
    ab18:	1c43      	adds	r3, r0, #1
    ab1a:	d0dc      	beq.n	aad6 <_printf_i+0x1da>
    ab1c:	3501      	adds	r5, #1
    ab1e:	e7ef      	b.n	ab00 <_printf_i+0x204>
    ab20:	b00b      	add	sp, #44	; 0x2c
    ab22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ab24:	0000fa71 	.word	0x0000fa71
    ab28:	0000fa82 	.word	0x0000fa82

0000ab2c <_scanf_float>:
    ab2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ab2e:	1c15      	adds	r5, r2, #0
    ab30:	2200      	movs	r2, #0
    ab32:	b08b      	sub	sp, #44	; 0x2c
    ab34:	9306      	str	r3, [sp, #24]
    ab36:	688b      	ldr	r3, [r1, #8]
    ab38:	9205      	str	r2, [sp, #20]
    ab3a:	325d      	adds	r2, #93	; 0x5d
    ab3c:	1c0e      	adds	r6, r1, #0
    ab3e:	32ff      	adds	r2, #255	; 0xff
    ab40:	1e59      	subs	r1, r3, #1
    ab42:	9002      	str	r0, [sp, #8]
    ab44:	4291      	cmp	r1, r2
    ab46:	d905      	bls.n	ab54 <_scanf_float+0x28>
    ab48:	3b5e      	subs	r3, #94	; 0x5e
    ab4a:	3bff      	subs	r3, #255	; 0xff
    ab4c:	9305      	str	r3, [sp, #20]
    ab4e:	235e      	movs	r3, #94	; 0x5e
    ab50:	33ff      	adds	r3, #255	; 0xff
    ab52:	60b3      	str	r3, [r6, #8]
    ab54:	23f0      	movs	r3, #240	; 0xf0
    ab56:	6832      	ldr	r2, [r6, #0]
    ab58:	00db      	lsls	r3, r3, #3
    ab5a:	4313      	orrs	r3, r2
    ab5c:	6033      	str	r3, [r6, #0]
    ab5e:	1c33      	adds	r3, r6, #0
    ab60:	2400      	movs	r4, #0
    ab62:	331c      	adds	r3, #28
    ab64:	1c1f      	adds	r7, r3, #0
    ab66:	9304      	str	r3, [sp, #16]
    ab68:	9403      	str	r4, [sp, #12]
    ab6a:	9409      	str	r4, [sp, #36]	; 0x24
    ab6c:	9408      	str	r4, [sp, #32]
    ab6e:	9400      	str	r4, [sp, #0]
    ab70:	9407      	str	r4, [sp, #28]
    ab72:	68b2      	ldr	r2, [r6, #8]
    ab74:	2a00      	cmp	r2, #0
    ab76:	d100      	bne.n	ab7a <_scanf_float+0x4e>
    ab78:	e0e1      	b.n	ad3e <_scanf_float+0x212>
    ab7a:	682b      	ldr	r3, [r5, #0]
    ab7c:	781b      	ldrb	r3, [r3, #0]
    ab7e:	2b49      	cmp	r3, #73	; 0x49
    ab80:	d077      	beq.n	ac72 <_scanf_float+0x146>
    ab82:	d818      	bhi.n	abb6 <_scanf_float+0x8a>
    ab84:	2b39      	cmp	r3, #57	; 0x39
    ab86:	d80d      	bhi.n	aba4 <_scanf_float+0x78>
    ab88:	2b31      	cmp	r3, #49	; 0x31
    ab8a:	d242      	bcs.n	ac12 <_scanf_float+0xe6>
    ab8c:	2b2d      	cmp	r3, #45	; 0x2d
    ab8e:	d049      	beq.n	ac24 <_scanf_float+0xf8>
    ab90:	d802      	bhi.n	ab98 <_scanf_float+0x6c>
    ab92:	2b2b      	cmp	r3, #43	; 0x2b
    ab94:	d046      	beq.n	ac24 <_scanf_float+0xf8>
    ab96:	e0d2      	b.n	ad3e <_scanf_float+0x212>
    ab98:	2b2e      	cmp	r3, #46	; 0x2e
    ab9a:	d100      	bne.n	ab9e <_scanf_float+0x72>
    ab9c:	e08d      	b.n	acba <_scanf_float+0x18e>
    ab9e:	2b30      	cmp	r3, #48	; 0x30
    aba0:	d025      	beq.n	abee <_scanf_float+0xc2>
    aba2:	e0cc      	b.n	ad3e <_scanf_float+0x212>
    aba4:	2b45      	cmp	r3, #69	; 0x45
    aba6:	d100      	bne.n	abaa <_scanf_float+0x7e>
    aba8:	e090      	b.n	accc <_scanf_float+0x1a0>
    abaa:	2b46      	cmp	r3, #70	; 0x46
    abac:	d079      	beq.n	aca2 <_scanf_float+0x176>
    abae:	2b41      	cmp	r3, #65	; 0x41
    abb0:	d000      	beq.n	abb4 <_scanf_float+0x88>
    abb2:	e0c4      	b.n	ad3e <_scanf_float+0x212>
    abb4:	e058      	b.n	ac68 <_scanf_float+0x13c>
    abb6:	2b65      	cmp	r3, #101	; 0x65
    abb8:	d100      	bne.n	abbc <_scanf_float+0x90>
    abba:	e087      	b.n	accc <_scanf_float+0x1a0>
    abbc:	d80a      	bhi.n	abd4 <_scanf_float+0xa8>
    abbe:	2b54      	cmp	r3, #84	; 0x54
    abc0:	d073      	beq.n	acaa <_scanf_float+0x17e>
    abc2:	d802      	bhi.n	abca <_scanf_float+0x9e>
    abc4:	2b4e      	cmp	r3, #78	; 0x4e
    abc6:	d035      	beq.n	ac34 <_scanf_float+0x108>
    abc8:	e0b9      	b.n	ad3e <_scanf_float+0x212>
    abca:	2b59      	cmp	r3, #89	; 0x59
    abcc:	d071      	beq.n	acb2 <_scanf_float+0x186>
    abce:	2b61      	cmp	r3, #97	; 0x61
    abd0:	d04a      	beq.n	ac68 <_scanf_float+0x13c>
    abd2:	e0b4      	b.n	ad3e <_scanf_float+0x212>
    abd4:	2b6e      	cmp	r3, #110	; 0x6e
    abd6:	d02d      	beq.n	ac34 <_scanf_float+0x108>
    abd8:	d804      	bhi.n	abe4 <_scanf_float+0xb8>
    abda:	2b66      	cmp	r3, #102	; 0x66
    abdc:	d061      	beq.n	aca2 <_scanf_float+0x176>
    abde:	2b69      	cmp	r3, #105	; 0x69
    abe0:	d047      	beq.n	ac72 <_scanf_float+0x146>
    abe2:	e0ac      	b.n	ad3e <_scanf_float+0x212>
    abe4:	2b74      	cmp	r3, #116	; 0x74
    abe6:	d060      	beq.n	acaa <_scanf_float+0x17e>
    abe8:	2b79      	cmp	r3, #121	; 0x79
    abea:	d062      	beq.n	acb2 <_scanf_float+0x186>
    abec:	e0a7      	b.n	ad3e <_scanf_float+0x212>
    abee:	6831      	ldr	r1, [r6, #0]
    abf0:	05c8      	lsls	r0, r1, #23
    abf2:	d50e      	bpl.n	ac12 <_scanf_float+0xe6>
    abf4:	2380      	movs	r3, #128	; 0x80
    abf6:	4399      	bics	r1, r3
    abf8:	9b00      	ldr	r3, [sp, #0]
    abfa:	6031      	str	r1, [r6, #0]
    abfc:	3301      	adds	r3, #1
    abfe:	9300      	str	r3, [sp, #0]
    ac00:	9b05      	ldr	r3, [sp, #20]
    ac02:	2b00      	cmp	r3, #0
    ac04:	d100      	bne.n	ac08 <_scanf_float+0xdc>
    ac06:	e082      	b.n	ad0e <_scanf_float+0x1e2>
    ac08:	3b01      	subs	r3, #1
    ac0a:	3201      	adds	r2, #1
    ac0c:	9305      	str	r3, [sp, #20]
    ac0e:	60b2      	str	r2, [r6, #8]
    ac10:	e07d      	b.n	ad0e <_scanf_float+0x1e2>
    ac12:	9a03      	ldr	r2, [sp, #12]
    ac14:	1912      	adds	r2, r2, r4
    ac16:	2a00      	cmp	r2, #0
    ac18:	d000      	beq.n	ac1c <_scanf_float+0xf0>
    ac1a:	e090      	b.n	ad3e <_scanf_float+0x212>
    ac1c:	4ab3      	ldr	r2, [pc, #716]	; (aeec <_scanf_float+0x3c0>)
    ac1e:	6831      	ldr	r1, [r6, #0]
    ac20:	400a      	ands	r2, r1
    ac22:	e005      	b.n	ac30 <_scanf_float+0x104>
    ac24:	2180      	movs	r1, #128	; 0x80
    ac26:	6832      	ldr	r2, [r6, #0]
    ac28:	420a      	tst	r2, r1
    ac2a:	d100      	bne.n	ac2e <_scanf_float+0x102>
    ac2c:	e087      	b.n	ad3e <_scanf_float+0x212>
    ac2e:	438a      	bics	r2, r1
    ac30:	6032      	str	r2, [r6, #0]
    ac32:	e06a      	b.n	ad0a <_scanf_float+0x1de>
    ac34:	9a03      	ldr	r2, [sp, #12]
    ac36:	2a00      	cmp	r2, #0
    ac38:	d10e      	bne.n	ac58 <_scanf_float+0x12c>
    ac3a:	9a00      	ldr	r2, [sp, #0]
    ac3c:	2a00      	cmp	r2, #0
    ac3e:	d10e      	bne.n	ac5e <_scanf_float+0x132>
    ac40:	6831      	ldr	r1, [r6, #0]
    ac42:	22e0      	movs	r2, #224	; 0xe0
    ac44:	1c08      	adds	r0, r1, #0
    ac46:	00d2      	lsls	r2, r2, #3
    ac48:	4010      	ands	r0, r2
    ac4a:	4290      	cmp	r0, r2
    ac4c:	d107      	bne.n	ac5e <_scanf_float+0x132>
    ac4e:	4aa8      	ldr	r2, [pc, #672]	; (aef0 <_scanf_float+0x3c4>)
    ac50:	400a      	ands	r2, r1
    ac52:	6032      	str	r2, [r6, #0]
    ac54:	2201      	movs	r2, #1
    ac56:	e057      	b.n	ad08 <_scanf_float+0x1dc>
    ac58:	9a03      	ldr	r2, [sp, #12]
    ac5a:	2a02      	cmp	r2, #2
    ac5c:	d053      	beq.n	ad06 <_scanf_float+0x1da>
    ac5e:	2c01      	cmp	r4, #1
    ac60:	d01c      	beq.n	ac9c <_scanf_float+0x170>
    ac62:	2c04      	cmp	r4, #4
    ac64:	d01a      	beq.n	ac9c <_scanf_float+0x170>
    ac66:	e06a      	b.n	ad3e <_scanf_float+0x212>
    ac68:	9a03      	ldr	r2, [sp, #12]
    ac6a:	2a01      	cmp	r2, #1
    ac6c:	d167      	bne.n	ad3e <_scanf_float+0x212>
    ac6e:	2202      	movs	r2, #2
    ac70:	e04a      	b.n	ad08 <_scanf_float+0x1dc>
    ac72:	2c00      	cmp	r4, #0
    ac74:	d10e      	bne.n	ac94 <_scanf_float+0x168>
    ac76:	9a00      	ldr	r2, [sp, #0]
    ac78:	2a00      	cmp	r2, #0
    ac7a:	d163      	bne.n	ad44 <_scanf_float+0x218>
    ac7c:	6831      	ldr	r1, [r6, #0]
    ac7e:	22e0      	movs	r2, #224	; 0xe0
    ac80:	1c08      	adds	r0, r1, #0
    ac82:	00d2      	lsls	r2, r2, #3
    ac84:	4010      	ands	r0, r2
    ac86:	4290      	cmp	r0, r2
    ac88:	d160      	bne.n	ad4c <_scanf_float+0x220>
    ac8a:	4a99      	ldr	r2, [pc, #612]	; (aef0 <_scanf_float+0x3c4>)
    ac8c:	3401      	adds	r4, #1
    ac8e:	400a      	ands	r2, r1
    ac90:	6032      	str	r2, [r6, #0]
    ac92:	e03a      	b.n	ad0a <_scanf_float+0x1de>
    ac94:	21fd      	movs	r1, #253	; 0xfd
    ac96:	1ee2      	subs	r2, r4, #3
    ac98:	420a      	tst	r2, r1
    ac9a:	d150      	bne.n	ad3e <_scanf_float+0x212>
    ac9c:	3401      	adds	r4, #1
    ac9e:	b2e4      	uxtb	r4, r4
    aca0:	e033      	b.n	ad0a <_scanf_float+0x1de>
    aca2:	2c02      	cmp	r4, #2
    aca4:	d14b      	bne.n	ad3e <_scanf_float+0x212>
    aca6:	2403      	movs	r4, #3
    aca8:	e02f      	b.n	ad0a <_scanf_float+0x1de>
    acaa:	2c06      	cmp	r4, #6
    acac:	d147      	bne.n	ad3e <_scanf_float+0x212>
    acae:	2407      	movs	r4, #7
    acb0:	e02b      	b.n	ad0a <_scanf_float+0x1de>
    acb2:	2c07      	cmp	r4, #7
    acb4:	d143      	bne.n	ad3e <_scanf_float+0x212>
    acb6:	2408      	movs	r4, #8
    acb8:	e027      	b.n	ad0a <_scanf_float+0x1de>
    acba:	6831      	ldr	r1, [r6, #0]
    acbc:	058a      	lsls	r2, r1, #22
    acbe:	d53e      	bpl.n	ad3e <_scanf_float+0x212>
    acc0:	4a8c      	ldr	r2, [pc, #560]	; (aef4 <_scanf_float+0x3c8>)
    acc2:	400a      	ands	r2, r1
    acc4:	6032      	str	r2, [r6, #0]
    acc6:	9a00      	ldr	r2, [sp, #0]
    acc8:	9207      	str	r2, [sp, #28]
    acca:	e01e      	b.n	ad0a <_scanf_float+0x1de>
    accc:	22a0      	movs	r2, #160	; 0xa0
    acce:	2080      	movs	r0, #128	; 0x80
    acd0:	6831      	ldr	r1, [r6, #0]
    acd2:	00d2      	lsls	r2, r2, #3
    acd4:	400a      	ands	r2, r1
    acd6:	00c0      	lsls	r0, r0, #3
    acd8:	4282      	cmp	r2, r0
    acda:	d004      	beq.n	ace6 <_scanf_float+0x1ba>
    acdc:	4201      	tst	r1, r0
    acde:	d02e      	beq.n	ad3e <_scanf_float+0x212>
    ace0:	9a00      	ldr	r2, [sp, #0]
    ace2:	2a00      	cmp	r2, #0
    ace4:	d032      	beq.n	ad4c <_scanf_float+0x220>
    ace6:	058a      	lsls	r2, r1, #22
    ace8:	d404      	bmi.n	acf4 <_scanf_float+0x1c8>
    acea:	9a00      	ldr	r2, [sp, #0]
    acec:	9807      	ldr	r0, [sp, #28]
    acee:	9709      	str	r7, [sp, #36]	; 0x24
    acf0:	1a12      	subs	r2, r2, r0
    acf2:	9208      	str	r2, [sp, #32]
    acf4:	4a7e      	ldr	r2, [pc, #504]	; (aef0 <_scanf_float+0x3c4>)
    acf6:	400a      	ands	r2, r1
    acf8:	21c0      	movs	r1, #192	; 0xc0
    acfa:	0049      	lsls	r1, r1, #1
    acfc:	430a      	orrs	r2, r1
    acfe:	6032      	str	r2, [r6, #0]
    ad00:	2200      	movs	r2, #0
    ad02:	9200      	str	r2, [sp, #0]
    ad04:	e001      	b.n	ad0a <_scanf_float+0x1de>
    ad06:	2203      	movs	r2, #3
    ad08:	9203      	str	r2, [sp, #12]
    ad0a:	703b      	strb	r3, [r7, #0]
    ad0c:	3701      	adds	r7, #1
    ad0e:	68b3      	ldr	r3, [r6, #8]
    ad10:	3b01      	subs	r3, #1
    ad12:	60b3      	str	r3, [r6, #8]
    ad14:	6933      	ldr	r3, [r6, #16]
    ad16:	3301      	adds	r3, #1
    ad18:	6133      	str	r3, [r6, #16]
    ad1a:	686b      	ldr	r3, [r5, #4]
    ad1c:	3b01      	subs	r3, #1
    ad1e:	606b      	str	r3, [r5, #4]
    ad20:	2b00      	cmp	r3, #0
    ad22:	dd03      	ble.n	ad2c <_scanf_float+0x200>
    ad24:	682b      	ldr	r3, [r5, #0]
    ad26:	3301      	adds	r3, #1
    ad28:	602b      	str	r3, [r5, #0]
    ad2a:	e722      	b.n	ab72 <_scanf_float+0x46>
    ad2c:	23c0      	movs	r3, #192	; 0xc0
    ad2e:	005b      	lsls	r3, r3, #1
    ad30:	58f3      	ldr	r3, [r6, r3]
    ad32:	9802      	ldr	r0, [sp, #8]
    ad34:	1c29      	adds	r1, r5, #0
    ad36:	4798      	blx	r3
    ad38:	2800      	cmp	r0, #0
    ad3a:	d100      	bne.n	ad3e <_scanf_float+0x212>
    ad3c:	e719      	b.n	ab72 <_scanf_float+0x46>
    ad3e:	9b00      	ldr	r3, [sp, #0]
    ad40:	2b00      	cmp	r3, #0
    ad42:	d003      	beq.n	ad4c <_scanf_float+0x220>
    ad44:	6832      	ldr	r2, [r6, #0]
    ad46:	4b6c      	ldr	r3, [pc, #432]	; (aef8 <_scanf_float+0x3cc>)
    ad48:	4013      	ands	r3, r2
    ad4a:	6033      	str	r3, [r6, #0]
    ad4c:	9b03      	ldr	r3, [sp, #12]
    ad4e:	3b01      	subs	r3, #1
    ad50:	2b01      	cmp	r3, #1
    ad52:	d810      	bhi.n	ad76 <_scanf_float+0x24a>
    ad54:	9b04      	ldr	r3, [sp, #16]
    ad56:	429f      	cmp	r7, r3
    ad58:	d90b      	bls.n	ad72 <_scanf_float+0x246>
    ad5a:	23be      	movs	r3, #190	; 0xbe
    ad5c:	3f01      	subs	r7, #1
    ad5e:	005b      	lsls	r3, r3, #1
    ad60:	58f3      	ldr	r3, [r6, r3]
    ad62:	7839      	ldrb	r1, [r7, #0]
    ad64:	9802      	ldr	r0, [sp, #8]
    ad66:	1c2a      	adds	r2, r5, #0
    ad68:	4798      	blx	r3
    ad6a:	6933      	ldr	r3, [r6, #16]
    ad6c:	3b01      	subs	r3, #1
    ad6e:	6133      	str	r3, [r6, #16]
    ad70:	e7f0      	b.n	ad54 <_scanf_float+0x228>
    ad72:	2401      	movs	r4, #1
    ad74:	e0b7      	b.n	aee6 <_scanf_float+0x3ba>
    ad76:	1e63      	subs	r3, r4, #1
    ad78:	2b06      	cmp	r3, #6
    ad7a:	d82a      	bhi.n	add2 <_scanf_float+0x2a6>
    ad7c:	2c02      	cmp	r4, #2
    ad7e:	d919      	bls.n	adb4 <_scanf_float+0x288>
    ad80:	9405      	str	r4, [sp, #20]
    ad82:	9703      	str	r7, [sp, #12]
    ad84:	9b05      	ldr	r3, [sp, #20]
    ad86:	3b01      	subs	r3, #1
    ad88:	b2db      	uxtb	r3, r3
    ad8a:	9305      	str	r3, [sp, #20]
    ad8c:	2b02      	cmp	r3, #2
    ad8e:	d00d      	beq.n	adac <_scanf_float+0x280>
    ad90:	9b03      	ldr	r3, [sp, #12]
    ad92:	9802      	ldr	r0, [sp, #8]
    ad94:	3b01      	subs	r3, #1
    ad96:	9303      	str	r3, [sp, #12]
    ad98:	7819      	ldrb	r1, [r3, #0]
    ad9a:	23be      	movs	r3, #190	; 0xbe
    ad9c:	005b      	lsls	r3, r3, #1
    ad9e:	58f3      	ldr	r3, [r6, r3]
    ada0:	1c2a      	adds	r2, r5, #0
    ada2:	4798      	blx	r3
    ada4:	6933      	ldr	r3, [r6, #16]
    ada6:	3b01      	subs	r3, #1
    ada8:	6133      	str	r3, [r6, #16]
    adaa:	e7eb      	b.n	ad84 <_scanf_float+0x258>
    adac:	3c03      	subs	r4, #3
    adae:	b2e4      	uxtb	r4, r4
    adb0:	1b3f      	subs	r7, r7, r4
    adb2:	e00e      	b.n	add2 <_scanf_float+0x2a6>
    adb4:	9b04      	ldr	r3, [sp, #16]
    adb6:	429f      	cmp	r7, r3
    adb8:	d9db      	bls.n	ad72 <_scanf_float+0x246>
    adba:	23be      	movs	r3, #190	; 0xbe
    adbc:	3f01      	subs	r7, #1
    adbe:	005b      	lsls	r3, r3, #1
    adc0:	58f3      	ldr	r3, [r6, r3]
    adc2:	7839      	ldrb	r1, [r7, #0]
    adc4:	9802      	ldr	r0, [sp, #8]
    adc6:	1c2a      	adds	r2, r5, #0
    adc8:	4798      	blx	r3
    adca:	6933      	ldr	r3, [r6, #16]
    adcc:	3b01      	subs	r3, #1
    adce:	6133      	str	r3, [r6, #16]
    add0:	e7f0      	b.n	adb4 <_scanf_float+0x288>
    add2:	6833      	ldr	r3, [r6, #0]
    add4:	05da      	lsls	r2, r3, #23
    add6:	d52b      	bpl.n	ae30 <_scanf_float+0x304>
    add8:	055b      	lsls	r3, r3, #21
    adda:	d50e      	bpl.n	adfa <_scanf_float+0x2ce>
    addc:	9b04      	ldr	r3, [sp, #16]
    adde:	429f      	cmp	r7, r3
    ade0:	d9c7      	bls.n	ad72 <_scanf_float+0x246>
    ade2:	23be      	movs	r3, #190	; 0xbe
    ade4:	3f01      	subs	r7, #1
    ade6:	005b      	lsls	r3, r3, #1
    ade8:	58f3      	ldr	r3, [r6, r3]
    adea:	7839      	ldrb	r1, [r7, #0]
    adec:	9802      	ldr	r0, [sp, #8]
    adee:	1c2a      	adds	r2, r5, #0
    adf0:	4798      	blx	r3
    adf2:	6933      	ldr	r3, [r6, #16]
    adf4:	3b01      	subs	r3, #1
    adf6:	6133      	str	r3, [r6, #16]
    adf8:	e7f0      	b.n	addc <_scanf_float+0x2b0>
    adfa:	6933      	ldr	r3, [r6, #16]
    adfc:	1e7c      	subs	r4, r7, #1
    adfe:	7821      	ldrb	r1, [r4, #0]
    ae00:	3b01      	subs	r3, #1
    ae02:	6133      	str	r3, [r6, #16]
    ae04:	2965      	cmp	r1, #101	; 0x65
    ae06:	d00c      	beq.n	ae22 <_scanf_float+0x2f6>
    ae08:	2945      	cmp	r1, #69	; 0x45
    ae0a:	d00a      	beq.n	ae22 <_scanf_float+0x2f6>
    ae0c:	23be      	movs	r3, #190	; 0xbe
    ae0e:	005b      	lsls	r3, r3, #1
    ae10:	58f3      	ldr	r3, [r6, r3]
    ae12:	9802      	ldr	r0, [sp, #8]
    ae14:	1c2a      	adds	r2, r5, #0
    ae16:	4798      	blx	r3
    ae18:	6933      	ldr	r3, [r6, #16]
    ae1a:	1ebc      	subs	r4, r7, #2
    ae1c:	3b01      	subs	r3, #1
    ae1e:	7821      	ldrb	r1, [r4, #0]
    ae20:	6133      	str	r3, [r6, #16]
    ae22:	23be      	movs	r3, #190	; 0xbe
    ae24:	005b      	lsls	r3, r3, #1
    ae26:	58f3      	ldr	r3, [r6, r3]
    ae28:	9802      	ldr	r0, [sp, #8]
    ae2a:	1c2a      	adds	r2, r5, #0
    ae2c:	4798      	blx	r3
    ae2e:	1c27      	adds	r7, r4, #0
    ae30:	2410      	movs	r4, #16
    ae32:	6833      	ldr	r3, [r6, #0]
    ae34:	401c      	ands	r4, r3
    ae36:	d155      	bne.n	aee4 <_scanf_float+0x3b8>
    ae38:	23c0      	movs	r3, #192	; 0xc0
    ae3a:	703c      	strb	r4, [r7, #0]
    ae3c:	6832      	ldr	r2, [r6, #0]
    ae3e:	00db      	lsls	r3, r3, #3
    ae40:	4013      	ands	r3, r2
    ae42:	2280      	movs	r2, #128	; 0x80
    ae44:	00d2      	lsls	r2, r2, #3
    ae46:	4293      	cmp	r3, r2
    ae48:	d106      	bne.n	ae58 <_scanf_float+0x32c>
    ae4a:	9a07      	ldr	r2, [sp, #28]
    ae4c:	9b00      	ldr	r3, [sp, #0]
    ae4e:	1a9b      	subs	r3, r3, r2
    ae50:	425a      	negs	r2, r3
    ae52:	2b00      	cmp	r3, #0
    ae54:	d10d      	bne.n	ae72 <_scanf_float+0x346>
    ae56:	e018      	b.n	ae8a <_scanf_float+0x35e>
    ae58:	9b08      	ldr	r3, [sp, #32]
    ae5a:	2b00      	cmp	r3, #0
    ae5c:	d015      	beq.n	ae8a <_scanf_float+0x35e>
    ae5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ae60:	1c22      	adds	r2, r4, #0
    ae62:	1c59      	adds	r1, r3, #1
    ae64:	9802      	ldr	r0, [sp, #8]
    ae66:	230a      	movs	r3, #10
    ae68:	f001 fa08 	bl	c27c <_strtol_r>
    ae6c:	9b08      	ldr	r3, [sp, #32]
    ae6e:	9f09      	ldr	r7, [sp, #36]	; 0x24
    ae70:	1ac2      	subs	r2, r0, r3
    ae72:	1c33      	adds	r3, r6, #0
    ae74:	3370      	adds	r3, #112	; 0x70
    ae76:	33ff      	adds	r3, #255	; 0xff
    ae78:	429f      	cmp	r7, r3
    ae7a:	d302      	bcc.n	ae82 <_scanf_float+0x356>
    ae7c:	1c37      	adds	r7, r6, #0
    ae7e:	376f      	adds	r7, #111	; 0x6f
    ae80:	37ff      	adds	r7, #255	; 0xff
    ae82:	1c38      	adds	r0, r7, #0
    ae84:	491d      	ldr	r1, [pc, #116]	; (aefc <_scanf_float+0x3d0>)
    ae86:	f000 fae3 	bl	b450 <siprintf>
    ae8a:	2200      	movs	r2, #0
    ae8c:	9802      	ldr	r0, [sp, #8]
    ae8e:	9904      	ldr	r1, [sp, #16]
    ae90:	f000 fbda 	bl	b648 <_strtod_r>
    ae94:	9b06      	ldr	r3, [sp, #24]
    ae96:	6832      	ldr	r2, [r6, #0]
    ae98:	9000      	str	r0, [sp, #0]
    ae9a:	9101      	str	r1, [sp, #4]
    ae9c:	681b      	ldr	r3, [r3, #0]
    ae9e:	0791      	lsls	r1, r2, #30
    aea0:	d401      	bmi.n	aea6 <_scanf_float+0x37a>
    aea2:	0752      	lsls	r2, r2, #29
    aea4:	d508      	bpl.n	aeb8 <_scanf_float+0x38c>
    aea6:	9906      	ldr	r1, [sp, #24]
    aea8:	1d1a      	adds	r2, r3, #4
    aeaa:	600a      	str	r2, [r1, #0]
    aeac:	681b      	ldr	r3, [r3, #0]
    aeae:	9900      	ldr	r1, [sp, #0]
    aeb0:	9a01      	ldr	r2, [sp, #4]
    aeb2:	6019      	str	r1, [r3, #0]
    aeb4:	605a      	str	r2, [r3, #4]
    aeb6:	e011      	b.n	aedc <_scanf_float+0x3b0>
    aeb8:	9906      	ldr	r1, [sp, #24]
    aeba:	1d1a      	adds	r2, r3, #4
    aebc:	600a      	str	r2, [r1, #0]
    aebe:	9800      	ldr	r0, [sp, #0]
    aec0:	9901      	ldr	r1, [sp, #4]
    aec2:	681d      	ldr	r5, [r3, #0]
    aec4:	f000 f9c4 	bl	b250 <__fpclassifyd>
    aec8:	2800      	cmp	r0, #0
    aeca:	d102      	bne.n	aed2 <_scanf_float+0x3a6>
    aecc:	f000 fabc 	bl	b448 <nanf>
    aed0:	e003      	b.n	aeda <_scanf_float+0x3ae>
    aed2:	9800      	ldr	r0, [sp, #0]
    aed4:	9901      	ldr	r1, [sp, #4]
    aed6:	f7fe fb4b 	bl	9570 <__aeabi_d2f>
    aeda:	6028      	str	r0, [r5, #0]
    aedc:	68f3      	ldr	r3, [r6, #12]
    aede:	3301      	adds	r3, #1
    aee0:	60f3      	str	r3, [r6, #12]
    aee2:	e000      	b.n	aee6 <_scanf_float+0x3ba>
    aee4:	2400      	movs	r4, #0
    aee6:	1c20      	adds	r0, r4, #0
    aee8:	b00b      	add	sp, #44	; 0x2c
    aeea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    aeec:	fffffe7f 	.word	0xfffffe7f
    aef0:	fffff87f 	.word	0xfffff87f
    aef4:	fffffd7f 	.word	0xfffffd7f
    aef8:	fffffeff 	.word	0xfffffeff
    aefc:	0000fa93 	.word	0x0000fa93

0000af00 <_scanf_chars>:
    af00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    af02:	1c15      	adds	r5, r2, #0
    af04:	688a      	ldr	r2, [r1, #8]
    af06:	9001      	str	r0, [sp, #4]
    af08:	1c0c      	adds	r4, r1, #0
    af0a:	2a00      	cmp	r2, #0
    af0c:	d106      	bne.n	af1c <_scanf_chars+0x1c>
    af0e:	698a      	ldr	r2, [r1, #24]
    af10:	1e51      	subs	r1, r2, #1
    af12:	418a      	sbcs	r2, r1
    af14:	2101      	movs	r1, #1
    af16:	4252      	negs	r2, r2
    af18:	430a      	orrs	r2, r1
    af1a:	60a2      	str	r2, [r4, #8]
    af1c:	6822      	ldr	r2, [r4, #0]
    af1e:	06d2      	lsls	r2, r2, #27
    af20:	d403      	bmi.n	af2a <_scanf_chars+0x2a>
    af22:	681a      	ldr	r2, [r3, #0]
    af24:	1d11      	adds	r1, r2, #4
    af26:	6019      	str	r1, [r3, #0]
    af28:	6817      	ldr	r7, [r2, #0]
    af2a:	2600      	movs	r6, #0
    af2c:	69a0      	ldr	r0, [r4, #24]
    af2e:	2800      	cmp	r0, #0
    af30:	d11d      	bne.n	af6e <_scanf_chars+0x6e>
    af32:	6823      	ldr	r3, [r4, #0]
    af34:	3601      	adds	r6, #1
    af36:	06db      	lsls	r3, r3, #27
    af38:	d403      	bmi.n	af42 <_scanf_chars+0x42>
    af3a:	682b      	ldr	r3, [r5, #0]
    af3c:	781b      	ldrb	r3, [r3, #0]
    af3e:	703b      	strb	r3, [r7, #0]
    af40:	3701      	adds	r7, #1
    af42:	682a      	ldr	r2, [r5, #0]
    af44:	686b      	ldr	r3, [r5, #4]
    af46:	3201      	adds	r2, #1
    af48:	602a      	str	r2, [r5, #0]
    af4a:	68a2      	ldr	r2, [r4, #8]
    af4c:	3b01      	subs	r3, #1
    af4e:	3a01      	subs	r2, #1
    af50:	606b      	str	r3, [r5, #4]
    af52:	60a2      	str	r2, [r4, #8]
    af54:	2a00      	cmp	r2, #0
    af56:	d01f      	beq.n	af98 <_scanf_chars+0x98>
    af58:	2b00      	cmp	r3, #0
    af5a:	dce7      	bgt.n	af2c <_scanf_chars+0x2c>
    af5c:	23c0      	movs	r3, #192	; 0xc0
    af5e:	005b      	lsls	r3, r3, #1
    af60:	58e3      	ldr	r3, [r4, r3]
    af62:	9801      	ldr	r0, [sp, #4]
    af64:	1c29      	adds	r1, r5, #0
    af66:	4798      	blx	r3
    af68:	2800      	cmp	r0, #0
    af6a:	d0df      	beq.n	af2c <_scanf_chars+0x2c>
    af6c:	e014      	b.n	af98 <_scanf_chars+0x98>
    af6e:	2801      	cmp	r0, #1
    af70:	d108      	bne.n	af84 <_scanf_chars+0x84>
    af72:	682b      	ldr	r3, [r5, #0]
    af74:	6962      	ldr	r2, [r4, #20]
    af76:	781b      	ldrb	r3, [r3, #0]
    af78:	5cd3      	ldrb	r3, [r2, r3]
    af7a:	2b00      	cmp	r3, #0
    af7c:	d1d9      	bne.n	af32 <_scanf_chars+0x32>
    af7e:	2e00      	cmp	r6, #0
    af80:	d019      	beq.n	afb6 <_scanf_chars+0xb6>
    af82:	e009      	b.n	af98 <_scanf_chars+0x98>
    af84:	2802      	cmp	r0, #2
    af86:	d107      	bne.n	af98 <_scanf_chars+0x98>
    af88:	682b      	ldr	r3, [r5, #0]
    af8a:	4a0b      	ldr	r2, [pc, #44]	; (afb8 <_scanf_chars+0xb8>)
    af8c:	781b      	ldrb	r3, [r3, #0]
    af8e:	6812      	ldr	r2, [r2, #0]
    af90:	18d3      	adds	r3, r2, r3
    af92:	785b      	ldrb	r3, [r3, #1]
    af94:	071b      	lsls	r3, r3, #28
    af96:	d5cc      	bpl.n	af32 <_scanf_chars+0x32>
    af98:	2310      	movs	r3, #16
    af9a:	6822      	ldr	r2, [r4, #0]
    af9c:	4013      	ands	r3, r2
    af9e:	d106      	bne.n	afae <_scanf_chars+0xae>
    afa0:	68e2      	ldr	r2, [r4, #12]
    afa2:	3201      	adds	r2, #1
    afa4:	60e2      	str	r2, [r4, #12]
    afa6:	69a2      	ldr	r2, [r4, #24]
    afa8:	2a00      	cmp	r2, #0
    afaa:	d000      	beq.n	afae <_scanf_chars+0xae>
    afac:	703b      	strb	r3, [r7, #0]
    afae:	2000      	movs	r0, #0
    afb0:	6923      	ldr	r3, [r4, #16]
    afb2:	199e      	adds	r6, r3, r6
    afb4:	6126      	str	r6, [r4, #16]
    afb6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    afb8:	20000138 	.word	0x20000138

0000afbc <_scanf_i>:
    afbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    afbe:	1c0c      	adds	r4, r1, #0
    afc0:	b08b      	sub	sp, #44	; 0x2c
    afc2:	9301      	str	r3, [sp, #4]
    afc4:	4b74      	ldr	r3, [pc, #464]	; (b198 <_scanf_i+0x1dc>)
    afc6:	9004      	str	r0, [sp, #16]
    afc8:	1c16      	adds	r6, r2, #0
    afca:	aa07      	add	r2, sp, #28
    afcc:	cb23      	ldmia	r3!, {r0, r1, r5}
    afce:	c223      	stmia	r2!, {r0, r1, r5}
    afd0:	4b72      	ldr	r3, [pc, #456]	; (b19c <_scanf_i+0x1e0>)
    afd2:	9305      	str	r3, [sp, #20]
    afd4:	69a3      	ldr	r3, [r4, #24]
    afd6:	2b03      	cmp	r3, #3
    afd8:	d001      	beq.n	afde <_scanf_i+0x22>
    afda:	4b71      	ldr	r3, [pc, #452]	; (b1a0 <_scanf_i+0x1e4>)
    afdc:	9305      	str	r3, [sp, #20]
    afde:	2200      	movs	r2, #0
    afe0:	68a3      	ldr	r3, [r4, #8]
    afe2:	9203      	str	r2, [sp, #12]
    afe4:	325d      	adds	r2, #93	; 0x5d
    afe6:	1e59      	subs	r1, r3, #1
    afe8:	32ff      	adds	r2, #255	; 0xff
    afea:	4291      	cmp	r1, r2
    afec:	d905      	bls.n	affa <_scanf_i+0x3e>
    afee:	3b5e      	subs	r3, #94	; 0x5e
    aff0:	3bff      	subs	r3, #255	; 0xff
    aff2:	9303      	str	r3, [sp, #12]
    aff4:	235e      	movs	r3, #94	; 0x5e
    aff6:	33ff      	adds	r3, #255	; 0xff
    aff8:	60a3      	str	r3, [r4, #8]
    affa:	1c23      	adds	r3, r4, #0
    affc:	331c      	adds	r3, #28
    affe:	9300      	str	r3, [sp, #0]
    b000:	23d0      	movs	r3, #208	; 0xd0
    b002:	2700      	movs	r7, #0
    b004:	6822      	ldr	r2, [r4, #0]
    b006:	011b      	lsls	r3, r3, #4
    b008:	4313      	orrs	r3, r2
    b00a:	6023      	str	r3, [r4, #0]
    b00c:	9b00      	ldr	r3, [sp, #0]
    b00e:	9302      	str	r3, [sp, #8]
    b010:	6832      	ldr	r2, [r6, #0]
    b012:	00bb      	lsls	r3, r7, #2
    b014:	7811      	ldrb	r1, [r2, #0]
    b016:	aa07      	add	r2, sp, #28
    b018:	5898      	ldr	r0, [r3, r2]
    b01a:	2202      	movs	r2, #2
    b01c:	f7fe ff2c 	bl	9e78 <memchr>
    b020:	2800      	cmp	r0, #0
    b022:	d039      	beq.n	b098 <_scanf_i+0xdc>
    b024:	2f01      	cmp	r7, #1
    b026:	d10d      	bne.n	b044 <_scanf_i+0x88>
    b028:	6863      	ldr	r3, [r4, #4]
    b02a:	2b00      	cmp	r3, #0
    b02c:	d106      	bne.n	b03c <_scanf_i+0x80>
    b02e:	3308      	adds	r3, #8
    b030:	6822      	ldr	r2, [r4, #0]
    b032:	6063      	str	r3, [r4, #4]
    b034:	33f9      	adds	r3, #249	; 0xf9
    b036:	33ff      	adds	r3, #255	; 0xff
    b038:	4313      	orrs	r3, r2
    b03a:	6023      	str	r3, [r4, #0]
    b03c:	4b59      	ldr	r3, [pc, #356]	; (b1a4 <_scanf_i+0x1e8>)
    b03e:	6822      	ldr	r2, [r4, #0]
    b040:	4013      	ands	r3, r2
    b042:	e00d      	b.n	b060 <_scanf_i+0xa4>
    b044:	2f02      	cmp	r7, #2
    b046:	d10c      	bne.n	b062 <_scanf_i+0xa6>
    b048:	22c0      	movs	r2, #192	; 0xc0
    b04a:	2180      	movs	r1, #128	; 0x80
    b04c:	6823      	ldr	r3, [r4, #0]
    b04e:	00d2      	lsls	r2, r2, #3
    b050:	401a      	ands	r2, r3
    b052:	0089      	lsls	r1, r1, #2
    b054:	428a      	cmp	r2, r1
    b056:	d122      	bne.n	b09e <_scanf_i+0xe2>
    b058:	2210      	movs	r2, #16
    b05a:	6062      	str	r2, [r4, #4]
    b05c:	32f0      	adds	r2, #240	; 0xf0
    b05e:	4313      	orrs	r3, r2
    b060:	6023      	str	r3, [r4, #0]
    b062:	68a3      	ldr	r3, [r4, #8]
    b064:	1e5a      	subs	r2, r3, #1
    b066:	60a2      	str	r2, [r4, #8]
    b068:	2b00      	cmp	r3, #0
    b06a:	d015      	beq.n	b098 <_scanf_i+0xdc>
    b06c:	9b02      	ldr	r3, [sp, #8]
    b06e:	1c5d      	adds	r5, r3, #1
    b070:	6833      	ldr	r3, [r6, #0]
    b072:	1c5a      	adds	r2, r3, #1
    b074:	6032      	str	r2, [r6, #0]
    b076:	781b      	ldrb	r3, [r3, #0]
    b078:	9a02      	ldr	r2, [sp, #8]
    b07a:	9502      	str	r5, [sp, #8]
    b07c:	7013      	strb	r3, [r2, #0]
    b07e:	6873      	ldr	r3, [r6, #4]
    b080:	3b01      	subs	r3, #1
    b082:	6073      	str	r3, [r6, #4]
    b084:	2b00      	cmp	r3, #0
    b086:	dc07      	bgt.n	b098 <_scanf_i+0xdc>
    b088:	23c0      	movs	r3, #192	; 0xc0
    b08a:	005b      	lsls	r3, r3, #1
    b08c:	58e3      	ldr	r3, [r4, r3]
    b08e:	9804      	ldr	r0, [sp, #16]
    b090:	1c31      	adds	r1, r6, #0
    b092:	4798      	blx	r3
    b094:	2800      	cmp	r0, #0
    b096:	d144      	bne.n	b122 <_scanf_i+0x166>
    b098:	3701      	adds	r7, #1
    b09a:	2f03      	cmp	r7, #3
    b09c:	d1b8      	bne.n	b010 <_scanf_i+0x54>
    b09e:	6863      	ldr	r3, [r4, #4]
    b0a0:	2b00      	cmp	r3, #0
    b0a2:	d101      	bne.n	b0a8 <_scanf_i+0xec>
    b0a4:	330a      	adds	r3, #10
    b0a6:	6063      	str	r3, [r4, #4]
    b0a8:	2110      	movs	r1, #16
    b0aa:	2700      	movs	r7, #0
    b0ac:	6863      	ldr	r3, [r4, #4]
    b0ae:	6960      	ldr	r0, [r4, #20]
    b0b0:	1ac9      	subs	r1, r1, r3
    b0b2:	4b3d      	ldr	r3, [pc, #244]	; (b1a8 <_scanf_i+0x1ec>)
    b0b4:	18c9      	adds	r1, r1, r3
    b0b6:	f000 f905 	bl	b2c4 <__sccl>
    b0ba:	9d02      	ldr	r5, [sp, #8]
    b0bc:	68a3      	ldr	r3, [r4, #8]
    b0be:	2b00      	cmp	r3, #0
    b0c0:	d030      	beq.n	b124 <_scanf_i+0x168>
    b0c2:	6832      	ldr	r2, [r6, #0]
    b0c4:	6960      	ldr	r0, [r4, #20]
    b0c6:	7811      	ldrb	r1, [r2, #0]
    b0c8:	5c40      	ldrb	r0, [r0, r1]
    b0ca:	2800      	cmp	r0, #0
    b0cc:	d02a      	beq.n	b124 <_scanf_i+0x168>
    b0ce:	2930      	cmp	r1, #48	; 0x30
    b0d0:	d10b      	bne.n	b0ea <_scanf_i+0x12e>
    b0d2:	6821      	ldr	r1, [r4, #0]
    b0d4:	0509      	lsls	r1, r1, #20
    b0d6:	d508      	bpl.n	b0ea <_scanf_i+0x12e>
    b0d8:	9a03      	ldr	r2, [sp, #12]
    b0da:	3701      	adds	r7, #1
    b0dc:	2a00      	cmp	r2, #0
    b0de:	d00b      	beq.n	b0f8 <_scanf_i+0x13c>
    b0e0:	3a01      	subs	r2, #1
    b0e2:	3301      	adds	r3, #1
    b0e4:	9203      	str	r2, [sp, #12]
    b0e6:	60a3      	str	r3, [r4, #8]
    b0e8:	e006      	b.n	b0f8 <_scanf_i+0x13c>
    b0ea:	6821      	ldr	r1, [r4, #0]
    b0ec:	4b2f      	ldr	r3, [pc, #188]	; (b1ac <_scanf_i+0x1f0>)
    b0ee:	400b      	ands	r3, r1
    b0f0:	6023      	str	r3, [r4, #0]
    b0f2:	7813      	ldrb	r3, [r2, #0]
    b0f4:	702b      	strb	r3, [r5, #0]
    b0f6:	3501      	adds	r5, #1
    b0f8:	6873      	ldr	r3, [r6, #4]
    b0fa:	3b01      	subs	r3, #1
    b0fc:	6073      	str	r3, [r6, #4]
    b0fe:	2b00      	cmp	r3, #0
    b100:	dd03      	ble.n	b10a <_scanf_i+0x14e>
    b102:	6833      	ldr	r3, [r6, #0]
    b104:	3301      	adds	r3, #1
    b106:	6033      	str	r3, [r6, #0]
    b108:	e007      	b.n	b11a <_scanf_i+0x15e>
    b10a:	23c0      	movs	r3, #192	; 0xc0
    b10c:	005b      	lsls	r3, r3, #1
    b10e:	58e3      	ldr	r3, [r4, r3]
    b110:	9804      	ldr	r0, [sp, #16]
    b112:	1c31      	adds	r1, r6, #0
    b114:	4798      	blx	r3
    b116:	2800      	cmp	r0, #0
    b118:	d104      	bne.n	b124 <_scanf_i+0x168>
    b11a:	68a3      	ldr	r3, [r4, #8]
    b11c:	3b01      	subs	r3, #1
    b11e:	60a3      	str	r3, [r4, #8]
    b120:	e7cc      	b.n	b0bc <_scanf_i+0x100>
    b122:	2700      	movs	r7, #0
    b124:	6823      	ldr	r3, [r4, #0]
    b126:	05db      	lsls	r3, r3, #23
    b128:	d50e      	bpl.n	b148 <_scanf_i+0x18c>
    b12a:	9b00      	ldr	r3, [sp, #0]
    b12c:	429d      	cmp	r5, r3
    b12e:	d907      	bls.n	b140 <_scanf_i+0x184>
    b130:	23be      	movs	r3, #190	; 0xbe
    b132:	3d01      	subs	r5, #1
    b134:	005b      	lsls	r3, r3, #1
    b136:	7829      	ldrb	r1, [r5, #0]
    b138:	58e3      	ldr	r3, [r4, r3]
    b13a:	9804      	ldr	r0, [sp, #16]
    b13c:	1c32      	adds	r2, r6, #0
    b13e:	4798      	blx	r3
    b140:	9b00      	ldr	r3, [sp, #0]
    b142:	2001      	movs	r0, #1
    b144:	429d      	cmp	r5, r3
    b146:	d025      	beq.n	b194 <_scanf_i+0x1d8>
    b148:	2210      	movs	r2, #16
    b14a:	6823      	ldr	r3, [r4, #0]
    b14c:	401a      	ands	r2, r3
    b14e:	d11a      	bne.n	b186 <_scanf_i+0x1ca>
    b150:	702a      	strb	r2, [r5, #0]
    b152:	6863      	ldr	r3, [r4, #4]
    b154:	9804      	ldr	r0, [sp, #16]
    b156:	9900      	ldr	r1, [sp, #0]
    b158:	9e05      	ldr	r6, [sp, #20]
    b15a:	47b0      	blx	r6
    b15c:	9b01      	ldr	r3, [sp, #4]
    b15e:	6822      	ldr	r2, [r4, #0]
    b160:	681b      	ldr	r3, [r3, #0]
    b162:	0691      	lsls	r1, r2, #26
    b164:	d407      	bmi.n	b176 <_scanf_i+0x1ba>
    b166:	07d1      	lsls	r1, r2, #31
    b168:	d505      	bpl.n	b176 <_scanf_i+0x1ba>
    b16a:	9901      	ldr	r1, [sp, #4]
    b16c:	1d1a      	adds	r2, r3, #4
    b16e:	600a      	str	r2, [r1, #0]
    b170:	681b      	ldr	r3, [r3, #0]
    b172:	8018      	strh	r0, [r3, #0]
    b174:	e004      	b.n	b180 <_scanf_i+0x1c4>
    b176:	9901      	ldr	r1, [sp, #4]
    b178:	1d1a      	adds	r2, r3, #4
    b17a:	600a      	str	r2, [r1, #0]
    b17c:	681b      	ldr	r3, [r3, #0]
    b17e:	6018      	str	r0, [r3, #0]
    b180:	68e3      	ldr	r3, [r4, #12]
    b182:	3301      	adds	r3, #1
    b184:	60e3      	str	r3, [r4, #12]
    b186:	2000      	movs	r0, #0
    b188:	9b00      	ldr	r3, [sp, #0]
    b18a:	1aed      	subs	r5, r5, r3
    b18c:	6923      	ldr	r3, [r4, #16]
    b18e:	19ed      	adds	r5, r5, r7
    b190:	195d      	adds	r5, r3, r5
    b192:	6125      	str	r5, [r4, #16]
    b194:	b00b      	add	sp, #44	; 0x2c
    b196:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b198:	0000fa98 	.word	0x0000fa98
    b19c:	0000c27d 	.word	0x0000c27d
    b1a0:	0000c39d 	.word	0x0000c39d
    b1a4:	fffffaff 	.word	0xfffffaff
    b1a8:	0000faa4 	.word	0x0000faa4
    b1ac:	fffff6ff 	.word	0xfffff6ff

0000b1b0 <_open_r>:
    b1b0:	b538      	push	{r3, r4, r5, lr}
    b1b2:	1c05      	adds	r5, r0, #0
    b1b4:	2000      	movs	r0, #0
    b1b6:	4c07      	ldr	r4, [pc, #28]	; (b1d4 <_open_r+0x24>)
    b1b8:	6020      	str	r0, [r4, #0]
    b1ba:	1c08      	adds	r0, r1, #0
    b1bc:	1c11      	adds	r1, r2, #0
    b1be:	1c1a      	adds	r2, r3, #0
    b1c0:	f7f8 fdb8 	bl	3d34 <_open>
    b1c4:	1c43      	adds	r3, r0, #1
    b1c6:	d103      	bne.n	b1d0 <_open_r+0x20>
    b1c8:	6823      	ldr	r3, [r4, #0]
    b1ca:	2b00      	cmp	r3, #0
    b1cc:	d000      	beq.n	b1d0 <_open_r+0x20>
    b1ce:	602b      	str	r3, [r5, #0]
    b1d0:	bd38      	pop	{r3, r4, r5, pc}
    b1d2:	46c0      	nop			; (mov r8, r8)
    b1d4:	200047c8 	.word	0x200047c8

0000b1d8 <_putc_r>:
    b1d8:	b570      	push	{r4, r5, r6, lr}
    b1da:	1c05      	adds	r5, r0, #0
    b1dc:	1c0e      	adds	r6, r1, #0
    b1de:	1c14      	adds	r4, r2, #0
    b1e0:	2800      	cmp	r0, #0
    b1e2:	d004      	beq.n	b1ee <_putc_r+0x16>
    b1e4:	6983      	ldr	r3, [r0, #24]
    b1e6:	2b00      	cmp	r3, #0
    b1e8:	d101      	bne.n	b1ee <_putc_r+0x16>
    b1ea:	f7fe fc07 	bl	99fc <__sinit>
    b1ee:	4b15      	ldr	r3, [pc, #84]	; (b244 <_putc_r+0x6c>)
    b1f0:	429c      	cmp	r4, r3
    b1f2:	d101      	bne.n	b1f8 <_putc_r+0x20>
    b1f4:	686c      	ldr	r4, [r5, #4]
    b1f6:	e008      	b.n	b20a <_putc_r+0x32>
    b1f8:	4b13      	ldr	r3, [pc, #76]	; (b248 <_putc_r+0x70>)
    b1fa:	429c      	cmp	r4, r3
    b1fc:	d101      	bne.n	b202 <_putc_r+0x2a>
    b1fe:	68ac      	ldr	r4, [r5, #8]
    b200:	e003      	b.n	b20a <_putc_r+0x32>
    b202:	4b12      	ldr	r3, [pc, #72]	; (b24c <_putc_r+0x74>)
    b204:	429c      	cmp	r4, r3
    b206:	d100      	bne.n	b20a <_putc_r+0x32>
    b208:	68ec      	ldr	r4, [r5, #12]
    b20a:	68a3      	ldr	r3, [r4, #8]
    b20c:	3b01      	subs	r3, #1
    b20e:	60a3      	str	r3, [r4, #8]
    b210:	2b00      	cmp	r3, #0
    b212:	da10      	bge.n	b236 <_putc_r+0x5e>
    b214:	69a2      	ldr	r2, [r4, #24]
    b216:	4293      	cmp	r3, r2
    b218:	db07      	blt.n	b22a <_putc_r+0x52>
    b21a:	6823      	ldr	r3, [r4, #0]
    b21c:	701e      	strb	r6, [r3, #0]
    b21e:	6823      	ldr	r3, [r4, #0]
    b220:	7819      	ldrb	r1, [r3, #0]
    b222:	290a      	cmp	r1, #10
    b224:	d10a      	bne.n	b23c <_putc_r+0x64>
    b226:	1c28      	adds	r0, r5, #0
    b228:	e001      	b.n	b22e <_putc_r+0x56>
    b22a:	1c28      	adds	r0, r5, #0
    b22c:	1c31      	adds	r1, r6, #0
    b22e:	1c22      	adds	r2, r4, #0
    b230:	f001 f974 	bl	c51c <__swbuf_r>
    b234:	e005      	b.n	b242 <_putc_r+0x6a>
    b236:	6823      	ldr	r3, [r4, #0]
    b238:	701e      	strb	r6, [r3, #0]
    b23a:	6823      	ldr	r3, [r4, #0]
    b23c:	1c5a      	adds	r2, r3, #1
    b23e:	6022      	str	r2, [r4, #0]
    b240:	7818      	ldrb	r0, [r3, #0]
    b242:	bd70      	pop	{r4, r5, r6, pc}
    b244:	0000f9e8 	.word	0x0000f9e8
    b248:	0000fa08 	.word	0x0000fa08
    b24c:	0000fa28 	.word	0x0000fa28

0000b250 <__fpclassifyd>:
    b250:	b530      	push	{r4, r5, lr}
    b252:	1c0c      	adds	r4, r1, #0
    b254:	2302      	movs	r3, #2
    b256:	4304      	orrs	r4, r0
    b258:	d017      	beq.n	b28a <__fpclassifyd+0x3a>
    b25a:	2480      	movs	r4, #128	; 0x80
    b25c:	0624      	lsls	r4, r4, #24
    b25e:	42a1      	cmp	r1, r4
    b260:	d101      	bne.n	b266 <__fpclassifyd+0x16>
    b262:	2800      	cmp	r0, #0
    b264:	d011      	beq.n	b28a <__fpclassifyd+0x3a>
    b266:	4b0a      	ldr	r3, [pc, #40]	; (b290 <__fpclassifyd+0x40>)
    b268:	0049      	lsls	r1, r1, #1
    b26a:	0849      	lsrs	r1, r1, #1
    b26c:	4a09      	ldr	r2, [pc, #36]	; (b294 <__fpclassifyd+0x44>)
    b26e:	18cc      	adds	r4, r1, r3
    b270:	2304      	movs	r3, #4
    b272:	4294      	cmp	r4, r2
    b274:	d909      	bls.n	b28a <__fpclassifyd+0x3a>
    b276:	4a08      	ldr	r2, [pc, #32]	; (b298 <__fpclassifyd+0x48>)
    b278:	3b01      	subs	r3, #1
    b27a:	4291      	cmp	r1, r2
    b27c:	d905      	bls.n	b28a <__fpclassifyd+0x3a>
    b27e:	4a07      	ldr	r2, [pc, #28]	; (b29c <__fpclassifyd+0x4c>)
    b280:	2300      	movs	r3, #0
    b282:	4291      	cmp	r1, r2
    b284:	d101      	bne.n	b28a <__fpclassifyd+0x3a>
    b286:	4243      	negs	r3, r0
    b288:	4143      	adcs	r3, r0
    b28a:	1c18      	adds	r0, r3, #0
    b28c:	bd30      	pop	{r4, r5, pc}
    b28e:	46c0      	nop			; (mov r8, r8)
    b290:	fff00000 	.word	0xfff00000
    b294:	7fdfffff 	.word	0x7fdfffff
    b298:	000fffff 	.word	0x000fffff
    b29c:	7ff00000 	.word	0x7ff00000

0000b2a0 <_sbrk_r>:
    b2a0:	b538      	push	{r3, r4, r5, lr}
    b2a2:	2300      	movs	r3, #0
    b2a4:	4c06      	ldr	r4, [pc, #24]	; (b2c0 <_sbrk_r+0x20>)
    b2a6:	1c05      	adds	r5, r0, #0
    b2a8:	1c08      	adds	r0, r1, #0
    b2aa:	6023      	str	r3, [r4, #0]
    b2ac:	f7f8 fe6a 	bl	3f84 <_sbrk>
    b2b0:	1c43      	adds	r3, r0, #1
    b2b2:	d103      	bne.n	b2bc <_sbrk_r+0x1c>
    b2b4:	6823      	ldr	r3, [r4, #0]
    b2b6:	2b00      	cmp	r3, #0
    b2b8:	d000      	beq.n	b2bc <_sbrk_r+0x1c>
    b2ba:	602b      	str	r3, [r5, #0]
    b2bc:	bd38      	pop	{r3, r4, r5, pc}
    b2be:	46c0      	nop			; (mov r8, r8)
    b2c0:	200047c8 	.word	0x200047c8

0000b2c4 <__sccl>:
    b2c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    b2c6:	780a      	ldrb	r2, [r1, #0]
    b2c8:	2a5e      	cmp	r2, #94	; 0x5e
    b2ca:	d002      	beq.n	b2d2 <__sccl+0xe>
    b2cc:	1c4b      	adds	r3, r1, #1
    b2ce:	2400      	movs	r4, #0
    b2d0:	e002      	b.n	b2d8 <__sccl+0x14>
    b2d2:	2401      	movs	r4, #1
    b2d4:	784a      	ldrb	r2, [r1, #1]
    b2d6:	1c8b      	adds	r3, r1, #2
    b2d8:	1c01      	adds	r1, r0, #0
    b2da:	1c45      	adds	r5, r0, #1
    b2dc:	35ff      	adds	r5, #255	; 0xff
    b2de:	700c      	strb	r4, [r1, #0]
    b2e0:	3101      	adds	r1, #1
    b2e2:	42a9      	cmp	r1, r5
    b2e4:	d1fb      	bne.n	b2de <__sccl+0x1a>
    b2e6:	2a00      	cmp	r2, #0
    b2e8:	d101      	bne.n	b2ee <__sccl+0x2a>
    b2ea:	1e58      	subs	r0, r3, #1
    b2ec:	e01c      	b.n	b328 <__sccl+0x64>
    b2ee:	2101      	movs	r1, #1
    b2f0:	1b0c      	subs	r4, r1, r4
    b2f2:	b2e7      	uxtb	r7, r4
    b2f4:	5487      	strb	r7, [r0, r2]
    b2f6:	7819      	ldrb	r1, [r3, #0]
    b2f8:	1c5e      	adds	r6, r3, #1
    b2fa:	292d      	cmp	r1, #45	; 0x2d
    b2fc:	d006      	beq.n	b30c <__sccl+0x48>
    b2fe:	295d      	cmp	r1, #93	; 0x5d
    b300:	d00f      	beq.n	b322 <__sccl+0x5e>
    b302:	2900      	cmp	r1, #0
    b304:	d00f      	beq.n	b326 <__sccl+0x62>
    b306:	1c0a      	adds	r2, r1, #0
    b308:	1c33      	adds	r3, r6, #0
    b30a:	e7f2      	b.n	b2f2 <__sccl+0x2e>
    b30c:	785d      	ldrb	r5, [r3, #1]
    b30e:	2d5d      	cmp	r5, #93	; 0x5d
    b310:	d0f9      	beq.n	b306 <__sccl+0x42>
    b312:	4295      	cmp	r5, r2
    b314:	dbf7      	blt.n	b306 <__sccl+0x42>
    b316:	3302      	adds	r3, #2
    b318:	3201      	adds	r2, #1
    b31a:	5487      	strb	r7, [r0, r2]
    b31c:	42aa      	cmp	r2, r5
    b31e:	dbfb      	blt.n	b318 <__sccl+0x54>
    b320:	e7e9      	b.n	b2f6 <__sccl+0x32>
    b322:	1c30      	adds	r0, r6, #0
    b324:	e000      	b.n	b328 <__sccl+0x64>
    b326:	1c18      	adds	r0, r3, #0
    b328:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000b32a <setbuf>:
    b32a:	b508      	push	{r3, lr}
    b32c:	424a      	negs	r2, r1
    b32e:	414a      	adcs	r2, r1
    b330:	2380      	movs	r3, #128	; 0x80
    b332:	0052      	lsls	r2, r2, #1
    b334:	00db      	lsls	r3, r3, #3
    b336:	f000 f801 	bl	b33c <setvbuf>
    b33a:	bd08      	pop	{r3, pc}

0000b33c <setvbuf>:
    b33c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    b33e:	1c1e      	adds	r6, r3, #0
    b340:	4b3c      	ldr	r3, [pc, #240]	; (b434 <setvbuf+0xf8>)
    b342:	1c04      	adds	r4, r0, #0
    b344:	681d      	ldr	r5, [r3, #0]
    b346:	1c0f      	adds	r7, r1, #0
    b348:	9201      	str	r2, [sp, #4]
    b34a:	2d00      	cmp	r5, #0
    b34c:	d005      	beq.n	b35a <setvbuf+0x1e>
    b34e:	69ab      	ldr	r3, [r5, #24]
    b350:	2b00      	cmp	r3, #0
    b352:	d102      	bne.n	b35a <setvbuf+0x1e>
    b354:	1c28      	adds	r0, r5, #0
    b356:	f7fe fb51 	bl	99fc <__sinit>
    b35a:	4b37      	ldr	r3, [pc, #220]	; (b438 <setvbuf+0xfc>)
    b35c:	429c      	cmp	r4, r3
    b35e:	d101      	bne.n	b364 <setvbuf+0x28>
    b360:	686c      	ldr	r4, [r5, #4]
    b362:	e008      	b.n	b376 <setvbuf+0x3a>
    b364:	4b35      	ldr	r3, [pc, #212]	; (b43c <setvbuf+0x100>)
    b366:	429c      	cmp	r4, r3
    b368:	d101      	bne.n	b36e <setvbuf+0x32>
    b36a:	68ac      	ldr	r4, [r5, #8]
    b36c:	e003      	b.n	b376 <setvbuf+0x3a>
    b36e:	4b34      	ldr	r3, [pc, #208]	; (b440 <setvbuf+0x104>)
    b370:	429c      	cmp	r4, r3
    b372:	d100      	bne.n	b376 <setvbuf+0x3a>
    b374:	68ec      	ldr	r4, [r5, #12]
    b376:	9b01      	ldr	r3, [sp, #4]
    b378:	2b02      	cmp	r3, #2
    b37a:	d858      	bhi.n	b42e <setvbuf+0xf2>
    b37c:	2e00      	cmp	r6, #0
    b37e:	db56      	blt.n	b42e <setvbuf+0xf2>
    b380:	1c28      	adds	r0, r5, #0
    b382:	1c21      	adds	r1, r4, #0
    b384:	f7fe fab8 	bl	98f8 <_fflush_r>
    b388:	2300      	movs	r3, #0
    b38a:	6063      	str	r3, [r4, #4]
    b38c:	61a3      	str	r3, [r4, #24]
    b38e:	89a3      	ldrh	r3, [r4, #12]
    b390:	061b      	lsls	r3, r3, #24
    b392:	d503      	bpl.n	b39c <setvbuf+0x60>
    b394:	1c28      	adds	r0, r5, #0
    b396:	6921      	ldr	r1, [r4, #16]
    b398:	f7fe fd8a 	bl	9eb0 <_free_r>
    b39c:	2283      	movs	r2, #131	; 0x83
    b39e:	89a3      	ldrh	r3, [r4, #12]
    b3a0:	4393      	bics	r3, r2
    b3a2:	81a3      	strh	r3, [r4, #12]
    b3a4:	9b01      	ldr	r3, [sp, #4]
    b3a6:	2b02      	cmp	r3, #2
    b3a8:	d013      	beq.n	b3d2 <setvbuf+0x96>
    b3aa:	2f00      	cmp	r7, #0
    b3ac:	d125      	bne.n	b3fa <setvbuf+0xbe>
    b3ae:	2e00      	cmp	r6, #0
    b3b0:	d101      	bne.n	b3b6 <setvbuf+0x7a>
    b3b2:	2680      	movs	r6, #128	; 0x80
    b3b4:	00f6      	lsls	r6, r6, #3
    b3b6:	1c30      	adds	r0, r6, #0
    b3b8:	f7fe fd4a 	bl	9e50 <malloc>
    b3bc:	1e07      	subs	r7, r0, #0
    b3be:	d118      	bne.n	b3f2 <setvbuf+0xb6>
    b3c0:	2080      	movs	r0, #128	; 0x80
    b3c2:	00c0      	lsls	r0, r0, #3
    b3c4:	f7fe fd44 	bl	9e50 <malloc>
    b3c8:	1e07      	subs	r7, r0, #0
    b3ca:	d110      	bne.n	b3ee <setvbuf+0xb2>
    b3cc:	2001      	movs	r0, #1
    b3ce:	4240      	negs	r0, r0
    b3d0:	e000      	b.n	b3d4 <setvbuf+0x98>
    b3d2:	2000      	movs	r0, #0
    b3d4:	2202      	movs	r2, #2
    b3d6:	89a3      	ldrh	r3, [r4, #12]
    b3d8:	4313      	orrs	r3, r2
    b3da:	81a3      	strh	r3, [r4, #12]
    b3dc:	2300      	movs	r3, #0
    b3de:	60a3      	str	r3, [r4, #8]
    b3e0:	1c23      	adds	r3, r4, #0
    b3e2:	3347      	adds	r3, #71	; 0x47
    b3e4:	6023      	str	r3, [r4, #0]
    b3e6:	6123      	str	r3, [r4, #16]
    b3e8:	2301      	movs	r3, #1
    b3ea:	6163      	str	r3, [r4, #20]
    b3ec:	e021      	b.n	b432 <setvbuf+0xf6>
    b3ee:	2680      	movs	r6, #128	; 0x80
    b3f0:	00f6      	lsls	r6, r6, #3
    b3f2:	2280      	movs	r2, #128	; 0x80
    b3f4:	89a3      	ldrh	r3, [r4, #12]
    b3f6:	4313      	orrs	r3, r2
    b3f8:	81a3      	strh	r3, [r4, #12]
    b3fa:	9b01      	ldr	r3, [sp, #4]
    b3fc:	2b01      	cmp	r3, #1
    b3fe:	d105      	bne.n	b40c <setvbuf+0xd0>
    b400:	89a3      	ldrh	r3, [r4, #12]
    b402:	9a01      	ldr	r2, [sp, #4]
    b404:	431a      	orrs	r2, r3
    b406:	4273      	negs	r3, r6
    b408:	81a2      	strh	r2, [r4, #12]
    b40a:	61a3      	str	r3, [r4, #24]
    b40c:	4b0d      	ldr	r3, [pc, #52]	; (b444 <setvbuf+0x108>)
    b40e:	2000      	movs	r0, #0
    b410:	62ab      	str	r3, [r5, #40]	; 0x28
    b412:	89a2      	ldrh	r2, [r4, #12]
    b414:	6027      	str	r7, [r4, #0]
    b416:	6127      	str	r7, [r4, #16]
    b418:	6166      	str	r6, [r4, #20]
    b41a:	0713      	lsls	r3, r2, #28
    b41c:	d509      	bpl.n	b432 <setvbuf+0xf6>
    b41e:	2303      	movs	r3, #3
    b420:	401a      	ands	r2, r3
    b422:	4253      	negs	r3, r2
    b424:	4153      	adcs	r3, r2
    b426:	425b      	negs	r3, r3
    b428:	401e      	ands	r6, r3
    b42a:	60a6      	str	r6, [r4, #8]
    b42c:	e001      	b.n	b432 <setvbuf+0xf6>
    b42e:	2001      	movs	r0, #1
    b430:	4240      	negs	r0, r0
    b432:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    b434:	20000134 	.word	0x20000134
    b438:	0000f9e8 	.word	0x0000f9e8
    b43c:	0000fa08 	.word	0x0000fa08
    b440:	0000fa28 	.word	0x0000fa28
    b444:	00009979 	.word	0x00009979

0000b448 <nanf>:
    b448:	4800      	ldr	r0, [pc, #0]	; (b44c <nanf+0x4>)
    b44a:	4770      	bx	lr
    b44c:	7fc00000 	.word	0x7fc00000

0000b450 <siprintf>:
    b450:	b40e      	push	{r1, r2, r3}
    b452:	b510      	push	{r4, lr}
    b454:	b09d      	sub	sp, #116	; 0x74
    b456:	a902      	add	r1, sp, #8
    b458:	9002      	str	r0, [sp, #8]
    b45a:	6108      	str	r0, [r1, #16]
    b45c:	480b      	ldr	r0, [pc, #44]	; (b48c <siprintf+0x3c>)
    b45e:	2482      	movs	r4, #130	; 0x82
    b460:	6088      	str	r0, [r1, #8]
    b462:	6148      	str	r0, [r1, #20]
    b464:	2001      	movs	r0, #1
    b466:	4240      	negs	r0, r0
    b468:	ab1f      	add	r3, sp, #124	; 0x7c
    b46a:	81c8      	strh	r0, [r1, #14]
    b46c:	4808      	ldr	r0, [pc, #32]	; (b490 <siprintf+0x40>)
    b46e:	cb04      	ldmia	r3!, {r2}
    b470:	00a4      	lsls	r4, r4, #2
    b472:	6800      	ldr	r0, [r0, #0]
    b474:	9301      	str	r3, [sp, #4]
    b476:	818c      	strh	r4, [r1, #12]
    b478:	f003 f802 	bl	e480 <_svfiprintf_r>
    b47c:	2300      	movs	r3, #0
    b47e:	9a02      	ldr	r2, [sp, #8]
    b480:	7013      	strb	r3, [r2, #0]
    b482:	b01d      	add	sp, #116	; 0x74
    b484:	bc10      	pop	{r4}
    b486:	bc08      	pop	{r3}
    b488:	b003      	add	sp, #12
    b48a:	4718      	bx	r3
    b48c:	7fffffff 	.word	0x7fffffff
    b490:	20000134 	.word	0x20000134

0000b494 <siscanf>:
    b494:	b40e      	push	{r1, r2, r3}
    b496:	2381      	movs	r3, #129	; 0x81
    b498:	b570      	push	{r4, r5, r6, lr}
    b49a:	b09d      	sub	sp, #116	; 0x74
    b49c:	ac02      	add	r4, sp, #8
    b49e:	ad21      	add	r5, sp, #132	; 0x84
    b4a0:	009b      	lsls	r3, r3, #2
    b4a2:	cd40      	ldmia	r5!, {r6}
    b4a4:	81a3      	strh	r3, [r4, #12]
    b4a6:	9002      	str	r0, [sp, #8]
    b4a8:	9006      	str	r0, [sp, #24]
    b4aa:	f000 f873 	bl	b594 <strlen>
    b4ae:	4b0b      	ldr	r3, [pc, #44]	; (b4dc <siscanf+0x48>)
    b4b0:	6060      	str	r0, [r4, #4]
    b4b2:	6263      	str	r3, [r4, #36]	; 0x24
    b4b4:	2300      	movs	r3, #0
    b4b6:	6363      	str	r3, [r4, #52]	; 0x34
    b4b8:	64a3      	str	r3, [r4, #72]	; 0x48
    b4ba:	3b01      	subs	r3, #1
    b4bc:	81e3      	strh	r3, [r4, #14]
    b4be:	4b08      	ldr	r3, [pc, #32]	; (b4e0 <siscanf+0x4c>)
    b4c0:	6160      	str	r0, [r4, #20]
    b4c2:	1c21      	adds	r1, r4, #0
    b4c4:	6818      	ldr	r0, [r3, #0]
    b4c6:	1c32      	adds	r2, r6, #0
    b4c8:	1c2b      	adds	r3, r5, #0
    b4ca:	9501      	str	r5, [sp, #4]
    b4cc:	f003 f92a 	bl	e724 <__ssvfiscanf_r>
    b4d0:	b01d      	add	sp, #116	; 0x74
    b4d2:	bc70      	pop	{r4, r5, r6}
    b4d4:	bc08      	pop	{r3}
    b4d6:	b003      	add	sp, #12
    b4d8:	4718      	bx	r3
    b4da:	46c0      	nop			; (mov r8, r8)
    b4dc:	0000b50d 	.word	0x0000b50d
    b4e0:	20000134 	.word	0x20000134

0000b4e4 <__sread>:
    b4e4:	b538      	push	{r3, r4, r5, lr}
    b4e6:	1c0c      	adds	r4, r1, #0
    b4e8:	250e      	movs	r5, #14
    b4ea:	5f49      	ldrsh	r1, [r1, r5]
    b4ec:	f003 fa92 	bl	ea14 <_read_r>
    b4f0:	2800      	cmp	r0, #0
    b4f2:	db03      	blt.n	b4fc <__sread+0x18>
    b4f4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    b4f6:	181b      	adds	r3, r3, r0
    b4f8:	6563      	str	r3, [r4, #84]	; 0x54
    b4fa:	e003      	b.n	b504 <__sread+0x20>
    b4fc:	89a2      	ldrh	r2, [r4, #12]
    b4fe:	4b02      	ldr	r3, [pc, #8]	; (b508 <__sread+0x24>)
    b500:	4013      	ands	r3, r2
    b502:	81a3      	strh	r3, [r4, #12]
    b504:	bd38      	pop	{r3, r4, r5, pc}
    b506:	46c0      	nop			; (mov r8, r8)
    b508:	ffffefff 	.word	0xffffefff

0000b50c <__seofread>:
    b50c:	2000      	movs	r0, #0
    b50e:	4770      	bx	lr

0000b510 <__swrite>:
    b510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b512:	1c1e      	adds	r6, r3, #0
    b514:	898b      	ldrh	r3, [r1, #12]
    b516:	1c05      	adds	r5, r0, #0
    b518:	1c0c      	adds	r4, r1, #0
    b51a:	1c17      	adds	r7, r2, #0
    b51c:	05db      	lsls	r3, r3, #23
    b51e:	d505      	bpl.n	b52c <__swrite+0x1c>
    b520:	230e      	movs	r3, #14
    b522:	5ec9      	ldrsh	r1, [r1, r3]
    b524:	2200      	movs	r2, #0
    b526:	2302      	movs	r3, #2
    b528:	f002 faea 	bl	db00 <_lseek_r>
    b52c:	89a2      	ldrh	r2, [r4, #12]
    b52e:	4b05      	ldr	r3, [pc, #20]	; (b544 <__swrite+0x34>)
    b530:	1c28      	adds	r0, r5, #0
    b532:	4013      	ands	r3, r2
    b534:	81a3      	strh	r3, [r4, #12]
    b536:	1c3a      	adds	r2, r7, #0
    b538:	230e      	movs	r3, #14
    b53a:	5ee1      	ldrsh	r1, [r4, r3]
    b53c:	1c33      	adds	r3, r6, #0
    b53e:	f001 f845 	bl	c5cc <_write_r>
    b542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b544:	ffffefff 	.word	0xffffefff

0000b548 <__sseek>:
    b548:	b538      	push	{r3, r4, r5, lr}
    b54a:	1c0c      	adds	r4, r1, #0
    b54c:	250e      	movs	r5, #14
    b54e:	5f49      	ldrsh	r1, [r1, r5]
    b550:	f002 fad6 	bl	db00 <_lseek_r>
    b554:	89a3      	ldrh	r3, [r4, #12]
    b556:	1c42      	adds	r2, r0, #1
    b558:	d103      	bne.n	b562 <__sseek+0x1a>
    b55a:	4a05      	ldr	r2, [pc, #20]	; (b570 <__sseek+0x28>)
    b55c:	4013      	ands	r3, r2
    b55e:	81a3      	strh	r3, [r4, #12]
    b560:	e004      	b.n	b56c <__sseek+0x24>
    b562:	2280      	movs	r2, #128	; 0x80
    b564:	0152      	lsls	r2, r2, #5
    b566:	4313      	orrs	r3, r2
    b568:	81a3      	strh	r3, [r4, #12]
    b56a:	6560      	str	r0, [r4, #84]	; 0x54
    b56c:	bd38      	pop	{r3, r4, r5, pc}
    b56e:	46c0      	nop			; (mov r8, r8)
    b570:	ffffefff 	.word	0xffffefff

0000b574 <__sclose>:
    b574:	b508      	push	{r3, lr}
    b576:	230e      	movs	r3, #14
    b578:	5ec9      	ldrsh	r1, [r1, r3]
    b57a:	f001 f8af 	bl	c6dc <_close_r>
    b57e:	bd08      	pop	{r3, pc}

0000b580 <strcmp>:
    b580:	7802      	ldrb	r2, [r0, #0]
    b582:	780b      	ldrb	r3, [r1, #0]
    b584:	2a00      	cmp	r2, #0
    b586:	d003      	beq.n	b590 <strcmp+0x10>
    b588:	3001      	adds	r0, #1
    b58a:	3101      	adds	r1, #1
    b58c:	429a      	cmp	r2, r3
    b58e:	d0f7      	beq.n	b580 <strcmp>
    b590:	1ad0      	subs	r0, r2, r3
    b592:	4770      	bx	lr

0000b594 <strlen>:
    b594:	2300      	movs	r3, #0
    b596:	5cc2      	ldrb	r2, [r0, r3]
    b598:	3301      	adds	r3, #1
    b59a:	2a00      	cmp	r2, #0
    b59c:	d1fb      	bne.n	b596 <strlen+0x2>
    b59e:	1e58      	subs	r0, r3, #1
    b5a0:	4770      	bx	lr

0000b5a2 <strncmp>:
    b5a2:	2300      	movs	r3, #0
    b5a4:	b530      	push	{r4, r5, lr}
    b5a6:	429a      	cmp	r2, r3
    b5a8:	d00d      	beq.n	b5c6 <strncmp+0x24>
    b5aa:	3a01      	subs	r2, #1
    b5ac:	5cc4      	ldrb	r4, [r0, r3]
    b5ae:	5ccd      	ldrb	r5, [r1, r3]
    b5b0:	42ac      	cmp	r4, r5
    b5b2:	d102      	bne.n	b5ba <strncmp+0x18>
    b5b4:	4293      	cmp	r3, r2
    b5b6:	d102      	bne.n	b5be <strncmp+0x1c>
    b5b8:	1c25      	adds	r5, r4, #0
    b5ba:	1b63      	subs	r3, r4, r5
    b5bc:	e003      	b.n	b5c6 <strncmp+0x24>
    b5be:	3301      	adds	r3, #1
    b5c0:	2c00      	cmp	r4, #0
    b5c2:	d1f3      	bne.n	b5ac <strncmp+0xa>
    b5c4:	e7f8      	b.n	b5b8 <strncmp+0x16>
    b5c6:	1c18      	adds	r0, r3, #0
    b5c8:	bd30      	pop	{r4, r5, pc}

0000b5ca <strncpy>:
    b5ca:	1c03      	adds	r3, r0, #0
    b5cc:	b530      	push	{r4, r5, lr}
    b5ce:	2a00      	cmp	r2, #0
    b5d0:	d007      	beq.n	b5e2 <strncpy+0x18>
    b5d2:	780c      	ldrb	r4, [r1, #0]
    b5d4:	3301      	adds	r3, #1
    b5d6:	1e5d      	subs	r5, r3, #1
    b5d8:	3a01      	subs	r2, #1
    b5da:	702c      	strb	r4, [r5, #0]
    b5dc:	3101      	adds	r1, #1
    b5de:	2c00      	cmp	r4, #0
    b5e0:	d1f5      	bne.n	b5ce <strncpy+0x4>
    b5e2:	189a      	adds	r2, r3, r2
    b5e4:	4293      	cmp	r3, r2
    b5e6:	d003      	beq.n	b5f0 <strncpy+0x26>
    b5e8:	2100      	movs	r1, #0
    b5ea:	7019      	strb	r1, [r3, #0]
    b5ec:	3301      	adds	r3, #1
    b5ee:	e7f9      	b.n	b5e4 <strncpy+0x1a>
    b5f0:	bd30      	pop	{r4, r5, pc}

0000b5f2 <match>:
    b5f2:	b530      	push	{r4, r5, lr}
    b5f4:	6803      	ldr	r3, [r0, #0]
    b5f6:	780c      	ldrb	r4, [r1, #0]
    b5f8:	3301      	adds	r3, #1
    b5fa:	2c00      	cmp	r4, #0
    b5fc:	d00a      	beq.n	b614 <match+0x22>
    b5fe:	781a      	ldrb	r2, [r3, #0]
    b600:	1c15      	adds	r5, r2, #0
    b602:	3d41      	subs	r5, #65	; 0x41
    b604:	2d19      	cmp	r5, #25
    b606:	d800      	bhi.n	b60a <match+0x18>
    b608:	3220      	adds	r2, #32
    b60a:	3101      	adds	r1, #1
    b60c:	42a2      	cmp	r2, r4
    b60e:	d0f2      	beq.n	b5f6 <match+0x4>
    b610:	2000      	movs	r0, #0
    b612:	e001      	b.n	b618 <match+0x26>
    b614:	6003      	str	r3, [r0, #0]
    b616:	2001      	movs	r0, #1
    b618:	bd30      	pop	{r4, r5, pc}
	...

0000b61c <sulp>:
    b61c:	b570      	push	{r4, r5, r6, lr}
    b61e:	1c16      	adds	r6, r2, #0
    b620:	1c0d      	adds	r5, r1, #0
    b622:	f002 fd6d 	bl	e100 <__ulp>
    b626:	2e00      	cmp	r6, #0
    b628:	d00b      	beq.n	b642 <sulp+0x26>
    b62a:	226b      	movs	r2, #107	; 0x6b
    b62c:	006b      	lsls	r3, r5, #1
    b62e:	0d5b      	lsrs	r3, r3, #21
    b630:	1ad3      	subs	r3, r2, r3
    b632:	2b00      	cmp	r3, #0
    b634:	dd05      	ble.n	b642 <sulp+0x26>
    b636:	4d03      	ldr	r5, [pc, #12]	; (b644 <sulp+0x28>)
    b638:	051c      	lsls	r4, r3, #20
    b63a:	2200      	movs	r2, #0
    b63c:	1963      	adds	r3, r4, r5
    b63e:	f7fd f88b 	bl	8758 <__aeabi_dmul>
    b642:	bd70      	pop	{r4, r5, r6, pc}
    b644:	3ff00000 	.word	0x3ff00000

0000b648 <_strtod_r>:
    b648:	2300      	movs	r3, #0
    b64a:	b5f0      	push	{r4, r5, r6, r7, lr}
    b64c:	b0a3      	sub	sp, #140	; 0x8c
    b64e:	931e      	str	r3, [sp, #120]	; 0x78
    b650:	2600      	movs	r6, #0
    b652:	2700      	movs	r7, #0
    b654:	1c0b      	adds	r3, r1, #0
    b656:	9003      	str	r0, [sp, #12]
    b658:	9106      	str	r1, [sp, #24]
    b65a:	9219      	str	r2, [sp, #100]	; 0x64
    b65c:	931d      	str	r3, [sp, #116]	; 0x74
    b65e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b660:	781a      	ldrb	r2, [r3, #0]
    b662:	2a0d      	cmp	r2, #13
    b664:	d805      	bhi.n	b672 <_strtod_r+0x2a>
    b666:	2a09      	cmp	r2, #9
    b668:	d214      	bcs.n	b694 <_strtod_r+0x4c>
    b66a:	2a00      	cmp	r2, #0
    b66c:	d100      	bne.n	b670 <_strtod_r+0x28>
    b66e:	e1c3      	b.n	b9f8 <_strtod_r+0x3b0>
    b670:	e012      	b.n	b698 <_strtod_r+0x50>
    b672:	2a2b      	cmp	r2, #43	; 0x2b
    b674:	d006      	beq.n	b684 <_strtod_r+0x3c>
    b676:	2a2d      	cmp	r2, #45	; 0x2d
    b678:	d002      	beq.n	b680 <_strtod_r+0x38>
    b67a:	2a20      	cmp	r2, #32
    b67c:	d10c      	bne.n	b698 <_strtod_r+0x50>
    b67e:	e009      	b.n	b694 <_strtod_r+0x4c>
    b680:	2201      	movs	r2, #1
    b682:	e000      	b.n	b686 <_strtod_r+0x3e>
    b684:	2200      	movs	r2, #0
    b686:	920d      	str	r2, [sp, #52]	; 0x34
    b688:	1c5a      	adds	r2, r3, #1
    b68a:	921d      	str	r2, [sp, #116]	; 0x74
    b68c:	785b      	ldrb	r3, [r3, #1]
    b68e:	2b00      	cmp	r3, #0
    b690:	d104      	bne.n	b69c <_strtod_r+0x54>
    b692:	e1b1      	b.n	b9f8 <_strtod_r+0x3b0>
    b694:	3301      	adds	r3, #1
    b696:	e7e1      	b.n	b65c <_strtod_r+0x14>
    b698:	2300      	movs	r3, #0
    b69a:	930d      	str	r3, [sp, #52]	; 0x34
    b69c:	2200      	movs	r2, #0
    b69e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
    b6a0:	920a      	str	r2, [sp, #40]	; 0x28
    b6a2:	782b      	ldrb	r3, [r5, #0]
    b6a4:	2b30      	cmp	r3, #48	; 0x30
    b6a6:	d15d      	bne.n	b764 <_strtod_r+0x11c>
    b6a8:	786b      	ldrb	r3, [r5, #1]
    b6aa:	2b58      	cmp	r3, #88	; 0x58
    b6ac:	d001      	beq.n	b6b2 <_strtod_r+0x6a>
    b6ae:	2b78      	cmp	r3, #120	; 0x78
    b6b0:	d14c      	bne.n	b74c <_strtod_r+0x104>
    b6b2:	ab1e      	add	r3, sp, #120	; 0x78
    b6b4:	9300      	str	r3, [sp, #0]
    b6b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b6b8:	9803      	ldr	r0, [sp, #12]
    b6ba:	9301      	str	r3, [sp, #4]
    b6bc:	a91d      	add	r1, sp, #116	; 0x74
    b6be:	4ac2      	ldr	r2, [pc, #776]	; (b9c8 <_strtod_r+0x380>)
    b6c0:	ab1f      	add	r3, sp, #124	; 0x7c
    b6c2:	f001 ff38 	bl	d536 <__gethex>
    b6c6:	2407      	movs	r4, #7
    b6c8:	9004      	str	r0, [sp, #16]
    b6ca:	4004      	ands	r4, r0
    b6cc:	d101      	bne.n	b6d2 <_strtod_r+0x8a>
    b6ce:	f000 fda7 	bl	c220 <_strtod_r+0xbd8>
    b6d2:	2c06      	cmp	r4, #6
    b6d4:	d105      	bne.n	b6e2 <_strtod_r+0x9a>
    b6d6:	2300      	movs	r3, #0
    b6d8:	3501      	adds	r5, #1
    b6da:	951d      	str	r5, [sp, #116]	; 0x74
    b6dc:	930d      	str	r3, [sp, #52]	; 0x34
    b6de:	f000 fd9f 	bl	c220 <_strtod_r+0xbd8>
    b6e2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    b6e4:	2a00      	cmp	r2, #0
    b6e6:	d007      	beq.n	b6f8 <_strtod_r+0xb0>
    b6e8:	a820      	add	r0, sp, #128	; 0x80
    b6ea:	2135      	movs	r1, #53	; 0x35
    b6ec:	f002 fdfc 	bl	e2e8 <__copybits>
    b6f0:	9803      	ldr	r0, [sp, #12]
    b6f2:	991e      	ldr	r1, [sp, #120]	; 0x78
    b6f4:	f002 fa64 	bl	dbc0 <_Bfree>
    b6f8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    b6fa:	2c06      	cmp	r4, #6
    b6fc:	d81c      	bhi.n	b738 <_strtod_r+0xf0>
    b6fe:	1c20      	adds	r0, r4, #0
    b700:	f003 f9a8 	bl	ea54 <__gnu_thumb1_case_uqi>
    b704:	14070a04 	.word	0x14070a04
    b708:	0a17      	.short	0x0a17
    b70a:	04          	.byte	0x04
    b70b:	00          	.byte	0x00
    b70c:	2700      	movs	r7, #0
    b70e:	1c3e      	adds	r6, r7, #0
    b710:	e012      	b.n	b738 <_strtod_r+0xf0>
    b712:	9e20      	ldr	r6, [sp, #128]	; 0x80
    b714:	9f21      	ldr	r7, [sp, #132]	; 0x84
    b716:	e00f      	b.n	b738 <_strtod_r+0xf0>
    b718:	4aac      	ldr	r2, [pc, #688]	; (b9cc <_strtod_r+0x384>)
    b71a:	9921      	ldr	r1, [sp, #132]	; 0x84
    b71c:	189b      	adds	r3, r3, r2
    b71e:	4aac      	ldr	r2, [pc, #688]	; (b9d0 <_strtod_r+0x388>)
    b720:	051b      	lsls	r3, r3, #20
    b722:	400a      	ands	r2, r1
    b724:	4313      	orrs	r3, r2
    b726:	9e20      	ldr	r6, [sp, #128]	; 0x80
    b728:	1c1f      	adds	r7, r3, #0
    b72a:	e005      	b.n	b738 <_strtod_r+0xf0>
    b72c:	4fa9      	ldr	r7, [pc, #676]	; (b9d4 <_strtod_r+0x38c>)
    b72e:	2600      	movs	r6, #0
    b730:	e002      	b.n	b738 <_strtod_r+0xf0>
    b732:	2601      	movs	r6, #1
    b734:	4fa8      	ldr	r7, [pc, #672]	; (b9d8 <_strtod_r+0x390>)
    b736:	4276      	negs	r6, r6
    b738:	9b04      	ldr	r3, [sp, #16]
    b73a:	071b      	lsls	r3, r3, #28
    b73c:	d401      	bmi.n	b742 <_strtod_r+0xfa>
    b73e:	f000 fd6f 	bl	c220 <_strtod_r+0xbd8>
    b742:	2380      	movs	r3, #128	; 0x80
    b744:	061b      	lsls	r3, r3, #24
    b746:	431f      	orrs	r7, r3
    b748:	f000 fd6a 	bl	c220 <_strtod_r+0xbd8>
    b74c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b74e:	1c5a      	adds	r2, r3, #1
    b750:	921d      	str	r2, [sp, #116]	; 0x74
    b752:	785b      	ldrb	r3, [r3, #1]
    b754:	2b30      	cmp	r3, #48	; 0x30
    b756:	d0f9      	beq.n	b74c <_strtod_r+0x104>
    b758:	2b00      	cmp	r3, #0
    b75a:	d101      	bne.n	b760 <_strtod_r+0x118>
    b75c:	f000 fd60 	bl	c220 <_strtod_r+0xbd8>
    b760:	2301      	movs	r3, #1
    b762:	930a      	str	r3, [sp, #40]	; 0x28
    b764:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b766:	930c      	str	r3, [sp, #48]	; 0x30
    b768:	2300      	movs	r3, #0
    b76a:	9305      	str	r3, [sp, #20]
    b76c:	9307      	str	r3, [sp, #28]
    b76e:	9304      	str	r3, [sp, #16]
    b770:	9c1d      	ldr	r4, [sp, #116]	; 0x74
    b772:	7823      	ldrb	r3, [r4, #0]
    b774:	1c1a      	adds	r2, r3, #0
    b776:	3a30      	subs	r2, #48	; 0x30
    b778:	9308      	str	r3, [sp, #32]
    b77a:	b2d3      	uxtb	r3, r2
    b77c:	2b09      	cmp	r3, #9
    b77e:	d812      	bhi.n	b7a6 <_strtod_r+0x15e>
    b780:	9904      	ldr	r1, [sp, #16]
    b782:	230a      	movs	r3, #10
    b784:	2908      	cmp	r1, #8
    b786:	dc04      	bgt.n	b792 <_strtod_r+0x14a>
    b788:	9907      	ldr	r1, [sp, #28]
    b78a:	434b      	muls	r3, r1
    b78c:	18d3      	adds	r3, r2, r3
    b78e:	9307      	str	r3, [sp, #28]
    b790:	e003      	b.n	b79a <_strtod_r+0x152>
    b792:	9905      	ldr	r1, [sp, #20]
    b794:	434b      	muls	r3, r1
    b796:	18d3      	adds	r3, r2, r3
    b798:	9305      	str	r3, [sp, #20]
    b79a:	9b04      	ldr	r3, [sp, #16]
    b79c:	3401      	adds	r4, #1
    b79e:	3301      	adds	r3, #1
    b7a0:	9304      	str	r3, [sp, #16]
    b7a2:	941d      	str	r4, [sp, #116]	; 0x74
    b7a4:	e7e4      	b.n	b770 <_strtod_r+0x128>
    b7a6:	9803      	ldr	r0, [sp, #12]
    b7a8:	f002 f9a6 	bl	daf8 <_localeconv_r>
    b7ac:	6805      	ldr	r5, [r0, #0]
    b7ae:	9803      	ldr	r0, [sp, #12]
    b7b0:	f002 f9a2 	bl	daf8 <_localeconv_r>
    b7b4:	6800      	ldr	r0, [r0, #0]
    b7b6:	f7ff feed 	bl	b594 <strlen>
    b7ba:	1c29      	adds	r1, r5, #0
    b7bc:	1c02      	adds	r2, r0, #0
    b7be:	1c20      	adds	r0, r4, #0
    b7c0:	f7ff feef 	bl	b5a2 <strncmp>
    b7c4:	1e05      	subs	r5, r0, #0
    b7c6:	d005      	beq.n	b7d4 <_strtod_r+0x18c>
    b7c8:	2000      	movs	r0, #0
    b7ca:	9b08      	ldr	r3, [sp, #32]
    b7cc:	9c04      	ldr	r4, [sp, #16]
    b7ce:	1c01      	adds	r1, r0, #0
    b7d0:	9008      	str	r0, [sp, #32]
    b7d2:	e05a      	b.n	b88a <_strtod_r+0x242>
    b7d4:	9803      	ldr	r0, [sp, #12]
    b7d6:	f002 f98f 	bl	daf8 <_localeconv_r>
    b7da:	6800      	ldr	r0, [r0, #0]
    b7dc:	f7ff feda 	bl	b594 <strlen>
    b7e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b7e2:	9a04      	ldr	r2, [sp, #16]
    b7e4:	1818      	adds	r0, r3, r0
    b7e6:	901d      	str	r0, [sp, #116]	; 0x74
    b7e8:	7803      	ldrb	r3, [r0, #0]
    b7ea:	1e10      	subs	r0, r2, #0
    b7ec:	d141      	bne.n	b872 <_strtod_r+0x22a>
    b7ee:	2b30      	cmp	r3, #48	; 0x30
    b7f0:	d105      	bne.n	b7fe <_strtod_r+0x1b6>
    b7f2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b7f4:	3001      	adds	r0, #1
    b7f6:	1c5a      	adds	r2, r3, #1
    b7f8:	921d      	str	r2, [sp, #116]	; 0x74
    b7fa:	785b      	ldrb	r3, [r3, #1]
    b7fc:	e7f7      	b.n	b7ee <_strtod_r+0x1a6>
    b7fe:	1c1a      	adds	r2, r3, #0
    b800:	3a31      	subs	r2, #49	; 0x31
    b802:	2a08      	cmp	r2, #8
    b804:	d83d      	bhi.n	b882 <_strtod_r+0x23a>
    b806:	1c01      	adds	r1, r0, #0
    b808:	2000      	movs	r0, #0
    b80a:	1c04      	adds	r4, r0, #0
    b80c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    b80e:	920c      	str	r2, [sp, #48]	; 0x30
    b810:	3b30      	subs	r3, #48	; 0x30
    b812:	1c42      	adds	r2, r0, #1
    b814:	2b00      	cmp	r3, #0
    b816:	d026      	beq.n	b866 <_strtod_r+0x21e>
    b818:	1889      	adds	r1, r1, r2
    b81a:	1c22      	adds	r2, r4, #0
    b81c:	1900      	adds	r0, r0, r4
    b81e:	4282      	cmp	r2, r0
    b820:	d00f      	beq.n	b842 <_strtod_r+0x1fa>
    b822:	3201      	adds	r2, #1
    b824:	1e54      	subs	r4, r2, #1
    b826:	2c08      	cmp	r4, #8
    b828:	dc04      	bgt.n	b834 <_strtod_r+0x1ec>
    b82a:	240a      	movs	r4, #10
    b82c:	9d07      	ldr	r5, [sp, #28]
    b82e:	4365      	muls	r5, r4
    b830:	9507      	str	r5, [sp, #28]
    b832:	e7f4      	b.n	b81e <_strtod_r+0x1d6>
    b834:	2a10      	cmp	r2, #16
    b836:	dcf2      	bgt.n	b81e <_strtod_r+0x1d6>
    b838:	240a      	movs	r4, #10
    b83a:	9d05      	ldr	r5, [sp, #20]
    b83c:	4365      	muls	r5, r4
    b83e:	9505      	str	r5, [sp, #20]
    b840:	e7ed      	b.n	b81e <_strtod_r+0x1d6>
    b842:	1c54      	adds	r4, r2, #1
    b844:	2a08      	cmp	r2, #8
    b846:	dc06      	bgt.n	b856 <_strtod_r+0x20e>
    b848:	220a      	movs	r2, #10
    b84a:	9807      	ldr	r0, [sp, #28]
    b84c:	4342      	muls	r2, r0
    b84e:	18d3      	adds	r3, r2, r3
    b850:	9307      	str	r3, [sp, #28]
    b852:	2200      	movs	r2, #0
    b854:	e007      	b.n	b866 <_strtod_r+0x21e>
    b856:	2200      	movs	r2, #0
    b858:	2c10      	cmp	r4, #16
    b85a:	dc04      	bgt.n	b866 <_strtod_r+0x21e>
    b85c:	200a      	movs	r0, #10
    b85e:	9d05      	ldr	r5, [sp, #20]
    b860:	4368      	muls	r0, r5
    b862:	18c3      	adds	r3, r0, r3
    b864:	9305      	str	r3, [sp, #20]
    b866:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b868:	1c58      	adds	r0, r3, #1
    b86a:	901d      	str	r0, [sp, #116]	; 0x74
    b86c:	785b      	ldrb	r3, [r3, #1]
    b86e:	1c10      	adds	r0, r2, #0
    b870:	e002      	b.n	b878 <_strtod_r+0x230>
    b872:	1c28      	adds	r0, r5, #0
    b874:	1c29      	adds	r1, r5, #0
    b876:	9c04      	ldr	r4, [sp, #16]
    b878:	1c1a      	adds	r2, r3, #0
    b87a:	3a30      	subs	r2, #48	; 0x30
    b87c:	2a09      	cmp	r2, #9
    b87e:	d9c7      	bls.n	b810 <_strtod_r+0x1c8>
    b880:	e001      	b.n	b886 <_strtod_r+0x23e>
    b882:	2400      	movs	r4, #0
    b884:	1c21      	adds	r1, r4, #0
    b886:	2201      	movs	r2, #1
    b888:	9208      	str	r2, [sp, #32]
    b88a:	2220      	movs	r2, #32
    b88c:	1c1d      	adds	r5, r3, #0
    b88e:	4395      	bics	r5, r2
    b890:	2200      	movs	r2, #0
    b892:	2d45      	cmp	r5, #69	; 0x45
    b894:	d157      	bne.n	b946 <_strtod_r+0x2fe>
    b896:	1c23      	adds	r3, r4, #0
    b898:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    b89a:	4303      	orrs	r3, r0
    b89c:	432b      	orrs	r3, r5
    b89e:	4293      	cmp	r3, r2
    b8a0:	d100      	bne.n	b8a4 <_strtod_r+0x25c>
    b8a2:	e0a9      	b.n	b9f8 <_strtod_r+0x3b0>
    b8a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b8a6:	9306      	str	r3, [sp, #24]
    b8a8:	3301      	adds	r3, #1
    b8aa:	931d      	str	r3, [sp, #116]	; 0x74
    b8ac:	9b06      	ldr	r3, [sp, #24]
    b8ae:	785b      	ldrb	r3, [r3, #1]
    b8b0:	2b2b      	cmp	r3, #43	; 0x2b
    b8b2:	d006      	beq.n	b8c2 <_strtod_r+0x27a>
    b8b4:	2b2d      	cmp	r3, #45	; 0x2d
    b8b6:	d001      	beq.n	b8bc <_strtod_r+0x274>
    b8b8:	9209      	str	r2, [sp, #36]	; 0x24
    b8ba:	e008      	b.n	b8ce <_strtod_r+0x286>
    b8bc:	2301      	movs	r3, #1
    b8be:	9309      	str	r3, [sp, #36]	; 0x24
    b8c0:	e000      	b.n	b8c4 <_strtod_r+0x27c>
    b8c2:	9209      	str	r2, [sp, #36]	; 0x24
    b8c4:	9b06      	ldr	r3, [sp, #24]
    b8c6:	3302      	adds	r3, #2
    b8c8:	931d      	str	r3, [sp, #116]	; 0x74
    b8ca:	9b06      	ldr	r3, [sp, #24]
    b8cc:	789b      	ldrb	r3, [r3, #2]
    b8ce:	1c1a      	adds	r2, r3, #0
    b8d0:	3a30      	subs	r2, #48	; 0x30
    b8d2:	2a09      	cmp	r2, #9
    b8d4:	d834      	bhi.n	b940 <_strtod_r+0x2f8>
    b8d6:	2b30      	cmp	r3, #48	; 0x30
    b8d8:	d104      	bne.n	b8e4 <_strtod_r+0x29c>
    b8da:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b8dc:	1c5a      	adds	r2, r3, #1
    b8de:	921d      	str	r2, [sp, #116]	; 0x74
    b8e0:	785b      	ldrb	r3, [r3, #1]
    b8e2:	e7f8      	b.n	b8d6 <_strtod_r+0x28e>
    b8e4:	2531      	movs	r5, #49	; 0x31
    b8e6:	426d      	negs	r5, r5
    b8e8:	46ac      	mov	ip, r5
    b8ea:	449c      	add	ip, r3
    b8ec:	4665      	mov	r5, ip
    b8ee:	2200      	movs	r2, #0
    b8f0:	2d08      	cmp	r5, #8
    b8f2:	d828      	bhi.n	b946 <_strtod_r+0x2fe>
    b8f4:	3b30      	subs	r3, #48	; 0x30
    b8f6:	930b      	str	r3, [sp, #44]	; 0x2c
    b8f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b8fa:	930e      	str	r3, [sp, #56]	; 0x38
    b8fc:	2530      	movs	r5, #48	; 0x30
    b8fe:	426d      	negs	r5, r5
    b900:	46ac      	mov	ip, r5
    b902:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b904:	1c5a      	adds	r2, r3, #1
    b906:	921d      	str	r2, [sp, #116]	; 0x74
    b908:	785b      	ldrb	r3, [r3, #1]
    b90a:	449c      	add	ip, r3
    b90c:	4665      	mov	r5, ip
    b90e:	2d09      	cmp	r5, #9
    b910:	d806      	bhi.n	b920 <_strtod_r+0x2d8>
    b912:	220a      	movs	r2, #10
    b914:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    b916:	436a      	muls	r2, r5
    b918:	18d3      	adds	r3, r2, r3
    b91a:	3b30      	subs	r3, #48	; 0x30
    b91c:	930b      	str	r3, [sp, #44]	; 0x2c
    b91e:	e7ed      	b.n	b8fc <_strtod_r+0x2b4>
    b920:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    b922:	1b52      	subs	r2, r2, r5
    b924:	1e15      	subs	r5, r2, #0
    b926:	4a2d      	ldr	r2, [pc, #180]	; (b9dc <_strtod_r+0x394>)
    b928:	4694      	mov	ip, r2
    b92a:	2d08      	cmp	r5, #8
    b92c:	dc03      	bgt.n	b936 <_strtod_r+0x2ee>
    b92e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b930:	4562      	cmp	r2, ip
    b932:	dd00      	ble.n	b936 <_strtod_r+0x2ee>
    b934:	4662      	mov	r2, ip
    b936:	9d09      	ldr	r5, [sp, #36]	; 0x24
    b938:	2d00      	cmp	r5, #0
    b93a:	d004      	beq.n	b946 <_strtod_r+0x2fe>
    b93c:	4252      	negs	r2, r2
    b93e:	e002      	b.n	b946 <_strtod_r+0x2fe>
    b940:	9a06      	ldr	r2, [sp, #24]
    b942:	921d      	str	r2, [sp, #116]	; 0x74
    b944:	2200      	movs	r2, #0
    b946:	2c00      	cmp	r4, #0
    b948:	d161      	bne.n	ba0e <_strtod_r+0x3c6>
    b94a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b94c:	4310      	orrs	r0, r2
    b94e:	d001      	beq.n	b954 <_strtod_r+0x30c>
    b950:	f000 fc66 	bl	c220 <_strtod_r+0xbd8>
    b954:	9a08      	ldr	r2, [sp, #32]
    b956:	2a00      	cmp	r2, #0
    b958:	d14e      	bne.n	b9f8 <_strtod_r+0x3b0>
    b95a:	2b4e      	cmp	r3, #78	; 0x4e
    b95c:	d01c      	beq.n	b998 <_strtod_r+0x350>
    b95e:	dc02      	bgt.n	b966 <_strtod_r+0x31e>
    b960:	2b49      	cmp	r3, #73	; 0x49
    b962:	d005      	beq.n	b970 <_strtod_r+0x328>
    b964:	e048      	b.n	b9f8 <_strtod_r+0x3b0>
    b966:	2b69      	cmp	r3, #105	; 0x69
    b968:	d002      	beq.n	b970 <_strtod_r+0x328>
    b96a:	2b6e      	cmp	r3, #110	; 0x6e
    b96c:	d014      	beq.n	b998 <_strtod_r+0x350>
    b96e:	e043      	b.n	b9f8 <_strtod_r+0x3b0>
    b970:	a81d      	add	r0, sp, #116	; 0x74
    b972:	491b      	ldr	r1, [pc, #108]	; (b9e0 <_strtod_r+0x398>)
    b974:	f7ff fe3d 	bl	b5f2 <match>
    b978:	2800      	cmp	r0, #0
    b97a:	d03d      	beq.n	b9f8 <_strtod_r+0x3b0>
    b97c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b97e:	a81d      	add	r0, sp, #116	; 0x74
    b980:	3b01      	subs	r3, #1
    b982:	4918      	ldr	r1, [pc, #96]	; (b9e4 <_strtod_r+0x39c>)
    b984:	931d      	str	r3, [sp, #116]	; 0x74
    b986:	f7ff fe34 	bl	b5f2 <match>
    b98a:	2800      	cmp	r0, #0
    b98c:	d102      	bne.n	b994 <_strtod_r+0x34c>
    b98e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b990:	3301      	adds	r3, #1
    b992:	931d      	str	r3, [sp, #116]	; 0x74
    b994:	4f0f      	ldr	r7, [pc, #60]	; (b9d4 <_strtod_r+0x38c>)
    b996:	e02c      	b.n	b9f2 <_strtod_r+0x3aa>
    b998:	a81d      	add	r0, sp, #116	; 0x74
    b99a:	4913      	ldr	r1, [pc, #76]	; (b9e8 <_strtod_r+0x3a0>)
    b99c:	f7ff fe29 	bl	b5f2 <match>
    b9a0:	2800      	cmp	r0, #0
    b9a2:	d029      	beq.n	b9f8 <_strtod_r+0x3b0>
    b9a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b9a6:	781b      	ldrb	r3, [r3, #0]
    b9a8:	2b28      	cmp	r3, #40	; 0x28
    b9aa:	d121      	bne.n	b9f0 <_strtod_r+0x3a8>
    b9ac:	a81d      	add	r0, sp, #116	; 0x74
    b9ae:	490f      	ldr	r1, [pc, #60]	; (b9ec <_strtod_r+0x3a4>)
    b9b0:	aa20      	add	r2, sp, #128	; 0x80
    b9b2:	f001 fff6 	bl	d9a2 <__hexnan>
    b9b6:	2805      	cmp	r0, #5
    b9b8:	d11a      	bne.n	b9f0 <_strtod_r+0x3a8>
    b9ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
    b9bc:	4a05      	ldr	r2, [pc, #20]	; (b9d4 <_strtod_r+0x38c>)
    b9be:	9e20      	ldr	r6, [sp, #128]	; 0x80
    b9c0:	431a      	orrs	r2, r3
    b9c2:	1c17      	adds	r7, r2, #0
    b9c4:	f000 fc2c 	bl	c220 <_strtod_r+0xbd8>
    b9c8:	0000fb00 	.word	0x0000fb00
    b9cc:	00000433 	.word	0x00000433
    b9d0:	ffefffff 	.word	0xffefffff
    b9d4:	7ff00000 	.word	0x7ff00000
    b9d8:	7fffffff 	.word	0x7fffffff
    b9dc:	00004e1f 	.word	0x00004e1f
    b9e0:	0000fa66 	.word	0x0000fa66
    b9e4:	0000fc18 	.word	0x0000fc18
    b9e8:	0000fa6e 	.word	0x0000fa6e
    b9ec:	0000fac0 	.word	0x0000fac0
    b9f0:	4f92      	ldr	r7, [pc, #584]	; (bc3c <_strtod_r+0x5f4>)
    b9f2:	2600      	movs	r6, #0
    b9f4:	f000 fc14 	bl	c220 <_strtod_r+0xbd8>
    b9f8:	9b06      	ldr	r3, [sp, #24]
    b9fa:	931d      	str	r3, [sp, #116]	; 0x74
    b9fc:	2300      	movs	r3, #0
    b9fe:	930d      	str	r3, [sp, #52]	; 0x34
    ba00:	9b19      	ldr	r3, [sp, #100]	; 0x64
    ba02:	2b00      	cmp	r3, #0
    ba04:	d001      	beq.n	ba0a <_strtod_r+0x3c2>
    ba06:	f000 fc0e 	bl	c226 <_strtod_r+0xbde>
    ba0a:	f000 fc17 	bl	c23c <_strtod_r+0xbf4>
    ba0e:	1a53      	subs	r3, r2, r1
    ba10:	9309      	str	r3, [sp, #36]	; 0x24
    ba12:	9b04      	ldr	r3, [sp, #16]
    ba14:	2b00      	cmp	r3, #0
    ba16:	d100      	bne.n	ba1a <_strtod_r+0x3d2>
    ba18:	9404      	str	r4, [sp, #16]
    ba1a:	1e25      	subs	r5, r4, #0
    ba1c:	2d10      	cmp	r5, #16
    ba1e:	dd00      	ble.n	ba22 <_strtod_r+0x3da>
    ba20:	2510      	movs	r5, #16
    ba22:	9807      	ldr	r0, [sp, #28]
    ba24:	f7fd fd1e 	bl	9464 <__aeabi_ui2d>
    ba28:	1c06      	adds	r6, r0, #0
    ba2a:	1c0f      	adds	r7, r1, #0
    ba2c:	2d09      	cmp	r5, #9
    ba2e:	dd15      	ble.n	ba5c <_strtod_r+0x414>
    ba30:	1c2b      	adds	r3, r5, #0
    ba32:	4a83      	ldr	r2, [pc, #524]	; (bc40 <_strtod_r+0x5f8>)
    ba34:	3b09      	subs	r3, #9
    ba36:	00db      	lsls	r3, r3, #3
    ba38:	18d3      	adds	r3, r2, r3
    ba3a:	681a      	ldr	r2, [r3, #0]
    ba3c:	685b      	ldr	r3, [r3, #4]
    ba3e:	f7fc fe8b 	bl	8758 <__aeabi_dmul>
    ba42:	1c06      	adds	r6, r0, #0
    ba44:	9805      	ldr	r0, [sp, #20]
    ba46:	1c0f      	adds	r7, r1, #0
    ba48:	f7fd fd0c 	bl	9464 <__aeabi_ui2d>
    ba4c:	1c02      	adds	r2, r0, #0
    ba4e:	1c0b      	adds	r3, r1, #0
    ba50:	1c30      	adds	r0, r6, #0
    ba52:	1c39      	adds	r1, r7, #0
    ba54:	f7fb ff1a 	bl	788c <__aeabi_dadd>
    ba58:	1c06      	adds	r6, r0, #0
    ba5a:	1c0f      	adds	r7, r1, #0
    ba5c:	2c0f      	cmp	r4, #15
    ba5e:	dc37      	bgt.n	bad0 <_strtod_r+0x488>
    ba60:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ba62:	2b00      	cmp	r3, #0
    ba64:	d100      	bne.n	ba68 <_strtod_r+0x420>
    ba66:	e3db      	b.n	c220 <_strtod_r+0xbd8>
    ba68:	dd24      	ble.n	bab4 <_strtod_r+0x46c>
    ba6a:	2b16      	cmp	r3, #22
    ba6c:	dc07      	bgt.n	ba7e <_strtod_r+0x436>
    ba6e:	4974      	ldr	r1, [pc, #464]	; (bc40 <_strtod_r+0x5f8>)
    ba70:	00da      	lsls	r2, r3, #3
    ba72:	188a      	adds	r2, r1, r2
    ba74:	6810      	ldr	r0, [r2, #0]
    ba76:	6851      	ldr	r1, [r2, #4]
    ba78:	1c3b      	adds	r3, r7, #0
    ba7a:	1c32      	adds	r2, r6, #0
    ba7c:	e015      	b.n	baaa <_strtod_r+0x462>
    ba7e:	2325      	movs	r3, #37	; 0x25
    ba80:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ba82:	1b1b      	subs	r3, r3, r4
    ba84:	429a      	cmp	r2, r3
    ba86:	dc23      	bgt.n	bad0 <_strtod_r+0x488>
    ba88:	220f      	movs	r2, #15
    ba8a:	4d6d      	ldr	r5, [pc, #436]	; (bc40 <_strtod_r+0x5f8>)
    ba8c:	1b14      	subs	r4, r2, r4
    ba8e:	00e3      	lsls	r3, r4, #3
    ba90:	18eb      	adds	r3, r5, r3
    ba92:	6818      	ldr	r0, [r3, #0]
    ba94:	6859      	ldr	r1, [r3, #4]
    ba96:	1c32      	adds	r2, r6, #0
    ba98:	1c3b      	adds	r3, r7, #0
    ba9a:	f7fc fe5d 	bl	8758 <__aeabi_dmul>
    ba9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    baa0:	1b1c      	subs	r4, r3, r4
    baa2:	00e4      	lsls	r4, r4, #3
    baa4:	192d      	adds	r5, r5, r4
    baa6:	682a      	ldr	r2, [r5, #0]
    baa8:	686b      	ldr	r3, [r5, #4]
    baaa:	f7fc fe55 	bl	8758 <__aeabi_dmul>
    baae:	1c06      	adds	r6, r0, #0
    bab0:	1c0f      	adds	r7, r1, #0
    bab2:	e3b5      	b.n	c220 <_strtod_r+0xbd8>
    bab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bab6:	3316      	adds	r3, #22
    bab8:	db0a      	blt.n	bad0 <_strtod_r+0x488>
    baba:	9b09      	ldr	r3, [sp, #36]	; 0x24
    babc:	1c30      	adds	r0, r6, #0
    babe:	00da      	lsls	r2, r3, #3
    bac0:	4b5f      	ldr	r3, [pc, #380]	; (bc40 <_strtod_r+0x5f8>)
    bac2:	1c39      	adds	r1, r7, #0
    bac4:	1a9a      	subs	r2, r3, r2
    bac6:	6853      	ldr	r3, [r2, #4]
    bac8:	6812      	ldr	r2, [r2, #0]
    baca:	f7fc fa07 	bl	7edc <__aeabi_ddiv>
    bace:	e7ee      	b.n	baae <_strtod_r+0x466>
    bad0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bad2:	1b65      	subs	r5, r4, r5
    bad4:	195d      	adds	r5, r3, r5
    bad6:	2d00      	cmp	r5, #0
    bad8:	dd59      	ble.n	bb8e <_strtod_r+0x546>
    bada:	230f      	movs	r3, #15
    badc:	402b      	ands	r3, r5
    bade:	d00a      	beq.n	baf6 <_strtod_r+0x4ae>
    bae0:	4a57      	ldr	r2, [pc, #348]	; (bc40 <_strtod_r+0x5f8>)
    bae2:	00db      	lsls	r3, r3, #3
    bae4:	18d3      	adds	r3, r2, r3
    bae6:	6818      	ldr	r0, [r3, #0]
    bae8:	6859      	ldr	r1, [r3, #4]
    baea:	1c32      	adds	r2, r6, #0
    baec:	1c3b      	adds	r3, r7, #0
    baee:	f7fc fe33 	bl	8758 <__aeabi_dmul>
    baf2:	1c06      	adds	r6, r0, #0
    baf4:	1c0f      	adds	r7, r1, #0
    baf6:	230f      	movs	r3, #15
    baf8:	439d      	bics	r5, r3
    bafa:	d100      	bne.n	bafe <_strtod_r+0x4b6>
    bafc:	e0b0      	b.n	bc60 <_strtod_r+0x618>
    bafe:	3326      	adds	r3, #38	; 0x26
    bb00:	33ff      	adds	r3, #255	; 0xff
    bb02:	429d      	cmp	r5, r3
    bb04:	dd0e      	ble.n	bb24 <_strtod_r+0x4dc>
    bb06:	2300      	movs	r3, #0
    bb08:	9304      	str	r3, [sp, #16]
    bb0a:	9305      	str	r3, [sp, #20]
    bb0c:	930b      	str	r3, [sp, #44]	; 0x2c
    bb0e:	9308      	str	r3, [sp, #32]
    bb10:	2322      	movs	r3, #34	; 0x22
    bb12:	2600      	movs	r6, #0
    bb14:	9a03      	ldr	r2, [sp, #12]
    bb16:	4f4b      	ldr	r7, [pc, #300]	; (bc44 <_strtod_r+0x5fc>)
    bb18:	6013      	str	r3, [r2, #0]
    bb1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    bb1c:	42b3      	cmp	r3, r6
    bb1e:	d000      	beq.n	bb22 <_strtod_r+0x4da>
    bb20:	e36a      	b.n	c1f8 <_strtod_r+0xbb0>
    bb22:	e37d      	b.n	c220 <_strtod_r+0xbd8>
    bb24:	2300      	movs	r3, #0
    bb26:	1c30      	adds	r0, r6, #0
    bb28:	1c39      	adds	r1, r7, #0
    bb2a:	112d      	asrs	r5, r5, #4
    bb2c:	9305      	str	r3, [sp, #20]
    bb2e:	2d01      	cmp	r5, #1
    bb30:	dd0e      	ble.n	bb50 <_strtod_r+0x508>
    bb32:	07eb      	lsls	r3, r5, #31
    bb34:	d507      	bpl.n	bb46 <_strtod_r+0x4fe>
    bb36:	9b05      	ldr	r3, [sp, #20]
    bb38:	00da      	lsls	r2, r3, #3
    bb3a:	4b43      	ldr	r3, [pc, #268]	; (bc48 <_strtod_r+0x600>)
    bb3c:	18d3      	adds	r3, r2, r3
    bb3e:	681a      	ldr	r2, [r3, #0]
    bb40:	685b      	ldr	r3, [r3, #4]
    bb42:	f7fc fe09 	bl	8758 <__aeabi_dmul>
    bb46:	9b05      	ldr	r3, [sp, #20]
    bb48:	106d      	asrs	r5, r5, #1
    bb4a:	3301      	adds	r3, #1
    bb4c:	9305      	str	r3, [sp, #20]
    bb4e:	e7ee      	b.n	bb2e <_strtod_r+0x4e6>
    bb50:	1c06      	adds	r6, r0, #0
    bb52:	4b3e      	ldr	r3, [pc, #248]	; (bc4c <_strtod_r+0x604>)
    bb54:	18cf      	adds	r7, r1, r3
    bb56:	9b05      	ldr	r3, [sp, #20]
    bb58:	00da      	lsls	r2, r3, #3
    bb5a:	4b3b      	ldr	r3, [pc, #236]	; (bc48 <_strtod_r+0x600>)
    bb5c:	189b      	adds	r3, r3, r2
    bb5e:	6818      	ldr	r0, [r3, #0]
    bb60:	6859      	ldr	r1, [r3, #4]
    bb62:	1c32      	adds	r2, r6, #0
    bb64:	1c3b      	adds	r3, r7, #0
    bb66:	f7fc fdf7 	bl	8758 <__aeabi_dmul>
    bb6a:	4b36      	ldr	r3, [pc, #216]	; (bc44 <_strtod_r+0x5fc>)
    bb6c:	1c0f      	adds	r7, r1, #0
    bb6e:	400b      	ands	r3, r1
    bb70:	4937      	ldr	r1, [pc, #220]	; (bc50 <_strtod_r+0x608>)
    bb72:	1c06      	adds	r6, r0, #0
    bb74:	428b      	cmp	r3, r1
    bb76:	d8c6      	bhi.n	bb06 <_strtod_r+0x4be>
    bb78:	4936      	ldr	r1, [pc, #216]	; (bc54 <_strtod_r+0x60c>)
    bb7a:	428b      	cmp	r3, r1
    bb7c:	d903      	bls.n	bb86 <_strtod_r+0x53e>
    bb7e:	2601      	movs	r6, #1
    bb80:	4f35      	ldr	r7, [pc, #212]	; (bc58 <_strtod_r+0x610>)
    bb82:	4276      	negs	r6, r6
    bb84:	e06c      	b.n	bc60 <_strtod_r+0x618>
    bb86:	23d4      	movs	r3, #212	; 0xd4
    bb88:	049b      	lsls	r3, r3, #18
    bb8a:	18ff      	adds	r7, r7, r3
    bb8c:	e068      	b.n	bc60 <_strtod_r+0x618>
    bb8e:	2d00      	cmp	r5, #0
    bb90:	d066      	beq.n	bc60 <_strtod_r+0x618>
    bb92:	230f      	movs	r3, #15
    bb94:	426d      	negs	r5, r5
    bb96:	402b      	ands	r3, r5
    bb98:	d00a      	beq.n	bbb0 <_strtod_r+0x568>
    bb9a:	4a29      	ldr	r2, [pc, #164]	; (bc40 <_strtod_r+0x5f8>)
    bb9c:	00db      	lsls	r3, r3, #3
    bb9e:	18d3      	adds	r3, r2, r3
    bba0:	1c30      	adds	r0, r6, #0
    bba2:	681a      	ldr	r2, [r3, #0]
    bba4:	685b      	ldr	r3, [r3, #4]
    bba6:	1c39      	adds	r1, r7, #0
    bba8:	f7fc f998 	bl	7edc <__aeabi_ddiv>
    bbac:	1c06      	adds	r6, r0, #0
    bbae:	1c0f      	adds	r7, r1, #0
    bbb0:	112d      	asrs	r5, r5, #4
    bbb2:	d055      	beq.n	bc60 <_strtod_r+0x618>
    bbb4:	2d1f      	cmp	r5, #31
    bbb6:	dd05      	ble.n	bbc4 <_strtod_r+0x57c>
    bbb8:	2300      	movs	r3, #0
    bbba:	9304      	str	r3, [sp, #16]
    bbbc:	9305      	str	r3, [sp, #20]
    bbbe:	930b      	str	r3, [sp, #44]	; 0x2c
    bbc0:	9308      	str	r3, [sp, #32]
    bbc2:	e118      	b.n	bdf6 <_strtod_r+0x7ae>
    bbc4:	2300      	movs	r3, #0
    bbc6:	9306      	str	r3, [sp, #24]
    bbc8:	06eb      	lsls	r3, r5, #27
    bbca:	d501      	bpl.n	bbd0 <_strtod_r+0x588>
    bbcc:	236a      	movs	r3, #106	; 0x6a
    bbce:	9306      	str	r3, [sp, #24]
    bbd0:	1c39      	adds	r1, r7, #0
    bbd2:	1c30      	adds	r0, r6, #0
    bbd4:	4e21      	ldr	r6, [pc, #132]	; (bc5c <_strtod_r+0x614>)
    bbd6:	2d00      	cmp	r5, #0
    bbd8:	dd08      	ble.n	bbec <_strtod_r+0x5a4>
    bbda:	07eb      	lsls	r3, r5, #31
    bbdc:	d503      	bpl.n	bbe6 <_strtod_r+0x59e>
    bbde:	6832      	ldr	r2, [r6, #0]
    bbe0:	6873      	ldr	r3, [r6, #4]
    bbe2:	f7fc fdb9 	bl	8758 <__aeabi_dmul>
    bbe6:	106d      	asrs	r5, r5, #1
    bbe8:	3608      	adds	r6, #8
    bbea:	e7f4      	b.n	bbd6 <_strtod_r+0x58e>
    bbec:	9b06      	ldr	r3, [sp, #24]
    bbee:	1c06      	adds	r6, r0, #0
    bbf0:	1c0f      	adds	r7, r1, #0
    bbf2:	2b00      	cmp	r3, #0
    bbf4:	d019      	beq.n	bc2a <_strtod_r+0x5e2>
    bbf6:	226b      	movs	r2, #107	; 0x6b
    bbf8:	004b      	lsls	r3, r1, #1
    bbfa:	0d5b      	lsrs	r3, r3, #21
    bbfc:	1c08      	adds	r0, r1, #0
    bbfe:	1ad3      	subs	r3, r2, r3
    bc00:	2b00      	cmp	r3, #0
    bc02:	dd12      	ble.n	bc2a <_strtod_r+0x5e2>
    bc04:	2b1f      	cmp	r3, #31
    bc06:	dd0c      	ble.n	bc22 <_strtod_r+0x5da>
    bc08:	2600      	movs	r6, #0
    bc0a:	2b34      	cmp	r3, #52	; 0x34
    bc0c:	dd02      	ble.n	bc14 <_strtod_r+0x5cc>
    bc0e:	27dc      	movs	r7, #220	; 0xdc
    bc10:	04bf      	lsls	r7, r7, #18
    bc12:	e00a      	b.n	bc2a <_strtod_r+0x5e2>
    bc14:	2201      	movs	r2, #1
    bc16:	3b20      	subs	r3, #32
    bc18:	4252      	negs	r2, r2
    bc1a:	409a      	lsls	r2, r3
    bc1c:	4010      	ands	r0, r2
    bc1e:	1c07      	adds	r7, r0, #0
    bc20:	e003      	b.n	bc2a <_strtod_r+0x5e2>
    bc22:	2201      	movs	r2, #1
    bc24:	4252      	negs	r2, r2
    bc26:	409a      	lsls	r2, r3
    bc28:	4016      	ands	r6, r2
    bc2a:	1c30      	adds	r0, r6, #0
    bc2c:	1c39      	adds	r1, r7, #0
    bc2e:	2200      	movs	r2, #0
    bc30:	2300      	movs	r3, #0
    bc32:	f7fa fead 	bl	6990 <__aeabi_dcmpeq>
    bc36:	2800      	cmp	r0, #0
    bc38:	d1be      	bne.n	bbb8 <_strtod_r+0x570>
    bc3a:	e013      	b.n	bc64 <_strtod_r+0x61c>
    bc3c:	fff80000 	.word	0xfff80000
    bc40:	0000fc30 	.word	0x0000fc30
    bc44:	7ff00000 	.word	0x7ff00000
    bc48:	0000fcf8 	.word	0x0000fcf8
    bc4c:	fcb00000 	.word	0xfcb00000
    bc50:	7ca00000 	.word	0x7ca00000
    bc54:	7c900000 	.word	0x7c900000
    bc58:	7fefffff 	.word	0x7fefffff
    bc5c:	0000fad8 	.word	0x0000fad8
    bc60:	2300      	movs	r3, #0
    bc62:	9306      	str	r3, [sp, #24]
    bc64:	9b07      	ldr	r3, [sp, #28]
    bc66:	9803      	ldr	r0, [sp, #12]
    bc68:	9300      	str	r3, [sp, #0]
    bc6a:	990c      	ldr	r1, [sp, #48]	; 0x30
    bc6c:	9a04      	ldr	r2, [sp, #16]
    bc6e:	1c23      	adds	r3, r4, #0
    bc70:	f001 fffb 	bl	dc6a <__s2b>
    bc74:	900b      	str	r0, [sp, #44]	; 0x2c
    bc76:	2800      	cmp	r0, #0
    bc78:	d100      	bne.n	bc7c <_strtod_r+0x634>
    bc7a:	e744      	b.n	bb06 <_strtod_r+0x4be>
    bc7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bc7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    bc80:	425b      	negs	r3, r3
    bc82:	17d2      	asrs	r2, r2, #31
    bc84:	4013      	ands	r3, r2
    bc86:	9313      	str	r3, [sp, #76]	; 0x4c
    bc88:	2300      	movs	r3, #0
    bc8a:	9304      	str	r3, [sp, #16]
    bc8c:	9305      	str	r3, [sp, #20]
    bc8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    bc90:	9803      	ldr	r0, [sp, #12]
    bc92:	6859      	ldr	r1, [r3, #4]
    bc94:	f001 ff5c 	bl	db50 <_Balloc>
    bc98:	9008      	str	r0, [sp, #32]
    bc9a:	2800      	cmp	r0, #0
    bc9c:	d100      	bne.n	bca0 <_strtod_r+0x658>
    bc9e:	e737      	b.n	bb10 <_strtod_r+0x4c8>
    bca0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    bca2:	990b      	ldr	r1, [sp, #44]	; 0x2c
    bca4:	691b      	ldr	r3, [r3, #16]
    bca6:	310c      	adds	r1, #12
    bca8:	1c9a      	adds	r2, r3, #2
    bcaa:	0092      	lsls	r2, r2, #2
    bcac:	300c      	adds	r0, #12
    bcae:	9307      	str	r3, [sp, #28]
    bcb0:	f7fe f8ed 	bl	9e8e <memcpy>
    bcb4:	ab1f      	add	r3, sp, #124	; 0x7c
    bcb6:	9300      	str	r3, [sp, #0]
    bcb8:	ab20      	add	r3, sp, #128	; 0x80
    bcba:	9301      	str	r3, [sp, #4]
    bcbc:	9803      	ldr	r0, [sp, #12]
    bcbe:	1c32      	adds	r2, r6, #0
    bcc0:	1c3b      	adds	r3, r7, #0
    bcc2:	960e      	str	r6, [sp, #56]	; 0x38
    bcc4:	970f      	str	r7, [sp, #60]	; 0x3c
    bcc6:	f002 fa91 	bl	e1ec <__d2b>
    bcca:	901e      	str	r0, [sp, #120]	; 0x78
    bccc:	2800      	cmp	r0, #0
    bcce:	d100      	bne.n	bcd2 <_strtod_r+0x68a>
    bcd0:	e71e      	b.n	bb10 <_strtod_r+0x4c8>
    bcd2:	9803      	ldr	r0, [sp, #12]
    bcd4:	2101      	movs	r1, #1
    bcd6:	f002 f852 	bl	dd7e <__i2b>
    bcda:	9005      	str	r0, [sp, #20]
    bcdc:	2800      	cmp	r0, #0
    bcde:	d100      	bne.n	bce2 <_strtod_r+0x69a>
    bce0:	e716      	b.n	bb10 <_strtod_r+0x4c8>
    bce2:	2300      	movs	r3, #0
    bce4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    bce6:	930a      	str	r3, [sp, #40]	; 0x28
    bce8:	4293      	cmp	r3, r2
    bcea:	da00      	bge.n	bcee <_strtod_r+0x6a6>
    bcec:	920a      	str	r2, [sp, #40]	; 0x28
    bcee:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    bcf0:	2b00      	cmp	r3, #0
    bcf2:	da00      	bge.n	bcf6 <_strtod_r+0x6ae>
    bcf4:	e089      	b.n	be0a <_strtod_r+0x7c2>
    bcf6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    bcf8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    bcfa:	18d5      	adds	r5, r2, r3
    bcfc:	9a06      	ldr	r2, [sp, #24]
    bcfe:	9920      	ldr	r1, [sp, #128]	; 0x80
    bd00:	1a9b      	subs	r3, r3, r2
    bd02:	2236      	movs	r2, #54	; 0x36
    bd04:	185b      	adds	r3, r3, r1
    bd06:	1a52      	subs	r2, r2, r1
    bd08:	49c8      	ldr	r1, [pc, #800]	; (c02c <_strtod_r+0x9e4>)
    bd0a:	2001      	movs	r0, #1
    bd0c:	428b      	cmp	r3, r1
    bd0e:	db00      	blt.n	bd12 <_strtod_r+0x6ca>
    bd10:	e085      	b.n	be1e <_strtod_r+0x7d6>
    bd12:	1ac9      	subs	r1, r1, r3
    bd14:	1a52      	subs	r2, r2, r1
    bd16:	291f      	cmp	r1, #31
    bd18:	dc7b      	bgt.n	be12 <_strtod_r+0x7ca>
    bd1a:	4088      	lsls	r0, r1
    bd1c:	2300      	movs	r3, #0
    bd1e:	9018      	str	r0, [sp, #96]	; 0x60
    bd20:	9312      	str	r3, [sp, #72]	; 0x48
    bd22:	18ab      	adds	r3, r5, r2
    bd24:	9307      	str	r3, [sp, #28]
    bd26:	9b06      	ldr	r3, [sp, #24]
    bd28:	18a4      	adds	r4, r4, r2
    bd2a:	18e4      	adds	r4, r4, r3
    bd2c:	9b07      	ldr	r3, [sp, #28]
    bd2e:	42ab      	cmp	r3, r5
    bd30:	dd00      	ble.n	bd34 <_strtod_r+0x6ec>
    bd32:	1c2b      	adds	r3, r5, #0
    bd34:	42a3      	cmp	r3, r4
    bd36:	dd00      	ble.n	bd3a <_strtod_r+0x6f2>
    bd38:	1c23      	adds	r3, r4, #0
    bd3a:	2b00      	cmp	r3, #0
    bd3c:	dd04      	ble.n	bd48 <_strtod_r+0x700>
    bd3e:	9a07      	ldr	r2, [sp, #28]
    bd40:	1ae4      	subs	r4, r4, r3
    bd42:	1ad2      	subs	r2, r2, r3
    bd44:	9207      	str	r2, [sp, #28]
    bd46:	1aed      	subs	r5, r5, r3
    bd48:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    bd4a:	2b00      	cmp	r3, #0
    bd4c:	d16b      	bne.n	be26 <_strtod_r+0x7de>
    bd4e:	9b07      	ldr	r3, [sp, #28]
    bd50:	2b00      	cmp	r3, #0
    bd52:	dd00      	ble.n	bd56 <_strtod_r+0x70e>
    bd54:	e080      	b.n	be58 <_strtod_r+0x810>
    bd56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bd58:	2b00      	cmp	r3, #0
    bd5a:	d000      	beq.n	bd5e <_strtod_r+0x716>
    bd5c:	e086      	b.n	be6c <_strtod_r+0x824>
    bd5e:	2c00      	cmp	r4, #0
    bd60:	dd00      	ble.n	bd64 <_strtod_r+0x71c>
    bd62:	e08d      	b.n	be80 <_strtod_r+0x838>
    bd64:	2d00      	cmp	r5, #0
    bd66:	dd00      	ble.n	bd6a <_strtod_r+0x722>
    bd68:	e094      	b.n	be94 <_strtod_r+0x84c>
    bd6a:	9803      	ldr	r0, [sp, #12]
    bd6c:	991e      	ldr	r1, [sp, #120]	; 0x78
    bd6e:	9a08      	ldr	r2, [sp, #32]
    bd70:	f002 f95b 	bl	e02a <__mdiff>
    bd74:	9004      	str	r0, [sp, #16]
    bd76:	2800      	cmp	r0, #0
    bd78:	d100      	bne.n	bd7c <_strtod_r+0x734>
    bd7a:	e6c9      	b.n	bb10 <_strtod_r+0x4c8>
    bd7c:	2200      	movs	r2, #0
    bd7e:	68c3      	ldr	r3, [r0, #12]
    bd80:	9905      	ldr	r1, [sp, #20]
    bd82:	60c2      	str	r2, [r0, #12]
    bd84:	930c      	str	r3, [sp, #48]	; 0x30
    bd86:	f002 f935 	bl	dff4 <__mcmp>
    bd8a:	2800      	cmp	r0, #0
    bd8c:	db00      	blt.n	bd90 <_strtod_r+0x748>
    bd8e:	e091      	b.n	beb4 <_strtod_r+0x86c>
    bd90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    bd92:	2b00      	cmp	r3, #0
    bd94:	d000      	beq.n	bd98 <_strtod_r+0x750>
    bd96:	e21a      	b.n	c1ce <_strtod_r+0xb86>
    bd98:	2e00      	cmp	r6, #0
    bd9a:	d000      	beq.n	bd9e <_strtod_r+0x756>
    bd9c:	e217      	b.n	c1ce <_strtod_r+0xb86>
    bd9e:	033b      	lsls	r3, r7, #12
    bda0:	d000      	beq.n	bda4 <_strtod_r+0x75c>
    bda2:	e214      	b.n	c1ce <_strtod_r+0xb86>
    bda4:	22d6      	movs	r2, #214	; 0xd6
    bda6:	4ba2      	ldr	r3, [pc, #648]	; (c030 <_strtod_r+0x9e8>)
    bda8:	04d2      	lsls	r2, r2, #19
    bdaa:	403b      	ands	r3, r7
    bdac:	4293      	cmp	r3, r2
    bdae:	d800      	bhi.n	bdb2 <_strtod_r+0x76a>
    bdb0:	e20d      	b.n	c1ce <_strtod_r+0xb86>
    bdb2:	9b04      	ldr	r3, [sp, #16]
    bdb4:	695b      	ldr	r3, [r3, #20]
    bdb6:	9307      	str	r3, [sp, #28]
    bdb8:	2b00      	cmp	r3, #0
    bdba:	d075      	beq.n	bea8 <_strtod_r+0x860>
    bdbc:	9904      	ldr	r1, [sp, #16]
    bdbe:	9803      	ldr	r0, [sp, #12]
    bdc0:	2201      	movs	r2, #1
    bdc2:	f002 f8c5 	bl	df50 <__lshift>
    bdc6:	9905      	ldr	r1, [sp, #20]
    bdc8:	9004      	str	r0, [sp, #16]
    bdca:	f002 f913 	bl	dff4 <__mcmp>
    bdce:	2800      	cmp	r0, #0
    bdd0:	dc00      	bgt.n	bdd4 <_strtod_r+0x78c>
    bdd2:	e1fc      	b.n	c1ce <_strtod_r+0xb86>
    bdd4:	9a06      	ldr	r2, [sp, #24]
    bdd6:	4b96      	ldr	r3, [pc, #600]	; (c030 <_strtod_r+0x9e8>)
    bdd8:	2a00      	cmp	r2, #0
    bdda:	d100      	bne.n	bdde <_strtod_r+0x796>
    bddc:	e09a      	b.n	bf14 <_strtod_r+0x8cc>
    bdde:	1c1a      	adds	r2, r3, #0
    bde0:	21d6      	movs	r1, #214	; 0xd6
    bde2:	403a      	ands	r2, r7
    bde4:	04c9      	lsls	r1, r1, #19
    bde6:	428a      	cmp	r2, r1
    bde8:	dd00      	ble.n	bdec <_strtod_r+0x7a4>
    bdea:	e093      	b.n	bf14 <_strtod_r+0x8cc>
    bdec:	23dc      	movs	r3, #220	; 0xdc
    bdee:	049b      	lsls	r3, r3, #18
    bdf0:	429a      	cmp	r2, r3
    bdf2:	dd00      	ble.n	bdf6 <_strtod_r+0x7ae>
    bdf4:	e1ee      	b.n	c1d4 <_strtod_r+0xb8c>
    bdf6:	2322      	movs	r3, #34	; 0x22
    bdf8:	9a03      	ldr	r2, [sp, #12]
    bdfa:	2600      	movs	r6, #0
    bdfc:	6013      	str	r3, [r2, #0]
    bdfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    be00:	2700      	movs	r7, #0
    be02:	2b00      	cmp	r3, #0
    be04:	d000      	beq.n	be08 <_strtod_r+0x7c0>
    be06:	e1f7      	b.n	c1f8 <_strtod_r+0xbb0>
    be08:	e20a      	b.n	c220 <_strtod_r+0xbd8>
    be0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    be0c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    be0e:	1ad4      	subs	r4, r2, r3
    be10:	e774      	b.n	bcfc <_strtod_r+0x6b4>
    be12:	4988      	ldr	r1, [pc, #544]	; (c034 <_strtod_r+0x9ec>)
    be14:	1acb      	subs	r3, r1, r3
    be16:	1c01      	adds	r1, r0, #0
    be18:	4099      	lsls	r1, r3
    be1a:	9112      	str	r1, [sp, #72]	; 0x48
    be1c:	e001      	b.n	be22 <_strtod_r+0x7da>
    be1e:	2300      	movs	r3, #0
    be20:	9312      	str	r3, [sp, #72]	; 0x48
    be22:	9018      	str	r0, [sp, #96]	; 0x60
    be24:	e77d      	b.n	bd22 <_strtod_r+0x6da>
    be26:	1c1a      	adds	r2, r3, #0
    be28:	9803      	ldr	r0, [sp, #12]
    be2a:	9905      	ldr	r1, [sp, #20]
    be2c:	f002 f83e 	bl	deac <__pow5mult>
    be30:	9005      	str	r0, [sp, #20]
    be32:	1e03      	subs	r3, r0, #0
    be34:	d100      	bne.n	be38 <_strtod_r+0x7f0>
    be36:	e66b      	b.n	bb10 <_strtod_r+0x4c8>
    be38:	9803      	ldr	r0, [sp, #12]
    be3a:	1c19      	adds	r1, r3, #0
    be3c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    be3e:	f001 ffa7 	bl	dd90 <__multiply>
    be42:	900c      	str	r0, [sp, #48]	; 0x30
    be44:	2800      	cmp	r0, #0
    be46:	d100      	bne.n	be4a <_strtod_r+0x802>
    be48:	e662      	b.n	bb10 <_strtod_r+0x4c8>
    be4a:	9803      	ldr	r0, [sp, #12]
    be4c:	991e      	ldr	r1, [sp, #120]	; 0x78
    be4e:	f001 feb7 	bl	dbc0 <_Bfree>
    be52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    be54:	931e      	str	r3, [sp, #120]	; 0x78
    be56:	e77a      	b.n	bd4e <_strtod_r+0x706>
    be58:	9803      	ldr	r0, [sp, #12]
    be5a:	991e      	ldr	r1, [sp, #120]	; 0x78
    be5c:	9a07      	ldr	r2, [sp, #28]
    be5e:	f002 f877 	bl	df50 <__lshift>
    be62:	901e      	str	r0, [sp, #120]	; 0x78
    be64:	2800      	cmp	r0, #0
    be66:	d000      	beq.n	be6a <_strtod_r+0x822>
    be68:	e775      	b.n	bd56 <_strtod_r+0x70e>
    be6a:	e651      	b.n	bb10 <_strtod_r+0x4c8>
    be6c:	9803      	ldr	r0, [sp, #12]
    be6e:	9908      	ldr	r1, [sp, #32]
    be70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    be72:	f002 f81b 	bl	deac <__pow5mult>
    be76:	9008      	str	r0, [sp, #32]
    be78:	2800      	cmp	r0, #0
    be7a:	d000      	beq.n	be7e <_strtod_r+0x836>
    be7c:	e76f      	b.n	bd5e <_strtod_r+0x716>
    be7e:	e647      	b.n	bb10 <_strtod_r+0x4c8>
    be80:	9803      	ldr	r0, [sp, #12]
    be82:	9908      	ldr	r1, [sp, #32]
    be84:	1c22      	adds	r2, r4, #0
    be86:	f002 f863 	bl	df50 <__lshift>
    be8a:	9008      	str	r0, [sp, #32]
    be8c:	2800      	cmp	r0, #0
    be8e:	d000      	beq.n	be92 <_strtod_r+0x84a>
    be90:	e768      	b.n	bd64 <_strtod_r+0x71c>
    be92:	e63d      	b.n	bb10 <_strtod_r+0x4c8>
    be94:	9803      	ldr	r0, [sp, #12]
    be96:	9905      	ldr	r1, [sp, #20]
    be98:	1c2a      	adds	r2, r5, #0
    be9a:	f002 f859 	bl	df50 <__lshift>
    be9e:	9005      	str	r0, [sp, #20]
    bea0:	2800      	cmp	r0, #0
    bea2:	d000      	beq.n	bea6 <_strtod_r+0x85e>
    bea4:	e761      	b.n	bd6a <_strtod_r+0x722>
    bea6:	e633      	b.n	bb10 <_strtod_r+0x4c8>
    bea8:	9b04      	ldr	r3, [sp, #16]
    beaa:	691b      	ldr	r3, [r3, #16]
    beac:	9307      	str	r3, [sp, #28]
    beae:	2b01      	cmp	r3, #1
    beb0:	dc84      	bgt.n	bdbc <_strtod_r+0x774>
    beb2:	e18c      	b.n	c1ce <_strtod_r+0xb86>
    beb4:	2800      	cmp	r0, #0
    beb6:	d164      	bne.n	bf82 <_strtod_r+0x93a>
    beb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    beba:	033b      	lsls	r3, r7, #12
    bebc:	2a00      	cmp	r2, #0
    bebe:	d024      	beq.n	bf0a <_strtod_r+0x8c2>
    bec0:	4a5d      	ldr	r2, [pc, #372]	; (c038 <_strtod_r+0x9f0>)
    bec2:	1c39      	adds	r1, r7, #0
    bec4:	0b1b      	lsrs	r3, r3, #12
    bec6:	4293      	cmp	r3, r2
    bec8:	d12d      	bne.n	bf26 <_strtod_r+0x8de>
    beca:	9a06      	ldr	r2, [sp, #24]
    becc:	3801      	subs	r0, #1
    bece:	1c34      	adds	r4, r6, #0
    bed0:	1c03      	adds	r3, r0, #0
    bed2:	2a00      	cmp	r2, #0
    bed4:	d00a      	beq.n	beec <_strtod_r+0x8a4>
    bed6:	25d4      	movs	r5, #212	; 0xd4
    bed8:	4a55      	ldr	r2, [pc, #340]	; (c030 <_strtod_r+0x9e8>)
    beda:	04ed      	lsls	r5, r5, #19
    bedc:	403a      	ands	r2, r7
    bede:	42aa      	cmp	r2, r5
    bee0:	d804      	bhi.n	beec <_strtod_r+0x8a4>
    bee2:	336c      	adds	r3, #108	; 0x6c
    bee4:	0d12      	lsrs	r2, r2, #20
    bee6:	1a9a      	subs	r2, r3, r2
    bee8:	1c03      	adds	r3, r0, #0
    beea:	4093      	lsls	r3, r2
    beec:	429c      	cmp	r4, r3
    beee:	d11a      	bne.n	bf26 <_strtod_r+0x8de>
    bef0:	4b52      	ldr	r3, [pc, #328]	; (c03c <_strtod_r+0x9f4>)
    bef2:	4299      	cmp	r1, r3
    bef4:	d102      	bne.n	befc <_strtod_r+0x8b4>
    bef6:	1c63      	adds	r3, r4, #1
    bef8:	d100      	bne.n	befc <_strtod_r+0x8b4>
    befa:	e609      	b.n	bb10 <_strtod_r+0x4c8>
    befc:	4b4c      	ldr	r3, [pc, #304]	; (c030 <_strtod_r+0x9e8>)
    befe:	2600      	movs	r6, #0
    bf00:	4019      	ands	r1, r3
    bf02:	2380      	movs	r3, #128	; 0x80
    bf04:	035b      	lsls	r3, r3, #13
    bf06:	18cf      	adds	r7, r1, r3
    bf08:	e161      	b.n	c1ce <_strtod_r+0xb86>
    bf0a:	2b00      	cmp	r3, #0
    bf0c:	d10b      	bne.n	bf26 <_strtod_r+0x8de>
    bf0e:	2e00      	cmp	r6, #0
    bf10:	d109      	bne.n	bf26 <_strtod_r+0x8de>
    bf12:	e75f      	b.n	bdd4 <_strtod_r+0x78c>
    bf14:	2601      	movs	r6, #1
    bf16:	4a4a      	ldr	r2, [pc, #296]	; (c040 <_strtod_r+0x9f8>)
    bf18:	403b      	ands	r3, r7
    bf1a:	189b      	adds	r3, r3, r2
    bf1c:	4a46      	ldr	r2, [pc, #280]	; (c038 <_strtod_r+0x9f0>)
    bf1e:	4276      	negs	r6, r6
    bf20:	431a      	orrs	r2, r3
    bf22:	1c17      	adds	r7, r2, #0
    bf24:	e153      	b.n	c1ce <_strtod_r+0xb86>
    bf26:	9b12      	ldr	r3, [sp, #72]	; 0x48
    bf28:	2b00      	cmp	r3, #0
    bf2a:	d003      	beq.n	bf34 <_strtod_r+0x8ec>
    bf2c:	423b      	tst	r3, r7
    bf2e:	d100      	bne.n	bf32 <_strtod_r+0x8ea>
    bf30:	e14d      	b.n	c1ce <_strtod_r+0xb86>
    bf32:	e003      	b.n	bf3c <_strtod_r+0x8f4>
    bf34:	9b18      	ldr	r3, [sp, #96]	; 0x60
    bf36:	4233      	tst	r3, r6
    bf38:	d100      	bne.n	bf3c <_strtod_r+0x8f4>
    bf3a:	e148      	b.n	c1ce <_strtod_r+0xb86>
    bf3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    bf3e:	1c30      	adds	r0, r6, #0
    bf40:	1c39      	adds	r1, r7, #0
    bf42:	9a06      	ldr	r2, [sp, #24]
    bf44:	2b00      	cmp	r3, #0
    bf46:	d00a      	beq.n	bf5e <_strtod_r+0x916>
    bf48:	f7ff fb68 	bl	b61c <sulp>
    bf4c:	1c02      	adds	r2, r0, #0
    bf4e:	1c0b      	adds	r3, r1, #0
    bf50:	980e      	ldr	r0, [sp, #56]	; 0x38
    bf52:	990f      	ldr	r1, [sp, #60]	; 0x3c
    bf54:	f7fb fc9a 	bl	788c <__aeabi_dadd>
    bf58:	1c06      	adds	r6, r0, #0
    bf5a:	1c0f      	adds	r7, r1, #0
    bf5c:	e137      	b.n	c1ce <_strtod_r+0xb86>
    bf5e:	f7ff fb5d 	bl	b61c <sulp>
    bf62:	1c02      	adds	r2, r0, #0
    bf64:	1c0b      	adds	r3, r1, #0
    bf66:	980e      	ldr	r0, [sp, #56]	; 0x38
    bf68:	990f      	ldr	r1, [sp, #60]	; 0x3c
    bf6a:	f7fc fe8f 	bl	8c8c <__aeabi_dsub>
    bf6e:	2200      	movs	r2, #0
    bf70:	2300      	movs	r3, #0
    bf72:	1c06      	adds	r6, r0, #0
    bf74:	1c0f      	adds	r7, r1, #0
    bf76:	f7fa fd0b 	bl	6990 <__aeabi_dcmpeq>
    bf7a:	2800      	cmp	r0, #0
    bf7c:	d000      	beq.n	bf80 <_strtod_r+0x938>
    bf7e:	e73a      	b.n	bdf6 <_strtod_r+0x7ae>
    bf80:	e125      	b.n	c1ce <_strtod_r+0xb86>
    bf82:	9804      	ldr	r0, [sp, #16]
    bf84:	9905      	ldr	r1, [sp, #20]
    bf86:	f002 f985 	bl	e294 <__ratio>
    bf8a:	2380      	movs	r3, #128	; 0x80
    bf8c:	2200      	movs	r2, #0
    bf8e:	05db      	lsls	r3, r3, #23
    bf90:	1c04      	adds	r4, r0, #0
    bf92:	1c0d      	adds	r5, r1, #0
    bf94:	f7fa fd0c 	bl	69b0 <__aeabi_dcmple>
    bf98:	2800      	cmp	r0, #0
    bf9a:	d036      	beq.n	c00a <_strtod_r+0x9c2>
    bf9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    bf9e:	2b00      	cmp	r3, #0
    bfa0:	d002      	beq.n	bfa8 <_strtod_r+0x960>
    bfa2:	2400      	movs	r4, #0
    bfa4:	4d27      	ldr	r5, [pc, #156]	; (c044 <_strtod_r+0x9fc>)
    bfa6:	e00b      	b.n	bfc0 <_strtod_r+0x978>
    bfa8:	2e00      	cmp	r6, #0
    bfaa:	d102      	bne.n	bfb2 <_strtod_r+0x96a>
    bfac:	033b      	lsls	r3, r7, #12
    bfae:	d105      	bne.n	bfbc <_strtod_r+0x974>
    bfb0:	e00b      	b.n	bfca <_strtod_r+0x982>
    bfb2:	2e01      	cmp	r6, #1
    bfb4:	d102      	bne.n	bfbc <_strtod_r+0x974>
    bfb6:	2f00      	cmp	r7, #0
    bfb8:	d100      	bne.n	bfbc <_strtod_r+0x974>
    bfba:	e71c      	b.n	bdf6 <_strtod_r+0x7ae>
    bfbc:	2400      	movs	r4, #0
    bfbe:	4d22      	ldr	r5, [pc, #136]	; (c048 <_strtod_r+0xa00>)
    bfc0:	2300      	movs	r3, #0
    bfc2:	9307      	str	r3, [sp, #28]
    bfc4:	4b1f      	ldr	r3, [pc, #124]	; (c044 <_strtod_r+0x9fc>)
    bfc6:	930a      	str	r3, [sp, #40]	; 0x28
    bfc8:	e048      	b.n	c05c <_strtod_r+0xa14>
    bfca:	1c20      	adds	r0, r4, #0
    bfcc:	1c29      	adds	r1, r5, #0
    bfce:	2200      	movs	r2, #0
    bfd0:	4b1c      	ldr	r3, [pc, #112]	; (c044 <_strtod_r+0x9fc>)
    bfd2:	f7fa fce3 	bl	699c <__aeabi_dcmplt>
    bfd6:	2800      	cmp	r0, #0
    bfd8:	d108      	bne.n	bfec <_strtod_r+0x9a4>
    bfda:	1c20      	adds	r0, r4, #0
    bfdc:	1c29      	adds	r1, r5, #0
    bfde:	2200      	movs	r2, #0
    bfe0:	4b1a      	ldr	r3, [pc, #104]	; (c04c <_strtod_r+0xa04>)
    bfe2:	f7fc fbb9 	bl	8758 <__aeabi_dmul>
    bfe6:	9007      	str	r0, [sp, #28]
    bfe8:	910a      	str	r1, [sp, #40]	; 0x28
    bfea:	e003      	b.n	bff4 <_strtod_r+0x9ac>
    bfec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    bfee:	9307      	str	r3, [sp, #28]
    bff0:	4b16      	ldr	r3, [pc, #88]	; (c04c <_strtod_r+0xa04>)
    bff2:	930a      	str	r3, [sp, #40]	; 0x28
    bff4:	2280      	movs	r2, #128	; 0x80
    bff6:	0612      	lsls	r2, r2, #24
    bff8:	4694      	mov	ip, r2
    bffa:	9b07      	ldr	r3, [sp, #28]
    bffc:	931a      	str	r3, [sp, #104]	; 0x68
    bffe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c000:	4463      	add	r3, ip
    c002:	931b      	str	r3, [sp, #108]	; 0x6c
    c004:	9c1a      	ldr	r4, [sp, #104]	; 0x68
    c006:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
    c008:	e028      	b.n	c05c <_strtod_r+0xa14>
    c00a:	4b10      	ldr	r3, [pc, #64]	; (c04c <_strtod_r+0xa04>)
    c00c:	1c20      	adds	r0, r4, #0
    c00e:	1c29      	adds	r1, r5, #0
    c010:	2200      	movs	r2, #0
    c012:	f7fc fba1 	bl	8758 <__aeabi_dmul>
    c016:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c018:	9007      	str	r0, [sp, #28]
    c01a:	910a      	str	r1, [sp, #40]	; 0x28
    c01c:	2b00      	cmp	r3, #0
    c01e:	d117      	bne.n	c050 <_strtod_r+0xa08>
    c020:	2380      	movs	r3, #128	; 0x80
    c022:	061b      	lsls	r3, r3, #24
    c024:	18cb      	adds	r3, r1, r3
    c026:	9014      	str	r0, [sp, #80]	; 0x50
    c028:	9315      	str	r3, [sp, #84]	; 0x54
    c02a:	e015      	b.n	c058 <_strtod_r+0xa10>
    c02c:	fffffc03 	.word	0xfffffc03
    c030:	7ff00000 	.word	0x7ff00000
    c034:	fffffbe3 	.word	0xfffffbe3
    c038:	000fffff 	.word	0x000fffff
    c03c:	7fefffff 	.word	0x7fefffff
    c040:	fff00000 	.word	0xfff00000
    c044:	3ff00000 	.word	0x3ff00000
    c048:	bff00000 	.word	0xbff00000
    c04c:	3fe00000 	.word	0x3fe00000
    c050:	9a07      	ldr	r2, [sp, #28]
    c052:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c054:	9214      	str	r2, [sp, #80]	; 0x50
    c056:	9315      	str	r3, [sp, #84]	; 0x54
    c058:	9c14      	ldr	r4, [sp, #80]	; 0x50
    c05a:	9d15      	ldr	r5, [sp, #84]	; 0x54
    c05c:	4b7a      	ldr	r3, [pc, #488]	; (c248 <_strtod_r+0xc00>)
    c05e:	403b      	ands	r3, r7
    c060:	9312      	str	r3, [sp, #72]	; 0x48
    c062:	9a12      	ldr	r2, [sp, #72]	; 0x48
    c064:	4b79      	ldr	r3, [pc, #484]	; (c24c <_strtod_r+0xc04>)
    c066:	429a      	cmp	r2, r3
    c068:	d12b      	bne.n	c0c2 <_strtod_r+0xa7a>
    c06a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    c06c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c06e:	9210      	str	r2, [sp, #64]	; 0x40
    c070:	9311      	str	r3, [sp, #68]	; 0x44
    c072:	4b77      	ldr	r3, [pc, #476]	; (c250 <_strtod_r+0xc08>)
    c074:	1c30      	adds	r0, r6, #0
    c076:	18ff      	adds	r7, r7, r3
    c078:	1c39      	adds	r1, r7, #0
    c07a:	f002 f841 	bl	e100 <__ulp>
    c07e:	1c02      	adds	r2, r0, #0
    c080:	1c0b      	adds	r3, r1, #0
    c082:	1c20      	adds	r0, r4, #0
    c084:	1c29      	adds	r1, r5, #0
    c086:	f7fc fb67 	bl	8758 <__aeabi_dmul>
    c08a:	1c02      	adds	r2, r0, #0
    c08c:	1c0b      	adds	r3, r1, #0
    c08e:	1c30      	adds	r0, r6, #0
    c090:	1c39      	adds	r1, r7, #0
    c092:	f7fb fbfb 	bl	788c <__aeabi_dadd>
    c096:	4b6c      	ldr	r3, [pc, #432]	; (c248 <_strtod_r+0xc00>)
    c098:	4a6e      	ldr	r2, [pc, #440]	; (c254 <_strtod_r+0xc0c>)
    c09a:	1c06      	adds	r6, r0, #0
    c09c:	400b      	ands	r3, r1
    c09e:	4293      	cmp	r3, r2
    c0a0:	d90b      	bls.n	c0ba <_strtod_r+0xa72>
    c0a2:	4b6d      	ldr	r3, [pc, #436]	; (c258 <_strtod_r+0xc10>)
    c0a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
    c0a6:	429a      	cmp	r2, r3
    c0a8:	d103      	bne.n	c0b2 <_strtod_r+0xa6a>
    c0aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c0ac:	3301      	adds	r3, #1
    c0ae:	d100      	bne.n	c0b2 <_strtod_r+0xa6a>
    c0b0:	e52e      	b.n	bb10 <_strtod_r+0x4c8>
    c0b2:	2601      	movs	r6, #1
    c0b4:	4f68      	ldr	r7, [pc, #416]	; (c258 <_strtod_r+0xc10>)
    c0b6:	4276      	negs	r6, r6
    c0b8:	e078      	b.n	c1ac <_strtod_r+0xb64>
    c0ba:	23d4      	movs	r3, #212	; 0xd4
    c0bc:	049b      	lsls	r3, r3, #18
    c0be:	18cf      	adds	r7, r1, r3
    c0c0:	e040      	b.n	c144 <_strtod_r+0xafc>
    c0c2:	9b06      	ldr	r3, [sp, #24]
    c0c4:	2b00      	cmp	r3, #0
    c0c6:	d02b      	beq.n	c120 <_strtod_r+0xad8>
    c0c8:	23d4      	movs	r3, #212	; 0xd4
    c0ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
    c0cc:	04db      	lsls	r3, r3, #19
    c0ce:	429a      	cmp	r2, r3
    c0d0:	d826      	bhi.n	c120 <_strtod_r+0xad8>
    c0d2:	9807      	ldr	r0, [sp, #28]
    c0d4:	990a      	ldr	r1, [sp, #40]	; 0x28
    c0d6:	4a61      	ldr	r2, [pc, #388]	; (c25c <_strtod_r+0xc14>)
    c0d8:	4b61      	ldr	r3, [pc, #388]	; (c260 <_strtod_r+0xc18>)
    c0da:	f7fa fc69 	bl	69b0 <__aeabi_dcmple>
    c0de:	2800      	cmp	r0, #0
    c0e0:	d019      	beq.n	c116 <_strtod_r+0xace>
    c0e2:	9807      	ldr	r0, [sp, #28]
    c0e4:	990a      	ldr	r1, [sp, #40]	; 0x28
    c0e6:	f7fa fce5 	bl	6ab4 <__aeabi_d2uiz>
    c0ea:	2800      	cmp	r0, #0
    c0ec:	d100      	bne.n	c0f0 <_strtod_r+0xaa8>
    c0ee:	3001      	adds	r0, #1
    c0f0:	f7fd f9b8 	bl	9464 <__aeabi_ui2d>
    c0f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c0f6:	9007      	str	r0, [sp, #28]
    c0f8:	910a      	str	r1, [sp, #40]	; 0x28
    c0fa:	2b00      	cmp	r3, #0
    c0fc:	d105      	bne.n	c10a <_strtod_r+0xac2>
    c0fe:	2380      	movs	r3, #128	; 0x80
    c100:	061b      	lsls	r3, r3, #24
    c102:	18cb      	adds	r3, r1, r3
    c104:	9016      	str	r0, [sp, #88]	; 0x58
    c106:	9317      	str	r3, [sp, #92]	; 0x5c
    c108:	e003      	b.n	c112 <_strtod_r+0xaca>
    c10a:	9a07      	ldr	r2, [sp, #28]
    c10c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c10e:	9216      	str	r2, [sp, #88]	; 0x58
    c110:	9317      	str	r3, [sp, #92]	; 0x5c
    c112:	9c16      	ldr	r4, [sp, #88]	; 0x58
    c114:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    c116:	23d6      	movs	r3, #214	; 0xd6
    c118:	9a12      	ldr	r2, [sp, #72]	; 0x48
    c11a:	04db      	lsls	r3, r3, #19
    c11c:	18eb      	adds	r3, r5, r3
    c11e:	1a9d      	subs	r5, r3, r2
    c120:	980e      	ldr	r0, [sp, #56]	; 0x38
    c122:	990f      	ldr	r1, [sp, #60]	; 0x3c
    c124:	f001 ffec 	bl	e100 <__ulp>
    c128:	1c02      	adds	r2, r0, #0
    c12a:	1c0b      	adds	r3, r1, #0
    c12c:	1c20      	adds	r0, r4, #0
    c12e:	1c29      	adds	r1, r5, #0
    c130:	f7fc fb12 	bl	8758 <__aeabi_dmul>
    c134:	1c02      	adds	r2, r0, #0
    c136:	1c0b      	adds	r3, r1, #0
    c138:	980e      	ldr	r0, [sp, #56]	; 0x38
    c13a:	990f      	ldr	r1, [sp, #60]	; 0x3c
    c13c:	f7fb fba6 	bl	788c <__aeabi_dadd>
    c140:	1c06      	adds	r6, r0, #0
    c142:	1c0f      	adds	r7, r1, #0
    c144:	9b06      	ldr	r3, [sp, #24]
    c146:	970e      	str	r7, [sp, #56]	; 0x38
    c148:	2b00      	cmp	r3, #0
    c14a:	d12f      	bne.n	c1ac <_strtod_r+0xb64>
    c14c:	4b3e      	ldr	r3, [pc, #248]	; (c248 <_strtod_r+0xc00>)
    c14e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    c150:	403b      	ands	r3, r7
    c152:	429a      	cmp	r2, r3
    c154:	d12a      	bne.n	c1ac <_strtod_r+0xb64>
    c156:	990a      	ldr	r1, [sp, #40]	; 0x28
    c158:	9807      	ldr	r0, [sp, #28]
    c15a:	f7fd f911 	bl	9380 <__aeabi_d2iz>
    c15e:	f7fd f945 	bl	93ec <__aeabi_i2d>
    c162:	1c0b      	adds	r3, r1, #0
    c164:	1c02      	adds	r2, r0, #0
    c166:	990a      	ldr	r1, [sp, #40]	; 0x28
    c168:	9807      	ldr	r0, [sp, #28]
    c16a:	f7fc fd8f 	bl	8c8c <__aeabi_dsub>
    c16e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c170:	1c04      	adds	r4, r0, #0
    c172:	1c0d      	adds	r5, r1, #0
    c174:	2b00      	cmp	r3, #0
    c176:	d104      	bne.n	c182 <_strtod_r+0xb3a>
    c178:	2e00      	cmp	r6, #0
    c17a:	d102      	bne.n	c182 <_strtod_r+0xb3a>
    c17c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c17e:	031b      	lsls	r3, r3, #12
    c180:	d00e      	beq.n	c1a0 <_strtod_r+0xb58>
    c182:	1c20      	adds	r0, r4, #0
    c184:	1c29      	adds	r1, r5, #0
    c186:	4a37      	ldr	r2, [pc, #220]	; (c264 <_strtod_r+0xc1c>)
    c188:	4b37      	ldr	r3, [pc, #220]	; (c268 <_strtod_r+0xc20>)
    c18a:	f7fa fc07 	bl	699c <__aeabi_dcmplt>
    c18e:	2800      	cmp	r0, #0
    c190:	d132      	bne.n	c1f8 <_strtod_r+0xbb0>
    c192:	1c20      	adds	r0, r4, #0
    c194:	1c29      	adds	r1, r5, #0
    c196:	4a35      	ldr	r2, [pc, #212]	; (c26c <_strtod_r+0xc24>)
    c198:	4b35      	ldr	r3, [pc, #212]	; (c270 <_strtod_r+0xc28>)
    c19a:	f7fa fc13 	bl	69c4 <__aeabi_dcmpgt>
    c19e:	e003      	b.n	c1a8 <_strtod_r+0xb60>
    c1a0:	4a30      	ldr	r2, [pc, #192]	; (c264 <_strtod_r+0xc1c>)
    c1a2:	4b34      	ldr	r3, [pc, #208]	; (c274 <_strtod_r+0xc2c>)
    c1a4:	f7fa fbfa 	bl	699c <__aeabi_dcmplt>
    c1a8:	2800      	cmp	r0, #0
    c1aa:	d125      	bne.n	c1f8 <_strtod_r+0xbb0>
    c1ac:	9803      	ldr	r0, [sp, #12]
    c1ae:	991e      	ldr	r1, [sp, #120]	; 0x78
    c1b0:	f001 fd06 	bl	dbc0 <_Bfree>
    c1b4:	9803      	ldr	r0, [sp, #12]
    c1b6:	9908      	ldr	r1, [sp, #32]
    c1b8:	f001 fd02 	bl	dbc0 <_Bfree>
    c1bc:	9803      	ldr	r0, [sp, #12]
    c1be:	9905      	ldr	r1, [sp, #20]
    c1c0:	f001 fcfe 	bl	dbc0 <_Bfree>
    c1c4:	9803      	ldr	r0, [sp, #12]
    c1c6:	9904      	ldr	r1, [sp, #16]
    c1c8:	f001 fcfa 	bl	dbc0 <_Bfree>
    c1cc:	e55f      	b.n	bc8e <_strtod_r+0x646>
    c1ce:	9b06      	ldr	r3, [sp, #24]
    c1d0:	2b00      	cmp	r3, #0
    c1d2:	d011      	beq.n	c1f8 <_strtod_r+0xbb0>
    c1d4:	4b28      	ldr	r3, [pc, #160]	; (c278 <_strtod_r+0xc30>)
    c1d6:	1c30      	adds	r0, r6, #0
    c1d8:	9311      	str	r3, [sp, #68]	; 0x44
    c1da:	2300      	movs	r3, #0
    c1dc:	9310      	str	r3, [sp, #64]	; 0x40
    c1de:	1c39      	adds	r1, r7, #0
    c1e0:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c1e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c1e4:	f7fc fab8 	bl	8758 <__aeabi_dmul>
    c1e8:	1c06      	adds	r6, r0, #0
    c1ea:	1e0f      	subs	r7, r1, #0
    c1ec:	d104      	bne.n	c1f8 <_strtod_r+0xbb0>
    c1ee:	2800      	cmp	r0, #0
    c1f0:	d102      	bne.n	c1f8 <_strtod_r+0xbb0>
    c1f2:	2322      	movs	r3, #34	; 0x22
    c1f4:	9a03      	ldr	r2, [sp, #12]
    c1f6:	6013      	str	r3, [r2, #0]
    c1f8:	9803      	ldr	r0, [sp, #12]
    c1fa:	991e      	ldr	r1, [sp, #120]	; 0x78
    c1fc:	f001 fce0 	bl	dbc0 <_Bfree>
    c200:	9803      	ldr	r0, [sp, #12]
    c202:	9908      	ldr	r1, [sp, #32]
    c204:	f001 fcdc 	bl	dbc0 <_Bfree>
    c208:	9803      	ldr	r0, [sp, #12]
    c20a:	9905      	ldr	r1, [sp, #20]
    c20c:	f001 fcd8 	bl	dbc0 <_Bfree>
    c210:	9803      	ldr	r0, [sp, #12]
    c212:	990b      	ldr	r1, [sp, #44]	; 0x2c
    c214:	f001 fcd4 	bl	dbc0 <_Bfree>
    c218:	9803      	ldr	r0, [sp, #12]
    c21a:	9904      	ldr	r1, [sp, #16]
    c21c:	f001 fcd0 	bl	dbc0 <_Bfree>
    c220:	9b19      	ldr	r3, [sp, #100]	; 0x64
    c222:	2b00      	cmp	r3, #0
    c224:	d002      	beq.n	c22c <_strtod_r+0xbe4>
    c226:	9b19      	ldr	r3, [sp, #100]	; 0x64
    c228:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    c22a:	601a      	str	r2, [r3, #0]
    c22c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c22e:	2b00      	cmp	r3, #0
    c230:	d004      	beq.n	c23c <_strtod_r+0xbf4>
    c232:	2380      	movs	r3, #128	; 0x80
    c234:	061b      	lsls	r3, r3, #24
    c236:	1c32      	adds	r2, r6, #0
    c238:	18fb      	adds	r3, r7, r3
    c23a:	e001      	b.n	c240 <_strtod_r+0xbf8>
    c23c:	1c32      	adds	r2, r6, #0
    c23e:	1c3b      	adds	r3, r7, #0
    c240:	1c10      	adds	r0, r2, #0
    c242:	1c19      	adds	r1, r3, #0
    c244:	b023      	add	sp, #140	; 0x8c
    c246:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c248:	7ff00000 	.word	0x7ff00000
    c24c:	7fe00000 	.word	0x7fe00000
    c250:	fcb00000 	.word	0xfcb00000
    c254:	7c9fffff 	.word	0x7c9fffff
    c258:	7fefffff 	.word	0x7fefffff
    c25c:	ffc00000 	.word	0xffc00000
    c260:	41dfffff 	.word	0x41dfffff
    c264:	94a03595 	.word	0x94a03595
    c268:	3fdfffff 	.word	0x3fdfffff
    c26c:	35afe535 	.word	0x35afe535
    c270:	3fe00000 	.word	0x3fe00000
    c274:	3fcfffff 	.word	0x3fcfffff
    c278:	39500000 	.word	0x39500000

0000c27c <_strtol_r>:
    c27c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c27e:	1c1e      	adds	r6, r3, #0
    c280:	4b44      	ldr	r3, [pc, #272]	; (c394 <_strtol_r+0x118>)
    c282:	b087      	sub	sp, #28
    c284:	681b      	ldr	r3, [r3, #0]
    c286:	9005      	str	r0, [sp, #20]
    c288:	9302      	str	r3, [sp, #8]
    c28a:	1c0b      	adds	r3, r1, #0
    c28c:	9103      	str	r1, [sp, #12]
    c28e:	9201      	str	r2, [sp, #4]
    c290:	781c      	ldrb	r4, [r3, #0]
    c292:	9a02      	ldr	r2, [sp, #8]
    c294:	1c5d      	adds	r5, r3, #1
    c296:	1912      	adds	r2, r2, r4
    c298:	7850      	ldrb	r0, [r2, #1]
    c29a:	2208      	movs	r2, #8
    c29c:	4010      	ands	r0, r2
    c29e:	d001      	beq.n	c2a4 <_strtol_r+0x28>
    c2a0:	1c2b      	adds	r3, r5, #0
    c2a2:	e7f5      	b.n	c290 <_strtol_r+0x14>
    c2a4:	2c2d      	cmp	r4, #45	; 0x2d
    c2a6:	d104      	bne.n	c2b2 <_strtol_r+0x36>
    c2a8:	1c9d      	adds	r5, r3, #2
    c2aa:	785c      	ldrb	r4, [r3, #1]
    c2ac:	2301      	movs	r3, #1
    c2ae:	9300      	str	r3, [sp, #0]
    c2b0:	e004      	b.n	c2bc <_strtol_r+0x40>
    c2b2:	9000      	str	r0, [sp, #0]
    c2b4:	2c2b      	cmp	r4, #43	; 0x2b
    c2b6:	d101      	bne.n	c2bc <_strtol_r+0x40>
    c2b8:	785c      	ldrb	r4, [r3, #1]
    c2ba:	1c9d      	adds	r5, r3, #2
    c2bc:	2e00      	cmp	r6, #0
    c2be:	d002      	beq.n	c2c6 <_strtol_r+0x4a>
    c2c0:	2e10      	cmp	r6, #16
    c2c2:	d10a      	bne.n	c2da <_strtol_r+0x5e>
    c2c4:	e060      	b.n	c388 <_strtol_r+0x10c>
    c2c6:	2c30      	cmp	r4, #48	; 0x30
    c2c8:	d15c      	bne.n	c384 <_strtol_r+0x108>
    c2ca:	2220      	movs	r2, #32
    c2cc:	782b      	ldrb	r3, [r5, #0]
    c2ce:	4393      	bics	r3, r2
    c2d0:	2b58      	cmp	r3, #88	; 0x58
    c2d2:	d152      	bne.n	c37a <_strtol_r+0xfe>
    c2d4:	2610      	movs	r6, #16
    c2d6:	786c      	ldrb	r4, [r5, #1]
    c2d8:	3502      	adds	r5, #2
    c2da:	9f00      	ldr	r7, [sp, #0]
    c2dc:	1c31      	adds	r1, r6, #0
    c2de:	1e7b      	subs	r3, r7, #1
    c2e0:	419f      	sbcs	r7, r3
    c2e2:	4b2d      	ldr	r3, [pc, #180]	; (c398 <_strtol_r+0x11c>)
    c2e4:	18ff      	adds	r7, r7, r3
    c2e6:	1c38      	adds	r0, r7, #0
    c2e8:	f7fa fa46 	bl	6778 <__aeabi_uidivmod>
    c2ec:	1c38      	adds	r0, r7, #0
    c2ee:	9104      	str	r1, [sp, #16]
    c2f0:	1c31      	adds	r1, r6, #0
    c2f2:	f7fa f9bb 	bl	666c <__aeabi_uidiv>
    c2f6:	2200      	movs	r2, #0
    c2f8:	1c07      	adds	r7, r0, #0
    c2fa:	1c13      	adds	r3, r2, #0
    c2fc:	9902      	ldr	r1, [sp, #8]
    c2fe:	1909      	adds	r1, r1, r4
    c300:	7849      	ldrb	r1, [r1, #1]
    c302:	0748      	lsls	r0, r1, #29
    c304:	d501      	bpl.n	c30a <_strtol_r+0x8e>
    c306:	3c30      	subs	r4, #48	; 0x30
    c308:	e007      	b.n	c31a <_strtol_r+0x9e>
    c30a:	2003      	movs	r0, #3
    c30c:	4008      	ands	r0, r1
    c30e:	d017      	beq.n	c340 <_strtol_r+0xc4>
    c310:	2137      	movs	r1, #55	; 0x37
    c312:	2801      	cmp	r0, #1
    c314:	d000      	beq.n	c318 <_strtol_r+0x9c>
    c316:	3120      	adds	r1, #32
    c318:	1a64      	subs	r4, r4, r1
    c31a:	42b4      	cmp	r4, r6
    c31c:	da10      	bge.n	c340 <_strtol_r+0xc4>
    c31e:	1c51      	adds	r1, r2, #1
    c320:	d00b      	beq.n	c33a <_strtol_r+0xbe>
    c322:	42bb      	cmp	r3, r7
    c324:	d807      	bhi.n	c336 <_strtol_r+0xba>
    c326:	d102      	bne.n	c32e <_strtol_r+0xb2>
    c328:	9a04      	ldr	r2, [sp, #16]
    c32a:	4294      	cmp	r4, r2
    c32c:	dc03      	bgt.n	c336 <_strtol_r+0xba>
    c32e:	4373      	muls	r3, r6
    c330:	2201      	movs	r2, #1
    c332:	18e3      	adds	r3, r4, r3
    c334:	e001      	b.n	c33a <_strtol_r+0xbe>
    c336:	2201      	movs	r2, #1
    c338:	4252      	negs	r2, r2
    c33a:	782c      	ldrb	r4, [r5, #0]
    c33c:	3501      	adds	r5, #1
    c33e:	e7dd      	b.n	c2fc <_strtol_r+0x80>
    c340:	1c18      	adds	r0, r3, #0
    c342:	1c51      	adds	r1, r2, #1
    c344:	d10b      	bne.n	c35e <_strtol_r+0xe2>
    c346:	9800      	ldr	r0, [sp, #0]
    c348:	9a05      	ldr	r2, [sp, #20]
    c34a:	1e43      	subs	r3, r0, #1
    c34c:	4198      	sbcs	r0, r3
    c34e:	4b12      	ldr	r3, [pc, #72]	; (c398 <_strtol_r+0x11c>)
    c350:	18c0      	adds	r0, r0, r3
    c352:	2322      	movs	r3, #34	; 0x22
    c354:	6013      	str	r3, [r2, #0]
    c356:	9b01      	ldr	r3, [sp, #4]
    c358:	2b00      	cmp	r3, #0
    c35a:	d10a      	bne.n	c372 <_strtol_r+0xf6>
    c35c:	e017      	b.n	c38e <_strtol_r+0x112>
    c35e:	9900      	ldr	r1, [sp, #0]
    c360:	2900      	cmp	r1, #0
    c362:	d000      	beq.n	c366 <_strtol_r+0xea>
    c364:	4258      	negs	r0, r3
    c366:	9b01      	ldr	r3, [sp, #4]
    c368:	2b00      	cmp	r3, #0
    c36a:	d010      	beq.n	c38e <_strtol_r+0x112>
    c36c:	9b03      	ldr	r3, [sp, #12]
    c36e:	2a00      	cmp	r2, #0
    c370:	d000      	beq.n	c374 <_strtol_r+0xf8>
    c372:	1e6b      	subs	r3, r5, #1
    c374:	9a01      	ldr	r2, [sp, #4]
    c376:	6013      	str	r3, [r2, #0]
    c378:	e009      	b.n	c38e <_strtol_r+0x112>
    c37a:	2430      	movs	r4, #48	; 0x30
    c37c:	2e00      	cmp	r6, #0
    c37e:	d1ac      	bne.n	c2da <_strtol_r+0x5e>
    c380:	2608      	movs	r6, #8
    c382:	e7aa      	b.n	c2da <_strtol_r+0x5e>
    c384:	260a      	movs	r6, #10
    c386:	e7a8      	b.n	c2da <_strtol_r+0x5e>
    c388:	2c30      	cmp	r4, #48	; 0x30
    c38a:	d1a6      	bne.n	c2da <_strtol_r+0x5e>
    c38c:	e79d      	b.n	c2ca <_strtol_r+0x4e>
    c38e:	b007      	add	sp, #28
    c390:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c392:	46c0      	nop			; (mov r8, r8)
    c394:	20000138 	.word	0x20000138
    c398:	7fffffff 	.word	0x7fffffff

0000c39c <_strtoul_r>:
    c39c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c39e:	1c1e      	adds	r6, r3, #0
    c3a0:	4b3e      	ldr	r3, [pc, #248]	; (c49c <_strtoul_r+0x100>)
    c3a2:	b087      	sub	sp, #28
    c3a4:	681b      	ldr	r3, [r3, #0]
    c3a6:	1c17      	adds	r7, r2, #0
    c3a8:	9302      	str	r3, [sp, #8]
    c3aa:	1c0b      	adds	r3, r1, #0
    c3ac:	9005      	str	r0, [sp, #20]
    c3ae:	9104      	str	r1, [sp, #16]
    c3b0:	781c      	ldrb	r4, [r3, #0]
    c3b2:	9a02      	ldr	r2, [sp, #8]
    c3b4:	1c5d      	adds	r5, r3, #1
    c3b6:	1912      	adds	r2, r2, r4
    c3b8:	7851      	ldrb	r1, [r2, #1]
    c3ba:	2208      	movs	r2, #8
    c3bc:	400a      	ands	r2, r1
    c3be:	d001      	beq.n	c3c4 <_strtoul_r+0x28>
    c3c0:	1c2b      	adds	r3, r5, #0
    c3c2:	e7f5      	b.n	c3b0 <_strtoul_r+0x14>
    c3c4:	2c2d      	cmp	r4, #45	; 0x2d
    c3c6:	d104      	bne.n	c3d2 <_strtoul_r+0x36>
    c3c8:	1c9d      	adds	r5, r3, #2
    c3ca:	785c      	ldrb	r4, [r3, #1]
    c3cc:	2301      	movs	r3, #1
    c3ce:	9301      	str	r3, [sp, #4]
    c3d0:	e004      	b.n	c3dc <_strtoul_r+0x40>
    c3d2:	9201      	str	r2, [sp, #4]
    c3d4:	2c2b      	cmp	r4, #43	; 0x2b
    c3d6:	d101      	bne.n	c3dc <_strtoul_r+0x40>
    c3d8:	785c      	ldrb	r4, [r3, #1]
    c3da:	1c9d      	adds	r5, r3, #2
    c3dc:	2e00      	cmp	r6, #0
    c3de:	d002      	beq.n	c3e6 <_strtoul_r+0x4a>
    c3e0:	2e10      	cmp	r6, #16
    c3e2:	d10a      	bne.n	c3fa <_strtoul_r+0x5e>
    c3e4:	e054      	b.n	c490 <_strtoul_r+0xf4>
    c3e6:	2c30      	cmp	r4, #48	; 0x30
    c3e8:	d150      	bne.n	c48c <_strtoul_r+0xf0>
    c3ea:	2220      	movs	r2, #32
    c3ec:	782b      	ldrb	r3, [r5, #0]
    c3ee:	4393      	bics	r3, r2
    c3f0:	2b58      	cmp	r3, #88	; 0x58
    c3f2:	d146      	bne.n	c482 <_strtoul_r+0xe6>
    c3f4:	2610      	movs	r6, #16
    c3f6:	786c      	ldrb	r4, [r5, #1]
    c3f8:	3502      	adds	r5, #2
    c3fa:	2001      	movs	r0, #1
    c3fc:	1c31      	adds	r1, r6, #0
    c3fe:	4240      	negs	r0, r0
    c400:	f7fa f934 	bl	666c <__aeabi_uidiv>
    c404:	9003      	str	r0, [sp, #12]
    c406:	2001      	movs	r0, #1
    c408:	1c31      	adds	r1, r6, #0
    c40a:	4240      	negs	r0, r0
    c40c:	f7fa f9b4 	bl	6778 <__aeabi_uidivmod>
    c410:	2200      	movs	r2, #0
    c412:	468c      	mov	ip, r1
    c414:	1c13      	adds	r3, r2, #0
    c416:	9902      	ldr	r1, [sp, #8]
    c418:	1909      	adds	r1, r1, r4
    c41a:	7849      	ldrb	r1, [r1, #1]
    c41c:	0748      	lsls	r0, r1, #29
    c41e:	d501      	bpl.n	c424 <_strtoul_r+0x88>
    c420:	3c30      	subs	r4, #48	; 0x30
    c422:	e007      	b.n	c434 <_strtoul_r+0x98>
    c424:	2003      	movs	r0, #3
    c426:	4008      	ands	r0, r1
    c428:	d017      	beq.n	c45a <_strtoul_r+0xbe>
    c42a:	2137      	movs	r1, #55	; 0x37
    c42c:	2801      	cmp	r0, #1
    c42e:	d000      	beq.n	c432 <_strtoul_r+0x96>
    c430:	3120      	adds	r1, #32
    c432:	1a64      	subs	r4, r4, r1
    c434:	42b4      	cmp	r4, r6
    c436:	da10      	bge.n	c45a <_strtoul_r+0xbe>
    c438:	1c51      	adds	r1, r2, #1
    c43a:	d00b      	beq.n	c454 <_strtoul_r+0xb8>
    c43c:	9a03      	ldr	r2, [sp, #12]
    c43e:	4293      	cmp	r3, r2
    c440:	d806      	bhi.n	c450 <_strtoul_r+0xb4>
    c442:	d101      	bne.n	c448 <_strtoul_r+0xac>
    c444:	4564      	cmp	r4, ip
    c446:	dc03      	bgt.n	c450 <_strtoul_r+0xb4>
    c448:	4373      	muls	r3, r6
    c44a:	2201      	movs	r2, #1
    c44c:	18e3      	adds	r3, r4, r3
    c44e:	e001      	b.n	c454 <_strtoul_r+0xb8>
    c450:	2201      	movs	r2, #1
    c452:	4252      	negs	r2, r2
    c454:	782c      	ldrb	r4, [r5, #0]
    c456:	3501      	adds	r5, #1
    c458:	e7dd      	b.n	c416 <_strtoul_r+0x7a>
    c45a:	1c18      	adds	r0, r3, #0
    c45c:	1c51      	adds	r1, r2, #1
    c45e:	d104      	bne.n	c46a <_strtoul_r+0xce>
    c460:	2322      	movs	r3, #34	; 0x22
    c462:	9905      	ldr	r1, [sp, #20]
    c464:	1c10      	adds	r0, r2, #0
    c466:	600b      	str	r3, [r1, #0]
    c468:	e003      	b.n	c472 <_strtoul_r+0xd6>
    c46a:	9901      	ldr	r1, [sp, #4]
    c46c:	2900      	cmp	r1, #0
    c46e:	d000      	beq.n	c472 <_strtoul_r+0xd6>
    c470:	4258      	negs	r0, r3
    c472:	2f00      	cmp	r7, #0
    c474:	d00f      	beq.n	c496 <_strtoul_r+0xfa>
    c476:	9b04      	ldr	r3, [sp, #16]
    c478:	2a00      	cmp	r2, #0
    c47a:	d000      	beq.n	c47e <_strtoul_r+0xe2>
    c47c:	1e6b      	subs	r3, r5, #1
    c47e:	603b      	str	r3, [r7, #0]
    c480:	e009      	b.n	c496 <_strtoul_r+0xfa>
    c482:	2430      	movs	r4, #48	; 0x30
    c484:	2e00      	cmp	r6, #0
    c486:	d1b8      	bne.n	c3fa <_strtoul_r+0x5e>
    c488:	2608      	movs	r6, #8
    c48a:	e7b6      	b.n	c3fa <_strtoul_r+0x5e>
    c48c:	260a      	movs	r6, #10
    c48e:	e7b4      	b.n	c3fa <_strtoul_r+0x5e>
    c490:	2c30      	cmp	r4, #48	; 0x30
    c492:	d1b2      	bne.n	c3fa <_strtoul_r+0x5e>
    c494:	e7a9      	b.n	c3ea <_strtoul_r+0x4e>
    c496:	b007      	add	sp, #28
    c498:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c49a:	46c0      	nop			; (mov r8, r8)
    c49c:	20000138 	.word	0x20000138

0000c4a0 <__submore>:
    c4a0:	1c0b      	adds	r3, r1, #0
    c4a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    c4a4:	6b4d      	ldr	r5, [r1, #52]	; 0x34
    c4a6:	3344      	adds	r3, #68	; 0x44
    c4a8:	1c0c      	adds	r4, r1, #0
    c4aa:	429d      	cmp	r5, r3
    c4ac:	d11b      	bne.n	c4e6 <__submore+0x46>
    c4ae:	2680      	movs	r6, #128	; 0x80
    c4b0:	00f6      	lsls	r6, r6, #3
    c4b2:	1c31      	adds	r1, r6, #0
    c4b4:	f7fd fd42 	bl	9f3c <_malloc_r>
    c4b8:	2800      	cmp	r0, #0
    c4ba:	d102      	bne.n	c4c2 <__submore+0x22>
    c4bc:	2001      	movs	r0, #1
    c4be:	4240      	negs	r0, r0
    c4c0:	e025      	b.n	c50e <__submore+0x6e>
    c4c2:	1c23      	adds	r3, r4, #0
    c4c4:	6360      	str	r0, [r4, #52]	; 0x34
    c4c6:	63a6      	str	r6, [r4, #56]	; 0x38
    c4c8:	3346      	adds	r3, #70	; 0x46
    c4ca:	781a      	ldrb	r2, [r3, #0]
    c4cc:	4b10      	ldr	r3, [pc, #64]	; (c510 <__submore+0x70>)
    c4ce:	54c2      	strb	r2, [r0, r3]
    c4d0:	1c23      	adds	r3, r4, #0
    c4d2:	3345      	adds	r3, #69	; 0x45
    c4d4:	781a      	ldrb	r2, [r3, #0]
    c4d6:	4b0f      	ldr	r3, [pc, #60]	; (c514 <__submore+0x74>)
    c4d8:	54c2      	strb	r2, [r0, r3]
    c4da:	782a      	ldrb	r2, [r5, #0]
    c4dc:	4b0e      	ldr	r3, [pc, #56]	; (c518 <__submore+0x78>)
    c4de:	54c2      	strb	r2, [r0, r3]
    c4e0:	18c0      	adds	r0, r0, r3
    c4e2:	6020      	str	r0, [r4, #0]
    c4e4:	e012      	b.n	c50c <__submore+0x6c>
    c4e6:	6b8e      	ldr	r6, [r1, #56]	; 0x38
    c4e8:	1c29      	adds	r1, r5, #0
    c4ea:	0073      	lsls	r3, r6, #1
    c4ec:	1c1a      	adds	r2, r3, #0
    c4ee:	9301      	str	r3, [sp, #4]
    c4f0:	f001 ff3f 	bl	e372 <_realloc_r>
    c4f4:	1e05      	subs	r5, r0, #0
    c4f6:	d0e1      	beq.n	c4bc <__submore+0x1c>
    c4f8:	1987      	adds	r7, r0, r6
    c4fa:	1c38      	adds	r0, r7, #0
    c4fc:	1c29      	adds	r1, r5, #0
    c4fe:	1c32      	adds	r2, r6, #0
    c500:	f7fd fcc5 	bl	9e8e <memcpy>
    c504:	9b01      	ldr	r3, [sp, #4]
    c506:	6027      	str	r7, [r4, #0]
    c508:	6365      	str	r5, [r4, #52]	; 0x34
    c50a:	63a3      	str	r3, [r4, #56]	; 0x38
    c50c:	2000      	movs	r0, #0
    c50e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    c510:	000003ff 	.word	0x000003ff
    c514:	000003fe 	.word	0x000003fe
    c518:	000003fd 	.word	0x000003fd

0000c51c <__swbuf_r>:
    c51c:	b570      	push	{r4, r5, r6, lr}
    c51e:	1c05      	adds	r5, r0, #0
    c520:	1c0e      	adds	r6, r1, #0
    c522:	1c14      	adds	r4, r2, #0
    c524:	2800      	cmp	r0, #0
    c526:	d004      	beq.n	c532 <__swbuf_r+0x16>
    c528:	6983      	ldr	r3, [r0, #24]
    c52a:	2b00      	cmp	r3, #0
    c52c:	d101      	bne.n	c532 <__swbuf_r+0x16>
    c52e:	f7fd fa65 	bl	99fc <__sinit>
    c532:	4b23      	ldr	r3, [pc, #140]	; (c5c0 <__swbuf_r+0xa4>)
    c534:	429c      	cmp	r4, r3
    c536:	d101      	bne.n	c53c <__swbuf_r+0x20>
    c538:	686c      	ldr	r4, [r5, #4]
    c53a:	e008      	b.n	c54e <__swbuf_r+0x32>
    c53c:	4b21      	ldr	r3, [pc, #132]	; (c5c4 <__swbuf_r+0xa8>)
    c53e:	429c      	cmp	r4, r3
    c540:	d101      	bne.n	c546 <__swbuf_r+0x2a>
    c542:	68ac      	ldr	r4, [r5, #8]
    c544:	e003      	b.n	c54e <__swbuf_r+0x32>
    c546:	4b20      	ldr	r3, [pc, #128]	; (c5c8 <__swbuf_r+0xac>)
    c548:	429c      	cmp	r4, r3
    c54a:	d100      	bne.n	c54e <__swbuf_r+0x32>
    c54c:	68ec      	ldr	r4, [r5, #12]
    c54e:	69a3      	ldr	r3, [r4, #24]
    c550:	60a3      	str	r3, [r4, #8]
    c552:	89a3      	ldrh	r3, [r4, #12]
    c554:	071b      	lsls	r3, r3, #28
    c556:	d50a      	bpl.n	c56e <__swbuf_r+0x52>
    c558:	6923      	ldr	r3, [r4, #16]
    c55a:	2b00      	cmp	r3, #0
    c55c:	d007      	beq.n	c56e <__swbuf_r+0x52>
    c55e:	6823      	ldr	r3, [r4, #0]
    c560:	6922      	ldr	r2, [r4, #16]
    c562:	b2f6      	uxtb	r6, r6
    c564:	1a98      	subs	r0, r3, r2
    c566:	6963      	ldr	r3, [r4, #20]
    c568:	4298      	cmp	r0, r3
    c56a:	db0f      	blt.n	c58c <__swbuf_r+0x70>
    c56c:	e008      	b.n	c580 <__swbuf_r+0x64>
    c56e:	1c28      	adds	r0, r5, #0
    c570:	1c21      	adds	r1, r4, #0
    c572:	f000 f83f 	bl	c5f4 <__swsetup_r>
    c576:	2800      	cmp	r0, #0
    c578:	d0f1      	beq.n	c55e <__swbuf_r+0x42>
    c57a:	2001      	movs	r0, #1
    c57c:	4240      	negs	r0, r0
    c57e:	e01d      	b.n	c5bc <__swbuf_r+0xa0>
    c580:	1c28      	adds	r0, r5, #0
    c582:	1c21      	adds	r1, r4, #0
    c584:	f7fd f9b8 	bl	98f8 <_fflush_r>
    c588:	2800      	cmp	r0, #0
    c58a:	d1f6      	bne.n	c57a <__swbuf_r+0x5e>
    c58c:	68a3      	ldr	r3, [r4, #8]
    c58e:	3001      	adds	r0, #1
    c590:	3b01      	subs	r3, #1
    c592:	60a3      	str	r3, [r4, #8]
    c594:	6823      	ldr	r3, [r4, #0]
    c596:	1c5a      	adds	r2, r3, #1
    c598:	6022      	str	r2, [r4, #0]
    c59a:	701e      	strb	r6, [r3, #0]
    c59c:	6963      	ldr	r3, [r4, #20]
    c59e:	4298      	cmp	r0, r3
    c5a0:	d005      	beq.n	c5ae <__swbuf_r+0x92>
    c5a2:	89a3      	ldrh	r3, [r4, #12]
    c5a4:	1c30      	adds	r0, r6, #0
    c5a6:	07db      	lsls	r3, r3, #31
    c5a8:	d508      	bpl.n	c5bc <__swbuf_r+0xa0>
    c5aa:	2e0a      	cmp	r6, #10
    c5ac:	d106      	bne.n	c5bc <__swbuf_r+0xa0>
    c5ae:	1c28      	adds	r0, r5, #0
    c5b0:	1c21      	adds	r1, r4, #0
    c5b2:	f7fd f9a1 	bl	98f8 <_fflush_r>
    c5b6:	2800      	cmp	r0, #0
    c5b8:	d1df      	bne.n	c57a <__swbuf_r+0x5e>
    c5ba:	1c30      	adds	r0, r6, #0
    c5bc:	bd70      	pop	{r4, r5, r6, pc}
    c5be:	46c0      	nop			; (mov r8, r8)
    c5c0:	0000f9e8 	.word	0x0000f9e8
    c5c4:	0000fa08 	.word	0x0000fa08
    c5c8:	0000fa28 	.word	0x0000fa28

0000c5cc <_write_r>:
    c5cc:	b538      	push	{r3, r4, r5, lr}
    c5ce:	1c05      	adds	r5, r0, #0
    c5d0:	2000      	movs	r0, #0
    c5d2:	4c07      	ldr	r4, [pc, #28]	; (c5f0 <_write_r+0x24>)
    c5d4:	6020      	str	r0, [r4, #0]
    c5d6:	1c08      	adds	r0, r1, #0
    c5d8:	1c11      	adds	r1, r2, #0
    c5da:	1c1a      	adds	r2, r3, #0
    c5dc:	f7f7 fc3c 	bl	3e58 <_write>
    c5e0:	1c43      	adds	r3, r0, #1
    c5e2:	d103      	bne.n	c5ec <_write_r+0x20>
    c5e4:	6823      	ldr	r3, [r4, #0]
    c5e6:	2b00      	cmp	r3, #0
    c5e8:	d000      	beq.n	c5ec <_write_r+0x20>
    c5ea:	602b      	str	r3, [r5, #0]
    c5ec:	bd38      	pop	{r3, r4, r5, pc}
    c5ee:	46c0      	nop			; (mov r8, r8)
    c5f0:	200047c8 	.word	0x200047c8

0000c5f4 <__swsetup_r>:
    c5f4:	4b35      	ldr	r3, [pc, #212]	; (c6cc <__swsetup_r+0xd8>)
    c5f6:	b570      	push	{r4, r5, r6, lr}
    c5f8:	681d      	ldr	r5, [r3, #0]
    c5fa:	1c06      	adds	r6, r0, #0
    c5fc:	1c0c      	adds	r4, r1, #0
    c5fe:	2d00      	cmp	r5, #0
    c600:	d005      	beq.n	c60e <__swsetup_r+0x1a>
    c602:	69ab      	ldr	r3, [r5, #24]
    c604:	2b00      	cmp	r3, #0
    c606:	d102      	bne.n	c60e <__swsetup_r+0x1a>
    c608:	1c28      	adds	r0, r5, #0
    c60a:	f7fd f9f7 	bl	99fc <__sinit>
    c60e:	4b30      	ldr	r3, [pc, #192]	; (c6d0 <__swsetup_r+0xdc>)
    c610:	429c      	cmp	r4, r3
    c612:	d101      	bne.n	c618 <__swsetup_r+0x24>
    c614:	686c      	ldr	r4, [r5, #4]
    c616:	e008      	b.n	c62a <__swsetup_r+0x36>
    c618:	4b2e      	ldr	r3, [pc, #184]	; (c6d4 <__swsetup_r+0xe0>)
    c61a:	429c      	cmp	r4, r3
    c61c:	d101      	bne.n	c622 <__swsetup_r+0x2e>
    c61e:	68ac      	ldr	r4, [r5, #8]
    c620:	e003      	b.n	c62a <__swsetup_r+0x36>
    c622:	4b2d      	ldr	r3, [pc, #180]	; (c6d8 <__swsetup_r+0xe4>)
    c624:	429c      	cmp	r4, r3
    c626:	d100      	bne.n	c62a <__swsetup_r+0x36>
    c628:	68ec      	ldr	r4, [r5, #12]
    c62a:	89a3      	ldrh	r3, [r4, #12]
    c62c:	b29a      	uxth	r2, r3
    c62e:	0711      	lsls	r1, r2, #28
    c630:	d423      	bmi.n	c67a <__swsetup_r+0x86>
    c632:	06d1      	lsls	r1, r2, #27
    c634:	d407      	bmi.n	c646 <__swsetup_r+0x52>
    c636:	2209      	movs	r2, #9
    c638:	2001      	movs	r0, #1
    c63a:	6032      	str	r2, [r6, #0]
    c63c:	3237      	adds	r2, #55	; 0x37
    c63e:	4313      	orrs	r3, r2
    c640:	81a3      	strh	r3, [r4, #12]
    c642:	4240      	negs	r0, r0
    c644:	e040      	b.n	c6c8 <__swsetup_r+0xd4>
    c646:	0753      	lsls	r3, r2, #29
    c648:	d513      	bpl.n	c672 <__swsetup_r+0x7e>
    c64a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    c64c:	2900      	cmp	r1, #0
    c64e:	d008      	beq.n	c662 <__swsetup_r+0x6e>
    c650:	1c23      	adds	r3, r4, #0
    c652:	3344      	adds	r3, #68	; 0x44
    c654:	4299      	cmp	r1, r3
    c656:	d002      	beq.n	c65e <__swsetup_r+0x6a>
    c658:	1c30      	adds	r0, r6, #0
    c65a:	f7fd fc29 	bl	9eb0 <_free_r>
    c65e:	2300      	movs	r3, #0
    c660:	6363      	str	r3, [r4, #52]	; 0x34
    c662:	2224      	movs	r2, #36	; 0x24
    c664:	89a3      	ldrh	r3, [r4, #12]
    c666:	4393      	bics	r3, r2
    c668:	81a3      	strh	r3, [r4, #12]
    c66a:	2300      	movs	r3, #0
    c66c:	6063      	str	r3, [r4, #4]
    c66e:	6923      	ldr	r3, [r4, #16]
    c670:	6023      	str	r3, [r4, #0]
    c672:	2208      	movs	r2, #8
    c674:	89a3      	ldrh	r3, [r4, #12]
    c676:	4313      	orrs	r3, r2
    c678:	81a3      	strh	r3, [r4, #12]
    c67a:	6923      	ldr	r3, [r4, #16]
    c67c:	2b00      	cmp	r3, #0
    c67e:	d10b      	bne.n	c698 <__swsetup_r+0xa4>
    c680:	23a0      	movs	r3, #160	; 0xa0
    c682:	89a2      	ldrh	r2, [r4, #12]
    c684:	009b      	lsls	r3, r3, #2
    c686:	4013      	ands	r3, r2
    c688:	2280      	movs	r2, #128	; 0x80
    c68a:	0092      	lsls	r2, r2, #2
    c68c:	4293      	cmp	r3, r2
    c68e:	d003      	beq.n	c698 <__swsetup_r+0xa4>
    c690:	1c30      	adds	r0, r6, #0
    c692:	1c21      	adds	r1, r4, #0
    c694:	f7fd fb84 	bl	9da0 <__smakebuf_r>
    c698:	2301      	movs	r3, #1
    c69a:	89a2      	ldrh	r2, [r4, #12]
    c69c:	4013      	ands	r3, r2
    c69e:	d005      	beq.n	c6ac <__swsetup_r+0xb8>
    c6a0:	2300      	movs	r3, #0
    c6a2:	60a3      	str	r3, [r4, #8]
    c6a4:	6963      	ldr	r3, [r4, #20]
    c6a6:	425b      	negs	r3, r3
    c6a8:	61a3      	str	r3, [r4, #24]
    c6aa:	e003      	b.n	c6b4 <__swsetup_r+0xc0>
    c6ac:	0791      	lsls	r1, r2, #30
    c6ae:	d400      	bmi.n	c6b2 <__swsetup_r+0xbe>
    c6b0:	6963      	ldr	r3, [r4, #20]
    c6b2:	60a3      	str	r3, [r4, #8]
    c6b4:	2000      	movs	r0, #0
    c6b6:	6923      	ldr	r3, [r4, #16]
    c6b8:	4283      	cmp	r3, r0
    c6ba:	d105      	bne.n	c6c8 <__swsetup_r+0xd4>
    c6bc:	0613      	lsls	r3, r2, #24
    c6be:	d503      	bpl.n	c6c8 <__swsetup_r+0xd4>
    c6c0:	2340      	movs	r3, #64	; 0x40
    c6c2:	431a      	orrs	r2, r3
    c6c4:	81a2      	strh	r2, [r4, #12]
    c6c6:	3801      	subs	r0, #1
    c6c8:	bd70      	pop	{r4, r5, r6, pc}
    c6ca:	46c0      	nop			; (mov r8, r8)
    c6cc:	20000134 	.word	0x20000134
    c6d0:	0000f9e8 	.word	0x0000f9e8
    c6d4:	0000fa08 	.word	0x0000fa08
    c6d8:	0000fa28 	.word	0x0000fa28

0000c6dc <_close_r>:
    c6dc:	b538      	push	{r3, r4, r5, lr}
    c6de:	2300      	movs	r3, #0
    c6e0:	4c06      	ldr	r4, [pc, #24]	; (c6fc <_close_r+0x20>)
    c6e2:	1c05      	adds	r5, r0, #0
    c6e4:	1c08      	adds	r0, r1, #0
    c6e6:	6023      	str	r3, [r4, #0]
    c6e8:	f7f7 fba0 	bl	3e2c <_close>
    c6ec:	1c43      	adds	r3, r0, #1
    c6ee:	d103      	bne.n	c6f8 <_close_r+0x1c>
    c6f0:	6823      	ldr	r3, [r4, #0]
    c6f2:	2b00      	cmp	r3, #0
    c6f4:	d000      	beq.n	c6f8 <_close_r+0x1c>
    c6f6:	602b      	str	r3, [r5, #0]
    c6f8:	bd38      	pop	{r3, r4, r5, pc}
    c6fa:	46c0      	nop			; (mov r8, r8)
    c6fc:	200047c8 	.word	0x200047c8

0000c700 <quorem>:
    c700:	b5f0      	push	{r4, r5, r6, r7, lr}
    c702:	6903      	ldr	r3, [r0, #16]
    c704:	690c      	ldr	r4, [r1, #16]
    c706:	b089      	sub	sp, #36	; 0x24
    c708:	2600      	movs	r6, #0
    c70a:	42a3      	cmp	r3, r4
    c70c:	db7c      	blt.n	c808 <quorem+0x108>
    c70e:	1c0b      	adds	r3, r1, #0
    c710:	3c01      	subs	r4, #1
    c712:	3314      	adds	r3, #20
    c714:	00a5      	lsls	r5, r4, #2
    c716:	9303      	str	r3, [sp, #12]
    c718:	195b      	adds	r3, r3, r5
    c71a:	9304      	str	r3, [sp, #16]
    c71c:	1c03      	adds	r3, r0, #0
    c71e:	3314      	adds	r3, #20
    c720:	9301      	str	r3, [sp, #4]
    c722:	195d      	adds	r5, r3, r5
    c724:	9b04      	ldr	r3, [sp, #16]
    c726:	9107      	str	r1, [sp, #28]
    c728:	681b      	ldr	r3, [r3, #0]
    c72a:	9002      	str	r0, [sp, #8]
    c72c:	1c59      	adds	r1, r3, #1
    c72e:	6828      	ldr	r0, [r5, #0]
    c730:	9305      	str	r3, [sp, #20]
    c732:	f7f9 ff9b 	bl	666c <__aeabi_uidiv>
    c736:	1e07      	subs	r7, r0, #0
    c738:	42b7      	cmp	r7, r6
    c73a:	d035      	beq.n	c7a8 <quorem+0xa8>
    c73c:	9b03      	ldr	r3, [sp, #12]
    c73e:	9801      	ldr	r0, [sp, #4]
    c740:	469c      	mov	ip, r3
    c742:	9605      	str	r6, [sp, #20]
    c744:	4663      	mov	r3, ip
    c746:	cb04      	ldmia	r3!, {r2}
    c748:	b291      	uxth	r1, r2
    c74a:	4379      	muls	r1, r7
    c74c:	0c12      	lsrs	r2, r2, #16
    c74e:	437a      	muls	r2, r7
    c750:	1871      	adds	r1, r6, r1
    c752:	0c0e      	lsrs	r6, r1, #16
    c754:	469c      	mov	ip, r3
    c756:	18b3      	adds	r3, r6, r2
    c758:	9306      	str	r3, [sp, #24]
    c75a:	8802      	ldrh	r2, [r0, #0]
    c75c:	0c1e      	lsrs	r6, r3, #16
    c75e:	9b05      	ldr	r3, [sp, #20]
    c760:	b289      	uxth	r1, r1
    c762:	18d2      	adds	r2, r2, r3
    c764:	6803      	ldr	r3, [r0, #0]
    c766:	1a52      	subs	r2, r2, r1
    c768:	0c19      	lsrs	r1, r3, #16
    c76a:	466b      	mov	r3, sp
    c76c:	8b1b      	ldrh	r3, [r3, #24]
    c76e:	1acb      	subs	r3, r1, r3
    c770:	1411      	asrs	r1, r2, #16
    c772:	185b      	adds	r3, r3, r1
    c774:	1419      	asrs	r1, r3, #16
    c776:	b292      	uxth	r2, r2
    c778:	041b      	lsls	r3, r3, #16
    c77a:	431a      	orrs	r2, r3
    c77c:	9b04      	ldr	r3, [sp, #16]
    c77e:	9105      	str	r1, [sp, #20]
    c780:	c004      	stmia	r0!, {r2}
    c782:	4563      	cmp	r3, ip
    c784:	d2de      	bcs.n	c744 <quorem+0x44>
    c786:	682b      	ldr	r3, [r5, #0]
    c788:	2b00      	cmp	r3, #0
    c78a:	d10d      	bne.n	c7a8 <quorem+0xa8>
    c78c:	1c23      	adds	r3, r4, #0
    c78e:	9a01      	ldr	r2, [sp, #4]
    c790:	3d04      	subs	r5, #4
    c792:	4295      	cmp	r5, r2
    c794:	d803      	bhi.n	c79e <quorem+0x9e>
    c796:	9a02      	ldr	r2, [sp, #8]
    c798:	1c1c      	adds	r4, r3, #0
    c79a:	6113      	str	r3, [r2, #16]
    c79c:	e004      	b.n	c7a8 <quorem+0xa8>
    c79e:	682a      	ldr	r2, [r5, #0]
    c7a0:	2a00      	cmp	r2, #0
    c7a2:	d1f8      	bne.n	c796 <quorem+0x96>
    c7a4:	3b01      	subs	r3, #1
    c7a6:	e7f2      	b.n	c78e <quorem+0x8e>
    c7a8:	9802      	ldr	r0, [sp, #8]
    c7aa:	9907      	ldr	r1, [sp, #28]
    c7ac:	f001 fc22 	bl	dff4 <__mcmp>
    c7b0:	2800      	cmp	r0, #0
    c7b2:	db28      	blt.n	c806 <quorem+0x106>
    c7b4:	2000      	movs	r0, #0
    c7b6:	9901      	ldr	r1, [sp, #4]
    c7b8:	9a03      	ldr	r2, [sp, #12]
    c7ba:	3701      	adds	r7, #1
    c7bc:	ca20      	ldmia	r2!, {r5}
    c7be:	880b      	ldrh	r3, [r1, #0]
    c7c0:	1818      	adds	r0, r3, r0
    c7c2:	b2ab      	uxth	r3, r5
    c7c4:	1ac3      	subs	r3, r0, r3
    c7c6:	6808      	ldr	r0, [r1, #0]
    c7c8:	0c2d      	lsrs	r5, r5, #16
    c7ca:	0c00      	lsrs	r0, r0, #16
    c7cc:	1b45      	subs	r5, r0, r5
    c7ce:	141e      	asrs	r6, r3, #16
    c7d0:	19ad      	adds	r5, r5, r6
    c7d2:	1428      	asrs	r0, r5, #16
    c7d4:	b29b      	uxth	r3, r3
    c7d6:	042d      	lsls	r5, r5, #16
    c7d8:	432b      	orrs	r3, r5
    c7da:	c108      	stmia	r1!, {r3}
    c7dc:	9b04      	ldr	r3, [sp, #16]
    c7de:	4293      	cmp	r3, r2
    c7e0:	d2ec      	bcs.n	c7bc <quorem+0xbc>
    c7e2:	9a01      	ldr	r2, [sp, #4]
    c7e4:	00a3      	lsls	r3, r4, #2
    c7e6:	18d3      	adds	r3, r2, r3
    c7e8:	681a      	ldr	r2, [r3, #0]
    c7ea:	2a00      	cmp	r2, #0
    c7ec:	d10b      	bne.n	c806 <quorem+0x106>
    c7ee:	9a01      	ldr	r2, [sp, #4]
    c7f0:	3b04      	subs	r3, #4
    c7f2:	4293      	cmp	r3, r2
    c7f4:	d802      	bhi.n	c7fc <quorem+0xfc>
    c7f6:	9b02      	ldr	r3, [sp, #8]
    c7f8:	611c      	str	r4, [r3, #16]
    c7fa:	e004      	b.n	c806 <quorem+0x106>
    c7fc:	681a      	ldr	r2, [r3, #0]
    c7fe:	2a00      	cmp	r2, #0
    c800:	d1f9      	bne.n	c7f6 <quorem+0xf6>
    c802:	3c01      	subs	r4, #1
    c804:	e7f3      	b.n	c7ee <quorem+0xee>
    c806:	1c3e      	adds	r6, r7, #0
    c808:	1c30      	adds	r0, r6, #0
    c80a:	b009      	add	sp, #36	; 0x24
    c80c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0000c810 <_dtoa_r>:
    c810:	b5f0      	push	{r4, r5, r6, r7, lr}
    c812:	1c16      	adds	r6, r2, #0
    c814:	1c1f      	adds	r7, r3, #0
    c816:	6a44      	ldr	r4, [r0, #36]	; 0x24
    c818:	b09b      	sub	sp, #108	; 0x6c
    c81a:	9008      	str	r0, [sp, #32]
    c81c:	9d23      	ldr	r5, [sp, #140]	; 0x8c
    c81e:	9606      	str	r6, [sp, #24]
    c820:	9707      	str	r7, [sp, #28]
    c822:	2c00      	cmp	r4, #0
    c824:	d108      	bne.n	c838 <_dtoa_r+0x28>
    c826:	2010      	movs	r0, #16
    c828:	f7fd fb12 	bl	9e50 <malloc>
    c82c:	9b08      	ldr	r3, [sp, #32]
    c82e:	6258      	str	r0, [r3, #36]	; 0x24
    c830:	6044      	str	r4, [r0, #4]
    c832:	6084      	str	r4, [r0, #8]
    c834:	6004      	str	r4, [r0, #0]
    c836:	60c4      	str	r4, [r0, #12]
    c838:	9b08      	ldr	r3, [sp, #32]
    c83a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c83c:	6819      	ldr	r1, [r3, #0]
    c83e:	2900      	cmp	r1, #0
    c840:	d00b      	beq.n	c85a <_dtoa_r+0x4a>
    c842:	685a      	ldr	r2, [r3, #4]
    c844:	2301      	movs	r3, #1
    c846:	4093      	lsls	r3, r2
    c848:	604a      	str	r2, [r1, #4]
    c84a:	608b      	str	r3, [r1, #8]
    c84c:	9808      	ldr	r0, [sp, #32]
    c84e:	f001 f9b7 	bl	dbc0 <_Bfree>
    c852:	2200      	movs	r2, #0
    c854:	9b08      	ldr	r3, [sp, #32]
    c856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c858:	601a      	str	r2, [r3, #0]
    c85a:	9b07      	ldr	r3, [sp, #28]
    c85c:	2b00      	cmp	r3, #0
    c85e:	da05      	bge.n	c86c <_dtoa_r+0x5c>
    c860:	2301      	movs	r3, #1
    c862:	602b      	str	r3, [r5, #0]
    c864:	007b      	lsls	r3, r7, #1
    c866:	085b      	lsrs	r3, r3, #1
    c868:	9307      	str	r3, [sp, #28]
    c86a:	e001      	b.n	c870 <_dtoa_r+0x60>
    c86c:	2300      	movs	r3, #0
    c86e:	602b      	str	r3, [r5, #0]
    c870:	9c07      	ldr	r4, [sp, #28]
    c872:	4bc6      	ldr	r3, [pc, #792]	; (cb8c <_dtoa_r+0x37c>)
    c874:	1c22      	adds	r2, r4, #0
    c876:	9317      	str	r3, [sp, #92]	; 0x5c
    c878:	401a      	ands	r2, r3
    c87a:	429a      	cmp	r2, r3
    c87c:	d119      	bne.n	c8b2 <_dtoa_r+0xa2>
    c87e:	4bc4      	ldr	r3, [pc, #784]	; (cb90 <_dtoa_r+0x380>)
    c880:	9a22      	ldr	r2, [sp, #136]	; 0x88
    c882:	6013      	str	r3, [r2, #0]
    c884:	9a06      	ldr	r2, [sp, #24]
    c886:	4bc3      	ldr	r3, [pc, #780]	; (cb94 <_dtoa_r+0x384>)
    c888:	2a00      	cmp	r2, #0
    c88a:	d102      	bne.n	c892 <_dtoa_r+0x82>
    c88c:	0324      	lsls	r4, r4, #12
    c88e:	d100      	bne.n	c892 <_dtoa_r+0x82>
    c890:	4bc1      	ldr	r3, [pc, #772]	; (cb98 <_dtoa_r+0x388>)
    c892:	9a24      	ldr	r2, [sp, #144]	; 0x90
    c894:	1c18      	adds	r0, r3, #0
    c896:	2a00      	cmp	r2, #0
    c898:	d101      	bne.n	c89e <_dtoa_r+0x8e>
    c89a:	f000 fdb6 	bl	d40a <_dtoa_r+0xbfa>
    c89e:	78d9      	ldrb	r1, [r3, #3]
    c8a0:	1cda      	adds	r2, r3, #3
    c8a2:	2900      	cmp	r1, #0
    c8a4:	d000      	beq.n	c8a8 <_dtoa_r+0x98>
    c8a6:	3205      	adds	r2, #5
    c8a8:	9924      	ldr	r1, [sp, #144]	; 0x90
    c8aa:	1c18      	adds	r0, r3, #0
    c8ac:	600a      	str	r2, [r1, #0]
    c8ae:	f000 fdac 	bl	d40a <_dtoa_r+0xbfa>
    c8b2:	9e06      	ldr	r6, [sp, #24]
    c8b4:	9f07      	ldr	r7, [sp, #28]
    c8b6:	2200      	movs	r2, #0
    c8b8:	1c30      	adds	r0, r6, #0
    c8ba:	1c39      	adds	r1, r7, #0
    c8bc:	2300      	movs	r3, #0
    c8be:	f7fa f867 	bl	6990 <__aeabi_dcmpeq>
    c8c2:	1e05      	subs	r5, r0, #0
    c8c4:	d00e      	beq.n	c8e4 <_dtoa_r+0xd4>
    c8c6:	2301      	movs	r3, #1
    c8c8:	9a22      	ldr	r2, [sp, #136]	; 0x88
    c8ca:	6013      	str	r3, [r2, #0]
    c8cc:	4bb3      	ldr	r3, [pc, #716]	; (cb9c <_dtoa_r+0x38c>)
    c8ce:	9a24      	ldr	r2, [sp, #144]	; 0x90
    c8d0:	1c18      	adds	r0, r3, #0
    c8d2:	2a00      	cmp	r2, #0
    c8d4:	d101      	bne.n	c8da <_dtoa_r+0xca>
    c8d6:	f000 fd98 	bl	d40a <_dtoa_r+0xbfa>
    c8da:	4ab1      	ldr	r2, [pc, #708]	; (cba0 <_dtoa_r+0x390>)
    c8dc:	9924      	ldr	r1, [sp, #144]	; 0x90
    c8de:	600a      	str	r2, [r1, #0]
    c8e0:	f000 fd93 	bl	d40a <_dtoa_r+0xbfa>
    c8e4:	ab19      	add	r3, sp, #100	; 0x64
    c8e6:	9300      	str	r3, [sp, #0]
    c8e8:	ab18      	add	r3, sp, #96	; 0x60
    c8ea:	9301      	str	r3, [sp, #4]
    c8ec:	9808      	ldr	r0, [sp, #32]
    c8ee:	1c32      	adds	r2, r6, #0
    c8f0:	1c3b      	adds	r3, r7, #0
    c8f2:	f001 fc7b 	bl	e1ec <__d2b>
    c8f6:	0061      	lsls	r1, r4, #1
    c8f8:	900a      	str	r0, [sp, #40]	; 0x28
    c8fa:	0d49      	lsrs	r1, r1, #21
    c8fc:	d009      	beq.n	c912 <_dtoa_r+0x102>
    c8fe:	0338      	lsls	r0, r7, #12
    c900:	4ca8      	ldr	r4, [pc, #672]	; (cba4 <_dtoa_r+0x394>)
    c902:	0b00      	lsrs	r0, r0, #12
    c904:	4304      	orrs	r4, r0
    c906:	48a8      	ldr	r0, [pc, #672]	; (cba8 <_dtoa_r+0x398>)
    c908:	1c32      	adds	r2, r6, #0
    c90a:	1c23      	adds	r3, r4, #0
    c90c:	180e      	adds	r6, r1, r0
    c90e:	9516      	str	r5, [sp, #88]	; 0x58
    c910:	e01c      	b.n	c94c <_dtoa_r+0x13c>
    c912:	9b18      	ldr	r3, [sp, #96]	; 0x60
    c914:	9a19      	ldr	r2, [sp, #100]	; 0x64
    c916:	189e      	adds	r6, r3, r2
    c918:	4ba4      	ldr	r3, [pc, #656]	; (cbac <_dtoa_r+0x39c>)
    c91a:	429e      	cmp	r6, r3
    c91c:	db09      	blt.n	c932 <_dtoa_r+0x122>
    c91e:	4ba4      	ldr	r3, [pc, #656]	; (cbb0 <_dtoa_r+0x3a0>)
    c920:	18f0      	adds	r0, r6, r3
    c922:	9b06      	ldr	r3, [sp, #24]
    c924:	40c3      	lsrs	r3, r0
    c926:	1c18      	adds	r0, r3, #0
    c928:	4ba2      	ldr	r3, [pc, #648]	; (cbb4 <_dtoa_r+0x3a4>)
    c92a:	1b9b      	subs	r3, r3, r6
    c92c:	409c      	lsls	r4, r3
    c92e:	4320      	orrs	r0, r4
    c930:	e004      	b.n	c93c <_dtoa_r+0x12c>
    c932:	48a1      	ldr	r0, [pc, #644]	; (cbb8 <_dtoa_r+0x3a8>)
    c934:	9b06      	ldr	r3, [sp, #24]
    c936:	1b80      	subs	r0, r0, r6
    c938:	4083      	lsls	r3, r0
    c93a:	1c18      	adds	r0, r3, #0
    c93c:	f7fc fd92 	bl	9464 <__aeabi_ui2d>
    c940:	4c9e      	ldr	r4, [pc, #632]	; (cbbc <_dtoa_r+0x3ac>)
    c942:	1c02      	adds	r2, r0, #0
    c944:	190b      	adds	r3, r1, r4
    c946:	2101      	movs	r1, #1
    c948:	3e01      	subs	r6, #1
    c94a:	9116      	str	r1, [sp, #88]	; 0x58
    c94c:	1c10      	adds	r0, r2, #0
    c94e:	1c19      	adds	r1, r3, #0
    c950:	2200      	movs	r2, #0
    c952:	4b9b      	ldr	r3, [pc, #620]	; (cbc0 <_dtoa_r+0x3b0>)
    c954:	f7fc f99a 	bl	8c8c <__aeabi_dsub>
    c958:	4a9a      	ldr	r2, [pc, #616]	; (cbc4 <_dtoa_r+0x3b4>)
    c95a:	4b9b      	ldr	r3, [pc, #620]	; (cbc8 <_dtoa_r+0x3b8>)
    c95c:	f7fb fefc 	bl	8758 <__aeabi_dmul>
    c960:	4a9a      	ldr	r2, [pc, #616]	; (cbcc <_dtoa_r+0x3bc>)
    c962:	4b9b      	ldr	r3, [pc, #620]	; (cbd0 <_dtoa_r+0x3c0>)
    c964:	f7fa ff92 	bl	788c <__aeabi_dadd>
    c968:	1c04      	adds	r4, r0, #0
    c96a:	1c30      	adds	r0, r6, #0
    c96c:	1c0d      	adds	r5, r1, #0
    c96e:	f7fc fd3d 	bl	93ec <__aeabi_i2d>
    c972:	4a98      	ldr	r2, [pc, #608]	; (cbd4 <_dtoa_r+0x3c4>)
    c974:	4b98      	ldr	r3, [pc, #608]	; (cbd8 <_dtoa_r+0x3c8>)
    c976:	f7fb feef 	bl	8758 <__aeabi_dmul>
    c97a:	1c02      	adds	r2, r0, #0
    c97c:	1c0b      	adds	r3, r1, #0
    c97e:	1c20      	adds	r0, r4, #0
    c980:	1c29      	adds	r1, r5, #0
    c982:	f7fa ff83 	bl	788c <__aeabi_dadd>
    c986:	1c04      	adds	r4, r0, #0
    c988:	1c0d      	adds	r5, r1, #0
    c98a:	f7fc fcf9 	bl	9380 <__aeabi_d2iz>
    c98e:	1c29      	adds	r1, r5, #0
    c990:	9003      	str	r0, [sp, #12]
    c992:	2200      	movs	r2, #0
    c994:	1c20      	adds	r0, r4, #0
    c996:	2300      	movs	r3, #0
    c998:	f7fa f800 	bl	699c <__aeabi_dcmplt>
    c99c:	2800      	cmp	r0, #0
    c99e:	d00d      	beq.n	c9bc <_dtoa_r+0x1ac>
    c9a0:	9803      	ldr	r0, [sp, #12]
    c9a2:	f7fc fd23 	bl	93ec <__aeabi_i2d>
    c9a6:	1c02      	adds	r2, r0, #0
    c9a8:	1c0b      	adds	r3, r1, #0
    c9aa:	1c20      	adds	r0, r4, #0
    c9ac:	1c29      	adds	r1, r5, #0
    c9ae:	f7f9 ffef 	bl	6990 <__aeabi_dcmpeq>
    c9b2:	4243      	negs	r3, r0
    c9b4:	4143      	adcs	r3, r0
    c9b6:	9a03      	ldr	r2, [sp, #12]
    c9b8:	1ad3      	subs	r3, r2, r3
    c9ba:	9303      	str	r3, [sp, #12]
    c9bc:	2301      	movs	r3, #1
    c9be:	9313      	str	r3, [sp, #76]	; 0x4c
    c9c0:	9b03      	ldr	r3, [sp, #12]
    c9c2:	2b16      	cmp	r3, #22
    c9c4:	d811      	bhi.n	c9ea <_dtoa_r+0x1da>
    c9c6:	4a85      	ldr	r2, [pc, #532]	; (cbdc <_dtoa_r+0x3cc>)
    c9c8:	00db      	lsls	r3, r3, #3
    c9ca:	18d3      	adds	r3, r2, r3
    c9cc:	6818      	ldr	r0, [r3, #0]
    c9ce:	6859      	ldr	r1, [r3, #4]
    c9d0:	9a06      	ldr	r2, [sp, #24]
    c9d2:	9b07      	ldr	r3, [sp, #28]
    c9d4:	f7f9 fff6 	bl	69c4 <__aeabi_dcmpgt>
    c9d8:	2800      	cmp	r0, #0
    c9da:	d005      	beq.n	c9e8 <_dtoa_r+0x1d8>
    c9dc:	9b03      	ldr	r3, [sp, #12]
    c9de:	3b01      	subs	r3, #1
    c9e0:	9303      	str	r3, [sp, #12]
    c9e2:	2300      	movs	r3, #0
    c9e4:	9313      	str	r3, [sp, #76]	; 0x4c
    c9e6:	e000      	b.n	c9ea <_dtoa_r+0x1da>
    c9e8:	9013      	str	r0, [sp, #76]	; 0x4c
    c9ea:	9b18      	ldr	r3, [sp, #96]	; 0x60
    c9ec:	1b9e      	subs	r6, r3, r6
    c9ee:	2300      	movs	r3, #0
    c9f0:	930d      	str	r3, [sp, #52]	; 0x34
    c9f2:	3e01      	subs	r6, #1
    c9f4:	960e      	str	r6, [sp, #56]	; 0x38
    c9f6:	d504      	bpl.n	ca02 <_dtoa_r+0x1f2>
    c9f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c9fa:	425b      	negs	r3, r3
    c9fc:	930d      	str	r3, [sp, #52]	; 0x34
    c9fe:	2300      	movs	r3, #0
    ca00:	930e      	str	r3, [sp, #56]	; 0x38
    ca02:	9b03      	ldr	r3, [sp, #12]
    ca04:	2b00      	cmp	r3, #0
    ca06:	db08      	blt.n	ca1a <_dtoa_r+0x20a>
    ca08:	9a03      	ldr	r2, [sp, #12]
    ca0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ca0c:	4694      	mov	ip, r2
    ca0e:	4463      	add	r3, ip
    ca10:	930e      	str	r3, [sp, #56]	; 0x38
    ca12:	2300      	movs	r3, #0
    ca14:	9212      	str	r2, [sp, #72]	; 0x48
    ca16:	930f      	str	r3, [sp, #60]	; 0x3c
    ca18:	e007      	b.n	ca2a <_dtoa_r+0x21a>
    ca1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ca1c:	9a03      	ldr	r2, [sp, #12]
    ca1e:	1a9b      	subs	r3, r3, r2
    ca20:	930d      	str	r3, [sp, #52]	; 0x34
    ca22:	4253      	negs	r3, r2
    ca24:	930f      	str	r3, [sp, #60]	; 0x3c
    ca26:	2300      	movs	r3, #0
    ca28:	9312      	str	r3, [sp, #72]	; 0x48
    ca2a:	9b20      	ldr	r3, [sp, #128]	; 0x80
    ca2c:	2501      	movs	r5, #1
    ca2e:	2b09      	cmp	r3, #9
    ca30:	d827      	bhi.n	ca82 <_dtoa_r+0x272>
    ca32:	2b05      	cmp	r3, #5
    ca34:	dd02      	ble.n	ca3c <_dtoa_r+0x22c>
    ca36:	2500      	movs	r5, #0
    ca38:	3b04      	subs	r3, #4
    ca3a:	9320      	str	r3, [sp, #128]	; 0x80
    ca3c:	9b20      	ldr	r3, [sp, #128]	; 0x80
    ca3e:	1e98      	subs	r0, r3, #2
    ca40:	2803      	cmp	r0, #3
    ca42:	d823      	bhi.n	ca8c <_dtoa_r+0x27c>
    ca44:	f002 f806 	bl	ea54 <__gnu_thumb1_case_uqi>
    ca48:	10040e02 	.word	0x10040e02
    ca4c:	2300      	movs	r3, #0
    ca4e:	e000      	b.n	ca52 <_dtoa_r+0x242>
    ca50:	2301      	movs	r3, #1
    ca52:	9310      	str	r3, [sp, #64]	; 0x40
    ca54:	9b21      	ldr	r3, [sp, #132]	; 0x84
    ca56:	2b00      	cmp	r3, #0
    ca58:	dc21      	bgt.n	ca9e <_dtoa_r+0x28e>
    ca5a:	2301      	movs	r3, #1
    ca5c:	930b      	str	r3, [sp, #44]	; 0x2c
    ca5e:	9309      	str	r3, [sp, #36]	; 0x24
    ca60:	1c1a      	adds	r2, r3, #0
    ca62:	e01a      	b.n	ca9a <_dtoa_r+0x28a>
    ca64:	2300      	movs	r3, #0
    ca66:	e000      	b.n	ca6a <_dtoa_r+0x25a>
    ca68:	2301      	movs	r3, #1
    ca6a:	9a03      	ldr	r2, [sp, #12]
    ca6c:	9310      	str	r3, [sp, #64]	; 0x40
    ca6e:	4694      	mov	ip, r2
    ca70:	9b21      	ldr	r3, [sp, #132]	; 0x84
    ca72:	4463      	add	r3, ip
    ca74:	930b      	str	r3, [sp, #44]	; 0x2c
    ca76:	3301      	adds	r3, #1
    ca78:	9309      	str	r3, [sp, #36]	; 0x24
    ca7a:	2b00      	cmp	r3, #0
    ca7c:	dc12      	bgt.n	caa4 <_dtoa_r+0x294>
    ca7e:	2301      	movs	r3, #1
    ca80:	e010      	b.n	caa4 <_dtoa_r+0x294>
    ca82:	2300      	movs	r3, #0
    ca84:	9510      	str	r5, [sp, #64]	; 0x40
    ca86:	9320      	str	r3, [sp, #128]	; 0x80
    ca88:	3b01      	subs	r3, #1
    ca8a:	e002      	b.n	ca92 <_dtoa_r+0x282>
    ca8c:	2301      	movs	r3, #1
    ca8e:	9310      	str	r3, [sp, #64]	; 0x40
    ca90:	3b02      	subs	r3, #2
    ca92:	2200      	movs	r2, #0
    ca94:	930b      	str	r3, [sp, #44]	; 0x2c
    ca96:	9309      	str	r3, [sp, #36]	; 0x24
    ca98:	3313      	adds	r3, #19
    ca9a:	9221      	str	r2, [sp, #132]	; 0x84
    ca9c:	e002      	b.n	caa4 <_dtoa_r+0x294>
    ca9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
    caa0:	930b      	str	r3, [sp, #44]	; 0x2c
    caa2:	9309      	str	r3, [sp, #36]	; 0x24
    caa4:	9a08      	ldr	r2, [sp, #32]
    caa6:	6a54      	ldr	r4, [r2, #36]	; 0x24
    caa8:	2200      	movs	r2, #0
    caaa:	6062      	str	r2, [r4, #4]
    caac:	3204      	adds	r2, #4
    caae:	1c11      	adds	r1, r2, #0
    cab0:	3114      	adds	r1, #20
    cab2:	4299      	cmp	r1, r3
    cab4:	d804      	bhi.n	cac0 <_dtoa_r+0x2b0>
    cab6:	6861      	ldr	r1, [r4, #4]
    cab8:	0052      	lsls	r2, r2, #1
    caba:	3101      	adds	r1, #1
    cabc:	6061      	str	r1, [r4, #4]
    cabe:	e7f6      	b.n	caae <_dtoa_r+0x29e>
    cac0:	9808      	ldr	r0, [sp, #32]
    cac2:	6861      	ldr	r1, [r4, #4]
    cac4:	f001 f844 	bl	db50 <_Balloc>
    cac8:	9b08      	ldr	r3, [sp, #32]
    caca:	6020      	str	r0, [r4, #0]
    cacc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    cace:	681b      	ldr	r3, [r3, #0]
    cad0:	930c      	str	r3, [sp, #48]	; 0x30
    cad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cad4:	2b0e      	cmp	r3, #14
    cad6:	d900      	bls.n	cada <_dtoa_r+0x2ca>
    cad8:	e188      	b.n	cdec <_dtoa_r+0x5dc>
    cada:	2d00      	cmp	r5, #0
    cadc:	d100      	bne.n	cae0 <_dtoa_r+0x2d0>
    cade:	e185      	b.n	cdec <_dtoa_r+0x5dc>
    cae0:	9b06      	ldr	r3, [sp, #24]
    cae2:	9c07      	ldr	r4, [sp, #28]
    cae4:	9314      	str	r3, [sp, #80]	; 0x50
    cae6:	9415      	str	r4, [sp, #84]	; 0x54
    cae8:	9b03      	ldr	r3, [sp, #12]
    caea:	2b00      	cmp	r3, #0
    caec:	dd30      	ble.n	cb50 <_dtoa_r+0x340>
    caee:	220f      	movs	r2, #15
    caf0:	493a      	ldr	r1, [pc, #232]	; (cbdc <_dtoa_r+0x3cc>)
    caf2:	4013      	ands	r3, r2
    caf4:	00db      	lsls	r3, r3, #3
    caf6:	18cb      	adds	r3, r1, r3
    caf8:	685c      	ldr	r4, [r3, #4]
    cafa:	681b      	ldr	r3, [r3, #0]
    cafc:	9304      	str	r3, [sp, #16]
    cafe:	9405      	str	r4, [sp, #20]
    cb00:	9b03      	ldr	r3, [sp, #12]
    cb02:	2702      	movs	r7, #2
    cb04:	111d      	asrs	r5, r3, #4
    cb06:	06eb      	lsls	r3, r5, #27
    cb08:	d50a      	bpl.n	cb20 <_dtoa_r+0x310>
    cb0a:	9814      	ldr	r0, [sp, #80]	; 0x50
    cb0c:	9915      	ldr	r1, [sp, #84]	; 0x54
    cb0e:	4b34      	ldr	r3, [pc, #208]	; (cbe0 <_dtoa_r+0x3d0>)
    cb10:	4015      	ands	r5, r2
    cb12:	6a1a      	ldr	r2, [r3, #32]
    cb14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    cb16:	f7fb f9e1 	bl	7edc <__aeabi_ddiv>
    cb1a:	9006      	str	r0, [sp, #24]
    cb1c:	9107      	str	r1, [sp, #28]
    cb1e:	3701      	adds	r7, #1
    cb20:	4c2f      	ldr	r4, [pc, #188]	; (cbe0 <_dtoa_r+0x3d0>)
    cb22:	2d00      	cmp	r5, #0
    cb24:	d00d      	beq.n	cb42 <_dtoa_r+0x332>
    cb26:	07eb      	lsls	r3, r5, #31
    cb28:	d508      	bpl.n	cb3c <_dtoa_r+0x32c>
    cb2a:	9804      	ldr	r0, [sp, #16]
    cb2c:	9905      	ldr	r1, [sp, #20]
    cb2e:	6822      	ldr	r2, [r4, #0]
    cb30:	6863      	ldr	r3, [r4, #4]
    cb32:	f7fb fe11 	bl	8758 <__aeabi_dmul>
    cb36:	9004      	str	r0, [sp, #16]
    cb38:	9105      	str	r1, [sp, #20]
    cb3a:	3701      	adds	r7, #1
    cb3c:	106d      	asrs	r5, r5, #1
    cb3e:	3408      	adds	r4, #8
    cb40:	e7ef      	b.n	cb22 <_dtoa_r+0x312>
    cb42:	9806      	ldr	r0, [sp, #24]
    cb44:	9907      	ldr	r1, [sp, #28]
    cb46:	9a04      	ldr	r2, [sp, #16]
    cb48:	9b05      	ldr	r3, [sp, #20]
    cb4a:	f7fb f9c7 	bl	7edc <__aeabi_ddiv>
    cb4e:	e049      	b.n	cbe4 <_dtoa_r+0x3d4>
    cb50:	9b03      	ldr	r3, [sp, #12]
    cb52:	2702      	movs	r7, #2
    cb54:	425d      	negs	r5, r3
    cb56:	2d00      	cmp	r5, #0
    cb58:	d046      	beq.n	cbe8 <_dtoa_r+0x3d8>
    cb5a:	9814      	ldr	r0, [sp, #80]	; 0x50
    cb5c:	9915      	ldr	r1, [sp, #84]	; 0x54
    cb5e:	230f      	movs	r3, #15
    cb60:	4a1e      	ldr	r2, [pc, #120]	; (cbdc <_dtoa_r+0x3cc>)
    cb62:	402b      	ands	r3, r5
    cb64:	00db      	lsls	r3, r3, #3
    cb66:	18d3      	adds	r3, r2, r3
    cb68:	681a      	ldr	r2, [r3, #0]
    cb6a:	685b      	ldr	r3, [r3, #4]
    cb6c:	f7fb fdf4 	bl	8758 <__aeabi_dmul>
    cb70:	4c1b      	ldr	r4, [pc, #108]	; (cbe0 <_dtoa_r+0x3d0>)
    cb72:	112d      	asrs	r5, r5, #4
    cb74:	2d00      	cmp	r5, #0
    cb76:	d035      	beq.n	cbe4 <_dtoa_r+0x3d4>
    cb78:	07eb      	lsls	r3, r5, #31
    cb7a:	d504      	bpl.n	cb86 <_dtoa_r+0x376>
    cb7c:	6822      	ldr	r2, [r4, #0]
    cb7e:	6863      	ldr	r3, [r4, #4]
    cb80:	3701      	adds	r7, #1
    cb82:	f7fb fde9 	bl	8758 <__aeabi_dmul>
    cb86:	106d      	asrs	r5, r5, #1
    cb88:	3408      	adds	r4, #8
    cb8a:	e7f3      	b.n	cb74 <_dtoa_r+0x364>
    cb8c:	7ff00000 	.word	0x7ff00000
    cb90:	0000270f 	.word	0x0000270f
    cb94:	0000fc1e 	.word	0x0000fc1e
    cb98:	0000fc15 	.word	0x0000fc15
    cb9c:	0000faba 	.word	0x0000faba
    cba0:	0000fabb 	.word	0x0000fabb
    cba4:	3ff00000 	.word	0x3ff00000
    cba8:	fffffc01 	.word	0xfffffc01
    cbac:	fffffbef 	.word	0xfffffbef
    cbb0:	00000412 	.word	0x00000412
    cbb4:	fffffc0e 	.word	0xfffffc0e
    cbb8:	fffffbee 	.word	0xfffffbee
    cbbc:	fe100000 	.word	0xfe100000
    cbc0:	3ff80000 	.word	0x3ff80000
    cbc4:	636f4361 	.word	0x636f4361
    cbc8:	3fd287a7 	.word	0x3fd287a7
    cbcc:	8b60c8b3 	.word	0x8b60c8b3
    cbd0:	3fc68a28 	.word	0x3fc68a28
    cbd4:	509f79fb 	.word	0x509f79fb
    cbd8:	3fd34413 	.word	0x3fd34413
    cbdc:	0000fc30 	.word	0x0000fc30
    cbe0:	0000fcf8 	.word	0x0000fcf8
    cbe4:	9006      	str	r0, [sp, #24]
    cbe6:	9107      	str	r1, [sp, #28]
    cbe8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    cbea:	2b00      	cmp	r3, #0
    cbec:	d01e      	beq.n	cc2c <_dtoa_r+0x41c>
    cbee:	9c06      	ldr	r4, [sp, #24]
    cbf0:	9d07      	ldr	r5, [sp, #28]
    cbf2:	2200      	movs	r2, #0
    cbf4:	1c20      	adds	r0, r4, #0
    cbf6:	1c29      	adds	r1, r5, #0
    cbf8:	4bce      	ldr	r3, [pc, #824]	; (cf34 <_dtoa_r+0x724>)
    cbfa:	f7f9 fecf 	bl	699c <__aeabi_dcmplt>
    cbfe:	2800      	cmp	r0, #0
    cc00:	d014      	beq.n	cc2c <_dtoa_r+0x41c>
    cc02:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cc04:	2b00      	cmp	r3, #0
    cc06:	d011      	beq.n	cc2c <_dtoa_r+0x41c>
    cc08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cc0a:	2b00      	cmp	r3, #0
    cc0c:	dc00      	bgt.n	cc10 <_dtoa_r+0x400>
    cc0e:	e0e9      	b.n	cde4 <_dtoa_r+0x5d4>
    cc10:	9b03      	ldr	r3, [sp, #12]
    cc12:	1c29      	adds	r1, r5, #0
    cc14:	3b01      	subs	r3, #1
    cc16:	9311      	str	r3, [sp, #68]	; 0x44
    cc18:	1c20      	adds	r0, r4, #0
    cc1a:	2200      	movs	r2, #0
    cc1c:	4bc6      	ldr	r3, [pc, #792]	; (cf38 <_dtoa_r+0x728>)
    cc1e:	f7fb fd9b 	bl	8758 <__aeabi_dmul>
    cc22:	3701      	adds	r7, #1
    cc24:	9006      	str	r0, [sp, #24]
    cc26:	9107      	str	r1, [sp, #28]
    cc28:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    cc2a:	e002      	b.n	cc32 <_dtoa_r+0x422>
    cc2c:	9b03      	ldr	r3, [sp, #12]
    cc2e:	9d09      	ldr	r5, [sp, #36]	; 0x24
    cc30:	9311      	str	r3, [sp, #68]	; 0x44
    cc32:	1c38      	adds	r0, r7, #0
    cc34:	9b06      	ldr	r3, [sp, #24]
    cc36:	9c07      	ldr	r4, [sp, #28]
    cc38:	9304      	str	r3, [sp, #16]
    cc3a:	9405      	str	r4, [sp, #20]
    cc3c:	f7fc fbd6 	bl	93ec <__aeabi_i2d>
    cc40:	9a04      	ldr	r2, [sp, #16]
    cc42:	9b05      	ldr	r3, [sp, #20]
    cc44:	f7fb fd88 	bl	8758 <__aeabi_dmul>
    cc48:	2200      	movs	r2, #0
    cc4a:	4bbc      	ldr	r3, [pc, #752]	; (cf3c <_dtoa_r+0x72c>)
    cc4c:	f7fa fe1e 	bl	788c <__aeabi_dadd>
    cc50:	9006      	str	r0, [sp, #24]
    cc52:	9107      	str	r1, [sp, #28]
    cc54:	9e06      	ldr	r6, [sp, #24]
    cc56:	9f07      	ldr	r7, [sp, #28]
    cc58:	9b07      	ldr	r3, [sp, #28]
    cc5a:	4ab9      	ldr	r2, [pc, #740]	; (cf40 <_dtoa_r+0x730>)
    cc5c:	189c      	adds	r4, r3, r2
    cc5e:	2d00      	cmp	r5, #0
    cc60:	d11c      	bne.n	cc9c <_dtoa_r+0x48c>
    cc62:	9804      	ldr	r0, [sp, #16]
    cc64:	9905      	ldr	r1, [sp, #20]
    cc66:	2200      	movs	r2, #0
    cc68:	4bb6      	ldr	r3, [pc, #728]	; (cf44 <_dtoa_r+0x734>)
    cc6a:	f7fc f80f 	bl	8c8c <__aeabi_dsub>
    cc6e:	1c32      	adds	r2, r6, #0
    cc70:	1c23      	adds	r3, r4, #0
    cc72:	9004      	str	r0, [sp, #16]
    cc74:	9105      	str	r1, [sp, #20]
    cc76:	f7f9 fea5 	bl	69c4 <__aeabi_dcmpgt>
    cc7a:	2800      	cmp	r0, #0
    cc7c:	d000      	beq.n	cc80 <_dtoa_r+0x470>
    cc7e:	e263      	b.n	d148 <_dtoa_r+0x938>
    cc80:	9804      	ldr	r0, [sp, #16]
    cc82:	9905      	ldr	r1, [sp, #20]
    cc84:	1c32      	adds	r2, r6, #0
    cc86:	4eb0      	ldr	r6, [pc, #704]	; (cf48 <_dtoa_r+0x738>)
    cc88:	9c07      	ldr	r4, [sp, #28]
    cc8a:	46b4      	mov	ip, r6
    cc8c:	4464      	add	r4, ip
    cc8e:	1c23      	adds	r3, r4, #0
    cc90:	f7f9 fe84 	bl	699c <__aeabi_dcmplt>
    cc94:	2800      	cmp	r0, #0
    cc96:	d000      	beq.n	cc9a <_dtoa_r+0x48a>
    cc98:	e24c      	b.n	d134 <_dtoa_r+0x924>
    cc9a:	e0a3      	b.n	cde4 <_dtoa_r+0x5d4>
    cc9c:	4aab      	ldr	r2, [pc, #684]	; (cf4c <_dtoa_r+0x73c>)
    cc9e:	1e6b      	subs	r3, r5, #1
    cca0:	9910      	ldr	r1, [sp, #64]	; 0x40
    cca2:	00db      	lsls	r3, r3, #3
    cca4:	18d3      	adds	r3, r2, r3
    cca6:	2900      	cmp	r1, #0
    cca8:	d04e      	beq.n	cd48 <_dtoa_r+0x538>
    ccaa:	681a      	ldr	r2, [r3, #0]
    ccac:	685b      	ldr	r3, [r3, #4]
    ccae:	2000      	movs	r0, #0
    ccb0:	49a7      	ldr	r1, [pc, #668]	; (cf50 <_dtoa_r+0x740>)
    ccb2:	f7fb f913 	bl	7edc <__aeabi_ddiv>
    ccb6:	1c32      	adds	r2, r6, #0
    ccb8:	1c23      	adds	r3, r4, #0
    ccba:	f7fb ffe7 	bl	8c8c <__aeabi_dsub>
    ccbe:	9e04      	ldr	r6, [sp, #16]
    ccc0:	9f05      	ldr	r7, [sp, #20]
    ccc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ccc4:	9006      	str	r0, [sp, #24]
    ccc6:	9107      	str	r1, [sp, #28]
    ccc8:	9304      	str	r3, [sp, #16]
    ccca:	1c39      	adds	r1, r7, #0
    cccc:	1c30      	adds	r0, r6, #0
    ccce:	f7fc fb57 	bl	9380 <__aeabi_d2iz>
    ccd2:	1c04      	adds	r4, r0, #0
    ccd4:	f7fc fb8a 	bl	93ec <__aeabi_i2d>
    ccd8:	1c02      	adds	r2, r0, #0
    ccda:	1c0b      	adds	r3, r1, #0
    ccdc:	1c30      	adds	r0, r6, #0
    ccde:	1c39      	adds	r1, r7, #0
    cce0:	f7fb ffd4 	bl	8c8c <__aeabi_dsub>
    cce4:	9b04      	ldr	r3, [sp, #16]
    cce6:	3430      	adds	r4, #48	; 0x30
    cce8:	3301      	adds	r3, #1
    ccea:	9304      	str	r3, [sp, #16]
    ccec:	3b01      	subs	r3, #1
    ccee:	701c      	strb	r4, [r3, #0]
    ccf0:	9a06      	ldr	r2, [sp, #24]
    ccf2:	9b07      	ldr	r3, [sp, #28]
    ccf4:	1c06      	adds	r6, r0, #0
    ccf6:	1c0f      	adds	r7, r1, #0
    ccf8:	f7f9 fe50 	bl	699c <__aeabi_dcmplt>
    ccfc:	2800      	cmp	r0, #0
    ccfe:	d000      	beq.n	cd02 <_dtoa_r+0x4f2>
    cd00:	e361      	b.n	d3c6 <_dtoa_r+0xbb6>
    cd02:	1c32      	adds	r2, r6, #0
    cd04:	1c3b      	adds	r3, r7, #0
    cd06:	2000      	movs	r0, #0
    cd08:	498a      	ldr	r1, [pc, #552]	; (cf34 <_dtoa_r+0x724>)
    cd0a:	f7fb ffbf 	bl	8c8c <__aeabi_dsub>
    cd0e:	9a06      	ldr	r2, [sp, #24]
    cd10:	9b07      	ldr	r3, [sp, #28]
    cd12:	f7f9 fe43 	bl	699c <__aeabi_dcmplt>
    cd16:	2800      	cmp	r0, #0
    cd18:	d000      	beq.n	cd1c <_dtoa_r+0x50c>
    cd1a:	e0cd      	b.n	ceb8 <_dtoa_r+0x6a8>
    cd1c:	9b04      	ldr	r3, [sp, #16]
    cd1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    cd20:	1a9b      	subs	r3, r3, r2
    cd22:	42ab      	cmp	r3, r5
    cd24:	da5e      	bge.n	cde4 <_dtoa_r+0x5d4>
    cd26:	9806      	ldr	r0, [sp, #24]
    cd28:	9907      	ldr	r1, [sp, #28]
    cd2a:	2200      	movs	r2, #0
    cd2c:	4b82      	ldr	r3, [pc, #520]	; (cf38 <_dtoa_r+0x728>)
    cd2e:	f7fb fd13 	bl	8758 <__aeabi_dmul>
    cd32:	2200      	movs	r2, #0
    cd34:	9006      	str	r0, [sp, #24]
    cd36:	9107      	str	r1, [sp, #28]
    cd38:	4b7f      	ldr	r3, [pc, #508]	; (cf38 <_dtoa_r+0x728>)
    cd3a:	1c30      	adds	r0, r6, #0
    cd3c:	1c39      	adds	r1, r7, #0
    cd3e:	f7fb fd0b 	bl	8758 <__aeabi_dmul>
    cd42:	1c06      	adds	r6, r0, #0
    cd44:	1c0f      	adds	r7, r1, #0
    cd46:	e7c0      	b.n	ccca <_dtoa_r+0x4ba>
    cd48:	6818      	ldr	r0, [r3, #0]
    cd4a:	6859      	ldr	r1, [r3, #4]
    cd4c:	1c32      	adds	r2, r6, #0
    cd4e:	1c23      	adds	r3, r4, #0
    cd50:	f7fb fd02 	bl	8758 <__aeabi_dmul>
    cd54:	9e04      	ldr	r6, [sp, #16]
    cd56:	9f05      	ldr	r7, [sp, #20]
    cd58:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    cd5a:	9006      	str	r0, [sp, #24]
    cd5c:	9107      	str	r1, [sp, #28]
    cd5e:	1963      	adds	r3, r4, r5
    cd60:	9304      	str	r3, [sp, #16]
    cd62:	1c39      	adds	r1, r7, #0
    cd64:	1c30      	adds	r0, r6, #0
    cd66:	f7fc fb0b 	bl	9380 <__aeabi_d2iz>
    cd6a:	1c05      	adds	r5, r0, #0
    cd6c:	f7fc fb3e 	bl	93ec <__aeabi_i2d>
    cd70:	1c0b      	adds	r3, r1, #0
    cd72:	1c02      	adds	r2, r0, #0
    cd74:	1c39      	adds	r1, r7, #0
    cd76:	1c30      	adds	r0, r6, #0
    cd78:	f7fb ff88 	bl	8c8c <__aeabi_dsub>
    cd7c:	3530      	adds	r5, #48	; 0x30
    cd7e:	9b04      	ldr	r3, [sp, #16]
    cd80:	7025      	strb	r5, [r4, #0]
    cd82:	3401      	adds	r4, #1
    cd84:	1c06      	adds	r6, r0, #0
    cd86:	1c0f      	adds	r7, r1, #0
    cd88:	42a3      	cmp	r3, r4
    cd8a:	d124      	bne.n	cdd6 <_dtoa_r+0x5c6>
    cd8c:	2200      	movs	r2, #0
    cd8e:	9806      	ldr	r0, [sp, #24]
    cd90:	9907      	ldr	r1, [sp, #28]
    cd92:	4b6f      	ldr	r3, [pc, #444]	; (cf50 <_dtoa_r+0x740>)
    cd94:	f7fa fd7a 	bl	788c <__aeabi_dadd>
    cd98:	1c02      	adds	r2, r0, #0
    cd9a:	1c0b      	adds	r3, r1, #0
    cd9c:	1c30      	adds	r0, r6, #0
    cd9e:	1c39      	adds	r1, r7, #0
    cda0:	f7f9 fe10 	bl	69c4 <__aeabi_dcmpgt>
    cda4:	2800      	cmp	r0, #0
    cda6:	d000      	beq.n	cdaa <_dtoa_r+0x59a>
    cda8:	e086      	b.n	ceb8 <_dtoa_r+0x6a8>
    cdaa:	9a06      	ldr	r2, [sp, #24]
    cdac:	9b07      	ldr	r3, [sp, #28]
    cdae:	2000      	movs	r0, #0
    cdb0:	4967      	ldr	r1, [pc, #412]	; (cf50 <_dtoa_r+0x740>)
    cdb2:	f7fb ff6b 	bl	8c8c <__aeabi_dsub>
    cdb6:	1c02      	adds	r2, r0, #0
    cdb8:	1c0b      	adds	r3, r1, #0
    cdba:	1c30      	adds	r0, r6, #0
    cdbc:	1c39      	adds	r1, r7, #0
    cdbe:	f7f9 fded 	bl	699c <__aeabi_dcmplt>
    cdc2:	2800      	cmp	r0, #0
    cdc4:	d00e      	beq.n	cde4 <_dtoa_r+0x5d4>
    cdc6:	9b04      	ldr	r3, [sp, #16]
    cdc8:	3b01      	subs	r3, #1
    cdca:	781a      	ldrb	r2, [r3, #0]
    cdcc:	2a30      	cmp	r2, #48	; 0x30
    cdce:	d000      	beq.n	cdd2 <_dtoa_r+0x5c2>
    cdd0:	e2f9      	b.n	d3c6 <_dtoa_r+0xbb6>
    cdd2:	9304      	str	r3, [sp, #16]
    cdd4:	e7f7      	b.n	cdc6 <_dtoa_r+0x5b6>
    cdd6:	2200      	movs	r2, #0
    cdd8:	4b57      	ldr	r3, [pc, #348]	; (cf38 <_dtoa_r+0x728>)
    cdda:	f7fb fcbd 	bl	8758 <__aeabi_dmul>
    cdde:	1c06      	adds	r6, r0, #0
    cde0:	1c0f      	adds	r7, r1, #0
    cde2:	e7be      	b.n	cd62 <_dtoa_r+0x552>
    cde4:	9b14      	ldr	r3, [sp, #80]	; 0x50
    cde6:	9c15      	ldr	r4, [sp, #84]	; 0x54
    cde8:	9306      	str	r3, [sp, #24]
    cdea:	9407      	str	r4, [sp, #28]
    cdec:	9b19      	ldr	r3, [sp, #100]	; 0x64
    cdee:	2b00      	cmp	r3, #0
    cdf0:	da00      	bge.n	cdf4 <_dtoa_r+0x5e4>
    cdf2:	e086      	b.n	cf02 <_dtoa_r+0x6f2>
    cdf4:	9a03      	ldr	r2, [sp, #12]
    cdf6:	2a0e      	cmp	r2, #14
    cdf8:	dd00      	ble.n	cdfc <_dtoa_r+0x5ec>
    cdfa:	e082      	b.n	cf02 <_dtoa_r+0x6f2>
    cdfc:	00d3      	lsls	r3, r2, #3
    cdfe:	4a53      	ldr	r2, [pc, #332]	; (cf4c <_dtoa_r+0x73c>)
    ce00:	18d3      	adds	r3, r2, r3
    ce02:	681e      	ldr	r6, [r3, #0]
    ce04:	685f      	ldr	r7, [r3, #4]
    ce06:	9b21      	ldr	r3, [sp, #132]	; 0x84
    ce08:	2b00      	cmp	r3, #0
    ce0a:	da14      	bge.n	ce36 <_dtoa_r+0x626>
    ce0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ce0e:	2b00      	cmp	r3, #0
    ce10:	dc11      	bgt.n	ce36 <_dtoa_r+0x626>
    ce12:	d000      	beq.n	ce16 <_dtoa_r+0x606>
    ce14:	e190      	b.n	d138 <_dtoa_r+0x928>
    ce16:	1c30      	adds	r0, r6, #0
    ce18:	1c39      	adds	r1, r7, #0
    ce1a:	2200      	movs	r2, #0
    ce1c:	4b49      	ldr	r3, [pc, #292]	; (cf44 <_dtoa_r+0x734>)
    ce1e:	f7fb fc9b 	bl	8758 <__aeabi_dmul>
    ce22:	9a06      	ldr	r2, [sp, #24]
    ce24:	9b07      	ldr	r3, [sp, #28]
    ce26:	f7f9 fdd7 	bl	69d8 <__aeabi_dcmpge>
    ce2a:	9f09      	ldr	r7, [sp, #36]	; 0x24
    ce2c:	1c3e      	adds	r6, r7, #0
    ce2e:	2800      	cmp	r0, #0
    ce30:	d000      	beq.n	ce34 <_dtoa_r+0x624>
    ce32:	e183      	b.n	d13c <_dtoa_r+0x92c>
    ce34:	e18c      	b.n	d150 <_dtoa_r+0x940>
    ce36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ce38:	9c06      	ldr	r4, [sp, #24]
    ce3a:	9d07      	ldr	r5, [sp, #28]
    ce3c:	9304      	str	r3, [sp, #16]
    ce3e:	1c32      	adds	r2, r6, #0
    ce40:	1c3b      	adds	r3, r7, #0
    ce42:	1c20      	adds	r0, r4, #0
    ce44:	1c29      	adds	r1, r5, #0
    ce46:	f7fb f849 	bl	7edc <__aeabi_ddiv>
    ce4a:	f7fc fa99 	bl	9380 <__aeabi_d2iz>
    ce4e:	9006      	str	r0, [sp, #24]
    ce50:	f7fc facc 	bl	93ec <__aeabi_i2d>
    ce54:	1c32      	adds	r2, r6, #0
    ce56:	1c3b      	adds	r3, r7, #0
    ce58:	f7fb fc7e 	bl	8758 <__aeabi_dmul>
    ce5c:	1c02      	adds	r2, r0, #0
    ce5e:	1c0b      	adds	r3, r1, #0
    ce60:	1c20      	adds	r0, r4, #0
    ce62:	1c29      	adds	r1, r5, #0
    ce64:	f7fb ff12 	bl	8c8c <__aeabi_dsub>
    ce68:	1c0b      	adds	r3, r1, #0
    ce6a:	9904      	ldr	r1, [sp, #16]
    ce6c:	1c02      	adds	r2, r0, #0
    ce6e:	9806      	ldr	r0, [sp, #24]
    ce70:	3101      	adds	r1, #1
    ce72:	9104      	str	r1, [sp, #16]
    ce74:	3030      	adds	r0, #48	; 0x30
    ce76:	3901      	subs	r1, #1
    ce78:	7008      	strb	r0, [r1, #0]
    ce7a:	980c      	ldr	r0, [sp, #48]	; 0x30
    ce7c:	9904      	ldr	r1, [sp, #16]
    ce7e:	1a09      	subs	r1, r1, r0
    ce80:	9809      	ldr	r0, [sp, #36]	; 0x24
    ce82:	4281      	cmp	r1, r0
    ce84:	d12e      	bne.n	cee4 <_dtoa_r+0x6d4>
    ce86:	1c10      	adds	r0, r2, #0
    ce88:	1c19      	adds	r1, r3, #0
    ce8a:	f7fa fcff 	bl	788c <__aeabi_dadd>
    ce8e:	1c32      	adds	r2, r6, #0
    ce90:	1c3b      	adds	r3, r7, #0
    ce92:	1c04      	adds	r4, r0, #0
    ce94:	1c0d      	adds	r5, r1, #0
    ce96:	f7f9 fd95 	bl	69c4 <__aeabi_dcmpgt>
    ce9a:	2800      	cmp	r0, #0
    ce9c:	d110      	bne.n	cec0 <_dtoa_r+0x6b0>
    ce9e:	1c20      	adds	r0, r4, #0
    cea0:	1c29      	adds	r1, r5, #0
    cea2:	1c32      	adds	r2, r6, #0
    cea4:	1c3b      	adds	r3, r7, #0
    cea6:	f7f9 fd73 	bl	6990 <__aeabi_dcmpeq>
    ceaa:	2800      	cmp	r0, #0
    ceac:	d100      	bne.n	ceb0 <_dtoa_r+0x6a0>
    ceae:	e28c      	b.n	d3ca <_dtoa_r+0xbba>
    ceb0:	9b06      	ldr	r3, [sp, #24]
    ceb2:	07db      	lsls	r3, r3, #31
    ceb4:	d404      	bmi.n	cec0 <_dtoa_r+0x6b0>
    ceb6:	e288      	b.n	d3ca <_dtoa_r+0xbba>
    ceb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ceba:	9303      	str	r3, [sp, #12]
    cebc:	e000      	b.n	cec0 <_dtoa_r+0x6b0>
    cebe:	9304      	str	r3, [sp, #16]
    cec0:	9b04      	ldr	r3, [sp, #16]
    cec2:	3b01      	subs	r3, #1
    cec4:	781a      	ldrb	r2, [r3, #0]
    cec6:	2a39      	cmp	r2, #57	; 0x39
    cec8:	d108      	bne.n	cedc <_dtoa_r+0x6cc>
    ceca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    cecc:	4293      	cmp	r3, r2
    cece:	d1f6      	bne.n	cebe <_dtoa_r+0x6ae>
    ced0:	9b03      	ldr	r3, [sp, #12]
    ced2:	3301      	adds	r3, #1
    ced4:	9303      	str	r3, [sp, #12]
    ced6:	2330      	movs	r3, #48	; 0x30
    ced8:	7013      	strb	r3, [r2, #0]
    ceda:	1c13      	adds	r3, r2, #0
    cedc:	781a      	ldrb	r2, [r3, #0]
    cede:	3201      	adds	r2, #1
    cee0:	701a      	strb	r2, [r3, #0]
    cee2:	e272      	b.n	d3ca <_dtoa_r+0xbba>
    cee4:	1c10      	adds	r0, r2, #0
    cee6:	1c19      	adds	r1, r3, #0
    cee8:	2200      	movs	r2, #0
    ceea:	4b13      	ldr	r3, [pc, #76]	; (cf38 <_dtoa_r+0x728>)
    ceec:	f7fb fc34 	bl	8758 <__aeabi_dmul>
    cef0:	2200      	movs	r2, #0
    cef2:	2300      	movs	r3, #0
    cef4:	1c04      	adds	r4, r0, #0
    cef6:	1c0d      	adds	r5, r1, #0
    cef8:	f7f9 fd4a 	bl	6990 <__aeabi_dcmpeq>
    cefc:	2800      	cmp	r0, #0
    cefe:	d09e      	beq.n	ce3e <_dtoa_r+0x62e>
    cf00:	e263      	b.n	d3ca <_dtoa_r+0xbba>
    cf02:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cf04:	2a00      	cmp	r2, #0
    cf06:	d044      	beq.n	cf92 <_dtoa_r+0x782>
    cf08:	9a20      	ldr	r2, [sp, #128]	; 0x80
    cf0a:	2a01      	cmp	r2, #1
    cf0c:	dc0b      	bgt.n	cf26 <_dtoa_r+0x716>
    cf0e:	9a16      	ldr	r2, [sp, #88]	; 0x58
    cf10:	2a00      	cmp	r2, #0
    cf12:	d002      	beq.n	cf1a <_dtoa_r+0x70a>
    cf14:	4a0f      	ldr	r2, [pc, #60]	; (cf54 <_dtoa_r+0x744>)
    cf16:	189b      	adds	r3, r3, r2
    cf18:	e002      	b.n	cf20 <_dtoa_r+0x710>
    cf1a:	2336      	movs	r3, #54	; 0x36
    cf1c:	9a18      	ldr	r2, [sp, #96]	; 0x60
    cf1e:	1a9b      	subs	r3, r3, r2
    cf20:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    cf22:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    cf24:	e029      	b.n	cf7a <_dtoa_r+0x76a>
    cf26:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cf28:	1e5d      	subs	r5, r3, #1
    cf2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cf2c:	42ab      	cmp	r3, r5
    cf2e:	db13      	blt.n	cf58 <_dtoa_r+0x748>
    cf30:	1b5d      	subs	r5, r3, r5
    cf32:	e018      	b.n	cf66 <_dtoa_r+0x756>
    cf34:	3ff00000 	.word	0x3ff00000
    cf38:	40240000 	.word	0x40240000
    cf3c:	401c0000 	.word	0x401c0000
    cf40:	fcc00000 	.word	0xfcc00000
    cf44:	40140000 	.word	0x40140000
    cf48:	7cc00000 	.word	0x7cc00000
    cf4c:	0000fc30 	.word	0x0000fc30
    cf50:	3fe00000 	.word	0x3fe00000
    cf54:	00000433 	.word	0x00000433
    cf58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cf5a:	950f      	str	r5, [sp, #60]	; 0x3c
    cf5c:	1aea      	subs	r2, r5, r3
    cf5e:	2500      	movs	r5, #0
    cf60:	9b12      	ldr	r3, [sp, #72]	; 0x48
    cf62:	189b      	adds	r3, r3, r2
    cf64:	9312      	str	r3, [sp, #72]	; 0x48
    cf66:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cf68:	2b00      	cmp	r3, #0
    cf6a:	da04      	bge.n	cf76 <_dtoa_r+0x766>
    cf6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cf6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    cf70:	1a9c      	subs	r4, r3, r2
    cf72:	2300      	movs	r3, #0
    cf74:	e001      	b.n	cf7a <_dtoa_r+0x76a>
    cf76:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    cf78:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cf7a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    cf7c:	9808      	ldr	r0, [sp, #32]
    cf7e:	18d2      	adds	r2, r2, r3
    cf80:	920d      	str	r2, [sp, #52]	; 0x34
    cf82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    cf84:	2101      	movs	r1, #1
    cf86:	18d3      	adds	r3, r2, r3
    cf88:	930e      	str	r3, [sp, #56]	; 0x38
    cf8a:	f000 fef8 	bl	dd7e <__i2b>
    cf8e:	1c06      	adds	r6, r0, #0
    cf90:	e002      	b.n	cf98 <_dtoa_r+0x788>
    cf92:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    cf94:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    cf96:	9e10      	ldr	r6, [sp, #64]	; 0x40
    cf98:	2c00      	cmp	r4, #0
    cf9a:	d00c      	beq.n	cfb6 <_dtoa_r+0x7a6>
    cf9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    cf9e:	2b00      	cmp	r3, #0
    cfa0:	dd09      	ble.n	cfb6 <_dtoa_r+0x7a6>
    cfa2:	42a3      	cmp	r3, r4
    cfa4:	dd00      	ble.n	cfa8 <_dtoa_r+0x798>
    cfa6:	1c23      	adds	r3, r4, #0
    cfa8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    cfaa:	1ae4      	subs	r4, r4, r3
    cfac:	1ad2      	subs	r2, r2, r3
    cfae:	920d      	str	r2, [sp, #52]	; 0x34
    cfb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    cfb2:	1ad3      	subs	r3, r2, r3
    cfb4:	930e      	str	r3, [sp, #56]	; 0x38
    cfb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cfb8:	2b00      	cmp	r3, #0
    cfba:	dd21      	ble.n	d000 <_dtoa_r+0x7f0>
    cfbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cfbe:	2b00      	cmp	r3, #0
    cfc0:	d018      	beq.n	cff4 <_dtoa_r+0x7e4>
    cfc2:	2d00      	cmp	r5, #0
    cfc4:	dd10      	ble.n	cfe8 <_dtoa_r+0x7d8>
    cfc6:	1c31      	adds	r1, r6, #0
    cfc8:	1c2a      	adds	r2, r5, #0
    cfca:	9808      	ldr	r0, [sp, #32]
    cfcc:	f000 ff6e 	bl	deac <__pow5mult>
    cfd0:	1c06      	adds	r6, r0, #0
    cfd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    cfd4:	1c31      	adds	r1, r6, #0
    cfd6:	9808      	ldr	r0, [sp, #32]
    cfd8:	f000 feda 	bl	dd90 <__multiply>
    cfdc:	1c07      	adds	r7, r0, #0
    cfde:	990a      	ldr	r1, [sp, #40]	; 0x28
    cfe0:	9808      	ldr	r0, [sp, #32]
    cfe2:	f000 fded 	bl	dbc0 <_Bfree>
    cfe6:	970a      	str	r7, [sp, #40]	; 0x28
    cfe8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cfea:	1b5a      	subs	r2, r3, r5
    cfec:	d008      	beq.n	d000 <_dtoa_r+0x7f0>
    cfee:	9808      	ldr	r0, [sp, #32]
    cff0:	990a      	ldr	r1, [sp, #40]	; 0x28
    cff2:	e002      	b.n	cffa <_dtoa_r+0x7ea>
    cff4:	9808      	ldr	r0, [sp, #32]
    cff6:	990a      	ldr	r1, [sp, #40]	; 0x28
    cff8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    cffa:	f000 ff57 	bl	deac <__pow5mult>
    cffe:	900a      	str	r0, [sp, #40]	; 0x28
    d000:	9808      	ldr	r0, [sp, #32]
    d002:	2101      	movs	r1, #1
    d004:	f000 febb 	bl	dd7e <__i2b>
    d008:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d00a:	1c07      	adds	r7, r0, #0
    d00c:	2b00      	cmp	r3, #0
    d00e:	dd0a      	ble.n	d026 <_dtoa_r+0x816>
    d010:	1c39      	adds	r1, r7, #0
    d012:	1c1a      	adds	r2, r3, #0
    d014:	9808      	ldr	r0, [sp, #32]
    d016:	f000 ff49 	bl	deac <__pow5mult>
    d01a:	9b20      	ldr	r3, [sp, #128]	; 0x80
    d01c:	1c07      	adds	r7, r0, #0
    d01e:	2500      	movs	r5, #0
    d020:	2b01      	cmp	r3, #1
    d022:	dc1b      	bgt.n	d05c <_dtoa_r+0x84c>
    d024:	e003      	b.n	d02e <_dtoa_r+0x81e>
    d026:	9b20      	ldr	r3, [sp, #128]	; 0x80
    d028:	2500      	movs	r5, #0
    d02a:	2b01      	cmp	r3, #1
    d02c:	dc12      	bgt.n	d054 <_dtoa_r+0x844>
    d02e:	2500      	movs	r5, #0
    d030:	9b06      	ldr	r3, [sp, #24]
    d032:	42ab      	cmp	r3, r5
    d034:	d10e      	bne.n	d054 <_dtoa_r+0x844>
    d036:	9b07      	ldr	r3, [sp, #28]
    d038:	031b      	lsls	r3, r3, #12
    d03a:	42ab      	cmp	r3, r5
    d03c:	d10a      	bne.n	d054 <_dtoa_r+0x844>
    d03e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    d040:	9a07      	ldr	r2, [sp, #28]
    d042:	4213      	tst	r3, r2
    d044:	d006      	beq.n	d054 <_dtoa_r+0x844>
    d046:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d048:	3501      	adds	r5, #1
    d04a:	3301      	adds	r3, #1
    d04c:	930d      	str	r3, [sp, #52]	; 0x34
    d04e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d050:	3301      	adds	r3, #1
    d052:	930e      	str	r3, [sp, #56]	; 0x38
    d054:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d056:	2001      	movs	r0, #1
    d058:	2b00      	cmp	r3, #0
    d05a:	d008      	beq.n	d06e <_dtoa_r+0x85e>
    d05c:	693b      	ldr	r3, [r7, #16]
    d05e:	3303      	adds	r3, #3
    d060:	009b      	lsls	r3, r3, #2
    d062:	18fb      	adds	r3, r7, r3
    d064:	6858      	ldr	r0, [r3, #4]
    d066:	f000 fe40 	bl	dcea <__hi0bits>
    d06a:	2320      	movs	r3, #32
    d06c:	1a18      	subs	r0, r3, r0
    d06e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d070:	18c0      	adds	r0, r0, r3
    d072:	231f      	movs	r3, #31
    d074:	4018      	ands	r0, r3
    d076:	d009      	beq.n	d08c <_dtoa_r+0x87c>
    d078:	3301      	adds	r3, #1
    d07a:	1a1b      	subs	r3, r3, r0
    d07c:	2b04      	cmp	r3, #4
    d07e:	dd02      	ble.n	d086 <_dtoa_r+0x876>
    d080:	231c      	movs	r3, #28
    d082:	1a18      	subs	r0, r3, r0
    d084:	e003      	b.n	d08e <_dtoa_r+0x87e>
    d086:	2b04      	cmp	r3, #4
    d088:	d008      	beq.n	d09c <_dtoa_r+0x88c>
    d08a:	1c18      	adds	r0, r3, #0
    d08c:	301c      	adds	r0, #28
    d08e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d090:	1824      	adds	r4, r4, r0
    d092:	181b      	adds	r3, r3, r0
    d094:	930d      	str	r3, [sp, #52]	; 0x34
    d096:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d098:	181b      	adds	r3, r3, r0
    d09a:	930e      	str	r3, [sp, #56]	; 0x38
    d09c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d09e:	2b00      	cmp	r3, #0
    d0a0:	dd05      	ble.n	d0ae <_dtoa_r+0x89e>
    d0a2:	9808      	ldr	r0, [sp, #32]
    d0a4:	990a      	ldr	r1, [sp, #40]	; 0x28
    d0a6:	1c1a      	adds	r2, r3, #0
    d0a8:	f000 ff52 	bl	df50 <__lshift>
    d0ac:	900a      	str	r0, [sp, #40]	; 0x28
    d0ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d0b0:	2b00      	cmp	r3, #0
    d0b2:	dd05      	ble.n	d0c0 <_dtoa_r+0x8b0>
    d0b4:	1c39      	adds	r1, r7, #0
    d0b6:	9808      	ldr	r0, [sp, #32]
    d0b8:	1c1a      	adds	r2, r3, #0
    d0ba:	f000 ff49 	bl	df50 <__lshift>
    d0be:	1c07      	adds	r7, r0, #0
    d0c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    d0c2:	2b00      	cmp	r3, #0
    d0c4:	d01e      	beq.n	d104 <_dtoa_r+0x8f4>
    d0c6:	980a      	ldr	r0, [sp, #40]	; 0x28
    d0c8:	1c39      	adds	r1, r7, #0
    d0ca:	f000 ff93 	bl	dff4 <__mcmp>
    d0ce:	2800      	cmp	r0, #0
    d0d0:	da18      	bge.n	d104 <_dtoa_r+0x8f4>
    d0d2:	9b03      	ldr	r3, [sp, #12]
    d0d4:	9808      	ldr	r0, [sp, #32]
    d0d6:	3b01      	subs	r3, #1
    d0d8:	9303      	str	r3, [sp, #12]
    d0da:	990a      	ldr	r1, [sp, #40]	; 0x28
    d0dc:	2300      	movs	r3, #0
    d0de:	220a      	movs	r2, #10
    d0e0:	f000 fd87 	bl	dbf2 <__multadd>
    d0e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d0e6:	900a      	str	r0, [sp, #40]	; 0x28
    d0e8:	2b00      	cmp	r3, #0
    d0ea:	d100      	bne.n	d0ee <_dtoa_r+0x8de>
    d0ec:	e17f      	b.n	d3ee <_dtoa_r+0xbde>
    d0ee:	1c31      	adds	r1, r6, #0
    d0f0:	2300      	movs	r3, #0
    d0f2:	9808      	ldr	r0, [sp, #32]
    d0f4:	220a      	movs	r2, #10
    d0f6:	f000 fd7c 	bl	dbf2 <__multadd>
    d0fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d0fc:	1c06      	adds	r6, r0, #0
    d0fe:	2b00      	cmp	r3, #0
    d100:	dc3c      	bgt.n	d17c <_dtoa_r+0x96c>
    d102:	e17d      	b.n	d400 <_dtoa_r+0xbf0>
    d104:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d106:	2b00      	cmp	r3, #0
    d108:	dc2e      	bgt.n	d168 <_dtoa_r+0x958>
    d10a:	9b20      	ldr	r3, [sp, #128]	; 0x80
    d10c:	2b02      	cmp	r3, #2
    d10e:	dd2b      	ble.n	d168 <_dtoa_r+0x958>
    d110:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d112:	930b      	str	r3, [sp, #44]	; 0x2c
    d114:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d116:	2b00      	cmp	r3, #0
    d118:	d110      	bne.n	d13c <_dtoa_r+0x92c>
    d11a:	1c39      	adds	r1, r7, #0
    d11c:	9808      	ldr	r0, [sp, #32]
    d11e:	2205      	movs	r2, #5
    d120:	f000 fd67 	bl	dbf2 <__multadd>
    d124:	1c07      	adds	r7, r0, #0
    d126:	980a      	ldr	r0, [sp, #40]	; 0x28
    d128:	1c39      	adds	r1, r7, #0
    d12a:	f000 ff63 	bl	dff4 <__mcmp>
    d12e:	2800      	cmp	r0, #0
    d130:	dc0e      	bgt.n	d150 <_dtoa_r+0x940>
    d132:	e003      	b.n	d13c <_dtoa_r+0x92c>
    d134:	1c2f      	adds	r7, r5, #0
    d136:	e000      	b.n	d13a <_dtoa_r+0x92a>
    d138:	2700      	movs	r7, #0
    d13a:	1c3e      	adds	r6, r7, #0
    d13c:	9b21      	ldr	r3, [sp, #132]	; 0x84
    d13e:	43db      	mvns	r3, r3
    d140:	9303      	str	r3, [sp, #12]
    d142:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d144:	9304      	str	r3, [sp, #16]
    d146:	e00c      	b.n	d162 <_dtoa_r+0x952>
    d148:	1c2f      	adds	r7, r5, #0
    d14a:	1c2e      	adds	r6, r5, #0
    d14c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d14e:	9303      	str	r3, [sp, #12]
    d150:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d152:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d154:	3301      	adds	r3, #1
    d156:	9304      	str	r3, [sp, #16]
    d158:	2331      	movs	r3, #49	; 0x31
    d15a:	7013      	strb	r3, [r2, #0]
    d15c:	9b03      	ldr	r3, [sp, #12]
    d15e:	3301      	adds	r3, #1
    d160:	9303      	str	r3, [sp, #12]
    d162:	9609      	str	r6, [sp, #36]	; 0x24
    d164:	2600      	movs	r6, #0
    d166:	e11a      	b.n	d39e <_dtoa_r+0xb8e>
    d168:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d16a:	2b00      	cmp	r3, #0
    d16c:	d104      	bne.n	d178 <_dtoa_r+0x968>
    d16e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d170:	930b      	str	r3, [sp, #44]	; 0x2c
    d172:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    d174:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    d176:	e0d0      	b.n	d31a <_dtoa_r+0xb0a>
    d178:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d17a:	930b      	str	r3, [sp, #44]	; 0x2c
    d17c:	2c00      	cmp	r4, #0
    d17e:	dd05      	ble.n	d18c <_dtoa_r+0x97c>
    d180:	1c31      	adds	r1, r6, #0
    d182:	9808      	ldr	r0, [sp, #32]
    d184:	1c22      	adds	r2, r4, #0
    d186:	f000 fee3 	bl	df50 <__lshift>
    d18a:	1c06      	adds	r6, r0, #0
    d18c:	9609      	str	r6, [sp, #36]	; 0x24
    d18e:	2d00      	cmp	r5, #0
    d190:	d012      	beq.n	d1b8 <_dtoa_r+0x9a8>
    d192:	6871      	ldr	r1, [r6, #4]
    d194:	9808      	ldr	r0, [sp, #32]
    d196:	f000 fcdb 	bl	db50 <_Balloc>
    d19a:	1c31      	adds	r1, r6, #0
    d19c:	1c04      	adds	r4, r0, #0
    d19e:	6933      	ldr	r3, [r6, #16]
    d1a0:	310c      	adds	r1, #12
    d1a2:	1c9a      	adds	r2, r3, #2
    d1a4:	0092      	lsls	r2, r2, #2
    d1a6:	300c      	adds	r0, #12
    d1a8:	f7fc fe71 	bl	9e8e <memcpy>
    d1ac:	9808      	ldr	r0, [sp, #32]
    d1ae:	1c21      	adds	r1, r4, #0
    d1b0:	2201      	movs	r2, #1
    d1b2:	f000 fecd 	bl	df50 <__lshift>
    d1b6:	9009      	str	r0, [sp, #36]	; 0x24
    d1b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d1ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d1bc:	930e      	str	r3, [sp, #56]	; 0x38
    d1be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d1c0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    d1c2:	3b01      	subs	r3, #1
    d1c4:	18d3      	adds	r3, r2, r3
    d1c6:	9310      	str	r3, [sp, #64]	; 0x40
    d1c8:	1c39      	adds	r1, r7, #0
    d1ca:	1c20      	adds	r0, r4, #0
    d1cc:	f7ff fa98 	bl	c700 <quorem>
    d1d0:	1c03      	adds	r3, r0, #0
    d1d2:	900f      	str	r0, [sp, #60]	; 0x3c
    d1d4:	3330      	adds	r3, #48	; 0x30
    d1d6:	1c31      	adds	r1, r6, #0
    d1d8:	1c20      	adds	r0, r4, #0
    d1da:	930d      	str	r3, [sp, #52]	; 0x34
    d1dc:	f000 ff0a 	bl	dff4 <__mcmp>
    d1e0:	1c39      	adds	r1, r7, #0
    d1e2:	900b      	str	r0, [sp, #44]	; 0x2c
    d1e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d1e6:	9808      	ldr	r0, [sp, #32]
    d1e8:	f000 ff1f 	bl	e02a <__mdiff>
    d1ec:	2301      	movs	r3, #1
    d1ee:	9304      	str	r3, [sp, #16]
    d1f0:	68c3      	ldr	r3, [r0, #12]
    d1f2:	1c05      	adds	r5, r0, #0
    d1f4:	2b00      	cmp	r3, #0
    d1f6:	d104      	bne.n	d202 <_dtoa_r+0x9f2>
    d1f8:	1c20      	adds	r0, r4, #0
    d1fa:	1c29      	adds	r1, r5, #0
    d1fc:	f000 fefa 	bl	dff4 <__mcmp>
    d200:	9004      	str	r0, [sp, #16]
    d202:	9808      	ldr	r0, [sp, #32]
    d204:	1c29      	adds	r1, r5, #0
    d206:	f000 fcdb 	bl	dbc0 <_Bfree>
    d20a:	9b04      	ldr	r3, [sp, #16]
    d20c:	9a20      	ldr	r2, [sp, #128]	; 0x80
    d20e:	4313      	orrs	r3, r2
    d210:	d110      	bne.n	d234 <_dtoa_r+0xa24>
    d212:	9a06      	ldr	r2, [sp, #24]
    d214:	3301      	adds	r3, #1
    d216:	4213      	tst	r3, r2
    d218:	d10c      	bne.n	d234 <_dtoa_r+0xa24>
    d21a:	980d      	ldr	r0, [sp, #52]	; 0x34
    d21c:	940a      	str	r4, [sp, #40]	; 0x28
    d21e:	2839      	cmp	r0, #57	; 0x39
    d220:	d03d      	beq.n	d29e <_dtoa_r+0xa8e>
    d222:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d224:	2b00      	cmp	r3, #0
    d226:	dd01      	ble.n	d22c <_dtoa_r+0xa1c>
    d228:	980f      	ldr	r0, [sp, #60]	; 0x3c
    d22a:	3031      	adds	r0, #49	; 0x31
    d22c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d22e:	3301      	adds	r3, #1
    d230:	9304      	str	r3, [sp, #16]
    d232:	e03e      	b.n	d2b2 <_dtoa_r+0xaa2>
    d234:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d236:	2b00      	cmp	r3, #0
    d238:	da05      	bge.n	d246 <_dtoa_r+0xa36>
    d23a:	9b04      	ldr	r3, [sp, #16]
    d23c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    d23e:	940a      	str	r4, [sp, #40]	; 0x28
    d240:	2b00      	cmp	r3, #0
    d242:	dc09      	bgt.n	d258 <_dtoa_r+0xa48>
    d244:	e01c      	b.n	d280 <_dtoa_r+0xa70>
    d246:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    d248:	9b20      	ldr	r3, [sp, #128]	; 0x80
    d24a:	431d      	orrs	r5, r3
    d24c:	d11e      	bne.n	d28c <_dtoa_r+0xa7c>
    d24e:	2301      	movs	r3, #1
    d250:	9a06      	ldr	r2, [sp, #24]
    d252:	4213      	tst	r3, r2
    d254:	d11a      	bne.n	d28c <_dtoa_r+0xa7c>
    d256:	e7f0      	b.n	d23a <_dtoa_r+0xa2a>
    d258:	1c21      	adds	r1, r4, #0
    d25a:	9808      	ldr	r0, [sp, #32]
    d25c:	2201      	movs	r2, #1
    d25e:	f000 fe77 	bl	df50 <__lshift>
    d262:	1c39      	adds	r1, r7, #0
    d264:	900a      	str	r0, [sp, #40]	; 0x28
    d266:	f000 fec5 	bl	dff4 <__mcmp>
    d26a:	2800      	cmp	r0, #0
    d26c:	dc03      	bgt.n	d276 <_dtoa_r+0xa66>
    d26e:	d107      	bne.n	d280 <_dtoa_r+0xa70>
    d270:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d272:	07db      	lsls	r3, r3, #31
    d274:	d504      	bpl.n	d280 <_dtoa_r+0xa70>
    d276:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d278:	2b39      	cmp	r3, #57	; 0x39
    d27a:	d010      	beq.n	d29e <_dtoa_r+0xa8e>
    d27c:	1c1d      	adds	r5, r3, #0
    d27e:	3501      	adds	r5, #1
    d280:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d282:	3301      	adds	r3, #1
    d284:	9304      	str	r3, [sp, #16]
    d286:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d288:	701d      	strb	r5, [r3, #0]
    d28a:	e088      	b.n	d39e <_dtoa_r+0xb8e>
    d28c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d28e:	1c5d      	adds	r5, r3, #1
    d290:	9b04      	ldr	r3, [sp, #16]
    d292:	2b00      	cmp	r3, #0
    d294:	dd10      	ble.n	d2b8 <_dtoa_r+0xaa8>
    d296:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d298:	940a      	str	r4, [sp, #40]	; 0x28
    d29a:	2b39      	cmp	r3, #57	; 0x39
    d29c:	d106      	bne.n	d2ac <_dtoa_r+0xa9c>
    d29e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d2a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    d2a2:	3301      	adds	r3, #1
    d2a4:	9304      	str	r3, [sp, #16]
    d2a6:	2339      	movs	r3, #57	; 0x39
    d2a8:	7013      	strb	r3, [r2, #0]
    d2aa:	e060      	b.n	d36e <_dtoa_r+0xb5e>
    d2ac:	980d      	ldr	r0, [sp, #52]	; 0x34
    d2ae:	9504      	str	r5, [sp, #16]
    d2b0:	3001      	adds	r0, #1
    d2b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d2b4:	7018      	strb	r0, [r3, #0]
    d2b6:	e072      	b.n	d39e <_dtoa_r+0xb8e>
    d2b8:	466a      	mov	r2, sp
    d2ba:	2134      	movs	r1, #52	; 0x34
    d2bc:	1852      	adds	r2, r2, r1
    d2be:	7812      	ldrb	r2, [r2, #0]
    d2c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d2c2:	9504      	str	r5, [sp, #16]
    d2c4:	701a      	strb	r2, [r3, #0]
    d2c6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d2c8:	4293      	cmp	r3, r2
    d2ca:	d03f      	beq.n	d34c <_dtoa_r+0xb3c>
    d2cc:	1c21      	adds	r1, r4, #0
    d2ce:	220a      	movs	r2, #10
    d2d0:	2300      	movs	r3, #0
    d2d2:	9808      	ldr	r0, [sp, #32]
    d2d4:	f000 fc8d 	bl	dbf2 <__multadd>
    d2d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d2da:	1c04      	adds	r4, r0, #0
    d2dc:	1c31      	adds	r1, r6, #0
    d2de:	9808      	ldr	r0, [sp, #32]
    d2e0:	220a      	movs	r2, #10
    d2e2:	429e      	cmp	r6, r3
    d2e4:	d105      	bne.n	d2f2 <_dtoa_r+0xae2>
    d2e6:	2300      	movs	r3, #0
    d2e8:	f000 fc83 	bl	dbf2 <__multadd>
    d2ec:	1c06      	adds	r6, r0, #0
    d2ee:	9009      	str	r0, [sp, #36]	; 0x24
    d2f0:	e00a      	b.n	d308 <_dtoa_r+0xaf8>
    d2f2:	2300      	movs	r3, #0
    d2f4:	f000 fc7d 	bl	dbf2 <__multadd>
    d2f8:	9909      	ldr	r1, [sp, #36]	; 0x24
    d2fa:	1c06      	adds	r6, r0, #0
    d2fc:	220a      	movs	r2, #10
    d2fe:	9808      	ldr	r0, [sp, #32]
    d300:	2300      	movs	r3, #0
    d302:	f000 fc76 	bl	dbf2 <__multadd>
    d306:	9009      	str	r0, [sp, #36]	; 0x24
    d308:	950e      	str	r5, [sp, #56]	; 0x38
    d30a:	e75d      	b.n	d1c8 <_dtoa_r+0x9b8>
    d30c:	1c21      	adds	r1, r4, #0
    d30e:	9808      	ldr	r0, [sp, #32]
    d310:	220a      	movs	r2, #10
    d312:	2300      	movs	r3, #0
    d314:	f000 fc6d 	bl	dbf2 <__multadd>
    d318:	1c04      	adds	r4, r0, #0
    d31a:	1c20      	adds	r0, r4, #0
    d31c:	1c39      	adds	r1, r7, #0
    d31e:	f7ff f9ef 	bl	c700 <quorem>
    d322:	2234      	movs	r2, #52	; 0x34
    d324:	466b      	mov	r3, sp
    d326:	3030      	adds	r0, #48	; 0x30
    d328:	189b      	adds	r3, r3, r2
    d32a:	900d      	str	r0, [sp, #52]	; 0x34
    d32c:	781b      	ldrb	r3, [r3, #0]
    d32e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d330:	702b      	strb	r3, [r5, #0]
    d332:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d334:	3501      	adds	r5, #1
    d336:	1aeb      	subs	r3, r5, r3
    d338:	4293      	cmp	r3, r2
    d33a:	dbe7      	blt.n	d30c <_dtoa_r+0xafc>
    d33c:	1e13      	subs	r3, r2, #0
    d33e:	dc00      	bgt.n	d342 <_dtoa_r+0xb32>
    d340:	2301      	movs	r3, #1
    d342:	9609      	str	r6, [sp, #36]	; 0x24
    d344:	2600      	movs	r6, #0
    d346:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d348:	18d3      	adds	r3, r2, r3
    d34a:	9304      	str	r3, [sp, #16]
    d34c:	1c21      	adds	r1, r4, #0
    d34e:	9808      	ldr	r0, [sp, #32]
    d350:	2201      	movs	r2, #1
    d352:	f000 fdfd 	bl	df50 <__lshift>
    d356:	1c39      	adds	r1, r7, #0
    d358:	900a      	str	r0, [sp, #40]	; 0x28
    d35a:	f000 fe4b 	bl	dff4 <__mcmp>
    d35e:	2800      	cmp	r0, #0
    d360:	dc05      	bgt.n	d36e <_dtoa_r+0xb5e>
    d362:	d115      	bne.n	d390 <_dtoa_r+0xb80>
    d364:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d366:	07db      	lsls	r3, r3, #31
    d368:	d401      	bmi.n	d36e <_dtoa_r+0xb5e>
    d36a:	e011      	b.n	d390 <_dtoa_r+0xb80>
    d36c:	9304      	str	r3, [sp, #16]
    d36e:	9b04      	ldr	r3, [sp, #16]
    d370:	3b01      	subs	r3, #1
    d372:	781a      	ldrb	r2, [r3, #0]
    d374:	2a39      	cmp	r2, #57	; 0x39
    d376:	d108      	bne.n	d38a <_dtoa_r+0xb7a>
    d378:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d37a:	4293      	cmp	r3, r2
    d37c:	d1f6      	bne.n	d36c <_dtoa_r+0xb5c>
    d37e:	9b03      	ldr	r3, [sp, #12]
    d380:	3301      	adds	r3, #1
    d382:	9303      	str	r3, [sp, #12]
    d384:	2331      	movs	r3, #49	; 0x31
    d386:	7013      	strb	r3, [r2, #0]
    d388:	e009      	b.n	d39e <_dtoa_r+0xb8e>
    d38a:	3201      	adds	r2, #1
    d38c:	701a      	strb	r2, [r3, #0]
    d38e:	e006      	b.n	d39e <_dtoa_r+0xb8e>
    d390:	9b04      	ldr	r3, [sp, #16]
    d392:	3b01      	subs	r3, #1
    d394:	781a      	ldrb	r2, [r3, #0]
    d396:	2a30      	cmp	r2, #48	; 0x30
    d398:	d101      	bne.n	d39e <_dtoa_r+0xb8e>
    d39a:	9304      	str	r3, [sp, #16]
    d39c:	e7f8      	b.n	d390 <_dtoa_r+0xb80>
    d39e:	9808      	ldr	r0, [sp, #32]
    d3a0:	1c39      	adds	r1, r7, #0
    d3a2:	f000 fc0d 	bl	dbc0 <_Bfree>
    d3a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d3a8:	2b00      	cmp	r3, #0
    d3aa:	d00e      	beq.n	d3ca <_dtoa_r+0xbba>
    d3ac:	2e00      	cmp	r6, #0
    d3ae:	d005      	beq.n	d3bc <_dtoa_r+0xbac>
    d3b0:	429e      	cmp	r6, r3
    d3b2:	d003      	beq.n	d3bc <_dtoa_r+0xbac>
    d3b4:	9808      	ldr	r0, [sp, #32]
    d3b6:	1c31      	adds	r1, r6, #0
    d3b8:	f000 fc02 	bl	dbc0 <_Bfree>
    d3bc:	9808      	ldr	r0, [sp, #32]
    d3be:	9909      	ldr	r1, [sp, #36]	; 0x24
    d3c0:	f000 fbfe 	bl	dbc0 <_Bfree>
    d3c4:	e001      	b.n	d3ca <_dtoa_r+0xbba>
    d3c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d3c8:	9303      	str	r3, [sp, #12]
    d3ca:	9808      	ldr	r0, [sp, #32]
    d3cc:	990a      	ldr	r1, [sp, #40]	; 0x28
    d3ce:	f000 fbf7 	bl	dbc0 <_Bfree>
    d3d2:	2300      	movs	r3, #0
    d3d4:	9a04      	ldr	r2, [sp, #16]
    d3d6:	980c      	ldr	r0, [sp, #48]	; 0x30
    d3d8:	7013      	strb	r3, [r2, #0]
    d3da:	9b03      	ldr	r3, [sp, #12]
    d3dc:	9a22      	ldr	r2, [sp, #136]	; 0x88
    d3de:	3301      	adds	r3, #1
    d3e0:	6013      	str	r3, [r2, #0]
    d3e2:	9b24      	ldr	r3, [sp, #144]	; 0x90
    d3e4:	2b00      	cmp	r3, #0
    d3e6:	d010      	beq.n	d40a <_dtoa_r+0xbfa>
    d3e8:	9a04      	ldr	r2, [sp, #16]
    d3ea:	601a      	str	r2, [r3, #0]
    d3ec:	e00d      	b.n	d40a <_dtoa_r+0xbfa>
    d3ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d3f0:	2b00      	cmp	r3, #0
    d3f2:	dd00      	ble.n	d3f6 <_dtoa_r+0xbe6>
    d3f4:	e6bd      	b.n	d172 <_dtoa_r+0x962>
    d3f6:	9b20      	ldr	r3, [sp, #128]	; 0x80
    d3f8:	2b02      	cmp	r3, #2
    d3fa:	dd00      	ble.n	d3fe <_dtoa_r+0xbee>
    d3fc:	e68a      	b.n	d114 <_dtoa_r+0x904>
    d3fe:	e6b8      	b.n	d172 <_dtoa_r+0x962>
    d400:	9b20      	ldr	r3, [sp, #128]	; 0x80
    d402:	2b02      	cmp	r3, #2
    d404:	dd00      	ble.n	d408 <_dtoa_r+0xbf8>
    d406:	e685      	b.n	d114 <_dtoa_r+0x904>
    d408:	e6b8      	b.n	d17c <_dtoa_r+0x96c>
    d40a:	b01b      	add	sp, #108	; 0x6c
    d40c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d40e:	46c0      	nop			; (mov r8, r8)

0000d410 <__sflags>:
    d410:	780b      	ldrb	r3, [r1, #0]
    d412:	b530      	push	{r4, r5, lr}
    d414:	2b72      	cmp	r3, #114	; 0x72
    d416:	d00e      	beq.n	d436 <__sflags+0x26>
    d418:	2b77      	cmp	r3, #119	; 0x77
    d41a:	d007      	beq.n	d42c <__sflags+0x1c>
    d41c:	2b61      	cmp	r3, #97	; 0x61
    d41e:	d10e      	bne.n	d43e <__sflags+0x2e>
    d420:	2582      	movs	r5, #130	; 0x82
    d422:	2084      	movs	r0, #132	; 0x84
    d424:	00ad      	lsls	r5, r5, #2
    d426:	2301      	movs	r3, #1
    d428:	0040      	lsls	r0, r0, #1
    d42a:	e01b      	b.n	d464 <__sflags+0x54>
    d42c:	25c0      	movs	r5, #192	; 0xc0
    d42e:	2301      	movs	r3, #1
    d430:	00ed      	lsls	r5, r5, #3
    d432:	2008      	movs	r0, #8
    d434:	e016      	b.n	d464 <__sflags+0x54>
    d436:	2500      	movs	r5, #0
    d438:	2004      	movs	r0, #4
    d43a:	1c2b      	adds	r3, r5, #0
    d43c:	e012      	b.n	d464 <__sflags+0x54>
    d43e:	2316      	movs	r3, #22
    d440:	6003      	str	r3, [r0, #0]
    d442:	2000      	movs	r0, #0
    d444:	e01b      	b.n	d47e <__sflags+0x6e>
    d446:	2c62      	cmp	r4, #98	; 0x62
    d448:	d011      	beq.n	d46e <__sflags+0x5e>
    d44a:	2c78      	cmp	r4, #120	; 0x78
    d44c:	d012      	beq.n	d474 <__sflags+0x64>
    d44e:	2c2b      	cmp	r4, #43	; 0x2b
    d450:	d108      	bne.n	d464 <__sflags+0x54>
    d452:	3c0f      	subs	r4, #15
    d454:	43a0      	bics	r0, r4
    d456:	3c0c      	subs	r4, #12
    d458:	4320      	orrs	r0, r4
    d45a:	3c0d      	subs	r4, #13
    d45c:	43a3      	bics	r3, r4
    d45e:	1c1c      	adds	r4, r3, #0
    d460:	2302      	movs	r3, #2
    d462:	4323      	orrs	r3, r4
    d464:	3101      	adds	r1, #1
    d466:	780c      	ldrb	r4, [r1, #0]
    d468:	2c00      	cmp	r4, #0
    d46a:	d1ec      	bne.n	d446 <__sflags+0x36>
    d46c:	e005      	b.n	d47a <__sflags+0x6a>
    d46e:	2480      	movs	r4, #128	; 0x80
    d470:	0264      	lsls	r4, r4, #9
    d472:	e7f6      	b.n	d462 <__sflags+0x52>
    d474:	2480      	movs	r4, #128	; 0x80
    d476:	0124      	lsls	r4, r4, #4
    d478:	e7f3      	b.n	d462 <__sflags+0x52>
    d47a:	432b      	orrs	r3, r5
    d47c:	6013      	str	r3, [r2, #0]
    d47e:	bd30      	pop	{r4, r5, pc}

0000d480 <_fstat_r>:
    d480:	b538      	push	{r3, r4, r5, lr}
    d482:	2300      	movs	r3, #0
    d484:	4c06      	ldr	r4, [pc, #24]	; (d4a0 <_fstat_r+0x20>)
    d486:	1c05      	adds	r5, r0, #0
    d488:	1c08      	adds	r0, r1, #0
    d48a:	1c11      	adds	r1, r2, #0
    d48c:	6023      	str	r3, [r4, #0]
    d48e:	f7f6 fd5b 	bl	3f48 <_fstat>
    d492:	1c43      	adds	r3, r0, #1
    d494:	d103      	bne.n	d49e <_fstat_r+0x1e>
    d496:	6823      	ldr	r3, [r4, #0]
    d498:	2b00      	cmp	r3, #0
    d49a:	d000      	beq.n	d49e <_fstat_r+0x1e>
    d49c:	602b      	str	r3, [r5, #0]
    d49e:	bd38      	pop	{r3, r4, r5, pc}
    d4a0:	200047c8 	.word	0x200047c8

0000d4a4 <rshift>:
    d4a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    d4a6:	1c06      	adds	r6, r0, #0
    d4a8:	6905      	ldr	r5, [r0, #16]
    d4aa:	3614      	adds	r6, #20
    d4ac:	114a      	asrs	r2, r1, #5
    d4ae:	1c34      	adds	r4, r6, #0
    d4b0:	42aa      	cmp	r2, r5
    d4b2:	da25      	bge.n	d500 <rshift+0x5c>
    d4b4:	231f      	movs	r3, #31
    d4b6:	00ad      	lsls	r5, r5, #2
    d4b8:	0092      	lsls	r2, r2, #2
    d4ba:	4019      	ands	r1, r3
    d4bc:	1975      	adds	r5, r6, r5
    d4be:	18b2      	adds	r2, r6, r2
    d4c0:	1c33      	adds	r3, r6, #0
    d4c2:	2900      	cmp	r1, #0
    d4c4:	d016      	beq.n	d4f4 <rshift+0x50>
    d4c6:	1c13      	adds	r3, r2, #0
    d4c8:	cb04      	ldmia	r3!, {r2}
    d4ca:	2720      	movs	r7, #32
    d4cc:	40ca      	lsrs	r2, r1
    d4ce:	46b4      	mov	ip, r6
    d4d0:	1a7f      	subs	r7, r7, r1
    d4d2:	4664      	mov	r4, ip
    d4d4:	42ab      	cmp	r3, r5
    d4d6:	d208      	bcs.n	d4ea <rshift+0x46>
    d4d8:	681c      	ldr	r4, [r3, #0]
    d4da:	40bc      	lsls	r4, r7
    d4dc:	4322      	orrs	r2, r4
    d4de:	4664      	mov	r4, ip
    d4e0:	c404      	stmia	r4!, {r2}
    d4e2:	cb04      	ldmia	r3!, {r2}
    d4e4:	46a4      	mov	ip, r4
    d4e6:	40ca      	lsrs	r2, r1
    d4e8:	e7f3      	b.n	d4d2 <rshift+0x2e>
    d4ea:	6022      	str	r2, [r4, #0]
    d4ec:	2a00      	cmp	r2, #0
    d4ee:	d007      	beq.n	d500 <rshift+0x5c>
    d4f0:	3404      	adds	r4, #4
    d4f2:	e005      	b.n	d500 <rshift+0x5c>
    d4f4:	1c1c      	adds	r4, r3, #0
    d4f6:	42aa      	cmp	r2, r5
    d4f8:	d202      	bcs.n	d500 <rshift+0x5c>
    d4fa:	ca02      	ldmia	r2!, {r1}
    d4fc:	c302      	stmia	r3!, {r1}
    d4fe:	e7f9      	b.n	d4f4 <rshift+0x50>
    d500:	1ba3      	subs	r3, r4, r6
    d502:	109b      	asrs	r3, r3, #2
    d504:	6103      	str	r3, [r0, #16]
    d506:	d100      	bne.n	d50a <rshift+0x66>
    d508:	6143      	str	r3, [r0, #20]
    d50a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000d50c <__hexdig_fun>:
    d50c:	1c03      	adds	r3, r0, #0
    d50e:	3b30      	subs	r3, #48	; 0x30
    d510:	2b09      	cmp	r3, #9
    d512:	d801      	bhi.n	d518 <__hexdig_fun+0xc>
    d514:	3820      	subs	r0, #32
    d516:	e00b      	b.n	d530 <__hexdig_fun+0x24>
    d518:	1c03      	adds	r3, r0, #0
    d51a:	3b61      	subs	r3, #97	; 0x61
    d51c:	2b05      	cmp	r3, #5
    d51e:	d801      	bhi.n	d524 <__hexdig_fun+0x18>
    d520:	3847      	subs	r0, #71	; 0x47
    d522:	e005      	b.n	d530 <__hexdig_fun+0x24>
    d524:	1c02      	adds	r2, r0, #0
    d526:	3a41      	subs	r2, #65	; 0x41
    d528:	2300      	movs	r3, #0
    d52a:	2a05      	cmp	r2, #5
    d52c:	d801      	bhi.n	d532 <__hexdig_fun+0x26>
    d52e:	3827      	subs	r0, #39	; 0x27
    d530:	b2c3      	uxtb	r3, r0
    d532:	1c18      	adds	r0, r3, #0
    d534:	4770      	bx	lr

0000d536 <__gethex>:
    d536:	b5f0      	push	{r4, r5, r6, r7, lr}
    d538:	b08d      	sub	sp, #52	; 0x34
    d53a:	9109      	str	r1, [sp, #36]	; 0x24
    d53c:	9202      	str	r2, [sp, #8]
    d53e:	930a      	str	r3, [sp, #40]	; 0x28
    d540:	9005      	str	r0, [sp, #20]
    d542:	f000 fad9 	bl	daf8 <_localeconv_r>
    d546:	6803      	ldr	r3, [r0, #0]
    d548:	1c18      	adds	r0, r3, #0
    d54a:	9307      	str	r3, [sp, #28]
    d54c:	f7fe f822 	bl	b594 <strlen>
    d550:	9b07      	ldr	r3, [sp, #28]
    d552:	9004      	str	r0, [sp, #16]
    d554:	181b      	adds	r3, r3, r0
    d556:	3b01      	subs	r3, #1
    d558:	781b      	ldrb	r3, [r3, #0]
    d55a:	930b      	str	r3, [sp, #44]	; 0x2c
    d55c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d55e:	6819      	ldr	r1, [r3, #0]
    d560:	1c8a      	adds	r2, r1, #2
    d562:	9201      	str	r2, [sp, #4]
    d564:	9801      	ldr	r0, [sp, #4]
    d566:	1a53      	subs	r3, r2, r1
    d568:	7800      	ldrb	r0, [r0, #0]
    d56a:	3b02      	subs	r3, #2
    d56c:	3201      	adds	r2, #1
    d56e:	2830      	cmp	r0, #48	; 0x30
    d570:	d0f7      	beq.n	d562 <__gethex+0x2c>
    d572:	9308      	str	r3, [sp, #32]
    d574:	f7ff ffca 	bl	d50c <__hexdig_fun>
    d578:	1e06      	subs	r6, r0, #0
    d57a:	d120      	bne.n	d5be <__gethex+0x88>
    d57c:	9801      	ldr	r0, [sp, #4]
    d57e:	9907      	ldr	r1, [sp, #28]
    d580:	9a04      	ldr	r2, [sp, #16]
    d582:	f7fe f80e 	bl	b5a2 <strncmp>
    d586:	2800      	cmp	r0, #0
    d588:	d13c      	bne.n	d604 <__gethex+0xce>
    d58a:	9b01      	ldr	r3, [sp, #4]
    d58c:	9a04      	ldr	r2, [sp, #16]
    d58e:	189c      	adds	r4, r3, r2
    d590:	7820      	ldrb	r0, [r4, #0]
    d592:	f7ff ffbb 	bl	d50c <__hexdig_fun>
    d596:	2800      	cmp	r0, #0
    d598:	d037      	beq.n	d60a <__gethex+0xd4>
    d59a:	9401      	str	r4, [sp, #4]
    d59c:	9b01      	ldr	r3, [sp, #4]
    d59e:	7818      	ldrb	r0, [r3, #0]
    d5a0:	2830      	cmp	r0, #48	; 0x30
    d5a2:	d103      	bne.n	d5ac <__gethex+0x76>
    d5a4:	9b01      	ldr	r3, [sp, #4]
    d5a6:	3301      	adds	r3, #1
    d5a8:	9301      	str	r3, [sp, #4]
    d5aa:	e7f7      	b.n	d59c <__gethex+0x66>
    d5ac:	f7ff ffae 	bl	d50c <__hexdig_fun>
    d5b0:	4243      	negs	r3, r0
    d5b2:	4143      	adcs	r3, r0
    d5b4:	9303      	str	r3, [sp, #12]
    d5b6:	2301      	movs	r3, #1
    d5b8:	1c26      	adds	r6, r4, #0
    d5ba:	9308      	str	r3, [sp, #32]
    d5bc:	e002      	b.n	d5c4 <__gethex+0x8e>
    d5be:	2300      	movs	r3, #0
    d5c0:	1c1e      	adds	r6, r3, #0
    d5c2:	9303      	str	r3, [sp, #12]
    d5c4:	9c01      	ldr	r4, [sp, #4]
    d5c6:	7820      	ldrb	r0, [r4, #0]
    d5c8:	f7ff ffa0 	bl	d50c <__hexdig_fun>
    d5cc:	2800      	cmp	r0, #0
    d5ce:	d001      	beq.n	d5d4 <__gethex+0x9e>
    d5d0:	3401      	adds	r4, #1
    d5d2:	e7f8      	b.n	d5c6 <__gethex+0x90>
    d5d4:	1c20      	adds	r0, r4, #0
    d5d6:	9907      	ldr	r1, [sp, #28]
    d5d8:	9a04      	ldr	r2, [sp, #16]
    d5da:	f7fd ffe2 	bl	b5a2 <strncmp>
    d5de:	2800      	cmp	r0, #0
    d5e0:	d10b      	bne.n	d5fa <__gethex+0xc4>
    d5e2:	2e00      	cmp	r6, #0
    d5e4:	d10b      	bne.n	d5fe <__gethex+0xc8>
    d5e6:	9b04      	ldr	r3, [sp, #16]
    d5e8:	18e6      	adds	r6, r4, r3
    d5ea:	1c34      	adds	r4, r6, #0
    d5ec:	7820      	ldrb	r0, [r4, #0]
    d5ee:	f7ff ff8d 	bl	d50c <__hexdig_fun>
    d5f2:	2800      	cmp	r0, #0
    d5f4:	d001      	beq.n	d5fa <__gethex+0xc4>
    d5f6:	3401      	adds	r4, #1
    d5f8:	e7f8      	b.n	d5ec <__gethex+0xb6>
    d5fa:	1e37      	subs	r7, r6, #0
    d5fc:	d008      	beq.n	d610 <__gethex+0xda>
    d5fe:	1b36      	subs	r6, r6, r4
    d600:	00b7      	lsls	r7, r6, #2
    d602:	e005      	b.n	d610 <__gethex+0xda>
    d604:	9c01      	ldr	r4, [sp, #4]
    d606:	1c37      	adds	r7, r6, #0
    d608:	e000      	b.n	d60c <__gethex+0xd6>
    d60a:	1c07      	adds	r7, r0, #0
    d60c:	2301      	movs	r3, #1
    d60e:	9303      	str	r3, [sp, #12]
    d610:	7823      	ldrb	r3, [r4, #0]
    d612:	2b50      	cmp	r3, #80	; 0x50
    d614:	d001      	beq.n	d61a <__gethex+0xe4>
    d616:	2b70      	cmp	r3, #112	; 0x70
    d618:	d128      	bne.n	d66c <__gethex+0x136>
    d61a:	7863      	ldrb	r3, [r4, #1]
    d61c:	2b2b      	cmp	r3, #43	; 0x2b
    d61e:	d007      	beq.n	d630 <__gethex+0xfa>
    d620:	2b2d      	cmp	r3, #45	; 0x2d
    d622:	d003      	beq.n	d62c <__gethex+0xf6>
    d624:	2300      	movs	r3, #0
    d626:	1c65      	adds	r5, r4, #1
    d628:	9306      	str	r3, [sp, #24]
    d62a:	e004      	b.n	d636 <__gethex+0x100>
    d62c:	2301      	movs	r3, #1
    d62e:	e000      	b.n	d632 <__gethex+0xfc>
    d630:	2300      	movs	r3, #0
    d632:	9306      	str	r3, [sp, #24]
    d634:	1ca5      	adds	r5, r4, #2
    d636:	7828      	ldrb	r0, [r5, #0]
    d638:	f7ff ff68 	bl	d50c <__hexdig_fun>
    d63c:	1e43      	subs	r3, r0, #1
    d63e:	b2db      	uxtb	r3, r3
    d640:	2b18      	cmp	r3, #24
    d642:	d813      	bhi.n	d66c <__gethex+0x136>
    d644:	3810      	subs	r0, #16
    d646:	3501      	adds	r5, #1
    d648:	1c06      	adds	r6, r0, #0
    d64a:	7828      	ldrb	r0, [r5, #0]
    d64c:	f7ff ff5e 	bl	d50c <__hexdig_fun>
    d650:	1e43      	subs	r3, r0, #1
    d652:	b2db      	uxtb	r3, r3
    d654:	2b18      	cmp	r3, #24
    d656:	d803      	bhi.n	d660 <__gethex+0x12a>
    d658:	230a      	movs	r3, #10
    d65a:	435e      	muls	r6, r3
    d65c:	1830      	adds	r0, r6, r0
    d65e:	e7f1      	b.n	d644 <__gethex+0x10e>
    d660:	9b06      	ldr	r3, [sp, #24]
    d662:	2b00      	cmp	r3, #0
    d664:	d000      	beq.n	d668 <__gethex+0x132>
    d666:	4276      	negs	r6, r6
    d668:	19bf      	adds	r7, r7, r6
    d66a:	e000      	b.n	d66e <__gethex+0x138>
    d66c:	1c25      	adds	r5, r4, #0
    d66e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d670:	601d      	str	r5, [r3, #0]
    d672:	9b03      	ldr	r3, [sp, #12]
    d674:	2b00      	cmp	r3, #0
    d676:	d006      	beq.n	d686 <__gethex+0x150>
    d678:	2000      	movs	r0, #0
    d67a:	9b08      	ldr	r3, [sp, #32]
    d67c:	4283      	cmp	r3, r0
    d67e:	d000      	beq.n	d682 <__gethex+0x14c>
    d680:	e17b      	b.n	d97a <__gethex+0x444>
    d682:	3006      	adds	r0, #6
    d684:	e179      	b.n	d97a <__gethex+0x444>
    d686:	9b01      	ldr	r3, [sp, #4]
    d688:	9903      	ldr	r1, [sp, #12]
    d68a:	1ae3      	subs	r3, r4, r3
    d68c:	3b01      	subs	r3, #1
    d68e:	2b07      	cmp	r3, #7
    d690:	dd02      	ble.n	d698 <__gethex+0x162>
    d692:	3101      	adds	r1, #1
    d694:	105b      	asrs	r3, r3, #1
    d696:	e7fa      	b.n	d68e <__gethex+0x158>
    d698:	9805      	ldr	r0, [sp, #20]
    d69a:	f000 fa59 	bl	db50 <_Balloc>
    d69e:	1c03      	adds	r3, r0, #0
    d6a0:	2600      	movs	r6, #0
    d6a2:	1c05      	adds	r5, r0, #0
    d6a4:	3314      	adds	r3, #20
    d6a6:	9303      	str	r3, [sp, #12]
    d6a8:	9308      	str	r3, [sp, #32]
    d6aa:	9606      	str	r6, [sp, #24]
    d6ac:	9b01      	ldr	r3, [sp, #4]
    d6ae:	429c      	cmp	r4, r3
    d6b0:	d92a      	bls.n	d708 <__gethex+0x1d2>
    d6b2:	1e63      	subs	r3, r4, #1
    d6b4:	9309      	str	r3, [sp, #36]	; 0x24
    d6b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d6b8:	781b      	ldrb	r3, [r3, #0]
    d6ba:	4293      	cmp	r3, r2
    d6bc:	d009      	beq.n	d6d2 <__gethex+0x19c>
    d6be:	9b06      	ldr	r3, [sp, #24]
    d6c0:	2b20      	cmp	r3, #32
    d6c2:	d114      	bne.n	d6ee <__gethex+0x1b8>
    d6c4:	9b08      	ldr	r3, [sp, #32]
    d6c6:	601e      	str	r6, [r3, #0]
    d6c8:	2600      	movs	r6, #0
    d6ca:	3304      	adds	r3, #4
    d6cc:	9308      	str	r3, [sp, #32]
    d6ce:	9606      	str	r6, [sp, #24]
    d6d0:	e00d      	b.n	d6ee <__gethex+0x1b8>
    d6d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d6d4:	9a04      	ldr	r2, [sp, #16]
    d6d6:	1a9c      	subs	r4, r3, r2
    d6d8:	9b01      	ldr	r3, [sp, #4]
    d6da:	3401      	adds	r4, #1
    d6dc:	429c      	cmp	r4, r3
    d6de:	d3ee      	bcc.n	d6be <__gethex+0x188>
    d6e0:	1c20      	adds	r0, r4, #0
    d6e2:	9907      	ldr	r1, [sp, #28]
    d6e4:	f7fd ff5d 	bl	b5a2 <strncmp>
    d6e8:	2800      	cmp	r0, #0
    d6ea:	d0df      	beq.n	d6ac <__gethex+0x176>
    d6ec:	e7e7      	b.n	d6be <__gethex+0x188>
    d6ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d6f0:	7818      	ldrb	r0, [r3, #0]
    d6f2:	f7ff ff0b 	bl	d50c <__hexdig_fun>
    d6f6:	230f      	movs	r3, #15
    d6f8:	4018      	ands	r0, r3
    d6fa:	9b06      	ldr	r3, [sp, #24]
    d6fc:	9c09      	ldr	r4, [sp, #36]	; 0x24
    d6fe:	4098      	lsls	r0, r3
    d700:	3304      	adds	r3, #4
    d702:	4306      	orrs	r6, r0
    d704:	9306      	str	r3, [sp, #24]
    d706:	e7d1      	b.n	d6ac <__gethex+0x176>
    d708:	9c08      	ldr	r4, [sp, #32]
    d70a:	9b03      	ldr	r3, [sp, #12]
    d70c:	c440      	stmia	r4!, {r6}
    d70e:	1ae4      	subs	r4, r4, r3
    d710:	10a4      	asrs	r4, r4, #2
    d712:	612c      	str	r4, [r5, #16]
    d714:	1c30      	adds	r0, r6, #0
    d716:	f000 fae8 	bl	dcea <__hi0bits>
    d71a:	9b02      	ldr	r3, [sp, #8]
    d71c:	0164      	lsls	r4, r4, #5
    d71e:	681b      	ldr	r3, [r3, #0]
    d720:	1a26      	subs	r6, r4, r0
    d722:	9301      	str	r3, [sp, #4]
    d724:	429e      	cmp	r6, r3
    d726:	dd25      	ble.n	d774 <__gethex+0x23e>
    d728:	1af6      	subs	r6, r6, r3
    d72a:	1c28      	adds	r0, r5, #0
    d72c:	1c31      	adds	r1, r6, #0
    d72e:	f000 fdf1 	bl	e314 <__any_on>
    d732:	2400      	movs	r4, #0
    d734:	42a0      	cmp	r0, r4
    d736:	d017      	beq.n	d768 <__gethex+0x232>
    d738:	231f      	movs	r3, #31
    d73a:	3401      	adds	r4, #1
    d73c:	1c20      	adds	r0, r4, #0
    d73e:	1e72      	subs	r2, r6, #1
    d740:	4013      	ands	r3, r2
    d742:	4098      	lsls	r0, r3
    d744:	1c03      	adds	r3, r0, #0
    d746:	1151      	asrs	r1, r2, #5
    d748:	9803      	ldr	r0, [sp, #12]
    d74a:	0089      	lsls	r1, r1, #2
    d74c:	5809      	ldr	r1, [r1, r0]
    d74e:	4219      	tst	r1, r3
    d750:	d00a      	beq.n	d768 <__gethex+0x232>
    d752:	42a2      	cmp	r2, r4
    d754:	dc01      	bgt.n	d75a <__gethex+0x224>
    d756:	2402      	movs	r4, #2
    d758:	e006      	b.n	d768 <__gethex+0x232>
    d75a:	1eb1      	subs	r1, r6, #2
    d75c:	1c28      	adds	r0, r5, #0
    d75e:	f000 fdd9 	bl	e314 <__any_on>
    d762:	2800      	cmp	r0, #0
    d764:	d0f7      	beq.n	d756 <__gethex+0x220>
    d766:	2403      	movs	r4, #3
    d768:	1c28      	adds	r0, r5, #0
    d76a:	1c31      	adds	r1, r6, #0
    d76c:	f7ff fe9a 	bl	d4a4 <rshift>
    d770:	19bf      	adds	r7, r7, r6
    d772:	e00e      	b.n	d792 <__gethex+0x25c>
    d774:	9b01      	ldr	r3, [sp, #4]
    d776:	2400      	movs	r4, #0
    d778:	429e      	cmp	r6, r3
    d77a:	da0a      	bge.n	d792 <__gethex+0x25c>
    d77c:	1b9e      	subs	r6, r3, r6
    d77e:	1c29      	adds	r1, r5, #0
    d780:	9805      	ldr	r0, [sp, #20]
    d782:	1c32      	adds	r2, r6, #0
    d784:	f000 fbe4 	bl	df50 <__lshift>
    d788:	1c03      	adds	r3, r0, #0
    d78a:	1c05      	adds	r5, r0, #0
    d78c:	3314      	adds	r3, #20
    d78e:	1bbf      	subs	r7, r7, r6
    d790:	9303      	str	r3, [sp, #12]
    d792:	9b02      	ldr	r3, [sp, #8]
    d794:	689b      	ldr	r3, [r3, #8]
    d796:	9304      	str	r3, [sp, #16]
    d798:	429f      	cmp	r7, r3
    d79a:	dd08      	ble.n	d7ae <__gethex+0x278>
    d79c:	9805      	ldr	r0, [sp, #20]
    d79e:	1c29      	adds	r1, r5, #0
    d7a0:	f000 fa0e 	bl	dbc0 <_Bfree>
    d7a4:	2300      	movs	r3, #0
    d7a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
    d7a8:	20a3      	movs	r0, #163	; 0xa3
    d7aa:	6013      	str	r3, [r2, #0]
    d7ac:	e0e5      	b.n	d97a <__gethex+0x444>
    d7ae:	9b02      	ldr	r3, [sp, #8]
    d7b0:	685e      	ldr	r6, [r3, #4]
    d7b2:	42b7      	cmp	r7, r6
    d7b4:	da5a      	bge.n	d86c <__gethex+0x336>
    d7b6:	9b01      	ldr	r3, [sp, #4]
    d7b8:	1bf6      	subs	r6, r6, r7
    d7ba:	429e      	cmp	r6, r3
    d7bc:	db32      	blt.n	d824 <__gethex+0x2ee>
    d7be:	9b02      	ldr	r3, [sp, #8]
    d7c0:	68db      	ldr	r3, [r3, #12]
    d7c2:	2b02      	cmp	r3, #2
    d7c4:	d01e      	beq.n	d804 <__gethex+0x2ce>
    d7c6:	2b03      	cmp	r3, #3
    d7c8:	d020      	beq.n	d80c <__gethex+0x2d6>
    d7ca:	2b01      	cmp	r3, #1
    d7cc:	d121      	bne.n	d812 <__gethex+0x2dc>
    d7ce:	9b01      	ldr	r3, [sp, #4]
    d7d0:	429e      	cmp	r6, r3
    d7d2:	d11e      	bne.n	d812 <__gethex+0x2dc>
    d7d4:	2b01      	cmp	r3, #1
    d7d6:	dc0d      	bgt.n	d7f4 <__gethex+0x2be>
    d7d8:	9b02      	ldr	r3, [sp, #8]
    d7da:	2062      	movs	r0, #98	; 0x62
    d7dc:	685b      	ldr	r3, [r3, #4]
    d7de:	9301      	str	r3, [sp, #4]
    d7e0:	9a01      	ldr	r2, [sp, #4]
    d7e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d7e4:	601a      	str	r2, [r3, #0]
    d7e6:	2301      	movs	r3, #1
    d7e8:	9a03      	ldr	r2, [sp, #12]
    d7ea:	612b      	str	r3, [r5, #16]
    d7ec:	6013      	str	r3, [r2, #0]
    d7ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d7f0:	601d      	str	r5, [r3, #0]
    d7f2:	e0c2      	b.n	d97a <__gethex+0x444>
    d7f4:	9901      	ldr	r1, [sp, #4]
    d7f6:	1c28      	adds	r0, r5, #0
    d7f8:	3901      	subs	r1, #1
    d7fa:	f000 fd8b 	bl	e314 <__any_on>
    d7fe:	2800      	cmp	r0, #0
    d800:	d1ea      	bne.n	d7d8 <__gethex+0x2a2>
    d802:	e006      	b.n	d812 <__gethex+0x2dc>
    d804:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    d806:	2b00      	cmp	r3, #0
    d808:	d0e6      	beq.n	d7d8 <__gethex+0x2a2>
    d80a:	e002      	b.n	d812 <__gethex+0x2dc>
    d80c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    d80e:	2b00      	cmp	r3, #0
    d810:	d1e2      	bne.n	d7d8 <__gethex+0x2a2>
    d812:	9805      	ldr	r0, [sp, #20]
    d814:	1c29      	adds	r1, r5, #0
    d816:	f000 f9d3 	bl	dbc0 <_Bfree>
    d81a:	2300      	movs	r3, #0
    d81c:	9a12      	ldr	r2, [sp, #72]	; 0x48
    d81e:	2050      	movs	r0, #80	; 0x50
    d820:	6013      	str	r3, [r2, #0]
    d822:	e0aa      	b.n	d97a <__gethex+0x444>
    d824:	1e77      	subs	r7, r6, #1
    d826:	2c00      	cmp	r4, #0
    d828:	d107      	bne.n	d83a <__gethex+0x304>
    d82a:	2f00      	cmp	r7, #0
    d82c:	dd06      	ble.n	d83c <__gethex+0x306>
    d82e:	1c28      	adds	r0, r5, #0
    d830:	1c39      	adds	r1, r7, #0
    d832:	f000 fd6f 	bl	e314 <__any_on>
    d836:	1c04      	adds	r4, r0, #0
    d838:	e000      	b.n	d83c <__gethex+0x306>
    d83a:	2401      	movs	r4, #1
    d83c:	231f      	movs	r3, #31
    d83e:	117a      	asrs	r2, r7, #5
    d840:	401f      	ands	r7, r3
    d842:	3b1e      	subs	r3, #30
    d844:	40bb      	lsls	r3, r7
    d846:	1c1f      	adds	r7, r3, #0
    d848:	9b03      	ldr	r3, [sp, #12]
    d84a:	0092      	lsls	r2, r2, #2
    d84c:	58d3      	ldr	r3, [r2, r3]
    d84e:	423b      	tst	r3, r7
    d850:	d001      	beq.n	d856 <__gethex+0x320>
    d852:	2302      	movs	r3, #2
    d854:	431c      	orrs	r4, r3
    d856:	9b01      	ldr	r3, [sp, #4]
    d858:	1c31      	adds	r1, r6, #0
    d85a:	1b9b      	subs	r3, r3, r6
    d85c:	1c28      	adds	r0, r5, #0
    d85e:	9301      	str	r3, [sp, #4]
    d860:	f7ff fe20 	bl	d4a4 <rshift>
    d864:	9b02      	ldr	r3, [sp, #8]
    d866:	2602      	movs	r6, #2
    d868:	685f      	ldr	r7, [r3, #4]
    d86a:	e000      	b.n	d86e <__gethex+0x338>
    d86c:	2601      	movs	r6, #1
    d86e:	2c00      	cmp	r4, #0
    d870:	d07e      	beq.n	d970 <__gethex+0x43a>
    d872:	9b02      	ldr	r3, [sp, #8]
    d874:	68db      	ldr	r3, [r3, #12]
    d876:	2b02      	cmp	r3, #2
    d878:	d00b      	beq.n	d892 <__gethex+0x35c>
    d87a:	2b03      	cmp	r3, #3
    d87c:	d00d      	beq.n	d89a <__gethex+0x364>
    d87e:	2b01      	cmp	r3, #1
    d880:	d174      	bne.n	d96c <__gethex+0x436>
    d882:	07a2      	lsls	r2, r4, #30
    d884:	d572      	bpl.n	d96c <__gethex+0x436>
    d886:	9a03      	ldr	r2, [sp, #12]
    d888:	6812      	ldr	r2, [r2, #0]
    d88a:	4314      	orrs	r4, r2
    d88c:	421c      	tst	r4, r3
    d88e:	d107      	bne.n	d8a0 <__gethex+0x36a>
    d890:	e06c      	b.n	d96c <__gethex+0x436>
    d892:	2301      	movs	r3, #1
    d894:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    d896:	1a9b      	subs	r3, r3, r2
    d898:	9313      	str	r3, [sp, #76]	; 0x4c
    d89a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    d89c:	2b00      	cmp	r3, #0
    d89e:	d065      	beq.n	d96c <__gethex+0x436>
    d8a0:	692c      	ldr	r4, [r5, #16]
    d8a2:	00a3      	lsls	r3, r4, #2
    d8a4:	9303      	str	r3, [sp, #12]
    d8a6:	1c2b      	adds	r3, r5, #0
    d8a8:	9a03      	ldr	r2, [sp, #12]
    d8aa:	3314      	adds	r3, #20
    d8ac:	1899      	adds	r1, r3, r2
    d8ae:	681a      	ldr	r2, [r3, #0]
    d8b0:	1c50      	adds	r0, r2, #1
    d8b2:	d002      	beq.n	d8ba <__gethex+0x384>
    d8b4:	3201      	adds	r2, #1
    d8b6:	601a      	str	r2, [r3, #0]
    d8b8:	e021      	b.n	d8fe <__gethex+0x3c8>
    d8ba:	2200      	movs	r2, #0
    d8bc:	c304      	stmia	r3!, {r2}
    d8be:	4299      	cmp	r1, r3
    d8c0:	d8f5      	bhi.n	d8ae <__gethex+0x378>
    d8c2:	68ab      	ldr	r3, [r5, #8]
    d8c4:	429c      	cmp	r4, r3
    d8c6:	db12      	blt.n	d8ee <__gethex+0x3b8>
    d8c8:	686b      	ldr	r3, [r5, #4]
    d8ca:	9805      	ldr	r0, [sp, #20]
    d8cc:	1c59      	adds	r1, r3, #1
    d8ce:	f000 f93f 	bl	db50 <_Balloc>
    d8d2:	1c29      	adds	r1, r5, #0
    d8d4:	692b      	ldr	r3, [r5, #16]
    d8d6:	9004      	str	r0, [sp, #16]
    d8d8:	1c9a      	adds	r2, r3, #2
    d8da:	310c      	adds	r1, #12
    d8dc:	0092      	lsls	r2, r2, #2
    d8de:	300c      	adds	r0, #12
    d8e0:	f7fc fad5 	bl	9e8e <memcpy>
    d8e4:	1c29      	adds	r1, r5, #0
    d8e6:	9805      	ldr	r0, [sp, #20]
    d8e8:	f000 f96a 	bl	dbc0 <_Bfree>
    d8ec:	9d04      	ldr	r5, [sp, #16]
    d8ee:	692b      	ldr	r3, [r5, #16]
    d8f0:	1c5a      	adds	r2, r3, #1
    d8f2:	612a      	str	r2, [r5, #16]
    d8f4:	2201      	movs	r2, #1
    d8f6:	3304      	adds	r3, #4
    d8f8:	009b      	lsls	r3, r3, #2
    d8fa:	18eb      	adds	r3, r5, r3
    d8fc:	605a      	str	r2, [r3, #4]
    d8fe:	1c2b      	adds	r3, r5, #0
    d900:	3314      	adds	r3, #20
    d902:	2e02      	cmp	r6, #2
    d904:	d111      	bne.n	d92a <__gethex+0x3f4>
    d906:	9a02      	ldr	r2, [sp, #8]
    d908:	9901      	ldr	r1, [sp, #4]
    d90a:	6812      	ldr	r2, [r2, #0]
    d90c:	3a01      	subs	r2, #1
    d90e:	4291      	cmp	r1, r2
    d910:	d12a      	bne.n	d968 <__gethex+0x432>
    d912:	114a      	asrs	r2, r1, #5
    d914:	211f      	movs	r1, #31
    d916:	9801      	ldr	r0, [sp, #4]
    d918:	0092      	lsls	r2, r2, #2
    d91a:	4001      	ands	r1, r0
    d91c:	2001      	movs	r0, #1
    d91e:	1c04      	adds	r4, r0, #0
    d920:	408c      	lsls	r4, r1
    d922:	58d3      	ldr	r3, [r2, r3]
    d924:	4223      	tst	r3, r4
    d926:	d01f      	beq.n	d968 <__gethex+0x432>
    d928:	e00c      	b.n	d944 <__gethex+0x40e>
    d92a:	692a      	ldr	r2, [r5, #16]
    d92c:	42a2      	cmp	r2, r4
    d92e:	dd0b      	ble.n	d948 <__gethex+0x412>
    d930:	1c28      	adds	r0, r5, #0
    d932:	2101      	movs	r1, #1
    d934:	f7ff fdb6 	bl	d4a4 <rshift>
    d938:	9b02      	ldr	r3, [sp, #8]
    d93a:	3701      	adds	r7, #1
    d93c:	689b      	ldr	r3, [r3, #8]
    d93e:	429f      	cmp	r7, r3
    d940:	dd00      	ble.n	d944 <__gethex+0x40e>
    d942:	e72b      	b.n	d79c <__gethex+0x266>
    d944:	2601      	movs	r6, #1
    d946:	e00f      	b.n	d968 <__gethex+0x432>
    d948:	241f      	movs	r4, #31
    d94a:	9a01      	ldr	r2, [sp, #4]
    d94c:	2601      	movs	r6, #1
    d94e:	4022      	ands	r2, r4
    d950:	1e14      	subs	r4, r2, #0
    d952:	d009      	beq.n	d968 <__gethex+0x432>
    d954:	9a03      	ldr	r2, [sp, #12]
    d956:	189b      	adds	r3, r3, r2
    d958:	3b04      	subs	r3, #4
    d95a:	6818      	ldr	r0, [r3, #0]
    d95c:	f000 f9c5 	bl	dcea <__hi0bits>
    d960:	2120      	movs	r1, #32
    d962:	1b0c      	subs	r4, r1, r4
    d964:	42a0      	cmp	r0, r4
    d966:	dbe3      	blt.n	d930 <__gethex+0x3fa>
    d968:	2320      	movs	r3, #32
    d96a:	e000      	b.n	d96e <__gethex+0x438>
    d96c:	2310      	movs	r3, #16
    d96e:	431e      	orrs	r6, r3
    d970:	1c30      	adds	r0, r6, #0
    d972:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d974:	601d      	str	r5, [r3, #0]
    d976:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d978:	601f      	str	r7, [r3, #0]
    d97a:	b00d      	add	sp, #52	; 0x34
    d97c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000d97e <L_shift>:
    d97e:	2308      	movs	r3, #8
    d980:	b570      	push	{r4, r5, r6, lr}
    d982:	2520      	movs	r5, #32
    d984:	1a9a      	subs	r2, r3, r2
    d986:	0092      	lsls	r2, r2, #2
    d988:	1aad      	subs	r5, r5, r2
    d98a:	6843      	ldr	r3, [r0, #4]
    d98c:	6806      	ldr	r6, [r0, #0]
    d98e:	1c1c      	adds	r4, r3, #0
    d990:	40ac      	lsls	r4, r5
    d992:	40d3      	lsrs	r3, r2
    d994:	4334      	orrs	r4, r6
    d996:	6004      	str	r4, [r0, #0]
    d998:	6043      	str	r3, [r0, #4]
    d99a:	3004      	adds	r0, #4
    d99c:	4288      	cmp	r0, r1
    d99e:	d3f4      	bcc.n	d98a <L_shift+0xc>
    d9a0:	bd70      	pop	{r4, r5, r6, pc}

0000d9a2 <__hexnan>:
    d9a2:	b5f0      	push	{r4, r5, r6, r7, lr}
    d9a4:	b089      	sub	sp, #36	; 0x24
    d9a6:	9200      	str	r2, [sp, #0]
    d9a8:	680a      	ldr	r2, [r1, #0]
    d9aa:	9900      	ldr	r1, [sp, #0]
    d9ac:	1153      	asrs	r3, r2, #5
    d9ae:	009b      	lsls	r3, r3, #2
    d9b0:	18cb      	adds	r3, r1, r3
    d9b2:	9302      	str	r3, [sp, #8]
    d9b4:	231f      	movs	r3, #31
    d9b6:	401a      	ands	r2, r3
    d9b8:	9007      	str	r0, [sp, #28]
    d9ba:	9205      	str	r2, [sp, #20]
    d9bc:	d002      	beq.n	d9c4 <__hexnan+0x22>
    d9be:	9b02      	ldr	r3, [sp, #8]
    d9c0:	3304      	adds	r3, #4
    d9c2:	9302      	str	r3, [sp, #8]
    d9c4:	9b02      	ldr	r3, [sp, #8]
    d9c6:	2500      	movs	r5, #0
    d9c8:	1f1e      	subs	r6, r3, #4
    d9ca:	1c37      	adds	r7, r6, #0
    d9cc:	1c34      	adds	r4, r6, #0
    d9ce:	9b07      	ldr	r3, [sp, #28]
    d9d0:	6035      	str	r5, [r6, #0]
    d9d2:	681b      	ldr	r3, [r3, #0]
    d9d4:	9506      	str	r5, [sp, #24]
    d9d6:	9303      	str	r3, [sp, #12]
    d9d8:	9501      	str	r5, [sp, #4]
    d9da:	9b03      	ldr	r3, [sp, #12]
    d9dc:	3301      	adds	r3, #1
    d9de:	9303      	str	r3, [sp, #12]
    d9e0:	781b      	ldrb	r3, [r3, #0]
    d9e2:	9304      	str	r3, [sp, #16]
    d9e4:	2b00      	cmp	r3, #0
    d9e6:	d03b      	beq.n	da60 <__hexnan+0xbe>
    d9e8:	9804      	ldr	r0, [sp, #16]
    d9ea:	f7ff fd8f 	bl	d50c <__hexdig_fun>
    d9ee:	2800      	cmp	r0, #0
    d9f0:	d122      	bne.n	da38 <__hexnan+0x96>
    d9f2:	9b04      	ldr	r3, [sp, #16]
    d9f4:	2b20      	cmp	r3, #32
    d9f6:	d817      	bhi.n	da28 <__hexnan+0x86>
    d9f8:	9b06      	ldr	r3, [sp, #24]
    d9fa:	9a01      	ldr	r2, [sp, #4]
    d9fc:	4293      	cmp	r3, r2
    d9fe:	daec      	bge.n	d9da <__hexnan+0x38>
    da00:	42bc      	cmp	r4, r7
    da02:	d206      	bcs.n	da12 <__hexnan+0x70>
    da04:	2d07      	cmp	r5, #7
    da06:	dc04      	bgt.n	da12 <__hexnan+0x70>
    da08:	1c20      	adds	r0, r4, #0
    da0a:	1c39      	adds	r1, r7, #0
    da0c:	1c2a      	adds	r2, r5, #0
    da0e:	f7ff ffb6 	bl	d97e <L_shift>
    da12:	9b00      	ldr	r3, [sp, #0]
    da14:	2508      	movs	r5, #8
    da16:	429c      	cmp	r4, r3
    da18:	d9df      	bls.n	d9da <__hexnan+0x38>
    da1a:	2500      	movs	r5, #0
    da1c:	9b01      	ldr	r3, [sp, #4]
    da1e:	1f27      	subs	r7, r4, #4
    da20:	603d      	str	r5, [r7, #0]
    da22:	9306      	str	r3, [sp, #24]
    da24:	1c3c      	adds	r4, r7, #0
    da26:	e7d8      	b.n	d9da <__hexnan+0x38>
    da28:	9b04      	ldr	r3, [sp, #16]
    da2a:	2b29      	cmp	r3, #41	; 0x29
    da2c:	d14c      	bne.n	dac8 <__hexnan+0x126>
    da2e:	9b03      	ldr	r3, [sp, #12]
    da30:	9a07      	ldr	r2, [sp, #28]
    da32:	3301      	adds	r3, #1
    da34:	6013      	str	r3, [r2, #0]
    da36:	e013      	b.n	da60 <__hexnan+0xbe>
    da38:	9b01      	ldr	r3, [sp, #4]
    da3a:	3501      	adds	r5, #1
    da3c:	3301      	adds	r3, #1
    da3e:	9301      	str	r3, [sp, #4]
    da40:	2d08      	cmp	r5, #8
    da42:	dd06      	ble.n	da52 <__hexnan+0xb0>
    da44:	9b00      	ldr	r3, [sp, #0]
    da46:	429c      	cmp	r4, r3
    da48:	d9c7      	bls.n	d9da <__hexnan+0x38>
    da4a:	2300      	movs	r3, #0
    da4c:	2501      	movs	r5, #1
    da4e:	3c04      	subs	r4, #4
    da50:	6023      	str	r3, [r4, #0]
    da52:	6823      	ldr	r3, [r4, #0]
    da54:	011a      	lsls	r2, r3, #4
    da56:	230f      	movs	r3, #15
    da58:	4018      	ands	r0, r3
    da5a:	4310      	orrs	r0, r2
    da5c:	6020      	str	r0, [r4, #0]
    da5e:	e7bc      	b.n	d9da <__hexnan+0x38>
    da60:	9b01      	ldr	r3, [sp, #4]
    da62:	2b00      	cmp	r3, #0
    da64:	d030      	beq.n	dac8 <__hexnan+0x126>
    da66:	42bc      	cmp	r4, r7
    da68:	d206      	bcs.n	da78 <__hexnan+0xd6>
    da6a:	2d07      	cmp	r5, #7
    da6c:	dc04      	bgt.n	da78 <__hexnan+0xd6>
    da6e:	1c20      	adds	r0, r4, #0
    da70:	1c39      	adds	r1, r7, #0
    da72:	1c2a      	adds	r2, r5, #0
    da74:	f7ff ff83 	bl	d97e <L_shift>
    da78:	9b00      	ldr	r3, [sp, #0]
    da7a:	429c      	cmp	r4, r3
    da7c:	d90a      	bls.n	da94 <__hexnan+0xf2>
    da7e:	3304      	adds	r3, #4
    da80:	cc02      	ldmia	r4!, {r1}
    da82:	1f1a      	subs	r2, r3, #4
    da84:	6011      	str	r1, [r2, #0]
    da86:	42a6      	cmp	r6, r4
    da88:	d2f9      	bcs.n	da7e <__hexnan+0xdc>
    da8a:	2200      	movs	r2, #0
    da8c:	c304      	stmia	r3!, {r2}
    da8e:	429e      	cmp	r6, r3
    da90:	d2fb      	bcs.n	da8a <__hexnan+0xe8>
    da92:	e00e      	b.n	dab2 <__hexnan+0x110>
    da94:	9b05      	ldr	r3, [sp, #20]
    da96:	2b00      	cmp	r3, #0
    da98:	d00b      	beq.n	dab2 <__hexnan+0x110>
    da9a:	2220      	movs	r2, #32
    da9c:	9905      	ldr	r1, [sp, #20]
    da9e:	9b02      	ldr	r3, [sp, #8]
    daa0:	1a52      	subs	r2, r2, r1
    daa2:	2101      	movs	r1, #1
    daa4:	4249      	negs	r1, r1
    daa6:	40d1      	lsrs	r1, r2
    daa8:	1c0a      	adds	r2, r1, #0
    daaa:	3b04      	subs	r3, #4
    daac:	6819      	ldr	r1, [r3, #0]
    daae:	400a      	ands	r2, r1
    dab0:	601a      	str	r2, [r3, #0]
    dab2:	6833      	ldr	r3, [r6, #0]
    dab4:	2b00      	cmp	r3, #0
    dab6:	d109      	bne.n	dacc <__hexnan+0x12a>
    dab8:	9b00      	ldr	r3, [sp, #0]
    daba:	429e      	cmp	r6, r3
    dabc:	d102      	bne.n	dac4 <__hexnan+0x122>
    dabe:	2301      	movs	r3, #1
    dac0:	6033      	str	r3, [r6, #0]
    dac2:	e003      	b.n	dacc <__hexnan+0x12a>
    dac4:	3e04      	subs	r6, #4
    dac6:	e7f4      	b.n	dab2 <__hexnan+0x110>
    dac8:	2004      	movs	r0, #4
    daca:	e000      	b.n	dace <__hexnan+0x12c>
    dacc:	2005      	movs	r0, #5
    dace:	b009      	add	sp, #36	; 0x24
    dad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0000dad4 <_isatty_r>:
    dad4:	b538      	push	{r3, r4, r5, lr}
    dad6:	2300      	movs	r3, #0
    dad8:	4c06      	ldr	r4, [pc, #24]	; (daf4 <_isatty_r+0x20>)
    dada:	1c05      	adds	r5, r0, #0
    dadc:	1c08      	adds	r0, r1, #0
    dade:	6023      	str	r3, [r4, #0]
    dae0:	f7f6 fa0a 	bl	3ef8 <_isatty>
    dae4:	1c43      	adds	r3, r0, #1
    dae6:	d103      	bne.n	daf0 <_isatty_r+0x1c>
    dae8:	6823      	ldr	r3, [r4, #0]
    daea:	2b00      	cmp	r3, #0
    daec:	d000      	beq.n	daf0 <_isatty_r+0x1c>
    daee:	602b      	str	r3, [r5, #0]
    daf0:	bd38      	pop	{r3, r4, r5, pc}
    daf2:	46c0      	nop			; (mov r8, r8)
    daf4:	200047c8 	.word	0x200047c8

0000daf8 <_localeconv_r>:
    daf8:	4800      	ldr	r0, [pc, #0]	; (dafc <_localeconv_r+0x4>)
    dafa:	4770      	bx	lr
    dafc:	2000013c 	.word	0x2000013c

0000db00 <_lseek_r>:
    db00:	b538      	push	{r3, r4, r5, lr}
    db02:	1c05      	adds	r5, r0, #0
    db04:	2000      	movs	r0, #0
    db06:	4c07      	ldr	r4, [pc, #28]	; (db24 <_lseek_r+0x24>)
    db08:	6020      	str	r0, [r4, #0]
    db0a:	1c08      	adds	r0, r1, #0
    db0c:	1c11      	adds	r1, r2, #0
    db0e:	1c1a      	adds	r2, r3, #0
    db10:	f7f6 fa06 	bl	3f20 <_lseek>
    db14:	1c43      	adds	r3, r0, #1
    db16:	d103      	bne.n	db20 <_lseek_r+0x20>
    db18:	6823      	ldr	r3, [r4, #0]
    db1a:	2b00      	cmp	r3, #0
    db1c:	d000      	beq.n	db20 <_lseek_r+0x20>
    db1e:	602b      	str	r3, [r5, #0]
    db20:	bd38      	pop	{r3, r4, r5, pc}
    db22:	46c0      	nop			; (mov r8, r8)
    db24:	200047c8 	.word	0x200047c8

0000db28 <memmove>:
    db28:	b510      	push	{r4, lr}
    db2a:	4281      	cmp	r1, r0
    db2c:	d208      	bcs.n	db40 <memmove+0x18>
    db2e:	188b      	adds	r3, r1, r2
    db30:	4298      	cmp	r0, r3
    db32:	d205      	bcs.n	db40 <memmove+0x18>
    db34:	1a9b      	subs	r3, r3, r2
    db36:	3a01      	subs	r2, #1
    db38:	d309      	bcc.n	db4e <memmove+0x26>
    db3a:	5c99      	ldrb	r1, [r3, r2]
    db3c:	5481      	strb	r1, [r0, r2]
    db3e:	e7fa      	b.n	db36 <memmove+0xe>
    db40:	2300      	movs	r3, #0
    db42:	4293      	cmp	r3, r2
    db44:	d003      	beq.n	db4e <memmove+0x26>
    db46:	5ccc      	ldrb	r4, [r1, r3]
    db48:	54c4      	strb	r4, [r0, r3]
    db4a:	3301      	adds	r3, #1
    db4c:	e7f9      	b.n	db42 <memmove+0x1a>
    db4e:	bd10      	pop	{r4, pc}

0000db50 <_Balloc>:
    db50:	b570      	push	{r4, r5, r6, lr}
    db52:	6a46      	ldr	r6, [r0, #36]	; 0x24
    db54:	1c04      	adds	r4, r0, #0
    db56:	1c0d      	adds	r5, r1, #0
    db58:	2e00      	cmp	r6, #0
    db5a:	d107      	bne.n	db6c <_Balloc+0x1c>
    db5c:	2010      	movs	r0, #16
    db5e:	f7fc f977 	bl	9e50 <malloc>
    db62:	6260      	str	r0, [r4, #36]	; 0x24
    db64:	6046      	str	r6, [r0, #4]
    db66:	6086      	str	r6, [r0, #8]
    db68:	6006      	str	r6, [r0, #0]
    db6a:	60c6      	str	r6, [r0, #12]
    db6c:	6a66      	ldr	r6, [r4, #36]	; 0x24
    db6e:	68f3      	ldr	r3, [r6, #12]
    db70:	2b00      	cmp	r3, #0
    db72:	d009      	beq.n	db88 <_Balloc+0x38>
    db74:	6a62      	ldr	r2, [r4, #36]	; 0x24
    db76:	00ab      	lsls	r3, r5, #2
    db78:	68d2      	ldr	r2, [r2, #12]
    db7a:	18d3      	adds	r3, r2, r3
    db7c:	6818      	ldr	r0, [r3, #0]
    db7e:	2800      	cmp	r0, #0
    db80:	d00e      	beq.n	dba0 <_Balloc+0x50>
    db82:	6802      	ldr	r2, [r0, #0]
    db84:	601a      	str	r2, [r3, #0]
    db86:	e017      	b.n	dbb8 <_Balloc+0x68>
    db88:	1c20      	adds	r0, r4, #0
    db8a:	2104      	movs	r1, #4
    db8c:	2221      	movs	r2, #33	; 0x21
    db8e:	f000 fbe2 	bl	e356 <_calloc_r>
    db92:	6a63      	ldr	r3, [r4, #36]	; 0x24
    db94:	60f0      	str	r0, [r6, #12]
    db96:	68db      	ldr	r3, [r3, #12]
    db98:	2b00      	cmp	r3, #0
    db9a:	d1eb      	bne.n	db74 <_Balloc+0x24>
    db9c:	2000      	movs	r0, #0
    db9e:	e00e      	b.n	dbbe <_Balloc+0x6e>
    dba0:	2101      	movs	r1, #1
    dba2:	1c0e      	adds	r6, r1, #0
    dba4:	40ae      	lsls	r6, r5
    dba6:	1d72      	adds	r2, r6, #5
    dba8:	0092      	lsls	r2, r2, #2
    dbaa:	1c20      	adds	r0, r4, #0
    dbac:	f000 fbd3 	bl	e356 <_calloc_r>
    dbb0:	2800      	cmp	r0, #0
    dbb2:	d0f3      	beq.n	db9c <_Balloc+0x4c>
    dbb4:	6045      	str	r5, [r0, #4]
    dbb6:	6086      	str	r6, [r0, #8]
    dbb8:	2300      	movs	r3, #0
    dbba:	6103      	str	r3, [r0, #16]
    dbbc:	60c3      	str	r3, [r0, #12]
    dbbe:	bd70      	pop	{r4, r5, r6, pc}

0000dbc0 <_Bfree>:
    dbc0:	b570      	push	{r4, r5, r6, lr}
    dbc2:	6a45      	ldr	r5, [r0, #36]	; 0x24
    dbc4:	1c06      	adds	r6, r0, #0
    dbc6:	1c0c      	adds	r4, r1, #0
    dbc8:	2d00      	cmp	r5, #0
    dbca:	d107      	bne.n	dbdc <_Bfree+0x1c>
    dbcc:	2010      	movs	r0, #16
    dbce:	f7fc f93f 	bl	9e50 <malloc>
    dbd2:	6270      	str	r0, [r6, #36]	; 0x24
    dbd4:	6045      	str	r5, [r0, #4]
    dbd6:	6085      	str	r5, [r0, #8]
    dbd8:	6005      	str	r5, [r0, #0]
    dbda:	60c5      	str	r5, [r0, #12]
    dbdc:	2c00      	cmp	r4, #0
    dbde:	d007      	beq.n	dbf0 <_Bfree+0x30>
    dbe0:	6a72      	ldr	r2, [r6, #36]	; 0x24
    dbe2:	6863      	ldr	r3, [r4, #4]
    dbe4:	68d2      	ldr	r2, [r2, #12]
    dbe6:	009b      	lsls	r3, r3, #2
    dbe8:	18d3      	adds	r3, r2, r3
    dbea:	681a      	ldr	r2, [r3, #0]
    dbec:	6022      	str	r2, [r4, #0]
    dbee:	601c      	str	r4, [r3, #0]
    dbf0:	bd70      	pop	{r4, r5, r6, pc}

0000dbf2 <__multadd>:
    dbf2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    dbf4:	1c1e      	adds	r6, r3, #0
    dbf6:	2314      	movs	r3, #20
    dbf8:	469c      	mov	ip, r3
    dbfa:	1c07      	adds	r7, r0, #0
    dbfc:	1c0c      	adds	r4, r1, #0
    dbfe:	2000      	movs	r0, #0
    dc00:	690d      	ldr	r5, [r1, #16]
    dc02:	448c      	add	ip, r1
    dc04:	4663      	mov	r3, ip
    dc06:	8819      	ldrh	r1, [r3, #0]
    dc08:	681b      	ldr	r3, [r3, #0]
    dc0a:	4351      	muls	r1, r2
    dc0c:	0c1b      	lsrs	r3, r3, #16
    dc0e:	4353      	muls	r3, r2
    dc10:	1989      	adds	r1, r1, r6
    dc12:	0c0e      	lsrs	r6, r1, #16
    dc14:	18f3      	adds	r3, r6, r3
    dc16:	b289      	uxth	r1, r1
    dc18:	0c1e      	lsrs	r6, r3, #16
    dc1a:	041b      	lsls	r3, r3, #16
    dc1c:	185b      	adds	r3, r3, r1
    dc1e:	4661      	mov	r1, ip
    dc20:	3001      	adds	r0, #1
    dc22:	c108      	stmia	r1!, {r3}
    dc24:	468c      	mov	ip, r1
    dc26:	42a8      	cmp	r0, r5
    dc28:	dbec      	blt.n	dc04 <__multadd+0x12>
    dc2a:	2e00      	cmp	r6, #0
    dc2c:	d01b      	beq.n	dc66 <__multadd+0x74>
    dc2e:	68a3      	ldr	r3, [r4, #8]
    dc30:	429d      	cmp	r5, r3
    dc32:	db12      	blt.n	dc5a <__multadd+0x68>
    dc34:	6863      	ldr	r3, [r4, #4]
    dc36:	1c38      	adds	r0, r7, #0
    dc38:	1c59      	adds	r1, r3, #1
    dc3a:	f7ff ff89 	bl	db50 <_Balloc>
    dc3e:	1c21      	adds	r1, r4, #0
    dc40:	6923      	ldr	r3, [r4, #16]
    dc42:	9001      	str	r0, [sp, #4]
    dc44:	1c9a      	adds	r2, r3, #2
    dc46:	310c      	adds	r1, #12
    dc48:	0092      	lsls	r2, r2, #2
    dc4a:	300c      	adds	r0, #12
    dc4c:	f7fc f91f 	bl	9e8e <memcpy>
    dc50:	1c21      	adds	r1, r4, #0
    dc52:	1c38      	adds	r0, r7, #0
    dc54:	f7ff ffb4 	bl	dbc0 <_Bfree>
    dc58:	9c01      	ldr	r4, [sp, #4]
    dc5a:	1d2b      	adds	r3, r5, #4
    dc5c:	009b      	lsls	r3, r3, #2
    dc5e:	18e3      	adds	r3, r4, r3
    dc60:	3501      	adds	r5, #1
    dc62:	605e      	str	r6, [r3, #4]
    dc64:	6125      	str	r5, [r4, #16]
    dc66:	1c20      	adds	r0, r4, #0
    dc68:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000dc6a <__s2b>:
    dc6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    dc6c:	1c06      	adds	r6, r0, #0
    dc6e:	1c18      	adds	r0, r3, #0
    dc70:	1c0c      	adds	r4, r1, #0
    dc72:	3008      	adds	r0, #8
    dc74:	2109      	movs	r1, #9
    dc76:	9301      	str	r3, [sp, #4]
    dc78:	1c15      	adds	r5, r2, #0
    dc7a:	f7f8 fd87 	bl	678c <__aeabi_idiv>
    dc7e:	2301      	movs	r3, #1
    dc80:	2100      	movs	r1, #0
    dc82:	4298      	cmp	r0, r3
    dc84:	dd02      	ble.n	dc8c <__s2b+0x22>
    dc86:	005b      	lsls	r3, r3, #1
    dc88:	3101      	adds	r1, #1
    dc8a:	e7fa      	b.n	dc82 <__s2b+0x18>
    dc8c:	1c30      	adds	r0, r6, #0
    dc8e:	f7ff ff5f 	bl	db50 <_Balloc>
    dc92:	9b08      	ldr	r3, [sp, #32]
    dc94:	1c01      	adds	r1, r0, #0
    dc96:	6143      	str	r3, [r0, #20]
    dc98:	2301      	movs	r3, #1
    dc9a:	6103      	str	r3, [r0, #16]
    dc9c:	2d09      	cmp	r5, #9
    dc9e:	dd12      	ble.n	dcc6 <__s2b+0x5c>
    dca0:	1c23      	adds	r3, r4, #0
    dca2:	3309      	adds	r3, #9
    dca4:	1c1f      	adds	r7, r3, #0
    dca6:	9300      	str	r3, [sp, #0]
    dca8:	1964      	adds	r4, r4, r5
    dcaa:	783b      	ldrb	r3, [r7, #0]
    dcac:	1c30      	adds	r0, r6, #0
    dcae:	3b30      	subs	r3, #48	; 0x30
    dcb0:	220a      	movs	r2, #10
    dcb2:	f7ff ff9e 	bl	dbf2 <__multadd>
    dcb6:	3701      	adds	r7, #1
    dcb8:	1c01      	adds	r1, r0, #0
    dcba:	42a7      	cmp	r7, r4
    dcbc:	d1f5      	bne.n	dcaa <__s2b+0x40>
    dcbe:	9b00      	ldr	r3, [sp, #0]
    dcc0:	195c      	adds	r4, r3, r5
    dcc2:	3c08      	subs	r4, #8
    dcc4:	e001      	b.n	dcca <__s2b+0x60>
    dcc6:	2509      	movs	r5, #9
    dcc8:	340a      	adds	r4, #10
    dcca:	1c2f      	adds	r7, r5, #0
    dccc:	9b01      	ldr	r3, [sp, #4]
    dcce:	429f      	cmp	r7, r3
    dcd0:	da09      	bge.n	dce6 <__s2b+0x7c>
    dcd2:	1b63      	subs	r3, r4, r5
    dcd4:	5ddb      	ldrb	r3, [r3, r7]
    dcd6:	1c30      	adds	r0, r6, #0
    dcd8:	3b30      	subs	r3, #48	; 0x30
    dcda:	220a      	movs	r2, #10
    dcdc:	f7ff ff89 	bl	dbf2 <__multadd>
    dce0:	3701      	adds	r7, #1
    dce2:	1c01      	adds	r1, r0, #0
    dce4:	e7f2      	b.n	dccc <__s2b+0x62>
    dce6:	1c08      	adds	r0, r1, #0
    dce8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000dcea <__hi0bits>:
    dcea:	2200      	movs	r2, #0
    dcec:	1c03      	adds	r3, r0, #0
    dcee:	0c01      	lsrs	r1, r0, #16
    dcf0:	4291      	cmp	r1, r2
    dcf2:	d101      	bne.n	dcf8 <__hi0bits+0xe>
    dcf4:	0403      	lsls	r3, r0, #16
    dcf6:	3210      	adds	r2, #16
    dcf8:	0e19      	lsrs	r1, r3, #24
    dcfa:	d101      	bne.n	dd00 <__hi0bits+0x16>
    dcfc:	3208      	adds	r2, #8
    dcfe:	021b      	lsls	r3, r3, #8
    dd00:	0f19      	lsrs	r1, r3, #28
    dd02:	d101      	bne.n	dd08 <__hi0bits+0x1e>
    dd04:	3204      	adds	r2, #4
    dd06:	011b      	lsls	r3, r3, #4
    dd08:	0f99      	lsrs	r1, r3, #30
    dd0a:	d101      	bne.n	dd10 <__hi0bits+0x26>
    dd0c:	3202      	adds	r2, #2
    dd0e:	009b      	lsls	r3, r3, #2
    dd10:	1c10      	adds	r0, r2, #0
    dd12:	2b00      	cmp	r3, #0
    dd14:	db03      	blt.n	dd1e <__hi0bits+0x34>
    dd16:	2020      	movs	r0, #32
    dd18:	005b      	lsls	r3, r3, #1
    dd1a:	d500      	bpl.n	dd1e <__hi0bits+0x34>
    dd1c:	1c50      	adds	r0, r2, #1
    dd1e:	4770      	bx	lr

0000dd20 <__lo0bits>:
    dd20:	2207      	movs	r2, #7
    dd22:	6803      	ldr	r3, [r0, #0]
    dd24:	b510      	push	{r4, lr}
    dd26:	1c01      	adds	r1, r0, #0
    dd28:	401a      	ands	r2, r3
    dd2a:	d00c      	beq.n	dd46 <__lo0bits+0x26>
    dd2c:	2401      	movs	r4, #1
    dd2e:	2000      	movs	r0, #0
    dd30:	4223      	tst	r3, r4
    dd32:	d123      	bne.n	dd7c <__lo0bits+0x5c>
    dd34:	2202      	movs	r2, #2
    dd36:	4213      	tst	r3, r2
    dd38:	d003      	beq.n	dd42 <__lo0bits+0x22>
    dd3a:	40e3      	lsrs	r3, r4
    dd3c:	1c20      	adds	r0, r4, #0
    dd3e:	600b      	str	r3, [r1, #0]
    dd40:	e01c      	b.n	dd7c <__lo0bits+0x5c>
    dd42:	089b      	lsrs	r3, r3, #2
    dd44:	e018      	b.n	dd78 <__lo0bits+0x58>
    dd46:	b298      	uxth	r0, r3
    dd48:	2800      	cmp	r0, #0
    dd4a:	d101      	bne.n	dd50 <__lo0bits+0x30>
    dd4c:	2210      	movs	r2, #16
    dd4e:	0c1b      	lsrs	r3, r3, #16
    dd50:	b2d8      	uxtb	r0, r3
    dd52:	2800      	cmp	r0, #0
    dd54:	d101      	bne.n	dd5a <__lo0bits+0x3a>
    dd56:	3208      	adds	r2, #8
    dd58:	0a1b      	lsrs	r3, r3, #8
    dd5a:	0718      	lsls	r0, r3, #28
    dd5c:	d101      	bne.n	dd62 <__lo0bits+0x42>
    dd5e:	3204      	adds	r2, #4
    dd60:	091b      	lsrs	r3, r3, #4
    dd62:	0798      	lsls	r0, r3, #30
    dd64:	d101      	bne.n	dd6a <__lo0bits+0x4a>
    dd66:	3202      	adds	r2, #2
    dd68:	089b      	lsrs	r3, r3, #2
    dd6a:	07d8      	lsls	r0, r3, #31
    dd6c:	d404      	bmi.n	dd78 <__lo0bits+0x58>
    dd6e:	085b      	lsrs	r3, r3, #1
    dd70:	2020      	movs	r0, #32
    dd72:	2b00      	cmp	r3, #0
    dd74:	d002      	beq.n	dd7c <__lo0bits+0x5c>
    dd76:	3201      	adds	r2, #1
    dd78:	1c10      	adds	r0, r2, #0
    dd7a:	600b      	str	r3, [r1, #0]
    dd7c:	bd10      	pop	{r4, pc}

0000dd7e <__i2b>:
    dd7e:	b510      	push	{r4, lr}
    dd80:	1c0c      	adds	r4, r1, #0
    dd82:	2101      	movs	r1, #1
    dd84:	f7ff fee4 	bl	db50 <_Balloc>
    dd88:	2301      	movs	r3, #1
    dd8a:	6144      	str	r4, [r0, #20]
    dd8c:	6103      	str	r3, [r0, #16]
    dd8e:	bd10      	pop	{r4, pc}

0000dd90 <__multiply>:
    dd90:	b5f0      	push	{r4, r5, r6, r7, lr}
    dd92:	690b      	ldr	r3, [r1, #16]
    dd94:	1c14      	adds	r4, r2, #0
    dd96:	6912      	ldr	r2, [r2, #16]
    dd98:	b089      	sub	sp, #36	; 0x24
    dd9a:	1c0d      	adds	r5, r1, #0
    dd9c:	4293      	cmp	r3, r2
    dd9e:	da01      	bge.n	dda4 <__multiply+0x14>
    dda0:	1c25      	adds	r5, r4, #0
    dda2:	1c0c      	adds	r4, r1, #0
    dda4:	692f      	ldr	r7, [r5, #16]
    dda6:	6926      	ldr	r6, [r4, #16]
    dda8:	68aa      	ldr	r2, [r5, #8]
    ddaa:	19bb      	adds	r3, r7, r6
    ddac:	6869      	ldr	r1, [r5, #4]
    ddae:	9300      	str	r3, [sp, #0]
    ddb0:	4293      	cmp	r3, r2
    ddb2:	dd00      	ble.n	ddb6 <__multiply+0x26>
    ddb4:	3101      	adds	r1, #1
    ddb6:	f7ff fecb 	bl	db50 <_Balloc>
    ddba:	1c01      	adds	r1, r0, #0
    ddbc:	9b00      	ldr	r3, [sp, #0]
    ddbe:	3114      	adds	r1, #20
    ddc0:	4684      	mov	ip, r0
    ddc2:	0098      	lsls	r0, r3, #2
    ddc4:	1c0b      	adds	r3, r1, #0
    ddc6:	1808      	adds	r0, r1, r0
    ddc8:	4283      	cmp	r3, r0
    ddca:	d202      	bcs.n	ddd2 <__multiply+0x42>
    ddcc:	2200      	movs	r2, #0
    ddce:	c304      	stmia	r3!, {r2}
    ddd0:	e7fa      	b.n	ddc8 <__multiply+0x38>
    ddd2:	3514      	adds	r5, #20
    ddd4:	00bf      	lsls	r7, r7, #2
    ddd6:	19eb      	adds	r3, r5, r7
    ddd8:	3414      	adds	r4, #20
    ddda:	00b6      	lsls	r6, r6, #2
    dddc:	9304      	str	r3, [sp, #16]
    ddde:	19a3      	adds	r3, r4, r6
    dde0:	9502      	str	r5, [sp, #8]
    dde2:	9306      	str	r3, [sp, #24]
    dde4:	9b06      	ldr	r3, [sp, #24]
    dde6:	429c      	cmp	r4, r3
    dde8:	d256      	bcs.n	de98 <__multiply+0x108>
    ddea:	8823      	ldrh	r3, [r4, #0]
    ddec:	9303      	str	r3, [sp, #12]
    ddee:	2b00      	cmp	r3, #0
    ddf0:	d022      	beq.n	de38 <__multiply+0xa8>
    ddf2:	1c0e      	adds	r6, r1, #0
    ddf4:	2700      	movs	r7, #0
    ddf6:	9b02      	ldr	r3, [sp, #8]
    ddf8:	9301      	str	r3, [sp, #4]
    ddfa:	9b01      	ldr	r3, [sp, #4]
    ddfc:	9d03      	ldr	r5, [sp, #12]
    ddfe:	cb04      	ldmia	r3!, {r2}
    de00:	9605      	str	r6, [sp, #20]
    de02:	9301      	str	r3, [sp, #4]
    de04:	8833      	ldrh	r3, [r6, #0]
    de06:	9307      	str	r3, [sp, #28]
    de08:	b293      	uxth	r3, r2
    de0a:	436b      	muls	r3, r5
    de0c:	9d07      	ldr	r5, [sp, #28]
    de0e:	0c12      	lsrs	r2, r2, #16
    de10:	18eb      	adds	r3, r5, r3
    de12:	6835      	ldr	r5, [r6, #0]
    de14:	19db      	adds	r3, r3, r7
    de16:	0c2f      	lsrs	r7, r5, #16
    de18:	9d03      	ldr	r5, [sp, #12]
    de1a:	436a      	muls	r2, r5
    de1c:	18ba      	adds	r2, r7, r2
    de1e:	0c1f      	lsrs	r7, r3, #16
    de20:	19d2      	adds	r2, r2, r7
    de22:	0c17      	lsrs	r7, r2, #16
    de24:	b29b      	uxth	r3, r3
    de26:	0412      	lsls	r2, r2, #16
    de28:	4313      	orrs	r3, r2
    de2a:	c608      	stmia	r6!, {r3}
    de2c:	9a01      	ldr	r2, [sp, #4]
    de2e:	9b04      	ldr	r3, [sp, #16]
    de30:	429a      	cmp	r2, r3
    de32:	d3e2      	bcc.n	ddfa <__multiply+0x6a>
    de34:	9b05      	ldr	r3, [sp, #20]
    de36:	605f      	str	r7, [r3, #4]
    de38:	6823      	ldr	r3, [r4, #0]
    de3a:	0c1b      	lsrs	r3, r3, #16
    de3c:	9301      	str	r3, [sp, #4]
    de3e:	d021      	beq.n	de84 <__multiply+0xf4>
    de40:	2200      	movs	r2, #0
    de42:	1c0d      	adds	r5, r1, #0
    de44:	680b      	ldr	r3, [r1, #0]
    de46:	9f02      	ldr	r7, [sp, #8]
    de48:	9203      	str	r2, [sp, #12]
    de4a:	883e      	ldrh	r6, [r7, #0]
    de4c:	9a01      	ldr	r2, [sp, #4]
    de4e:	b29b      	uxth	r3, r3
    de50:	4356      	muls	r6, r2
    de52:	682a      	ldr	r2, [r5, #0]
    de54:	9505      	str	r5, [sp, #20]
    de56:	0c12      	lsrs	r2, r2, #16
    de58:	18b2      	adds	r2, r6, r2
    de5a:	9e03      	ldr	r6, [sp, #12]
    de5c:	1992      	adds	r2, r2, r6
    de5e:	0416      	lsls	r6, r2, #16
    de60:	4333      	orrs	r3, r6
    de62:	602b      	str	r3, [r5, #0]
    de64:	cf08      	ldmia	r7!, {r3}
    de66:	9e01      	ldr	r6, [sp, #4]
    de68:	0c1b      	lsrs	r3, r3, #16
    de6a:	4373      	muls	r3, r6
    de6c:	88ae      	ldrh	r6, [r5, #4]
    de6e:	0c12      	lsrs	r2, r2, #16
    de70:	199b      	adds	r3, r3, r6
    de72:	189b      	adds	r3, r3, r2
    de74:	0c1a      	lsrs	r2, r3, #16
    de76:	9203      	str	r2, [sp, #12]
    de78:	9a04      	ldr	r2, [sp, #16]
    de7a:	3504      	adds	r5, #4
    de7c:	42ba      	cmp	r2, r7
    de7e:	d8e4      	bhi.n	de4a <__multiply+0xba>
    de80:	9a05      	ldr	r2, [sp, #20]
    de82:	6053      	str	r3, [r2, #4]
    de84:	3404      	adds	r4, #4
    de86:	3104      	adds	r1, #4
    de88:	e7ac      	b.n	dde4 <__multiply+0x54>
    de8a:	3804      	subs	r0, #4
    de8c:	6803      	ldr	r3, [r0, #0]
    de8e:	2b00      	cmp	r3, #0
    de90:	d105      	bne.n	de9e <__multiply+0x10e>
    de92:	9b00      	ldr	r3, [sp, #0]
    de94:	3b01      	subs	r3, #1
    de96:	9300      	str	r3, [sp, #0]
    de98:	9b00      	ldr	r3, [sp, #0]
    de9a:	2b00      	cmp	r3, #0
    de9c:	dcf5      	bgt.n	de8a <__multiply+0xfa>
    de9e:	4663      	mov	r3, ip
    dea0:	4660      	mov	r0, ip
    dea2:	9a00      	ldr	r2, [sp, #0]
    dea4:	611a      	str	r2, [r3, #16]
    dea6:	b009      	add	sp, #36	; 0x24
    dea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0000deac <__pow5mult>:
    deac:	2303      	movs	r3, #3
    deae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    deb0:	4013      	ands	r3, r2
    deb2:	1c05      	adds	r5, r0, #0
    deb4:	1c0e      	adds	r6, r1, #0
    deb6:	1c14      	adds	r4, r2, #0
    deb8:	2b00      	cmp	r3, #0
    deba:	d007      	beq.n	decc <__pow5mult+0x20>
    debc:	4a22      	ldr	r2, [pc, #136]	; (df48 <__pow5mult+0x9c>)
    debe:	3b01      	subs	r3, #1
    dec0:	009b      	lsls	r3, r3, #2
    dec2:	589a      	ldr	r2, [r3, r2]
    dec4:	2300      	movs	r3, #0
    dec6:	f7ff fe94 	bl	dbf2 <__multadd>
    deca:	1c06      	adds	r6, r0, #0
    decc:	10a3      	asrs	r3, r4, #2
    dece:	9301      	str	r3, [sp, #4]
    ded0:	d037      	beq.n	df42 <__pow5mult+0x96>
    ded2:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    ded4:	2c00      	cmp	r4, #0
    ded6:	d107      	bne.n	dee8 <__pow5mult+0x3c>
    ded8:	2010      	movs	r0, #16
    deda:	f7fb ffb9 	bl	9e50 <malloc>
    dede:	6268      	str	r0, [r5, #36]	; 0x24
    dee0:	6044      	str	r4, [r0, #4]
    dee2:	6084      	str	r4, [r0, #8]
    dee4:	6004      	str	r4, [r0, #0]
    dee6:	60c4      	str	r4, [r0, #12]
    dee8:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    deea:	68bc      	ldr	r4, [r7, #8]
    deec:	2c00      	cmp	r4, #0
    deee:	d110      	bne.n	df12 <__pow5mult+0x66>
    def0:	1c28      	adds	r0, r5, #0
    def2:	4916      	ldr	r1, [pc, #88]	; (df4c <__pow5mult+0xa0>)
    def4:	f7ff ff43 	bl	dd7e <__i2b>
    def8:	2300      	movs	r3, #0
    defa:	60b8      	str	r0, [r7, #8]
    defc:	1c04      	adds	r4, r0, #0
    defe:	6003      	str	r3, [r0, #0]
    df00:	e007      	b.n	df12 <__pow5mult+0x66>
    df02:	9b01      	ldr	r3, [sp, #4]
    df04:	105b      	asrs	r3, r3, #1
    df06:	9301      	str	r3, [sp, #4]
    df08:	d01b      	beq.n	df42 <__pow5mult+0x96>
    df0a:	6820      	ldr	r0, [r4, #0]
    df0c:	2800      	cmp	r0, #0
    df0e:	d00f      	beq.n	df30 <__pow5mult+0x84>
    df10:	1c04      	adds	r4, r0, #0
    df12:	9b01      	ldr	r3, [sp, #4]
    df14:	07db      	lsls	r3, r3, #31
    df16:	d5f4      	bpl.n	df02 <__pow5mult+0x56>
    df18:	1c31      	adds	r1, r6, #0
    df1a:	1c22      	adds	r2, r4, #0
    df1c:	1c28      	adds	r0, r5, #0
    df1e:	f7ff ff37 	bl	dd90 <__multiply>
    df22:	1c07      	adds	r7, r0, #0
    df24:	1c31      	adds	r1, r6, #0
    df26:	1c28      	adds	r0, r5, #0
    df28:	f7ff fe4a 	bl	dbc0 <_Bfree>
    df2c:	1c3e      	adds	r6, r7, #0
    df2e:	e7e8      	b.n	df02 <__pow5mult+0x56>
    df30:	1c28      	adds	r0, r5, #0
    df32:	1c21      	adds	r1, r4, #0
    df34:	1c22      	adds	r2, r4, #0
    df36:	f7ff ff2b 	bl	dd90 <__multiply>
    df3a:	2300      	movs	r3, #0
    df3c:	6020      	str	r0, [r4, #0]
    df3e:	6003      	str	r3, [r0, #0]
    df40:	e7e6      	b.n	df10 <__pow5mult+0x64>
    df42:	1c30      	adds	r0, r6, #0
    df44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    df46:	46c0      	nop			; (mov r8, r8)
    df48:	0000fd20 	.word	0x0000fd20
    df4c:	00000271 	.word	0x00000271

0000df50 <__lshift>:
    df50:	b5f0      	push	{r4, r5, r6, r7, lr}
    df52:	1c0c      	adds	r4, r1, #0
    df54:	1c17      	adds	r7, r2, #0
    df56:	6923      	ldr	r3, [r4, #16]
    df58:	1155      	asrs	r5, r2, #5
    df5a:	b085      	sub	sp, #20
    df5c:	18eb      	adds	r3, r5, r3
    df5e:	9301      	str	r3, [sp, #4]
    df60:	3301      	adds	r3, #1
    df62:	9300      	str	r3, [sp, #0]
    df64:	6849      	ldr	r1, [r1, #4]
    df66:	68a3      	ldr	r3, [r4, #8]
    df68:	9002      	str	r0, [sp, #8]
    df6a:	9a00      	ldr	r2, [sp, #0]
    df6c:	429a      	cmp	r2, r3
    df6e:	dd02      	ble.n	df76 <__lshift+0x26>
    df70:	3101      	adds	r1, #1
    df72:	005b      	lsls	r3, r3, #1
    df74:	e7f9      	b.n	df6a <__lshift+0x1a>
    df76:	9802      	ldr	r0, [sp, #8]
    df78:	f7ff fdea 	bl	db50 <_Balloc>
    df7c:	1c02      	adds	r2, r0, #0
    df7e:	1c06      	adds	r6, r0, #0
    df80:	2300      	movs	r3, #0
    df82:	3214      	adds	r2, #20
    df84:	42ab      	cmp	r3, r5
    df86:	da04      	bge.n	df92 <__lshift+0x42>
    df88:	2000      	movs	r0, #0
    df8a:	0099      	lsls	r1, r3, #2
    df8c:	5050      	str	r0, [r2, r1]
    df8e:	3301      	adds	r3, #1
    df90:	e7f8      	b.n	df84 <__lshift+0x34>
    df92:	43eb      	mvns	r3, r5
    df94:	17db      	asrs	r3, r3, #31
    df96:	401d      	ands	r5, r3
    df98:	1c23      	adds	r3, r4, #0
    df9a:	00ad      	lsls	r5, r5, #2
    df9c:	1955      	adds	r5, r2, r5
    df9e:	6922      	ldr	r2, [r4, #16]
    dfa0:	3314      	adds	r3, #20
    dfa2:	0092      	lsls	r2, r2, #2
    dfa4:	189a      	adds	r2, r3, r2
    dfa6:	4694      	mov	ip, r2
    dfa8:	221f      	movs	r2, #31
    dfaa:	4017      	ands	r7, r2
    dfac:	d014      	beq.n	dfd8 <__lshift+0x88>
    dfae:	3201      	adds	r2, #1
    dfb0:	1bd2      	subs	r2, r2, r7
    dfb2:	9203      	str	r2, [sp, #12]
    dfb4:	2200      	movs	r2, #0
    dfb6:	6819      	ldr	r1, [r3, #0]
    dfb8:	1c28      	adds	r0, r5, #0
    dfba:	40b9      	lsls	r1, r7
    dfbc:	430a      	orrs	r2, r1
    dfbe:	c504      	stmia	r5!, {r2}
    dfc0:	cb04      	ldmia	r3!, {r2}
    dfc2:	9903      	ldr	r1, [sp, #12]
    dfc4:	40ca      	lsrs	r2, r1
    dfc6:	459c      	cmp	ip, r3
    dfc8:	d8f5      	bhi.n	dfb6 <__lshift+0x66>
    dfca:	6042      	str	r2, [r0, #4]
    dfcc:	2a00      	cmp	r2, #0
    dfce:	d007      	beq.n	dfe0 <__lshift+0x90>
    dfd0:	9b01      	ldr	r3, [sp, #4]
    dfd2:	3302      	adds	r3, #2
    dfd4:	9300      	str	r3, [sp, #0]
    dfd6:	e003      	b.n	dfe0 <__lshift+0x90>
    dfd8:	cb04      	ldmia	r3!, {r2}
    dfda:	c504      	stmia	r5!, {r2}
    dfdc:	459c      	cmp	ip, r3
    dfde:	d8fb      	bhi.n	dfd8 <__lshift+0x88>
    dfe0:	9b00      	ldr	r3, [sp, #0]
    dfe2:	9802      	ldr	r0, [sp, #8]
    dfe4:	3b01      	subs	r3, #1
    dfe6:	6133      	str	r3, [r6, #16]
    dfe8:	1c21      	adds	r1, r4, #0
    dfea:	f7ff fde9 	bl	dbc0 <_Bfree>
    dfee:	1c30      	adds	r0, r6, #0
    dff0:	b005      	add	sp, #20
    dff2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000dff4 <__mcmp>:
    dff4:	6903      	ldr	r3, [r0, #16]
    dff6:	690a      	ldr	r2, [r1, #16]
    dff8:	b510      	push	{r4, lr}
    dffa:	1a9b      	subs	r3, r3, r2
    dffc:	1c04      	adds	r4, r0, #0
    dffe:	1e18      	subs	r0, r3, #0
    e000:	d112      	bne.n	e028 <__mcmp+0x34>
    e002:	0093      	lsls	r3, r2, #2
    e004:	3414      	adds	r4, #20
    e006:	3114      	adds	r1, #20
    e008:	18e2      	adds	r2, r4, r3
    e00a:	18c9      	adds	r1, r1, r3
    e00c:	3a04      	subs	r2, #4
    e00e:	3904      	subs	r1, #4
    e010:	6813      	ldr	r3, [r2, #0]
    e012:	6808      	ldr	r0, [r1, #0]
    e014:	4283      	cmp	r3, r0
    e016:	d004      	beq.n	e022 <__mcmp+0x2e>
    e018:	4283      	cmp	r3, r0
    e01a:	419b      	sbcs	r3, r3
    e01c:	2001      	movs	r0, #1
    e01e:	4318      	orrs	r0, r3
    e020:	e002      	b.n	e028 <__mcmp+0x34>
    e022:	42a2      	cmp	r2, r4
    e024:	d8f2      	bhi.n	e00c <__mcmp+0x18>
    e026:	2000      	movs	r0, #0
    e028:	bd10      	pop	{r4, pc}

0000e02a <__mdiff>:
    e02a:	b5f0      	push	{r4, r5, r6, r7, lr}
    e02c:	1c07      	adds	r7, r0, #0
    e02e:	b085      	sub	sp, #20
    e030:	1c08      	adds	r0, r1, #0
    e032:	1c0c      	adds	r4, r1, #0
    e034:	1c11      	adds	r1, r2, #0
    e036:	1c15      	adds	r5, r2, #0
    e038:	f7ff ffdc 	bl	dff4 <__mcmp>
    e03c:	1e06      	subs	r6, r0, #0
    e03e:	d107      	bne.n	e050 <__mdiff+0x26>
    e040:	1c38      	adds	r0, r7, #0
    e042:	1c31      	adds	r1, r6, #0
    e044:	f7ff fd84 	bl	db50 <_Balloc>
    e048:	2301      	movs	r3, #1
    e04a:	6146      	str	r6, [r0, #20]
    e04c:	6103      	str	r3, [r0, #16]
    e04e:	e055      	b.n	e0fc <__mdiff+0xd2>
    e050:	2300      	movs	r3, #0
    e052:	9301      	str	r3, [sp, #4]
    e054:	4298      	cmp	r0, r3
    e056:	da04      	bge.n	e062 <__mdiff+0x38>
    e058:	1c23      	adds	r3, r4, #0
    e05a:	1c2c      	adds	r4, r5, #0
    e05c:	1c1d      	adds	r5, r3, #0
    e05e:	2301      	movs	r3, #1
    e060:	9301      	str	r3, [sp, #4]
    e062:	1c38      	adds	r0, r7, #0
    e064:	6861      	ldr	r1, [r4, #4]
    e066:	f7ff fd73 	bl	db50 <_Balloc>
    e06a:	9b01      	ldr	r3, [sp, #4]
    e06c:	6926      	ldr	r6, [r4, #16]
    e06e:	1c2f      	adds	r7, r5, #0
    e070:	60c3      	str	r3, [r0, #12]
    e072:	3414      	adds	r4, #20
    e074:	00b3      	lsls	r3, r6, #2
    e076:	18e3      	adds	r3, r4, r3
    e078:	1c02      	adds	r2, r0, #0
    e07a:	9302      	str	r3, [sp, #8]
    e07c:	692b      	ldr	r3, [r5, #16]
    e07e:	2500      	movs	r5, #0
    e080:	3714      	adds	r7, #20
    e082:	009b      	lsls	r3, r3, #2
    e084:	18fb      	adds	r3, r7, r3
    e086:	9303      	str	r3, [sp, #12]
    e088:	3214      	adds	r2, #20
    e08a:	cc08      	ldmia	r4!, {r3}
    e08c:	4669      	mov	r1, sp
    e08e:	469c      	mov	ip, r3
    e090:	cf08      	ldmia	r7!, {r3}
    e092:	3204      	adds	r2, #4
    e094:	9300      	str	r3, [sp, #0]
    e096:	4663      	mov	r3, ip
    e098:	808b      	strh	r3, [r1, #4]
    e09a:	888b      	ldrh	r3, [r1, #4]
    e09c:	195d      	adds	r5, r3, r5
    e09e:	9b00      	ldr	r3, [sp, #0]
    e0a0:	b29b      	uxth	r3, r3
    e0a2:	1aeb      	subs	r3, r5, r3
    e0a4:	4665      	mov	r5, ip
    e0a6:	9301      	str	r3, [sp, #4]
    e0a8:	9b00      	ldr	r3, [sp, #0]
    e0aa:	0c2d      	lsrs	r5, r5, #16
    e0ac:	0c19      	lsrs	r1, r3, #16
    e0ae:	9b01      	ldr	r3, [sp, #4]
    e0b0:	1a69      	subs	r1, r5, r1
    e0b2:	141d      	asrs	r5, r3, #16
    e0b4:	1f13      	subs	r3, r2, #4
    e0b6:	469c      	mov	ip, r3
    e0b8:	466b      	mov	r3, sp
    e0ba:	1949      	adds	r1, r1, r5
    e0bc:	889b      	ldrh	r3, [r3, #4]
    e0be:	140d      	asrs	r5, r1, #16
    e0c0:	0409      	lsls	r1, r1, #16
    e0c2:	430b      	orrs	r3, r1
    e0c4:	4661      	mov	r1, ip
    e0c6:	600b      	str	r3, [r1, #0]
    e0c8:	9b03      	ldr	r3, [sp, #12]
    e0ca:	429f      	cmp	r7, r3
    e0cc:	d3dd      	bcc.n	e08a <__mdiff+0x60>
    e0ce:	9902      	ldr	r1, [sp, #8]
    e0d0:	1c13      	adds	r3, r2, #0
    e0d2:	428c      	cmp	r4, r1
    e0d4:	d20b      	bcs.n	e0ee <__mdiff+0xc4>
    e0d6:	cc08      	ldmia	r4!, {r3}
    e0d8:	b299      	uxth	r1, r3
    e0da:	1949      	adds	r1, r1, r5
    e0dc:	140d      	asrs	r5, r1, #16
    e0de:	0c1b      	lsrs	r3, r3, #16
    e0e0:	18eb      	adds	r3, r5, r3
    e0e2:	141d      	asrs	r5, r3, #16
    e0e4:	b289      	uxth	r1, r1
    e0e6:	041b      	lsls	r3, r3, #16
    e0e8:	430b      	orrs	r3, r1
    e0ea:	c208      	stmia	r2!, {r3}
    e0ec:	e7ef      	b.n	e0ce <__mdiff+0xa4>
    e0ee:	3b04      	subs	r3, #4
    e0f0:	681a      	ldr	r2, [r3, #0]
    e0f2:	2a00      	cmp	r2, #0
    e0f4:	d101      	bne.n	e0fa <__mdiff+0xd0>
    e0f6:	3e01      	subs	r6, #1
    e0f8:	e7f9      	b.n	e0ee <__mdiff+0xc4>
    e0fa:	6106      	str	r6, [r0, #16]
    e0fc:	b005      	add	sp, #20
    e0fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000e100 <__ulp>:
    e100:	4b0f      	ldr	r3, [pc, #60]	; (e140 <__ulp+0x40>)
    e102:	b510      	push	{r4, lr}
    e104:	4019      	ands	r1, r3
    e106:	4b0f      	ldr	r3, [pc, #60]	; (e144 <__ulp+0x44>)
    e108:	18c9      	adds	r1, r1, r3
    e10a:	2900      	cmp	r1, #0
    e10c:	dd02      	ble.n	e114 <__ulp+0x14>
    e10e:	2200      	movs	r2, #0
    e110:	1c0b      	adds	r3, r1, #0
    e112:	e011      	b.n	e138 <__ulp+0x38>
    e114:	4249      	negs	r1, r1
    e116:	1509      	asrs	r1, r1, #20
    e118:	2200      	movs	r2, #0
    e11a:	2300      	movs	r3, #0
    e11c:	2913      	cmp	r1, #19
    e11e:	dc04      	bgt.n	e12a <__ulp+0x2a>
    e120:	2080      	movs	r0, #128	; 0x80
    e122:	0300      	lsls	r0, r0, #12
    e124:	4108      	asrs	r0, r1
    e126:	1c03      	adds	r3, r0, #0
    e128:	e006      	b.n	e138 <__ulp+0x38>
    e12a:	2001      	movs	r0, #1
    e12c:	2932      	cmp	r1, #50	; 0x32
    e12e:	dc02      	bgt.n	e136 <__ulp+0x36>
    e130:	2433      	movs	r4, #51	; 0x33
    e132:	1a61      	subs	r1, r4, r1
    e134:	4088      	lsls	r0, r1
    e136:	1c02      	adds	r2, r0, #0
    e138:	1c10      	adds	r0, r2, #0
    e13a:	1c19      	adds	r1, r3, #0
    e13c:	bd10      	pop	{r4, pc}
    e13e:	46c0      	nop			; (mov r8, r8)
    e140:	7ff00000 	.word	0x7ff00000
    e144:	fcc00000 	.word	0xfcc00000

0000e148 <__b2d>:
    e148:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e14a:	1c06      	adds	r6, r0, #0
    e14c:	6903      	ldr	r3, [r0, #16]
    e14e:	3614      	adds	r6, #20
    e150:	009b      	lsls	r3, r3, #2
    e152:	18f3      	adds	r3, r6, r3
    e154:	1f1d      	subs	r5, r3, #4
    e156:	682c      	ldr	r4, [r5, #0]
    e158:	1c0f      	adds	r7, r1, #0
    e15a:	1c20      	adds	r0, r4, #0
    e15c:	9301      	str	r3, [sp, #4]
    e15e:	f7ff fdc4 	bl	dcea <__hi0bits>
    e162:	2320      	movs	r3, #32
    e164:	1a1b      	subs	r3, r3, r0
    e166:	603b      	str	r3, [r7, #0]
    e168:	491f      	ldr	r1, [pc, #124]	; (e1e8 <__b2d+0xa0>)
    e16a:	280a      	cmp	r0, #10
    e16c:	dc13      	bgt.n	e196 <__b2d+0x4e>
    e16e:	230b      	movs	r3, #11
    e170:	1c27      	adds	r7, r4, #0
    e172:	1a1b      	subs	r3, r3, r0
    e174:	40df      	lsrs	r7, r3
    e176:	4339      	orrs	r1, r7
    e178:	469c      	mov	ip, r3
    e17a:	1c0b      	adds	r3, r1, #0
    e17c:	2100      	movs	r1, #0
    e17e:	42b5      	cmp	r5, r6
    e180:	d902      	bls.n	e188 <__b2d+0x40>
    e182:	9901      	ldr	r1, [sp, #4]
    e184:	3908      	subs	r1, #8
    e186:	6809      	ldr	r1, [r1, #0]
    e188:	4665      	mov	r5, ip
    e18a:	3015      	adds	r0, #21
    e18c:	40e9      	lsrs	r1, r5
    e18e:	4084      	lsls	r4, r0
    e190:	4321      	orrs	r1, r4
    e192:	1c0a      	adds	r2, r1, #0
    e194:	e024      	b.n	e1e0 <__b2d+0x98>
    e196:	2700      	movs	r7, #0
    e198:	42b5      	cmp	r5, r6
    e19a:	d902      	bls.n	e1a2 <__b2d+0x5a>
    e19c:	9d01      	ldr	r5, [sp, #4]
    e19e:	3d08      	subs	r5, #8
    e1a0:	682f      	ldr	r7, [r5, #0]
    e1a2:	230b      	movs	r3, #11
    e1a4:	425b      	negs	r3, r3
    e1a6:	469c      	mov	ip, r3
    e1a8:	4484      	add	ip, r0
    e1aa:	4663      	mov	r3, ip
    e1ac:	2b00      	cmp	r3, #0
    e1ae:	d014      	beq.n	e1da <__b2d+0x92>
    e1b0:	232b      	movs	r3, #43	; 0x2b
    e1b2:	1a18      	subs	r0, r3, r0
    e1b4:	4663      	mov	r3, ip
    e1b6:	409c      	lsls	r4, r3
    e1b8:	4321      	orrs	r1, r4
    e1ba:	1c3c      	adds	r4, r7, #0
    e1bc:	40c4      	lsrs	r4, r0
    e1be:	4321      	orrs	r1, r4
    e1c0:	1c0b      	adds	r3, r1, #0
    e1c2:	2400      	movs	r4, #0
    e1c4:	42b5      	cmp	r5, r6
    e1c6:	d901      	bls.n	e1cc <__b2d+0x84>
    e1c8:	3d04      	subs	r5, #4
    e1ca:	682c      	ldr	r4, [r5, #0]
    e1cc:	40c4      	lsrs	r4, r0
    e1ce:	4661      	mov	r1, ip
    e1d0:	1c20      	adds	r0, r4, #0
    e1d2:	408f      	lsls	r7, r1
    e1d4:	4338      	orrs	r0, r7
    e1d6:	1c02      	adds	r2, r0, #0
    e1d8:	e002      	b.n	e1e0 <__b2d+0x98>
    e1da:	4321      	orrs	r1, r4
    e1dc:	1c0b      	adds	r3, r1, #0
    e1de:	1c3a      	adds	r2, r7, #0
    e1e0:	1c10      	adds	r0, r2, #0
    e1e2:	1c19      	adds	r1, r3, #0
    e1e4:	b003      	add	sp, #12
    e1e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e1e8:	3ff00000 	.word	0x3ff00000

0000e1ec <__d2b>:
    e1ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e1ee:	1c1d      	adds	r5, r3, #0
    e1f0:	2101      	movs	r1, #1
    e1f2:	9f08      	ldr	r7, [sp, #32]
    e1f4:	1c14      	adds	r4, r2, #0
    e1f6:	f7ff fcab 	bl	db50 <_Balloc>
    e1fa:	032b      	lsls	r3, r5, #12
    e1fc:	006d      	lsls	r5, r5, #1
    e1fe:	1c06      	adds	r6, r0, #0
    e200:	0b1b      	lsrs	r3, r3, #12
    e202:	0d6d      	lsrs	r5, r5, #21
    e204:	d002      	beq.n	e20c <__d2b+0x20>
    e206:	2280      	movs	r2, #128	; 0x80
    e208:	0352      	lsls	r2, r2, #13
    e20a:	4313      	orrs	r3, r2
    e20c:	9301      	str	r3, [sp, #4]
    e20e:	2c00      	cmp	r4, #0
    e210:	d018      	beq.n	e244 <__d2b+0x58>
    e212:	4668      	mov	r0, sp
    e214:	9400      	str	r4, [sp, #0]
    e216:	f7ff fd83 	bl	dd20 <__lo0bits>
    e21a:	9c00      	ldr	r4, [sp, #0]
    e21c:	2800      	cmp	r0, #0
    e21e:	d009      	beq.n	e234 <__d2b+0x48>
    e220:	2320      	movs	r3, #32
    e222:	9a01      	ldr	r2, [sp, #4]
    e224:	1a19      	subs	r1, r3, r0
    e226:	1c13      	adds	r3, r2, #0
    e228:	408b      	lsls	r3, r1
    e22a:	40c2      	lsrs	r2, r0
    e22c:	4323      	orrs	r3, r4
    e22e:	6173      	str	r3, [r6, #20]
    e230:	9201      	str	r2, [sp, #4]
    e232:	e000      	b.n	e236 <__d2b+0x4a>
    e234:	6174      	str	r4, [r6, #20]
    e236:	9c01      	ldr	r4, [sp, #4]
    e238:	61b4      	str	r4, [r6, #24]
    e23a:	1e63      	subs	r3, r4, #1
    e23c:	419c      	sbcs	r4, r3
    e23e:	3401      	adds	r4, #1
    e240:	6134      	str	r4, [r6, #16]
    e242:	e007      	b.n	e254 <__d2b+0x68>
    e244:	a801      	add	r0, sp, #4
    e246:	f7ff fd6b 	bl	dd20 <__lo0bits>
    e24a:	2401      	movs	r4, #1
    e24c:	9b01      	ldr	r3, [sp, #4]
    e24e:	6134      	str	r4, [r6, #16]
    e250:	6173      	str	r3, [r6, #20]
    e252:	3020      	adds	r0, #32
    e254:	2d00      	cmp	r5, #0
    e256:	d006      	beq.n	e266 <__d2b+0x7a>
    e258:	4b0b      	ldr	r3, [pc, #44]	; (e288 <__d2b+0x9c>)
    e25a:	18ed      	adds	r5, r5, r3
    e25c:	2335      	movs	r3, #53	; 0x35
    e25e:	182d      	adds	r5, r5, r0
    e260:	603d      	str	r5, [r7, #0]
    e262:	1a18      	subs	r0, r3, r0
    e264:	e00b      	b.n	e27e <__d2b+0x92>
    e266:	4b09      	ldr	r3, [pc, #36]	; (e28c <__d2b+0xa0>)
    e268:	18c0      	adds	r0, r0, r3
    e26a:	4b09      	ldr	r3, [pc, #36]	; (e290 <__d2b+0xa4>)
    e26c:	6038      	str	r0, [r7, #0]
    e26e:	18e3      	adds	r3, r4, r3
    e270:	009b      	lsls	r3, r3, #2
    e272:	18f3      	adds	r3, r6, r3
    e274:	6958      	ldr	r0, [r3, #20]
    e276:	f7ff fd38 	bl	dcea <__hi0bits>
    e27a:	0164      	lsls	r4, r4, #5
    e27c:	1a20      	subs	r0, r4, r0
    e27e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e280:	6018      	str	r0, [r3, #0]
    e282:	1c30      	adds	r0, r6, #0
    e284:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    e286:	46c0      	nop			; (mov r8, r8)
    e288:	fffffbcd 	.word	0xfffffbcd
    e28c:	fffffbce 	.word	0xfffffbce
    e290:	3fffffff 	.word	0x3fffffff

0000e294 <__ratio>:
    e294:	b5f0      	push	{r4, r5, r6, r7, lr}
    e296:	b087      	sub	sp, #28
    e298:	1c0e      	adds	r6, r1, #0
    e29a:	a904      	add	r1, sp, #16
    e29c:	1c07      	adds	r7, r0, #0
    e29e:	f7ff ff53 	bl	e148 <__b2d>
    e2a2:	1c04      	adds	r4, r0, #0
    e2a4:	1c0d      	adds	r5, r1, #0
    e2a6:	1c30      	adds	r0, r6, #0
    e2a8:	a905      	add	r1, sp, #20
    e2aa:	9400      	str	r4, [sp, #0]
    e2ac:	9501      	str	r5, [sp, #4]
    e2ae:	f7ff ff4b 	bl	e148 <__b2d>
    e2b2:	9b04      	ldr	r3, [sp, #16]
    e2b4:	9a05      	ldr	r2, [sp, #20]
    e2b6:	693f      	ldr	r7, [r7, #16]
    e2b8:	1a9a      	subs	r2, r3, r2
    e2ba:	6933      	ldr	r3, [r6, #16]
    e2bc:	9002      	str	r0, [sp, #8]
    e2be:	9103      	str	r1, [sp, #12]
    e2c0:	1afb      	subs	r3, r7, r3
    e2c2:	015b      	lsls	r3, r3, #5
    e2c4:	18d3      	adds	r3, r2, r3
    e2c6:	2b00      	cmp	r3, #0
    e2c8:	dd03      	ble.n	e2d2 <__ratio+0x3e>
    e2ca:	051b      	lsls	r3, r3, #20
    e2cc:	195b      	adds	r3, r3, r5
    e2ce:	9301      	str	r3, [sp, #4]
    e2d0:	e002      	b.n	e2d8 <__ratio+0x44>
    e2d2:	051b      	lsls	r3, r3, #20
    e2d4:	1acb      	subs	r3, r1, r3
    e2d6:	9303      	str	r3, [sp, #12]
    e2d8:	9800      	ldr	r0, [sp, #0]
    e2da:	9901      	ldr	r1, [sp, #4]
    e2dc:	9a02      	ldr	r2, [sp, #8]
    e2de:	9b03      	ldr	r3, [sp, #12]
    e2e0:	f7f9 fdfc 	bl	7edc <__aeabi_ddiv>
    e2e4:	b007      	add	sp, #28
    e2e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000e2e8 <__copybits>:
    e2e8:	1c13      	adds	r3, r2, #0
    e2ea:	3901      	subs	r1, #1
    e2ec:	b510      	push	{r4, lr}
    e2ee:	1149      	asrs	r1, r1, #5
    e2f0:	6912      	ldr	r2, [r2, #16]
    e2f2:	3101      	adds	r1, #1
    e2f4:	0089      	lsls	r1, r1, #2
    e2f6:	3314      	adds	r3, #20
    e2f8:	0092      	lsls	r2, r2, #2
    e2fa:	1841      	adds	r1, r0, r1
    e2fc:	189a      	adds	r2, r3, r2
    e2fe:	4293      	cmp	r3, r2
    e300:	d202      	bcs.n	e308 <__copybits+0x20>
    e302:	cb10      	ldmia	r3!, {r4}
    e304:	c010      	stmia	r0!, {r4}
    e306:	e7fa      	b.n	e2fe <__copybits+0x16>
    e308:	4288      	cmp	r0, r1
    e30a:	d202      	bcs.n	e312 <__copybits+0x2a>
    e30c:	2300      	movs	r3, #0
    e30e:	c008      	stmia	r0!, {r3}
    e310:	e7fa      	b.n	e308 <__copybits+0x20>
    e312:	bd10      	pop	{r4, pc}

0000e314 <__any_on>:
    e314:	b530      	push	{r4, r5, lr}
    e316:	1c04      	adds	r4, r0, #0
    e318:	6902      	ldr	r2, [r0, #16]
    e31a:	3414      	adds	r4, #20
    e31c:	114b      	asrs	r3, r1, #5
    e31e:	4293      	cmp	r3, r2
    e320:	dc0c      	bgt.n	e33c <__any_on+0x28>
    e322:	da0c      	bge.n	e33e <__any_on+0x2a>
    e324:	221f      	movs	r2, #31
    e326:	4011      	ands	r1, r2
    e328:	d009      	beq.n	e33e <__any_on+0x2a>
    e32a:	009a      	lsls	r2, r3, #2
    e32c:	5915      	ldr	r5, [r2, r4]
    e32e:	2001      	movs	r0, #1
    e330:	1c2a      	adds	r2, r5, #0
    e332:	40ca      	lsrs	r2, r1
    e334:	408a      	lsls	r2, r1
    e336:	42aa      	cmp	r2, r5
    e338:	d10c      	bne.n	e354 <__any_on+0x40>
    e33a:	e000      	b.n	e33e <__any_on+0x2a>
    e33c:	1c13      	adds	r3, r2, #0
    e33e:	009b      	lsls	r3, r3, #2
    e340:	18e3      	adds	r3, r4, r3
    e342:	42a3      	cmp	r3, r4
    e344:	d905      	bls.n	e352 <__any_on+0x3e>
    e346:	3b04      	subs	r3, #4
    e348:	681a      	ldr	r2, [r3, #0]
    e34a:	2a00      	cmp	r2, #0
    e34c:	d0f9      	beq.n	e342 <__any_on+0x2e>
    e34e:	2001      	movs	r0, #1
    e350:	e000      	b.n	e354 <__any_on+0x40>
    e352:	2000      	movs	r0, #0
    e354:	bd30      	pop	{r4, r5, pc}

0000e356 <_calloc_r>:
    e356:	434a      	muls	r2, r1
    e358:	b538      	push	{r3, r4, r5, lr}
    e35a:	1c11      	adds	r1, r2, #0
    e35c:	1c14      	adds	r4, r2, #0
    e35e:	f7fb fded 	bl	9f3c <_malloc_r>
    e362:	1e05      	subs	r5, r0, #0
    e364:	d003      	beq.n	e36e <_calloc_r+0x18>
    e366:	2100      	movs	r1, #0
    e368:	1c22      	adds	r2, r4, #0
    e36a:	f7fb fd99 	bl	9ea0 <memset>
    e36e:	1c28      	adds	r0, r5, #0
    e370:	bd38      	pop	{r3, r4, r5, pc}

0000e372 <_realloc_r>:
    e372:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e374:	1c06      	adds	r6, r0, #0
    e376:	1c0c      	adds	r4, r1, #0
    e378:	1c15      	adds	r5, r2, #0
    e37a:	2900      	cmp	r1, #0
    e37c:	d104      	bne.n	e388 <_realloc_r+0x16>
    e37e:	1c11      	adds	r1, r2, #0
    e380:	f7fb fddc 	bl	9f3c <_malloc_r>
    e384:	1c04      	adds	r4, r0, #0
    e386:	e018      	b.n	e3ba <_realloc_r+0x48>
    e388:	2a00      	cmp	r2, #0
    e38a:	d103      	bne.n	e394 <_realloc_r+0x22>
    e38c:	f7fb fd90 	bl	9eb0 <_free_r>
    e390:	1c2c      	adds	r4, r5, #0
    e392:	e012      	b.n	e3ba <_realloc_r+0x48>
    e394:	f000 fb52 	bl	ea3c <_malloc_usable_size_r>
    e398:	42a8      	cmp	r0, r5
    e39a:	d20e      	bcs.n	e3ba <_realloc_r+0x48>
    e39c:	1c30      	adds	r0, r6, #0
    e39e:	1c29      	adds	r1, r5, #0
    e3a0:	f7fb fdcc 	bl	9f3c <_malloc_r>
    e3a4:	1e07      	subs	r7, r0, #0
    e3a6:	d007      	beq.n	e3b8 <_realloc_r+0x46>
    e3a8:	1c21      	adds	r1, r4, #0
    e3aa:	1c2a      	adds	r2, r5, #0
    e3ac:	f7fb fd6f 	bl	9e8e <memcpy>
    e3b0:	1c30      	adds	r0, r6, #0
    e3b2:	1c21      	adds	r1, r4, #0
    e3b4:	f7fb fd7c 	bl	9eb0 <_free_r>
    e3b8:	1c3c      	adds	r4, r7, #0
    e3ba:	1c20      	adds	r0, r4, #0
    e3bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000e3c0 <__ssputs_r>:
    e3c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    e3c2:	688e      	ldr	r6, [r1, #8]
    e3c4:	b085      	sub	sp, #20
    e3c6:	1c07      	adds	r7, r0, #0
    e3c8:	1c0c      	adds	r4, r1, #0
    e3ca:	9203      	str	r2, [sp, #12]
    e3cc:	9301      	str	r3, [sp, #4]
    e3ce:	42b3      	cmp	r3, r6
    e3d0:	d345      	bcc.n	e45e <__ssputs_r+0x9e>
    e3d2:	2390      	movs	r3, #144	; 0x90
    e3d4:	898a      	ldrh	r2, [r1, #12]
    e3d6:	00db      	lsls	r3, r3, #3
    e3d8:	421a      	tst	r2, r3
    e3da:	d03d      	beq.n	e458 <__ssputs_r+0x98>
    e3dc:	2503      	movs	r5, #3
    e3de:	6909      	ldr	r1, [r1, #16]
    e3e0:	6823      	ldr	r3, [r4, #0]
    e3e2:	9801      	ldr	r0, [sp, #4]
    e3e4:	1a5b      	subs	r3, r3, r1
    e3e6:	9302      	str	r3, [sp, #8]
    e3e8:	6963      	ldr	r3, [r4, #20]
    e3ea:	435d      	muls	r5, r3
    e3ec:	0feb      	lsrs	r3, r5, #31
    e3ee:	195d      	adds	r5, r3, r5
    e3f0:	9b02      	ldr	r3, [sp, #8]
    e3f2:	106d      	asrs	r5, r5, #1
    e3f4:	3301      	adds	r3, #1
    e3f6:	181b      	adds	r3, r3, r0
    e3f8:	429d      	cmp	r5, r3
    e3fa:	d200      	bcs.n	e3fe <__ssputs_r+0x3e>
    e3fc:	1c1d      	adds	r5, r3, #0
    e3fe:	1c38      	adds	r0, r7, #0
    e400:	0553      	lsls	r3, r2, #21
    e402:	d50f      	bpl.n	e424 <__ssputs_r+0x64>
    e404:	1c29      	adds	r1, r5, #0
    e406:	f7fb fd99 	bl	9f3c <_malloc_r>
    e40a:	1e06      	subs	r6, r0, #0
    e40c:	d013      	beq.n	e436 <__ssputs_r+0x76>
    e40e:	9a02      	ldr	r2, [sp, #8]
    e410:	6921      	ldr	r1, [r4, #16]
    e412:	f7fb fd3c 	bl	9e8e <memcpy>
    e416:	89a2      	ldrh	r2, [r4, #12]
    e418:	4b18      	ldr	r3, [pc, #96]	; (e47c <__ssputs_r+0xbc>)
    e41a:	4013      	ands	r3, r2
    e41c:	2280      	movs	r2, #128	; 0x80
    e41e:	4313      	orrs	r3, r2
    e420:	81a3      	strh	r3, [r4, #12]
    e422:	e011      	b.n	e448 <__ssputs_r+0x88>
    e424:	1c2a      	adds	r2, r5, #0
    e426:	f7ff ffa4 	bl	e372 <_realloc_r>
    e42a:	1e06      	subs	r6, r0, #0
    e42c:	d10c      	bne.n	e448 <__ssputs_r+0x88>
    e42e:	1c38      	adds	r0, r7, #0
    e430:	6921      	ldr	r1, [r4, #16]
    e432:	f7fb fd3d 	bl	9eb0 <_free_r>
    e436:	230c      	movs	r3, #12
    e438:	2240      	movs	r2, #64	; 0x40
    e43a:	2001      	movs	r0, #1
    e43c:	603b      	str	r3, [r7, #0]
    e43e:	89a3      	ldrh	r3, [r4, #12]
    e440:	4240      	negs	r0, r0
    e442:	4313      	orrs	r3, r2
    e444:	81a3      	strh	r3, [r4, #12]
    e446:	e017      	b.n	e478 <__ssputs_r+0xb8>
    e448:	9b02      	ldr	r3, [sp, #8]
    e44a:	6126      	str	r6, [r4, #16]
    e44c:	18f6      	adds	r6, r6, r3
    e44e:	6026      	str	r6, [r4, #0]
    e450:	6165      	str	r5, [r4, #20]
    e452:	9e01      	ldr	r6, [sp, #4]
    e454:	1aed      	subs	r5, r5, r3
    e456:	60a5      	str	r5, [r4, #8]
    e458:	9b01      	ldr	r3, [sp, #4]
    e45a:	42b3      	cmp	r3, r6
    e45c:	d200      	bcs.n	e460 <__ssputs_r+0xa0>
    e45e:	9e01      	ldr	r6, [sp, #4]
    e460:	1c32      	adds	r2, r6, #0
    e462:	6820      	ldr	r0, [r4, #0]
    e464:	9903      	ldr	r1, [sp, #12]
    e466:	f7ff fb5f 	bl	db28 <memmove>
    e46a:	2000      	movs	r0, #0
    e46c:	68a3      	ldr	r3, [r4, #8]
    e46e:	1b9b      	subs	r3, r3, r6
    e470:	60a3      	str	r3, [r4, #8]
    e472:	6823      	ldr	r3, [r4, #0]
    e474:	199e      	adds	r6, r3, r6
    e476:	6026      	str	r6, [r4, #0]
    e478:	b005      	add	sp, #20
    e47a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e47c:	fffffb7f 	.word	0xfffffb7f

0000e480 <_svfiprintf_r>:
    e480:	b5f0      	push	{r4, r5, r6, r7, lr}
    e482:	b09f      	sub	sp, #124	; 0x7c
    e484:	9002      	str	r0, [sp, #8]
    e486:	9305      	str	r3, [sp, #20]
    e488:	898b      	ldrh	r3, [r1, #12]
    e48a:	1c0e      	adds	r6, r1, #0
    e48c:	1c17      	adds	r7, r2, #0
    e48e:	061b      	lsls	r3, r3, #24
    e490:	d510      	bpl.n	e4b4 <_svfiprintf_r+0x34>
    e492:	690b      	ldr	r3, [r1, #16]
    e494:	2b00      	cmp	r3, #0
    e496:	d10d      	bne.n	e4b4 <_svfiprintf_r+0x34>
    e498:	2140      	movs	r1, #64	; 0x40
    e49a:	f7fb fd4f 	bl	9f3c <_malloc_r>
    e49e:	6030      	str	r0, [r6, #0]
    e4a0:	6130      	str	r0, [r6, #16]
    e4a2:	2800      	cmp	r0, #0
    e4a4:	d104      	bne.n	e4b0 <_svfiprintf_r+0x30>
    e4a6:	230c      	movs	r3, #12
    e4a8:	9a02      	ldr	r2, [sp, #8]
    e4aa:	3801      	subs	r0, #1
    e4ac:	6013      	str	r3, [r2, #0]
    e4ae:	e0d0      	b.n	e652 <_svfiprintf_r+0x1d2>
    e4b0:	2340      	movs	r3, #64	; 0x40
    e4b2:	6173      	str	r3, [r6, #20]
    e4b4:	2300      	movs	r3, #0
    e4b6:	ad06      	add	r5, sp, #24
    e4b8:	616b      	str	r3, [r5, #20]
    e4ba:	3320      	adds	r3, #32
    e4bc:	766b      	strb	r3, [r5, #25]
    e4be:	3310      	adds	r3, #16
    e4c0:	76ab      	strb	r3, [r5, #26]
    e4c2:	1c3c      	adds	r4, r7, #0
    e4c4:	7823      	ldrb	r3, [r4, #0]
    e4c6:	2b00      	cmp	r3, #0
    e4c8:	d103      	bne.n	e4d2 <_svfiprintf_r+0x52>
    e4ca:	1be3      	subs	r3, r4, r7
    e4cc:	9304      	str	r3, [sp, #16]
    e4ce:	d012      	beq.n	e4f6 <_svfiprintf_r+0x76>
    e4d0:	e003      	b.n	e4da <_svfiprintf_r+0x5a>
    e4d2:	2b25      	cmp	r3, #37	; 0x25
    e4d4:	d0f9      	beq.n	e4ca <_svfiprintf_r+0x4a>
    e4d6:	3401      	adds	r4, #1
    e4d8:	e7f4      	b.n	e4c4 <_svfiprintf_r+0x44>
    e4da:	9b04      	ldr	r3, [sp, #16]
    e4dc:	9802      	ldr	r0, [sp, #8]
    e4de:	1c31      	adds	r1, r6, #0
    e4e0:	1c3a      	adds	r2, r7, #0
    e4e2:	f7ff ff6d 	bl	e3c0 <__ssputs_r>
    e4e6:	1c43      	adds	r3, r0, #1
    e4e8:	d100      	bne.n	e4ec <_svfiprintf_r+0x6c>
    e4ea:	e0ac      	b.n	e646 <_svfiprintf_r+0x1c6>
    e4ec:	696a      	ldr	r2, [r5, #20]
    e4ee:	9b04      	ldr	r3, [sp, #16]
    e4f0:	4694      	mov	ip, r2
    e4f2:	4463      	add	r3, ip
    e4f4:	616b      	str	r3, [r5, #20]
    e4f6:	7823      	ldrb	r3, [r4, #0]
    e4f8:	2b00      	cmp	r3, #0
    e4fa:	d100      	bne.n	e4fe <_svfiprintf_r+0x7e>
    e4fc:	e0a3      	b.n	e646 <_svfiprintf_r+0x1c6>
    e4fe:	2201      	movs	r2, #1
    e500:	2300      	movs	r3, #0
    e502:	4252      	negs	r2, r2
    e504:	606a      	str	r2, [r5, #4]
    e506:	a902      	add	r1, sp, #8
    e508:	3254      	adds	r2, #84	; 0x54
    e50a:	1852      	adds	r2, r2, r1
    e50c:	3401      	adds	r4, #1
    e50e:	602b      	str	r3, [r5, #0]
    e510:	60eb      	str	r3, [r5, #12]
    e512:	60ab      	str	r3, [r5, #8]
    e514:	7013      	strb	r3, [r2, #0]
    e516:	65ab      	str	r3, [r5, #88]	; 0x58
    e518:	4f4f      	ldr	r7, [pc, #316]	; (e658 <_svfiprintf_r+0x1d8>)
    e51a:	7821      	ldrb	r1, [r4, #0]
    e51c:	1c38      	adds	r0, r7, #0
    e51e:	2205      	movs	r2, #5
    e520:	f7fb fcaa 	bl	9e78 <memchr>
    e524:	2800      	cmp	r0, #0
    e526:	d008      	beq.n	e53a <_svfiprintf_r+0xba>
    e528:	1bc0      	subs	r0, r0, r7
    e52a:	2701      	movs	r7, #1
    e52c:	4087      	lsls	r7, r0
    e52e:	1c38      	adds	r0, r7, #0
    e530:	682b      	ldr	r3, [r5, #0]
    e532:	3401      	adds	r4, #1
    e534:	4318      	orrs	r0, r3
    e536:	6028      	str	r0, [r5, #0]
    e538:	e7ee      	b.n	e518 <_svfiprintf_r+0x98>
    e53a:	682b      	ldr	r3, [r5, #0]
    e53c:	06da      	lsls	r2, r3, #27
    e53e:	d504      	bpl.n	e54a <_svfiprintf_r+0xca>
    e540:	2253      	movs	r2, #83	; 0x53
    e542:	2120      	movs	r1, #32
    e544:	a802      	add	r0, sp, #8
    e546:	1812      	adds	r2, r2, r0
    e548:	7011      	strb	r1, [r2, #0]
    e54a:	071a      	lsls	r2, r3, #28
    e54c:	d504      	bpl.n	e558 <_svfiprintf_r+0xd8>
    e54e:	2253      	movs	r2, #83	; 0x53
    e550:	212b      	movs	r1, #43	; 0x2b
    e552:	a802      	add	r0, sp, #8
    e554:	1812      	adds	r2, r2, r0
    e556:	7011      	strb	r1, [r2, #0]
    e558:	7822      	ldrb	r2, [r4, #0]
    e55a:	2a2a      	cmp	r2, #42	; 0x2a
    e55c:	d001      	beq.n	e562 <_svfiprintf_r+0xe2>
    e55e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e560:	e00e      	b.n	e580 <_svfiprintf_r+0x100>
    e562:	9a05      	ldr	r2, [sp, #20]
    e564:	1d11      	adds	r1, r2, #4
    e566:	6812      	ldr	r2, [r2, #0]
    e568:	9105      	str	r1, [sp, #20]
    e56a:	2a00      	cmp	r2, #0
    e56c:	db01      	blt.n	e572 <_svfiprintf_r+0xf2>
    e56e:	9209      	str	r2, [sp, #36]	; 0x24
    e570:	e004      	b.n	e57c <_svfiprintf_r+0xfc>
    e572:	4252      	negs	r2, r2
    e574:	60ea      	str	r2, [r5, #12]
    e576:	2202      	movs	r2, #2
    e578:	4313      	orrs	r3, r2
    e57a:	602b      	str	r3, [r5, #0]
    e57c:	3401      	adds	r4, #1
    e57e:	e009      	b.n	e594 <_svfiprintf_r+0x114>
    e580:	7822      	ldrb	r2, [r4, #0]
    e582:	3a30      	subs	r2, #48	; 0x30
    e584:	2a09      	cmp	r2, #9
    e586:	d804      	bhi.n	e592 <_svfiprintf_r+0x112>
    e588:	210a      	movs	r1, #10
    e58a:	434b      	muls	r3, r1
    e58c:	3401      	adds	r4, #1
    e58e:	189b      	adds	r3, r3, r2
    e590:	e7f6      	b.n	e580 <_svfiprintf_r+0x100>
    e592:	9309      	str	r3, [sp, #36]	; 0x24
    e594:	7823      	ldrb	r3, [r4, #0]
    e596:	2b2e      	cmp	r3, #46	; 0x2e
    e598:	d118      	bne.n	e5cc <_svfiprintf_r+0x14c>
    e59a:	7863      	ldrb	r3, [r4, #1]
    e59c:	2b2a      	cmp	r3, #42	; 0x2a
    e59e:	d109      	bne.n	e5b4 <_svfiprintf_r+0x134>
    e5a0:	9b05      	ldr	r3, [sp, #20]
    e5a2:	3402      	adds	r4, #2
    e5a4:	1d1a      	adds	r2, r3, #4
    e5a6:	681b      	ldr	r3, [r3, #0]
    e5a8:	9205      	str	r2, [sp, #20]
    e5aa:	2b00      	cmp	r3, #0
    e5ac:	da0d      	bge.n	e5ca <_svfiprintf_r+0x14a>
    e5ae:	2301      	movs	r3, #1
    e5b0:	425b      	negs	r3, r3
    e5b2:	e00a      	b.n	e5ca <_svfiprintf_r+0x14a>
    e5b4:	2300      	movs	r3, #0
    e5b6:	3401      	adds	r4, #1
    e5b8:	7822      	ldrb	r2, [r4, #0]
    e5ba:	3a30      	subs	r2, #48	; 0x30
    e5bc:	2a09      	cmp	r2, #9
    e5be:	d804      	bhi.n	e5ca <_svfiprintf_r+0x14a>
    e5c0:	210a      	movs	r1, #10
    e5c2:	434b      	muls	r3, r1
    e5c4:	3401      	adds	r4, #1
    e5c6:	189b      	adds	r3, r3, r2
    e5c8:	e7f6      	b.n	e5b8 <_svfiprintf_r+0x138>
    e5ca:	9307      	str	r3, [sp, #28]
    e5cc:	4f23      	ldr	r7, [pc, #140]	; (e65c <_svfiprintf_r+0x1dc>)
    e5ce:	7821      	ldrb	r1, [r4, #0]
    e5d0:	1c38      	adds	r0, r7, #0
    e5d2:	2203      	movs	r2, #3
    e5d4:	f7fb fc50 	bl	9e78 <memchr>
    e5d8:	2800      	cmp	r0, #0
    e5da:	d007      	beq.n	e5ec <_svfiprintf_r+0x16c>
    e5dc:	1bc0      	subs	r0, r0, r7
    e5de:	2740      	movs	r7, #64	; 0x40
    e5e0:	4087      	lsls	r7, r0
    e5e2:	1c38      	adds	r0, r7, #0
    e5e4:	682b      	ldr	r3, [r5, #0]
    e5e6:	3401      	adds	r4, #1
    e5e8:	4318      	orrs	r0, r3
    e5ea:	6028      	str	r0, [r5, #0]
    e5ec:	7821      	ldrb	r1, [r4, #0]
    e5ee:	481c      	ldr	r0, [pc, #112]	; (e660 <_svfiprintf_r+0x1e0>)
    e5f0:	2206      	movs	r2, #6
    e5f2:	1c67      	adds	r7, r4, #1
    e5f4:	7629      	strb	r1, [r5, #24]
    e5f6:	f7fb fc3f 	bl	9e78 <memchr>
    e5fa:	2800      	cmp	r0, #0
    e5fc:	d012      	beq.n	e624 <_svfiprintf_r+0x1a4>
    e5fe:	4b19      	ldr	r3, [pc, #100]	; (e664 <_svfiprintf_r+0x1e4>)
    e600:	2b00      	cmp	r3, #0
    e602:	d106      	bne.n	e612 <_svfiprintf_r+0x192>
    e604:	2207      	movs	r2, #7
    e606:	9b05      	ldr	r3, [sp, #20]
    e608:	3307      	adds	r3, #7
    e60a:	4393      	bics	r3, r2
    e60c:	3308      	adds	r3, #8
    e60e:	9305      	str	r3, [sp, #20]
    e610:	e014      	b.n	e63c <_svfiprintf_r+0x1bc>
    e612:	ab05      	add	r3, sp, #20
    e614:	9300      	str	r3, [sp, #0]
    e616:	9802      	ldr	r0, [sp, #8]
    e618:	1c29      	adds	r1, r5, #0
    e61a:	1c32      	adds	r2, r6, #0
    e61c:	4b12      	ldr	r3, [pc, #72]	; (e668 <_svfiprintf_r+0x1e8>)
    e61e:	f7fb fec1 	bl	a3a4 <_printf_float>
    e622:	e007      	b.n	e634 <_svfiprintf_r+0x1b4>
    e624:	ab05      	add	r3, sp, #20
    e626:	9300      	str	r3, [sp, #0]
    e628:	9802      	ldr	r0, [sp, #8]
    e62a:	1c29      	adds	r1, r5, #0
    e62c:	1c32      	adds	r2, r6, #0
    e62e:	4b0e      	ldr	r3, [pc, #56]	; (e668 <_svfiprintf_r+0x1e8>)
    e630:	f7fc f964 	bl	a8fc <_printf_i>
    e634:	9003      	str	r0, [sp, #12]
    e636:	9b03      	ldr	r3, [sp, #12]
    e638:	3301      	adds	r3, #1
    e63a:	d004      	beq.n	e646 <_svfiprintf_r+0x1c6>
    e63c:	696b      	ldr	r3, [r5, #20]
    e63e:	9a03      	ldr	r2, [sp, #12]
    e640:	189b      	adds	r3, r3, r2
    e642:	616b      	str	r3, [r5, #20]
    e644:	e73d      	b.n	e4c2 <_svfiprintf_r+0x42>
    e646:	89b3      	ldrh	r3, [r6, #12]
    e648:	980b      	ldr	r0, [sp, #44]	; 0x2c
    e64a:	065b      	lsls	r3, r3, #25
    e64c:	d501      	bpl.n	e652 <_svfiprintf_r+0x1d2>
    e64e:	2001      	movs	r0, #1
    e650:	4240      	negs	r0, r0
    e652:	b01f      	add	sp, #124	; 0x7c
    e654:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e656:	46c0      	nop			; (mov r8, r8)
    e658:	0000fa50 	.word	0x0000fa50
    e65c:	0000fa56 	.word	0x0000fa56
    e660:	0000fa5a 	.word	0x0000fa5a
    e664:	0000a3a5 	.word	0x0000a3a5
    e668:	0000e3c1 	.word	0x0000e3c1

0000e66c <_sungetc_r>:
    e66c:	b538      	push	{r3, r4, r5, lr}
    e66e:	1c14      	adds	r4, r2, #0
    e670:	1c4b      	adds	r3, r1, #1
    e672:	d102      	bne.n	e67a <_sungetc_r+0xe>
    e674:	2001      	movs	r0, #1
    e676:	4240      	negs	r0, r0
    e678:	e034      	b.n	e6e4 <_sungetc_r+0x78>
    e67a:	8993      	ldrh	r3, [r2, #12]
    e67c:	2220      	movs	r2, #32
    e67e:	4393      	bics	r3, r2
    e680:	6b62      	ldr	r2, [r4, #52]	; 0x34
    e682:	81a3      	strh	r3, [r4, #12]
    e684:	b2cd      	uxtb	r5, r1
    e686:	6863      	ldr	r3, [r4, #4]
    e688:	2a00      	cmp	r2, #0
    e68a:	d00f      	beq.n	e6ac <_sungetc_r+0x40>
    e68c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e68e:	4293      	cmp	r3, r2
    e690:	da06      	bge.n	e6a0 <_sungetc_r+0x34>
    e692:	6823      	ldr	r3, [r4, #0]
    e694:	3b01      	subs	r3, #1
    e696:	6023      	str	r3, [r4, #0]
    e698:	701d      	strb	r5, [r3, #0]
    e69a:	6863      	ldr	r3, [r4, #4]
    e69c:	3301      	adds	r3, #1
    e69e:	e01f      	b.n	e6e0 <_sungetc_r+0x74>
    e6a0:	1c21      	adds	r1, r4, #0
    e6a2:	f7fd fefd 	bl	c4a0 <__submore>
    e6a6:	2800      	cmp	r0, #0
    e6a8:	d0f3      	beq.n	e692 <_sungetc_r+0x26>
    e6aa:	e7e3      	b.n	e674 <_sungetc_r+0x8>
    e6ac:	6921      	ldr	r1, [r4, #16]
    e6ae:	6822      	ldr	r2, [r4, #0]
    e6b0:	2900      	cmp	r1, #0
    e6b2:	d009      	beq.n	e6c8 <_sungetc_r+0x5c>
    e6b4:	428a      	cmp	r2, r1
    e6b6:	d907      	bls.n	e6c8 <_sungetc_r+0x5c>
    e6b8:	1e51      	subs	r1, r2, #1
    e6ba:	7808      	ldrb	r0, [r1, #0]
    e6bc:	42a8      	cmp	r0, r5
    e6be:	d103      	bne.n	e6c8 <_sungetc_r+0x5c>
    e6c0:	3301      	adds	r3, #1
    e6c2:	6021      	str	r1, [r4, #0]
    e6c4:	6063      	str	r3, [r4, #4]
    e6c6:	e00d      	b.n	e6e4 <_sungetc_r+0x78>
    e6c8:	6423      	str	r3, [r4, #64]	; 0x40
    e6ca:	1c23      	adds	r3, r4, #0
    e6cc:	3344      	adds	r3, #68	; 0x44
    e6ce:	6363      	str	r3, [r4, #52]	; 0x34
    e6d0:	2303      	movs	r3, #3
    e6d2:	63a3      	str	r3, [r4, #56]	; 0x38
    e6d4:	1c23      	adds	r3, r4, #0
    e6d6:	3346      	adds	r3, #70	; 0x46
    e6d8:	63e2      	str	r2, [r4, #60]	; 0x3c
    e6da:	701d      	strb	r5, [r3, #0]
    e6dc:	6023      	str	r3, [r4, #0]
    e6de:	2301      	movs	r3, #1
    e6e0:	1c28      	adds	r0, r5, #0
    e6e2:	6063      	str	r3, [r4, #4]
    e6e4:	bd38      	pop	{r3, r4, r5, pc}

0000e6e6 <__ssrefill_r>:
    e6e6:	b510      	push	{r4, lr}
    e6e8:	1c0c      	adds	r4, r1, #0
    e6ea:	6b49      	ldr	r1, [r1, #52]	; 0x34
    e6ec:	2900      	cmp	r1, #0
    e6ee:	d00e      	beq.n	e70e <__ssrefill_r+0x28>
    e6f0:	1c23      	adds	r3, r4, #0
    e6f2:	3344      	adds	r3, #68	; 0x44
    e6f4:	4299      	cmp	r1, r3
    e6f6:	d001      	beq.n	e6fc <__ssrefill_r+0x16>
    e6f8:	f7fb fbda 	bl	9eb0 <_free_r>
    e6fc:	2000      	movs	r0, #0
    e6fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
    e700:	6360      	str	r0, [r4, #52]	; 0x34
    e702:	6063      	str	r3, [r4, #4]
    e704:	4283      	cmp	r3, r0
    e706:	d002      	beq.n	e70e <__ssrefill_r+0x28>
    e708:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    e70a:	6023      	str	r3, [r4, #0]
    e70c:	e009      	b.n	e722 <__ssrefill_r+0x3c>
    e70e:	6923      	ldr	r3, [r4, #16]
    e710:	2220      	movs	r2, #32
    e712:	6023      	str	r3, [r4, #0]
    e714:	2300      	movs	r3, #0
    e716:	2001      	movs	r0, #1
    e718:	6063      	str	r3, [r4, #4]
    e71a:	89a3      	ldrh	r3, [r4, #12]
    e71c:	4240      	negs	r0, r0
    e71e:	4313      	orrs	r3, r2
    e720:	81a3      	strh	r3, [r4, #12]
    e722:	bd10      	pop	{r4, pc}

0000e724 <__ssvfiscanf_r>:
    e724:	b5f0      	push	{r4, r5, r6, r7, lr}
    e726:	4cb5      	ldr	r4, [pc, #724]	; (e9fc <__ssvfiscanf_r+0x2d8>)
    e728:	1c07      	adds	r7, r0, #0
    e72a:	44a5      	add	sp, r4
    e72c:	9303      	str	r3, [sp, #12]
    e72e:	2300      	movs	r3, #0
    e730:	2086      	movs	r0, #134	; 0x86
    e732:	9348      	str	r3, [sp, #288]	; 0x120
    e734:	9349      	str	r3, [sp, #292]	; 0x124
    e736:	ab05      	add	r3, sp, #20
    e738:	934a      	str	r3, [sp, #296]	; 0x128
    e73a:	23be      	movs	r3, #190	; 0xbe
    e73c:	0040      	lsls	r0, r0, #1
    e73e:	1c0d      	adds	r5, r1, #0
    e740:	9201      	str	r2, [sp, #4]
    e742:	a902      	add	r1, sp, #8
    e744:	4aae      	ldr	r2, [pc, #696]	; (ea00 <__ssvfiscanf_r+0x2dc>)
    e746:	005b      	lsls	r3, r3, #1
    e748:	1809      	adds	r1, r1, r0
    e74a:	50ca      	str	r2, [r1, r3]
    e74c:	4aad      	ldr	r2, [pc, #692]	; (ea04 <__ssvfiscanf_r+0x2e0>)
    e74e:	a902      	add	r1, sp, #8
    e750:	3304      	adds	r3, #4
    e752:	1809      	adds	r1, r1, r0
    e754:	50ca      	str	r2, [r1, r3]
    e756:	9b01      	ldr	r3, [sp, #4]
    e758:	781c      	ldrb	r4, [r3, #0]
    e75a:	2c00      	cmp	r4, #0
    e75c:	d100      	bne.n	e760 <__ssvfiscanf_r+0x3c>
    e75e:	e144      	b.n	e9ea <__ssvfiscanf_r+0x2c6>
    e760:	4ea9      	ldr	r6, [pc, #676]	; (ea08 <__ssvfiscanf_r+0x2e4>)
    e762:	6833      	ldr	r3, [r6, #0]
    e764:	191b      	adds	r3, r3, r4
    e766:	785a      	ldrb	r2, [r3, #1]
    e768:	2308      	movs	r3, #8
    e76a:	4013      	ands	r3, r2
    e76c:	d023      	beq.n	e7b6 <__ssvfiscanf_r+0x92>
    e76e:	686b      	ldr	r3, [r5, #4]
    e770:	2b00      	cmp	r3, #0
    e772:	dd10      	ble.n	e796 <__ssvfiscanf_r+0x72>
    e774:	682b      	ldr	r3, [r5, #0]
    e776:	6831      	ldr	r1, [r6, #0]
    e778:	781a      	ldrb	r2, [r3, #0]
    e77a:	188a      	adds	r2, r1, r2
    e77c:	7852      	ldrb	r2, [r2, #1]
    e77e:	0712      	lsls	r2, r2, #28
    e780:	d515      	bpl.n	e7ae <__ssvfiscanf_r+0x8a>
    e782:	9a49      	ldr	r2, [sp, #292]	; 0x124
    e784:	3301      	adds	r3, #1
    e786:	9202      	str	r2, [sp, #8]
    e788:	3201      	adds	r2, #1
    e78a:	9249      	str	r2, [sp, #292]	; 0x124
    e78c:	686a      	ldr	r2, [r5, #4]
    e78e:	602b      	str	r3, [r5, #0]
    e790:	3a01      	subs	r2, #1
    e792:	606a      	str	r2, [r5, #4]
    e794:	e7eb      	b.n	e76e <__ssvfiscanf_r+0x4a>
    e796:	2186      	movs	r1, #134	; 0x86
    e798:	23c0      	movs	r3, #192	; 0xc0
    e79a:	0049      	lsls	r1, r1, #1
    e79c:	aa02      	add	r2, sp, #8
    e79e:	1852      	adds	r2, r2, r1
    e7a0:	005b      	lsls	r3, r3, #1
    e7a2:	58d3      	ldr	r3, [r2, r3]
    e7a4:	1c38      	adds	r0, r7, #0
    e7a6:	1c29      	adds	r1, r5, #0
    e7a8:	4798      	blx	r3
    e7aa:	2800      	cmp	r0, #0
    e7ac:	d0e2      	beq.n	e774 <__ssvfiscanf_r+0x50>
    e7ae:	9e01      	ldr	r6, [sp, #4]
    e7b0:	3601      	adds	r6, #1
    e7b2:	9601      	str	r6, [sp, #4]
    e7b4:	e7cf      	b.n	e756 <__ssvfiscanf_r+0x32>
    e7b6:	9a01      	ldr	r2, [sp, #4]
    e7b8:	1c56      	adds	r6, r2, #1
    e7ba:	2c25      	cmp	r4, #37	; 0x25
    e7bc:	d14f      	bne.n	e85e <__ssvfiscanf_r+0x13a>
    e7be:	9347      	str	r3, [sp, #284]	; 0x11c
    e7c0:	9345      	str	r3, [sp, #276]	; 0x114
    e7c2:	7853      	ldrb	r3, [r2, #1]
    e7c4:	2b2a      	cmp	r3, #42	; 0x2a
    e7c6:	d102      	bne.n	e7ce <__ssvfiscanf_r+0xaa>
    e7c8:	3b1a      	subs	r3, #26
    e7ca:	9345      	str	r3, [sp, #276]	; 0x114
    e7cc:	3601      	adds	r6, #1
    e7ce:	1c34      	adds	r4, r6, #0
    e7d0:	7821      	ldrb	r1, [r4, #0]
    e7d2:	1c0b      	adds	r3, r1, #0
    e7d4:	3b30      	subs	r3, #48	; 0x30
    e7d6:	2b09      	cmp	r3, #9
    e7d8:	d809      	bhi.n	e7ee <__ssvfiscanf_r+0xca>
    e7da:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    e7dc:	3401      	adds	r4, #1
    e7de:	9301      	str	r3, [sp, #4]
    e7e0:	230a      	movs	r3, #10
    e7e2:	9a01      	ldr	r2, [sp, #4]
    e7e4:	4353      	muls	r3, r2
    e7e6:	3b30      	subs	r3, #48	; 0x30
    e7e8:	1859      	adds	r1, r3, r1
    e7ea:	9147      	str	r1, [sp, #284]	; 0x11c
    e7ec:	e7f0      	b.n	e7d0 <__ssvfiscanf_r+0xac>
    e7ee:	4e87      	ldr	r6, [pc, #540]	; (ea0c <__ssvfiscanf_r+0x2e8>)
    e7f0:	2203      	movs	r2, #3
    e7f2:	1c30      	adds	r0, r6, #0
    e7f4:	f7fb fb40 	bl	9e78 <memchr>
    e7f8:	2800      	cmp	r0, #0
    e7fa:	d008      	beq.n	e80e <__ssvfiscanf_r+0xea>
    e7fc:	1b80      	subs	r0, r0, r6
    e7fe:	2601      	movs	r6, #1
    e800:	4086      	lsls	r6, r0
    e802:	1c30      	adds	r0, r6, #0
    e804:	9b45      	ldr	r3, [sp, #276]	; 0x114
    e806:	3401      	adds	r4, #1
    e808:	4318      	orrs	r0, r3
    e80a:	9301      	str	r3, [sp, #4]
    e80c:	9045      	str	r0, [sp, #276]	; 0x114
    e80e:	1c66      	adds	r6, r4, #1
    e810:	7824      	ldrb	r4, [r4, #0]
    e812:	2c67      	cmp	r4, #103	; 0x67
    e814:	d810      	bhi.n	e838 <__ssvfiscanf_r+0x114>
    e816:	2c65      	cmp	r4, #101	; 0x65
    e818:	d300      	bcc.n	e81c <__ssvfiscanf_r+0xf8>
    e81a:	e084      	b.n	e926 <__ssvfiscanf_r+0x202>
    e81c:	2c5b      	cmp	r4, #91	; 0x5b
    e81e:	d05a      	beq.n	e8d6 <__ssvfiscanf_r+0x1b2>
    e820:	d805      	bhi.n	e82e <__ssvfiscanf_r+0x10a>
    e822:	2c00      	cmp	r4, #0
    e824:	d100      	bne.n	e828 <__ssvfiscanf_r+0x104>
    e826:	e0e2      	b.n	e9ee <__ssvfiscanf_r+0x2ca>
    e828:	2c25      	cmp	r4, #37	; 0x25
    e82a:	d018      	beq.n	e85e <__ssvfiscanf_r+0x13a>
    e82c:	e07d      	b.n	e92a <__ssvfiscanf_r+0x206>
    e82e:	2c63      	cmp	r4, #99	; 0x63
    e830:	d05f      	beq.n	e8f2 <__ssvfiscanf_r+0x1ce>
    e832:	2c64      	cmp	r4, #100	; 0x64
    e834:	d046      	beq.n	e8c4 <__ssvfiscanf_r+0x1a0>
    e836:	e078      	b.n	e92a <__ssvfiscanf_r+0x206>
    e838:	2c70      	cmp	r4, #112	; 0x70
    e83a:	d034      	beq.n	e8a6 <__ssvfiscanf_r+0x182>
    e83c:	d807      	bhi.n	e84e <__ssvfiscanf_r+0x12a>
    e83e:	2c6e      	cmp	r4, #110	; 0x6e
    e840:	d05f      	beq.n	e902 <__ssvfiscanf_r+0x1de>
    e842:	d841      	bhi.n	e8c8 <__ssvfiscanf_r+0x1a4>
    e844:	2c69      	cmp	r4, #105	; 0x69
    e846:	d170      	bne.n	e92a <__ssvfiscanf_r+0x206>
    e848:	2300      	movs	r3, #0
    e84a:	9346      	str	r3, [sp, #280]	; 0x118
    e84c:	e041      	b.n	e8d2 <__ssvfiscanf_r+0x1ae>
    e84e:	2c75      	cmp	r4, #117	; 0x75
    e850:	d038      	beq.n	e8c4 <__ssvfiscanf_r+0x1a0>
    e852:	2c78      	cmp	r4, #120	; 0x78
    e854:	d02d      	beq.n	e8b2 <__ssvfiscanf_r+0x18e>
    e856:	2c73      	cmp	r4, #115	; 0x73
    e858:	d167      	bne.n	e92a <__ssvfiscanf_r+0x206>
    e85a:	2302      	movs	r3, #2
    e85c:	e047      	b.n	e8ee <__ssvfiscanf_r+0x1ca>
    e85e:	686b      	ldr	r3, [r5, #4]
    e860:	2b00      	cmp	r3, #0
    e862:	dd0e      	ble.n	e882 <__ssvfiscanf_r+0x15e>
    e864:	682b      	ldr	r3, [r5, #0]
    e866:	781a      	ldrb	r2, [r3, #0]
    e868:	42a2      	cmp	r2, r4
    e86a:	d000      	beq.n	e86e <__ssvfiscanf_r+0x14a>
    e86c:	e0bd      	b.n	e9ea <__ssvfiscanf_r+0x2c6>
    e86e:	3301      	adds	r3, #1
    e870:	686a      	ldr	r2, [r5, #4]
    e872:	602b      	str	r3, [r5, #0]
    e874:	9b49      	ldr	r3, [sp, #292]	; 0x124
    e876:	3a01      	subs	r2, #1
    e878:	9301      	str	r3, [sp, #4]
    e87a:	3301      	adds	r3, #1
    e87c:	606a      	str	r2, [r5, #4]
    e87e:	9349      	str	r3, [sp, #292]	; 0x124
    e880:	e797      	b.n	e7b2 <__ssvfiscanf_r+0x8e>
    e882:	2186      	movs	r1, #134	; 0x86
    e884:	23c0      	movs	r3, #192	; 0xc0
    e886:	0049      	lsls	r1, r1, #1
    e888:	aa02      	add	r2, sp, #8
    e88a:	1852      	adds	r2, r2, r1
    e88c:	005b      	lsls	r3, r3, #1
    e88e:	58d3      	ldr	r3, [r2, r3]
    e890:	1c38      	adds	r0, r7, #0
    e892:	1c29      	adds	r1, r5, #0
    e894:	4798      	blx	r3
    e896:	2800      	cmp	r0, #0
    e898:	d0e4      	beq.n	e864 <__ssvfiscanf_r+0x140>
    e89a:	9848      	ldr	r0, [sp, #288]	; 0x120
    e89c:	2800      	cmp	r0, #0
    e89e:	d000      	beq.n	e8a2 <__ssvfiscanf_r+0x17e>
    e8a0:	e09f      	b.n	e9e2 <__ssvfiscanf_r+0x2be>
    e8a2:	3801      	subs	r0, #1
    e8a4:	e0a5      	b.n	e9f2 <__ssvfiscanf_r+0x2ce>
    e8a6:	9b45      	ldr	r3, [sp, #276]	; 0x114
    e8a8:	9301      	str	r3, [sp, #4]
    e8aa:	2320      	movs	r3, #32
    e8ac:	9a01      	ldr	r2, [sp, #4]
    e8ae:	4313      	orrs	r3, r2
    e8b0:	9345      	str	r3, [sp, #276]	; 0x114
    e8b2:	9b45      	ldr	r3, [sp, #276]	; 0x114
    e8b4:	9301      	str	r3, [sp, #4]
    e8b6:	2380      	movs	r3, #128	; 0x80
    e8b8:	9a01      	ldr	r2, [sp, #4]
    e8ba:	009b      	lsls	r3, r3, #2
    e8bc:	4313      	orrs	r3, r2
    e8be:	9345      	str	r3, [sp, #276]	; 0x114
    e8c0:	2310      	movs	r3, #16
    e8c2:	e002      	b.n	e8ca <__ssvfiscanf_r+0x1a6>
    e8c4:	230a      	movs	r3, #10
    e8c6:	e000      	b.n	e8ca <__ssvfiscanf_r+0x1a6>
    e8c8:	2308      	movs	r3, #8
    e8ca:	9346      	str	r3, [sp, #280]	; 0x118
    e8cc:	2304      	movs	r3, #4
    e8ce:	2c6e      	cmp	r4, #110	; 0x6e
    e8d0:	dc0d      	bgt.n	e8ee <__ssvfiscanf_r+0x1ca>
    e8d2:	2303      	movs	r3, #3
    e8d4:	e00b      	b.n	e8ee <__ssvfiscanf_r+0x1ca>
    e8d6:	1c31      	adds	r1, r6, #0
    e8d8:	a805      	add	r0, sp, #20
    e8da:	f7fc fcf3 	bl	b2c4 <__sccl>
    e8de:	9b45      	ldr	r3, [sp, #276]	; 0x114
    e8e0:	1c06      	adds	r6, r0, #0
    e8e2:	9301      	str	r3, [sp, #4]
    e8e4:	2340      	movs	r3, #64	; 0x40
    e8e6:	9a01      	ldr	r2, [sp, #4]
    e8e8:	4313      	orrs	r3, r2
    e8ea:	9345      	str	r3, [sp, #276]	; 0x114
    e8ec:	2301      	movs	r3, #1
    e8ee:	934b      	str	r3, [sp, #300]	; 0x12c
    e8f0:	e01f      	b.n	e932 <__ssvfiscanf_r+0x20e>
    e8f2:	9b45      	ldr	r3, [sp, #276]	; 0x114
    e8f4:	9301      	str	r3, [sp, #4]
    e8f6:	2340      	movs	r3, #64	; 0x40
    e8f8:	9a01      	ldr	r2, [sp, #4]
    e8fa:	4313      	orrs	r3, r2
    e8fc:	9345      	str	r3, [sp, #276]	; 0x114
    e8fe:	2300      	movs	r3, #0
    e900:	e7f5      	b.n	e8ee <__ssvfiscanf_r+0x1ca>
    e902:	9945      	ldr	r1, [sp, #276]	; 0x114
    e904:	06cb      	lsls	r3, r1, #27
    e906:	d500      	bpl.n	e90a <__ssvfiscanf_r+0x1e6>
    e908:	e753      	b.n	e7b2 <__ssvfiscanf_r+0x8e>
    e90a:	9b03      	ldr	r3, [sp, #12]
    e90c:	9a49      	ldr	r2, [sp, #292]	; 0x124
    e90e:	07c8      	lsls	r0, r1, #31
    e910:	d504      	bpl.n	e91c <__ssvfiscanf_r+0x1f8>
    e912:	1d19      	adds	r1, r3, #4
    e914:	9103      	str	r1, [sp, #12]
    e916:	681b      	ldr	r3, [r3, #0]
    e918:	801a      	strh	r2, [r3, #0]
    e91a:	e74a      	b.n	e7b2 <__ssvfiscanf_r+0x8e>
    e91c:	1d19      	adds	r1, r3, #4
    e91e:	9103      	str	r1, [sp, #12]
    e920:	681b      	ldr	r3, [r3, #0]
    e922:	601a      	str	r2, [r3, #0]
    e924:	e745      	b.n	e7b2 <__ssvfiscanf_r+0x8e>
    e926:	2305      	movs	r3, #5
    e928:	e7e1      	b.n	e8ee <__ssvfiscanf_r+0x1ca>
    e92a:	2303      	movs	r3, #3
    e92c:	934b      	str	r3, [sp, #300]	; 0x12c
    e92e:	3307      	adds	r3, #7
    e930:	9346      	str	r3, [sp, #280]	; 0x118
    e932:	686b      	ldr	r3, [r5, #4]
    e934:	2b00      	cmp	r3, #0
    e936:	dd04      	ble.n	e942 <__ssvfiscanf_r+0x21e>
    e938:	9b45      	ldr	r3, [sp, #276]	; 0x114
    e93a:	9301      	str	r3, [sp, #4]
    e93c:	065b      	lsls	r3, r3, #25
    e93e:	d518      	bpl.n	e972 <__ssvfiscanf_r+0x24e>
    e940:	e01f      	b.n	e982 <__ssvfiscanf_r+0x25e>
    e942:	2186      	movs	r1, #134	; 0x86
    e944:	23c0      	movs	r3, #192	; 0xc0
    e946:	0049      	lsls	r1, r1, #1
    e948:	aa02      	add	r2, sp, #8
    e94a:	1852      	adds	r2, r2, r1
    e94c:	005b      	lsls	r3, r3, #1
    e94e:	58d3      	ldr	r3, [r2, r3]
    e950:	1c38      	adds	r0, r7, #0
    e952:	1c29      	adds	r1, r5, #0
    e954:	4798      	blx	r3
    e956:	2800      	cmp	r0, #0
    e958:	d0ee      	beq.n	e938 <__ssvfiscanf_r+0x214>
    e95a:	e79e      	b.n	e89a <__ssvfiscanf_r+0x176>
    e95c:	9a49      	ldr	r2, [sp, #292]	; 0x124
    e95e:	9201      	str	r2, [sp, #4]
    e960:	3201      	adds	r2, #1
    e962:	9249      	str	r2, [sp, #292]	; 0x124
    e964:	686a      	ldr	r2, [r5, #4]
    e966:	3a01      	subs	r2, #1
    e968:	606a      	str	r2, [r5, #4]
    e96a:	2a00      	cmp	r2, #0
    e96c:	dd13      	ble.n	e996 <__ssvfiscanf_r+0x272>
    e96e:	3301      	adds	r3, #1
    e970:	602b      	str	r3, [r5, #0]
    e972:	682b      	ldr	r3, [r5, #0]
    e974:	4924      	ldr	r1, [pc, #144]	; (ea08 <__ssvfiscanf_r+0x2e4>)
    e976:	781a      	ldrb	r2, [r3, #0]
    e978:	6809      	ldr	r1, [r1, #0]
    e97a:	188a      	adds	r2, r1, r2
    e97c:	7852      	ldrb	r2, [r2, #1]
    e97e:	0712      	lsls	r2, r2, #28
    e980:	d4ec      	bmi.n	e95c <__ssvfiscanf_r+0x238>
    e982:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    e984:	2b02      	cmp	r3, #2
    e986:	dc13      	bgt.n	e9b0 <__ssvfiscanf_r+0x28c>
    e988:	1c38      	adds	r0, r7, #0
    e98a:	a945      	add	r1, sp, #276	; 0x114
    e98c:	1c2a      	adds	r2, r5, #0
    e98e:	ab03      	add	r3, sp, #12
    e990:	f7fc fab6 	bl	af00 <_scanf_chars>
    e994:	e01f      	b.n	e9d6 <__ssvfiscanf_r+0x2b2>
    e996:	2186      	movs	r1, #134	; 0x86
    e998:	23c0      	movs	r3, #192	; 0xc0
    e99a:	0049      	lsls	r1, r1, #1
    e99c:	aa02      	add	r2, sp, #8
    e99e:	1852      	adds	r2, r2, r1
    e9a0:	005b      	lsls	r3, r3, #1
    e9a2:	58d3      	ldr	r3, [r2, r3]
    e9a4:	1c38      	adds	r0, r7, #0
    e9a6:	1c29      	adds	r1, r5, #0
    e9a8:	4798      	blx	r3
    e9aa:	2800      	cmp	r0, #0
    e9ac:	d0e1      	beq.n	e972 <__ssvfiscanf_r+0x24e>
    e9ae:	e774      	b.n	e89a <__ssvfiscanf_r+0x176>
    e9b0:	2b04      	cmp	r3, #4
    e9b2:	dc06      	bgt.n	e9c2 <__ssvfiscanf_r+0x29e>
    e9b4:	1c38      	adds	r0, r7, #0
    e9b6:	a945      	add	r1, sp, #276	; 0x114
    e9b8:	1c2a      	adds	r2, r5, #0
    e9ba:	ab03      	add	r3, sp, #12
    e9bc:	f7fc fafe 	bl	afbc <_scanf_i>
    e9c0:	e009      	b.n	e9d6 <__ssvfiscanf_r+0x2b2>
    e9c2:	4b13      	ldr	r3, [pc, #76]	; (ea10 <__ssvfiscanf_r+0x2ec>)
    e9c4:	2b00      	cmp	r3, #0
    e9c6:	d100      	bne.n	e9ca <__ssvfiscanf_r+0x2a6>
    e9c8:	e6f3      	b.n	e7b2 <__ssvfiscanf_r+0x8e>
    e9ca:	1c38      	adds	r0, r7, #0
    e9cc:	a945      	add	r1, sp, #276	; 0x114
    e9ce:	1c2a      	adds	r2, r5, #0
    e9d0:	ab03      	add	r3, sp, #12
    e9d2:	f7fc f8ab 	bl	ab2c <_scanf_float>
    e9d6:	2801      	cmp	r0, #1
    e9d8:	d007      	beq.n	e9ea <__ssvfiscanf_r+0x2c6>
    e9da:	2802      	cmp	r0, #2
    e9dc:	d000      	beq.n	e9e0 <__ssvfiscanf_r+0x2bc>
    e9de:	e6e8      	b.n	e7b2 <__ssvfiscanf_r+0x8e>
    e9e0:	e75b      	b.n	e89a <__ssvfiscanf_r+0x176>
    e9e2:	89ab      	ldrh	r3, [r5, #12]
    e9e4:	065b      	lsls	r3, r3, #25
    e9e6:	d504      	bpl.n	e9f2 <__ssvfiscanf_r+0x2ce>
    e9e8:	e001      	b.n	e9ee <__ssvfiscanf_r+0x2ca>
    e9ea:	9848      	ldr	r0, [sp, #288]	; 0x120
    e9ec:	e001      	b.n	e9f2 <__ssvfiscanf_r+0x2ce>
    e9ee:	2001      	movs	r0, #1
    e9f0:	4240      	negs	r0, r0
    e9f2:	23a7      	movs	r3, #167	; 0xa7
    e9f4:	009b      	lsls	r3, r3, #2
    e9f6:	449d      	add	sp, r3
    e9f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e9fa:	46c0      	nop			; (mov r8, r8)
    e9fc:	fffffd64 	.word	0xfffffd64
    ea00:	0000e66d 	.word	0x0000e66d
    ea04:	0000e6e7 	.word	0x0000e6e7
    ea08:	20000138 	.word	0x20000138
    ea0c:	0000fa56 	.word	0x0000fa56
    ea10:	0000ab2d 	.word	0x0000ab2d

0000ea14 <_read_r>:
    ea14:	b538      	push	{r3, r4, r5, lr}
    ea16:	1c05      	adds	r5, r0, #0
    ea18:	2000      	movs	r0, #0
    ea1a:	4c07      	ldr	r4, [pc, #28]	; (ea38 <_read_r+0x24>)
    ea1c:	6020      	str	r0, [r4, #0]
    ea1e:	1c08      	adds	r0, r1, #0
    ea20:	1c11      	adds	r1, r2, #0
    ea22:	1c1a      	adds	r2, r3, #0
    ea24:	f7f5 fa44 	bl	3eb0 <_read>
    ea28:	1c43      	adds	r3, r0, #1
    ea2a:	d103      	bne.n	ea34 <_read_r+0x20>
    ea2c:	6823      	ldr	r3, [r4, #0]
    ea2e:	2b00      	cmp	r3, #0
    ea30:	d000      	beq.n	ea34 <_read_r+0x20>
    ea32:	602b      	str	r3, [r5, #0]
    ea34:	bd38      	pop	{r3, r4, r5, pc}
    ea36:	46c0      	nop			; (mov r8, r8)
    ea38:	200047c8 	.word	0x200047c8

0000ea3c <_malloc_usable_size_r>:
    ea3c:	1f0b      	subs	r3, r1, #4
    ea3e:	681a      	ldr	r2, [r3, #0]
    ea40:	1f10      	subs	r0, r2, #4
    ea42:	2a00      	cmp	r2, #0
    ea44:	da04      	bge.n	ea50 <_malloc_usable_size_r+0x14>
    ea46:	1889      	adds	r1, r1, r2
    ea48:	3904      	subs	r1, #4
    ea4a:	680b      	ldr	r3, [r1, #0]
    ea4c:	18d0      	adds	r0, r2, r3
    ea4e:	3804      	subs	r0, #4
    ea50:	4770      	bx	lr
	...

0000ea54 <__gnu_thumb1_case_uqi>:
    ea54:	b402      	push	{r1}
    ea56:	4671      	mov	r1, lr
    ea58:	0849      	lsrs	r1, r1, #1
    ea5a:	0049      	lsls	r1, r1, #1
    ea5c:	5c09      	ldrb	r1, [r1, r0]
    ea5e:	0049      	lsls	r1, r1, #1
    ea60:	448e      	add	lr, r1
    ea62:	bc02      	pop	{r1}
    ea64:	4770      	bx	lr
    ea66:	46c0      	nop			; (mov r8, r8)
    ea68:	00000152 	.word	0x00000152
    ea6c:	00000152 	.word	0x00000152
    ea70:	00000140 	.word	0x00000140
    ea74:	00000140 	.word	0x00000140
    ea78:	00000152 	.word	0x00000152
    ea7c:	00000152 	.word	0x00000152
    ea80:	00000152 	.word	0x00000152
    ea84:	00000152 	.word	0x00000152
    ea88:	00000152 	.word	0x00000152
    ea8c:	00000152 	.word	0x00000152
    ea90:	00000152 	.word	0x00000152
    ea94:	00000152 	.word	0x00000152
    ea98:	00000152 	.word	0x00000152
    ea9c:	00000152 	.word	0x00000152
    eaa0:	00000152 	.word	0x00000152
    eaa4:	00000152 	.word	0x00000152
    eaa8:	00000140 	.word	0x00000140
    eaac:	00000140 	.word	0x00000140
    eab0:	00000152 	.word	0x00000152
    eab4:	00000140 	.word	0x00000140
    eab8:	454c4449 	.word	0x454c4449
    eabc:	00000000 	.word	0x00000000
    eac0:	2d6a626f 	.word	0x2d6a626f
    eac4:	6e69703e 	.word	0x6e69703e
    eac8:	203d2120 	.word	0x203d2120
    eacc:	6e695028 	.word	0x6e695028
    ead0:	656d614e 	.word	0x656d614e
    ead4:	00434e29 	.word	0x00434e29
    ead8:	2e2f2e2e 	.word	0x2e2f2e2e
    eadc:	65626d2f 	.word	0x65626d2f
    eae0:	41542f64 	.word	0x41542f64
    eae4:	54454752 	.word	0x54454752
    eae8:	4d41535f 	.word	0x4d41535f
    eaec:	47313252 	.word	0x47313252
    eaf0:	2f413831 	.word	0x2f413831
    eaf4:	47524154 	.word	0x47524154
    eaf8:	415f5445 	.word	0x415f5445
    eafc:	6c656d74 	.word	0x6c656d74
    eb00:	5241542f 	.word	0x5241542f
    eb04:	5f544547 	.word	0x5f544547
    eb08:	5f4d4153 	.word	0x5f4d4153
    eb0c:	74726f43 	.word	0x74726f43
    eb10:	304d7865 	.word	0x304d7865
    eb14:	70672f50 	.word	0x70672f50
    eb18:	6f5f6f69 	.word	0x6f5f6f69
    eb1c:	63656a62 	.word	0x63656a62
    eb20:	00682e74 	.word	0x00682e74
    eb24:	65746e69 	.word	0x65746e69
    eb28:	6c616e72 	.word	0x6c616e72
    eb2c:	6f6c6320 	.word	0x6f6c6320
    eb30:	63206b63 	.word	0x63206b63
    eb34:	69666e6f 	.word	0x69666e6f
    eb38:	000a0d67 	.word	0x000a0d67
    eb3c:	7774656e 	.word	0x7774656e
    eb40:	206b726f 	.word	0x206b726f
    eb44:	666e6f63 	.word	0x666e6f63
    eb48:	0a0d6769 	.word	0x0a0d6769
    eb4c:	00000000 	.word	0x00000000
    eb50:	0a0d0a0d 	.word	0x0a0d0a0d
    eb54:	2a2a2a2a 	.word	0x2a2a2a2a
    eb58:	2a2a2a2a 	.word	0x2a2a2a2a
    eb5c:	2a2a2a2a 	.word	0x2a2a2a2a
    eb60:	2a2a2a2a 	.word	0x2a2a2a2a
    eb64:	2a2a2a2a 	.word	0x2a2a2a2a
    eb68:	2a2a2a2a 	.word	0x2a2a2a2a
    eb6c:	2a2a2a2a 	.word	0x2a2a2a2a
    eb70:	2a2a2a2a 	.word	0x2a2a2a2a
    eb74:	2a2a2a2a 	.word	0x2a2a2a2a
    eb78:	2a2a2a2a 	.word	0x2a2a2a2a
    eb7c:	2a2a2a2a 	.word	0x2a2a2a2a
    eb80:	2a2a2a2a 	.word	0x2a2a2a2a
    eb84:	2a2a2a2a 	.word	0x2a2a2a2a
    eb88:	2a2a2a2a 	.word	0x2a2a2a2a
    eb8c:	2a2a2a2a 	.word	0x2a2a2a2a
    eb90:	2a2a2a2a 	.word	0x2a2a2a2a
    eb94:	2a2a2a2a 	.word	0x2a2a2a2a
    eb98:	0a0d2a2a 	.word	0x0a0d2a2a
    eb9c:	00000000 	.word	0x00000000
    eba0:	6b636974 	.word	0x6b636974
    eba4:	6d697420 	.word	0x6d697420
    eba8:	25203a65 	.word	0x25203a65
    ebac:	6d20756c 	.word	0x6d20756c
    ebb0:	000a0d73 	.word	0x000a0d73
    ebb4:	7473614d 	.word	0x7473614d
    ebb8:	63207265 	.word	0x63207265
    ebbc:	6b636f6c 	.word	0x6b636f6c
    ebc0:	00000a0d 	.word	0x00000a0d
    ebc4:	20646e65 	.word	0x20646e65
    ebc8:	666e6f63 	.word	0x666e6f63
    ebcc:	61206769 	.word	0x61206769
    ebd0:	696c7070 	.word	0x696c7070
    ebd4:	69746163 	.word	0x69746163
    ebd8:	62206e6f 	.word	0x62206e6f
    ebdc:	6e696765 	.word	0x6e696765
    ebe0:	00000a0d 	.word	0x00000a0d
    ebe4:	2a2a0a0d 	.word	0x2a2a0a0d
    ebe8:	2a2a2a2a 	.word	0x2a2a2a2a
    ebec:	2a2a2a2a 	.word	0x2a2a2a2a
    ebf0:	2a2a2a2a 	.word	0x2a2a2a2a
    ebf4:	2a2a2a2a 	.word	0x2a2a2a2a
    ebf8:	2a2a2a2a 	.word	0x2a2a2a2a
    ebfc:	2a2a2a2a 	.word	0x2a2a2a2a
    ec00:	2a2a2a2a 	.word	0x2a2a2a2a
    ec04:	2a2a2a2a 	.word	0x2a2a2a2a
    ec08:	2a2a2a2a 	.word	0x2a2a2a2a
    ec0c:	2a2a2a2a 	.word	0x2a2a2a2a
    ec10:	2a2a2a2a 	.word	0x2a2a2a2a
    ec14:	2a2a2a2a 	.word	0x2a2a2a2a
    ec18:	2a2a2a2a 	.word	0x2a2a2a2a
    ec1c:	2a2a2a2a 	.word	0x2a2a2a2a
    ec20:	2a2a2a2a 	.word	0x2a2a2a2a
    ec24:	2a2a2a2a 	.word	0x2a2a2a2a
    ec28:	2a2a2a2a 	.word	0x2a2a2a2a
    ec2c:	0a0d0a0d 	.word	0x0a0d0a0d
    ec30:	00000000 	.word	0x00000000
    ec34:	70617274 	.word	0x70617274
    ec38:	21212121 	.word	0x21212121
    ec3c:	21212121 	.word	0x21212121
    ec40:	21212121 	.word	0x21212121
    ec44:	21212121 	.word	0x21212121
    ec48:	21212121 	.word	0x21212121
    ec4c:	21212121 	.word	0x21212121
    ec50:	21212121 	.word	0x21212121
    ec54:	21212121 	.word	0x21212121
    ec58:	21212121 	.word	0x21212121
    ec5c:	21212121 	.word	0x21212121
    ec60:	0a0d2121 	.word	0x0a0d2121
    ec64:	00000000 	.word	0x00000000
    ec68:	000024f8 	.word	0x000024f8
    ec6c:	00002518 	.word	0x00002518
    ec70:	00002508 	.word	0x00002508
    ec74:	00002538 	.word	0x00002538
    ec78:	00002528 	.word	0x00002528
    ec7c:	00002548 	.word	0x00002548
    ec80:	0000273e 	.word	0x0000273e
    ec84:	00002806 	.word	0x00002806
    ec88:	00002760 	.word	0x00002760
    ec8c:	000027a6 	.word	0x000027a6
    ec90:	00002788 	.word	0x00002788
    ec94:	000027b0 	.word	0x000027b0
    ec98:	000027c4 	.word	0x000027c4
    ec9c:	000027d8 	.word	0x000027d8
    eca0:	000027f8 	.word	0x000027f8

0000eca4 <_ZZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_tE8pwrtable>:
    eca4:	0f0f0f0f 0e0e0e0f 0c0c0d0d 08090a0b     ................
    ecb4:	02040607 00000000 6e72656b 63206c65     ........kernel c
    ecc4:	69666e6f 000a0d67 00494d48 656d6974     onfig...HMI.time
    ecd4:	00000000 666e6f63 70206669 0a0d7370     ....confif pps..
    ece4:	00000000 666f5309 72617774 6f432065     .....Software Co
    ecf4:	63657272 6e6f6974 00000020 70750909     rrection .....up
    ed04:	65746164 6d697420 6f632065 203a7272     date time corr: 
    ed14:	25286425 73202964 206e6769 6425203a     %d(%d) sign : %d
    ed24:	74697720 64252068 6d617320 00656c70      with %d sample.
    ed34:	646e6509 666f5320 72617774 6f632065     .end Software co
    ed44:	63657272 6e6f6974 00000000 72614809     rrection.....Har
    ed54:	72617764 6f632065 63657272 6e6f6974     dware correction
    ed64:	00000000 62460909 3a747365 20752520     ......Fbest: %u 
    ed74:	202c7a48 65737546 7525203d 207a4820     Hz, Fuse= %u Hz 
    ed84:	6e756f63 64253d74 00000000 646e6509     count=%d.....end
    ed94:	726f6320 74636572 006e6f69 20756c25      correction.%lu 
    eda4:	75252c73 00000a0d 756c252d 252c7320     s,%u....-%lu s,%
    edb4:	000a0d75 70750909 65746164 6f6c6320     u.....update clo
    edc4:	6f206b63 65736666 2b203a74 73756c25     ck offset: +%lus
    edd4:	646c252c 6c252b5b 252c7375 6d20756c     ,%ld[+%lus,%lu m
    ede4:	257e2c73 7520756c 74095d73 6c25203a     s,~%lu us].t: %l
    edf4:	6c252c75 00000075 70750909 65746164     u,%lu.....update
    ee04:	6f6c6320 6f206b63 65736666 2d203a74      clock offset: -
    ee14:	73756c25 646c252c 6c252d5b 252c7375     %lus,%ld[-%lus,%
    ee24:	736d756c 6c257e2c 73752075 3a74095d     lums,~%lu us].t:
    ee34:	756c2520 756c252c 00000000 6e797309      %lu,%lu.....syn
    ee44:	65732063 0000646e 6c656409 72207961     c send...delay r
    ee54:	6f707365 2065736e 646e6573 64692820     esponse send (id
    ee64:	6425203a 00000029 72724509 20727565     : %d)....Erreur 
    ee74:	00637263 6c656409 72207961 65757165     crc..delay reque
    ee84:	72207473 69656365 00006576 70657209     st receive...rep
    ee94:	2074726f 65636572 00657669 65727265     ort receive.erre
    eea4:	63207275 00006372 72724509 20727565     ur crc...Erreur 
    eeb4:	65707974 6b6e7520 00776f6e 666e6f63     type unknow.conf
    eec4:	48206769 0d20494d 0000000a              ig HMI .....

0000eed0 <__stdin_name>:
    eed0:	6474732f 00006e69                       /stdin..

0000eed8 <__stderr_name>:
    eed8:	6474732f 00727265                       /stderr.

0000eee0 <__stdout_name>:
    eee0:	6474732f 0074756f                       /stdout.

0000eee8 <_ZTVN4mbed10FileHandleE>:
	...
    eef0:	00003f69 00003f69 00003f69 00003f69     i?..i?..i?..i?..
    ef00:	00003f69 00003f69 00003cbd 00000000     i?..i?...<......
    ef10:	00000000 0070253a 65637845 6f697470     ....:%p.Exceptio
    ef20:	0000006e                                n...

0000ef24 <CSWTCH.41>:
    ef24:	00100000 00200000 00300000 006a626f     ...... ...0.obj.
    ef34:	4a5c3a43 696b6e65 775c736e 736b726f     C:\Jenkins\works
    ef44:	65636170 65626d5c 2d322d64 6c697562     pace\mbed-2-buil
    ef54:	696c2d64 72617262 61685c79 61745c6c     d-library\hal\ta
    ef64:	74656772 61685c73 41545c6c 54454752     rgets\hal\TARGET
    ef74:	6d74415f 545c6c65 45475241 41535f54     _Atmel\TARGET_SA
    ef84:	6f435f4d 78657472 5c50304d 69726573     M_CortexM0P\seri
    ef94:	615f6c61 632e6970 00000000 75616228     al_api.c....(bau
    efa4:	74617264 3d3d2065 30313120 7c7c2029     drate == 110) ||
    efb4:	61622820 61726475 3d206574 3531203d      (baudrate == 15
    efc4:	7c202930 6228207c 72647561 20657461     0) || (baudrate 
    efd4:	33203d3d 20293030 28207c7c 64756162     == 300) || (baud
    efe4:	65746172 203d3d20 30303231 7c7c2029     rate == 1200) ||
    eff4:	61622820 61726475 3d206574 3432203d      (baudrate == 24
    f004:	20293030 28207c7c 64756162 65746172     00) || (baudrate
    f014:	203d3d20 30303834 7c7c2029 61622820      == 4800) || (ba
    f024:	61726475 3d206574 3639203d 20293030     udrate == 9600) 
    f034:	28207c7c 64756162 65746172 203d3d20     || (baudrate == 
    f044:	30323931 7c202930 6228207c 72647561     19200) || (baudr
    f054:	20657461 33203d3d 30303438 7c7c2029     ate == 38400) ||
    f064:	61622820 61726475 3d206574 3735203d      (baudrate == 57
    f074:	29303036 207c7c20 75616228 74617264     600) || (baudrat
    f084:	3d3d2065 35313120 29303032 207c7c20     e == 115200) || 
    f094:	75616228 74617264 3d3d2065 30333220     (baudrate == 230
    f0a4:	29303034 207c7c20 75616228 74617264     400) || (baudrat
    f0b4:	3d3d2065 30363420 29303038 207c7c20     e == 460800) || 
    f0c4:	75616228 74617264 3d3d2065 31323920     (baudrate == 921
    f0d4:	29303036 00000000 6f747328 69625f70     600)....(stop_bi
    f0e4:	3d207374 2931203d 207c7c20 6f747328     ts == 1) || (sto
    f0f4:	69625f70 3d207374 2932203d 00000000     p_bits == 2)....
    f104:	72617028 20797469 50203d3d 74697261     (parity == Parit
    f114:	6e6f4e79 7c202965 7028207c 74697261     yNone) || (parit
    f124:	3d3d2079 72615020 4f797469 20296464     y == ParityOdd) 
    f134:	28207c7c 69726170 3d207974 6150203d     || (parity == Pa
    f144:	79746972 6e657645 00000029 74616428     rityEven)...(dat
    f154:	69625f61 3d207374 2935203d 207c7c20     a_bits == 5) || 
    f164:	74616428 69625f61 3d207374 2936203d     (data_bits == 6)
    f174:	207c7c20 74616428 69625f61 3d207374      || (data_bits =
    f184:	2937203d 207c7c20 74616428 69625f61     = 7) || (data_bi
    f194:	3d207374 2938203d 00000000 21207874     ts == 8)....tx !
    f1a4:	7628203d 2a64696f 00003029 74646977     = (void*)0..widt
    f1b4:	3d3d2068 00003820 21207872 7628203d     h == 8..rx != (v
    f1c4:	2a64696f 00003029 00000000              oid*)0......

0000f1d0 <_ZTVN4mbed3SPIE>:
	...
    f1d8:	00004cbd 00004b4d 00004b7d 00000000     .L..MK..}K......

0000f1e8 <_ZTVN4mbed6SerialE>:
	...
    f1f0:	00002d9d 00003af5 00004cd1 00004ce9     .-...:...L...L..
    f200:	ffffff24 00000000 00004e61 00004e5d     $.......aN..]N..
    f210:	00004e8d 00004ebd 00004eb9 00004ec1     .N...N...N...N..
    f220:	00004ec5 00002dc5 00003b29 00004cf1     .N...-..);...L..
    f230:	00004cd9 ffffff20 00000000 00002dd5     .L.. ........-..
    f240:	00003b39 00000000                       9;......

0000f248 <_ZTVN4mbed10SerialBaseE>:
	...
    f250:	00002d99 00002de5                       .-...-..

0000f258 <_ZTVN4mbed6StreamE>:
	...
    f260:	00004e61 00004e5d 00004e8d 00004ebd     aN..]N...N...N..
    f270:	00004eb9 00004ec1 00004ec5 00000000     .N...N...N......
    f280:	00000000 00003f69 00003f69 fffffffc     ....i?..i?......
	...
    f29c:	00002b77 6465626d 73736120 61747265     w+..mbed asserta
    f2ac:	6e6f6974 69616620 3a64656c 2c732520     tion failed: %s,
    f2bc:	6c696620 25203a65 6c202c73 20656e69      file: %s, line 
    f2cc:	0a206425 00000000 4a5c3a43 696b6e65     %d .....C:\Jenki
    f2dc:	775c736e 736b726f 65636170 65626d5c     ns\workspace\mbe
    f2ec:	2d322d64 6c697562 696c2d64 72617262     d-2-build-librar
    f2fc:	622e5c79 646c6975 65626d5c 41545c64     y\.build\mbed\TA
    f30c:	54454752 4d41535f 47313252 5c413831     RGET_SAMR21G18A\
    f31c:	47524154 415f5445 6c656d74 5241545c     TARGET_Atmel\TAR
    f32c:	5f544547 5f4d4153 74726f43 304d7865     GET_SAM_CortexM0
    f33c:	70672f50 6f5f6f69 63656a62 00682e74     P/gpio_object.h.
    f34c:	6c756f63 6f6e2064 69702074 74756f6e     could not pinout
    f35c:	00000000 6d6e6970 6d207061 6d2d7369     ....pinmap mis-m
    f36c:	68637461 00000000 6d6e6970 6e207061     atch....pinmap n
    f37c:	6620746f 646e756f 726f6620 72657020     ot found for per
    f38c:	65687069 006c6172 6d6e6970 6e207061     ipheral.pinmap n
    f39c:	6620746f 646e756f 726f6620 6e756620     ot found for fun
    f3ac:	6f697463 0000006e                       ction...

0000f3b4 <PinMap_SERCOM_PADEx>:
    f3b4:	00000008 00000002 00000003 00000009     ................
    f3c4:	00000012 00000003 00000010 00000003     ................
    f3d4:	00000003 00000011 00000013 00000003     ................
    f3e4:	00000012 00000023 00000003 00000013     ....#...........
    f3f4:	00000033 00000003 00000016 00000005     3...............
    f404:	00000003 00000017 00000015 00000003     ................
    f414:	00000018 00000025 00000003 00000019     ....%...........
    f424:	00000035 00000003 000000ff ffffffff     5...............
    f434:	ffffffff                                ....

0000f438 <PinMap_SERCOM_PAD>:
    f438:	00000000 00000001 00000003 00000001     ................
    f448:	00000011 00000003 00000004 00000000     ................
    f458:	00000003 00000005 00000010 00000003     ................
    f468:	00000006 00000020 00000003 00000007     .... ...........
    f478:	00000030 00000003 00000008 00000000     0...............
    f488:	00000002 00000009 00000010 00000002     ................
    f498:	0000000c 00000002 00000002 0000000d     ................
    f4a8:	00000012 00000002 0000000e 00000022     ............"...
    f4b8:	00000002 0000000f 00000032 00000002     ........2.......
    f4c8:	00000010 00000001 00000002 00000011     ................
    f4d8:	00000011 00000002 00000012 00000021     ............!...
    f4e8:	00000002 00000013 00000031 00000002     ........1.......
    f4f8:	00000016 00000003 00000002 00000017     ................
    f508:	00000013 00000002 00000018 00000023     ............#...
    f518:	00000002 00000019 00000033 00000002     ........3.......
    f528:	0000001b 00000003 00000005 0000001c     ................
    f538:	00000013 00000005 0000001e 00000021     ............!...
    f548:	00000003 0000001f 00000031 00000003     ........1.......
    f558:	00000022 00000005 00000003 00000023     "...........#...
    f568:	00000015 00000003 00000036 00000025     ........6...%...
    f578:	00000003 00000037 00000035 00000003     ....7...5.......
    f588:	0000003e 00000024 00000005 0000003f     >...$.......?...
    f598:	00000014 00000005 00000052 00000034     ........R...4...
    f5a8:	00000005 00000053 00000004 00000005     ....S...........
    f5b8:	000000ff ffffffff ffffffff 42000800     ...............B
    f5c8:	42000c00 42001000 42001400 42001800     ...B...B...B...B
    f5d8:	42001c00 000052e8 00005300 00005300     ...B.R...S...S..
    f5e8:	000052ae 000052ae 000052b4 000052ba     .R...R...R...R..
    f5f8:	000052ca 000052ee 000053a4 000053b2     .R...R...S...S..
    f608:	000053b2 00005336 0000533a 00005348     .S..6S..:S..HS..
    f618:	00005356 00005364 00005394 206e6970     VS..dS...S..pin 
    f628:	28203d21 4e6e6950 29656d61 0000434e     != (PinName)NC..
    f638:	4a5c3a43 696b6e65 775c736e 736b726f     C:\Jenkins\works
    f648:	65636170 65626d5c 2d322d64 6c697562     pace\mbed-2-buil
    f658:	696c2d64 72617262 61685c79 61745c6c     d-library\hal\ta
    f668:	74656772 61685c73 41545c6c 54454752     rgets\hal\TARGET
    f678:	6d74415f 545c6c65 45475241 41535f54     _Atmel\TARGET_SA
    f688:	6f435f4d 78657472 5c50304d 6f697067     M_CortexM0P\gpio
    f698:	6970615f 0000632e 4a5c3a43 696b6e65     _api.c..C:\Jenki
    f6a8:	775c736e 736b726f 65636170 65626d5c     ns\workspace\mbe
    f6b8:	2d322d64 6c697562 696c2d64 72617262     d-2-build-librar
    f6c8:	61685c79 61745c6c 74656772 61685c73     y\hal\targets\ha
    f6d8:	41545c6c 54454752 6d74415f 545c6c65     l\TARGET_Atmel\T
    f6e8:	45475241 41535f54 6f435f4d 78657472     ARGET_SAM_Cortex
    f6f8:	5c50304d 6d6e6970 632e7061 00000000     M0P\pinmap.c....
    f708:	74726f70 00000000 42000800 42000c00     port.......B...B
    f718:	42001000 42001400 42001800 42001c00     ...B...B...B...B
    f728:	6c637963 705f7365 755f7265 203e2073     cycles_per_us > 
    f738:	00000030 4a5c3a43 696b6e65 775c736e     0...C:\Jenkins\w
    f748:	736b726f 65636170 65626d5c 2d322d64     orkspace\mbed-2-
    f758:	6c697562 696c2d64 72617262 61685c79     build-library\ha
    f768:	61745c6c 74656772 61685c73 41545c6c     l\targets\hal\TA
    f778:	54454752 6d74415f 545c6c65 45475241     RGET_Atmel\TARGE
    f788:	41535f54 6f435f4d 78657472 5c50304d     T_SAM_CortexM0P\
    f798:	745f7375 656b6369 00632e72 75646f6d     us_ticker.c.modu
    f7a8:	0000656c                                le..

0000f7ac <tc_interrupt_vectors.12802>:
    f7ac:	00141312 4a5c3a43 696b6e65 775c736e     ....C:\Jenkins\w
    f7bc:	736b726f 65636170 65626d5c 2d322d64     orkspace\mbed-2-
    f7cc:	6c697562 696c2d64 72617262 61685c79     build-library\ha
    f7dc:	61745c6c 74656772 61685c73 41545c6c     l\targets\hal\TA
    f7ec:	54454752 6d74415f 545c6c65 45475241     RGET_Atmel\TARGE
    f7fc:	41535f54 6f435f4d 78657472 5c50304d     T_SAM_CortexM0P\
    f80c:	5f697073 2e697061 00000063 6b6c6373     spi_api.c...sclk
    f81c:	203d2120 0000434e 00000000               != NC......

0000f828 <_ZTVN4mbed8FileBaseE>:
	...
    f830:	00006099 000060cd                       .`...`..

0000f838 <_ZTVN4mbed8FileLikeE>:
	...
    f840:	00003f69 00003f69 00003f69 00003f69     i?..i?..i?..i?..
    f850:	00003f69 00003f69 00003cbd 00000000     i?..i?...<......
    f860:	00000000 fffffffc 00000000 00000000     ................
    f870:	00000000                                ....

0000f874 <us_interface>:
    f874:	000059bd 000059d1 00005a59 00005a7d     .Y...Y..YZ..}Z..
    f884:	000059f1                                .Y..

0000f888 <us_data>:
    f888:	0000f874 20004704 42002c00 42003000     t....G. .,.B.0.B
    f898:	42003400 001c1c1b 10000800 00002000     .4.B......... ..
    f8a8:	00006f3e 00006f06 00006f22 00006efa     >o...o.."o...n..
    f8b8:	00006f22 00006e66 00006f22 00006efa     "o..fn.."o...n..
    f8c8:	00006f06 00006f06 00006e66 00006efa     .o...o..fn...n..
    f8d8:	00006fa4 00006fa4 00006fa4 00006f28     .o...o...o..(o..
    f8e8:	00006f06 00006f06 00006fee 00006ef8     .o...o...o...n..
    f8f8:	00006fee 00006e66 00006fee 00006ef8     .o..fn...o...n..
    f908:	00006f06 00006f06 00006e66 00006ef8     .o...o..fn...n..
    f918:	00006fa4 00006fa4 00006fa4 00006fd2     .o...o...o...o..
    f928:	00007306 000072fe 000072fe 000072f6     .s...r...r...r..
    f938:	00007248 00007248 000072ec 000072f6     Hr..Hr...r...r..
    f948:	00007248 000072ec 00007248 000072f6     Hr...r..Hr...r..
    f958:	0000724a 0000724a 0000724a 00007390     Jr..Jr..Jr...s..
    f968:	000080b0 00007f9e 00008084 00007f8a     ................
    f978:	00008084 0000808e 00008084 00007f8a     ................
    f988:	00007f9e 00007f9e 0000808e 00007f8a     ................
    f998:	00007f94 00007f94 00007f94 000082f6     ................
    f9a8:	00008944 00008922 00008922 00008916     D..."...".......
    f9b8:	0000880a 0000880a 0000890a 00008916     ................
    f9c8:	0000880a 0000890a 0000880a 00008916     ................
    f9d8:	0000880e 0000880e 0000880e 00008b24     ............$...

0000f9e8 <__sf_fake_stdin>:
	...

0000fa08 <__sf_fake_stdout>:
	...

0000fa28 <__sf_fake_stderr>:
	...
    fa48:	00000043                                C...

0000fa4c <_global_impure_ptr>:
    fa4c:	200000d4 2b302d23 6c680020 6665004c     ... #-0+ .hlL.ef
    fa5c:	47464567 464e4900 666e6900 4e414e00     gEFG.INF.inf.NAN
    fa6c:	6e616e00 32313000 36353433 41393837     .nan.0123456789A
    fa7c:	45444342 31300046 35343332 39383736     BCDEF.0123456789
    fa8c:	64636261 65006665 00646c25 0000fab6     abcdef.e%ld.....
    fa9c:	0000fab9 0000fabc 61462d41 3938662d     ........A-Fa-f89
    faac:	33323130 37363534 2d2b005d 00303000     01234567].+-.00.
    fabc:	00005878                                xX..

0000fac0 <fpinan.5315>:
    fac0:	00000034 fffffbce 000003cb 00000001     4...............
	...

0000fad8 <tinytens>:
    fad8:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
    fae8:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
    faf8:	64ac6f43 11680628                       Co.d(.h.

0000fb00 <fpi.5279>:
    fb00:	00000035 fffffbce 000003cb 00000001     5...............
    fb10:	00000000                                ....

0000fb14 <_ctype_>:
    fb14:	20202000 20202020 28282020 20282828     .         ((((( 
    fb24:	20202020 20202020 20202020 20202020                     
    fb34:	10108820 10101010 10101010 10101010      ...............
    fb44:	04040410 04040404 10040404 10101010     ................
    fb54:	41411010 41414141 01010101 01010101     ..AAAAAA........
    fb64:	01010101 01010101 01010101 10101010     ................
    fb74:	42421010 42424242 02020202 02020202     ..BBBBBB........
    fb84:	02020202 02020202 02020202 10101010     ................
    fb94:	00000020 00000000 00000000 00000000      ...............
	...
    fc14:	666e4900 74696e69 614e0079 4f50004e     .Infinity.NaN.PO
    fc24:	00584953 0000002e 00000000              SIX.........

0000fc30 <__mprec_tens>:
    fc30:	00000000 3ff00000 00000000 40240000     .......?......$@
    fc40:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
    fc50:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
    fc60:	00000000 412e8480 00000000 416312d0     .......A......cA
    fc70:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
    fc80:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
    fc90:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
    fca0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
    fcb0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
    fcc0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
    fcd0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
    fce0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
    fcf0:	79d99db4 44ea7843                       ...yCx.D

0000fcf8 <__mprec_bigtens>:
    fcf8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
    fd08:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
    fd18:	7f73bf3c 75154fdd                       <.s..O.u

0000fd20 <p05.5314>:
    fd20:	00000005 00000019 0000007d              ........}...

0000fd2c <_init>:
    fd2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fd2e:	46c0      	nop			; (mov r8, r8)
    fd30:	bcf8      	pop	{r3, r4, r5, r6, r7}
    fd32:	bc08      	pop	{r3}
    fd34:	469e      	mov	lr, r3
    fd36:	4770      	bx	lr

0000fd38 <__init_array_start>:
    fd38:	000000dd 	.word	0x000000dd
    fd3c:	00001a25 	.word	0x00001a25
    fd40:	00001c45 	.word	0x00001c45
    fd44:	00003b49 	.word	0x00003b49
    fd48:	00003c2d 	.word	0x00003c2d

0000fd4c <_fini>:
    fd4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fd4e:	46c0      	nop			; (mov r8, r8)
    fd50:	bcf8      	pop	{r3, r4, r5, r6, r7}
    fd52:	bc08      	pop	{r3}
    fd54:	469e      	mov	lr, r3
    fd56:	4770      	bx	lr

0000fd58 <__fini_array_start>:
    fd58:	000000b5 	.word	0x000000b5
